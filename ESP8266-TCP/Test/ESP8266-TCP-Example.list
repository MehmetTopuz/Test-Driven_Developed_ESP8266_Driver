
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022ae8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006674  08022cc8  08022cc8  00032cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802933c  0802933c  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  0802933c  0802933c  0003933c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029344  08029344  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08029344  08029344  00039344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08029354  08029354  00039354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08029364  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c5c  2000033c  080296a0  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f98  080296a0  00040f98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006a08b  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bf3d  00000000  00000000  000aa3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004458  00000000  00000000  000b6338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004248  00000000  00000000  000ba790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d6dd  00000000  00000000  000be9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c6cb  00000000  00000000  000ec0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001140df  00000000  00000000  00118780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022c85f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014b04  00000000  00000000  0022c8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08022ca4 	.word	0x08022ca4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	08022ca4 	.word	0x08022ca4

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fe09 	bl	8001798 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fb4c 	bl	80012a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fb1e 	bl	80012a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 fae4 	bl	8001236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fafb 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f992 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ce4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ce8:	f000 fc8e 	bl	8001608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cf8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cfc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d013      	beq.n	8000d30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00b      	beq.n	8000d30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d18:	e000      	b.n	8000d1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f9      	beq.n	8000d1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d26:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
	return 1;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_kill>:

int _kill(int pid, int sig)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d58:	f01e faa4 	bl	801f2a4 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2216      	movs	r2, #22
 8000d60:	601a      	str	r2, [r3, #0]
	return -1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_exit>:

void _exit (int status)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d76:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffe7 	bl	8000d4e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d80:	e7fe      	b.n	8000d80 <_exit+0x12>

08000d82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e00a      	b.n	8000daa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d94:	f3af 8000 	nop.w
 8000d98:	4601      	mov	r1, r0
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	60ba      	str	r2, [r7, #8]
 8000da0:	b2ca      	uxtb	r2, r1
 8000da2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	3301      	adds	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	dbf0      	blt.n	8000d94 <_read+0x12>
	}

return len;
 8000db2:	687b      	ldr	r3, [r7, #4]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	e009      	b.n	8000de2 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	60ba      	str	r2, [r7, #8]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff8a 	bl	8000cf0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	3301      	adds	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	dbf1      	blt.n	8000dce <_write+0x12>
	}
	return len;
 8000dea:	687b      	ldr	r3, [r7, #4]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <_close>:

int _close(int file)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	return -1;
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e1c:	605a      	str	r2, [r3, #4]
	return 0;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_isatty>:

int _isatty(int file)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	return 1;
 8000e34:	2301      	movs	r3, #1
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
	return 0;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <_open>:

int _open(char *path, int flags, ...)
{
 8000e5c:	b40e      	push	{r1, r2, r3}
 8000e5e:	b480      	push	{r7}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	b003      	add	sp, #12
 8000e76:	4770      	bx	lr

08000e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e80:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <_sbrk+0x5c>)
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <_sbrk+0x60>)
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <_sbrk+0x64>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <_sbrk+0x68>)
 8000e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d207      	bcs.n	8000eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea8:	f01e f9fc 	bl	801f2a4 <__errno>
 8000eac:	4603      	mov	r3, r0
 8000eae:	220c      	movs	r2, #12
 8000eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb6:	e009      	b.n	8000ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <_sbrk+0x64>)
 8000ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20020000 	.word	0x20020000
 8000ed8:	00000400 	.word	0x00000400
 8000edc:	2000035c 	.word	0x2000035c
 8000ee0:	20000f98 	.word	0x20000f98

08000ee4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <SystemInit+0x20>)
 8000eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <SystemInit+0x20>)
 8000ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f0e:	490e      	ldr	r1, [pc, #56]	; (8000f48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f10:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <LoopForever+0xe>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f24:	4c0b      	ldr	r4, [pc, #44]	; (8000f54 <LoopForever+0x16>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f32:	f7ff ffd7 	bl	8000ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f36:	f01e fdd3 	bl	801fae0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f3a:	f002 fcef 	bl	800391c <main>

08000f3e <LoopForever>:

LoopForever:
    b LoopForever
 8000f3e:	e7fe      	b.n	8000f3e <LoopForever>
  ldr   r0, =_estack
 8000f40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f48:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f4c:	08029364 	.word	0x08029364
  ldr r2, =_sbss
 8000f50:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f54:	20000f98 	.word	0x20000f98

08000f58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC1_2_IRQHandler>

08000f5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 f95b 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f000 f80e 	bl	8000f8c <HAL_InitTick>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	71fb      	strb	r3, [r7, #7]
 8000f7a:	e001      	b.n	8000f80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f7c:	f7ff fde6 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f80:	79fb      	ldrb	r3, [r7, #7]

}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_InitTick+0x68>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d022      	beq.n	8000fe6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_InitTick+0x6c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_InitTick+0x68>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fac:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f966 	bl	8001286 <HAL_SYSTICK_Config>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10f      	bne.n	8000fe0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b0f      	cmp	r3, #15
 8000fc4:	d809      	bhi.n	8000fda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	f04f 30ff 	mov.w	r0, #4294967295
 8000fce:	f000 f932 	bl	8001236 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_InitTick+0x70>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	e007      	b.n	8000fea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e004      	b.n	8000fea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e001      	b.n	8000fea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2000000c 	.word	0x2000000c
 8000ff8:	20000004 	.word	0x20000004
 8000ffc:	20000008 	.word	0x20000008

08001000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_IncTick+0x1c>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_IncTick+0x20>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4413      	add	r3, r2
 800100e:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_IncTick+0x1c>)
 8001010:	6013      	str	r3, [r2, #0]
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	20000f84 	.word	0x20000f84
 8001020:	2000000c 	.word	0x2000000c

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000f84 	.word	0x20000f84

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d004      	beq.n	8001060 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_Delay+0x40>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4413      	add	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001060:	bf00      	nop
 8001062:	f7ff ffdf 	bl	8001024 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	429a      	cmp	r2, r3
 8001070:	d8f7      	bhi.n	8001062 <HAL_Delay+0x26>
  {
  }
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2000000c 	.word	0x2000000c

08001080 <__NVIC_SetPriorityGrouping>:
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <__NVIC_EnableIRQ+0x38>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff29 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff40 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff90 	bl	8001174 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5f 	bl	8001120 <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff33 	bl	80010e4 <__NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffa4 	bl	80011dc <SysTick_Config>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012ae:	e15a      	b.n	8001566 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 814c 	beq.w	8001560 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d00b      	beq.n	80012e8 <HAL_GPIO_Init+0x48>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d007      	beq.n	80012e8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012dc:	2b11      	cmp	r3, #17
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b12      	cmp	r3, #18
 80012e6:	d130      	bne.n	800134a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800131e:	2201      	movs	r2, #1
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f003 0201 	and.w	r2, r3, #1
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0xea>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b12      	cmp	r3, #18
 8001388:	d123      	bne.n	80013d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	691a      	ldr	r2, [r3, #16]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	08da      	lsrs	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3208      	adds	r2, #8
 80013cc:	6939      	ldr	r1, [r7, #16]
 80013ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0203 	and.w	r2, r3, #3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80a6 	beq.w	8001560 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001414:	4b5b      	ldr	r3, [pc, #364]	; (8001584 <HAL_GPIO_Init+0x2e4>)
 8001416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001418:	4a5a      	ldr	r2, [pc, #360]	; (8001584 <HAL_GPIO_Init+0x2e4>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6613      	str	r3, [r2, #96]	; 0x60
 8001420:	4b58      	ldr	r3, [pc, #352]	; (8001584 <HAL_GPIO_Init+0x2e4>)
 8001422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142c:	4a56      	ldr	r2, [pc, #344]	; (8001588 <HAL_GPIO_Init+0x2e8>)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001456:	d01f      	beq.n	8001498 <HAL_GPIO_Init+0x1f8>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a4c      	ldr	r2, [pc, #304]	; (800158c <HAL_GPIO_Init+0x2ec>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d019      	beq.n	8001494 <HAL_GPIO_Init+0x1f4>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a4b      	ldr	r2, [pc, #300]	; (8001590 <HAL_GPIO_Init+0x2f0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d013      	beq.n	8001490 <HAL_GPIO_Init+0x1f0>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a4a      	ldr	r2, [pc, #296]	; (8001594 <HAL_GPIO_Init+0x2f4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d00d      	beq.n	800148c <HAL_GPIO_Init+0x1ec>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a49      	ldr	r2, [pc, #292]	; (8001598 <HAL_GPIO_Init+0x2f8>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d007      	beq.n	8001488 <HAL_GPIO_Init+0x1e8>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a48      	ldr	r2, [pc, #288]	; (800159c <HAL_GPIO_Init+0x2fc>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d101      	bne.n	8001484 <HAL_GPIO_Init+0x1e4>
 8001480:	2305      	movs	r3, #5
 8001482:	e00a      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 8001484:	2306      	movs	r3, #6
 8001486:	e008      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 8001488:	2304      	movs	r3, #4
 800148a:	e006      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 800148c:	2303      	movs	r3, #3
 800148e:	e004      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 8001490:	2302      	movs	r3, #2
 8001492:	e002      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <HAL_GPIO_Init+0x1fa>
 8001498:	2300      	movs	r3, #0
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	f002 0203 	and.w	r2, r2, #3
 80014a0:	0092      	lsls	r2, r2, #2
 80014a2:	4093      	lsls	r3, r2
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014aa:	4937      	ldr	r1, [pc, #220]	; (8001588 <HAL_GPIO_Init+0x2e8>)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014b8:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <HAL_GPIO_Init+0x300>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014dc:	4a30      	ldr	r2, [pc, #192]	; (80015a0 <HAL_GPIO_Init+0x300>)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014e2:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <HAL_GPIO_Init+0x300>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001506:	4a26      	ldr	r2, [pc, #152]	; (80015a0 <HAL_GPIO_Init+0x300>)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800150c:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <HAL_GPIO_Init+0x300>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43db      	mvns	r3, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001530:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <HAL_GPIO_Init+0x300>)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_GPIO_Init+0x300>)
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800155a:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <HAL_GPIO_Init+0x300>)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3301      	adds	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	fa22 f303 	lsr.w	r3, r2, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	f47f ae9d 	bne.w	80012b0 <HAL_GPIO_Init+0x10>
  }
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	371c      	adds	r7, #28
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40021000 	.word	0x40021000
 8001588:	40010000 	.word	0x40010000
 800158c:	48000400 	.word	0x48000400
 8001590:	48000800 	.word	0x48000800
 8001594:	48000c00 	.word	0x48000c00
 8001598:	48001000 	.word	0x48001000
 800159c:	48001400 	.word	0x48001400
 80015a0:	40010400 	.word	0x40010400

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	041a      	lsls	r2, r3, #16
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43d9      	mvns	r1, r3
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	400b      	ands	r3, r1
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	4013      	ands	r3, r2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f806 	bl	8001638 <HAL_GPIO_EXTI_Callback>
  }
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d141      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800165e:	4b4b      	ldr	r3, [pc, #300]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166a:	d131      	bne.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800166c:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001672:	4a46      	ldr	r2, [pc, #280]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001678:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800167c:	4b43      	ldr	r3, [pc, #268]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001684:	4a41      	ldr	r2, [pc, #260]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800168c:	4b40      	ldr	r3, [pc, #256]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2232      	movs	r2, #50	; 0x32
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	4a3f      	ldr	r2, [pc, #252]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	0c9b      	lsrs	r3, r3, #18
 800169e:	3301      	adds	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a2:	e002      	b.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b6:	d102      	bne.n	80016be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f2      	bne.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016be:	4b33      	ldr	r3, [pc, #204]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ca:	d158      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e057      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d0:	4b2e      	ldr	r3, [pc, #184]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016d6:	4a2d      	ldr	r2, [pc, #180]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016e0:	e04d      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e8:	d141      	bne.n	800176e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ea:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f6:	d131      	bne.n	800175c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016fe:	4a23      	ldr	r2, [pc, #140]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001710:	4a1e      	ldr	r2, [pc, #120]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001716:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2232      	movs	r2, #50	; 0x32
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	3301      	adds	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800172e:	e002      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3b01      	subs	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d102      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f2      	bne.n	8001730 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001756:	d112      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e011      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800176c:	e007      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001778:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40007000 	.word	0x40007000
 8001790:	20000004 	.word	0x20000004
 8001794:	431bde83 	.word	0x431bde83

08001798 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a6:	6093      	str	r3, [r2, #8]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40007000 	.word	0x40007000

080017b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e308      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d075      	beq.n	80018c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d6:	4ba3      	ldr	r3, [pc, #652]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e0:	4ba0      	ldr	r3, [pc, #640]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b0c      	cmp	r3, #12
 80017ee:	d102      	bne.n	80017f6 <HAL_RCC_OscConfig+0x3e>
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d002      	beq.n	80017fc <HAL_RCC_OscConfig+0x44>
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d10b      	bne.n	8001814 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	4b99      	ldr	r3, [pc, #612]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d05b      	beq.n	80018c0 <HAL_RCC_OscConfig+0x108>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d157      	bne.n	80018c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e2e3      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181c:	d106      	bne.n	800182c <HAL_RCC_OscConfig+0x74>
 800181e:	4b91      	ldr	r3, [pc, #580]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a90      	ldr	r2, [pc, #576]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e01d      	b.n	8001868 <HAL_RCC_OscConfig+0xb0>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001834:	d10c      	bne.n	8001850 <HAL_RCC_OscConfig+0x98>
 8001836:	4b8b      	ldr	r3, [pc, #556]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a8a      	ldr	r2, [pc, #552]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800183c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4b88      	ldr	r3, [pc, #544]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a87      	ldr	r2, [pc, #540]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e00b      	b.n	8001868 <HAL_RCC_OscConfig+0xb0>
 8001850:	4b84      	ldr	r3, [pc, #528]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a83      	ldr	r2, [pc, #524]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b81      	ldr	r3, [pc, #516]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a80      	ldr	r2, [pc, #512]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fbd8 	bl	8001024 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fbd4 	bl	8001024 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e2a8      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188a:	4b76      	ldr	r3, [pc, #472]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0xc0>
 8001896:	e014      	b.n	80018c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fbc4 	bl	8001024 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff fbc0 	bl	8001024 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e294      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b2:	4b6c      	ldr	r3, [pc, #432]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0xe8>
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d075      	beq.n	80019ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ce:	4b65      	ldr	r3, [pc, #404]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d8:	4b62      	ldr	r3, [pc, #392]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2b0c      	cmp	r3, #12
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_OscConfig+0x136>
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d002      	beq.n	80018f4 <HAL_RCC_OscConfig+0x13c>
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d11f      	bne.n	8001934 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f4:	4b5b      	ldr	r3, [pc, #364]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_OscConfig+0x154>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e267      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	4952      	ldr	r1, [pc, #328]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001920:	4b51      	ldr	r3, [pc, #324]	; (8001a68 <HAL_RCC_OscConfig+0x2b0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fb31 	bl	8000f8c <HAL_InitTick>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d043      	beq.n	80019b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e253      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d023      	beq.n	8001984 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800193c:	4b49      	ldr	r3, [pc, #292]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a48      	ldr	r2, [pc, #288]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fb6c 	bl	8001024 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff fb68 	bl	8001024 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e23c      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001962:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	061b      	lsls	r3, r3, #24
 800197c:	4939      	ldr	r1, [pc, #228]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800197e:	4313      	orrs	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
 8001982:	e01a      	b.n	80019ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001984:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a36      	ldr	r2, [pc, #216]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 800198a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff fb48 	bl	8001024 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff fb44 	bl	8001024 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e218      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x1e0>
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d03c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019de:	f7ff fb21 	bl	8001024 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e6:	f7ff fb1d 	bl	8001024 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e1f1      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80019fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0ef      	beq.n	80019e6 <HAL_RCC_OscConfig+0x22e>
 8001a06:	e01b      	b.n	8001a40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0e:	4a15      	ldr	r2, [pc, #84]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff fb04 	bl	8001024 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a20:	f7ff fb00 	bl	8001024 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1d4      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ef      	bne.n	8001a20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80ab 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d106      	bne.n	8001a6c <HAL_RCC_OscConfig+0x2b4>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e005      	b.n	8001a6e <HAL_RCC_OscConfig+0x2b6>
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	20000008 	.word	0x20000008
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00d      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4baf      	ldr	r3, [pc, #700]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	4aae      	ldr	r2, [pc, #696]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7e:	4bac      	ldr	r3, [pc, #688]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a8e:	4ba9      	ldr	r3, [pc, #676]	; (8001d34 <HAL_RCC_OscConfig+0x57c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d118      	bne.n	8001acc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a9a:	4ba6      	ldr	r3, [pc, #664]	; (8001d34 <HAL_RCC_OscConfig+0x57c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4aa5      	ldr	r2, [pc, #660]	; (8001d34 <HAL_RCC_OscConfig+0x57c>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fabd 	bl	8001024 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aae:	f7ff fab9 	bl	8001024 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e18d      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac0:	4b9c      	ldr	r3, [pc, #624]	; (8001d34 <HAL_RCC_OscConfig+0x57c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d108      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x32e>
 8001ad4:	4b96      	ldr	r3, [pc, #600]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ada:	4a95      	ldr	r2, [pc, #596]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae4:	e024      	b.n	8001b30 <HAL_RCC_OscConfig+0x378>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	d110      	bne.n	8001b10 <HAL_RCC_OscConfig+0x358>
 8001aee:	4b90      	ldr	r3, [pc, #576]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af4:	4a8e      	ldr	r2, [pc, #568]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001afe:	4b8c      	ldr	r3, [pc, #560]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b04:	4a8a      	ldr	r2, [pc, #552]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0e:	e00f      	b.n	8001b30 <HAL_RCC_OscConfig+0x378>
 8001b10:	4b87      	ldr	r3, [pc, #540]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b16:	4a86      	ldr	r2, [pc, #536]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b20:	4b83      	ldr	r3, [pc, #524]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b26:	4a82      	ldr	r2, [pc, #520]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d016      	beq.n	8001b66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7ff fa74 	bl	8001024 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7ff fa70 	bl	8001024 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e142      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b56:	4b76      	ldr	r3, [pc, #472]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0ed      	beq.n	8001b40 <HAL_RCC_OscConfig+0x388>
 8001b64:	e015      	b.n	8001b92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b66:	f7ff fa5d 	bl	8001024 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff fa59 	bl	8001024 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e12b      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b84:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1ed      	bne.n	8001b6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b92:	7ffb      	ldrb	r3, [r7, #31]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	4b65      	ldr	r3, [pc, #404]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	4a64      	ldr	r2, [pc, #400]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d03c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d01c      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bb8:	4b5d      	ldr	r3, [pc, #372]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bbe:	4a5c      	ldr	r2, [pc, #368]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fa2c 	bl	8001024 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bd0:	f7ff fa28 	bl	8001024 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0fc      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001be2:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ef      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x418>
 8001bf0:	e01b      	b.n	8001c2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bf2:	4b4f      	ldr	r3, [pc, #316]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bf8:	4a4d      	ldr	r2, [pc, #308]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001bfa:	f023 0301 	bic.w	r3, r3, #1
 8001bfe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c02:	f7ff fa0f 	bl	8001024 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c0a:	f7ff fa0b 	bl	8001024 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e0df      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c1c:	4b44      	ldr	r3, [pc, #272]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1ef      	bne.n	8001c0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80d3 	beq.w	8001dda <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c34:	4b3e      	ldr	r3, [pc, #248]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	f000 808d 	beq.w	8001d5c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d15a      	bne.n	8001d00 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a38      	ldr	r2, [pc, #224]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7ff f9e5 	bl	8001024 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff f9e1 	bl	8001024 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e0b5      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c70:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f0      	bne.n	8001c5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c7c:	4b2c      	ldr	r3, [pc, #176]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_RCC_OscConfig+0x580>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6a11      	ldr	r1, [r2, #32]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c8c:	3a01      	subs	r2, #1
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	4311      	orrs	r1, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c96:	0212      	lsls	r2, r2, #8
 8001c98:	4311      	orrs	r1, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c9e:	0852      	lsrs	r2, r2, #1
 8001ca0:	3a01      	subs	r2, #1
 8001ca2:	0552      	lsls	r2, r2, #21
 8001ca4:	4311      	orrs	r1, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001caa:	0852      	lsrs	r2, r2, #1
 8001cac:	3a01      	subs	r2, #1
 8001cae:	0652      	lsls	r2, r2, #25
 8001cb0:	4311      	orrs	r1, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cb6:	06d2      	lsls	r2, r2, #27
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	491d      	ldr	r1, [pc, #116]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ccc:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f9a4 	bl	8001024 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff f9a0 	bl	8001024 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e074      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x528>
 8001cfe:	e06c      	b.n	8001dda <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d0a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d12:	f023 0303 	bic.w	r3, r3, #3
 8001d16:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_RCC_OscConfig+0x578>)
 8001d1e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff f97c 	bl	8001024 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2e:	e00e      	b.n	8001d4e <HAL_RCC_OscConfig+0x596>
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40007000 	.word	0x40007000
 8001d38:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff f972 	bl	8001024 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e046      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_RCC_OscConfig+0x62c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x584>
 8001d5a:	e03e      	b.n	8001dda <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e039      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d68:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <HAL_RCC_OscConfig+0x62c>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f003 0203 	and.w	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d12c      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	3b01      	subs	r3, #1
 8001d88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d123      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d11b      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d113      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dcc:	085b      	lsrs	r3, r3, #1
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e11e      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b91      	ldr	r3, [pc, #580]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d910      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b8e      	ldr	r3, [pc, #568]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 020f 	bic.w	r2, r3, #15
 8001e16:	498c      	ldr	r1, [pc, #560]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b8a      	ldr	r3, [pc, #552]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e106      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d073      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d129      	bne.n	8001e98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e44:	4b81      	ldr	r3, [pc, #516]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0f4      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e54:	f000 f99e 	bl	8002194 <RCC_GetSysClockFreqFromPLLSource>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4a7c      	ldr	r2, [pc, #496]	; (8002050 <HAL_RCC_ClockConfig+0x268>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d93f      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e62:	4b7a      	ldr	r3, [pc, #488]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d033      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d12f      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e82:	4b72      	ldr	r3, [pc, #456]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e8a:	4a70      	ldr	r2, [pc, #448]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e024      	b.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea0:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0c6      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb0:	4b66      	ldr	r3, [pc, #408]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0be      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ec0:	f000 f8ce 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4a61      	ldr	r2, [pc, #388]	; (8002050 <HAL_RCC_ClockConfig+0x268>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d909      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ed6:	4a5d      	ldr	r2, [pc, #372]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001edc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b5a      	ldr	r3, [pc, #360]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4957      	ldr	r1, [pc, #348]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef4:	f7ff f896 	bl	8001024 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7ff f892 	bl	8001024 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e095      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b4e      	ldr	r3, [pc, #312]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d023      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f3c:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a42      	ldr	r2, [pc, #264]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f54:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f5c:	4a3b      	ldr	r2, [pc, #236]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4936      	ldr	r1, [pc, #216]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b80      	cmp	r3, #128	; 0x80
 8001f7c:	d105      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f7e:	4b33      	ldr	r3, [pc, #204]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	4a32      	ldr	r2, [pc, #200]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8a:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d21d      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f98:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 020f 	bic.w	r2, r3, #15
 8001fa0:	4929      	ldr	r1, [pc, #164]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fa8:	f7ff f83c 	bl	8001024 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb0:	f7ff f838 	bl	8001024 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e03b      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d1ed      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4917      	ldr	r1, [pc, #92]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	490f      	ldr	r1, [pc, #60]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002012:	f000 f825 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	490c      	ldr	r1, [pc, #48]	; (8002054 <HAL_RCC_ClockConfig+0x26c>)
 8002024:	5ccb      	ldrb	r3, [r1, r3]
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_RCC_ClockConfig+0x270>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_RCC_ClockConfig+0x274>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe ffa8 	bl	8000f8c <HAL_InitTick>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40022000 	.word	0x40022000
 800204c:	40021000 	.word	0x40021000
 8002050:	04c4b400 	.word	0x04c4b400
 8002054:	080261b4 	.word	0x080261b4
 8002058:	20000004 	.word	0x20000004
 800205c:	20000008 	.word	0x20000008

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002066:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b04      	cmp	r3, #4
 8002070:	d102      	bne.n	8002078 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	e047      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d102      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	e03e      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b0c      	cmp	r3, #12
 8002094:	d136      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3301      	adds	r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d10c      	bne.n	80020ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020b4:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	4a16      	ldr	r2, [pc, #88]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020be:	68d2      	ldr	r2, [r2, #12]
 80020c0:	0a12      	lsrs	r2, r2, #8
 80020c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
      break;
 80020cc:	e00c      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020ce:	4a13      	ldr	r2, [pc, #76]	; (800211c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d8:	68d2      	ldr	r2, [r2, #12]
 80020da:	0a12      	lsrs	r2, r2, #8
 80020dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020e0:	fb02 f303 	mul.w	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
      break;
 80020e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0e5b      	lsrs	r3, r3, #25
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	3301      	adds	r3, #1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	e001      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002108:	693b      	ldr	r3, [r7, #16]
}
 800210a:	4618      	mov	r0, r3
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	00f42400 	.word	0x00f42400
 8002120:	016e3600 	.word	0x016e3600

08002124 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_RCC_GetHCLKFreq+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002140:	f7ff fff0 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002144:	4602      	mov	r2, r0
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4904      	ldr	r1, [pc, #16]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	080261c4 	.word	0x080261c4

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800216c:	f7ff ffda 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0adb      	lsrs	r3, r3, #11
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4904      	ldr	r1, [pc, #16]	; (8002190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	080261c4 	.word	0x080261c4

08002194 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3301      	adds	r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d10c      	bne.n	80021d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021b8:	4a17      	ldr	r2, [pc, #92]	; (8002218 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021c2:	68d2      	ldr	r2, [r2, #12]
 80021c4:	0a12      	lsrs	r2, r2, #8
 80021c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	617b      	str	r3, [r7, #20]
    break;
 80021d0:	e00c      	b.n	80021ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021d2:	4a12      	ldr	r2, [pc, #72]	; (800221c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021dc:	68d2      	ldr	r2, [r2, #12]
 80021de:	0a12      	lsrs	r2, r2, #8
 80021e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
    break;
 80021ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0e5b      	lsrs	r3, r3, #25
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	3301      	adds	r3, #1
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	fbb2 f3f3 	udiv	r3, r2, r3
 8002204:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002206:	687b      	ldr	r3, [r7, #4]
}
 8002208:	4618      	mov	r0, r3
 800220a:	371c      	adds	r7, #28
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	40021000 	.word	0x40021000
 8002218:	016e3600 	.word	0x016e3600
 800221c:	00f42400 	.word	0x00f42400

08002220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002228:	2300      	movs	r3, #0
 800222a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800222c:	2300      	movs	r3, #0
 800222e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8098 	beq.w	800236e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	4b40      	ldr	r3, [pc, #256]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	4a3f      	ldr	r2, [pc, #252]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6593      	str	r3, [r2, #88]	; 0x58
 800225a:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002266:	2301      	movs	r3, #1
 8002268:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800226a:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a39      	ldr	r2, [pc, #228]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002276:	f7fe fed5 	bl	8001024 <HAL_GetTick>
 800227a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800227c:	e009      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227e:	f7fe fed1 	bl	8001024 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d902      	bls.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	74fb      	strb	r3, [r7, #19]
        break;
 8002290:	e005      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ef      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d159      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022a4:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d01e      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d019      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d2:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022dc:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e2:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022ec:	4a18      	ldr	r2, [pc, #96]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d016      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7fe fe91 	bl	8001024 <HAL_GetTick>
 8002302:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002304:	e00b      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe fe8d 	bl	8001024 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d902      	bls.n	800231e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	74fb      	strb	r3, [r7, #19]
            break;
 800231c:	e006      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0ec      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800232c:	7cfb      	ldrb	r3, [r7, #19]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10b      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002340:	4903      	ldr	r1, [pc, #12]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002348:	e008      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	74bb      	strb	r3, [r7, #18]
 800234e:	e005      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002350:	40021000 	.word	0x40021000
 8002354:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800235c:	7c7b      	ldrb	r3, [r7, #17]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002362:	4baf      	ldr	r3, [pc, #700]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	4aae      	ldr	r2, [pc, #696]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800237a:	4ba9      	ldr	r3, [pc, #676]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	f023 0203 	bic.w	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	49a5      	ldr	r1, [pc, #660]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800239c:	4ba0      	ldr	r3, [pc, #640]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f023 020c 	bic.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	499d      	ldr	r1, [pc, #628]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023be:	4b98      	ldr	r3, [pc, #608]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4994      	ldr	r1, [pc, #592]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023e0:	4b8f      	ldr	r3, [pc, #572]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	498c      	ldr	r1, [pc, #560]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002402:	4b87      	ldr	r3, [pc, #540]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	4983      	ldr	r1, [pc, #524]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002424:	4b7e      	ldr	r3, [pc, #504]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	497b      	ldr	r1, [pc, #492]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002446:	4b76      	ldr	r3, [pc, #472]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	4972      	ldr	r1, [pc, #456]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002468:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	496a      	ldr	r1, [pc, #424]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800248a:	4b65      	ldr	r3, [pc, #404]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	4961      	ldr	r1, [pc, #388]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024ac:	4b5c      	ldr	r3, [pc, #368]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024b2:	f023 0203 	bic.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	4959      	ldr	r1, [pc, #356]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ce:	4b54      	ldr	r3, [pc, #336]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	4950      	ldr	r1, [pc, #320]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d015      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024f0:	4b4b      	ldr	r3, [pc, #300]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4948      	ldr	r1, [pc, #288]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800250e:	d105      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002510:	4b43      	ldr	r3, [pc, #268]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a42      	ldr	r2, [pc, #264]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002524:	2b00      	cmp	r3, #0
 8002526:	d015      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002528:	4b3d      	ldr	r3, [pc, #244]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002536:	493a      	ldr	r1, [pc, #232]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002546:	d105      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002548:	4b35      	ldr	r3, [pc, #212]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4a34      	ldr	r2, [pc, #208]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800254e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002552:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d015      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002566:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	492c      	ldr	r1, [pc, #176]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800257e:	d105      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a26      	ldr	r2, [pc, #152]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800258a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d015      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	491e      	ldr	r1, [pc, #120]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b6:	d105      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a18      	ldr	r2, [pc, #96]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d015      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4910      	ldr	r1, [pc, #64]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ee:	d105      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d018      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	4902      	ldr	r1, [pc, #8]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800261e:	e001      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002620:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800262c:	d105      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	4a20      	ldr	r2, [pc, #128]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d015      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002646:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002654:	4917      	ldr	r1, [pc, #92]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002664:	d105      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d015      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002680:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002684:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	4909      	ldr	r1, [pc, #36]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800269c:	d105      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80026a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026a8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80026aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000

080026b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e042      	b.n	8002750 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d106      	bne.n	80026e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7fe fa59 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2224      	movs	r2, #36	; 0x24
 80026e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0201 	bic.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f82c 	bl	8002758 <UART_SetConfig>
 8002700:	4603      	mov	r3, r0
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e022      	b.n	8002750 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 faea 	bl	8002cec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002726:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002736:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fb71 	bl	8002e30 <UART_CheckIdleState>
 800274e:	4603      	mov	r3, r0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	4313      	orrs	r3, r2
 800277a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4bb1      	ldr	r3, [pc, #708]	; (8002a48 <UART_SetConfig+0x2f0>)
 8002784:	4013      	ands	r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	69f9      	ldr	r1, [r7, #28]
 800278c:	430b      	orrs	r3, r1
 800278e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4aa6      	ldr	r2, [pc, #664]	; (8002a4c <UART_SetConfig+0x2f4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d004      	beq.n	80027c0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80027ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	69f9      	ldr	r1, [r7, #28]
 80027d4:	430b      	orrs	r3, r1
 80027d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	f023 010f 	bic.w	r1, r3, #15
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a97      	ldr	r2, [pc, #604]	; (8002a50 <UART_SetConfig+0x2f8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d120      	bne.n	800283a <UART_SetConfig+0xe2>
 80027f8:	4b96      	ldr	r3, [pc, #600]	; (8002a54 <UART_SetConfig+0x2fc>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b03      	cmp	r3, #3
 8002804:	d816      	bhi.n	8002834 <UART_SetConfig+0xdc>
 8002806:	a201      	add	r2, pc, #4	; (adr r2, 800280c <UART_SetConfig+0xb4>)
 8002808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280c:	0800281d 	.word	0x0800281d
 8002810:	08002829 	.word	0x08002829
 8002814:	08002823 	.word	0x08002823
 8002818:	0800282f 	.word	0x0800282f
 800281c:	2301      	movs	r3, #1
 800281e:	76fb      	strb	r3, [r7, #27]
 8002820:	e0e7      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002822:	2302      	movs	r3, #2
 8002824:	76fb      	strb	r3, [r7, #27]
 8002826:	e0e4      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002828:	2304      	movs	r3, #4
 800282a:	76fb      	strb	r3, [r7, #27]
 800282c:	e0e1      	b.n	80029f2 <UART_SetConfig+0x29a>
 800282e:	2308      	movs	r3, #8
 8002830:	76fb      	strb	r3, [r7, #27]
 8002832:	e0de      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002834:	2310      	movs	r3, #16
 8002836:	76fb      	strb	r3, [r7, #27]
 8002838:	e0db      	b.n	80029f2 <UART_SetConfig+0x29a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a86      	ldr	r2, [pc, #536]	; (8002a58 <UART_SetConfig+0x300>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d132      	bne.n	80028aa <UART_SetConfig+0x152>
 8002844:	4b83      	ldr	r3, [pc, #524]	; (8002a54 <UART_SetConfig+0x2fc>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d828      	bhi.n	80028a4 <UART_SetConfig+0x14c>
 8002852:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <UART_SetConfig+0x100>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	0800288d 	.word	0x0800288d
 800285c:	080028a5 	.word	0x080028a5
 8002860:	080028a5 	.word	0x080028a5
 8002864:	080028a5 	.word	0x080028a5
 8002868:	08002899 	.word	0x08002899
 800286c:	080028a5 	.word	0x080028a5
 8002870:	080028a5 	.word	0x080028a5
 8002874:	080028a5 	.word	0x080028a5
 8002878:	08002893 	.word	0x08002893
 800287c:	080028a5 	.word	0x080028a5
 8002880:	080028a5 	.word	0x080028a5
 8002884:	080028a5 	.word	0x080028a5
 8002888:	0800289f 	.word	0x0800289f
 800288c:	2300      	movs	r3, #0
 800288e:	76fb      	strb	r3, [r7, #27]
 8002890:	e0af      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002892:	2302      	movs	r3, #2
 8002894:	76fb      	strb	r3, [r7, #27]
 8002896:	e0ac      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002898:	2304      	movs	r3, #4
 800289a:	76fb      	strb	r3, [r7, #27]
 800289c:	e0a9      	b.n	80029f2 <UART_SetConfig+0x29a>
 800289e:	2308      	movs	r3, #8
 80028a0:	76fb      	strb	r3, [r7, #27]
 80028a2:	e0a6      	b.n	80029f2 <UART_SetConfig+0x29a>
 80028a4:	2310      	movs	r3, #16
 80028a6:	76fb      	strb	r3, [r7, #27]
 80028a8:	e0a3      	b.n	80029f2 <UART_SetConfig+0x29a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a6b      	ldr	r2, [pc, #428]	; (8002a5c <UART_SetConfig+0x304>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d120      	bne.n	80028f6 <UART_SetConfig+0x19e>
 80028b4:	4b67      	ldr	r3, [pc, #412]	; (8002a54 <UART_SetConfig+0x2fc>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028be:	2b30      	cmp	r3, #48	; 0x30
 80028c0:	d013      	beq.n	80028ea <UART_SetConfig+0x192>
 80028c2:	2b30      	cmp	r3, #48	; 0x30
 80028c4:	d814      	bhi.n	80028f0 <UART_SetConfig+0x198>
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d009      	beq.n	80028de <UART_SetConfig+0x186>
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	d810      	bhi.n	80028f0 <UART_SetConfig+0x198>
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <UART_SetConfig+0x180>
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	d006      	beq.n	80028e4 <UART_SetConfig+0x18c>
 80028d6:	e00b      	b.n	80028f0 <UART_SetConfig+0x198>
 80028d8:	2300      	movs	r3, #0
 80028da:	76fb      	strb	r3, [r7, #27]
 80028dc:	e089      	b.n	80029f2 <UART_SetConfig+0x29a>
 80028de:	2302      	movs	r3, #2
 80028e0:	76fb      	strb	r3, [r7, #27]
 80028e2:	e086      	b.n	80029f2 <UART_SetConfig+0x29a>
 80028e4:	2304      	movs	r3, #4
 80028e6:	76fb      	strb	r3, [r7, #27]
 80028e8:	e083      	b.n	80029f2 <UART_SetConfig+0x29a>
 80028ea:	2308      	movs	r3, #8
 80028ec:	76fb      	strb	r3, [r7, #27]
 80028ee:	e080      	b.n	80029f2 <UART_SetConfig+0x29a>
 80028f0:	2310      	movs	r3, #16
 80028f2:	76fb      	strb	r3, [r7, #27]
 80028f4:	e07d      	b.n	80029f2 <UART_SetConfig+0x29a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a59      	ldr	r2, [pc, #356]	; (8002a60 <UART_SetConfig+0x308>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d120      	bne.n	8002942 <UART_SetConfig+0x1ea>
 8002900:	4b54      	ldr	r3, [pc, #336]	; (8002a54 <UART_SetConfig+0x2fc>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800290a:	2bc0      	cmp	r3, #192	; 0xc0
 800290c:	d013      	beq.n	8002936 <UART_SetConfig+0x1de>
 800290e:	2bc0      	cmp	r3, #192	; 0xc0
 8002910:	d814      	bhi.n	800293c <UART_SetConfig+0x1e4>
 8002912:	2b80      	cmp	r3, #128	; 0x80
 8002914:	d009      	beq.n	800292a <UART_SetConfig+0x1d2>
 8002916:	2b80      	cmp	r3, #128	; 0x80
 8002918:	d810      	bhi.n	800293c <UART_SetConfig+0x1e4>
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <UART_SetConfig+0x1cc>
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d006      	beq.n	8002930 <UART_SetConfig+0x1d8>
 8002922:	e00b      	b.n	800293c <UART_SetConfig+0x1e4>
 8002924:	2300      	movs	r3, #0
 8002926:	76fb      	strb	r3, [r7, #27]
 8002928:	e063      	b.n	80029f2 <UART_SetConfig+0x29a>
 800292a:	2302      	movs	r3, #2
 800292c:	76fb      	strb	r3, [r7, #27]
 800292e:	e060      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002930:	2304      	movs	r3, #4
 8002932:	76fb      	strb	r3, [r7, #27]
 8002934:	e05d      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002936:	2308      	movs	r3, #8
 8002938:	76fb      	strb	r3, [r7, #27]
 800293a:	e05a      	b.n	80029f2 <UART_SetConfig+0x29a>
 800293c:	2310      	movs	r3, #16
 800293e:	76fb      	strb	r3, [r7, #27]
 8002940:	e057      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a47      	ldr	r2, [pc, #284]	; (8002a64 <UART_SetConfig+0x30c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d125      	bne.n	8002998 <UART_SetConfig+0x240>
 800294c:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <UART_SetConfig+0x2fc>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800295a:	d017      	beq.n	800298c <UART_SetConfig+0x234>
 800295c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002960:	d817      	bhi.n	8002992 <UART_SetConfig+0x23a>
 8002962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002966:	d00b      	beq.n	8002980 <UART_SetConfig+0x228>
 8002968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800296c:	d811      	bhi.n	8002992 <UART_SetConfig+0x23a>
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <UART_SetConfig+0x222>
 8002972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002976:	d006      	beq.n	8002986 <UART_SetConfig+0x22e>
 8002978:	e00b      	b.n	8002992 <UART_SetConfig+0x23a>
 800297a:	2300      	movs	r3, #0
 800297c:	76fb      	strb	r3, [r7, #27]
 800297e:	e038      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002980:	2302      	movs	r3, #2
 8002982:	76fb      	strb	r3, [r7, #27]
 8002984:	e035      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002986:	2304      	movs	r3, #4
 8002988:	76fb      	strb	r3, [r7, #27]
 800298a:	e032      	b.n	80029f2 <UART_SetConfig+0x29a>
 800298c:	2308      	movs	r3, #8
 800298e:	76fb      	strb	r3, [r7, #27]
 8002990:	e02f      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002992:	2310      	movs	r3, #16
 8002994:	76fb      	strb	r3, [r7, #27]
 8002996:	e02c      	b.n	80029f2 <UART_SetConfig+0x29a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a2b      	ldr	r2, [pc, #172]	; (8002a4c <UART_SetConfig+0x2f4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d125      	bne.n	80029ee <UART_SetConfig+0x296>
 80029a2:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <UART_SetConfig+0x2fc>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029b0:	d017      	beq.n	80029e2 <UART_SetConfig+0x28a>
 80029b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029b6:	d817      	bhi.n	80029e8 <UART_SetConfig+0x290>
 80029b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029bc:	d00b      	beq.n	80029d6 <UART_SetConfig+0x27e>
 80029be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c2:	d811      	bhi.n	80029e8 <UART_SetConfig+0x290>
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <UART_SetConfig+0x278>
 80029c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029cc:	d006      	beq.n	80029dc <UART_SetConfig+0x284>
 80029ce:	e00b      	b.n	80029e8 <UART_SetConfig+0x290>
 80029d0:	2300      	movs	r3, #0
 80029d2:	76fb      	strb	r3, [r7, #27]
 80029d4:	e00d      	b.n	80029f2 <UART_SetConfig+0x29a>
 80029d6:	2302      	movs	r3, #2
 80029d8:	76fb      	strb	r3, [r7, #27]
 80029da:	e00a      	b.n	80029f2 <UART_SetConfig+0x29a>
 80029dc:	2304      	movs	r3, #4
 80029de:	76fb      	strb	r3, [r7, #27]
 80029e0:	e007      	b.n	80029f2 <UART_SetConfig+0x29a>
 80029e2:	2308      	movs	r3, #8
 80029e4:	76fb      	strb	r3, [r7, #27]
 80029e6:	e004      	b.n	80029f2 <UART_SetConfig+0x29a>
 80029e8:	2310      	movs	r3, #16
 80029ea:	76fb      	strb	r3, [r7, #27]
 80029ec:	e001      	b.n	80029f2 <UART_SetConfig+0x29a>
 80029ee:	2310      	movs	r3, #16
 80029f0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <UART_SetConfig+0x2f4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	f040 809f 	bne.w	8002b3c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029fe:	7efb      	ldrb	r3, [r7, #27]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d837      	bhi.n	8002a74 <UART_SetConfig+0x31c>
 8002a04:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <UART_SetConfig+0x2b4>)
 8002a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0a:	bf00      	nop
 8002a0c:	08002a31 	.word	0x08002a31
 8002a10:	08002a75 	.word	0x08002a75
 8002a14:	08002a39 	.word	0x08002a39
 8002a18:	08002a75 	.word	0x08002a75
 8002a1c:	08002a3f 	.word	0x08002a3f
 8002a20:	08002a75 	.word	0x08002a75
 8002a24:	08002a75 	.word	0x08002a75
 8002a28:	08002a75 	.word	0x08002a75
 8002a2c:	08002a6d 	.word	0x08002a6d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a30:	f7ff fb84 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8002a34:	6178      	str	r0, [r7, #20]
        break;
 8002a36:	e022      	b.n	8002a7e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <UART_SetConfig+0x310>)
 8002a3a:	617b      	str	r3, [r7, #20]
        break;
 8002a3c:	e01f      	b.n	8002a7e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a3e:	f7ff fb0f 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002a42:	6178      	str	r0, [r7, #20]
        break;
 8002a44:	e01b      	b.n	8002a7e <UART_SetConfig+0x326>
 8002a46:	bf00      	nop
 8002a48:	cfff69f3 	.word	0xcfff69f3
 8002a4c:	40008000 	.word	0x40008000
 8002a50:	40013800 	.word	0x40013800
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40004400 	.word	0x40004400
 8002a5c:	40004800 	.word	0x40004800
 8002a60:	40004c00 	.word	0x40004c00
 8002a64:	40005000 	.word	0x40005000
 8002a68:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a70:	617b      	str	r3, [r7, #20]
        break;
 8002a72:	e004      	b.n	8002a7e <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	76bb      	strb	r3, [r7, #26]
        break;
 8002a7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 811b 	beq.w	8002cbc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	4a96      	ldr	r2, [pc, #600]	; (8002ce4 <UART_SetConfig+0x58c>)
 8002a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a90:	461a      	mov	r2, r3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a98:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d305      	bcc.n	8002ab6 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d902      	bls.n	8002abc <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	76bb      	strb	r3, [r7, #26]
 8002aba:	e0ff      	b.n	8002cbc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	4a86      	ldr	r2, [pc, #536]	; (8002ce4 <UART_SetConfig+0x58c>)
 8002aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	f7fd febe 	bl	8000854 <__aeabi_uldivmod>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	020b      	lsls	r3, r1, #8
 8002aea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002aee:	0202      	lsls	r2, r0, #8
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	6849      	ldr	r1, [r1, #4]
 8002af4:	0849      	lsrs	r1, r1, #1
 8002af6:	4608      	mov	r0, r1
 8002af8:	f04f 0100 	mov.w	r1, #0
 8002afc:	1814      	adds	r4, r2, r0
 8002afe:	eb43 0501 	adc.w	r5, r3, r1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	4629      	mov	r1, r5
 8002b10:	f7fd fea0 	bl	8000854 <__aeabi_uldivmod>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4613      	mov	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b22:	d308      	bcc.n	8002b36 <UART_SetConfig+0x3de>
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b2a:	d204      	bcs.n	8002b36 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	60da      	str	r2, [r3, #12]
 8002b34:	e0c2      	b.n	8002cbc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	76bb      	strb	r3, [r7, #26]
 8002b3a:	e0bf      	b.n	8002cbc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b44:	d165      	bne.n	8002c12 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8002b46:	7efb      	ldrb	r3, [r7, #27]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d828      	bhi.n	8002b9e <UART_SetConfig+0x446>
 8002b4c:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <UART_SetConfig+0x3fc>)
 8002b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b52:	bf00      	nop
 8002b54:	08002b79 	.word	0x08002b79
 8002b58:	08002b81 	.word	0x08002b81
 8002b5c:	08002b89 	.word	0x08002b89
 8002b60:	08002b9f 	.word	0x08002b9f
 8002b64:	08002b8f 	.word	0x08002b8f
 8002b68:	08002b9f 	.word	0x08002b9f
 8002b6c:	08002b9f 	.word	0x08002b9f
 8002b70:	08002b9f 	.word	0x08002b9f
 8002b74:	08002b97 	.word	0x08002b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b78:	f7ff fae0 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8002b7c:	6178      	str	r0, [r7, #20]
        break;
 8002b7e:	e013      	b.n	8002ba8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b80:	f7ff faf2 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8002b84:	6178      	str	r0, [r7, #20]
        break;
 8002b86:	e00f      	b.n	8002ba8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b88:	4b57      	ldr	r3, [pc, #348]	; (8002ce8 <UART_SetConfig+0x590>)
 8002b8a:	617b      	str	r3, [r7, #20]
        break;
 8002b8c:	e00c      	b.n	8002ba8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b8e:	f7ff fa67 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002b92:	6178      	str	r0, [r7, #20]
        break;
 8002b94:	e008      	b.n	8002ba8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b9a:	617b      	str	r3, [r7, #20]
        break;
 8002b9c:	e004      	b.n	8002ba8 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	76bb      	strb	r3, [r7, #26]
        break;
 8002ba6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 8086 	beq.w	8002cbc <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	4a4b      	ldr	r2, [pc, #300]	; (8002ce4 <UART_SetConfig+0x58c>)
 8002bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bc2:	005a      	lsls	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	441a      	add	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b0f      	cmp	r3, #15
 8002bdc:	d916      	bls.n	8002c0c <UART_SetConfig+0x4b4>
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be4:	d212      	bcs.n	8002c0c <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	f023 030f 	bic.w	r3, r3, #15
 8002bee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	89fb      	ldrh	r3, [r7, #14]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	89fa      	ldrh	r2, [r7, #14]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	e057      	b.n	8002cbc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	76bb      	strb	r3, [r7, #26]
 8002c10:	e054      	b.n	8002cbc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c12:	7efb      	ldrb	r3, [r7, #27]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d828      	bhi.n	8002c6a <UART_SetConfig+0x512>
 8002c18:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <UART_SetConfig+0x4c8>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c45 	.word	0x08002c45
 8002c24:	08002c4d 	.word	0x08002c4d
 8002c28:	08002c55 	.word	0x08002c55
 8002c2c:	08002c6b 	.word	0x08002c6b
 8002c30:	08002c5b 	.word	0x08002c5b
 8002c34:	08002c6b 	.word	0x08002c6b
 8002c38:	08002c6b 	.word	0x08002c6b
 8002c3c:	08002c6b 	.word	0x08002c6b
 8002c40:	08002c63 	.word	0x08002c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c44:	f7ff fa7a 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8002c48:	6178      	str	r0, [r7, #20]
        break;
 8002c4a:	e013      	b.n	8002c74 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c4c:	f7ff fa8c 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8002c50:	6178      	str	r0, [r7, #20]
        break;
 8002c52:	e00f      	b.n	8002c74 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c54:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <UART_SetConfig+0x590>)
 8002c56:	617b      	str	r3, [r7, #20]
        break;
 8002c58:	e00c      	b.n	8002c74 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c5a:	f7ff fa01 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002c5e:	6178      	str	r0, [r7, #20]
        break;
 8002c60:	e008      	b.n	8002c74 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c66:	617b      	str	r3, [r7, #20]
        break;
 8002c68:	e004      	b.n	8002c74 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	76bb      	strb	r3, [r7, #26]
        break;
 8002c72:	bf00      	nop
    }

    if (pclk != 0U)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d020      	beq.n	8002cbc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	4a19      	ldr	r2, [pc, #100]	; (8002ce4 <UART_SetConfig+0x58c>)
 8002c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c84:	461a      	mov	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	fbb3 f2f2 	udiv	r2, r3, r2
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	085b      	lsrs	r3, r3, #1
 8002c92:	441a      	add	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	2b0f      	cmp	r3, #15
 8002ca4:	d908      	bls.n	8002cb8 <UART_SetConfig+0x560>
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cac:	d204      	bcs.n	8002cb8 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	e001      	b.n	8002cbc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002cd8:	7ebb      	ldrb	r3, [r7, #26]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3720      	adds	r7, #32
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	080261cc 	.word	0x080261cc
 8002ce8:	00f42400 	.word	0x00f42400

08002cec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01a      	beq.n	8002e02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dea:	d10a      	bne.n	8002e02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	605a      	str	r2, [r3, #4]
  }
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e40:	f7fe f8f0 	bl	8001024 <HAL_GetTick>
 8002e44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d10e      	bne.n	8002e72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f82f 	bl	8002ec6 <UART_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e025      	b.n	8002ebe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d10e      	bne.n	8002e9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f819 	bl	8002ec6 <UART_WaitOnFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e00f      	b.n	8002ebe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed6:	e062      	b.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ede:	d05e      	beq.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee0:	f7fe f8a0 	bl	8001024 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d302      	bcc.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d11d      	bne.n	8002f32 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e045      	b.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d02e      	beq.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f4e:	d126      	bne.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f68:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e00f      	b.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	bf0c      	ite	eq
 8002fae:	2301      	moveq	r3, #1
 8002fb0:	2300      	movne	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d08d      	beq.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b085      	sub	sp, #20
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_UARTEx_DisableFifoMode+0x16>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e027      	b.n	800302c <HAL_UARTEx_DisableFifoMode+0x66>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	; 0x24
 8002fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800300a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800304c:	2302      	movs	r3, #2
 800304e:	e02d      	b.n	80030ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2224      	movs	r2, #36	; 0x24
 800305c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0201 	bic.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f84f 	bl	8003130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e02d      	b.n	8003128 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2224      	movs	r2, #36	; 0x24
 80030d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f811 	bl	8003130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800313c:	2b00      	cmp	r3, #0
 800313e:	d108      	bne.n	8003152 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003150:	e031      	b.n	80031b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003152:	2308      	movs	r3, #8
 8003154:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003156:	2308      	movs	r3, #8
 8003158:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	0e5b      	lsrs	r3, r3, #25
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	0f5b      	lsrs	r3, r3, #29
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800317a:	7bbb      	ldrb	r3, [r7, #14]
 800317c:	7b3a      	ldrb	r2, [r7, #12]
 800317e:	4911      	ldr	r1, [pc, #68]	; (80031c4 <UARTEx_SetNbDataToProcess+0x94>)
 8003180:	5c8a      	ldrb	r2, [r1, r2]
 8003182:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003186:	7b3a      	ldrb	r2, [r7, #12]
 8003188:	490f      	ldr	r1, [pc, #60]	; (80031c8 <UARTEx_SetNbDataToProcess+0x98>)
 800318a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800318c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003190:	b29a      	uxth	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	7b7a      	ldrb	r2, [r7, #13]
 800319c:	4909      	ldr	r1, [pc, #36]	; (80031c4 <UARTEx_SetNbDataToProcess+0x94>)
 800319e:	5c8a      	ldrb	r2, [r1, r2]
 80031a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80031a4:	7b7a      	ldrb	r2, [r7, #13]
 80031a6:	4908      	ldr	r1, [pc, #32]	; (80031c8 <UARTEx_SetNbDataToProcess+0x98>)
 80031a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80031aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	080261e4 	.word	0x080261e4
 80031c8:	080261ec 	.word	0x080261ec

080031cc <ESP_Init>:
 */
int32_t ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 	 uint8_t 	(*UART_Receive)(void),
				 uint32_t 	(*getTick)(void),
				 uint32_t	UART_Buffer_Size)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01d      	beq.n	800321c <ESP_Init+0x50>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01a      	beq.n	800321c <ESP_Init+0x50>
	   UART_Receive	!= NULL			&&
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d017      	beq.n	800321c <ESP_Init+0x50>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 80031ec:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <ESP_Init+0x5c>)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 80031f2:	4a0d      	ldr	r2, [pc, #52]	; (8003228 <ESP_Init+0x5c>)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 80031f8:	4a0b      	ldr	r2, [pc, #44]	; (8003228 <ESP_Init+0x5c>)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 80031fe:	6838      	ldr	r0, [r7, #0]
 8003200:	f000 fa9e 	bl	8003740 <ringBuffer_init>
 8003204:	4603      	mov	r3, r0
 8003206:	4a09      	ldr	r2, [pc, #36]	; (800322c <ESP_Init+0x60>)
 8003208:	6013      	str	r3, [r2, #0]

		if(rx_buffer != NULL)
 800320a:	4b08      	ldr	r3, [pc, #32]	; (800322c <ESP_Init+0x60>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <ESP_Init+0x4a>
			return 1;
 8003212:	2301      	movs	r3, #1
 8003214:	e004      	b.n	8003220 <ESP_Init+0x54>
		else
			return -1;
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	e001      	b.n	8003220 <ESP_Init+0x54>
	}
	else
	{
		return -1;
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000360 	.word	0x20000360
 800322c:	2000049c 	.word	0x2000049c

08003230 <Send_AT_Command>:
 * 			as a function pointer in the ESP_Init function to send AT commands over UART.
 * @param 	cmd is a string containing the AT command.
 * @retval	None.
 */
void Send_AT_Command(char *cmd)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <Send_AT_Command+0x18>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000360 	.word	0x20000360

0800324c <ESP_UART_ReceiveHandler>:
 * 			this function in the UART ISR.
 * @param 	None.
 * @retval	None.
 */
void ESP_UART_ReceiveHandler(void)
{
 800324c:	b598      	push	{r3, r4, r7, lr}
 800324e:	af00      	add	r7, sp, #0
	ringBuffer_push(rx_buffer, ESP8266.UART_Receive());
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <ESP_UART_ReceiveHandler+0x1c>)
 8003252:	681c      	ldr	r4, [r3, #0]
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <ESP_UART_ReceiveHandler+0x20>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4798      	blx	r3
 800325a:	4603      	mov	r3, r0
 800325c:	4619      	mov	r1, r3
 800325e:	4620      	mov	r0, r4
 8003260:	f000 faaf 	bl	80037c2 <ringBuffer_push>
}
 8003264:	bf00      	nop
 8003266:	bd98      	pop	{r3, r4, r7, pc}
 8003268:	2000049c 	.word	0x2000049c
 800326c:	20000360 	.word	0x20000360

08003270 <Read_Response>:
 * @param 	response is a string is checked if it is in the ring buffer.
 * @retval	1: There is a string passed as a parameter in the ring buffer.
 * @retval	0: There is no string passed as a parameter in the ring buffer.
 */
uint32_t Read_Response(char * response)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <Read_Response+0x20>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fb29 	bl	80038d6 <ringBuffer_lookFor>
 8003284:	4603      	mov	r3, r0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	2000049c 	.word	0x2000049c

08003294 <Wait_Response>:
 * @retval	FOUND			:There is a string passed as a parameter in the ring buffer.
 * @retval	TIMEOUT_ERROR	:It returns when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Wait_Response(char* response, uint32_t timeout)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <Wait_Response+0x74>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d108      	bne.n	80032b8 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <Wait_Response+0x78>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	4798      	blx	r3
 80032ac:	4603      	mov	r3, r0
 80032ae:	4a18      	ldr	r2, [pc, #96]	; (8003310 <Wait_Response+0x7c>)
 80032b0:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <Wait_Response+0x74>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 80032b8:	4b16      	ldr	r3, [pc, #88]	; (8003314 <Wait_Response+0x80>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fb09 	bl	80038d6 <ringBuffer_lookFor>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <Wait_Response+0x46>
	{
		firstCall = 0;
 80032ca:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <Wait_Response+0x74>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
		time = 0;
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <Wait_Response+0x7c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
		return FOUND;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e012      	b.n	8003300 <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <Wait_Response+0x78>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	4798      	blx	r3
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <Wait_Response+0x7c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d807      	bhi.n	80032fe <Wait_Response+0x6a>
	{
		firstCall = 0;
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <Wait_Response+0x74>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
		time = 0;
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <Wait_Response+0x7c>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 80032fe:	2304      	movs	r3, #4
	}

}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	2000036c 	.word	0x2000036c
 800330c:	20000360 	.word	0x20000360
 8003310:	20000370 	.word	0x20000370
 8003314:	2000049c 	.word	0x2000049c

08003318 <Connect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_Wifi(char* ssid, char* password)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b098      	sub	sp, #96	; 0x60
 800331c:	af02      	add	r7, sp, #8
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003322:	4a16      	ldr	r2, [pc, #88]	; (800337c <Connect_Wifi+0x64>)
 8003324:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003328:	ca07      	ldmia	r2, {r0, r1, r2}
 800332a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};
	char *response_buffer[3] =
 800332e:	4a14      	ldr	r2, [pc, #80]	; (8003380 <Connect_Wifi+0x68>)
 8003330:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003334:	ca07      	ldmia	r2, {r0, r1, r2}
 8003336:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};
	Status response_state = IDLE;
 800333a:	2304      	movs	r3, #4
 800333c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003340:	f107 0008 	add.w	r0, r7, #8
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a0e      	ldr	r2, [pc, #56]	; (8003384 <Connect_Wifi+0x6c>)
 800334c:	490e      	ldr	r1, [pc, #56]	; (8003388 <Connect_Wifi+0x70>)
 800334e:	f01c ff3b 	bl	80201c8 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003352:	f107 0308 	add.w	r3, r7, #8
 8003356:	653b      	str	r3, [r7, #80]	; 0x50

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003358:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800335c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003360:	2203      	movs	r2, #3
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f82e 	bl	80033c4 <Command_Process>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	return response_state;
 800336e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003372:	4618      	mov	r0, r3
 8003374:	3758      	adds	r7, #88	; 0x58
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	08022d24 	.word	0x08022d24
 8003380:	08022d30 	.word	0x08022d30
 8003384:	08022d08 	.word	0x08022d08
 8003388:	08022d14 	.word	0x08022d14

0800338c <Disconnect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about disconnect operation.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_Wifi(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
	char *command_buffer[1] = { AT_CWQAP };
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <Disconnect_Wifi+0x30>)
 8003394:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <Disconnect_Wifi+0x34>)
 8003398:	607b      	str	r3, [r7, #4]

	Status response_state = IDLE;
 800339a:	2304      	movs	r3, #4
 800339c:	73fb      	strb	r3, [r7, #15]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 800339e:	1d39      	adds	r1, r7, #4
 80033a0:	f107 0308 	add.w	r3, r7, #8
 80033a4:	2201      	movs	r2, #1
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f80c 	bl	80033c4 <Command_Process>
 80033ac:	4603      	mov	r3, r0
 80033ae:	73fb      	strb	r3, [r7, #15]

	return response_state;
 80033b0:	7bfb      	ldrb	r3, [r7, #15]

}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	08022cd8 	.word	0x08022cd8
 80033c0:	08022ce8 	.word	0x08022ce8

080033c4 <Command_Process>:
 * @retval	STATUS_ERROR	:It returns when ESP send the ERROR message or number of commands is equal zero.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Command_Process(char **commandArray, char **responseArray, uint8_t numberOfCommands)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	4613      	mov	r3, r2
 80033d0:	71fb      	strb	r3, [r7, #7]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d004      	beq.n	80033e2 <Command_Process+0x1e>
 80033d8:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <Command_Process+0x104>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	79fa      	ldrb	r2, [r7, #7]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d806      	bhi.n	80033f0 <Command_Process+0x2c>
	{
		ringBuffer_flush(rx_buffer);
 80033e2:	4b3a      	ldr	r3, [pc, #232]	; (80034cc <Command_Process+0x108>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fa3f 	bl	800386a <ringBuffer_flush>
		return STATUS_ERROR;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e067      	b.n	80034c0 <Command_Process+0xfc>
	}
	else
	{
		if(commandFlag)
 80033f0:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <Command_Process+0x10c>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <Command_Process+0x4c>
		{
			Send_AT_Command(commandArray[currentCommand]);
 80033f8:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <Command_Process+0x104>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4413      	add	r3, r2
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff13 	bl	8003230 <Send_AT_Command>
			commandFlag = 0;
 800340a:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <Command_Process+0x10c>)
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
		}
			response = Wait_Response(responseArray[currentCommand], TIMEOUT);
 8003410:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <Command_Process+0x104>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	4413      	add	r3, r2
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f242 7110 	movw	r1, #10000	; 0x2710
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff37 	bl	8003294 <Wait_Response>
 8003426:	4603      	mov	r3, r0
 8003428:	75fb      	strb	r3, [r7, #23]

			if(Read_Response("ERROR"))
 800342a:	482a      	ldr	r0, [pc, #168]	; (80034d4 <Command_Process+0x110>)
 800342c:	f7ff ff20 	bl	8003270 <Read_Response>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00c      	beq.n	8003450 <Command_Process+0x8c>
			{
				commandFlag = 1;
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <Command_Process+0x10c>)
 8003438:	2201      	movs	r2, #1
 800343a:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 800343c:	4b22      	ldr	r3, [pc, #136]	; (80034c8 <Command_Process+0x104>)
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003442:	4b22      	ldr	r3, [pc, #136]	; (80034cc <Command_Process+0x108>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fa0f 	bl	800386a <ringBuffer_flush>
				return STATUS_ERROR;
 800344c:	2303      	movs	r3, #3
 800344e:	e037      	b.n	80034c0 <Command_Process+0xfc>
			}
			else if(response == IDLE)
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	2b04      	cmp	r3, #4
 8003454:	d101      	bne.n	800345a <Command_Process+0x96>
			{
				return response;
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	e032      	b.n	80034c0 <Command_Process+0xfc>
			}
			else if(response == FOUND)
 800345a:	7dfb      	ldrb	r3, [r7, #23]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d123      	bne.n	80034a8 <Command_Process+0xe4>
			{
				if(currentCommand == (numberOfCommands-1))
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <Command_Process+0x104>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	3b01      	subs	r3, #1
 800346a:	429a      	cmp	r2, r3
 800346c:	d10c      	bne.n	8003488 <Command_Process+0xc4>
				{
					commandFlag = 1;
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <Command_Process+0x10c>)
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003474:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <Command_Process+0x104>)
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 800347a:	4b14      	ldr	r3, [pc, #80]	; (80034cc <Command_Process+0x108>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f9f3 	bl	800386a <ringBuffer_flush>
					return STATUS_OK;
 8003484:	2302      	movs	r3, #2
 8003486:	e01b      	b.n	80034c0 <Command_Process+0xfc>
				}
				else
				{
					commandFlag = 1;
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <Command_Process+0x10c>)
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <Command_Process+0x104>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	b2da      	uxtb	r2, r3
 8003496:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <Command_Process+0x104>)
 8003498:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 800349a:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <Command_Process+0x108>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f9e3 	bl	800386a <ringBuffer_flush>
					return IDLE;
 80034a4:	2304      	movs	r3, #4
 80034a6:	e00b      	b.n	80034c0 <Command_Process+0xfc>
				}

			}
			else
			{
				commandFlag = 1;
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <Command_Process+0x10c>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <Command_Process+0x104>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <Command_Process+0x108>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 f9d6 	bl	800386a <ringBuffer_flush>
				return response;
 80034be:	7dfb      	ldrb	r3, [r7, #23]
			}
	}


}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000374 	.word	0x20000374
 80034cc:	2000049c 	.word	0x2000049c
 80034d0:	20000010 	.word	0x20000010
 80034d4:	08022d3c 	.word	0x08022d3c

080034d8 <Connect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_TCP_Server(char* ip, char* port)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b0a2      	sub	sp, #136	; 0x88
 80034dc:	af02      	add	r7, sp, #8
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
	Status response_state = IDLE;
 80034e2:	2304      	movs	r3, #4
 80034e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	char *command_buffer[2] =
 80034e8:	4a15      	ldr	r2, [pc, #84]	; (8003540 <Connect_TCP_Server+0x68>)
 80034ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034f2:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		AT_CIPMUX_SINGLE,
		""
	};

	char *response_buffer[2] =
 80034f6:	4a13      	ldr	r2, [pc, #76]	; (8003544 <Connect_TCP_Server+0x6c>)
 80034f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80034fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003500:	e883 0003 	stmia.w	r3, {r0, r1}
		AT_RESPONSE_OK
	};

	char wifi_buffer[100];

	sprintf(wifi_buffer,"%s\"%s\",%s\r\n",AT_CIPSTART_TCP,ip,port);
 8003504:	f107 0008 	add.w	r0, r7, #8
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a0e      	ldr	r2, [pc, #56]	; (8003548 <Connect_TCP_Server+0x70>)
 8003510:	490e      	ldr	r1, [pc, #56]	; (800354c <Connect_TCP_Server+0x74>)
 8003512:	f01c fe59 	bl	80201c8 <siprintf>

	command_buffer[1] = wifi_buffer;
 8003516:	f107 0308 	add.w	r3, r7, #8
 800351a:	67bb      	str	r3, [r7, #120]	; 0x78

	response_state = Command_Process(command_buffer, response_buffer, 2);
 800351c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003520:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003524:	2202      	movs	r2, #2
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ff4c 	bl	80033c4 <Command_Process>
 800352c:	4603      	mov	r3, r0
 800352e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	return response_state;
 8003532:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003536:	4618      	mov	r0, r3
 8003538:	3780      	adds	r7, #128	; 0x80
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	08022d64 	.word	0x08022d64
 8003544:	08022d6c 	.word	0x08022d6c
 8003548:	08022d44 	.word	0x08022d44
 800354c:	08022d58 	.word	0x08022d58

08003550 <Disconnect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about disconnection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_TCP_Server(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
	Status response_state = IDLE;
 8003556:	2304      	movs	r3, #4
 8003558:	73fb      	strb	r3, [r7, #15]

	char *command_buffer[1] = { AT_CIPCLOSE };
 800355a:	4b09      	ldr	r3, [pc, #36]	; (8003580 <Disconnect_TCP_Server+0x30>)
 800355c:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <Disconnect_TCP_Server+0x34>)
 8003560:	607b      	str	r3, [r7, #4]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003562:	1d39      	adds	r1, r7, #4
 8003564:	f107 0308 	add.w	r3, r7, #8
 8003568:	2201      	movs	r2, #1
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff2a 	bl	80033c4 <Command_Process>
 8003570:	4603      	mov	r3, r0
 8003572:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003574:	7bfb      	ldrb	r3, [r7, #15]

}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	08022d74 	.word	0x08022d74
 8003584:	08022ce8 	.word	0x08022ce8

08003588 <Send_TCP_Message>:
 * @retval	STATUS_ERROR	:There is an error about sending message.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Send_TCP_Message(char* message)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b096      	sub	sp, #88	; 0x58
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	Status response_state = STATUS_ERROR;
 8003590:	2303      	movs	r3, #3
 8003592:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint32_t length=0;
 8003596:	2300      	movs	r3, #0
 8003598:	653b      	str	r3, [r7, #80]	; 0x50

	length = strlen(message);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fc fe4e 	bl	800023c <strlen>
 80035a0:	6538      	str	r0, [r7, #80]	; 0x50

	char cipSendBuffer[50];

	sprintf(cipSendBuffer,"%s%ld\r\n",AT_CIPSEND,length);
 80035a2:	f107 001c 	add.w	r0, r7, #28
 80035a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a8:	4a10      	ldr	r2, [pc, #64]	; (80035ec <Send_TCP_Message+0x64>)
 80035aa:	4911      	ldr	r1, [pc, #68]	; (80035f0 <Send_TCP_Message+0x68>)
 80035ac:	f01c fe0c 	bl	80201c8 <siprintf>

	char *command_buffer[2];

	command_buffer[0] = cipSendBuffer;
 80035b0:	f107 031c 	add.w	r3, r7, #28
 80035b4:	617b      	str	r3, [r7, #20]
	command_buffer[1] = message;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	61bb      	str	r3, [r7, #24]

	char *response_buffer[2] =
 80035ba:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <Send_TCP_Message+0x6c>)
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035c4:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	response_state = Command_Process(command_buffer, response_buffer, 2);
 80035c8:	f107 010c 	add.w	r1, r7, #12
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	2202      	movs	r2, #2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fef6 	bl	80033c4 <Command_Process>
 80035d8:	4603      	mov	r3, r0
 80035da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	return response_state;
 80035de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3758      	adds	r7, #88	; 0x58
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	08022d84 	.word	0x08022d84
 80035f0:	08022d90 	.word	0x08022d90
 80035f4:	08022d98 	.word	0x08022d98

080035f8 <Read_TCP_Message>:
 * @param 	receviedMessage : If a message is received, it is assigned to receivedMessage.
 * @retval	STATUS_OK		:The message has been read successfully.
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 */
Status Read_TCP_Message(char* receivedMessage)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

	char *substring = strstr((char*)rx_buffer->buffer,"+IPD,");
 8003600:	4b2e      	ldr	r3, [pc, #184]	; (80036bc <Read_TCP_Message+0xc4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	492e      	ldr	r1, [pc, #184]	; (80036c0 <Read_TCP_Message+0xc8>)
 8003608:	4618      	mov	r0, r3
 800360a:	f01d fb9f 	bl	8020d4c <strstr>
 800360e:	6138      	str	r0, [r7, #16]

	char messageLengthString[3];

	uint32_t messageLength=0,index=0;
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	2300      	movs	r3, #0
 8003616:	61fb      	str	r3, [r7, #28]


	if(substring != NULL)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d043      	beq.n	80036a6 <Read_TCP_Message+0xae>
	{
		for(uint8_t i=0;i<3;i++)
 800361e:	2300      	movs	r3, #0
 8003620:	76fb      	strb	r3, [r7, #27]
 8003622:	e017      	b.n	8003654 <Read_TCP_Message+0x5c>
		{
			if(*(substring+5+i) == ':')
 8003624:	7efb      	ldrb	r3, [r7, #27]
 8003626:	3305      	adds	r3, #5
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b3a      	cmp	r3, #58	; 0x3a
 8003630:	d014      	beq.n	800365c <Read_TCP_Message+0x64>
				break;
			messageLengthString[i] = *(substring+5+i);
 8003632:	7efb      	ldrb	r3, [r7, #27]
 8003634:	3305      	adds	r3, #5
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	441a      	add	r2, r3
 800363a:	7efb      	ldrb	r3, [r7, #27]
 800363c:	7812      	ldrb	r2, [r2, #0]
 800363e:	f107 0120 	add.w	r1, r7, #32
 8003642:	440b      	add	r3, r1
 8003644:	f803 2c18 	strb.w	r2, [r3, #-24]
			index += 1;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	3301      	adds	r3, #1
 800364c:	61fb      	str	r3, [r7, #28]
		for(uint8_t i=0;i<3;i++)
 800364e:	7efb      	ldrb	r3, [r7, #27]
 8003650:	3301      	adds	r3, #1
 8003652:	76fb      	strb	r3, [r7, #27]
 8003654:	7efb      	ldrb	r3, [r7, #27]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d9e4      	bls.n	8003624 <Read_TCP_Message+0x2c>
 800365a:	e000      	b.n	800365e <Read_TCP_Message+0x66>
				break;
 800365c:	bf00      	nop

		}

		messageLength = atoi(messageLengthString);
 800365e:	f107 0308 	add.w	r3, r7, #8
 8003662:	4618      	mov	r0, r3
 8003664:	f01b fe11 	bl	801f28a <atoi>
 8003668:	4603      	mov	r3, r0
 800366a:	60fb      	str	r3, [r7, #12]

		for(uint32_t i=0;i<=messageLength-1;i++)
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e00d      	b.n	800368e <Read_TCP_Message+0x96>
		{
			receivedMessage[i] = *(substring+6+index+i);
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	4413      	add	r3, r2
 8003678:	3306      	adds	r3, #6
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	441a      	add	r2, r3
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	440b      	add	r3, r1
 8003684:	7812      	ldrb	r2, [r2, #0]
 8003686:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=0;i<=messageLength-1;i++)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	3301      	adds	r3, #1
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	3b01      	subs	r3, #1
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	429a      	cmp	r2, r3
 8003696:	d9ec      	bls.n	8003672 <Read_TCP_Message+0x7a>
		}
		ringBuffer_flush(rx_buffer);
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <Read_TCP_Message+0xc4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f000 f8e4 	bl	800386a <ringBuffer_flush>
		return STATUS_OK;
 80036a2:	2302      	movs	r3, #2
 80036a4:	e005      	b.n	80036b2 <Read_TCP_Message+0xba>


	}
	else
	{
		ringBuffer_flush(rx_buffer);
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <Read_TCP_Message+0xc4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 f8dd 	bl	800386a <ringBuffer_flush>
		return STATUS_ERROR;
 80036b0:	2303      	movs	r3, #3
	}



}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	2000049c 	.word	0x2000049c
 80036c0:	08022da0 	.word	0x08022da0

080036c4 <Wait_TCP_Message>:
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE
 */
Status Wait_TCP_Message(char* receivedMessage, uint32_t timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
	static uint8_t firstCall = 1;
	static uint32_t time = 0;

	if(firstCall)
 80036ce:	4b19      	ldr	r3, [pc, #100]	; (8003734 <Wait_TCP_Message+0x70>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <Wait_TCP_Message+0x24>
	{
		time = ESP8266.getTick();
 80036d6:	4b18      	ldr	r3, [pc, #96]	; (8003738 <Wait_TCP_Message+0x74>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	4798      	blx	r3
 80036dc:	4603      	mov	r3, r0
 80036de:	4a17      	ldr	r2, [pc, #92]	; (800373c <Wait_TCP_Message+0x78>)
 80036e0:	6013      	str	r3, [r2, #0]
		firstCall = 0;
 80036e2:	4b14      	ldr	r3, [pc, #80]	; (8003734 <Wait_TCP_Message+0x70>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
	}

	if(Read_TCP_Message(receivedMessage) == STATUS_OK)
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ff85 	bl	80035f8 <Read_TCP_Message>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d107      	bne.n	8003704 <Wait_TCP_Message+0x40>
	{
		time = 0;
 80036f4:	4b11      	ldr	r3, [pc, #68]	; (800373c <Wait_TCP_Message+0x78>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 80036fa:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <Wait_TCP_Message+0x70>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
 8003700:	2302      	movs	r3, #2
 8003702:	e012      	b.n	800372a <Wait_TCP_Message+0x66>
	}
	else if(ESP8266.getTick()-time >= timeout)
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <Wait_TCP_Message+0x74>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4798      	blx	r3
 800370a:	4602      	mov	r2, r0
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <Wait_TCP_Message+0x78>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d807      	bhi.n	8003728 <Wait_TCP_Message+0x64>
	{
		time = 0;
 8003718:	4b08      	ldr	r3, [pc, #32]	; (800373c <Wait_TCP_Message+0x78>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <Wait_TCP_Message+0x70>)
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <Wait_TCP_Message+0x66>
	}
	else
		return IDLE;
 8003728:	2304      	movs	r3, #4

}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20000011 	.word	0x20000011
 8003738:	20000360 	.word	0x20000360
 800373c:	20000378 	.word	0x20000378

08003740 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003748:	2010      	movs	r0, #16
 800374a:	f01c fb6b 	bl	801fe24 <malloc>
 800374e:	4603      	mov	r3, r0
 8003750:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <ringBuffer_init+0x1c>
	{
		// Error
		return 0;
 8003758:	2300      	movs	r3, #0
 800375a:	e017      	b.n	800378c <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 800376e:	2101      	movs	r1, #1
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f01b fd8f 	bl	801f294 <calloc>
 8003776:	4603      	mov	r3, r0
 8003778:	461a      	mov	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <ringBuffer_init+0x4a>
		{
			// Error
			return 0;
 8003786:	2300      	movs	r3, #0
 8003788:	e000      	b.n	800378c <ringBuffer_init+0x4c>
		}

	return rBuf;
 800378a:	68fb      	ldr	r3, [r7, #12]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00b      	beq.n	80037ba <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f01c fb40 	bl	801fe34 <free>
		}
		free(buffer);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f01c fb3d 	bl	801fe34 <free>
	}
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	460b      	mov	r3, r1
 80037cc:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	429a      	cmp	r2, r3
 80037da:	d00c      	beq.n	80037f6 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4413      	add	r3, r2
 80037e6:	78fa      	ldrb	r2, [r7, #3]
 80037e8:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 80037f4:	e009      	b.n	800380a <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4413      	add	r3, r2
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003816:	b480      	push	{r7}
 8003818:	b085      	sub	sp, #20
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	3b01      	subs	r3, #1
 8003828:	429a      	cmp	r2, r3
 800382a:	d00d      	beq.n	8003848 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4413      	add	r3, r2
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	605a      	str	r2, [r3, #4]
		return data;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	e00a      	b.n	800385e <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	4413      	add	r3, r2
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	605a      	str	r2, [r3, #4]
		return data;
 800385c:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,(uint8_t)0x00,(size_t)ringBuffer->size);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68d8      	ldr	r0, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	461a      	mov	r2, r3
 800387c:	2100      	movs	r1, #0
 800387e:	f01c faef 	bl	801fe60 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	601a      	str	r2, [r3, #0]
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e00a      	b.n	80038be <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	4413      	add	r3, r2
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	4619      	mov	r1, r3
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff ff85 	bl	80037c2 <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3301      	adds	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	6838      	ldr	r0, [r7, #0]
 80038c0:	f7fc fcbc 	bl	800023c <strlen>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d8ed      	bhi.n	80038a8 <ringBuffer_pushArray+0x10>
}
 80038cc:	bf00      	nop
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * @retval	0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	6839      	ldr	r1, [r7, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f01d fa30 	bl	8020d4c <strstr>
 80038ec:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <ringBuffer_lookFor+0x22>
		return 1;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <ringBuffer_lookFor+0x24>
	else
		return 0;
 80038f8:	2300      	movs	r3, #0

}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003922:	f7fd fb1a 	bl	8000f5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003926:	f000 f81d 	bl	8003964 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800392a:	f000 f951 	bl	8003bd0 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 800392e:	f000 f891 	bl	8003a54 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003932:	f000 f8ed 	bl	8003b10 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <main+0x44>)
 8003938:	463b      	mov	r3, r7
 800393a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800393e:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8003942:	463b      	mov	r3, r7
 8003944:	4619      	mov	r1, r3
 8003946:	2002      	movs	r0, #2
 8003948:	f004 fd14 	bl	8008374 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // optional
 800394c:	2120      	movs	r1, #32
 800394e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003952:	f7fd fe3f 	bl	80015d4 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003956:	2064      	movs	r0, #100	; 0x64
 8003958:	f7fd fb70 	bl	800103c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // optional
 800395c:	e7f6      	b.n	800394c <main+0x30>
 800395e:	bf00      	nop
 8003960:	08022db0 	.word	0x08022db0

08003964 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b0a8      	sub	sp, #160	; 0xa0
 8003968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800396a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800396e:	2238      	movs	r2, #56	; 0x38
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f01c fa74 	bl	801fe60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003978:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003988:	463b      	mov	r3, r7
 800398a:	2254      	movs	r2, #84	; 0x54
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f01c fa66 	bl	801fe60 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003994:	2000      	movs	r0, #0
 8003996:	f7fd fe5b 	bl	8001650 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800399a:	2302      	movs	r3, #2
 800399c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800399e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039a2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039a4:	2340      	movs	r3, #64	; 0x40
 80039a6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039a8:	2302      	movs	r3, #2
 80039aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039ae:	2302      	movs	r3, #2
 80039b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80039b4:	2304      	movs	r3, #4
 80039b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80039ba:	2355      	movs	r3, #85	; 0x55
 80039bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039c0:	2302      	movs	r3, #2
 80039c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80039c6:	2302      	movs	r3, #2
 80039c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80039cc:	2302      	movs	r3, #2
 80039ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd feee 	bl	80017b8 <HAL_RCC_OscConfig>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bf14      	ite	ne
 80039e2:	2301      	movne	r3, #1
 80039e4:	2300      	moveq	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 80039ec:	f000 f960 	bl	8003cb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039f0:	230f      	movs	r3, #15
 80039f2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039f4:	2303      	movs	r3, #3
 80039f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039f8:	2300      	movs	r3, #0
 80039fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80039fc:	2300      	movs	r3, #0
 80039fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a00:	2300      	movs	r3, #0
 8003a02:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003a04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a08:	2104      	movs	r1, #4
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe f9ec 	bl	8001de8 <HAL_RCC_ClockConfig>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bf14      	ite	ne
 8003a16:	2301      	movne	r3, #1
 8003a18:	2300      	moveq	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003a20:	f000 f946 	bl	8003cb0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003a24:	2321      	movs	r3, #33	; 0x21
 8003a26:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a30:	463b      	mov	r3, r7
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fbf4 	bl	8002220 <HAL_RCCEx_PeriphCLKConfig>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bf14      	ite	ne
 8003a3e:	2301      	movne	r3, #1
 8003a40:	2300      	moveq	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003a48:	f000 f932 	bl	8003cb0 <Error_Handler>
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	37a0      	adds	r7, #160	; 0xa0
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003a58:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a5a:	4a2c      	ldr	r2, [pc, #176]	; (8003b0c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8003a5c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003a5e:	4b2a      	ldr	r3, [pc, #168]	; (8003b08 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a64:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a66:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003a6c:	4b26      	ldr	r3, [pc, #152]	; (8003b08 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003a72:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003a78:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a7a:	220c      	movs	r2, #12
 8003a7c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a7e:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a84:	4b20      	ldr	r3, [pc, #128]	; (8003b08 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a8a:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a90:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003a96:	481c      	ldr	r0, [pc, #112]	; (8003b08 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a98:	f7fe fe0e 	bl	80026b8 <HAL_UART_Init>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bf14      	ite	ne
 8003aa2:	2301      	movne	r3, #1
 8003aa4:	2300      	moveq	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003aac:	f000 f900 	bl	8003cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4815      	ldr	r0, [pc, #84]	; (8003b08 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ab4:	f7ff fac0 	bl	8003038 <HAL_UARTEx_SetTxFifoThreshold>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	bf14      	ite	ne
 8003abe:	2301      	movne	r3, #1
 8003ac0:	2300      	moveq	r3, #0
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003ac8:	f000 f8f2 	bl	8003cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003acc:	2100      	movs	r1, #0
 8003ace:	480e      	ldr	r0, [pc, #56]	; (8003b08 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ad0:	f7ff faf0 	bl	80030b4 <HAL_UARTEx_SetRxFifoThreshold>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bf14      	ite	ne
 8003ada:	2301      	movne	r3, #1
 8003adc:	2300      	moveq	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003ae4:	f000 f8e4 	bl	8003cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003ae8:	4807      	ldr	r0, [pc, #28]	; (8003b08 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003aea:	f7ff fa6c 	bl	8002fc6 <HAL_UARTEx_DisableFifoMode>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003afe:	f000 f8d7 	bl	8003cb0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	2000037c 	.word	0x2000037c
 8003b0c:	40008000 	.word	0x40008000

08003b10 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b14:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b16:	4a2d      	ldr	r2, [pc, #180]	; (8003bcc <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003b18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b1a:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b22:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b28:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b2e:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b34:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b36:	220c      	movs	r2, #12
 8003b38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b3a:	4b23      	ldr	r3, [pc, #140]	; (8003bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b40:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b46:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b4c:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b52:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b58:	481b      	ldr	r0, [pc, #108]	; (8003bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b5a:	f7fe fdad 	bl	80026b8 <HAL_UART_Init>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf14      	ite	ne
 8003b64:	2301      	movne	r3, #1
 8003b66:	2300      	moveq	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003b6e:	f000 f89f 	bl	8003cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b72:	2100      	movs	r1, #0
 8003b74:	4814      	ldr	r0, [pc, #80]	; (8003bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b76:	f7ff fa5f 	bl	8003038 <HAL_UARTEx_SetTxFifoThreshold>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf14      	ite	ne
 8003b80:	2301      	movne	r3, #1
 8003b82:	2300      	moveq	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003b8a:	f000 f891 	bl	8003cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b8e:	2100      	movs	r1, #0
 8003b90:	480d      	ldr	r0, [pc, #52]	; (8003bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b92:	f7ff fa8f 	bl	80030b4 <HAL_UARTEx_SetRxFifoThreshold>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003ba6:	f000 f883 	bl	8003cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003baa:	4807      	ldr	r0, [pc, #28]	; (8003bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003bac:	f7ff fa0b 	bl	8002fc6 <HAL_UARTEx_DisableFifoMode>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf14      	ite	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	2300      	moveq	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003bc0:	f000 f876 	bl	8003cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bc4:	bf00      	nop
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	2000040c 	.word	0x2000040c
 8003bcc:	40013800 	.word	0x40013800

08003bd0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	; 0x28
 8003bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	605a      	str	r2, [r3, #4]
 8003be0:	609a      	str	r2, [r3, #8]
 8003be2:	60da      	str	r2, [r3, #12]
 8003be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003be6:	4b2f      	ldr	r3, [pc, #188]	; (8003ca4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bea:	4a2e      	ldr	r2, [pc, #184]	; (8003ca4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003bec:	f043 0304 	orr.w	r3, r3, #4
 8003bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bf2:	4b2c      	ldr	r3, [pc, #176]	; (8003ca4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bfe:	4b29      	ldr	r3, [pc, #164]	; (8003ca4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c02:	4a28      	ldr	r2, [pc, #160]	; (8003ca4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c04:	f043 0320 	orr.w	r3, r3, #32
 8003c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c0a:	4b26      	ldr	r3, [pc, #152]	; (8003ca4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c16:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1a:	4a22      	ldr	r2, [pc, #136]	; (8003ca4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c22:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ca4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c32:	4a1c      	ldr	r2, [pc, #112]	; (8003ca4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c34:	f043 0302 	orr.w	r3, r3, #2
 8003c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	607b      	str	r3, [r7, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003c46:	2200      	movs	r2, #0
 8003c48:	2120      	movs	r1, #32
 8003c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c4e:	f7fd fca9 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <_ZL12MX_GPIO_Initv+0xd8>)
 8003c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003c60:	f107 0314 	add.w	r3, r7, #20
 8003c64:	4619      	mov	r1, r3
 8003c66:	4811      	ldr	r0, [pc, #68]	; (8003cac <_ZL12MX_GPIO_Initv+0xdc>)
 8003c68:	f7fd fb1a 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003c6c:	2320      	movs	r3, #32
 8003c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c70:	2301      	movs	r3, #1
 8003c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003c7c:	f107 0314 	add.w	r3, r7, #20
 8003c80:	4619      	mov	r1, r3
 8003c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c86:	f7fd fb0b 	bl	80012a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	2028      	movs	r0, #40	; 0x28
 8003c90:	f7fd fad1 	bl	8001236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c94:	2028      	movs	r0, #40	; 0x28
 8003c96:	f7fd fae8 	bl	800126a <HAL_NVIC_EnableIRQ>

}
 8003c9a:	bf00      	nop
 8003c9c:	3728      	adds	r7, #40	; 0x28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	10110000 	.word	0x10110000
 8003cac:	48000800 	.word	0x48000800

08003cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb4:	b672      	cpsid	i
}
 8003cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cb8:	e7fe      	b.n	8003cb8 <Error_Handler+0x8>

08003cba <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8003cc2:	2032      	movs	r0, #50	; 0x32
 8003cc4:	f7ff fd3c 	bl	8003740 <ringBuffer_init>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	605a      	str	r2, [r3, #4]

	}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fd56 	bl	8003794 <ringBuffer_deInit>
	}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f00f ffd8 	bl	8013cb0 <_ZN5UtestC1Ev>
 8003d00:	4a03      	ldr	r2, [pc, #12]	; (8003d10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	08027938 	.word	0x08027938

08003d14 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	4a05      	ldr	r2, [pc, #20]	; (8003d34 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f00f ffd3 	bl	8013cd0 <_ZN5UtestD1Ev>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	08027938 	.word	0x08027938

08003d38 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7ff ffe7 	bl	8003d14 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8003d46:	2108      	movs	r1, #8
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f005 fff5 	bl	8009d38 <_ZdlPvj>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	605a      	str	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff ffbe 	bl	8003cf0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8003d74:	4a03      	ldr	r2, [pc, #12]	; (8003d84 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	08027918 	.word	0x08027918

08003d88 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 8003d88:	b590      	push	{r4, r7, lr}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	2228      	movs	r2, #40	; 0x28
 8003d92:	4906      	ldr	r1, [pc, #24]	; (8003dac <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8003d94:	2008      	movs	r0, #8
 8003d96:	f005 ffbb 	bl	8009d10 <_ZnwjPKci>
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	f7ff ffdb 	bl	8003d58 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 8003da2:	4623      	mov	r3, r4
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd90      	pop	{r4, r7, pc}
 8003dac:	08022e2c 	.word	0x08022e2c

08003db0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f00e fb96 	bl	80124ec <_ZN10UtestShellC1Ev>
 8003dc0:	4a03      	ldr	r2, [pc, #12]	; (8003dd0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	0802786c 	.word	0x0802786c

08003dd4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8003dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af04      	add	r7, sp, #16
 8003dda:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8003ddc:	f00f ff3e 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8003de0:	4604      	mov	r4, r0
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	3338      	adds	r3, #56	; 0x38
 8003de6:	681d      	ldr	r5, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	461e      	mov	r6, r3
 8003df0:	f00f ff44 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003df4:	4603      	mov	r3, r0
 8003df6:	9302      	str	r3, [sp, #8]
 8003df8:	232b      	movs	r3, #43	; 0x2b
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	4b2a      	ldr	r3, [pc, #168]	; (8003ea8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	4b2a      	ldr	r3, [pc, #168]	; (8003eac <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8003e02:	4632      	mov	r2, r6
 8003e04:	2132      	movs	r1, #50	; 0x32
 8003e06:	4620      	mov	r0, r4
 8003e08:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 8003e0a:	f00f ff27 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8003e0e:	4604      	mov	r4, r0
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	3320      	adds	r3, #32
 8003e14:	681d      	ldr	r5, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2de      	uxtb	r6, r3
 8003e26:	f00f ff29 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	9303      	str	r3, [sp, #12]
 8003e2e:	232c      	movs	r3, #44	; 0x2c
 8003e30:	9302      	str	r3, [sp, #8]
 8003e32:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	2300      	movs	r3, #0
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8003e3c:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 8003e3e:	4631      	mov	r1, r6
 8003e40:	4620      	mov	r0, r4
 8003e42:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8003e44:	f00f ff0a 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8003e48:	4604      	mov	r4, r0
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	3338      	adds	r3, #56	; 0x38
 8003e4e:	681d      	ldr	r5, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	461e      	mov	r6, r3
 8003e58:	f00f ff10 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	9302      	str	r3, [sp, #8]
 8003e60:	232d      	movs	r3, #45	; 0x2d
 8003e62:	9301      	str	r3, [sp, #4]
 8003e64:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 8003e6a:	4632      	mov	r2, r6
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4620      	mov	r0, r4
 8003e70:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 8003e72:	f00f fef3 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8003e76:	4604      	mov	r4, r0
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	3338      	adds	r3, #56	; 0x38
 8003e7c:	681d      	ldr	r5, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	461e      	mov	r6, r3
 8003e86:	f00f fef9 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	9302      	str	r3, [sp, #8]
 8003e8e:	232e      	movs	r3, #46	; 0x2e
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 8003e98:	4632      	mov	r2, r6
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	47a8      	blx	r5

}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ea8:	08022e2c 	.word	0x08022e2c
 8003eac:	08022e40 	.word	0x08022e40
 8003eb0:	08022e68 	.word	0x08022e68
 8003eb4:	08022e80 	.word	0x08022e80
 8003eb8:	08022e88 	.word	0x08022e88
 8003ebc:	08022eb0 	.word	0x08022eb0

08003ec0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	605a      	str	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff ff0a 	bl	8003cf0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8003edc:	4a03      	ldr	r2, [pc, #12]	; (8003eec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	0802784c 	.word	0x0802784c

08003ef0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8003ef0:	b590      	push	{r4, r7, lr}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	2232      	movs	r2, #50	; 0x32
 8003efa:	4906      	ldr	r1, [pc, #24]	; (8003f14 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8003efc:	2008      	movs	r0, #8
 8003efe:	f005 ff07 	bl	8009d10 <_ZnwjPKci>
 8003f02:	4604      	mov	r4, r0
 8003f04:	4620      	mov	r0, r4
 8003f06:	f7ff ffdb 	bl	8003ec0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 8003f0a:	4623      	mov	r3, r4
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd90      	pop	{r4, r7, pc}
 8003f14:	08022e2c 	.word	0x08022e2c

08003f18 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f00e fae2 	bl	80124ec <_ZN10UtestShellC1Ev>
 8003f28:	4a03      	ldr	r2, [pc, #12]	; (8003f38 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	080277a0 	.word	0x080277a0

08003f3c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8003f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af04      	add	r7, sp, #16
 8003f42:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2145      	movs	r1, #69	; 0x45
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fc39 	bl	80037c2 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8003f50:	f00f fe84 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8003f54:	4604      	mov	r4, r0
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	3338      	adds	r3, #56	; 0x38
 8003f5a:	681d      	ldr	r5, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	461e      	mov	r6, r3
 8003f66:	f00f fe89 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	9302      	str	r3, [sp, #8]
 8003f6e:	2335      	movs	r3, #53	; 0x35
 8003f70:	9301      	str	r3, [sp, #4]
 8003f72:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 8003f78:	4632      	mov	r2, r6
 8003f7a:	2145      	movs	r1, #69	; 0x45
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2110      	movs	r1, #16
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fc1b 	bl	80037c2 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8003f8c:	f00f fe66 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8003f90:	4604      	mov	r4, r0
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	3338      	adds	r3, #56	; 0x38
 8003f96:	681d      	ldr	r5, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	461e      	mov	r6, r3
 8003fa4:	f00f fe6a 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	9302      	str	r3, [sp, #8]
 8003fac:	2338      	movs	r3, #56	; 0x38
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 8003fb6:	4632      	mov	r2, r6
 8003fb8:	2110      	movs	r1, #16
 8003fba:	4620      	mov	r0, r4
 8003fbc:	47a8      	blx	r5

}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	08022e2c 	.word	0x08022e2c
 8003fcc:	08022ed8 	.word	0x08022ed8
 8003fd0:	08022f08 	.word	0x08022f08

08003fd4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff fe80 	bl	8003cf0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8003ff0:	4a03      	ldr	r2, [pc, #12]	; (8004000 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	08027780 	.word	0x08027780

08004004 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004004:	b590      	push	{r4, r7, lr}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	223c      	movs	r2, #60	; 0x3c
 800400e:	4906      	ldr	r1, [pc, #24]	; (8004028 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004010:	2008      	movs	r0, #8
 8004012:	f005 fe7d 	bl	8009d10 <_ZnwjPKci>
 8004016:	4604      	mov	r4, r0
 8004018:	4620      	mov	r0, r4
 800401a:	f7ff ffdb 	bl	8003fd4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 800401e:	4623      	mov	r3, r4
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	bd90      	pop	{r4, r7, pc}
 8004028:	08022e2c 	.word	0x08022e2c

0800402c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4618      	mov	r0, r3
 8004038:	f00e fa58 	bl	80124ec <_ZN10UtestShellC1Ev>
 800403c:	4a03      	ldr	r2, [pc, #12]	; (800404c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	080276d4 	.word	0x080276d4

08004050 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 8004050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004052:	b089      	sub	sp, #36	; 0x24
 8004054:	af04      	add	r7, sp, #16
 8004056:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	3b01      	subs	r3, #1
 800406e:	429a      	cmp	r2, r3
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4293      	cmp	r3, r2
 800407e:	da0b      	bge.n	8004098 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fb99 	bl	80037c2 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3301      	adds	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	e7e3      	b.n	8004060 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	21ff      	movs	r1, #255	; 0xff
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff fb8f 	bl	80037c2 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 80040a4:	f00f fdda 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 80040a8:	4604      	mov	r4, r0
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	3338      	adds	r3, #56	; 0x38
 80040ae:	681d      	ldr	r5, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	461e      	mov	r6, r3
 80040ba:	f00f fddf 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80040be:	4603      	mov	r3, r0
 80040c0:	9302      	str	r3, [sp, #8]
 80040c2:	2344      	movs	r3, #68	; 0x44
 80040c4:	9301      	str	r3, [sp, #4]
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 80040cc:	4632      	mov	r2, r6
 80040ce:	21ff      	movs	r1, #255	; 0xff
 80040d0:	4620      	mov	r0, r4
 80040d2:	47a8      	blx	r5
}
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040dc:	08022e2c 	.word	0x08022e2c
 80040e0:	08022f38 	.word	0x08022f38

080040e4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	605a      	str	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fdf8 	bl	8003cf0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004100:	4a03      	ldr	r2, [pc, #12]	; (8004110 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	080276b4 	.word	0x080276b4

08004114 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	2247      	movs	r2, #71	; 0x47
 800411e:	4906      	ldr	r1, [pc, #24]	; (8004138 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 8004120:	2008      	movs	r0, #8
 8004122:	f005 fdf5 	bl	8009d10 <_ZnwjPKci>
 8004126:	4604      	mov	r4, r0
 8004128:	4620      	mov	r0, r4
 800412a:	f7ff ffdb 	bl	80040e4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 800412e:	4623      	mov	r3, r4
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	bd90      	pop	{r4, r7, pc}
 8004138:	08022e2c 	.word	0x08022e2c

0800413c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4618      	mov	r0, r3
 8004148:	f00e f9d0 	bl	80124ec <_ZN10UtestShellC1Ev>
 800414c:	4a03      	ldr	r2, [pc, #12]	; (800415c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4618      	mov	r0, r3
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	08027608 	.word	0x08027608

08004160 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 8004160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004162:	b089      	sub	sp, #36	; 0x24
 8004164:	af04      	add	r7, sp, #16
 8004166:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	21ff      	movs	r1, #255	; 0xff
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff fb27 	bl	80037c2 <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff fb4c 	bl	8003816 <ringBuffer_pop>
 800417e:	4603      	mov	r3, r0
 8004180:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 8004182:	f00f fd6b 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8004186:	4604      	mov	r4, r0
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	3338      	adds	r3, #56	; 0x38
 800418c:	681d      	ldr	r5, [r3, #0]
 800418e:	7bfe      	ldrb	r6, [r7, #15]
 8004190:	f00f fd74 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004194:	4603      	mov	r3, r0
 8004196:	9302      	str	r3, [sp, #8]
 8004198:	234c      	movs	r3, #76	; 0x4c
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 80041a2:	4632      	mov	r2, r6
 80041a4:	21ff      	movs	r1, #255	; 0xff
 80041a6:	4620      	mov	r0, r4
 80041a8:	47a8      	blx	r5

}
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b2:	bf00      	nop
 80041b4:	08022e2c 	.word	0x08022e2c
 80041b8:	08022f68 	.word	0x08022f68

080041bc <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	605a      	str	r2, [r3, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fd8c 	bl	8003cf0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80041d8:	4a03      	ldr	r2, [pc, #12]	; (80041e8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	080275e8 	.word	0x080275e8

080041ec <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 80041ec:	b590      	push	{r4, r7, lr}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	2250      	movs	r2, #80	; 0x50
 80041f6:	4906      	ldr	r1, [pc, #24]	; (8004210 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 80041f8:	2008      	movs	r0, #8
 80041fa:	f005 fd89 	bl	8009d10 <_ZnwjPKci>
 80041fe:	4604      	mov	r4, r0
 8004200:	4620      	mov	r0, r4
 8004202:	f7ff ffdb 	bl	80041bc <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004206:	4623      	mov	r3, r4
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	bd90      	pop	{r4, r7, pc}
 8004210:	08022e2c 	.word	0x08022e2c

08004214 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4618      	mov	r0, r3
 8004220:	f00e f964 	bl	80124ec <_ZN10UtestShellC1Ev>
 8004224:	4a03      	ldr	r2, [pc, #12]	; (8004234 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	0802753c 	.word	0x0802753c

08004238 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800423a:	b089      	sub	sp, #36	; 0x24
 800423c:	af04      	add	r7, sp, #16
 800423e:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	21aa      	movs	r1, #170	; 0xaa
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fab9 	bl	80037c2 <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	3b01      	subs	r3, #1
 8004266:	429a      	cmp	r2, r3
 8004268:	bf0c      	ite	eq
 800426a:	2301      	moveq	r3, #1
 800426c:	2300      	movne	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	461a      	mov	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4293      	cmp	r3, r2
 8004276:	da0a      	bge.n	800428e <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff faca 	bl	8003816 <ringBuffer_pop>
 8004282:	4603      	mov	r3, r0
 8004284:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3301      	adds	r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e7e4      	b.n	8004258 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fabf 	bl	8003816 <ringBuffer_pop>
 8004298:	4603      	mov	r3, r0
 800429a:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 800429c:	f00f fcde 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 80042a0:	4604      	mov	r4, r0
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	3338      	adds	r3, #56	; 0x38
 80042a6:	681d      	ldr	r5, [r3, #0]
 80042a8:	7afe      	ldrb	r6, [r7, #11]
 80042aa:	f00f fce7 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80042ae:	4603      	mov	r3, r0
 80042b0:	9302      	str	r3, [sp, #8]
 80042b2:	235d      	movs	r3, #93	; 0x5d
 80042b4:	9301      	str	r3, [sp, #4]
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 80042bc:	4632      	mov	r2, r6
 80042be:	21aa      	movs	r1, #170	; 0xaa
 80042c0:	4620      	mov	r0, r4
 80042c2:	47a8      	blx	r5
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042cc:	08022e2c 	.word	0x08022e2c
 80042d0:	08022f88 	.word	0x08022f88

080042d4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	605a      	str	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fd00 	bl	8003cf0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80042f0:	4a03      	ldr	r2, [pc, #12]	; (8004300 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	0802751c 	.word	0x0802751c

08004304 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004304:	b590      	push	{r4, r7, lr}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	2260      	movs	r2, #96	; 0x60
 800430e:	4906      	ldr	r1, [pc, #24]	; (8004328 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004310:	2008      	movs	r0, #8
 8004312:	f005 fcfd 	bl	8009d10 <_ZnwjPKci>
 8004316:	4604      	mov	r4, r0
 8004318:	4620      	mov	r0, r4
 800431a:	f7ff ffdb 	bl	80042d4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 800431e:	4623      	mov	r3, r4
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bd90      	pop	{r4, r7, pc}
 8004328:	08022e2c 	.word	0x08022e2c

0800432c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4618      	mov	r0, r3
 8004338:	f00e f8d8 	bl	80124ec <_ZN10UtestShellC1Ev>
 800433c:	4a03      	ldr	r2, [pc, #12]	; (800434c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	08027470 	.word	0x08027470

08004350 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004352:	b089      	sub	sp, #36	; 0x24
 8004354:	af04      	add	r7, sp, #16
 8004356:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	429a      	cmp	r2, r3
 8004366:	d20b      	bcs.n	8004380 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	4611      	mov	r1, r2
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fa25 	bl	80037c2 <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3301      	adds	r3, #1
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	e7ed      	b.n	800435c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004380:	f00f fc6c 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8004384:	4604      	mov	r4, r0
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	3338      	adds	r3, #56	; 0x38
 800438a:	681d      	ldr	r5, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	3b01      	subs	r3, #1
 800439a:	4413      	add	r3, r2
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	461e      	mov	r6, r3
 80043a0:	f00f fc6c 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80043a4:	4603      	mov	r3, r0
 80043a6:	9302      	str	r3, [sp, #8]
 80043a8:	2367      	movs	r3, #103	; 0x67
 80043aa:	9301      	str	r3, [sp, #4]
 80043ac:	4b24      	ldr	r3, [pc, #144]	; (8004440 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	4b24      	ldr	r3, [pc, #144]	; (8004444 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 80043b2:	4632      	mov	r2, r6
 80043b4:	2131      	movs	r1, #49	; 0x31
 80043b6:	4620      	mov	r0, r4
 80043b8:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fa53 	bl	800386a <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 80043c4:	f00f fc4a 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 80043c8:	4604      	mov	r4, r0
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	3338      	adds	r3, #56	; 0x38
 80043ce:	681d      	ldr	r5, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	3b01      	subs	r3, #1
 80043de:	4413      	add	r3, r2
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	461e      	mov	r6, r3
 80043e4:	f00f fc4a 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80043e8:	4603      	mov	r3, r0
 80043ea:	9302      	str	r3, [sp, #8]
 80043ec:	236b      	movs	r3, #107	; 0x6b
 80043ee:	9301      	str	r3, [sp, #4]
 80043f0:	4b13      	ldr	r3, [pc, #76]	; (8004440 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	4b14      	ldr	r3, [pc, #80]	; (8004448 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 80043f6:	4632      	mov	r2, r6
 80043f8:	2100      	movs	r1, #0
 80043fa:	4620      	mov	r0, r4
 80043fc:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 80043fe:	f00f fc2d 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8004402:	4604      	mov	r4, r0
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	3338      	adds	r3, #56	; 0x38
 8004408:	681d      	ldr	r5, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	085b      	lsrs	r3, r3, #1
 8004418:	4413      	add	r3, r2
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	461e      	mov	r6, r3
 800441e:	f00f fc2d 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004422:	4603      	mov	r3, r0
 8004424:	9302      	str	r3, [sp, #8]
 8004426:	236c      	movs	r3, #108	; 0x6c
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	4b07      	ldr	r3, [pc, #28]	; (800444c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004430:	4632      	mov	r2, r6
 8004432:	2100      	movs	r1, #0
 8004434:	4620      	mov	r0, r4
 8004436:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all the elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004440:	08022e2c 	.word	0x08022e2c
 8004444:	08022fa8 	.word	0x08022fa8
 8004448:	08022fe4 	.word	0x08022fe4
 800444c:	08023020 	.word	0x08023020

08004450 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	605a      	str	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fc42 	bl	8003cf0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800446c:	4a03      	ldr	r2, [pc, #12]	; (800447c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	08027450 	.word	0x08027450

08004480 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004480:	b590      	push	{r4, r7, lr}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	2275      	movs	r2, #117	; 0x75
 800448a:	4906      	ldr	r1, [pc, #24]	; (80044a4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 800448c:	2008      	movs	r0, #8
 800448e:	f005 fc3f 	bl	8009d10 <_ZnwjPKci>
 8004492:	4604      	mov	r4, r0
 8004494:	4620      	mov	r0, r4
 8004496:	f7ff ffdb 	bl	8004450 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 800449a:	4623      	mov	r3, r4
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd90      	pop	{r4, r7, pc}
 80044a4:	08022e2c 	.word	0x08022e2c

080044a8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f00e f81a 	bl	80124ec <_ZN10UtestShellC1Ev>
 80044b8:	4a03      	ldr	r2, [pc, #12]	; (80044c8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	080273a4 	.word	0x080273a4

080044cc <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 80044cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af04      	add	r7, sp, #16
 80044d2:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	490e      	ldr	r1, [pc, #56]	; (8004514 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff f9dc 	bl	8003898 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 80044e0:	f00f fbbc 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 80044e4:	4604      	mov	r4, r0
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	3324      	adds	r3, #36	; 0x24
 80044ea:	681d      	ldr	r5, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	68de      	ldr	r6, [r3, #12]
 80044f2:	f00f fbc3 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80044f6:	4603      	mov	r3, r0
 80044f8:	9302      	str	r3, [sp, #8]
 80044fa:	2379      	movs	r3, #121	; 0x79
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	4b06      	ldr	r3, [pc, #24]	; (8004518 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	2300      	movs	r3, #0
 8004504:	4632      	mov	r2, r6
 8004506:	4903      	ldr	r1, [pc, #12]	; (8004514 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004508:	4620      	mov	r0, r4
 800450a:	47a8      	blx	r5
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004514:	08023058 	.word	0x08023058
 8004518:	08022e2c 	.word	0x08022e2c

0800451c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	605a      	str	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff fbdc 	bl	8003cf0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004538:	4a03      	ldr	r2, [pc, #12]	; (8004548 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	08027384 	.word	0x08027384

0800454c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 800454c:	b590      	push	{r4, r7, lr}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	227c      	movs	r2, #124	; 0x7c
 8004556:	4906      	ldr	r1, [pc, #24]	; (8004570 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004558:	2008      	movs	r0, #8
 800455a:	f005 fbd9 	bl	8009d10 <_ZnwjPKci>
 800455e:	4604      	mov	r4, r0
 8004560:	4620      	mov	r0, r4
 8004562:	f7ff ffdb 	bl	800451c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004566:	4623      	mov	r3, r4
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	bd90      	pop	{r4, r7, pc}
 8004570:	08022e2c 	.word	0x08022e2c

08004574 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4618      	mov	r0, r3
 8004580:	f00d ffb4 	bl	80124ec <_ZN10UtestShellC1Ev>
 8004584:	4a03      	ldr	r2, [pc, #12]	; (8004594 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	080272d8 	.word	0x080272d8

08004598 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800459c:	b08a      	sub	sp, #40	; 0x28
 800459e:	af04      	add	r7, sp, #16
 80045a0:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	494e      	ldr	r1, [pc, #312]	; (80046e0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff f975 	bl	8003898 <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 80045ae:	f00f fb55 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 80045b2:	4604      	mov	r4, r0
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	3324      	adds	r3, #36	; 0x24
 80045b8:	681d      	ldr	r5, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	68de      	ldr	r6, [r3, #12]
 80045c0:	f00f fb5c 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045c4:	4603      	mov	r3, r0
 80045c6:	9302      	str	r3, [sp, #8]
 80045c8:	2380      	movs	r3, #128	; 0x80
 80045ca:	9301      	str	r3, [sp, #4]
 80045cc:	4b45      	ldr	r3, [pc, #276]	; (80046e4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	2300      	movs	r3, #0
 80045d2:	4632      	mov	r2, r6
 80045d4:	4942      	ldr	r1, [pc, #264]	; (80046e0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 80045d6:	4620      	mov	r0, r4
 80045d8:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4942      	ldr	r1, [pc, #264]	; (80046e8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff f978 	bl	80038d6 <ringBuffer_lookFor>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d05c      	beq.n	80046b0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	493b      	ldr	r1, [pc, #236]	; (80046e8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff f96a 	bl	80038d6 <ringBuffer_lookFor>
 8004602:	4604      	mov	r4, r0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	4937      	ldr	r1, [pc, #220]	; (80046e8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff f963 	bl	80038d6 <ringBuffer_lookFor>
 8004610:	4603      	mov	r3, r0
 8004612:	429c      	cmp	r4, r3
 8004614:	bf14      	ite	ne
 8004616:	2301      	movne	r3, #1
 8004618:	2300      	moveq	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d008      	beq.n	8004632 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004620:	f00f fb1c 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8004624:	6803      	ldr	r3, [r0, #0]
 8004626:	3370      	adds	r3, #112	; 0x70
 8004628:	681c      	ldr	r4, [r3, #0]
 800462a:	2381      	movs	r3, #129	; 0x81
 800462c:	4a2d      	ldr	r2, [pc, #180]	; (80046e4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 800462e:	492f      	ldr	r1, [pc, #188]	; (80046ec <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004630:	47a0      	blx	r4
 8004632:	f00f fb13 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8004636:	4604      	mov	r4, r0
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	3358      	adds	r3, #88	; 0x58
 800463c:	681d      	ldr	r5, [r3, #0]
 800463e:	f107 0308 	add.w	r3, r7, #8
 8004642:	2101      	movs	r1, #1
 8004644:	4618      	mov	r0, r3
 8004646:	f008 fda5 	bl	800d194 <_Z10StringFromi>
 800464a:	f107 0308 	add.w	r3, r7, #8
 800464e:	4618      	mov	r0, r3
 8004650:	f008 faac 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 8004654:	4606      	mov	r6, r0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4923      	ldr	r1, [pc, #140]	; (80046e8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff f93a 	bl	80038d6 <ringBuffer_lookFor>
 8004662:	4602      	mov	r2, r0
 8004664:	f107 0310 	add.w	r3, r7, #16
 8004668:	4611      	mov	r1, r2
 800466a:	4618      	mov	r0, r3
 800466c:	f009 f80c 	bl	800d688 <_Z10StringFromm>
 8004670:	f107 0310 	add.w	r3, r7, #16
 8004674:	4618      	mov	r0, r3
 8004676:	f008 fa99 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800467a:	4680      	mov	r8, r0
 800467c:	f00f fafe 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004680:	4603      	mov	r3, r0
 8004682:	9303      	str	r3, [sp, #12]
 8004684:	2381      	movs	r3, #129	; 0x81
 8004686:	9302      	str	r3, [sp, #8]
 8004688:	4b16      	ldr	r3, [pc, #88]	; (80046e4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	2300      	movs	r3, #0
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	4643      	mov	r3, r8
 8004692:	4632      	mov	r2, r6
 8004694:	2101      	movs	r1, #1
 8004696:	4620      	mov	r0, r4
 8004698:	47a8      	blx	r5
 800469a:	f107 0310 	add.w	r3, r7, #16
 800469e:	4618      	mov	r0, r3
 80046a0:	f008 fab1 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80046a4:	f107 0308 	add.w	r3, r7, #8
 80046a8:	4618      	mov	r0, r3
 80046aa:	f008 faac 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 80046ae:	e012      	b.n	80046d6 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 80046b0:	f00f fad4 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 80046b4:	4604      	mov	r4, r0
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	3338      	adds	r3, #56	; 0x38
 80046ba:	681d      	ldr	r5, [r3, #0]
 80046bc:	f00f fade 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046c0:	4603      	mov	r3, r0
 80046c2:	9302      	str	r3, [sp, #8]
 80046c4:	2381      	movs	r3, #129	; 0x81
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	2300      	movs	r3, #0
 80046ce:	2200      	movs	r2, #0
 80046d0:	2100      	movs	r1, #0
 80046d2:	4620      	mov	r0, r4
 80046d4:	47a8      	blx	r5
}
 80046d6:	bf00      	nop
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e0:	08023060 	.word	0x08023060
 80046e4:	08022e2c 	.word	0x08022e2c
 80046e8:	0802306c 	.word	0x0802306c
 80046ec:	08023074 	.word	0x08023074

080046f0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	605a      	str	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff faf2 	bl	8003cf0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800470c:	4a03      	ldr	r2, [pc, #12]	; (800471c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	080272b8 	.word	0x080272b8

08004720 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004720:	b590      	push	{r4, r7, lr}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	2284      	movs	r2, #132	; 0x84
 800472a:	4906      	ldr	r1, [pc, #24]	; (8004744 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 800472c:	2008      	movs	r0, #8
 800472e:	f005 faef 	bl	8009d10 <_ZnwjPKci>
 8004732:	4604      	mov	r4, r0
 8004734:	4620      	mov	r0, r4
 8004736:	f7ff ffdb 	bl	80046f0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 800473a:	4623      	mov	r3, r4
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	bd90      	pop	{r4, r7, pc}
 8004744:	08022e2c 	.word	0x08022e2c

08004748 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4618      	mov	r0, r3
 8004754:	f00d feca 	bl	80124ec <_ZN10UtestShellC1Ev>
 8004758:	4a03      	ldr	r2, [pc, #12]	; (8004768 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	0802720c 	.word	0x0802720c

0800476c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 800476c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800476e:	b087      	sub	sp, #28
 8004770:	af04      	add	r7, sp, #16
 8004772:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004774:	f00f fa72 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8004778:	4604      	mov	r4, r0
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	3338      	adds	r3, #56	; 0x38
 800477e:	681d      	ldr	r5, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff f8bc 	bl	8003902 <ringBuffer_capacity>
 800478a:	4603      	mov	r3, r0
 800478c:	461e      	mov	r6, r3
 800478e:	f00f fa75 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004792:	4603      	mov	r3, r0
 8004794:	9302      	str	r3, [sp, #8]
 8004796:	2387      	movs	r3, #135	; 0x87
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 80047a0:	4632      	mov	r2, r6
 80047a2:	2132      	movs	r1, #50	; 0x32
 80047a4:	4620      	mov	r0, r4
 80047a6:	47a8      	blx	r5

}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047b0:	08022e2c 	.word	0x08022e2c
 80047b4:	08023118 	.word	0x08023118

080047b8 <_Z18UART_Transmit_FakePh>:

/* Mpck functions-----------------------------------------------------------------------*/

void UART_Transmit_Fake(uint8_t* data)
{
 80047b8:	b5b0      	push	{r4, r5, r7, lr}
 80047ba:	b088      	sub	sp, #32
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]

	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 80047c0:	f107 0308 	add.w	r3, r7, #8
 80047c4:	491d      	ldr	r1, [pc, #116]	; (800483c <_Z18UART_Transmit_FakePh+0x84>)
 80047c6:	4618      	mov	r0, r3
 80047c8:	f007 fe65 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80047cc:	f107 0308 	add.w	r3, r7, #8
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f005 ff38 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80047d8:	4604      	mov	r4, r0
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	3318      	adds	r3, #24
 80047de:	681d      	ldr	r5, [r3, #0]
 80047e0:	f107 0310 	add.w	r3, r7, #16
 80047e4:	4916      	ldr	r1, [pc, #88]	; (8004840 <_Z18UART_Transmit_FakePh+0x88>)
 80047e6:	4618      	mov	r0, r3
 80047e8:	f007 fe55 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80047ec:	f107 0310 	add.w	r3, r7, #16
 80047f0:	4619      	mov	r1, r3
 80047f2:	4620      	mov	r0, r4
 80047f4:	47a8      	blx	r5
 80047f6:	4604      	mov	r4, r0
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	333c      	adds	r3, #60	; 0x3c
 80047fc:	681d      	ldr	r5, [r3, #0]
 80047fe:	f107 0318 	add.w	r3, r7, #24
 8004802:	4910      	ldr	r1, [pc, #64]	; (8004844 <_Z18UART_Transmit_FakePh+0x8c>)
 8004804:	4618      	mov	r0, r3
 8004806:	f007 fe46 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800480a:	f107 0318 	add.w	r3, r7, #24
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	4619      	mov	r1, r3
 8004812:	4620      	mov	r0, r4
 8004814:	47a8      	blx	r5
 8004816:	f107 0318 	add.w	r3, r7, #24
 800481a:	4618      	mov	r0, r3
 800481c:	f008 f9f3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8004820:	f107 0310 	add.w	r3, r7, #16
 8004824:	4618      	mov	r0, r3
 8004826:	f008 f9ee 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800482a:	f107 0308 	add.w	r3, r7, #8
 800482e:	4618      	mov	r0, r3
 8004830:	f008 f9e9 	bl	800cc06 <_ZN12SimpleStringD1Ev>

}
 8004834:	bf00      	nop
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bdb0      	pop	{r4, r5, r7, pc}
 800483c:	08023150 	.word	0x08023150
 8004840:	08023154 	.word	0x08023154
 8004844:	08023168 	.word	0x08023168

08004848 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004848:	b5b0      	push	{r4, r5, r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 800484e:	463b      	mov	r3, r7
 8004850:	4916      	ldr	r1, [pc, #88]	; (80048ac <_Z17UART_Receive_Fakev+0x64>)
 8004852:	4618      	mov	r0, r3
 8004854:	f007 fe1f 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8004858:	463b      	mov	r3, r7
 800485a:	2100      	movs	r1, #0
 800485c:	4618      	mov	r0, r3
 800485e:	f005 fef3 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004862:	4604      	mov	r4, r0
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	3318      	adds	r3, #24
 8004868:	681d      	ldr	r5, [r3, #0]
 800486a:	f107 0308 	add.w	r3, r7, #8
 800486e:	4910      	ldr	r1, [pc, #64]	; (80048b0 <_Z17UART_Receive_Fakev+0x68>)
 8004870:	4618      	mov	r0, r3
 8004872:	f007 fe10 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8004876:	f107 0308 	add.w	r3, r7, #8
 800487a:	4619      	mov	r1, r3
 800487c:	4620      	mov	r0, r4
 800487e:	47a8      	blx	r5
 8004880:	4603      	mov	r3, r0
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	3264      	adds	r2, #100	; 0x64
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	4790      	blx	r2
 800488c:	4603      	mov	r3, r0
 800488e:	b2dc      	uxtb	r4, r3
 8004890:	f107 0308 	add.w	r3, r7, #8
 8004894:	4618      	mov	r0, r3
 8004896:	f008 f9b6 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800489a:	463b      	mov	r3, r7
 800489c:	4618      	mov	r0, r3
 800489e:	f008 f9b2 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80048a2:	4623      	mov	r3, r4
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bdb0      	pop	{r4, r5, r7, pc}
 80048ac:	08023150 	.word	0x08023150
 80048b0:	08023170 	.word	0x08023170

080048b4 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 80048b8:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <_Z12getTick_Fakev+0x30>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d103      	bne.n	80048ca <_Z12getTick_Fakev+0x16>
		time = 0;
 80048c2:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <_Z12getTick_Fakev+0x30>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	e004      	b.n	80048d4 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 80048ca:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <_Z12getTick_Fakev+0x30>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3301      	adds	r3, #1
 80048d0:	4a04      	ldr	r2, [pc, #16]	; (80048e4 <_Z12getTick_Fakev+0x30>)
 80048d2:	6013      	str	r3, [r2, #0]
	return time;
 80048d4:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <_Z12getTick_Fakev+0x30>)
 80048d6:	681b      	ldr	r3, [r3, #0]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	200005c0 	.word	0x200005c0

080048e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
/* Test functions of the ring buffer-----------------------------------------------------------------------*/

TEST_GROUP(EspDriver_Test_Group)
{

	void setup()
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 80048f0:	2364      	movs	r3, #100	; 0x64
 80048f2:	4a04      	ldr	r2, [pc, #16]	; (8004904 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 80048f4:	4904      	ldr	r1, [pc, #16]	; (8004908 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 80048f6:	4805      	ldr	r0, [pc, #20]	; (800490c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 80048f8:	f7fe fc68 	bl	80031cc <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);					// buffer size

	}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	080048b5 	.word	0x080048b5
 8004908:	08004849 	.word	0x08004849
 800490c:	080047b9 	.word	0x080047b9

08004910 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 8004918:	f107 0308 	add.w	r3, r7, #8
 800491c:	4917      	ldr	r1, [pc, #92]	; (800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 800491e:	4618      	mov	r0, r3
 8004920:	f007 fdb9 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8004924:	f107 0308 	add.w	r3, r7, #8
 8004928:	2100      	movs	r1, #0
 800492a:	4618      	mov	r0, r3
 800492c:	f005 fe8c 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004930:	4603      	mov	r3, r0
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	3294      	adds	r2, #148	; 0x94
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	4790      	blx	r2
 800493c:	f107 0308 	add.w	r3, r7, #8
 8004940:	4618      	mov	r0, r3
 8004942:	f008 f960 	bl	800cc06 <_ZN12SimpleStringD1Ev>
		mock().clear();
 8004946:	f107 0310 	add.w	r3, r7, #16
 800494a:	490c      	ldr	r1, [pc, #48]	; (800497c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 800494c:	4618      	mov	r0, r3
 800494e:	f007 fda2 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8004952:	f107 0310 	add.w	r3, r7, #16
 8004956:	2100      	movs	r1, #0
 8004958:	4618      	mov	r0, r3
 800495a:	f005 fe75 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800495e:	4603      	mov	r3, r0
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	329c      	adds	r2, #156	; 0x9c
 8004964:	6812      	ldr	r2, [r2, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	4790      	blx	r2
 800496a:	f107 0310 	add.w	r3, r7, #16
 800496e:	4618      	mov	r0, r3
 8004970:	f008 f949 	bl	800cc06 <_ZN12SimpleStringD1Ev>
	}
 8004974:	bf00      	nop
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	08023150 	.word	0x08023150

08004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4618      	mov	r0, r3
 800498c:	f00f f990 	bl	8013cb0 <_ZN5UtestC1Ev>
 8004990:	4a03      	ldr	r2, [pc, #12]	; (80049a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	080271ec 	.word	0x080271ec

080049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	4a05      	ldr	r2, [pc, #20]	; (80049c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f00f f98b 	bl	8013cd0 <_ZN5UtestD1Ev>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	080271ec 	.word	0x080271ec

080049c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff ffe7 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80049d6:	2104      	movs	r1, #4
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f005 f9ad 	bl	8009d38 <_ZdlPvj>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff ffc4 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80049f8:	4a03      	ldr	r2, [pc, #12]	; (8004a08 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	080271cc 	.word	0x080271cc

08004a0c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	22bf      	movs	r2, #191	; 0xbf
 8004a16:	4906      	ldr	r1, [pc, #24]	; (8004a30 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8004a18:	2004      	movs	r0, #4
 8004a1a:	f005 f979 	bl	8009d10 <_ZnwjPKci>
 8004a1e:	4604      	mov	r4, r0
 8004a20:	4620      	mov	r0, r4
 8004a22:	f7ff ffe1 	bl	80049e8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8004a26:	4623      	mov	r3, r4
 8004a28:	4618      	mov	r0, r3
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd90      	pop	{r4, r7, pc}
 8004a30:	08022e2c 	.word	0x08022e2c

08004a34 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f00d fd54 	bl	80124ec <_ZN10UtestShellC1Ev>
 8004a44:	4a03      	ldr	r2, [pc, #12]	; (8004a54 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	08027120 	.word	0x08027120

08004a58 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 8004a58:	b5b0      	push	{r4, r5, r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af04      	add	r7, sp, #16
 8004a5e:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; 			// or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8004a60:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004a62:	4a11      	ldr	r2, [pc, #68]	; (8004aa8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8004a64:	601a      	str	r2, [r3, #0]
	int32_t result = ESP_Init(transmit,
 8004a66:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	2364      	movs	r3, #100	; 0x64
 8004a6c:	4a0f      	ldr	r2, [pc, #60]	; (8004aac <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 8004a6e:	4910      	ldr	r1, [pc, #64]	; (8004ab0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8004a70:	f7fe fbac 	bl	80031cc <ESP_Init>
 8004a74:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 8004a76:	f00f f8f1 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	3338      	adds	r3, #56	; 0x38
 8004a80:	681d      	ldr	r5, [r3, #0]
 8004a82:	f00f f8fb 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004a86:	4603      	mov	r3, r0
 8004a88:	9302      	str	r3, [sp, #8]
 8004a8a:	23cd      	movs	r3, #205	; 0xcd
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	2101      	movs	r1, #1
 8004a98:	4620      	mov	r0, r4
 8004a9a:	47a8      	blx	r5

}
 8004a9c:	bf00      	nop
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8004aa4:	200005c4 	.word	0x200005c4
 8004aa8:	080047b9 	.word	0x080047b9
 8004aac:	080048b5 	.word	0x080048b5
 8004ab0:	08004849 	.word	0x08004849
 8004ab4:	08022e2c 	.word	0x08022e2c
 8004ab8:	08023184 	.word	0x08023184

08004abc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff ff5a 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004acc:	4a03      	ldr	r2, [pc, #12]	; (8004adc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	08027100 	.word	0x08027100

08004ae0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8004ae0:	b590      	push	{r4, r7, lr}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	22d1      	movs	r2, #209	; 0xd1
 8004aea:	4906      	ldr	r1, [pc, #24]	; (8004b04 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8004aec:	2004      	movs	r0, #4
 8004aee:	f005 f90f 	bl	8009d10 <_ZnwjPKci>
 8004af2:	4604      	mov	r4, r0
 8004af4:	4620      	mov	r0, r4
 8004af6:	f7ff ffe1 	bl	8004abc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 8004afa:	4623      	mov	r3, r4
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd90      	pop	{r4, r7, pc}
 8004b04:	08022e2c 	.word	0x08022e2c

08004b08 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f00d fcea 	bl	80124ec <_ZN10UtestShellC1Ev>
 8004b18:	4a03      	ldr	r2, [pc, #12]	; (8004b28 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	08027054 	.word	0x08027054

08004b2c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8004b2c:	b5b0      	push	{r4, r5, r7, lr}
 8004b2e:	b08e      	sub	sp, #56	; 0x38
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");  // UART_Transmit_Fake function waits "Test" string.
 8004b34:	f107 0308 	add.w	r3, r7, #8
 8004b38:	493d      	ldr	r1, [pc, #244]	; (8004c30 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f007 fcab 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8004b40:	f107 0308 	add.w	r3, r7, #8
 8004b44:	2100      	movs	r1, #0
 8004b46:	4618      	mov	r0, r3
 8004b48:	f005 fd7e 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	330c      	adds	r3, #12
 8004b52:	681d      	ldr	r5, [r3, #0]
 8004b54:	f107 0310 	add.w	r3, r7, #16
 8004b58:	4936      	ldr	r1, [pc, #216]	; (8004c34 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f007 fc9b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8004b60:	f107 0310 	add.w	r3, r7, #16
 8004b64:	4619      	mov	r1, r3
 8004b66:	4620      	mov	r0, r4
 8004b68:	47a8      	blx	r5
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	334c      	adds	r3, #76	; 0x4c
 8004b70:	681d      	ldr	r5, [r3, #0]
 8004b72:	f107 0318 	add.w	r3, r7, #24
 8004b76:	4930      	ldr	r1, [pc, #192]	; (8004c38 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f007 fc8c 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8004b7e:	f107 0318 	add.w	r3, r7, #24
 8004b82:	4a2e      	ldr	r2, [pc, #184]	; (8004c3c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 8004b84:	4619      	mov	r1, r3
 8004b86:	4620      	mov	r0, r4
 8004b88:	47a8      	blx	r5
 8004b8a:	f107 0318 	add.w	r3, r7, #24
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f008 f839 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8004b94:	f107 0310 	add.w	r3, r7, #16
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f008 f834 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8004b9e:	f107 0308 	add.w	r3, r7, #8
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f008 f82f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 8004ba8:	f107 0320 	add.w	r3, r7, #32
 8004bac:	4920      	ldr	r1, [pc, #128]	; (8004c30 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f007 fc71 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8004bb4:	f107 0320 	add.w	r3, r7, #32
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f005 fd44 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	330c      	adds	r3, #12
 8004bc6:	681d      	ldr	r5, [r3, #0]
 8004bc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bcc:	4919      	ldr	r1, [pc, #100]	; (8004c34 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f007 fc61 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8004bd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4620      	mov	r0, r4
 8004bdc:	47a8      	blx	r5
 8004bde:	4604      	mov	r4, r0
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	334c      	adds	r3, #76	; 0x4c
 8004be4:	681d      	ldr	r5, [r3, #0]
 8004be6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bea:	4913      	ldr	r1, [pc, #76]	; (8004c38 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 8004bec:	4618      	mov	r0, r3
 8004bee:	f007 fc52 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8004bf2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bf6:	4a12      	ldr	r2, [pc, #72]	; (8004c40 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	47a8      	blx	r5
 8004bfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c02:	4618      	mov	r0, r3
 8004c04:	f007 ffff 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8004c08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f007 fffa 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8004c12:	f107 0320 	add.w	r3, r7, #32
 8004c16:	4618      	mov	r0, r3
 8004c18:	f007 fff5 	bl	800cc06 <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test");
 8004c1c:	4807      	ldr	r0, [pc, #28]	; (8004c3c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 8004c1e:	f7fe fb07 	bl	8003230 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n");
 8004c22:	4807      	ldr	r0, [pc, #28]	; (8004c40 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8004c24:	f7fe fb04 	bl	8003230 <Send_AT_Command>

	// There is no assertion macro here because the function returns nothing.
	// Mocking library checks if the function has been called.
}
 8004c28:	bf00      	nop
 8004c2a:	3738      	adds	r7, #56	; 0x38
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c30:	08023150 	.word	0x08023150
 8004c34:	08023154 	.word	0x08023154
 8004c38:	08023168 	.word	0x08023168
 8004c3c:	08023058 	.word	0x08023058
 8004c40:	080231a4 	.word	0x080231a4

08004c44 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fe96 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004c54:	4a03      	ldr	r2, [pc, #12]	; (8004c64 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	08027034 	.word	0x08027034

08004c68 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	22dd      	movs	r2, #221	; 0xdd
 8004c72:	4906      	ldr	r1, [pc, #24]	; (8004c8c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8004c74:	2004      	movs	r0, #4
 8004c76:	f005 f84b 	bl	8009d10 <_ZnwjPKci>
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f7ff ffe1 	bl	8004c44 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 8004c82:	4623      	mov	r3, r4
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd90      	pop	{r4, r7, pc}
 8004c8c:	08022e2c 	.word	0x08022e2c

08004c90 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f00d fc26 	bl	80124ec <_ZN10UtestShellC1Ev>
 8004ca0:	4a03      	ldr	r2, [pc, #12]	; (8004cb0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	08026f88 	.word	0x08026f88

08004cb4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 8004cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cb6:	b08f      	sub	sp, #60	; 0x3c
 8004cb8:	af04      	add	r7, sp, #16
 8004cba:	6078      	str	r0, [r7, #4]

	const char response[] = "OK\r\n";
 8004cbc:	4a31      	ldr	r2, [pc, #196]	; (8004d84 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 8004cbe:	f107 030c 	add.w	r3, r7, #12
 8004cc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cc6:	6018      	str	r0, [r3, #0]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	7019      	strb	r1, [r3, #0]

	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 8004ccc:	2300      	movs	r3, #0
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd0:	f107 030c 	add.w	r3, r7, #12
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fb fab1 	bl	800023c <strlen>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	461a      	mov	r2, r3
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	da35      	bge.n	8004d50 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8004ce4:	f107 0314 	add.w	r3, r7, #20
 8004ce8:	4927      	ldr	r1, [pc, #156]	; (8004d88 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd4>)
 8004cea:	4618      	mov	r0, r3
 8004cec:	f007 fbd3 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8004cf0:	f107 0314 	add.w	r3, r7, #20
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f005 fca6 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	330c      	adds	r3, #12
 8004d02:	681d      	ldr	r5, [r3, #0]
 8004d04:	f107 031c 	add.w	r3, r7, #28
 8004d08:	4920      	ldr	r1, [pc, #128]	; (8004d8c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd8>)
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f007 fbc3 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8004d10:	f107 031c 	add.w	r3, r7, #28
 8004d14:	4619      	mov	r1, r3
 8004d16:	4620      	mov	r0, r4
 8004d18:	47a8      	blx	r5
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	3264      	adds	r2, #100	; 0x64
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	f107 000c 	add.w	r0, r7, #12
 8004d26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d28:	4401      	add	r1, r0
 8004d2a:	7809      	ldrb	r1, [r1, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	4790      	blx	r2
 8004d30:	f107 031c 	add.w	r3, r7, #28
 8004d34:	4618      	mov	r0, r3
 8004d36:	f007 ff66 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8004d3a:	f107 0314 	add.w	r3, r7, #20
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f007 ff61 	bl	800cc06 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8004d44:	f7fe fa82 	bl	800324c <ESP_UART_ReceiveHandler>
	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4e:	e7bf      	b.n	8004cd0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1c>
	}

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the ring buffer.
 8004d50:	f00e ff84 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8004d54:	4604      	mov	r4, r0
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	3324      	adds	r3, #36	; 0x24
 8004d5a:	681d      	ldr	r5, [r3, #0]
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xdc>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68de      	ldr	r6, [r3, #12]
 8004d62:	f00e ff8b 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d66:	4603      	mov	r3, r0
 8004d68:	9302      	str	r3, [sp, #8]
 8004d6a:	23e8      	movs	r3, #232	; 0xe8
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xe0>)
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	2300      	movs	r3, #0
 8004d74:	4632      	mov	r2, r6
 8004d76:	4903      	ldr	r1, [pc, #12]	; (8004d84 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 8004d78:	4620      	mov	r0, r4
 8004d7a:	47a8      	blx	r5

}
 8004d7c:	bf00      	nop
 8004d7e:	372c      	adds	r7, #44	; 0x2c
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d84:	080231ac 	.word	0x080231ac
 8004d88:	08023150 	.word	0x08023150
 8004d8c:	08023170 	.word	0x08023170
 8004d90:	2000049c 	.word	0x2000049c
 8004d94:	08022e2c 	.word	0x08022e2c

08004d98 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fdec 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004da8:	4a03      	ldr	r2, [pc, #12]	; (8004db8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	08026f68 	.word	0x08026f68

08004dbc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 8004dbc:	b590      	push	{r4, r7, lr}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	22ec      	movs	r2, #236	; 0xec
 8004dc6:	4906      	ldr	r1, [pc, #24]	; (8004de0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 8004dc8:	2004      	movs	r0, #4
 8004dca:	f004 ffa1 	bl	8009d10 <_ZnwjPKci>
 8004dce:	4604      	mov	r4, r0
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f7ff ffe1 	bl	8004d98 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 8004dd6:	4623      	mov	r3, r4
 8004dd8:	4618      	mov	r0, r3
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd90      	pop	{r4, r7, pc}
 8004de0:	08022e2c 	.word	0x08022e2c

08004de4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f00d fb7c 	bl	80124ec <_ZN10UtestShellC1Ev>
 8004df4:	4a03      	ldr	r2, [pc, #12]	; (8004e04 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	08026ebc 	.word	0x08026ebc

08004e08 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 8004e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0a:	b08f      	sub	sp, #60	; 0x3c
 8004e0c:	af04      	add	r7, sp, #16
 8004e0e:	6078      	str	r0, [r7, #4]
	const char response[] = "OK\r\n";
 8004e10:	4a32      	ldr	r2, [pc, #200]	; (8004edc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd4>)
 8004e12:	f107 0308 	add.w	r3, r7, #8
 8004e16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e1a:	6018      	str	r0, [r3, #0]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	7019      	strb	r1, [r3, #0]

	for(int i=0;i<(int)strlen(response);i++)
 8004e20:	2300      	movs	r3, #0
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
 8004e24:	f107 0308 	add.w	r3, r7, #8
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fb fa07 	bl	800023c <strlen>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	461a      	mov	r2, r3
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	4293      	cmp	r3, r2
 8004e36:	da35      	bge.n	8004ea4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8004e38:	f107 0310 	add.w	r3, r7, #16
 8004e3c:	4928      	ldr	r1, [pc, #160]	; (8004ee0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd8>)
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f007 fb29 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8004e44:	f107 0310 	add.w	r3, r7, #16
 8004e48:	2100      	movs	r1, #0
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f005 fbfc 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004e50:	4604      	mov	r4, r0
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	330c      	adds	r3, #12
 8004e56:	681d      	ldr	r5, [r3, #0]
 8004e58:	f107 0318 	add.w	r3, r7, #24
 8004e5c:	4921      	ldr	r1, [pc, #132]	; (8004ee4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xdc>)
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f007 fb19 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8004e64:	f107 0318 	add.w	r3, r7, #24
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	47a8      	blx	r5
 8004e6e:	4603      	mov	r3, r0
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	3264      	adds	r2, #100	; 0x64
 8004e74:	6812      	ldr	r2, [r2, #0]
 8004e76:	f107 0008 	add.w	r0, r7, #8
 8004e7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e7c:	4401      	add	r1, r0
 8004e7e:	7809      	ldrb	r1, [r1, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	4790      	blx	r2
 8004e84:	f107 0318 	add.w	r3, r7, #24
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f007 febc 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8004e8e:	f107 0310 	add.w	r3, r7, #16
 8004e92:	4618      	mov	r0, r3
 8004e94:	f007 feb7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8004e98:	f7fe f9d8 	bl	800324c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea2:	e7bf      	b.n	8004e24 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x1c>
	}

	uint32_t result = Read_Response((char*)"OK");
 8004ea4:	4810      	ldr	r0, [pc, #64]	; (8004ee8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 8004ea6:	f7fe f9e3 	bl	8003270 <Read_Response>
 8004eaa:	6238      	str	r0, [r7, #32]

	LONGS_EQUAL(1,result);
 8004eac:	f00e fed6 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	3338      	adds	r3, #56	; 0x38
 8004eb6:	681d      	ldr	r5, [r3, #0]
 8004eb8:	6a3e      	ldr	r6, [r7, #32]
 8004eba:	f00e fedf 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	9302      	str	r3, [sp, #8]
 8004ec2:	23f8      	movs	r3, #248	; 0xf8
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	4b09      	ldr	r3, [pc, #36]	; (8004eec <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 8004ecc:	4632      	mov	r2, r6
 8004ece:	2101      	movs	r1, #1
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	47a8      	blx	r5

}
 8004ed4:	bf00      	nop
 8004ed6:	372c      	adds	r7, #44	; 0x2c
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004edc:	080231ac 	.word	0x080231ac
 8004ee0:	08023150 	.word	0x08023150
 8004ee4:	08023170 	.word	0x08023170
 8004ee8:	08022db8 	.word	0x08022db8
 8004eec:	08022e2c 	.word	0x08022e2c
 8004ef0:	08023184 	.word	0x08023184

08004ef4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff fd3e 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004f04:	4a03      	ldr	r2, [pc, #12]	; (8004f14 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	08026e9c 	.word	0x08026e9c

08004f18 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 8004f18:	b590      	push	{r4, r7, lr}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	22fd      	movs	r2, #253	; 0xfd
 8004f22:	4906      	ldr	r1, [pc, #24]	; (8004f3c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 8004f24:	2004      	movs	r0, #4
 8004f26:	f004 fef3 	bl	8009d10 <_ZnwjPKci>
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f7ff ffe1 	bl	8004ef4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 8004f32:	4623      	mov	r3, r4
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd90      	pop	{r4, r7, pc}
 8004f3c:	08022e2c 	.word	0x08022e2c

08004f40 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f00d face 	bl	80124ec <_ZN10UtestShellC1Ev>
 8004f50:	4a03      	ldr	r2, [pc, #12]	; (8004f60 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	08026df0 	.word	0x08026df0

08004f64 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 8004f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f66:	b089      	sub	sp, #36	; 0x24
 8004f68:	af04      	add	r7, sp, #16
 8004f6a:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	73fb      	strb	r3, [r7, #15]

	while(1)	// wait the message until timeout occurs.
	{
		response_state = Wait_Response((char*)"OK", 1000);
 8004f70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f74:	4811      	ldr	r0, [pc, #68]	; (8004fbc <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 8004f76:	f7fe f98d 	bl	8003294 <Wait_Response>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d100      	bne.n	8004f86 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 8004f84:	e7f4      	b.n	8004f70 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 8004f86:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8004f88:	f00e fe68 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	3338      	adds	r3, #56	; 0x38
 8004f92:	681d      	ldr	r5, [r3, #0]
 8004f94:	7bfe      	ldrb	r6, [r7, #15]
 8004f96:	f00e fe71 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	9302      	str	r3, [sp, #8]
 8004f9e:	f240 1309 	movw	r3, #265	; 0x109
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 8004faa:	4632      	mov	r2, r6
 8004fac:	2101      	movs	r1, #1
 8004fae:	4620      	mov	r0, r4
 8004fb0:	47a8      	blx	r5

}
 8004fb2:	bf00      	nop
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	08022db8 	.word	0x08022db8
 8004fc0:	08022e2c 	.word	0x08022e2c
 8004fc4:	080231b4 	.word	0x080231b4

08004fc8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff fcd4 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004fd8:	4a03      	ldr	r2, [pc, #12]	; (8004fe8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	08026dd0 	.word	0x08026dd0

08004fec <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8004fec:	b590      	push	{r4, r7, lr}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	f240 120d 	movw	r2, #269	; 0x10d
 8004ff8:	4906      	ldr	r1, [pc, #24]	; (8005014 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 8004ffa:	2004      	movs	r0, #4
 8004ffc:	f004 fe88 	bl	8009d10 <_ZnwjPKci>
 8005000:	4604      	mov	r4, r0
 8005002:	4620      	mov	r0, r4
 8005004:	f7ff ffe0 	bl	8004fc8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 8005008:	4623      	mov	r3, r4
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	bd90      	pop	{r4, r7, pc}
 8005012:	bf00      	nop
 8005014:	08022e2c 	.word	0x08022e2c

08005018 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4618      	mov	r0, r3
 8005024:	f00d fa62 	bl	80124ec <_ZN10UtestShellC1Ev>
 8005028:	4a03      	ldr	r2, [pc, #12]	; (8005038 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	08026d24 	.word	0x08026d24

0800503c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 800503c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800503e:	b08f      	sub	sp, #60	; 0x3c
 8005040:	af04      	add	r7, sp, #16
 8005042:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8005044:	2304      	movs	r3, #4
 8005046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	const char response[] = "OK\r\n";
 800504a:	4a38      	ldr	r2, [pc, #224]	; (800512c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf0>)
 800504c:	f107 0308 	add.w	r3, r7, #8
 8005050:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005054:	6018      	str	r0, [r3, #0]
 8005056:	3304      	adds	r3, #4
 8005058:	7019      	strb	r1, [r3, #0]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 800505a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800505e:	4834      	ldr	r0, [pc, #208]	; (8005130 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf4>)
 8005060:	f7fe f918 	bl	8003294 <Wait_Response>
 8005064:	4603      	mov	r3, r0
 8005066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(response_state != IDLE)
 800506a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800506e:	2b04      	cmp	r3, #4
 8005070:	d141      	bne.n	80050f6 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xba>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 8005072:	2300      	movs	r3, #0
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
 8005076:	f107 0308 	add.w	r3, r7, #8
 800507a:	4618      	mov	r0, r3
 800507c:	f7fb f8de 	bl	800023c <strlen>
 8005080:	4603      	mov	r3, r0
 8005082:	461a      	mov	r2, r3
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	4293      	cmp	r3, r2
 8005088:	dae7      	bge.n	800505a <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x1e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800508a:	f107 0310 	add.w	r3, r7, #16
 800508e:	4929      	ldr	r1, [pc, #164]	; (8005134 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf8>)
 8005090:	4618      	mov	r0, r3
 8005092:	f007 fa00 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005096:	f107 0310 	add.w	r3, r7, #16
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f005 fad3 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80050a2:	4604      	mov	r4, r0
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	681d      	ldr	r5, [r3, #0]
 80050aa:	f107 0318 	add.w	r3, r7, #24
 80050ae:	4922      	ldr	r1, [pc, #136]	; (8005138 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 80050b0:	4618      	mov	r0, r3
 80050b2:	f007 f9f0 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80050b6:	f107 0318 	add.w	r3, r7, #24
 80050ba:	4619      	mov	r1, r3
 80050bc:	4620      	mov	r0, r4
 80050be:	47a8      	blx	r5
 80050c0:	4603      	mov	r3, r0
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	3264      	adds	r2, #100	; 0x64
 80050c6:	6812      	ldr	r2, [r2, #0]
 80050c8:	f107 0008 	add.w	r0, r7, #8
 80050cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ce:	4401      	add	r1, r0
 80050d0:	7809      	ldrb	r1, [r1, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	4790      	blx	r2
 80050d6:	f107 0318 	add.w	r3, r7, #24
 80050da:	4618      	mov	r0, r3
 80050dc:	f007 fd93 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80050e0:	f107 0310 	add.w	r3, r7, #16
 80050e4:	4618      	mov	r0, r3
 80050e6:	f007 fd8e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80050ea:	f7fe f8af 	bl	800324c <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	3301      	adds	r3, #1
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
 80050f4:	e7bf      	b.n	8005076 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x3a>
			break;
 80050f6:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 80050f8:	f00e fdb0 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 80050fc:	4604      	mov	r4, r0
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	3338      	adds	r3, #56	; 0x38
 8005102:	681d      	ldr	r5, [r3, #0]
 8005104:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 8005108:	f00e fdb8 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800510c:	4603      	mov	r3, r0
 800510e:	9302      	str	r3, [sp, #8]
 8005110:	f44f 7390 	mov.w	r3, #288	; 0x120
 8005114:	9301      	str	r3, [sp, #4]
 8005116:	4b09      	ldr	r3, [pc, #36]	; (800513c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	4b09      	ldr	r3, [pc, #36]	; (8005140 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 800511c:	4632      	mov	r2, r6
 800511e:	2100      	movs	r1, #0
 8005120:	4620      	mov	r0, r4
 8005122:	47a8      	blx	r5
}
 8005124:	bf00      	nop
 8005126:	372c      	adds	r7, #44	; 0x2c
 8005128:	46bd      	mov	sp, r7
 800512a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800512c:	080231ac 	.word	0x080231ac
 8005130:	08022db8 	.word	0x08022db8
 8005134:	08023150 	.word	0x08023150
 8005138:	08023170 	.word	0x08023170
 800513c:	08022e2c 	.word	0x08022e2c
 8005140:	080231e8 	.word	0x080231e8

08005144 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fc16 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005154:	4a03      	ldr	r2, [pc, #12]	; (8005164 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	08026d04 	.word	0x08026d04

08005168 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005168:	b590      	push	{r4, r7, lr}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	f240 1223 	movw	r2, #291	; 0x123
 8005174:	4906      	ldr	r1, [pc, #24]	; (8005190 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005176:	2004      	movs	r0, #4
 8005178:	f004 fdca 	bl	8009d10 <_ZnwjPKci>
 800517c:	4604      	mov	r4, r0
 800517e:	4620      	mov	r0, r4
 8005180:	f7ff ffe0 	bl	8005144 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 8005184:	4623      	mov	r3, r4
 8005186:	4618      	mov	r0, r3
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	bd90      	pop	{r4, r7, pc}
 800518e:	bf00      	nop
 8005190:	08022e2c 	.word	0x08022e2c

08005194 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4618      	mov	r0, r3
 80051a0:	f00d f9a4 	bl	80124ec <_ZN10UtestShellC1Ev>
 80051a4:	4a03      	ldr	r2, [pc, #12]	; (80051b4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	08026c58 	.word	0x08026c58

080051b8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 80051b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ba:	b08f      	sub	sp, #60	; 0x3c
 80051bc:	af04      	add	r7, sp, #16
 80051be:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 80051c6:	f107 030c 	add.w	r3, r7, #12
 80051ca:	492f      	ldr	r1, [pc, #188]	; (8005288 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 80051cc:	4618      	mov	r0, r3
 80051ce:	f007 f962 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80051d2:	f107 030c 	add.w	r3, r7, #12
 80051d6:	2100      	movs	r1, #0
 80051d8:	4618      	mov	r0, r3
 80051da:	f005 fa35 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80051de:	4604      	mov	r4, r0
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	330c      	adds	r3, #12
 80051e4:	681d      	ldr	r5, [r3, #0]
 80051e6:	f107 0314 	add.w	r3, r7, #20
 80051ea:	4928      	ldr	r1, [pc, #160]	; (800528c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 80051ec:	4618      	mov	r0, r3
 80051ee:	f007 f952 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80051f2:	f107 0314 	add.w	r3, r7, #20
 80051f6:	4619      	mov	r1, r3
 80051f8:	4620      	mov	r0, r4
 80051fa:	47a8      	blx	r5
 80051fc:	4604      	mov	r4, r0
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	334c      	adds	r3, #76	; 0x4c
 8005202:	681d      	ldr	r5, [r3, #0]
 8005204:	f107 031c 	add.w	r3, r7, #28
 8005208:	4921      	ldr	r1, [pc, #132]	; (8005290 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 800520a:	4618      	mov	r0, r3
 800520c:	f007 f943 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005210:	f107 031c 	add.w	r3, r7, #28
 8005214:	4a1f      	ldr	r2, [pc, #124]	; (8005294 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8005216:	4619      	mov	r1, r3
 8005218:	4620      	mov	r0, r4
 800521a:	47a8      	blx	r5
 800521c:	f107 031c 	add.w	r3, r7, #28
 8005220:	4618      	mov	r0, r3
 8005222:	f007 fcf0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8005226:	f107 0314 	add.w	r3, r7, #20
 800522a:	4618      	mov	r0, r3
 800522c:	f007 fceb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8005230:	f107 030c 	add.w	r3, r7, #12
 8005234:	4618      	mov	r0, r3
 8005236:	f007 fce6 	bl	800cc06 <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 800523a:	4917      	ldr	r1, [pc, #92]	; (8005298 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe0>)
 800523c:	4817      	ldr	r0, [pc, #92]	; (800529c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe4>)
 800523e:	f7fe f86b 	bl	8003318 <Connect_Wifi>
 8005242:	4603      	mov	r3, r0
 8005244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800524c:	2b04      	cmp	r3, #4
 800524e:	d100      	bne.n	8005252 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x9a>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005250:	e7f3      	b.n	800523a <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x82>
		{
			break;
 8005252:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005254:	f00e fd02 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8005258:	4604      	mov	r4, r0
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	3338      	adds	r3, #56	; 0x38
 800525e:	681d      	ldr	r5, [r3, #0]
 8005260:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005264:	f00e fd0a 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005268:	4603      	mov	r3, r0
 800526a:	9302      	str	r3, [sp, #8]
 800526c:	f44f 739b 	mov.w	r3, #310	; 0x136
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe8>)
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 8005278:	4632      	mov	r2, r6
 800527a:	2101      	movs	r1, #1
 800527c:	4620      	mov	r0, r4
 800527e:	47a8      	blx	r5

}
 8005280:	bf00      	nop
 8005282:	372c      	adds	r7, #44	; 0x2c
 8005284:	46bd      	mov	sp, r7
 8005286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005288:	08023150 	.word	0x08023150
 800528c:	08023154 	.word	0x08023154
 8005290:	08023168 	.word	0x08023168
 8005294:	08022dbc 	.word	0x08022dbc
 8005298:	08023214 	.word	0x08023214
 800529c:	0802321c 	.word	0x0802321c
 80052a0:	08022e2c 	.word	0x08022e2c
 80052a4:	08023224 	.word	0x08023224

080052a8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff fb64 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80052b8:	4a03      	ldr	r2, [pc, #12]	; (80052c8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	08026c38 	.word	0x08026c38

080052cc <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 80052cc:	b590      	push	{r4, r7, lr}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80052d8:	4906      	ldr	r1, [pc, #24]	; (80052f4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 80052da:	2004      	movs	r0, #4
 80052dc:	f004 fd18 	bl	8009d10 <_ZnwjPKci>
 80052e0:	4604      	mov	r4, r0
 80052e2:	4620      	mov	r0, r4
 80052e4:	f7ff ffe0 	bl	80052a8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 80052e8:	4623      	mov	r3, r4
 80052ea:	4618      	mov	r0, r3
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd90      	pop	{r4, r7, pc}
 80052f2:	bf00      	nop
 80052f4:	08022e2c 	.word	0x08022e2c

080052f8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4618      	mov	r0, r3
 8005304:	f00d f8f2 	bl	80124ec <_ZN10UtestShellC1Ev>
 8005308:	4a03      	ldr	r2, [pc, #12]	; (8005318 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	08026b8c 	.word	0x08026b8c

0800531c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 800531c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531e:	b0e1      	sub	sp, #388	; 0x184
 8005320:	af04      	add	r7, sp, #16
 8005322:	1d3b      	adds	r3, r7, #4
 8005324:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 8005326:	4a75      	ldr	r2, [pc, #468]	; (80054fc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e0>)
 8005328:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800532c:	4611      	mov	r1, r2
 800532e:	2296      	movs	r2, #150	; 0x96
 8005330:	4618      	mov	r0, r3
 8005332:	f01a fd87 	bl	801fe44 <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									//  disconnect command response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	const char fake_tx_buffer[3][50] =
 8005336:	f107 0308 	add.w	r3, r7, #8
 800533a:	4a71      	ldr	r2, [pc, #452]	; (8005500 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e4>)
 800533c:	4618      	mov	r0, r3
 800533e:	4611      	mov	r1, r2
 8005340:	2396      	movs	r3, #150	; 0x96
 8005342:	461a      	mov	r2, r3
 8005344:	f01a fd7e 	bl	801fe44 <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005348:	2300      	movs	r3, #0
 800534a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800534e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005352:	2b02      	cmp	r3, #2
 8005354:	dc46      	bgt.n	80053e4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005356:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800535a:	496a      	ldr	r1, [pc, #424]	; (8005504 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 800535c:	4618      	mov	r0, r3
 800535e:	f007 f89a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005362:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005366:	2100      	movs	r1, #0
 8005368:	4618      	mov	r0, r3
 800536a:	f005 f96d 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800536e:	4604      	mov	r4, r0
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	330c      	adds	r3, #12
 8005374:	681d      	ldr	r5, [r3, #0]
 8005376:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800537a:	4963      	ldr	r1, [pc, #396]	; (8005508 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 800537c:	4618      	mov	r0, r3
 800537e:	f007 f88a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005382:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005386:	4619      	mov	r1, r3
 8005388:	4620      	mov	r0, r4
 800538a:	47a8      	blx	r5
 800538c:	4604      	mov	r4, r0
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	334c      	adds	r3, #76	; 0x4c
 8005392:	681d      	ldr	r5, [r3, #0]
 8005394:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005398:	495c      	ldr	r1, [pc, #368]	; (800550c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 800539a:	4618      	mov	r0, r3
 800539c:	f007 f87b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80053a0:	f107 0208 	add.w	r2, r7, #8
 80053a4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80053a8:	2132      	movs	r1, #50	; 0x32
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	441a      	add	r2, r3
 80053b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80053b4:	4619      	mov	r1, r3
 80053b6:	4620      	mov	r0, r4
 80053b8:	47a8      	blx	r5
 80053ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80053be:	4618      	mov	r0, r3
 80053c0:	f007 fc21 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80053c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80053c8:	4618      	mov	r0, r3
 80053ca:	f007 fc1c 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80053ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80053d2:	4618      	mov	r0, r3
 80053d4:	f007 fc17 	bl	800cc06 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 80053d8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80053dc:	3301      	adds	r3, #1
 80053de:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80053e2:	e7b4      	b.n	800534e <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 80053e4:	2304      	movs	r3, #4
 80053e6:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int i = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 80053f0:	4947      	ldr	r1, [pc, #284]	; (8005510 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 80053f2:	4848      	ldr	r0, [pc, #288]	; (8005514 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 80053f4:	f7fd ff90 	bl	8003318 <Connect_Wifi>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response != IDLE)
 80053fe:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005402:	2b04      	cmp	r3, #4
 8005404:	d15d      	bne.n	80054c2 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1a6>
		{
			break;
		}

		if(i<3)
 8005406:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800540a:	2b02      	cmp	r3, #2
 800540c:	dcf0      	bgt.n	80053f0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800540e:	2300      	movs	r3, #0
 8005410:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005414:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005418:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800541c:	2132      	movs	r1, #50	; 0x32
 800541e:	fb01 f303 	mul.w	r3, r1, r3
 8005422:	4413      	add	r3, r2
 8005424:	4618      	mov	r0, r3
 8005426:	f7fa ff09 	bl	800023c <strlen>
 800542a:	4603      	mov	r3, r0
 800542c:	461a      	mov	r2, r3
 800542e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005432:	4293      	cmp	r3, r2
 8005434:	da3f      	bge.n	80054b6 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x19a>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005436:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800543a:	4932      	ldr	r1, [pc, #200]	; (8005504 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 800543c:	4618      	mov	r0, r3
 800543e:	f007 f82a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005442:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f005 f8fd 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800544e:	4604      	mov	r4, r0
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	330c      	adds	r3, #12
 8005454:	681d      	ldr	r5, [r3, #0]
 8005456:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800545a:	492f      	ldr	r1, [pc, #188]	; (8005518 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 800545c:	4618      	mov	r0, r3
 800545e:	f007 f81a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005462:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005466:	4619      	mov	r1, r3
 8005468:	4620      	mov	r0, r4
 800546a:	47a8      	blx	r5
 800546c:	4603      	mov	r3, r0
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	3264      	adds	r2, #100	; 0x64
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005478:	2032      	movs	r0, #50	; 0x32
 800547a:	fb00 f101 	mul.w	r1, r0, r1
 800547e:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005482:	4408      	add	r0, r1
 8005484:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005488:	4401      	add	r1, r0
 800548a:	39d0      	subs	r1, #208	; 0xd0
 800548c:	7809      	ldrb	r1, [r1, #0]
 800548e:	4618      	mov	r0, r3
 8005490:	4790      	blx	r2
 8005492:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005496:	4618      	mov	r0, r3
 8005498:	f007 fbb5 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800549c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80054a0:	4618      	mov	r0, r3
 80054a2:	f007 fbb0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80054a6:	f7fd fed1 	bl	800324c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80054aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80054ae:	3301      	adds	r3, #1
 80054b0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80054b4:	e7ae      	b.n	8005414 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xf8>
			}
			i++;
 80054b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80054ba:	3301      	adds	r3, #1
 80054bc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 80054c0:	e796      	b.n	80053f0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
			break;
 80054c2:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 80054c4:	f00e fbca 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 80054c8:	4604      	mov	r4, r0
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	3338      	adds	r3, #56	; 0x38
 80054ce:	681d      	ldr	r5, [r3, #0]
 80054d0:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 80054d4:	f00e fbd2 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80054d8:	4603      	mov	r3, r0
 80054da:	9302      	str	r3, [sp, #8]
 80054dc:	f44f 73b1 	mov.w	r3, #354	; 0x162
 80054e0:	9301      	str	r3, [sp, #4]
 80054e2:	4b0e      	ldr	r3, [pc, #56]	; (800551c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	4b0e      	ldr	r3, [pc, #56]	; (8005520 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 80054e8:	4632      	mov	r2, r6
 80054ea:	2103      	movs	r1, #3
 80054ec:	4620      	mov	r0, r4
 80054ee:	47a8      	blx	r5

}
 80054f0:	bf00      	nop
 80054f2:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054fa:	bf00      	nop
 80054fc:	0802327c 	.word	0x0802327c
 8005500:	08023314 	.word	0x08023314
 8005504:	08023150 	.word	0x08023150
 8005508:	08023154 	.word	0x08023154
 800550c:	08023168 	.word	0x08023168
 8005510:	08023214 	.word	0x08023214
 8005514:	0802321c 	.word	0x0802321c
 8005518:	08023170 	.word	0x08023170
 800551c:	08022e2c 	.word	0x08022e2c
 8005520:	08023250 	.word	0x08023250

08005524 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fa26 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005534:	4a03      	ldr	r2, [pc, #12]	; (8005544 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4618      	mov	r0, r3
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	08026b6c 	.word	0x08026b6c

08005548 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005548:	b590      	push	{r4, r7, lr}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8005554:	4906      	ldr	r1, [pc, #24]	; (8005570 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005556:	2004      	movs	r0, #4
 8005558:	f004 fbda 	bl	8009d10 <_ZnwjPKci>
 800555c:	4604      	mov	r4, r0
 800555e:	4620      	mov	r0, r4
 8005560:	f7ff ffe0 	bl	8005524 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005564:	4623      	mov	r3, r4
 8005566:	4618      	mov	r0, r3
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	bd90      	pop	{r4, r7, pc}
 800556e:	bf00      	nop
 8005570:	08022e2c 	.word	0x08022e2c

08005574 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4618      	mov	r0, r3
 8005580:	f00c ffb4 	bl	80124ec <_ZN10UtestShellC1Ev>
 8005584:	4a03      	ldr	r2, [pc, #12]	; (8005594 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	08026ac0 	.word	0x08026ac0

08005598 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800559a:	b0e1      	sub	sp, #388	; 0x184
 800559c:	af04      	add	r7, sp, #16
 800559e:	1d3b      	adds	r3, r7, #4
 80055a0:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 80055a2:	4a73      	ldr	r2, [pc, #460]	; (8005770 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1d8>)
 80055a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80055a8:	4611      	mov	r1, r2
 80055aa:	2296      	movs	r2, #150	; 0x96
 80055ac:	4618      	mov	r0, r3
 80055ae:	f01a fc49 	bl	801fe44 <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "OK\r\n"
	};

	const char fake_tx_buffer[3][50] =
 80055b2:	f107 0308 	add.w	r3, r7, #8
 80055b6:	4a6f      	ldr	r2, [pc, #444]	; (8005774 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1dc>)
 80055b8:	4618      	mov	r0, r3
 80055ba:	4611      	mov	r1, r2
 80055bc:	2396      	movs	r3, #150	; 0x96
 80055be:	461a      	mov	r2, r3
 80055c0:	f01a fc40 	bl	801fe44 <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 80055c4:	2300      	movs	r3, #0
 80055c6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80055ca:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	dc46      	bgt.n	8005660 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 80055d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055d6:	4968      	ldr	r1, [pc, #416]	; (8005778 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e0>)
 80055d8:	4618      	mov	r0, r3
 80055da:	f006 ff5c 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80055de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80055e2:	2100      	movs	r1, #0
 80055e4:	4618      	mov	r0, r3
 80055e6:	f005 f82f 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80055ea:	4604      	mov	r4, r0
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	330c      	adds	r3, #12
 80055f0:	681d      	ldr	r5, [r3, #0]
 80055f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80055f6:	4961      	ldr	r1, [pc, #388]	; (800577c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e4>)
 80055f8:	4618      	mov	r0, r3
 80055fa:	f006 ff4c 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80055fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005602:	4619      	mov	r1, r3
 8005604:	4620      	mov	r0, r4
 8005606:	47a8      	blx	r5
 8005608:	4604      	mov	r4, r0
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	334c      	adds	r3, #76	; 0x4c
 800560e:	681d      	ldr	r5, [r3, #0]
 8005610:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005614:	495a      	ldr	r1, [pc, #360]	; (8005780 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e8>)
 8005616:	4618      	mov	r0, r3
 8005618:	f006 ff3d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800561c:	f107 0208 	add.w	r2, r7, #8
 8005620:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005624:	2132      	movs	r1, #50	; 0x32
 8005626:	fb01 f303 	mul.w	r3, r1, r3
 800562a:	441a      	add	r2, r3
 800562c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005630:	4619      	mov	r1, r3
 8005632:	4620      	mov	r0, r4
 8005634:	47a8      	blx	r5
 8005636:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800563a:	4618      	mov	r0, r3
 800563c:	f007 fae3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8005640:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005644:	4618      	mov	r0, r3
 8005646:	f007 fade 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800564a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800564e:	4618      	mov	r0, r3
 8005650:	f007 fad9 	bl	800cc06 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005654:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005658:	3301      	adds	r3, #1
 800565a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800565e:	e7b4      	b.n	80055ca <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 8005660:	2300      	movs	r3, #0
 8005662:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005666:	4947      	ldr	r1, [pc, #284]	; (8005784 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ec>)
 8005668:	4847      	ldr	r0, [pc, #284]	; (8005788 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 800566a:	f7fd fe55 	bl	8003318 <Connect_Wifi>
 800566e:	4603      	mov	r3, r0
 8005670:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response != IDLE)
 8005674:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005678:	2b04      	cmp	r3, #4
 800567a:	d15d      	bne.n	8005738 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1a0>
		{
			break;
		}

		if(i<3)
 800567c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005680:	2b02      	cmp	r3, #2
 8005682:	dcf0      	bgt.n	8005666 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005684:	2300      	movs	r3, #0
 8005686:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800568a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800568e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005692:	2132      	movs	r1, #50	; 0x32
 8005694:	fb01 f303 	mul.w	r3, r1, r3
 8005698:	4413      	add	r3, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f7fa fdce 	bl	800023c <strlen>
 80056a0:	4603      	mov	r3, r0
 80056a2:	461a      	mov	r2, r3
 80056a4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80056a8:	4293      	cmp	r3, r2
 80056aa:	da3f      	bge.n	800572c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x194>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80056ac:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80056b0:	4931      	ldr	r1, [pc, #196]	; (8005778 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e0>)
 80056b2:	4618      	mov	r0, r3
 80056b4:	f006 feef 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80056b8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80056bc:	2100      	movs	r1, #0
 80056be:	4618      	mov	r0, r3
 80056c0:	f004 ffc2 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80056c4:	4604      	mov	r4, r0
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	681d      	ldr	r5, [r3, #0]
 80056cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80056d0:	492e      	ldr	r1, [pc, #184]	; (800578c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f4>)
 80056d2:	4618      	mov	r0, r3
 80056d4:	f006 fedf 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80056d8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80056dc:	4619      	mov	r1, r3
 80056de:	4620      	mov	r0, r4
 80056e0:	47a8      	blx	r5
 80056e2:	4603      	mov	r3, r0
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	3264      	adds	r2, #100	; 0x64
 80056e8:	6812      	ldr	r2, [r2, #0]
 80056ea:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 80056ee:	2032      	movs	r0, #50	; 0x32
 80056f0:	fb00 f101 	mul.w	r1, r0, r1
 80056f4:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80056f8:	4408      	add	r0, r1
 80056fa:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 80056fe:	4401      	add	r1, r0
 8005700:	39d0      	subs	r1, #208	; 0xd0
 8005702:	7809      	ldrb	r1, [r1, #0]
 8005704:	4618      	mov	r0, r3
 8005706:	4790      	blx	r2
 8005708:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800570c:	4618      	mov	r0, r3
 800570e:	f007 fa7a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8005712:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005716:	4618      	mov	r0, r3
 8005718:	f007 fa75 	bl	800cc06 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 800571c:	f7fd fd96 	bl	800324c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005720:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005724:	3301      	adds	r3, #1
 8005726:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800572a:	e7ae      	b.n	800568a <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xf2>
			}
			i++;
 800572c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005730:	3301      	adds	r3, #1
 8005732:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005736:	e796      	b.n	8005666 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
			break;
 8005738:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 800573a:	f00e fa8f 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 800573e:	4604      	mov	r4, r0
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	3338      	adds	r3, #56	; 0x38
 8005744:	681d      	ldr	r5, [r3, #0]
 8005746:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 800574a:	f00e fa97 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800574e:	4603      	mov	r3, r0
 8005750:	9302      	str	r3, [sp, #8]
 8005752:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f8>)
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1fc>)
 800575e:	4632      	mov	r2, r6
 8005760:	2102      	movs	r1, #2
 8005762:	4620      	mov	r0, r4
 8005764:	47a8      	blx	r5

}
 8005766:	bf00      	nop
 8005768:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 800576c:	46bd      	mov	sp, r7
 800576e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005770:	080233d4 	.word	0x080233d4
 8005774:	08023314 	.word	0x08023314
 8005778:	08023150 	.word	0x08023150
 800577c:	08023154 	.word	0x08023154
 8005780:	08023168 	.word	0x08023168
 8005784:	08023214 	.word	0x08023214
 8005788:	0802321c 	.word	0x0802321c
 800578c:	08023170 	.word	0x08023170
 8005790:	08022e2c 	.word	0x08022e2c
 8005794:	080233ac 	.word	0x080233ac

08005798 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff f8ec 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80057a8:	4a03      	ldr	r2, [pc, #12]	; (80057b8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4618      	mov	r0, r3
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	08026aa0 	.word	0x08026aa0

080057bc <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80057c8:	4906      	ldr	r1, [pc, #24]	; (80057e4 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 80057ca:	2004      	movs	r0, #4
 80057cc:	f004 faa0 	bl	8009d10 <_ZnwjPKci>
 80057d0:	4604      	mov	r4, r0
 80057d2:	4620      	mov	r0, r4
 80057d4:	f7ff ffe0 	bl	8005798 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 80057d8:	4623      	mov	r3, r4
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd90      	pop	{r4, r7, pc}
 80057e2:	bf00      	nop
 80057e4:	08022e2c 	.word	0x08022e2c

080057e8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f00c fe7a 	bl	80124ec <_ZN10UtestShellC1Ev>
 80057f8:	4a03      	ldr	r2, [pc, #12]	; (8005808 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	080269f4 	.word	0x080269f4

0800580c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 800580c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800580e:	b08f      	sub	sp, #60	; 0x3c
 8005810:	af04      	add	r7, sp, #16
 8005812:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8005814:	f107 030c 	add.w	r3, r7, #12
 8005818:	492e      	ldr	r1, [pc, #184]	; (80058d4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xc8>)
 800581a:	4618      	mov	r0, r3
 800581c:	f006 fe3b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005820:	f107 030c 	add.w	r3, r7, #12
 8005824:	2100      	movs	r1, #0
 8005826:	4618      	mov	r0, r3
 8005828:	f004 ff0e 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800582c:	4604      	mov	r4, r0
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	330c      	adds	r3, #12
 8005832:	681d      	ldr	r5, [r3, #0]
 8005834:	f107 0314 	add.w	r3, r7, #20
 8005838:	4927      	ldr	r1, [pc, #156]	; (80058d8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xcc>)
 800583a:	4618      	mov	r0, r3
 800583c:	f006 fe2b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005840:	f107 0314 	add.w	r3, r7, #20
 8005844:	4619      	mov	r1, r3
 8005846:	4620      	mov	r0, r4
 8005848:	47a8      	blx	r5
 800584a:	4604      	mov	r4, r0
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	334c      	adds	r3, #76	; 0x4c
 8005850:	681d      	ldr	r5, [r3, #0]
 8005852:	f107 031c 	add.w	r3, r7, #28
 8005856:	4921      	ldr	r1, [pc, #132]	; (80058dc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 8005858:	4618      	mov	r0, r3
 800585a:	f006 fe1c 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800585e:	f107 031c 	add.w	r3, r7, #28
 8005862:	4a1f      	ldr	r2, [pc, #124]	; (80058e0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005864:	4619      	mov	r1, r3
 8005866:	4620      	mov	r0, r4
 8005868:	47a8      	blx	r5
 800586a:	f107 031c 	add.w	r3, r7, #28
 800586e:	4618      	mov	r0, r3
 8005870:	f007 f9c9 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8005874:	f107 0314 	add.w	r3, r7, #20
 8005878:	4618      	mov	r0, r3
 800587a:	f007 f9c4 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800587e:	f107 030c 	add.w	r3, r7, #12
 8005882:	4618      	mov	r0, r3
 8005884:	f007 f9bf 	bl	800cc06 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8005888:	f7fd fd80 	bl	800338c <Disconnect_Wifi>
 800588c:	4603      	mov	r3, r0
 800588e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005896:	2b04      	cmp	r3, #4
 8005898:	d100      	bne.n	800589c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x90>
		response = Disconnect_Wifi();
 800589a:	e7f5      	b.n	8005888 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x7c>
			break;
 800589c:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 800589e:	f00e f9dd 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 80058a2:	4604      	mov	r4, r0
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	3338      	adds	r3, #56	; 0x38
 80058a8:	681d      	ldr	r5, [r3, #0]
 80058aa:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 80058ae:	f00e f9e5 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80058b2:	4603      	mov	r3, r0
 80058b4:	9302      	str	r3, [sp, #8]
 80058b6:	f240 13a1 	movw	r3, #417	; 0x1a1
 80058ba:	9301      	str	r3, [sp, #4]
 80058bc:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 80058c2:	4632      	mov	r2, r6
 80058c4:	2101      	movs	r1, #1
 80058c6:	4620      	mov	r0, r4
 80058c8:	47a8      	blx	r5
}
 80058ca:	bf00      	nop
 80058cc:	372c      	adds	r7, #44	; 0x2c
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058d2:	bf00      	nop
 80058d4:	08023150 	.word	0x08023150
 80058d8:	08023154 	.word	0x08023154
 80058dc:	08023168 	.word	0x08023168
 80058e0:	08022dcc 	.word	0x08022dcc
 80058e4:	08022e2c 	.word	0x08022e2c
 80058e8:	08023224 	.word	0x08023224

080058ec <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff f842 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80058fc:	4a03      	ldr	r2, [pc, #12]	; (800590c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	080269d4 	.word	0x080269d4

08005910 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 8005910:	b590      	push	{r4, r7, lr}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800591c:	4906      	ldr	r1, [pc, #24]	; (8005938 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 800591e:	2004      	movs	r0, #4
 8005920:	f004 f9f6 	bl	8009d10 <_ZnwjPKci>
 8005924:	4604      	mov	r4, r0
 8005926:	4620      	mov	r0, r4
 8005928:	f7ff ffe0 	bl	80058ec <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 800592c:	4623      	mov	r3, r4
 800592e:	4618      	mov	r0, r3
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	bd90      	pop	{r4, r7, pc}
 8005936:	bf00      	nop
 8005938:	08022e2c 	.word	0x08022e2c

0800593c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4618      	mov	r0, r3
 8005948:	f00c fdd0 	bl	80124ec <_ZN10UtestShellC1Ev>
 800594c:	4a03      	ldr	r2, [pc, #12]	; (800595c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	08026928 	.word	0x08026928

08005960 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 8005960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005962:	b093      	sub	sp, #76	; 0x4c
 8005964:	af04      	add	r7, sp, #16
 8005966:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8005968:	f107 0308 	add.w	r3, r7, #8
 800596c:	494a      	ldr	r1, [pc, #296]	; (8005a98 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 800596e:	4618      	mov	r0, r3
 8005970:	f006 fd91 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005974:	f107 0308 	add.w	r3, r7, #8
 8005978:	2100      	movs	r1, #0
 800597a:	4618      	mov	r0, r3
 800597c:	f004 fe64 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005980:	4604      	mov	r4, r0
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	330c      	adds	r3, #12
 8005986:	681d      	ldr	r5, [r3, #0]
 8005988:	f107 0310 	add.w	r3, r7, #16
 800598c:	4943      	ldr	r1, [pc, #268]	; (8005a9c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x13c>)
 800598e:	4618      	mov	r0, r3
 8005990:	f006 fd81 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005994:	f107 0310 	add.w	r3, r7, #16
 8005998:	4619      	mov	r1, r3
 800599a:	4620      	mov	r0, r4
 800599c:	47a8      	blx	r5
 800599e:	4604      	mov	r4, r0
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	334c      	adds	r3, #76	; 0x4c
 80059a4:	681d      	ldr	r5, [r3, #0]
 80059a6:	f107 0318 	add.w	r3, r7, #24
 80059aa:	493d      	ldr	r1, [pc, #244]	; (8005aa0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x140>)
 80059ac:	4618      	mov	r0, r3
 80059ae:	f006 fd72 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80059b2:	f107 0318 	add.w	r3, r7, #24
 80059b6:	4a3b      	ldr	r2, [pc, #236]	; (8005aa4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x144>)
 80059b8:	4619      	mov	r1, r3
 80059ba:	4620      	mov	r0, r4
 80059bc:	47a8      	blx	r5
 80059be:	f107 0318 	add.w	r3, r7, #24
 80059c2:	4618      	mov	r0, r3
 80059c4:	f007 f91f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80059c8:	f107 0310 	add.w	r3, r7, #16
 80059cc:	4618      	mov	r0, r3
 80059ce:	f007 f91a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80059d2:	f107 0308 	add.w	r3, r7, #8
 80059d6:	4618      	mov	r0, r3
 80059d8:	f007 f915 	bl	800cc06 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 80059dc:	f7fd fcd6 	bl	800338c <Disconnect_Wifi>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 80059e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d139      	bne.n	8005a62 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80059ee:	2300      	movs	r3, #0
 80059f0:	637b      	str	r3, [r7, #52]	; 0x34
 80059f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	dcf1      	bgt.n	80059dc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 80059f8:	f107 0320 	add.w	r3, r7, #32
 80059fc:	4926      	ldr	r1, [pc, #152]	; (8005a98 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 80059fe:	4618      	mov	r0, r3
 8005a00:	f006 fd49 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005a04:	f107 0320 	add.w	r3, r7, #32
 8005a08:	2100      	movs	r1, #0
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f004 fe1c 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005a10:	4604      	mov	r4, r0
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	330c      	adds	r3, #12
 8005a16:	681d      	ldr	r5, [r3, #0]
 8005a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a1c:	4922      	ldr	r1, [pc, #136]	; (8005aa8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x148>)
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f006 fd39 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005a24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	47a8      	blx	r5
 8005a2e:	4603      	mov	r3, r0
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	3264      	adds	r2, #100	; 0x64
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	481d      	ldr	r0, [pc, #116]	; (8005aac <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x14c>)
 8005a38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a3a:	4401      	add	r1, r0
 8005a3c:	7809      	ldrb	r1, [r1, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	4790      	blx	r2
 8005a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a46:	4618      	mov	r0, r3
 8005a48:	f007 f8dd 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8005a4c:	f107 0320 	add.w	r3, r7, #32
 8005a50:	4618      	mov	r0, r3
 8005a52:	f007 f8d8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005a56:	f7fd fbf9 	bl	800324c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a60:	e7c7      	b.n	80059f2 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x92>
			break;
 8005a62:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8005a64:	f00e f8fa 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8005a68:	4604      	mov	r4, r0
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	3338      	adds	r3, #56	; 0x38
 8005a6e:	681d      	ldr	r5, [r3, #0]
 8005a70:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8005a74:	f00e f902 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	9302      	str	r3, [sp, #8]
 8005a7c:	f240 13b9 	movw	r3, #441	; 0x1b9
 8005a80:	9301      	str	r3, [sp, #4]
 8005a82:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x150>)
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x154>)
 8005a88:	4632      	mov	r2, r6
 8005a8a:	2102      	movs	r1, #2
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	47a8      	blx	r5
}
 8005a90:	bf00      	nop
 8005a92:	373c      	adds	r7, #60	; 0x3c
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a98:	08023150 	.word	0x08023150
 8005a9c:	08023154 	.word	0x08023154
 8005aa0:	08023168 	.word	0x08023168
 8005aa4:	08022dcc 	.word	0x08022dcc
 8005aa8:	08023170 	.word	0x08023170
 8005aac:	08022db8 	.word	0x08022db8
 8005ab0:	08022e2c 	.word	0x08022e2c
 8005ab4:	080233ac 	.word	0x080233ac

08005ab8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Command_Process_Test)
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe ff5c 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005ac8:	4a03      	ldr	r2, [pc, #12]	; (8005ad8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	08026908 	.word	0x08026908

08005adc <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 8005adc:	b590      	push	{r4, r7, lr}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8005ae8:	4906      	ldr	r1, [pc, #24]	; (8005b04 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 8005aea:	2004      	movs	r0, #4
 8005aec:	f004 f910 	bl	8009d10 <_ZnwjPKci>
 8005af0:	4604      	mov	r4, r0
 8005af2:	4620      	mov	r0, r4
 8005af4:	f7ff ffe0 	bl	8005ab8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 8005af8:	4623      	mov	r3, r4
 8005afa:	4618      	mov	r0, r3
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd90      	pop	{r4, r7, pc}
 8005b02:	bf00      	nop
 8005b04:	08022e2c 	.word	0x08022e2c

08005b08 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f00c fcea 	bl	80124ec <_ZN10UtestShellC1Ev>
 8005b18:	4a03      	ldr	r2, [pc, #12]	; (8005b28 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	0802685c 	.word	0x0802685c

08005b2c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 8005b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b2e:	b09b      	sub	sp, #108	; 0x6c
 8005b30:	af04      	add	r7, sp, #16
 8005b32:	6078      	str	r0, [r7, #4]
	char *response_arr[3] =
 8005b34:	4a6a      	ldr	r2, [pc, #424]	; (8005ce0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1b4>)
 8005b36:	f107 0314 	add.w	r3, r7, #20
 8005b3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{ (char*)AT_RESPONSE_OK,									// station mode response
	  (char*)AT_RESPONSE_OK,								// check wifi connection response
	  (char*)AT_RESPONSE_OK								// connect wifi command response
	};

	char *fake_command_buffer[3] =
 8005b40:	4a68      	ldr	r2, [pc, #416]	; (8005ce4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1b8>)
 8005b42:	f107 0308 	add.w	r3, r7, #8
 8005b46:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)AT_CWMODE_STATION,
		(char*)AT_CWQAP,
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	dc43      	bgt.n	8005bde <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 8005b56:	f107 0320 	add.w	r3, r7, #32
 8005b5a:	4963      	ldr	r1, [pc, #396]	; (8005ce8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1bc>)
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f006 fc9a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005b62:	f107 0320 	add.w	r3, r7, #32
 8005b66:	2100      	movs	r1, #0
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f004 fd6d 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005b6e:	4604      	mov	r4, r0
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	330c      	adds	r3, #12
 8005b74:	681d      	ldr	r5, [r3, #0]
 8005b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b7a:	495c      	ldr	r1, [pc, #368]	; (8005cec <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c0>)
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f006 fc8a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b86:	4619      	mov	r1, r3
 8005b88:	4620      	mov	r0, r4
 8005b8a:	47a8      	blx	r5
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	334c      	adds	r3, #76	; 0x4c
 8005b92:	681d      	ldr	r5, [r3, #0]
 8005b94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b98:	4955      	ldr	r1, [pc, #340]	; (8005cf0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c4>)
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f006 fc7b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005ba8:	4413      	add	r3, r2
 8005baa:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8005bae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	47a8      	blx	r5
 8005bb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f007 f822 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8005bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f007 f81d 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8005bcc:	f107 0320 	add.w	r3, r7, #32
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f007 f818 	bl	800cc06 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd8:	3301      	adds	r3, #1
 8005bda:	657b      	str	r3, [r7, #84]	; 0x54
 8005bdc:	e7b8      	b.n	8005b50 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x24>
	}
	Status response;
	int i = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	653b      	str	r3, [r7, #80]	; 0x50
	while(1)
	{
		response = Command_Process(fake_command_buffer, response_arr, 3);
 8005be2:	f107 0114 	add.w	r1, r7, #20
 8005be6:	f107 0308 	add.w	r3, r7, #8
 8005bea:	2203      	movs	r2, #3
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fd fbe9 	bl	80033c4 <Command_Process>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(response != IDLE)
 8005bf8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d153      	bne.n	8005ca8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x17c>
		{
			break;
		}

		if(i<3)
 8005c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	dced      	bgt.n	8005be2 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005c06:	2300      	movs	r3, #0
 8005c08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005c12:	4413      	add	r3, r2
 8005c14:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fa fb0f 	bl	800023c <strlen>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	461a      	mov	r2, r3
 8005c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c24:	4293      	cmp	r3, r2
 8005c26:	da3b      	bge.n	8005ca0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x174>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005c28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c2c:	492e      	ldr	r1, [pc, #184]	; (8005ce8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1bc>)
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f006 fc31 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005c34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c38:	2100      	movs	r1, #0
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f004 fd04 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005c40:	4604      	mov	r4, r0
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	681d      	ldr	r5, [r3, #0]
 8005c48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c4c:	4929      	ldr	r1, [pc, #164]	; (8005cf4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f006 fc21 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005c54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	47a8      	blx	r5
 8005c5e:	4602      	mov	r2, r0
 8005c60:	6813      	ldr	r3, [r2, #0]
 8005c62:	3364      	adds	r3, #100	; 0x64
 8005c64:	681c      	ldr	r4, [r3, #0]
 8005c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005c6e:	440b      	add	r3, r1
 8005c70:	f853 1c44 	ldr.w	r1, [r3, #-68]
 8005c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c76:	440b      	add	r3, r1
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	47a0      	blx	r4
 8005c80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c84:	4618      	mov	r0, r3
 8005c86:	f006 ffbe 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8005c8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f006 ffb9 	bl	800cc06 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005c94:	f7fd fada 	bl	800324c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c9e:	e7b4      	b.n	8005c0a <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xde>
			}
			i++;
 8005ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	653b      	str	r3, [r7, #80]	; 0x50
		}

	}
 8005ca6:	e79c      	b.n	8005be2 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
			break;
 8005ca8:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8005caa:	f00d ffd7 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8005cae:	4604      	mov	r4, r0
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	3338      	adds	r3, #56	; 0x38
 8005cb4:	681d      	ldr	r5, [r3, #0]
 8005cb6:	f897 604b 	ldrb.w	r6, [r7, #75]	; 0x4b
 8005cba:	f00d ffdf 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	9302      	str	r3, [sp, #8]
 8005cc2:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1cc>)
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d0>)
 8005cce:	4632      	mov	r2, r6
 8005cd0:	2102      	movs	r1, #2
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	47a8      	blx	r5

}
 8005cd6:	bf00      	nop
 8005cd8:	375c      	adds	r7, #92	; 0x5c
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	0802346c 	.word	0x0802346c
 8005ce4:	08023478 	.word	0x08023478
 8005ce8:	08023150 	.word	0x08023150
 8005cec:	08023154 	.word	0x08023154
 8005cf0:	08023168 	.word	0x08023168
 8005cf4:	08023170 	.word	0x08023170
 8005cf8:	08022e2c 	.word	0x08022e2c
 8005cfc:	080233ac 	.word	0x080233ac

08005d00 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fe fe38 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005d10:	4a03      	ldr	r2, [pc, #12]	; (8005d20 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev+0x20>)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	0802683c 	.word	0x0802683c

08005d24 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv>:
 8005d24:	b590      	push	{r4, r7, lr}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005d30:	4906      	ldr	r1, [pc, #24]	; (8005d4c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv+0x28>)
 8005d32:	2004      	movs	r0, #4
 8005d34:	f003 ffec 	bl	8009d10 <_ZnwjPKci>
 8005d38:	4604      	mov	r4, r0
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f7ff ffe0 	bl	8005d00 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>
 8005d40:	4623      	mov	r3, r4
 8005d42:	4618      	mov	r0, r3
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd90      	pop	{r4, r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	08022e2c 	.word	0x08022e2c

08005d50 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>:
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f00c fbc6 	bl	80124ec <_ZN10UtestShellC1Ev>
 8005d60:	4a03      	ldr	r2, [pc, #12]	; (8005d70 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev+0x20>)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	08026790 	.word	0x08026790

08005d74 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv>:
{
 8005d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d76:	b0b1      	sub	sp, #196	; 0xc4
 8005d78:	af04      	add	r7, sp, #16
 8005d7a:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 8005d7c:	4a71      	ldr	r2, [pc, #452]	; (8005f44 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d0>)
 8005d7e:	f107 0314 	add.w	r3, r7, #20
 8005d82:	4611      	mov	r1, r2
 8005d84:	2264      	movs	r2, #100	; 0x64
 8005d86:	4618      	mov	r0, r3
 8005d88:	f01a f85c 	bl	801fe44 <memcpy>
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};

	char *fake_command_buffer[2] =
 8005d8c:	4a6e      	ldr	r2, [pc, #440]	; (8005f48 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d4>)
 8005d8e:	f107 030c 	add.w	r3, r7, #12
 8005d92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d96:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005da0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	dc46      	bgt.n	8005e36 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 8005da8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005dac:	4967      	ldr	r1, [pc, #412]	; (8005f4c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d8>)
 8005dae:	4618      	mov	r0, r3
 8005db0:	f006 fb71 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005db4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005db8:	2100      	movs	r1, #0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f004 fc44 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	681d      	ldr	r5, [r3, #0]
 8005dc8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005dcc:	4960      	ldr	r1, [pc, #384]	; (8005f50 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1dc>)
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f006 fb61 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005dd4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4620      	mov	r0, r4
 8005ddc:	47a8      	blx	r5
 8005dde:	4604      	mov	r4, r0
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	334c      	adds	r3, #76	; 0x4c
 8005de4:	681d      	ldr	r5, [r3, #0]
 8005de6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005dea:	495a      	ldr	r1, [pc, #360]	; (8005f54 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e0>)
 8005dec:	4618      	mov	r0, r3
 8005dee:	f006 fb52 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 8005e02:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005e06:	4619      	mov	r1, r3
 8005e08:	4620      	mov	r0, r4
 8005e0a:	47a8      	blx	r5
 8005e0c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005e10:	4618      	mov	r0, r3
 8005e12:	f006 fef8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8005e16:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f006 fef3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8005e20:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005e24:	4618      	mov	r0, r3
 8005e26:	f006 feee 	bl	800cc06 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 8005e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e2e:	3301      	adds	r3, #1
 8005e30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e34:	e7b4      	b.n	8005da0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8005e3c:	4946      	ldr	r1, [pc, #280]	; (8005f58 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 8005e3e:	4847      	ldr	r0, [pc, #284]	; (8005f5c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e8>)
 8005e40:	f7fd fb4a 	bl	80034d8 <Connect_TCP_Server>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if(response != IDLE)
 8005e4a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d15d      	bne.n	8005f0e <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x19a>
		{
			break;
		}

		if(i<3)
 8005e52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	dcf0      	bgt.n	8005e3c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc8>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e60:	f107 0214 	add.w	r2, r7, #20
 8005e64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e68:	2132      	movs	r1, #50	; 0x32
 8005e6a:	fb01 f303 	mul.w	r3, r1, r3
 8005e6e:	4413      	add	r3, r2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fa f9e3 	bl	800023c <strlen>
 8005e76:	4603      	mov	r3, r0
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	da3f      	bge.n	8005f02 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x18e>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005e82:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005e86:	4931      	ldr	r1, [pc, #196]	; (8005f4c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d8>)
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f006 fb04 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005e8e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005e92:	2100      	movs	r1, #0
 8005e94:	4618      	mov	r0, r3
 8005e96:	f004 fbd7 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	330c      	adds	r3, #12
 8005ea0:	681d      	ldr	r5, [r3, #0]
 8005ea2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005ea6:	492e      	ldr	r1, [pc, #184]	; (8005f60 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1ec>)
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f006 faf4 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8005eae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	47a8      	blx	r5
 8005eb8:	4603      	mov	r3, r0
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	3264      	adds	r2, #100	; 0x64
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8005ec4:	2032      	movs	r0, #50	; 0x32
 8005ec6:	fb00 f101 	mul.w	r1, r0, r1
 8005eca:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8005ece:	4408      	add	r0, r1
 8005ed0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ed4:	4401      	add	r1, r0
 8005ed6:	399c      	subs	r1, #156	; 0x9c
 8005ed8:	7809      	ldrb	r1, [r1, #0]
 8005eda:	4618      	mov	r0, r3
 8005edc:	4790      	blx	r2
 8005ede:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f006 fe8f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8005ee8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005eec:	4618      	mov	r0, r3
 8005eee:	f006 fe8a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005ef2:	f7fd f9ab 	bl	800324c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005ef6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005efa:	3301      	adds	r3, #1
 8005efc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f00:	e7ae      	b.n	8005e60 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xec>
			}
			i++;
 8005f02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f06:	3301      	adds	r3, #1
 8005f08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

	}
 8005f0c:	e796      	b.n	8005e3c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc8>
			break;
 8005f0e:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8005f10:	f00d fea4 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8005f14:	4604      	mov	r4, r0
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	3338      	adds	r3, #56	; 0x38
 8005f1a:	681d      	ldr	r5, [r3, #0]
 8005f1c:	f897 60a3 	ldrb.w	r6, [r7, #163]	; 0xa3
 8005f20:	f00d feac 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005f24:	4603      	mov	r3, r0
 8005f26:	9302      	str	r3, [sp, #8]
 8005f28:	f44f 7304 	mov.w	r3, #528	; 0x210
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f0>)
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	4b0d      	ldr	r3, [pc, #52]	; (8005f68 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f4>)
 8005f34:	4632      	mov	r2, r6
 8005f36:	2102      	movs	r1, #2
 8005f38:	4620      	mov	r0, r4
 8005f3a:	47a8      	blx	r5

}
 8005f3c:	bf00      	nop
 8005f3e:	37b4      	adds	r7, #180	; 0xb4
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f44:	08023494 	.word	0x08023494
 8005f48:	080234f8 	.word	0x080234f8
 8005f4c:	08023150 	.word	0x08023150
 8005f50:	08023154 	.word	0x08023154
 8005f54:	08023168 	.word	0x08023168
 8005f58:	08023484 	.word	0x08023484
 8005f5c:	08023488 	.word	0x08023488
 8005f60:	08023170 	.word	0x08023170
 8005f64:	08022e2c 	.word	0x08022e2c
 8005f68:	080233ac 	.word	0x080233ac

08005f6c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fe fd02 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005f7c:	4a03      	ldr	r2, [pc, #12]	; (8005f8c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev+0x20>)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	08026770 	.word	0x08026770

08005f90 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv>:
 8005f90:	b590      	push	{r4, r7, lr}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	f44f 7205 	mov.w	r2, #532	; 0x214
 8005f9c:	4906      	ldr	r1, [pc, #24]	; (8005fb8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv+0x28>)
 8005f9e:	2004      	movs	r0, #4
 8005fa0:	f003 feb6 	bl	8009d10 <_ZnwjPKci>
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f7ff ffe0 	bl	8005f6c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>
 8005fac:	4623      	mov	r3, r4
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd90      	pop	{r4, r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	08022e2c 	.word	0x08022e2c

08005fbc <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>:
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f00c fa90 	bl	80124ec <_ZN10UtestShellC1Ev>
 8005fcc:	4a03      	ldr	r2, [pc, #12]	; (8005fdc <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev+0x20>)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	080266c4 	.word	0x080266c4

08005fe0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv>:
{
 8005fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fe2:	b091      	sub	sp, #68	; 0x44
 8005fe4:	af04      	add	r7, sp, #16
 8005fe6:	6078      	str	r0, [r7, #4]

	char *fake_command_buffer[2] =
 8005fe8:	4a33      	ldr	r2, [pc, #204]	; (80060b8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xd8>)
 8005fea:	f107 030c 	add.w	r3, r7, #12
 8005fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ff2:	e883 0003 	stmia.w	r3, {r0, r1}

		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[0]);
 8005ff6:	f107 0314 	add.w	r3, r7, #20
 8005ffa:	4930      	ldr	r1, [pc, #192]	; (80060bc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xdc>)
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f006 fa4a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8006002:	f107 0314 	add.w	r3, r7, #20
 8006006:	2100      	movs	r1, #0
 8006008:	4618      	mov	r0, r3
 800600a:	f004 fb1d 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800600e:	4604      	mov	r4, r0
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	330c      	adds	r3, #12
 8006014:	681d      	ldr	r5, [r3, #0]
 8006016:	f107 031c 	add.w	r3, r7, #28
 800601a:	4929      	ldr	r1, [pc, #164]	; (80060c0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe0>)
 800601c:	4618      	mov	r0, r3
 800601e:	f006 fa3a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8006022:	f107 031c 	add.w	r3, r7, #28
 8006026:	4619      	mov	r1, r3
 8006028:	4620      	mov	r0, r4
 800602a:	47a8      	blx	r5
 800602c:	4604      	mov	r4, r0
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	334c      	adds	r3, #76	; 0x4c
 8006032:	681d      	ldr	r5, [r3, #0]
 8006034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006038:	4922      	ldr	r1, [pc, #136]	; (80060c4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe4>)
 800603a:	4618      	mov	r0, r3
 800603c:	f006 fa2b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006046:	4619      	mov	r1, r3
 8006048:	4620      	mov	r0, r4
 800604a:	47a8      	blx	r5
 800604c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006050:	4618      	mov	r0, r3
 8006052:	f006 fdd8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8006056:	f107 031c 	add.w	r3, r7, #28
 800605a:	4618      	mov	r0, r3
 800605c:	f006 fdd3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8006060:	f107 0314 	add.w	r3, r7, #20
 8006064:	4618      	mov	r0, r3
 8006066:	f006 fdce 	bl	800cc06 <_ZN12SimpleStringD1Ev>


	Status response;
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 800606a:	4917      	ldr	r1, [pc, #92]	; (80060c8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe8>)
 800606c:	4817      	ldr	r0, [pc, #92]	; (80060cc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xec>)
 800606e:	f7fd fa33 	bl	80034d8 <Connect_TCP_Server>
 8006072:	4603      	mov	r3, r0
 8006074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(response != IDLE)
 8006078:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800607c:	2b04      	cmp	r3, #4
 800607e:	d100      	bne.n	8006082 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xa2>
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006080:	e7f3      	b.n	800606a <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x8a>
		{
			break;
 8006082:	bf00      	nop
		}

	}
	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8006084:	f00d fdea 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8006088:	4604      	mov	r4, r0
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	3338      	adds	r3, #56	; 0x38
 800608e:	681d      	ldr	r5, [r3, #0]
 8006090:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 8006094:	f00d fdf2 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006098:	4603      	mov	r3, r0
 800609a:	9302      	str	r3, [sp, #8]
 800609c:	f240 232b 	movw	r3, #555	; 0x22b
 80060a0:	9301      	str	r3, [sp, #4]
 80060a2:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf0>)
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	4b0b      	ldr	r3, [pc, #44]	; (80060d4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf4>)
 80060a8:	4632      	mov	r2, r6
 80060aa:	2101      	movs	r1, #1
 80060ac:	4620      	mov	r0, r4
 80060ae:	47a8      	blx	r5

}
 80060b0:	bf00      	nop
 80060b2:	3734      	adds	r7, #52	; 0x34
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060b8:	080234f8 	.word	0x080234f8
 80060bc:	08023150 	.word	0x08023150
 80060c0:	08023154 	.word	0x08023154
 80060c4:	08023168 	.word	0x08023168
 80060c8:	08023484 	.word	0x08023484
 80060cc:	08023488 	.word	0x08023488
 80060d0:	08022e2c 	.word	0x08022e2c
 80060d4:	08023224 	.word	0x08023224

080060d8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe fc4c 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80060e8:	4a03      	ldr	r2, [pc, #12]	; (80060f8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev+0x20>)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4618      	mov	r0, r3
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	080266a4 	.word	0x080266a4

080060fc <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv>:
 80060fc:	b590      	push	{r4, r7, lr}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	f240 222f 	movw	r2, #559	; 0x22f
 8006108:	4906      	ldr	r1, [pc, #24]	; (8006124 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv+0x28>)
 800610a:	2004      	movs	r0, #4
 800610c:	f003 fe00 	bl	8009d10 <_ZnwjPKci>
 8006110:	4604      	mov	r4, r0
 8006112:	4620      	mov	r0, r4
 8006114:	f7ff ffe0 	bl	80060d8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>
 8006118:	4623      	mov	r3, r4
 800611a:	4618      	mov	r0, r3
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	bd90      	pop	{r4, r7, pc}
 8006122:	bf00      	nop
 8006124:	08022e2c 	.word	0x08022e2c

08006128 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>:
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4618      	mov	r0, r3
 8006134:	f00c f9da 	bl	80124ec <_ZN10UtestShellC1Ev>
 8006138:	4a03      	ldr	r2, [pc, #12]	; (8006148 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev+0x20>)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	080265f8 	.word	0x080265f8

0800614c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv>:
{
 800614c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800614e:	b0b1      	sub	sp, #196	; 0xc4
 8006150:	af04      	add	r7, sp, #16
 8006152:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 8006154:	4a71      	ldr	r2, [pc, #452]	; (800631c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d0>)
 8006156:	f107 0314 	add.w	r3, r7, #20
 800615a:	4611      	mov	r1, r2
 800615c:	2264      	movs	r2, #100	; 0x64
 800615e:	4618      	mov	r0, r3
 8006160:	f019 fe70 	bl	801fe44 <memcpy>
	{
	  AT_RESPONSE_OK,
	  AT_RESPONSE_ERROR
	};

	char *fake_command_buffer[2] =
 8006164:	4a6e      	ldr	r2, [pc, #440]	; (8006320 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d4>)
 8006166:	f107 030c 	add.w	r3, r7, #12
 800616a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800616e:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 8006172:	2300      	movs	r3, #0
 8006174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800617c:	2b01      	cmp	r3, #1
 800617e:	dc46      	bgt.n	800620e <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 8006180:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006184:	4967      	ldr	r1, [pc, #412]	; (8006324 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d8>)
 8006186:	4618      	mov	r0, r3
 8006188:	f006 f985 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800618c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006190:	2100      	movs	r1, #0
 8006192:	4618      	mov	r0, r3
 8006194:	f004 fa58 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006198:	4604      	mov	r4, r0
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	330c      	adds	r3, #12
 800619e:	681d      	ldr	r5, [r3, #0]
 80061a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80061a4:	4960      	ldr	r1, [pc, #384]	; (8006328 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1dc>)
 80061a6:	4618      	mov	r0, r3
 80061a8:	f006 f975 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80061ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80061b0:	4619      	mov	r1, r3
 80061b2:	4620      	mov	r0, r4
 80061b4:	47a8      	blx	r5
 80061b6:	4604      	mov	r4, r0
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	334c      	adds	r3, #76	; 0x4c
 80061bc:	681d      	ldr	r5, [r3, #0]
 80061be:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80061c2:	495a      	ldr	r1, [pc, #360]	; (800632c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e0>)
 80061c4:	4618      	mov	r0, r3
 80061c6:	f006 f966 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80061ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80061d4:	4413      	add	r3, r2
 80061d6:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 80061da:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80061de:	4619      	mov	r1, r3
 80061e0:	4620      	mov	r0, r4
 80061e2:	47a8      	blx	r5
 80061e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80061e8:	4618      	mov	r0, r3
 80061ea:	f006 fd0c 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80061ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80061f2:	4618      	mov	r0, r3
 80061f4:	f006 fd07 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80061f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80061fc:	4618      	mov	r0, r3
 80061fe:	f006 fd02 	bl	800cc06 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 8006202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006206:	3301      	adds	r3, #1
 8006208:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800620c:	e7b4      	b.n	8006178 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 800620e:	2300      	movs	r3, #0
 8006210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006214:	4946      	ldr	r1, [pc, #280]	; (8006330 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 8006216:	4847      	ldr	r0, [pc, #284]	; (8006334 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e8>)
 8006218:	f7fd f95e 	bl	80034d8 <Connect_TCP_Server>
 800621c:	4603      	mov	r3, r0
 800621e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if(response != IDLE)
 8006222:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8006226:	2b04      	cmp	r3, #4
 8006228:	d15d      	bne.n	80062e6 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x19a>
		{
			break;
		}

		if(i<3)
 800622a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800622e:	2b02      	cmp	r3, #2
 8006230:	dcf0      	bgt.n	8006214 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc8>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006232:	2300      	movs	r3, #0
 8006234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006238:	f107 0214 	add.w	r2, r7, #20
 800623c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006240:	2132      	movs	r1, #50	; 0x32
 8006242:	fb01 f303 	mul.w	r3, r1, r3
 8006246:	4413      	add	r3, r2
 8006248:	4618      	mov	r0, r3
 800624a:	f7f9 fff7 	bl	800023c <strlen>
 800624e:	4603      	mov	r3, r0
 8006250:	461a      	mov	r2, r3
 8006252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006256:	4293      	cmp	r3, r2
 8006258:	da3f      	bge.n	80062da <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x18e>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 800625a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800625e:	4931      	ldr	r1, [pc, #196]	; (8006324 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d8>)
 8006260:	4618      	mov	r0, r3
 8006262:	f006 f918 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8006266:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800626a:	2100      	movs	r1, #0
 800626c:	4618      	mov	r0, r3
 800626e:	f004 f9eb 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006272:	4604      	mov	r4, r0
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	330c      	adds	r3, #12
 8006278:	681d      	ldr	r5, [r3, #0]
 800627a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800627e:	492e      	ldr	r1, [pc, #184]	; (8006338 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1ec>)
 8006280:	4618      	mov	r0, r3
 8006282:	f006 f908 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8006286:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800628a:	4619      	mov	r1, r3
 800628c:	4620      	mov	r0, r4
 800628e:	47a8      	blx	r5
 8006290:	4603      	mov	r3, r0
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	3264      	adds	r2, #100	; 0x64
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800629c:	2032      	movs	r0, #50	; 0x32
 800629e:	fb00 f101 	mul.w	r1, r0, r1
 80062a2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80062a6:	4408      	add	r0, r1
 80062a8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062ac:	4401      	add	r1, r0
 80062ae:	399c      	subs	r1, #156	; 0x9c
 80062b0:	7809      	ldrb	r1, [r1, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	4790      	blx	r2
 80062b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80062ba:	4618      	mov	r0, r3
 80062bc:	f006 fca3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80062c0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80062c4:	4618      	mov	r0, r3
 80062c6:	f006 fc9e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80062ca:	f7fc ffbf 	bl	800324c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80062ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062d2:	3301      	adds	r3, #1
 80062d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062d8:	e7ae      	b.n	8006238 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xec>
			}
			i++;
 80062da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80062de:	3301      	adds	r3, #1
 80062e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

	}
 80062e4:	e796      	b.n	8006214 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc8>
			break;
 80062e6:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 80062e8:	f00d fcb8 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 80062ec:	4604      	mov	r4, r0
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	3338      	adds	r3, #56	; 0x38
 80062f2:	681d      	ldr	r5, [r3, #0]
 80062f4:	f897 60a3 	ldrb.w	r6, [r7, #163]	; 0xa3
 80062f8:	f00d fcc0 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80062fc:	4603      	mov	r3, r0
 80062fe:	9302      	str	r3, [sp, #8]
 8006300:	f240 2357 	movw	r3, #599	; 0x257
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	4b0d      	ldr	r3, [pc, #52]	; (800633c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f0>)
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f4>)
 800630c:	4632      	mov	r2, r6
 800630e:	2103      	movs	r1, #3
 8006310:	4620      	mov	r0, r4
 8006312:	47a8      	blx	r5

}
 8006314:	bf00      	nop
 8006316:	37b4      	adds	r7, #180	; 0xb4
 8006318:	46bd      	mov	sp, r7
 800631a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800631c:	08023500 	.word	0x08023500
 8006320:	080234f8 	.word	0x080234f8
 8006324:	08023150 	.word	0x08023150
 8006328:	08023154 	.word	0x08023154
 800632c:	08023168 	.word	0x08023168
 8006330:	08023484 	.word	0x08023484
 8006334:	08023488 	.word	0x08023488
 8006338:	08023170 	.word	0x08023170
 800633c:	08022e2c 	.word	0x08022e2c
 8006340:	08023250 	.word	0x08023250

08006344 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4618      	mov	r0, r3
 8006350:	f7fe fb16 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006354:	4a03      	ldr	r2, [pc, #12]	; (8006364 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev+0x20>)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	080265d8 	.word	0x080265d8

08006368 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv>:
 8006368:	b590      	push	{r4, r7, lr}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	f240 225b 	movw	r2, #603	; 0x25b
 8006374:	4906      	ldr	r1, [pc, #24]	; (8006390 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv+0x28>)
 8006376:	2004      	movs	r0, #4
 8006378:	f003 fcca 	bl	8009d10 <_ZnwjPKci>
 800637c:	4604      	mov	r4, r0
 800637e:	4620      	mov	r0, r4
 8006380:	f7ff ffe0 	bl	8006344 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>
 8006384:	4623      	mov	r3, r4
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	bd90      	pop	{r4, r7, pc}
 800638e:	bf00      	nop
 8006390:	08022e2c 	.word	0x08022e2c

08006394 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>:
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4618      	mov	r0, r3
 80063a0:	f00c f8a4 	bl	80124ec <_ZN10UtestShellC1Ev>
 80063a4:	4a03      	ldr	r2, [pc, #12]	; (80063b4 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev+0x20>)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4618      	mov	r0, r3
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	0802652c 	.word	0x0802652c

080063b8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv>:
{
 80063b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ba:	b093      	sub	sp, #76	; 0x4c
 80063bc:	af04      	add	r7, sp, #16
 80063be:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CIPCLOSE);
 80063c0:	f107 0308 	add.w	r3, r7, #8
 80063c4:	494a      	ldr	r1, [pc, #296]	; (80064f0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 80063c6:	4618      	mov	r0, r3
 80063c8:	f006 f865 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80063cc:	f107 0308 	add.w	r3, r7, #8
 80063d0:	2100      	movs	r1, #0
 80063d2:	4618      	mov	r0, r3
 80063d4:	f004 f938 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80063d8:	4604      	mov	r4, r0
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	330c      	adds	r3, #12
 80063de:	681d      	ldr	r5, [r3, #0]
 80063e0:	f107 0310 	add.w	r3, r7, #16
 80063e4:	4943      	ldr	r1, [pc, #268]	; (80064f4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x13c>)
 80063e6:	4618      	mov	r0, r3
 80063e8:	f006 f855 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80063ec:	f107 0310 	add.w	r3, r7, #16
 80063f0:	4619      	mov	r1, r3
 80063f2:	4620      	mov	r0, r4
 80063f4:	47a8      	blx	r5
 80063f6:	4604      	mov	r4, r0
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	334c      	adds	r3, #76	; 0x4c
 80063fc:	681d      	ldr	r5, [r3, #0]
 80063fe:	f107 0318 	add.w	r3, r7, #24
 8006402:	493d      	ldr	r1, [pc, #244]	; (80064f8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x140>)
 8006404:	4618      	mov	r0, r3
 8006406:	f006 f846 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800640a:	f107 0318 	add.w	r3, r7, #24
 800640e:	4a3b      	ldr	r2, [pc, #236]	; (80064fc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x144>)
 8006410:	4619      	mov	r1, r3
 8006412:	4620      	mov	r0, r4
 8006414:	47a8      	blx	r5
 8006416:	f107 0318 	add.w	r3, r7, #24
 800641a:	4618      	mov	r0, r3
 800641c:	f006 fbf3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8006420:	f107 0310 	add.w	r3, r7, #16
 8006424:	4618      	mov	r0, r3
 8006426:	f006 fbee 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800642a:	f107 0308 	add.w	r3, r7, #8
 800642e:	4618      	mov	r0, r3
 8006430:	f006 fbe9 	bl	800cc06 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_TCP_Server();
 8006434:	f7fd f88c 	bl	8003550 <Disconnect_TCP_Server>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 800643e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006442:	2b04      	cmp	r3, #4
 8006444:	d139      	bne.n	80064ba <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006446:	2300      	movs	r3, #0
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
 800644a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644c:	2b01      	cmp	r3, #1
 800644e:	dcf1      	bgt.n	8006434 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8006450:	f107 0320 	add.w	r3, r7, #32
 8006454:	4926      	ldr	r1, [pc, #152]	; (80064f0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006456:	4618      	mov	r0, r3
 8006458:	f006 f81d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800645c:	f107 0320 	add.w	r3, r7, #32
 8006460:	2100      	movs	r1, #0
 8006462:	4618      	mov	r0, r3
 8006464:	f004 f8f0 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006468:	4604      	mov	r4, r0
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	330c      	adds	r3, #12
 800646e:	681d      	ldr	r5, [r3, #0]
 8006470:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006474:	4922      	ldr	r1, [pc, #136]	; (8006500 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x148>)
 8006476:	4618      	mov	r0, r3
 8006478:	f006 f80d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800647c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006480:	4619      	mov	r1, r3
 8006482:	4620      	mov	r0, r4
 8006484:	47a8      	blx	r5
 8006486:	4603      	mov	r3, r0
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	3264      	adds	r2, #100	; 0x64
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	481d      	ldr	r0, [pc, #116]	; (8006504 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x14c>)
 8006490:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006492:	4401      	add	r1, r0
 8006494:	7809      	ldrb	r1, [r1, #0]
 8006496:	4618      	mov	r0, r3
 8006498:	4790      	blx	r2
 800649a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800649e:	4618      	mov	r0, r3
 80064a0:	f006 fbb1 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80064a4:	f107 0320 	add.w	r3, r7, #32
 80064a8:	4618      	mov	r0, r3
 80064aa:	f006 fbac 	bl	800cc06 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80064ae:	f7fc fecd 	bl	800324c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80064b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b4:	3301      	adds	r3, #1
 80064b6:	637b      	str	r3, [r7, #52]	; 0x34
 80064b8:	e7c7      	b.n	800644a <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x92>
			break;
 80064ba:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 80064bc:	f00d fbce 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 80064c0:	4604      	mov	r4, r0
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	3338      	adds	r3, #56	; 0x38
 80064c6:	681d      	ldr	r5, [r3, #0]
 80064c8:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 80064cc:	f00d fbd6 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80064d0:	4603      	mov	r3, r0
 80064d2:	9302      	str	r3, [sp, #8]
 80064d4:	f44f 731c 	mov.w	r3, #624	; 0x270
 80064d8:	9301      	str	r3, [sp, #4]
 80064da:	4b0b      	ldr	r3, [pc, #44]	; (8006508 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x150>)
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	4b0b      	ldr	r3, [pc, #44]	; (800650c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x154>)
 80064e0:	4632      	mov	r2, r6
 80064e2:	2102      	movs	r1, #2
 80064e4:	4620      	mov	r0, r4
 80064e6:	47a8      	blx	r5

}
 80064e8:	bf00      	nop
 80064ea:	373c      	adds	r7, #60	; 0x3c
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f0:	08023150 	.word	0x08023150
 80064f4:	08023154 	.word	0x08023154
 80064f8:	08023168 	.word	0x08023168
 80064fc:	08023564 	.word	0x08023564
 8006500:	08023170 	.word	0x08023170
 8006504:	08022db8 	.word	0x08022db8
 8006508:	08022e2c 	.word	0x08022e2c
 800650c:	080233ac 	.word	0x080233ac

08006510 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe fa30 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006520:	4a03      	ldr	r2, [pc, #12]	; (8006530 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev+0x20>)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	0802650c 	.word	0x0802650c

08006534 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv>:
 8006534:	b590      	push	{r4, r7, lr}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	f44f 721d 	mov.w	r2, #628	; 0x274
 8006540:	4906      	ldr	r1, [pc, #24]	; (800655c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006542:	2004      	movs	r0, #4
 8006544:	f003 fbe4 	bl	8009d10 <_ZnwjPKci>
 8006548:	4604      	mov	r4, r0
 800654a:	4620      	mov	r0, r4
 800654c:	f7ff ffe0 	bl	8006510 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>
 8006550:	4623      	mov	r3, r4
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	bd90      	pop	{r4, r7, pc}
 800655a:	bf00      	nop
 800655c:	08022e2c 	.word	0x08022e2c

08006560 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>:
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4618      	mov	r0, r3
 800656c:	f00b ffbe 	bl	80124ec <_ZN10UtestShellC1Ev>
 8006570:	4a03      	ldr	r2, [pc, #12]	; (8006580 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4618      	mov	r0, r3
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	08026460 	.word	0x08026460

08006584 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv>:
{
 8006584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006586:	b0b3      	sub	sp, #204	; 0xcc
 8006588:	af04      	add	r7, sp, #16
 800658a:	6078      	str	r0, [r7, #4]
	Status response;
	int i = 0;
 800658c:	2300      	movs	r3, #0
 800658e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char response_arr[2][50] =
 8006592:	4a7f      	ldr	r2, [pc, #508]	; (8006790 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x20c>)
 8006594:	f107 0308 	add.w	r3, r7, #8
 8006598:	4611      	mov	r1, r2
 800659a:	2264      	movs	r2, #100	; 0x64
 800659c:	4618      	mov	r0, r3
 800659e:	f019 fc51 	bl	801fe44 <memcpy>
	{ AT_RESPONSE_GREATER_THAN,
	  AT_RESPONSE_SEND_OK,
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT+CIPSEND=11\r\n");
 80065a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80065a6:	497b      	ldr	r1, [pc, #492]	; (8006794 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 80065a8:	4618      	mov	r0, r3
 80065aa:	f005 ff74 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80065ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80065b2:	2100      	movs	r1, #0
 80065b4:	4618      	mov	r0, r3
 80065b6:	f004 f847 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80065ba:	4604      	mov	r4, r0
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	330c      	adds	r3, #12
 80065c0:	681d      	ldr	r5, [r3, #0]
 80065c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80065c6:	4974      	ldr	r1, [pc, #464]	; (8006798 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x214>)
 80065c8:	4618      	mov	r0, r3
 80065ca:	f005 ff64 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80065ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80065d2:	4619      	mov	r1, r3
 80065d4:	4620      	mov	r0, r4
 80065d6:	47a8      	blx	r5
 80065d8:	4604      	mov	r4, r0
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	334c      	adds	r3, #76	; 0x4c
 80065de:	681d      	ldr	r5, [r3, #0]
 80065e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80065e4:	496d      	ldr	r1, [pc, #436]	; (800679c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x218>)
 80065e6:	4618      	mov	r0, r3
 80065e8:	f005 ff55 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80065ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80065f0:	4a6b      	ldr	r2, [pc, #428]	; (80067a0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x21c>)
 80065f2:	4619      	mov	r1, r3
 80065f4:	4620      	mov	r0, r4
 80065f6:	47a8      	blx	r5
 80065f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80065fc:	4618      	mov	r0, r3
 80065fe:	f006 fb02 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8006602:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006606:	4618      	mov	r0, r3
 8006608:	f006 fafd 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800660c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006610:	4618      	mov	r0, r3
 8006612:	f006 faf8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Hello World");
 8006616:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800661a:	495e      	ldr	r1, [pc, #376]	; (8006794 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 800661c:	4618      	mov	r0, r3
 800661e:	f005 ff3a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8006622:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006626:	2100      	movs	r1, #0
 8006628:	4618      	mov	r0, r3
 800662a:	f004 f80d 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800662e:	4604      	mov	r4, r0
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	330c      	adds	r3, #12
 8006634:	681d      	ldr	r5, [r3, #0]
 8006636:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800663a:	4957      	ldr	r1, [pc, #348]	; (8006798 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x214>)
 800663c:	4618      	mov	r0, r3
 800663e:	f005 ff2a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8006642:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006646:	4619      	mov	r1, r3
 8006648:	4620      	mov	r0, r4
 800664a:	47a8      	blx	r5
 800664c:	4604      	mov	r4, r0
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	334c      	adds	r3, #76	; 0x4c
 8006652:	681d      	ldr	r5, [r3, #0]
 8006654:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006658:	4950      	ldr	r1, [pc, #320]	; (800679c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x218>)
 800665a:	4618      	mov	r0, r3
 800665c:	f005 ff1b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8006660:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006664:	4a4f      	ldr	r2, [pc, #316]	; (80067a4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006666:	4619      	mov	r1, r3
 8006668:	4620      	mov	r0, r4
 800666a:	47a8      	blx	r5
 800666c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006670:	4618      	mov	r0, r3
 8006672:	f006 fac8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8006676:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800667a:	4618      	mov	r0, r3
 800667c:	f006 fac3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8006680:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006684:	4618      	mov	r0, r3
 8006686:	f006 fabe 	bl	800cc06 <_ZN12SimpleStringD1Ev>
	while(1)
	{
		response = Send_TCP_Message((char*)"Hello World");
 800668a:	4846      	ldr	r0, [pc, #280]	; (80067a4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 800668c:	f7fc ff7c 	bl	8003588 <Send_TCP_Message>
 8006690:	4603      	mov	r3, r0
 8006692:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		if(response != IDLE)
 8006696:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800669a:	2b04      	cmp	r3, #4
 800669c:	d15d      	bne.n	800675a <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1d6>
		{
			break;
		}

		if(i<2)
 800669e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	dcf1      	bgt.n	800668a <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80066a6:	2300      	movs	r3, #0
 80066a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066ac:	f107 0208 	add.w	r2, r7, #8
 80066b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066b4:	2132      	movs	r1, #50	; 0x32
 80066b6:	fb01 f303 	mul.w	r3, r1, r3
 80066ba:	4413      	add	r3, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f7f9 fdbd 	bl	800023c <strlen>
 80066c2:	4603      	mov	r3, r0
 80066c4:	461a      	mov	r2, r3
 80066c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066ca:	4293      	cmp	r3, r2
 80066cc:	da3f      	bge.n	800674e <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1ca>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80066ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80066d2:	4930      	ldr	r1, [pc, #192]	; (8006794 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 80066d4:	4618      	mov	r0, r3
 80066d6:	f005 fede 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80066da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80066de:	2100      	movs	r1, #0
 80066e0:	4618      	mov	r0, r3
 80066e2:	f003 ffb1 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80066e6:	4604      	mov	r4, r0
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	330c      	adds	r3, #12
 80066ec:	681d      	ldr	r5, [r3, #0]
 80066ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80066f2:	492d      	ldr	r1, [pc, #180]	; (80067a8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 80066f4:	4618      	mov	r0, r3
 80066f6:	f005 fece 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80066fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80066fe:	4619      	mov	r1, r3
 8006700:	4620      	mov	r0, r4
 8006702:	47a8      	blx	r5
 8006704:	4603      	mov	r3, r0
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	3264      	adds	r2, #100	; 0x64
 800670a:	6812      	ldr	r2, [r2, #0]
 800670c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006710:	2032      	movs	r0, #50	; 0x32
 8006712:	fb00 f101 	mul.w	r1, r0, r1
 8006716:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800671a:	4408      	add	r0, r1
 800671c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006720:	4401      	add	r1, r0
 8006722:	39b0      	subs	r1, #176	; 0xb0
 8006724:	7809      	ldrb	r1, [r1, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	4790      	blx	r2
 800672a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800672e:	4618      	mov	r0, r3
 8006730:	f006 fa69 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8006734:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006738:	4618      	mov	r0, r3
 800673a:	f006 fa64 	bl	800cc06 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 800673e:	f7fc fd85 	bl	800324c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006742:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006746:	3301      	adds	r3, #1
 8006748:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800674c:	e7ae      	b.n	80066ac <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x128>
			}
			i++;
 800674e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006752:	3301      	adds	r3, #1
 8006754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

	}
 8006758:	e797      	b.n	800668a <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
			break;
 800675a:	bf00      	nop

	LONGS_EQUAL(STATUS_OK,response);
 800675c:	f00d fa7e 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8006760:	4604      	mov	r4, r0
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	3338      	adds	r3, #56	; 0x38
 8006766:	681d      	ldr	r5, [r3, #0]
 8006768:	f897 60af 	ldrb.w	r6, [r7, #175]	; 0xaf
 800676c:	f00d fa86 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006770:	4603      	mov	r3, r0
 8006772:	9302      	str	r3, [sp, #8]
 8006774:	f240 2395 	movw	r3, #661	; 0x295
 8006778:	9301      	str	r3, [sp, #4]
 800677a:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	4b0c      	ldr	r3, [pc, #48]	; (80067b0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x22c>)
 8006780:	4632      	mov	r2, r6
 8006782:	2102      	movs	r1, #2
 8006784:	4620      	mov	r0, r4
 8006786:	47a8      	blx	r5

}
 8006788:	bf00      	nop
 800678a:	37bc      	adds	r7, #188	; 0xbc
 800678c:	46bd      	mov	sp, r7
 800678e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006790:	08023584 	.word	0x08023584
 8006794:	08023150 	.word	0x08023150
 8006798:	08023154 	.word	0x08023154
 800679c:	08023168 	.word	0x08023168
 80067a0:	08023574 	.word	0x08023574
 80067a4:	08023060 	.word	0x08023060
 80067a8:	08023170 	.word	0x08023170
 80067ac:	08022e2c 	.word	0x08022e2c
 80067b0:	080233ac 	.word	0x080233ac

080067b4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe f8de 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80067c4:	4a03      	ldr	r2, [pc, #12]	; (80067d4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev+0x20>)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	08026440 	.word	0x08026440

080067d8 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv>:
 80067d8:	b590      	push	{r4, r7, lr}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	f240 2299 	movw	r2, #665	; 0x299
 80067e4:	4906      	ldr	r1, [pc, #24]	; (8006800 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv+0x28>)
 80067e6:	2004      	movs	r0, #4
 80067e8:	f003 fa92 	bl	8009d10 <_ZnwjPKci>
 80067ec:	4604      	mov	r4, r0
 80067ee:	4620      	mov	r0, r4
 80067f0:	f7ff ffe0 	bl	80067b4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>
 80067f4:	4623      	mov	r3, r4
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd90      	pop	{r4, r7, pc}
 80067fe:	bf00      	nop
 8006800:	08022e2c 	.word	0x08022e2c

08006804 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>:
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4618      	mov	r0, r3
 8006810:	f00b fe6c 	bl	80124ec <_ZN10UtestShellC1Ev>
 8006814:	4a03      	ldr	r2, [pc, #12]	; (8006824 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4618      	mov	r0, r3
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	08026394 	.word	0x08026394

08006828 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv>:
{
 8006828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800682a:	b0a3      	sub	sp, #140	; 0x8c
 800682c:	af04      	add	r7, sp, #16
 800682e:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,11:Hello World";		// an example data that ESP received from server
 8006830:	4b49      	ldr	r3, [pc, #292]	; (8006958 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x130>)
 8006832:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8006836:	461d      	mov	r5, r3
 8006838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800683a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	6023      	str	r3, [r4, #0]
 8006840:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	605a      	str	r2, [r3, #4]
 800684a:	811a      	strh	r2, [r3, #8]

	Status response_state = IDLE;
 800684c:	2304      	movs	r3, #4
 800684e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 8006852:	2300      	movs	r3, #0
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	f107 0310 	add.w	r3, r7, #16
 800685a:	222e      	movs	r2, #46	; 0x2e
 800685c:	2100      	movs	r1, #0
 800685e:	4618      	mov	r0, r3
 8006860:	f019 fafe 	bl	801fe60 <memset>

	for(int i=0;i<(int)strlen(response);i++)
 8006864:	2300      	movs	r3, #0
 8006866:	677b      	str	r3, [r7, #116]	; 0x74
 8006868:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800686c:	4618      	mov	r0, r3
 800686e:	f7f9 fce5 	bl	800023c <strlen>
 8006872:	4603      	mov	r3, r0
 8006874:	461a      	mov	r2, r3
 8006876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006878:	4293      	cmp	r3, r2
 800687a:	da35      	bge.n	80068e8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800687c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006880:	4936      	ldr	r1, [pc, #216]	; (800695c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x134>)
 8006882:	4618      	mov	r0, r3
 8006884:	f005 fe07 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8006888:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800688c:	2100      	movs	r1, #0
 800688e:	4618      	mov	r0, r3
 8006890:	f003 feda 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006894:	4604      	mov	r4, r0
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	330c      	adds	r3, #12
 800689a:	681d      	ldr	r5, [r3, #0]
 800689c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80068a0:	492f      	ldr	r1, [pc, #188]	; (8006960 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x138>)
 80068a2:	4618      	mov	r0, r3
 80068a4:	f005 fdf7 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80068a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80068ac:	4619      	mov	r1, r3
 80068ae:	4620      	mov	r0, r4
 80068b0:	47a8      	blx	r5
 80068b2:	4603      	mov	r3, r0
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	3264      	adds	r2, #100	; 0x64
 80068b8:	6812      	ldr	r2, [r2, #0]
 80068ba:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80068be:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80068c0:	4401      	add	r1, r0
 80068c2:	7809      	ldrb	r1, [r1, #0]
 80068c4:	4618      	mov	r0, r3
 80068c6:	4790      	blx	r2
 80068c8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80068cc:	4618      	mov	r0, r3
 80068ce:	f006 f99a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80068d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80068d6:	4618      	mov	r0, r3
 80068d8:	f006 f995 	bl	800cc06 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 80068dc:	f7fc fcb6 	bl	800324c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 80068e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068e2:	3301      	adds	r3, #1
 80068e4:	677b      	str	r3, [r7, #116]	; 0x74
 80068e6:	e7bf      	b.n	8006868 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x40>
	}

	response_state = Read_TCP_Message(received_message);
 80068e8:	f107 030c 	add.w	r3, r7, #12
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fc fe83 	bl	80035f8 <Read_TCP_Message>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LONGS_EQUAL(STATUS_OK,response_state);
 80068f8:	f00d f9b0 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 80068fc:	4604      	mov	r4, r0
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	3338      	adds	r3, #56	; 0x38
 8006902:	681d      	ldr	r5, [r3, #0]
 8006904:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 8006908:	f00d f9b8 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800690c:	4603      	mov	r3, r0
 800690e:	9302      	str	r3, [sp, #8]
 8006910:	f240 23a9 	movw	r3, #681	; 0x2a9
 8006914:	9301      	str	r3, [sp, #4]
 8006916:	4b13      	ldr	r3, [pc, #76]	; (8006964 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	4b13      	ldr	r3, [pc, #76]	; (8006968 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x140>)
 800691c:	4632      	mov	r2, r6
 800691e:	2102      	movs	r1, #2
 8006920:	4620      	mov	r0, r4
 8006922:	47a8      	blx	r5

	STRCMP_EQUAL("Hello World",received_message);
 8006924:	f00d f99a 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8006928:	4604      	mov	r4, r0
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	3324      	adds	r3, #36	; 0x24
 800692e:	681d      	ldr	r5, [r3, #0]
 8006930:	f00d f9a4 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006934:	4603      	mov	r3, r0
 8006936:	f107 020c 	add.w	r2, r7, #12
 800693a:	9302      	str	r3, [sp, #8]
 800693c:	f240 23ab 	movw	r3, #683	; 0x2ab
 8006940:	9301      	str	r3, [sp, #4]
 8006942:	4b08      	ldr	r3, [pc, #32]	; (8006964 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	2300      	movs	r3, #0
 8006948:	4908      	ldr	r1, [pc, #32]	; (800696c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x144>)
 800694a:	4620      	mov	r0, r4
 800694c:	47a8      	blx	r5

}
 800694e:	bf00      	nop
 8006950:	377c      	adds	r7, #124	; 0x7c
 8006952:	46bd      	mov	sp, r7
 8006954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006956:	bf00      	nop
 8006958:	08023618 	.word	0x08023618
 800695c:	08023150 	.word	0x08023150
 8006960:	08023170 	.word	0x08023170
 8006964:	08022e2c 	.word	0x08022e2c
 8006968:	080235e8 	.word	0x080235e8
 800696c:	08023060 	.word	0x08023060

08006970 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4618      	mov	r0, r3
 800697c:	f7fe f800 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006980:	4a03      	ldr	r2, [pc, #12]	; (8006990 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev+0x20>)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	08026374 	.word	0x08026374

08006994 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv>:
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	f240 22af 	movw	r2, #687	; 0x2af
 80069a0:	4906      	ldr	r1, [pc, #24]	; (80069bc <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv+0x28>)
 80069a2:	2004      	movs	r0, #4
 80069a4:	f003 f9b4 	bl	8009d10 <_ZnwjPKci>
 80069a8:	4604      	mov	r4, r0
 80069aa:	4620      	mov	r0, r4
 80069ac:	f7ff ffe0 	bl	8006970 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>
 80069b0:	4623      	mov	r3, r4
 80069b2:	4618      	mov	r0, r3
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd90      	pop	{r4, r7, pc}
 80069ba:	bf00      	nop
 80069bc:	08022e2c 	.word	0x08022e2c

080069c0 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>:
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f00b fd8e 	bl	80124ec <_ZN10UtestShellC1Ev>
 80069d0:	4a03      	ldr	r2, [pc, #12]	; (80069e0 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev+0x20>)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4618      	mov	r0, r3
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	080262c8 	.word	0x080262c8

080069e4 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv>:
{
 80069e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069e6:	b095      	sub	sp, #84	; 0x54
 80069e8:	af04      	add	r7, sp, #16
 80069ea:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 80069ec:	2304      	movs	r3, #4
 80069ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	char received_message[50] ={0};
 80069f2:	2300      	movs	r3, #0
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	f107 0310 	add.w	r3, r7, #16
 80069fa:	222e      	movs	r2, #46	; 0x2e
 80069fc:	2100      	movs	r1, #0
 80069fe:	4618      	mov	r0, r3
 8006a00:	f019 fa2e 	bl	801fe60 <memset>
	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8006a04:	f107 030c 	add.w	r3, r7, #12
 8006a08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fc fe59 	bl	80036c4 <Wait_TCP_Message>
 8006a12:	4603      	mov	r3, r0
 8006a14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(response_state != IDLE)
 8006a18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d100      	bne.n	8006a22 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x3e>
		response_state = Wait_TCP_Message(received_message, 1000);
 8006a20:	e7f0      	b.n	8006a04 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x20>
			break;
 8006a22:	bf00      	nop
	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8006a24:	f00d f91a 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8006a28:	4604      	mov	r4, r0
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	3338      	adds	r3, #56	; 0x38
 8006a2e:	681d      	ldr	r5, [r3, #0]
 8006a30:	f897 603f 	ldrb.w	r6, [r7, #63]	; 0x3f
 8006a34:	f00d f922 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	9302      	str	r3, [sp, #8]
 8006a3c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x74>)
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x78>)
 8006a48:	4632      	mov	r2, r6
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	47a8      	blx	r5

}
 8006a50:	bf00      	nop
 8006a52:	3744      	adds	r7, #68	; 0x44
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a58:	08022e2c 	.word	0x08022e2c
 8006a5c:	080231b4 	.word	0x080231b4

08006a60 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fd ff88 	bl	8004980 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006a70:	4a03      	ldr	r2, [pc, #12]	; (8006a80 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev+0x20>)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	080262a8 	.word	0x080262a8

08006a84 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv>:
 8006a84:	b590      	push	{r4, r7, lr}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8006a90:	4906      	ldr	r1, [pc, #24]	; (8006aac <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006a92:	2004      	movs	r0, #4
 8006a94:	f003 f93c 	bl	8009d10 <_ZnwjPKci>
 8006a98:	4604      	mov	r4, r0
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f7ff ffe0 	bl	8006a60 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>
 8006aa0:	4623      	mov	r3, r4
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd90      	pop	{r4, r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	08022e2c 	.word	0x08022e2c

08006ab0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>:
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f00b fd16 	bl	80124ec <_ZN10UtestShellC1Ev>
 8006ac0:	4a03      	ldr	r2, [pc, #12]	; (8006ad0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	080261fc 	.word	0x080261fc

08006ad4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv>:
{
 8006ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ad6:	b0a3      	sub	sp, #140	; 0x8c
 8006ad8:	af04      	add	r7, sp, #16
 8006ada:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,13:PUMP_MOTOR=ON";		// an example string data that ESP received from server
 8006adc:	4b4d      	ldr	r3, [pc, #308]	; (8006c14 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x140>)
 8006ade:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8006ae2:	461d      	mov	r5, r3
 8006ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006aec:	6020      	str	r0, [r4, #0]
 8006aee:	3404      	adds	r4, #4
 8006af0:	8021      	strh	r1, [r4, #0]
 8006af2:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8006af6:	2200      	movs	r2, #0
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	605a      	str	r2, [r3, #4]

	Status response_state = IDLE;
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 8006b02:	2300      	movs	r3, #0
 8006b04:	60fb      	str	r3, [r7, #12]
 8006b06:	f107 0310 	add.w	r3, r7, #16
 8006b0a:	222e      	movs	r2, #46	; 0x2e
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f019 f9a6 	bl	801fe60 <memset>

	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8006b14:	f107 030c 	add.w	r3, r7, #12
 8006b18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fc fdd1 	bl	80036c4 <Wait_TCP_Message>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(response_state != IDLE)
 8006b28:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d141      	bne.n	8006bb4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0xe0>
			break;

		for(int i=0;i<(int)strlen(response);i++)
 8006b30:	2300      	movs	r3, #0
 8006b32:	677b      	str	r3, [r7, #116]	; 0x74
 8006b34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7f9 fb7f 	bl	800023c <strlen>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	461a      	mov	r2, r3
 8006b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b44:	4293      	cmp	r3, r2
 8006b46:	dae5      	bge.n	8006b14 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x40>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8006b48:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006b4c:	4932      	ldr	r1, [pc, #200]	; (8006c18 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x144>)
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f005 fca1 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8006b54:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006b58:	2100      	movs	r1, #0
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f003 fd74 	bl	800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006b60:	4604      	mov	r4, r0
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	330c      	adds	r3, #12
 8006b66:	681d      	ldr	r5, [r3, #0]
 8006b68:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006b6c:	492b      	ldr	r1, [pc, #172]	; (8006c1c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x148>)
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f005 fc91 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8006b74:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	47a8      	blx	r5
 8006b7e:	4603      	mov	r3, r0
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	3264      	adds	r2, #100	; 0x64
 8006b84:	6812      	ldr	r2, [r2, #0]
 8006b86:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8006b8a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006b8c:	4401      	add	r1, r0
 8006b8e:	7809      	ldrb	r1, [r1, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	4790      	blx	r2
 8006b94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f006 f834 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8006b9e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f006 f82f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8006ba8:	f7fc fb50 	bl	800324c <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8006bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bae:	3301      	adds	r3, #1
 8006bb0:	677b      	str	r3, [r7, #116]	; 0x74
 8006bb2:	e7bf      	b.n	8006b34 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x60>
			break;
 8006bb4:	bf00      	nop
		}
	}

	LONGS_EQUAL(STATUS_OK,response_state);
 8006bb6:	f00d f851 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8006bba:	4604      	mov	r4, r0
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	3338      	adds	r3, #56	; 0x38
 8006bc0:	681d      	ldr	r5, [r3, #0]
 8006bc2:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 8006bc6:	f00d f859 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	9302      	str	r3, [sp, #8]
 8006bce:	f240 23d6 	movw	r3, #726	; 0x2d6
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	4b12      	ldr	r3, [pc, #72]	; (8006c20 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	4b12      	ldr	r3, [pc, #72]	; (8006c24 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x150>)
 8006bda:	4632      	mov	r2, r6
 8006bdc:	2102      	movs	r1, #2
 8006bde:	4620      	mov	r0, r4
 8006be0:	47a8      	blx	r5
	STRCMP_EQUAL("PUMP_MOTOR=ON",received_message);
 8006be2:	f00d f83b 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8006be6:	4604      	mov	r4, r0
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	3324      	adds	r3, #36	; 0x24
 8006bec:	681d      	ldr	r5, [r3, #0]
 8006bee:	f00d f845 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f107 020c 	add.w	r2, r7, #12
 8006bf8:	9302      	str	r3, [sp, #8]
 8006bfa:	f240 23d7 	movw	r3, #727	; 0x2d7
 8006bfe:	9301      	str	r3, [sp, #4]
 8006c00:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	2300      	movs	r3, #0
 8006c06:	4908      	ldr	r1, [pc, #32]	; (8006c28 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x154>)
 8006c08:	4620      	mov	r0, r4
 8006c0a:	47a8      	blx	r5

}
 8006c0c:	bf00      	nop
 8006c0e:	377c      	adds	r7, #124	; 0x7c
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c14:	08023648 	.word	0x08023648
 8006c18:	08023150 	.word	0x08023150
 8006c1c:	08023170 	.word	0x08023170
 8006c20:	08022e2c 	.word	0x08022e2c
 8006c24:	080235e8 	.word	0x080235e8
 8006c28:	08023638 	.word	0x08023638

08006c2c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	4a05      	ldr	r2, [pc, #20]	; (8006c4c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev+0x20>)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f00b fca9 	bl	8012594 <_ZN10UtestShellD1Ev>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	080261fc 	.word	0x080261fc

08006c50 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD0Ev>:
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff ffe7 	bl	8006c2c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
 8006c5e:	211c      	movs	r1, #28
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f003 f869 	bl	8009d38 <_ZdlPvj>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>:
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	4a05      	ldr	r2, [pc, #20]	; (8006c90 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev+0x20>)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fd fe8f 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	080262a8 	.word	0x080262a8

08006c94 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD0Ev>:
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7ff ffe7 	bl	8006c70 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>
 8006ca2:	2104      	movs	r1, #4
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f003 f847 	bl	8009d38 <_ZdlPvj>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4618      	mov	r0, r3
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	4a05      	ldr	r2, [pc, #20]	; (8006cd4 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev+0x20>)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f00b fc65 	bl	8012594 <_ZN10UtestShellD1Ev>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	080262c8 	.word	0x080262c8

08006cd8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD0Ev>:
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff ffe7 	bl	8006cb4 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
 8006ce6:	211c      	movs	r1, #28
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f003 f825 	bl	8009d38 <_ZdlPvj>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>:
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	4a05      	ldr	r2, [pc, #20]	; (8006d18 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev+0x20>)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fd fe4b 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	08026374 	.word	0x08026374

08006d1c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD0Ev>:
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff ffe7 	bl	8006cf8 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>
 8006d2a:	2104      	movs	r1, #4
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f003 f803 	bl	8009d38 <_ZdlPvj>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	4a05      	ldr	r2, [pc, #20]	; (8006d5c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev+0x20>)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f00b fc21 	bl	8012594 <_ZN10UtestShellD1Ev>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4618      	mov	r0, r3
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	08026394 	.word	0x08026394

08006d60 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD0Ev>:
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff ffe7 	bl	8006d3c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
 8006d6e:	211c      	movs	r1, #28
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f002 ffe1 	bl	8009d38 <_ZdlPvj>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>:
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	4a05      	ldr	r2, [pc, #20]	; (8006da0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev+0x20>)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fd fe07 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	08026440 	.word	0x08026440

08006da4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD0Ev>:
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff ffe7 	bl	8006d80 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>
 8006db2:	2104      	movs	r1, #4
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f002 ffbf 	bl	8009d38 <_ZdlPvj>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	4a05      	ldr	r2, [pc, #20]	; (8006de4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev+0x20>)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f00b fbdd 	bl	8012594 <_ZN10UtestShellD1Ev>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	08026460 	.word	0x08026460

08006de8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD0Ev>:
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7ff ffe7 	bl	8006dc4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
 8006df6:	211c      	movs	r1, #28
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f002 ff9d 	bl	8009d38 <_ZdlPvj>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4618      	mov	r0, r3
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>:
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	4a05      	ldr	r2, [pc, #20]	; (8006e28 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev+0x20>)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fd fdc3 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	0802650c 	.word	0x0802650c

08006e2c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD0Ev>:
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff ffe7 	bl	8006e08 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>
 8006e3a:	2104      	movs	r1, #4
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f002 ff7b 	bl	8009d38 <_ZdlPvj>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4618      	mov	r0, r3
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	4a05      	ldr	r2, [pc, #20]	; (8006e6c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev+0x20>)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f00b fb99 	bl	8012594 <_ZN10UtestShellD1Ev>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	0802652c 	.word	0x0802652c

08006e70 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD0Ev>:
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7ff ffe7 	bl	8006e4c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
 8006e7e:	211c      	movs	r1, #28
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f002 ff59 	bl	8009d38 <_ZdlPvj>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>:
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	4a05      	ldr	r2, [pc, #20]	; (8006eb0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev+0x20>)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fd fd7f 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	080265d8 	.word	0x080265d8

08006eb4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD0Ev>:
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7ff ffe7 	bl	8006e90 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>
 8006ec2:	2104      	movs	r1, #4
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f002 ff37 	bl	8009d38 <_ZdlPvj>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	4a05      	ldr	r2, [pc, #20]	; (8006ef4 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev+0x20>)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f00b fb55 	bl	8012594 <_ZN10UtestShellD1Ev>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4618      	mov	r0, r3
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	080265f8 	.word	0x080265f8

08006ef8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD0Ev>:
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7ff ffe7 	bl	8006ed4 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
 8006f06:	211c      	movs	r1, #28
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f002 ff15 	bl	8009d38 <_ZdlPvj>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4618      	mov	r0, r3
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>:
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	4a05      	ldr	r2, [pc, #20]	; (8006f38 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev+0x20>)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fd fd3b 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4618      	mov	r0, r3
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	080266a4 	.word	0x080266a4

08006f3c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD0Ev>:
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff ffe7 	bl	8006f18 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>
 8006f4a:	2104      	movs	r1, #4
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f002 fef3 	bl	8009d38 <_ZdlPvj>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4618      	mov	r0, r3
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	4a05      	ldr	r2, [pc, #20]	; (8006f7c <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev+0x20>)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f00b fb11 	bl	8012594 <_ZN10UtestShellD1Ev>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	080266c4 	.word	0x080266c4

08006f80 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD0Ev>:
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff ffe7 	bl	8006f5c <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
 8006f8e:	211c      	movs	r1, #28
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f002 fed1 	bl	8009d38 <_ZdlPvj>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>:
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	4a05      	ldr	r2, [pc, #20]	; (8006fc0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev+0x20>)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fd fcf7 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	08026770 	.word	0x08026770

08006fc4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD0Ev>:
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff ffe7 	bl	8006fa0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>
 8006fd2:	2104      	movs	r1, #4
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f002 feaf 	bl	8009d38 <_ZdlPvj>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	4a05      	ldr	r2, [pc, #20]	; (8007004 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev+0x20>)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f00b facd 	bl	8012594 <_ZN10UtestShellD1Ev>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	08026790 	.word	0x08026790

08007008 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD0Ev>:
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff ffe7 	bl	8006fe4 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
 8007016:	211c      	movs	r1, #28
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f002 fe8d 	bl	8009d38 <_ZdlPvj>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>:
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	4a05      	ldr	r2, [pc, #20]	; (8007048 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev+0x20>)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4618      	mov	r0, r3
 800703a:	f7fd fcb3 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	0802683c 	.word	0x0802683c

0800704c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD0Ev>:
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff ffe7 	bl	8007028 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>
 800705a:	2104      	movs	r1, #4
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f002 fe6b 	bl	8009d38 <_ZdlPvj>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	4a05      	ldr	r2, [pc, #20]	; (800708c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4618      	mov	r0, r3
 800707e:	f00b fa89 	bl	8012594 <_ZN10UtestShellD1Ev>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	0802685c 	.word	0x0802685c

08007090 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7ff ffe7 	bl	800706c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 800709e:	211c      	movs	r1, #28
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f002 fe49 	bl	8009d38 <_ZdlPvj>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4618      	mov	r0, r3
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	4a05      	ldr	r2, [pc, #20]	; (80070d0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fd fc6f 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4618      	mov	r0, r3
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	08026908 	.word	0x08026908

080070d4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff ffe7 	bl	80070b0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 80070e2:	2104      	movs	r1, #4
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f002 fe27 	bl	8009d38 <_ZdlPvj>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	4a05      	ldr	r2, [pc, #20]	; (8007114 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4618      	mov	r0, r3
 8007106:	f00b fa45 	bl	8012594 <_ZN10UtestShellD1Ev>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4618      	mov	r0, r3
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	08026928 	.word	0x08026928

08007118 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7ff ffe7 	bl	80070f4 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 8007126:	211c      	movs	r1, #28
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f002 fe05 	bl	8009d38 <_ZdlPvj>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	4a05      	ldr	r2, [pc, #20]	; (8007158 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4618      	mov	r0, r3
 800714a:	f7fd fc2b 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4618      	mov	r0, r3
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	080269d4 	.word	0x080269d4

0800715c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7ff ffe7 	bl	8007138 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 800716a:	2104      	movs	r1, #4
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f002 fde3 	bl	8009d38 <_ZdlPvj>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	4a05      	ldr	r2, [pc, #20]	; (800719c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4618      	mov	r0, r3
 800718e:	f00b fa01 	bl	8012594 <_ZN10UtestShellD1Ev>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	080269f4 	.word	0x080269f4

080071a0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7ff ffe7 	bl	800717c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 80071ae:	211c      	movs	r1, #28
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f002 fdc1 	bl	8009d38 <_ZdlPvj>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	4a05      	ldr	r2, [pc, #20]	; (80071e0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fd fbe7 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	08026aa0 	.word	0x08026aa0

080071e4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff ffe7 	bl	80071c0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 80071f2:	2104      	movs	r1, #4
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f002 fd9f 	bl	8009d38 <_ZdlPvj>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	4a05      	ldr	r2, [pc, #20]	; (8007224 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4618      	mov	r0, r3
 8007216:	f00b f9bd 	bl	8012594 <_ZN10UtestShellD1Ev>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4618      	mov	r0, r3
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	08026ac0 	.word	0x08026ac0

08007228 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff ffe7 	bl	8007204 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 8007236:	211c      	movs	r1, #28
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f002 fd7d 	bl	8009d38 <_ZdlPvj>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	4a05      	ldr	r2, [pc, #20]	; (8007268 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4618      	mov	r0, r3
 800725a:	f7fd fba3 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4618      	mov	r0, r3
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	08026b6c 	.word	0x08026b6c

0800726c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff ffe7 	bl	8007248 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 800727a:	2104      	movs	r1, #4
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f002 fd5b 	bl	8009d38 <_ZdlPvj>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4618      	mov	r0, r3
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	4a05      	ldr	r2, [pc, #20]	; (80072ac <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4618      	mov	r0, r3
 800729e:	f00b f979 	bl	8012594 <_ZN10UtestShellD1Ev>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	08026b8c 	.word	0x08026b8c

080072b0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff ffe7 	bl	800728c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 80072be:	211c      	movs	r1, #28
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f002 fd39 	bl	8009d38 <_ZdlPvj>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4618      	mov	r0, r3
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	4a05      	ldr	r2, [pc, #20]	; (80072f0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fd fb5f 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	08026c38 	.word	0x08026c38

080072f4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff ffe7 	bl	80072d0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 8007302:	2104      	movs	r1, #4
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f002 fd17 	bl	8009d38 <_ZdlPvj>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	4a05      	ldr	r2, [pc, #20]	; (8007334 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4618      	mov	r0, r3
 8007326:	f00b f935 	bl	8012594 <_ZN10UtestShellD1Ev>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4618      	mov	r0, r3
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	08026c58 	.word	0x08026c58

08007338 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7ff ffe7 	bl	8007314 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8007346:	211c      	movs	r1, #28
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f002 fcf5 	bl	8009d38 <_ZdlPvj>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	4a05      	ldr	r2, [pc, #20]	; (8007378 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4618      	mov	r0, r3
 800736a:	f7fd fb1b 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	08026d04 	.word	0x08026d04

0800737c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff ffe7 	bl	8007358 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 800738a:	2104      	movs	r1, #4
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f002 fcd3 	bl	8009d38 <_ZdlPvj>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	4a05      	ldr	r2, [pc, #20]	; (80073bc <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f00b f8f1 	bl	8012594 <_ZN10UtestShellD1Ev>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4618      	mov	r0, r3
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	08026d24 	.word	0x08026d24

080073c0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff ffe7 	bl	800739c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 80073ce:	211c      	movs	r1, #28
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f002 fcb1 	bl	8009d38 <_ZdlPvj>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	4a05      	ldr	r2, [pc, #20]	; (8007400 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fd fad7 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4618      	mov	r0, r3
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	08026dd0 	.word	0x08026dd0

08007404 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7ff ffe7 	bl	80073e0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 8007412:	2104      	movs	r1, #4
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f002 fc8f 	bl	8009d38 <_ZdlPvj>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4618      	mov	r0, r3
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	4a05      	ldr	r2, [pc, #20]	; (8007444 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4618      	mov	r0, r3
 8007436:	f00b f8ad 	bl	8012594 <_ZN10UtestShellD1Ev>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4618      	mov	r0, r3
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	08026df0 	.word	0x08026df0

08007448 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff ffe7 	bl	8007424 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8007456:	211c      	movs	r1, #28
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f002 fc6d 	bl	8009d38 <_ZdlPvj>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4618      	mov	r0, r3
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	4a05      	ldr	r2, [pc, #20]	; (8007488 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4618      	mov	r0, r3
 800747a:	f7fd fa93 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4618      	mov	r0, r3
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	08026e9c 	.word	0x08026e9c

0800748c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff ffe7 	bl	8007468 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 800749a:	2104      	movs	r1, #4
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f002 fc4b 	bl	8009d38 <_ZdlPvj>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	4a05      	ldr	r2, [pc, #20]	; (80074cc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4618      	mov	r0, r3
 80074be:	f00b f869 	bl	8012594 <_ZN10UtestShellD1Ev>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	08026ebc 	.word	0x08026ebc

080074d0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff ffe7 	bl	80074ac <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 80074de:	211c      	movs	r1, #28
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f002 fc29 	bl	8009d38 <_ZdlPvj>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4618      	mov	r0, r3
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	4a05      	ldr	r2, [pc, #20]	; (8007510 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4618      	mov	r0, r3
 8007502:	f7fd fa4f 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4618      	mov	r0, r3
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	08026f68 	.word	0x08026f68

08007514 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7ff ffe7 	bl	80074f0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8007522:	2104      	movs	r1, #4
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f002 fc07 	bl	8009d38 <_ZdlPvj>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4618      	mov	r0, r3
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	4a05      	ldr	r2, [pc, #20]	; (8007554 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4618      	mov	r0, r3
 8007546:	f00b f825 	bl	8012594 <_ZN10UtestShellD1Ev>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	08026f88 	.word	0x08026f88

08007558 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff ffe7 	bl	8007534 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8007566:	211c      	movs	r1, #28
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f002 fbe5 	bl	8009d38 <_ZdlPvj>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	4a05      	ldr	r2, [pc, #20]	; (8007598 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4618      	mov	r0, r3
 800758a:	f7fd fa0b 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4618      	mov	r0, r3
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	08027034 	.word	0x08027034

0800759c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7ff ffe7 	bl	8007578 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 80075aa:	2104      	movs	r1, #4
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f002 fbc3 	bl	8009d38 <_ZdlPvj>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4618      	mov	r0, r3
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	4a05      	ldr	r2, [pc, #20]	; (80075dc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f00a ffe1 	bl	8012594 <_ZN10UtestShellD1Ev>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	08027054 	.word	0x08027054

080075e0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7ff ffe7 	bl	80075bc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 80075ee:	211c      	movs	r1, #28
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f002 fba1 	bl	8009d38 <_ZdlPvj>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	4a05      	ldr	r2, [pc, #20]	; (8007620 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4618      	mov	r0, r3
 8007612:	f7fd f9c7 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	08027100 	.word	0x08027100

08007624 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7ff ffe7 	bl	8007600 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8007632:	2104      	movs	r1, #4
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f002 fb7f 	bl	8009d38 <_ZdlPvj>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	4a05      	ldr	r2, [pc, #20]	; (8007664 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4618      	mov	r0, r3
 8007656:	f00a ff9d 	bl	8012594 <_ZN10UtestShellD1Ev>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	08027120 	.word	0x08027120

08007668 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff ffe7 	bl	8007644 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8007676:	211c      	movs	r1, #28
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f002 fb5d 	bl	8009d38 <_ZdlPvj>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4618      	mov	r0, r3
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	4a05      	ldr	r2, [pc, #20]	; (80076a8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4618      	mov	r0, r3
 800769a:	f7fd f983 	bl	80049a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	080271cc 	.word	0x080271cc

080076ac <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7ff ffe7 	bl	8007688 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 80076ba:	2104      	movs	r1, #4
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f002 fb3b 	bl	8009d38 <_ZdlPvj>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	4a05      	ldr	r2, [pc, #20]	; (80076ec <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4618      	mov	r0, r3
 80076de:	f00a ff59 	bl	8012594 <_ZN10UtestShellD1Ev>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4618      	mov	r0, r3
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	0802720c 	.word	0x0802720c

080076f0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff ffe7 	bl	80076cc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 80076fe:	211c      	movs	r1, #28
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f002 fb19 	bl	8009d38 <_ZdlPvj>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	4a05      	ldr	r2, [pc, #20]	; (8007730 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4618      	mov	r0, r3
 8007722:	f7fc faf7 	bl	8003d14 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	080272b8 	.word	0x080272b8

08007734 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7ff ffe7 	bl	8007710 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8007742:	2108      	movs	r1, #8
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f002 faf7 	bl	8009d38 <_ZdlPvj>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	4a05      	ldr	r2, [pc, #20]	; (8007774 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4618      	mov	r0, r3
 8007766:	f00a ff15 	bl	8012594 <_ZN10UtestShellD1Ev>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4618      	mov	r0, r3
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	080272d8 	.word	0x080272d8

08007778 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7ff ffe7 	bl	8007754 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8007786:	211c      	movs	r1, #28
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f002 fad5 	bl	8009d38 <_ZdlPvj>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	4a05      	ldr	r2, [pc, #20]	; (80077b8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fc fab3 	bl	8003d14 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	08027384 	.word	0x08027384

080077bc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7ff ffe7 	bl	8007798 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 80077ca:	2108      	movs	r1, #8
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f002 fab3 	bl	8009d38 <_ZdlPvj>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	4a05      	ldr	r2, [pc, #20]	; (80077fc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f00a fed1 	bl	8012594 <_ZN10UtestShellD1Ev>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4618      	mov	r0, r3
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	080273a4 	.word	0x080273a4

08007800 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7ff ffe7 	bl	80077dc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 800780e:	211c      	movs	r1, #28
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f002 fa91 	bl	8009d38 <_ZdlPvj>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4618      	mov	r0, r3
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	4a05      	ldr	r2, [pc, #20]	; (8007840 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4618      	mov	r0, r3
 8007832:	f7fc fa6f 	bl	8003d14 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4618      	mov	r0, r3
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	08027450 	.word	0x08027450

08007844 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff ffe7 	bl	8007820 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8007852:	2108      	movs	r1, #8
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f002 fa6f 	bl	8009d38 <_ZdlPvj>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4618      	mov	r0, r3
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	4a05      	ldr	r2, [pc, #20]	; (8007884 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4618      	mov	r0, r3
 8007876:	f00a fe8d 	bl	8012594 <_ZN10UtestShellD1Ev>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	08027470 	.word	0x08027470

08007888 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff ffe7 	bl	8007864 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8007896:	211c      	movs	r1, #28
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f002 fa4d 	bl	8009d38 <_ZdlPvj>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4618      	mov	r0, r3
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	4a05      	ldr	r2, [pc, #20]	; (80078c8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fc fa2b 	bl	8003d14 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4618      	mov	r0, r3
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	0802751c 	.word	0x0802751c

080078cc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff ffe7 	bl	80078a8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 80078da:	2108      	movs	r1, #8
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f002 fa2b 	bl	8009d38 <_ZdlPvj>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	4a05      	ldr	r2, [pc, #20]	; (800790c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f00a fe49 	bl	8012594 <_ZN10UtestShellD1Ev>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	0802753c 	.word	0x0802753c

08007910 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7ff ffe7 	bl	80078ec <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 800791e:	211c      	movs	r1, #28
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f002 fa09 	bl	8009d38 <_ZdlPvj>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	4a05      	ldr	r2, [pc, #20]	; (8007950 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4618      	mov	r0, r3
 8007942:	f7fc f9e7 	bl	8003d14 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4618      	mov	r0, r3
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	080275e8 	.word	0x080275e8

08007954 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7ff ffe7 	bl	8007930 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8007962:	2108      	movs	r1, #8
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f002 f9e7 	bl	8009d38 <_ZdlPvj>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	4a05      	ldr	r2, [pc, #20]	; (8007994 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4618      	mov	r0, r3
 8007986:	f00a fe05 	bl	8012594 <_ZN10UtestShellD1Ev>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	08027608 	.word	0x08027608

08007998 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff ffe7 	bl	8007974 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 80079a6:	211c      	movs	r1, #28
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f002 f9c5 	bl	8009d38 <_ZdlPvj>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	4a05      	ldr	r2, [pc, #20]	; (80079d8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fc f9a3 	bl	8003d14 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	080276b4 	.word	0x080276b4

080079dc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7ff ffe7 	bl	80079b8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 80079ea:	2108      	movs	r1, #8
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f002 f9a3 	bl	8009d38 <_ZdlPvj>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	4a05      	ldr	r2, [pc, #20]	; (8007a1c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	601a      	str	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f00a fdc1 	bl	8012594 <_ZN10UtestShellD1Ev>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	080276d4 	.word	0x080276d4

08007a20 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff ffe7 	bl	80079fc <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8007a2e:	211c      	movs	r1, #28
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f002 f981 	bl	8009d38 <_ZdlPvj>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	4a05      	ldr	r2, [pc, #20]	; (8007a60 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fc f95f 	bl	8003d14 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	08027780 	.word	0x08027780

08007a64 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff ffe7 	bl	8007a40 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8007a72:	2108      	movs	r1, #8
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f002 f95f 	bl	8009d38 <_ZdlPvj>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	4a05      	ldr	r2, [pc, #20]	; (8007aa4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f00a fd7d 	bl	8012594 <_ZN10UtestShellD1Ev>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	080277a0 	.word	0x080277a0

08007aa8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff ffe7 	bl	8007a84 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8007ab6:	211c      	movs	r1, #28
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f002 f93d 	bl	8009d38 <_ZdlPvj>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	4a05      	ldr	r2, [pc, #20]	; (8007ae8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fc f91b 	bl	8003d14 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	0802784c 	.word	0x0802784c

08007aec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff ffe7 	bl	8007ac8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8007afa:	2108      	movs	r1, #8
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f002 f91b 	bl	8009d38 <_ZdlPvj>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4618      	mov	r0, r3
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	4a05      	ldr	r2, [pc, #20]	; (8007b2c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f00a fd39 	bl	8012594 <_ZN10UtestShellD1Ev>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	0802786c 	.word	0x0802786c

08007b30 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7ff ffe7 	bl	8007b0c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8007b3e:	211c      	movs	r1, #28
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f002 f8f9 	bl	8009d38 <_ZdlPvj>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	4a05      	ldr	r2, [pc, #20]	; (8007b70 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fc f8d7 	bl	8003d14 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	08027918 	.word	0x08027918

08007b74 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff ffe7 	bl	8007b50 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 8007b82:	2108      	movs	r1, #8
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f002 f8d7 	bl	8009d38 <_ZdlPvj>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <_Z41__static_initialization_and_destruction_0ii>:
}
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	f040 8224 	bne.w	8007fee <_Z41__static_initialization_and_destruction_0ii+0x45a>
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bac:	4293      	cmp	r3, r2
 8007bae:	f040 821e 	bne.w	8007fee <_Z41__static_initialization_and_destruction_0ii+0x45a>
TEST(RingBuffer_Test_Group, InitTest)
 8007bb2:	489f      	ldr	r0, [pc, #636]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8007bb4:	f7fc f8fc 	bl	8003db0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8007bb8:	2328      	movs	r3, #40	; 0x28
 8007bba:	9301      	str	r3, [sp, #4]
 8007bbc:	4b9d      	ldr	r3, [pc, #628]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	4b9d      	ldr	r3, [pc, #628]	; (8007e38 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8007bc2:	4a9e      	ldr	r2, [pc, #632]	; (8007e3c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007bc4:	499a      	ldr	r1, [pc, #616]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8007bc6:	489e      	ldr	r0, [pc, #632]	; (8007e40 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8007bc8:	f00c fae0 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8007bcc:	489d      	ldr	r0, [pc, #628]	; (8007e44 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007bce:	f7fc f9a3 	bl	8003f18 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8007bd2:	2332      	movs	r3, #50	; 0x32
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	4b97      	ldr	r3, [pc, #604]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	4b9b      	ldr	r3, [pc, #620]	; (8007e48 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8007bdc:	4a97      	ldr	r2, [pc, #604]	; (8007e3c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007bde:	4999      	ldr	r1, [pc, #612]	; (8007e44 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007be0:	489a      	ldr	r0, [pc, #616]	; (8007e4c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8007be2:	f00c fad3 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8007be6:	489a      	ldr	r0, [pc, #616]	; (8007e50 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8007be8:	f7fc fa20 	bl	800402c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8007bec:	233c      	movs	r3, #60	; 0x3c
 8007bee:	9301      	str	r3, [sp, #4]
 8007bf0:	4b90      	ldr	r3, [pc, #576]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	4b97      	ldr	r3, [pc, #604]	; (8007e54 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8007bf6:	4a91      	ldr	r2, [pc, #580]	; (8007e3c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007bf8:	4995      	ldr	r1, [pc, #596]	; (8007e50 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8007bfa:	4897      	ldr	r0, [pc, #604]	; (8007e58 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8007bfc:	f00c fac6 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8007c00:	4896      	ldr	r0, [pc, #600]	; (8007e5c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8007c02:	f7fc fa9b 	bl	800413c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8007c06:	2347      	movs	r3, #71	; 0x47
 8007c08:	9301      	str	r3, [sp, #4]
 8007c0a:	4b8a      	ldr	r3, [pc, #552]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	4b94      	ldr	r3, [pc, #592]	; (8007e60 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8007c10:	4a8a      	ldr	r2, [pc, #552]	; (8007e3c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007c12:	4992      	ldr	r1, [pc, #584]	; (8007e5c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8007c14:	4893      	ldr	r0, [pc, #588]	; (8007e64 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8007c16:	f00c fab9 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8007c1a:	4893      	ldr	r0, [pc, #588]	; (8007e68 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8007c1c:	f7fc fafa 	bl	8004214 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8007c20:	2350      	movs	r3, #80	; 0x50
 8007c22:	9301      	str	r3, [sp, #4]
 8007c24:	4b83      	ldr	r3, [pc, #524]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	4b90      	ldr	r3, [pc, #576]	; (8007e6c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8007c2a:	4a84      	ldr	r2, [pc, #528]	; (8007e3c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007c2c:	498e      	ldr	r1, [pc, #568]	; (8007e68 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8007c2e:	4890      	ldr	r0, [pc, #576]	; (8007e70 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8007c30:	f00c faac 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8007c34:	488f      	ldr	r0, [pc, #572]	; (8007e74 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8007c36:	f7fc fb79 	bl	800432c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8007c3a:	2360      	movs	r3, #96	; 0x60
 8007c3c:	9301      	str	r3, [sp, #4]
 8007c3e:	4b7d      	ldr	r3, [pc, #500]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	4b8d      	ldr	r3, [pc, #564]	; (8007e78 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8007c44:	4a7d      	ldr	r2, [pc, #500]	; (8007e3c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007c46:	498b      	ldr	r1, [pc, #556]	; (8007e74 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8007c48:	488c      	ldr	r0, [pc, #560]	; (8007e7c <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8007c4a:	f00c fa9f 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8007c4e:	488c      	ldr	r0, [pc, #560]	; (8007e80 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8007c50:	f7fc fc2a 	bl	80044a8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8007c54:	2375      	movs	r3, #117	; 0x75
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	4b76      	ldr	r3, [pc, #472]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	4b89      	ldr	r3, [pc, #548]	; (8007e84 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8007c5e:	4a77      	ldr	r2, [pc, #476]	; (8007e3c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007c60:	4987      	ldr	r1, [pc, #540]	; (8007e80 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8007c62:	4889      	ldr	r0, [pc, #548]	; (8007e88 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8007c64:	f00c fa92 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 8007c68:	4888      	ldr	r0, [pc, #544]	; (8007e8c <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8007c6a:	f7fc fc83 	bl	8004574 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 8007c6e:	237c      	movs	r3, #124	; 0x7c
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	4b70      	ldr	r3, [pc, #448]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	4b86      	ldr	r3, [pc, #536]	; (8007e90 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8007c78:	4a70      	ldr	r2, [pc, #448]	; (8007e3c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007c7a:	4984      	ldr	r1, [pc, #528]	; (8007e8c <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8007c7c:	4885      	ldr	r0, [pc, #532]	; (8007e94 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8007c7e:	f00c fa85 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 8007c82:	4885      	ldr	r0, [pc, #532]	; (8007e98 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8007c84:	f7fc fd60 	bl	8004748 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 8007c88:	2384      	movs	r3, #132	; 0x84
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	4b69      	ldr	r3, [pc, #420]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	4b82      	ldr	r3, [pc, #520]	; (8007e9c <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8007c92:	4a6a      	ldr	r2, [pc, #424]	; (8007e3c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007c94:	4980      	ldr	r1, [pc, #512]	; (8007e98 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8007c96:	4882      	ldr	r0, [pc, #520]	; (8007ea0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8007c98:	f00c fa78 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8007c9c:	4881      	ldr	r0, [pc, #516]	; (8007ea4 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8007c9e:	f7fc fec9 	bl	8004a34 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 8007ca2:	23bf      	movs	r3, #191	; 0xbf
 8007ca4:	9301      	str	r3, [sp, #4]
 8007ca6:	4b63      	ldr	r3, [pc, #396]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	4b7f      	ldr	r3, [pc, #508]	; (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8007cac:	4a7f      	ldr	r2, [pc, #508]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007cae:	497d      	ldr	r1, [pc, #500]	; (8007ea4 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8007cb0:	487f      	ldr	r0, [pc, #508]	; (8007eb0 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8007cb2:	f00c fa6b 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8007cb6:	487f      	ldr	r0, [pc, #508]	; (8007eb4 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8007cb8:	f7fc ff26 	bl	8004b08 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 8007cbc:	23d1      	movs	r3, #209	; 0xd1
 8007cbe:	9301      	str	r3, [sp, #4]
 8007cc0:	4b5c      	ldr	r3, [pc, #368]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	4b7c      	ldr	r3, [pc, #496]	; (8007eb8 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8007cc6:	4a79      	ldr	r2, [pc, #484]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007cc8:	497a      	ldr	r1, [pc, #488]	; (8007eb4 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8007cca:	487c      	ldr	r0, [pc, #496]	; (8007ebc <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8007ccc:	f00c fa5e 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8007cd0:	487b      	ldr	r0, [pc, #492]	; (8007ec0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8007cd2:	f7fc ffdd 	bl	8004c90 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 8007cd6:	23dd      	movs	r3, #221	; 0xdd
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	4b56      	ldr	r3, [pc, #344]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	4b79      	ldr	r3, [pc, #484]	; (8007ec4 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8007ce0:	4a72      	ldr	r2, [pc, #456]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007ce2:	4977      	ldr	r1, [pc, #476]	; (8007ec0 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8007ce4:	4878      	ldr	r0, [pc, #480]	; (8007ec8 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8007ce6:	f00c fa51 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8007cea:	4878      	ldr	r0, [pc, #480]	; (8007ecc <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8007cec:	f7fd f87a 	bl	8004de4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8007cf0:	23ec      	movs	r3, #236	; 0xec
 8007cf2:	9301      	str	r3, [sp, #4]
 8007cf4:	4b4f      	ldr	r3, [pc, #316]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	4b75      	ldr	r3, [pc, #468]	; (8007ed0 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8007cfa:	4a6c      	ldr	r2, [pc, #432]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007cfc:	4973      	ldr	r1, [pc, #460]	; (8007ecc <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8007cfe:	4875      	ldr	r0, [pc, #468]	; (8007ed4 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8007d00:	f00c fa44 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007d04:	4874      	ldr	r0, [pc, #464]	; (8007ed8 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8007d06:	f7fd f91b 	bl	8004f40 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 8007d0a:	23fd      	movs	r3, #253	; 0xfd
 8007d0c:	9301      	str	r3, [sp, #4]
 8007d0e:	4b49      	ldr	r3, [pc, #292]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	4b72      	ldr	r3, [pc, #456]	; (8007edc <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8007d14:	4a65      	ldr	r2, [pc, #404]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007d16:	4970      	ldr	r1, [pc, #448]	; (8007ed8 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8007d18:	4871      	ldr	r0, [pc, #452]	; (8007ee0 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8007d1a:	f00c fa37 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8007d1e:	4871      	ldr	r0, [pc, #452]	; (8007ee4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8007d20:	f7fd f97a 	bl	8005018 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8007d24:	f240 130d 	movw	r3, #269	; 0x10d
 8007d28:	9301      	str	r3, [sp, #4]
 8007d2a:	4b42      	ldr	r3, [pc, #264]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	4b6e      	ldr	r3, [pc, #440]	; (8007ee8 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8007d30:	4a5e      	ldr	r2, [pc, #376]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007d32:	496c      	ldr	r1, [pc, #432]	; (8007ee4 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8007d34:	486d      	ldr	r0, [pc, #436]	; (8007eec <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8007d36:	f00c fa29 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8007d3a:	486d      	ldr	r0, [pc, #436]	; (8007ef0 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8007d3c:	f7fd fa2a 	bl	8005194 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 8007d40:	f240 1323 	movw	r3, #291	; 0x123
 8007d44:	9301      	str	r3, [sp, #4]
 8007d46:	4b3b      	ldr	r3, [pc, #236]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	4b6a      	ldr	r3, [pc, #424]	; (8007ef4 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8007d4c:	4a57      	ldr	r2, [pc, #348]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007d4e:	4968      	ldr	r1, [pc, #416]	; (8007ef0 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8007d50:	4869      	ldr	r0, [pc, #420]	; (8007ef8 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8007d52:	f00c fa1b 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8007d56:	4869      	ldr	r0, [pc, #420]	; (8007efc <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8007d58:	f7fd face 	bl	80052f8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 8007d5c:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	4b34      	ldr	r3, [pc, #208]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	4b66      	ldr	r3, [pc, #408]	; (8007f00 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8007d68:	4a50      	ldr	r2, [pc, #320]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007d6a:	4964      	ldr	r1, [pc, #400]	; (8007efc <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8007d6c:	4865      	ldr	r0, [pc, #404]	; (8007f04 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8007d6e:	f00c fa0d 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8007d72:	4865      	ldr	r0, [pc, #404]	; (8007f08 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8007d74:	f7fd fbfe 	bl	8005574 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 8007d78:	f44f 73b3 	mov.w	r3, #358	; 0x166
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	4b2d      	ldr	r3, [pc, #180]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	4b62      	ldr	r3, [pc, #392]	; (8007f0c <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8007d84:	4a49      	ldr	r2, [pc, #292]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007d86:	4960      	ldr	r1, [pc, #384]	; (8007f08 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8007d88:	4861      	ldr	r0, [pc, #388]	; (8007f10 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8007d8a:	f00c f9ff 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8007d8e:	4861      	ldr	r0, [pc, #388]	; (8007f14 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8007d90:	f7fd fd2a 	bl	80057e8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 8007d94:	f44f 73c9 	mov.w	r3, #402	; 0x192
 8007d98:	9301      	str	r3, [sp, #4]
 8007d9a:	4b26      	ldr	r3, [pc, #152]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	4b5e      	ldr	r3, [pc, #376]	; (8007f18 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8007da0:	4a42      	ldr	r2, [pc, #264]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007da2:	495c      	ldr	r1, [pc, #368]	; (8007f14 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8007da4:	485d      	ldr	r0, [pc, #372]	; (8007f1c <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8007da6:	f00c f9f1 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8007daa:	485d      	ldr	r0, [pc, #372]	; (8007f20 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8007dac:	f7fd fdc6 	bl	800593c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 8007db0:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8007db4:	9301      	str	r3, [sp, #4]
 8007db6:	4b1f      	ldr	r3, [pc, #124]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	4b5a      	ldr	r3, [pc, #360]	; (8007f24 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8007dbc:	4a3b      	ldr	r2, [pc, #236]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007dbe:	4958      	ldr	r1, [pc, #352]	; (8007f20 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8007dc0:	4859      	ldr	r0, [pc, #356]	; (8007f28 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8007dc2:	f00c f9e3 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 8007dc6:	4859      	ldr	r0, [pc, #356]	; (8007f2c <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8007dc8:	f7fd fe9e 	bl	8005b08 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 8007dcc:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8007dd0:	9301      	str	r3, [sp, #4]
 8007dd2:	4b18      	ldr	r3, [pc, #96]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	4b56      	ldr	r3, [pc, #344]	; (8007f30 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8007dd8:	4a34      	ldr	r2, [pc, #208]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007dda:	4954      	ldr	r1, [pc, #336]	; (8007f2c <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8007ddc:	4855      	ldr	r0, [pc, #340]	; (8007f34 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8007dde:	f00c f9d5 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8007de2:	4855      	ldr	r0, [pc, #340]	; (8007f38 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8007de4:	f7fd ffb4 	bl	8005d50 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>
 8007de8:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	4b52      	ldr	r3, [pc, #328]	; (8007f3c <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8007df4:	4a2d      	ldr	r2, [pc, #180]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007df6:	4950      	ldr	r1, [pc, #320]	; (8007f38 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8007df8:	4851      	ldr	r0, [pc, #324]	; (8007f40 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8007dfa:	f00c f9c7 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8007dfe:	4851      	ldr	r0, [pc, #324]	; (8007f44 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8007e00:	f7fe f8dc 	bl	8005fbc <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>
 8007e04:	f44f 7305 	mov.w	r3, #532	; 0x214
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	4b4e      	ldr	r3, [pc, #312]	; (8007f48 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8007e10:	4a26      	ldr	r2, [pc, #152]	; (8007eac <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007e12:	494c      	ldr	r1, [pc, #304]	; (8007f44 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8007e14:	484d      	ldr	r0, [pc, #308]	; (8007f4c <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8007e16:	f00c f9b9 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8007e1a:	484d      	ldr	r0, [pc, #308]	; (8007f50 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8007e1c:	f7fe f984 	bl	8006128 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>
 8007e20:	f240 232f 	movw	r3, #559	; 0x22f
 8007e24:	9301      	str	r3, [sp, #4]
 8007e26:	4b03      	ldr	r3, [pc, #12]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	4b4a      	ldr	r3, [pc, #296]	; (8007f54 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8007e2c:	e094      	b.n	8007f58 <_Z41__static_initialization_and_destruction_0ii+0x3c4>
 8007e2e:	bf00      	nop
 8007e30:	200004a0 	.word	0x200004a0
 8007e34:	08022e2c 	.word	0x08022e2c
 8007e38:	08023668 	.word	0x08023668
 8007e3c:	08023674 	.word	0x08023674
 8007e40:	200004bc 	.word	0x200004bc
 8007e44:	200004c0 	.word	0x200004c0
 8007e48:	0802368c 	.word	0x0802368c
 8007e4c:	200004dc 	.word	0x200004dc
 8007e50:	200004e0 	.word	0x200004e0
 8007e54:	0802369c 	.word	0x0802369c
 8007e58:	200004fc 	.word	0x200004fc
 8007e5c:	20000500 	.word	0x20000500
 8007e60:	080236b0 	.word	0x080236b0
 8007e64:	2000051c 	.word	0x2000051c
 8007e68:	20000520 	.word	0x20000520
 8007e6c:	080236c0 	.word	0x080236c0
 8007e70:	2000053c 	.word	0x2000053c
 8007e74:	20000540 	.word	0x20000540
 8007e78:	080236d8 	.word	0x080236d8
 8007e7c:	2000055c 	.word	0x2000055c
 8007e80:	20000560 	.word	0x20000560
 8007e84:	080236e8 	.word	0x080236e8
 8007e88:	2000057c 	.word	0x2000057c
 8007e8c:	20000580 	.word	0x20000580
 8007e90:	080236f8 	.word	0x080236f8
 8007e94:	2000059c 	.word	0x2000059c
 8007e98:	200005a0 	.word	0x200005a0
 8007e9c:	08023704 	.word	0x08023704
 8007ea0:	200005bc 	.word	0x200005bc
 8007ea4:	200005c8 	.word	0x200005c8
 8007ea8:	08023714 	.word	0x08023714
 8007eac:	08023724 	.word	0x08023724
 8007eb0:	200005e4 	.word	0x200005e4
 8007eb4:	200005e8 	.word	0x200005e8
 8007eb8:	0802373c 	.word	0x0802373c
 8007ebc:	20000604 	.word	0x20000604
 8007ec0:	20000608 	.word	0x20000608
 8007ec4:	08023754 	.word	0x08023754
 8007ec8:	20000624 	.word	0x20000624
 8007ecc:	20000628 	.word	0x20000628
 8007ed0:	08023770 	.word	0x08023770
 8007ed4:	20000644 	.word	0x20000644
 8007ed8:	20000648 	.word	0x20000648
 8007edc:	08023784 	.word	0x08023784
 8007ee0:	20000664 	.word	0x20000664
 8007ee4:	20000668 	.word	0x20000668
 8007ee8:	080237a0 	.word	0x080237a0
 8007eec:	20000684 	.word	0x20000684
 8007ef0:	20000688 	.word	0x20000688
 8007ef4:	080237b4 	.word	0x080237b4
 8007ef8:	200006a4 	.word	0x200006a4
 8007efc:	200006a8 	.word	0x200006a8
 8007f00:	080237d0 	.word	0x080237d0
 8007f04:	200006c4 	.word	0x200006c4
 8007f08:	200006c8 	.word	0x200006c8
 8007f0c:	080237e8 	.word	0x080237e8
 8007f10:	200006e4 	.word	0x200006e4
 8007f14:	200006e8 	.word	0x200006e8
 8007f18:	080237fc 	.word	0x080237fc
 8007f1c:	20000704 	.word	0x20000704
 8007f20:	20000708 	.word	0x20000708
 8007f24:	0802381c 	.word	0x0802381c
 8007f28:	20000724 	.word	0x20000724
 8007f2c:	20000728 	.word	0x20000728
 8007f30:	08023834 	.word	0x08023834
 8007f34:	20000744 	.word	0x20000744
 8007f38:	20000748 	.word	0x20000748
 8007f3c:	0802384c 	.word	0x0802384c
 8007f40:	20000764 	.word	0x20000764
 8007f44:	20000768 	.word	0x20000768
 8007f48:	08023860 	.word	0x08023860
 8007f4c:	20000784 	.word	0x20000784
 8007f50:	20000788 	.word	0x20000788
 8007f54:	0802387c 	.word	0x0802387c
 8007f58:	4a83      	ldr	r2, [pc, #524]	; (8008168 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8007f5a:	4984      	ldr	r1, [pc, #528]	; (800816c <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 8007f5c:	4884      	ldr	r0, [pc, #528]	; (8008170 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8007f5e:	f00c f915 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8007f62:	4884      	ldr	r0, [pc, #528]	; (8008174 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 8007f64:	f7fe fa16 	bl	8006394 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>
 8007f68:	f240 235b 	movw	r3, #603	; 0x25b
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	4b82      	ldr	r3, [pc, #520]	; (8008178 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	4b82      	ldr	r3, [pc, #520]	; (800817c <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 8007f74:	4a7c      	ldr	r2, [pc, #496]	; (8008168 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8007f76:	497f      	ldr	r1, [pc, #508]	; (8008174 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 8007f78:	4881      	ldr	r0, [pc, #516]	; (8008180 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 8007f7a:	f00c f907 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8007f7e:	4881      	ldr	r0, [pc, #516]	; (8008184 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 8007f80:	f7fe faee 	bl	8006560 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>
 8007f84:	f44f 731d 	mov.w	r3, #628	; 0x274
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	4b7b      	ldr	r3, [pc, #492]	; (8008178 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	4b7e      	ldr	r3, [pc, #504]	; (8008188 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 8007f90:	4a75      	ldr	r2, [pc, #468]	; (8008168 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8007f92:	497c      	ldr	r1, [pc, #496]	; (8008184 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 8007f94:	487d      	ldr	r0, [pc, #500]	; (800818c <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8007f96:	f00c f8f9 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8007f9a:	487d      	ldr	r0, [pc, #500]	; (8008190 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8007f9c:	f7fe fc32 	bl	8006804 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>
 8007fa0:	f240 2399 	movw	r3, #665	; 0x299
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	4b74      	ldr	r3, [pc, #464]	; (8008178 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	4b7a      	ldr	r3, [pc, #488]	; (8008194 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 8007fac:	4a6e      	ldr	r2, [pc, #440]	; (8008168 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8007fae:	4978      	ldr	r1, [pc, #480]	; (8008190 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8007fb0:	4879      	ldr	r0, [pc, #484]	; (8008198 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8007fb2:	f00c f8eb 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8007fb6:	4879      	ldr	r0, [pc, #484]	; (800819c <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8007fb8:	f7fe fd02 	bl	80069c0 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>
 8007fbc:	f240 23af 	movw	r3, #687	; 0x2af
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	4b6d      	ldr	r3, [pc, #436]	; (8008178 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	4b76      	ldr	r3, [pc, #472]	; (80081a0 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8007fc8:	4a67      	ldr	r2, [pc, #412]	; (8008168 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8007fca:	4974      	ldr	r1, [pc, #464]	; (800819c <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8007fcc:	4875      	ldr	r0, [pc, #468]	; (80081a4 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8007fce:	f00c f8dd 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8007fd2:	4875      	ldr	r0, [pc, #468]	; (80081a8 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8007fd4:	f7fe fd6c 	bl	8006ab0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>
 8007fd8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	4b66      	ldr	r3, [pc, #408]	; (8008178 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	4b72      	ldr	r3, [pc, #456]	; (80081ac <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8007fe4:	4a60      	ldr	r2, [pc, #384]	; (8008168 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8007fe6:	4970      	ldr	r1, [pc, #448]	; (80081a8 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8007fe8:	4871      	ldr	r0, [pc, #452]	; (80081b0 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8007fea:	f00c f8cf 	bl	801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f040 80b4 	bne.w	800815e <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	f040 80ae 	bne.w	800815e <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 8008002:	486b      	ldr	r0, [pc, #428]	; (80081b0 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8008004:	f00c f8ec 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 8008008:	4867      	ldr	r0, [pc, #412]	; (80081a8 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800800a:	f7fe fe0f 	bl	8006c2c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 800800e:	4865      	ldr	r0, [pc, #404]	; (80081a4 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8008010:	f00c f8e6 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 8008014:	4861      	ldr	r0, [pc, #388]	; (800819c <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8008016:	f7fe fe4d 	bl	8006cb4 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 800801a:	485f      	ldr	r0, [pc, #380]	; (8008198 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800801c:	f00c f8e0 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 8008020:	485b      	ldr	r0, [pc, #364]	; (8008190 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8008022:	f7fe fe8b 	bl	8006d3c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8008026:	4859      	ldr	r0, [pc, #356]	; (800818c <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8008028:	f00c f8da 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 800802c:	4855      	ldr	r0, [pc, #340]	; (8008184 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 800802e:	f7fe fec9 	bl	8006dc4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8008032:	4853      	ldr	r0, [pc, #332]	; (8008180 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 8008034:	f00c f8d4 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 8008038:	484e      	ldr	r0, [pc, #312]	; (8008174 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800803a:	f7fe ff07 	bl	8006e4c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 800803e:	484c      	ldr	r0, [pc, #304]	; (8008170 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8008040:	f00c f8ce 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 8008044:	4849      	ldr	r0, [pc, #292]	; (800816c <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 8008046:	f7fe ff45 	bl	8006ed4 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 800804a:	485a      	ldr	r0, [pc, #360]	; (80081b4 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 800804c:	f00c f8c8 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 8008050:	4859      	ldr	r0, [pc, #356]	; (80081b8 <_Z41__static_initialization_and_destruction_0ii+0x624>)
 8008052:	f7fe ff83 	bl	8006f5c <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8008056:	4859      	ldr	r0, [pc, #356]	; (80081bc <_Z41__static_initialization_and_destruction_0ii+0x628>)
 8008058:	f00c f8c2 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 800805c:	4858      	ldr	r0, [pc, #352]	; (80081c0 <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 800805e:	f7fe ffc1 	bl	8006fe4 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Command_Process_Test)
 8008062:	4858      	ldr	r0, [pc, #352]	; (80081c4 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 8008064:	f00c f8bc 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 8008068:	4857      	ldr	r0, [pc, #348]	; (80081c8 <_Z41__static_initialization_and_destruction_0ii+0x634>)
 800806a:	f7fe ffff 	bl	800706c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 800806e:	4857      	ldr	r0, [pc, #348]	; (80081cc <_Z41__static_initialization_and_destruction_0ii+0x638>)
 8008070:	f00c f8b6 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 8008074:	4856      	ldr	r0, [pc, #344]	; (80081d0 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 8008076:	f7ff f83d 	bl	80070f4 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 800807a:	4856      	ldr	r0, [pc, #344]	; (80081d4 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 800807c:	f00c f8b0 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 8008080:	4855      	ldr	r0, [pc, #340]	; (80081d8 <_Z41__static_initialization_and_destruction_0ii+0x644>)
 8008082:	f7ff f87b 	bl	800717c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8008086:	4855      	ldr	r0, [pc, #340]	; (80081dc <_Z41__static_initialization_and_destruction_0ii+0x648>)
 8008088:	f00c f8aa 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 800808c:	4854      	ldr	r0, [pc, #336]	; (80081e0 <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 800808e:	f7ff f8b9 	bl	8007204 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8008092:	4854      	ldr	r0, [pc, #336]	; (80081e4 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 8008094:	f00c f8a4 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 8008098:	4853      	ldr	r0, [pc, #332]	; (80081e8 <_Z41__static_initialization_and_destruction_0ii+0x654>)
 800809a:	f7ff f8f7 	bl	800728c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 800809e:	4853      	ldr	r0, [pc, #332]	; (80081ec <_Z41__static_initialization_and_destruction_0ii+0x658>)
 80080a0:	f00c f89e 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 80080a4:	4852      	ldr	r0, [pc, #328]	; (80081f0 <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 80080a6:	f7ff f935 	bl	8007314 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80080aa:	4852      	ldr	r0, [pc, #328]	; (80081f4 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 80080ac:	f00c f898 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 80080b0:	4851      	ldr	r0, [pc, #324]	; (80081f8 <_Z41__static_initialization_and_destruction_0ii+0x664>)
 80080b2:	f7ff f973 	bl	800739c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 80080b6:	4851      	ldr	r0, [pc, #324]	; (80081fc <_Z41__static_initialization_and_destruction_0ii+0x668>)
 80080b8:	f00c f892 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 80080bc:	4850      	ldr	r0, [pc, #320]	; (8008200 <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 80080be:	f7ff f9b1 	bl	8007424 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 80080c2:	4850      	ldr	r0, [pc, #320]	; (8008204 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 80080c4:	f00c f88c 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 80080c8:	484f      	ldr	r0, [pc, #316]	; (8008208 <_Z41__static_initialization_and_destruction_0ii+0x674>)
 80080ca:	f7ff f9ef 	bl	80074ac <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80080ce:	484f      	ldr	r0, [pc, #316]	; (800820c <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80080d0:	f00c f886 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 80080d4:	484e      	ldr	r0, [pc, #312]	; (8008210 <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 80080d6:	f7ff fa2d 	bl	8007534 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80080da:	484e      	ldr	r0, [pc, #312]	; (8008214 <_Z41__static_initialization_and_destruction_0ii+0x680>)
 80080dc:	f00c f880 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 80080e0:	484d      	ldr	r0, [pc, #308]	; (8008218 <_Z41__static_initialization_and_destruction_0ii+0x684>)
 80080e2:	f7ff fa6b 	bl	80075bc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80080e6:	484d      	ldr	r0, [pc, #308]	; (800821c <_Z41__static_initialization_and_destruction_0ii+0x688>)
 80080e8:	f00c f87a 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 80080ec:	484c      	ldr	r0, [pc, #304]	; (8008220 <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 80080ee:	f7ff faa9 	bl	8007644 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 80080f2:	484c      	ldr	r0, [pc, #304]	; (8008224 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 80080f4:	f00c f874 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 80080f8:	484b      	ldr	r0, [pc, #300]	; (8008228 <_Z41__static_initialization_and_destruction_0ii+0x694>)
 80080fa:	f7ff fae7 	bl	80076cc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 80080fe:	484b      	ldr	r0, [pc, #300]	; (800822c <_Z41__static_initialization_and_destruction_0ii+0x698>)
 8008100:	f00c f86e 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 8008104:	484a      	ldr	r0, [pc, #296]	; (8008230 <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 8008106:	f7ff fb25 	bl	8007754 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 800810a:	484a      	ldr	r0, [pc, #296]	; (8008234 <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 800810c:	f00c f868 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 8008110:	4849      	ldr	r0, [pc, #292]	; (8008238 <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 8008112:	f7ff fb63 	bl	80077dc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008116:	4849      	ldr	r0, [pc, #292]	; (800823c <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 8008118:	f00c f862 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 800811c:	4848      	ldr	r0, [pc, #288]	; (8008240 <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 800811e:	f7ff fba1 	bl	8007864 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008122:	4848      	ldr	r0, [pc, #288]	; (8008244 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 8008124:	f00c f85c 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 8008128:	4847      	ldr	r0, [pc, #284]	; (8008248 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800812a:	f7ff fbdf 	bl	80078ec <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 800812e:	4847      	ldr	r0, [pc, #284]	; (800824c <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 8008130:	f00c f856 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 8008134:	4846      	ldr	r0, [pc, #280]	; (8008250 <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 8008136:	f7ff fc1d 	bl	8007974 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800813a:	4846      	ldr	r0, [pc, #280]	; (8008254 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 800813c:	f00c f850 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 8008140:	4845      	ldr	r0, [pc, #276]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 8008142:	f7ff fc5b 	bl	80079fc <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8008146:	4845      	ldr	r0, [pc, #276]	; (800825c <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 8008148:	f00c f84a 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 800814c:	4844      	ldr	r0, [pc, #272]	; (8008260 <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 800814e:	f7ff fc99 	bl	8007a84 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8008152:	4844      	ldr	r0, [pc, #272]	; (8008264 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 8008154:	f00c f844 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 8008158:	4843      	ldr	r0, [pc, #268]	; (8008268 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800815a:	f7ff fcd7 	bl	8007b0c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	08023724 	.word	0x08023724
 800816c:	20000788 	.word	0x20000788
 8008170:	200007a4 	.word	0x200007a4
 8008174:	200007a8 	.word	0x200007a8
 8008178:	08022e2c 	.word	0x08022e2c
 800817c:	08023894 	.word	0x08023894
 8008180:	200007c4 	.word	0x200007c4
 8008184:	200007c8 	.word	0x200007c8
 8008188:	080238a8 	.word	0x080238a8
 800818c:	200007e4 	.word	0x200007e4
 8008190:	200007e8 	.word	0x200007e8
 8008194:	080238c0 	.word	0x080238c0
 8008198:	20000804 	.word	0x20000804
 800819c:	20000808 	.word	0x20000808
 80081a0:	080238d8 	.word	0x080238d8
 80081a4:	20000824 	.word	0x20000824
 80081a8:	20000828 	.word	0x20000828
 80081ac:	080238f8 	.word	0x080238f8
 80081b0:	20000844 	.word	0x20000844
 80081b4:	20000784 	.word	0x20000784
 80081b8:	20000768 	.word	0x20000768
 80081bc:	20000764 	.word	0x20000764
 80081c0:	20000748 	.word	0x20000748
 80081c4:	20000744 	.word	0x20000744
 80081c8:	20000728 	.word	0x20000728
 80081cc:	20000724 	.word	0x20000724
 80081d0:	20000708 	.word	0x20000708
 80081d4:	20000704 	.word	0x20000704
 80081d8:	200006e8 	.word	0x200006e8
 80081dc:	200006e4 	.word	0x200006e4
 80081e0:	200006c8 	.word	0x200006c8
 80081e4:	200006c4 	.word	0x200006c4
 80081e8:	200006a8 	.word	0x200006a8
 80081ec:	200006a4 	.word	0x200006a4
 80081f0:	20000688 	.word	0x20000688
 80081f4:	20000684 	.word	0x20000684
 80081f8:	20000668 	.word	0x20000668
 80081fc:	20000664 	.word	0x20000664
 8008200:	20000648 	.word	0x20000648
 8008204:	20000644 	.word	0x20000644
 8008208:	20000628 	.word	0x20000628
 800820c:	20000624 	.word	0x20000624
 8008210:	20000608 	.word	0x20000608
 8008214:	20000604 	.word	0x20000604
 8008218:	200005e8 	.word	0x200005e8
 800821c:	200005e4 	.word	0x200005e4
 8008220:	200005c8 	.word	0x200005c8
 8008224:	200005bc 	.word	0x200005bc
 8008228:	200005a0 	.word	0x200005a0
 800822c:	2000059c 	.word	0x2000059c
 8008230:	20000580 	.word	0x20000580
 8008234:	2000057c 	.word	0x2000057c
 8008238:	20000560 	.word	0x20000560
 800823c:	2000055c 	.word	0x2000055c
 8008240:	20000540 	.word	0x20000540
 8008244:	2000053c 	.word	0x2000053c
 8008248:	20000520 	.word	0x20000520
 800824c:	2000051c 	.word	0x2000051c
 8008250:	20000500 	.word	0x20000500
 8008254:	200004fc 	.word	0x200004fc
 8008258:	200004e0 	.word	0x200004e0
 800825c:	200004dc 	.word	0x200004dc
 8008260:	200004c0 	.word	0x200004c0
 8008264:	200004bc 	.word	0x200004bc
 8008268:	200004a0 	.word	0x200004a0

0800826c <_GLOBAL__sub_I_rx_buffer>:
 800826c:	b580      	push	{r7, lr}
 800826e:	af00      	add	r7, sp, #0
 8008270:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008274:	2001      	movs	r0, #1
 8008276:	f7ff fc8d 	bl	8007b94 <_Z41__static_initialization_and_destruction_0ii>
 800827a:	bd80      	pop	{r7, pc}

0800827c <_GLOBAL__sub_D_rx_buffer>:
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
 8008280:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008284:	2000      	movs	r0, #0
 8008286:	f7ff fc85 	bl	8007b94 <_Z41__static_initialization_and_destruction_0ii>
 800828a:	bd80      	pop	{r7, pc}

0800828c <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	68db      	ldr	r3, [r3, #12]
    }
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	69db      	ldr	r3, [r3, #28]
    }
 80082b0:	4618      	mov	r0, r3
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	695b      	ldr	r3, [r3, #20]
    }
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 80082d4:	b590      	push	{r4, r7, lr}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7ff ffed 	bl	80082bc <_ZNK10TestResult15getFailureCountEv>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10a      	bne.n	80082fe <_ZNK10TestResult9isFailureEv+0x2a>
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7ff ffcf 	bl	800828c <_ZNK10TestResult11getRunCountEv>
 80082ee:	4604      	mov	r4, r0
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7ff ffd7 	bl	80082a4 <_ZNK10TestResult15getIgnoredCountEv>
 80082f6:	4603      	mov	r3, r0
 80082f8:	4423      	add	r3, r4
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <_ZNK10TestResult9isFailureEv+0x2e>
 80082fe:	2301      	movs	r3, #1
 8008300:	e000      	b.n	8008304 <_ZNK10TestResult9isFailureEv+0x30>
 8008302:	2300      	movs	r3, #0
    }
 8008304:	4618      	mov	r0, r3
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	bd90      	pop	{r4, r7, pc}

0800830c <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
    {
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4618      	mov	r0, r3
 8008318:	f007 fde6 	bl	800fee8 <_ZN10TestOutputC1Ev>
 800831c:	4a03      	ldr	r2, [pc, #12]	; (800832c <_ZN17ConsoleTestOutputC1Ev+0x20>)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	601a      	str	r2, [r3, #0]
    }
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	08027fcc 	.word	0x08027fcc

08008330 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
    {
 8008338:	4a05      	ldr	r2, [pc, #20]	; (8008350 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4618      	mov	r0, r3
 8008342:	f007 fdef 	bl	800ff24 <_ZN10TestOutputD1Ev>
    }
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	08027fcc 	.word	0x08027fcc

08008354 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
    }
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7ff ffe7 	bl	8008330 <_ZN17ConsoleTestOutputD1Ev>
 8008362:	2110      	movs	r1, #16
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 fce7 	bl	8009d38 <_ZdlPvj>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4618      	mov	r0, r3
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8008374:	b5b0      	push	{r4, r5, r7, lr}
 8008376:	b098      	sub	sp, #96	; 0x60
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
    int result = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8008382:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008386:	4618      	mov	r0, r3
 8008388:	f7ff ffc0 	bl	800830c <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 800838c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008390:	4935      	ldr	r1, [pc, #212]	; (8008468 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8008392:	4618      	mov	r0, r3
 8008394:	f004 f87f 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8008398:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800839c:	f107 0318 	add.w	r3, r7, #24
 80083a0:	2200      	movs	r2, #0
 80083a2:	4618      	mov	r0, r3
 80083a4:	f001 ff6a 	bl	800a27c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 80083a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80083ac:	4618      	mov	r0, r3
 80083ae:	f004 fc2a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 80083b2:	f107 0318 	add.w	r3, r7, #24
 80083b6:	2101      	movs	r1, #1
 80083b8:	4618      	mov	r0, r3
 80083ba:	f001 ff2f 	bl	800a21c <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 80083be:	f009 fb21 	bl	8011a04 <_ZN12TestRegistry18getCurrentRegistryEv>
 80083c2:	4603      	mov	r3, r0
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	3234      	adds	r2, #52	; 0x34
 80083c8:	6812      	ldr	r2, [r2, #0]
 80083ca:	f107 0118 	add.w	r1, r7, #24
 80083ce:	4618      	mov	r0, r3
 80083d0:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80083d2:	f009 fb17 	bl	8011a04 <_ZN12TestRegistry18getCurrentRegistryEv>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f107 0008 	add.w	r0, r7, #8
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	f000 f844 	bl	800846c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 80083e4:	f107 0308 	add.w	r3, r7, #8
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 f899 	bl	8008520 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 80083ee:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80083f0:	f107 0308 	add.w	r3, r7, #8
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 f863 	bl	80084c0 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 80083fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10c      	bne.n	800841a <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8008400:	f107 0318 	add.w	r3, r7, #24
 8008404:	2100      	movs	r1, #0
 8008406:	4618      	mov	r0, r3
 8008408:	f002 f83a 	bl	800a480 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 800840c:	4602      	mov	r2, r0
 800840e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008412:	4611      	mov	r1, r2
 8008414:	4618      	mov	r0, r3
 8008416:	f007 fe27 	bl	8010068 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 800841a:	f009 faf3 	bl	8011a04 <_ZN12TestRegistry18getCurrentRegistryEv>
 800841e:	4604      	mov	r4, r0
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	3344      	adds	r3, #68	; 0x44
 8008424:	681d      	ldr	r5, [r3, #0]
 8008426:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800842a:	490f      	ldr	r1, [pc, #60]	; (8008468 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 800842c:	4618      	mov	r0, r3
 800842e:	f004 f832 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8008432:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008436:	4619      	mov	r1, r3
 8008438:	4620      	mov	r0, r4
 800843a:	47a8      	blx	r5
 800843c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008440:	4618      	mov	r0, r3
 8008442:	f004 fbe0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return result;
 8008446:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8008448:	f107 0318 	add.w	r3, r7, #24
 800844c:	4618      	mov	r0, r3
 800844e:	f001 ff4d 	bl	800a2ec <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8008452:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008456:	4618      	mov	r0, r3
 8008458:	f7ff ff6a 	bl	8008330 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 800845c:	4623      	mov	r3, r4
}
 800845e:	4618      	mov	r0, r3
 8008460:	3760      	adds	r7, #96	; 0x60
 8008462:	46bd      	mov	sp, r7
 8008464:	bdb0      	pop	{r4, r5, r7, pc}
 8008466:	bf00      	nop
 8008468:	08023910 	.word	0x08023910

0800846c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 800846c:	b590      	push	{r4, r7, lr}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 800847a:	4a0f      	ldr	r2, [pc, #60]	; (80084b8 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	605a      	str	r2, [r3, #4]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	609a      	str	r2, [r3, #8]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8008492:	2241      	movs	r2, #65	; 0x41
 8008494:	4909      	ldr	r1, [pc, #36]	; (80084bc <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8008496:	2038      	movs	r0, #56	; 0x38
 8008498:	f001 fc3a 	bl	8009d10 <_ZnwjPKci>
 800849c:	4604      	mov	r4, r0
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	68b9      	ldr	r1, [r7, #8]
 80084a2:	4620      	mov	r0, r4
 80084a4:	f00c f84a 	bl	801453c <_ZN20CommandLineArgumentsC1EiPKPKc>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	609c      	str	r4, [r3, #8]
}
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4618      	mov	r0, r3
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd90      	pop	{r4, r7, pc}
 80084b6:	bf00      	nop
 80084b8:	08027958 	.word	0x08027958
 80084bc:	08023924 	.word	0x08023924

080084c0 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	4a0c      	ldr	r2, [pc, #48]	; (80084fc <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d004      	beq.n	80084e0 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	3204      	adds	r2, #4
 80084da:	6812      	ldr	r2, [r2, #0]
 80084dc:	4618      	mov	r0, r3
 80084de:	4790      	blx	r2
    delete output_;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d004      	beq.n	80084f2 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	3204      	adds	r2, #4
 80084ec:	6812      	ldr	r2, [r2, #0]
 80084ee:	4618      	mov	r0, r3
 80084f0:	4790      	blx	r2
}
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4618      	mov	r0, r3
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	08027958 	.word	0x08027958

08008500 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
}
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7ff ffd9 	bl	80084c0 <_ZN21CommandLineTestRunnerD1Ev>
 800850e:	2110      	movs	r1, #16
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f001 fc11 	bl	8009d38 <_ZdlPvj>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8008520:	b5b0      	push	{r4, r5, r7, lr}
 8008522:	b08c      	sub	sp, #48	; 0x30
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8008528:	2301      	movs	r3, #1
 800852a:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 800852c:	f107 031c 	add.w	r3, r7, #28
 8008530:	4929      	ldr	r1, [pc, #164]	; (80085d8 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8008532:	4618      	mov	r0, r3
 8008534:	f003 ffaf 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8008538:	f107 021c 	add.w	r2, r7, #28
 800853c:	f107 0308 	add.w	r3, r7, #8
 8008540:	4611      	mov	r1, r2
 8008542:	4618      	mov	r0, r3
 8008544:	f008 fe1c 	bl	8011180 <_ZN16SetPointerPluginC1ERK12SimpleString>
 8008548:	f107 031c 	add.w	r3, r7, #28
 800854c:	4618      	mov	r0, r3
 800854e:	f004 fb5a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3334      	adds	r3, #52	; 0x34
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f107 0108 	add.w	r1, r7, #8
 8008564:	4610      	mov	r0, r2
 8008566:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68da      	ldr	r2, [r3, #12]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	333c      	adds	r3, #60	; 0x3c
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4610      	mov	r0, r2
 8008578:	4798      	blx	r3
 800857a:	4603      	mov	r3, r0
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fa3e 	bl	8008a00 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f8ac 	bl	80086e8 <_ZN21CommandLineTestRunner11runAllTestsEv>
 8008590:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68dd      	ldr	r5, [r3, #12]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	3344      	adds	r3, #68	; 0x44
 800859e:	681c      	ldr	r4, [r3, #0]
 80085a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085a4:	490c      	ldr	r1, [pc, #48]	; (80085d8 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 80085a6:	4618      	mov	r0, r3
 80085a8:	f003 ff75 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80085ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085b0:	4619      	mov	r1, r3
 80085b2:	4628      	mov	r0, r5
 80085b4:	47a0      	blx	r4
 80085b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ba:	4618      	mov	r0, r3
 80085bc:	f004 fb23 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return testResult;
 80085c0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 80085c2:	f107 0308 	add.w	r3, r7, #8
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 faaa 	bl	8008b20 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 80085cc:	4623      	mov	r3, r4
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3730      	adds	r7, #48	; 0x30
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bdb0      	pop	{r4, r5, r7, pc}
 80085d6:	bf00      	nop
 80085d8:	08023948 	.word	0x08023948

080085dc <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 80085dc:	b5b0      	push	{r4, r5, r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68dd      	ldr	r5, [r3, #12]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3330      	adds	r3, #48	; 0x30
 80085f0:	681c      	ldr	r4, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f00c fce0 	bl	8014fbc <_ZNK20CommandLineArguments15getGroupFiltersEv>
 80085fc:	4603      	mov	r3, r0
 80085fe:	4619      	mov	r1, r3
 8008600:	4628      	mov	r0, r5
 8008602:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68dd      	ldr	r5, [r3, #12]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	332c      	adds	r3, #44	; 0x2c
 8008610:	681c      	ldr	r4, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	4618      	mov	r0, r3
 8008618:	f00c fcdc 	bl	8014fd4 <_ZNK20CommandLineArguments14getNameFiltersEv>
 800861c:	4603      	mov	r3, r0
 800861e:	4619      	mov	r1, r3
 8008620:	4628      	mov	r0, r5
 8008622:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	4618      	mov	r0, r3
 800862a:	f00c fc2b 	bl	8014e84 <_ZNK20CommandLineArguments9isVerboseEv>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d009      	beq.n	8008648 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3320      	adds	r3, #32
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2101      	movs	r1, #1
 8008644:	4610      	mov	r0, r2
 8008646:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	4618      	mov	r0, r3
 800864e:	f00c fc25 	bl	8014e9c <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d009      	beq.n	800866c <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3320      	adds	r3, #32
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2102      	movs	r1, #2
 8008668:	4610      	mov	r0, r2
 800866a:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	4618      	mov	r0, r3
 8008672:	f00c fc1f 	bl	8014eb4 <_ZNK20CommandLineArguments7isColorEv>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d008      	beq.n	800868e <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3324      	adds	r3, #36	; 0x24
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4610      	mov	r0, r2
 800868c:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	4618      	mov	r0, r3
 8008694:	f00c fc4a 	bl	8014f2c <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d008      	beq.n	80086b0 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68da      	ldr	r2, [r3, #12]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3360      	adds	r3, #96	; 0x60
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4610      	mov	r0, r2
 80086ae:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f00c fc2d 	bl	8014f14 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d004      	beq.n	80086ca <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f009 fa19 	bl	8011afc <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f00c fc50 	bl	8014f74 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 80086da:	f00b fadb 	bl	8013c94 <_ZN10UtestShell14setCrashOnFailEv>
}
 80086de:	bf00      	nop
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080086e8 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 80086e8:	b5b0      	push	{r4, r5, r7, lr}
 80086ea:	b094      	sub	sp, #80	; 0x50
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7ff ff73 	bl	80085dc <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 80086fe:	2300      	movs	r3, #0
 8008700:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	4618      	mov	r0, r3
 8008708:	f00c fc1c 	bl	8014f44 <_ZNK20CommandLineArguments14getRepeatCountEv>
 800870c:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	4618      	mov	r0, r3
 8008714:	f00c fbda 	bl	8014ecc <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d019      	beq.n	8008752 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	f107 0308 	add.w	r3, r7, #8
 8008726:	4611      	mov	r1, r2
 8008728:	4618      	mov	r0, r3
 800872a:	f009 fbaf 	bl	8011e8c <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3320      	adds	r3, #32
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f107 0108 	add.w	r1, r7, #8
 8008740:	4610      	mov	r0, r2
 8008742:	4798      	blx	r3
        return 0;
 8008744:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8008746:	f107 0308 	add.w	r3, r7, #8
 800874a:	4618      	mov	r0, r3
 800874c:	f009 fbd6 	bl	8011efc <_ZN10TestResultD1Ev>
 8008750:	e0e1      	b.n	8008916 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	4618      	mov	r0, r3
 8008758:	f00c fbc4 	bl	8014ee4 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d019      	beq.n	8008796 <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	f107 0308 	add.w	r3, r7, #8
 800876a:	4611      	mov	r1, r2
 800876c:	4618      	mov	r0, r3
 800876e:	f009 fb8d 	bl	8011e8c <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68da      	ldr	r2, [r3, #12]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3324      	adds	r3, #36	; 0x24
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f107 0108 	add.w	r1, r7, #8
 8008784:	4610      	mov	r0, r2
 8008786:	4798      	blx	r3
        return 0;
 8008788:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800878a:	f107 0308 	add.w	r3, r7, #8
 800878e:	4618      	mov	r0, r3
 8008790:	f009 fbb4 	bl	8011efc <_ZN10TestResultD1Ev>
 8008794:	e0bf      	b.n	8008916 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	4618      	mov	r0, r3
 800879c:	f00c fbae 	bl	8014efc <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d019      	beq.n	80087da <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685a      	ldr	r2, [r3, #4]
 80087aa:	f107 0308 	add.w	r3, r7, #8
 80087ae:	4611      	mov	r1, r2
 80087b0:	4618      	mov	r0, r3
 80087b2:	f009 fb6b 	bl	8011e8c <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3328      	adds	r3, #40	; 0x28
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f107 0108 	add.w	r1, r7, #8
 80087c8:	4610      	mov	r0, r2
 80087ca:	4798      	blx	r3
        return 0;
 80087cc:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80087ce:	f107 0308 	add.w	r3, r7, #8
 80087d2:	4618      	mov	r0, r3
 80087d4:	f009 fb92 	bl	8011efc <_ZN10TestResultD1Ev>
 80087d8:	e09d      	b.n	8008916 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	4618      	mov	r0, r3
 80087e0:	f00c fbbc 	bl	8014f5c <_ZNK20CommandLineArguments11isReversingEv>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d008      	beq.n	80087fc <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68da      	ldr	r2, [r3, #12]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	331c      	adds	r3, #28
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4610      	mov	r0, r2
 80087fa:	4798      	blx	r3

    if (arguments_->isShuffling())
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	4618      	mov	r0, r3
 8008802:	f00c fbc3 	bl	8014f8c <_ZNK20CommandLineArguments11isShufflingEv>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d023      	beq.n	8008854 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	332c      	adds	r3, #44	; 0x2c
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4941      	ldr	r1, [pc, #260]	; (8008920 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 800881c:	4610      	mov	r0, r2
 800881e:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685d      	ldr	r5, [r3, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3334      	adds	r3, #52	; 0x34
 800882c:	681c      	ldr	r4, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	4618      	mov	r0, r3
 8008834:	f00c fbb6 	bl	8014fa4 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8008838:	4603      	mov	r3, r0
 800883a:	4619      	mov	r1, r3
 800883c:	4628      	mov	r0, r5
 800883e:	47a0      	blx	r4
        output_->print("\n");
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	332c      	adds	r3, #44	; 0x2c
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4935      	ldr	r1, [pc, #212]	; (8008924 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8008850:	4610      	mov	r0, r2
 8008852:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 8008854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008856:	1c5a      	adds	r2, r3, #1
 8008858:	64fa      	str	r2, [r7, #76]	; 0x4c
 800885a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800885c:	429a      	cmp	r2, r3
 800885e:	bf8c      	ite	hi
 8008860:	2301      	movhi	r3, #1
 8008862:	2300      	movls	r3, #0
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d04e      	beq.n	8008908 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	4618      	mov	r0, r3
 8008870:	f00c fb8c 	bl	8014f8c <_ZNK20CommandLineArguments11isShufflingEv>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00f      	beq.n	800889a <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68dd      	ldr	r5, [r3, #12]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3318      	adds	r3, #24
 8008886:	681c      	ldr	r4, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	4618      	mov	r0, r3
 800888e:	f00c fb89 	bl	8014fa4 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8008892:	4603      	mov	r3, r0
 8008894:	4619      	mov	r1, r3
 8008896:	4628      	mov	r0, r5
 8008898:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6858      	ldr	r0, [r3, #4]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3340      	adds	r3, #64	; 0x40
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088aa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80088ac:	4798      	blx	r3
        TestResult tr(*output_);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	f107 0308 	add.w	r3, r7, #8
 80088b6:	4611      	mov	r1, r2
 80088b8:	4618      	mov	r0, r3
 80088ba:	f009 fae7 	bl	8011e8c <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68da      	ldr	r2, [r3, #12]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	3314      	adds	r3, #20
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f107 0108 	add.w	r1, r7, #8
 80088d0:	4610      	mov	r0, r2
 80088d2:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 80088d4:	f107 0308 	add.w	r3, r7, #8
 80088d8:	4618      	mov	r0, r3
 80088da:	f7ff fcef 	bl	80082bc <_ZNK10TestResult15getFailureCountEv>
 80088de:	4602      	mov	r2, r0
 80088e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e2:	4413      	add	r3, r2
 80088e4:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 80088e6:	f107 0308 	add.w	r3, r7, #8
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff fcf2 	bl	80082d4 <_ZNK10TestResult9isFailureEv>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 80088f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088f8:	3301      	adds	r3, #1
 80088fa:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 80088fc:	f107 0308 	add.w	r3, r7, #8
 8008900:	4618      	mov	r0, r3
 8008902:	f009 fafb 	bl	8011efc <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 8008906:	e7a5      	b.n	8008854 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 8008908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 800890e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8008910:	e000      	b.n	8008914 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 8008912:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8008914:	bf00      	nop
 8008916:	4623      	mov	r3, r4
}
 8008918:	4618      	mov	r0, r3
 800891a:	3750      	adds	r7, #80	; 0x50
 800891c:	46bd      	mov	sp, r7
 800891e:	bdb0      	pop	{r4, r5, r7, pc}
 8008920:	0802395c 	.word	0x0802395c
 8008924:	08023988 	.word	0x08023988

08008928 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8008928:	b590      	push	{r4, r7, lr}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8008930:	229d      	movs	r2, #157	; 0x9d
 8008932:	4906      	ldr	r1, [pc, #24]	; (800894c <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 8008934:	201c      	movs	r0, #28
 8008936:	f001 f9eb 	bl	8009d10 <_ZnwjPKci>
 800893a:	4604      	mov	r4, r0
 800893c:	4620      	mov	r0, r4
 800893e:	f005 f955 	bl	800dbec <_ZN18TeamCityTestOutputC1Ev>
 8008942:	4623      	mov	r3, r4
}
 8008944:	4618      	mov	r0, r3
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	bd90      	pop	{r4, r7, pc}
 800894c:	08023924 	.word	0x08023924

08008950 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8008950:	b590      	push	{r4, r7, lr}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 800895a:	22a2      	movs	r2, #162	; 0xa2
 800895c:	490a      	ldr	r1, [pc, #40]	; (8008988 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 800895e:	2014      	movs	r0, #20
 8008960:	f001 f9d6 	bl	8009d10 <_ZnwjPKci>
 8008964:	4604      	mov	r4, r0
 8008966:	4620      	mov	r0, r4
 8008968:	f000 f980 	bl	8008c6c <_ZN15JUnitTestOutputC1Ev>
 800896c:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d003      	beq.n	800897c <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 fbb2 	bl	80090e0 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 800897c:	68fb      	ldr	r3, [r7, #12]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	bd90      	pop	{r4, r7, pc}
 8008986:	bf00      	nop
 8008988:	08023924 	.word	0x08023924

0800898c <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 800898c:	b590      	push	{r4, r7, lr}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8008994:	22ab      	movs	r2, #171	; 0xab
 8008996:	4906      	ldr	r1, [pc, #24]	; (80089b0 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8008998:	2010      	movs	r0, #16
 800899a:	f001 f9b9 	bl	8009d10 <_ZnwjPKci>
 800899e:	4604      	mov	r4, r0
 80089a0:	4620      	mov	r0, r4
 80089a2:	f7ff fcb3 	bl	800830c <_ZN17ConsoleTestOutputC1Ev>
 80089a6:	4623      	mov	r3, r4
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd90      	pop	{r4, r7, pc}
 80089b0:	08023924 	.word	0x08023924

080089b4 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 80089b4:	b590      	push	{r4, r7, lr}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 80089c0:	22b0      	movs	r2, #176	; 0xb0
 80089c2:	490e      	ldr	r1, [pc, #56]	; (80089fc <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 80089c4:	2018      	movs	r0, #24
 80089c6:	f001 f9a3 	bl	8009d10 <_ZnwjPKci>
 80089ca:	4604      	mov	r4, r0
 80089cc:	4620      	mov	r0, r4
 80089ce:	f007 ff83 	bl	80108d8 <_ZN19CompositeTestOutputC1Ev>
 80089d2:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	335c      	adds	r3, #92	; 0x5c
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68b9      	ldr	r1, [r7, #8]
 80089de:	6978      	ldr	r0, [r7, #20]
 80089e0:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	3360      	adds	r3, #96	; 0x60
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6879      	ldr	r1, [r7, #4]
 80089ec:	6978      	ldr	r0, [r7, #20]
 80089ee:	4798      	blx	r3
  return composite;
 80089f0:	697b      	ldr	r3, [r7, #20]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	371c      	adds	r7, #28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd90      	pop	{r4, r7, pc}
 80089fa:	bf00      	nop
 80089fc:	08023924 	.word	0x08023924

08008a00 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8008a00:	b5b0      	push	{r4, r5, r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f00b fe4f 	bl	80146b4 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 8008a16:	4603      	mov	r3, r0
 8008a18:	f083 0301 	eor.w	r3, r3, #1
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d029      	beq.n	8008a76 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3310      	adds	r3, #16
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	4798      	blx	r3
 8008a2e:	4602      	mov	r2, r0
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685d      	ldr	r5, [r3, #4]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	332c      	adds	r3, #44	; 0x2c
 8008a40:	681c      	ldr	r4, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f00c fa10 	bl	8014e6c <_ZNK20CommandLineArguments8needHelpEv>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d006      	beq.n	8008a60 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f00c f9fa 	bl	8014e50 <_ZNK20CommandLineArguments4helpEv>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	e005      	b.n	8008a6c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f00c f9e5 	bl	8014e34 <_ZNK20CommandLineArguments5usageEv>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	4628      	mov	r0, r5
 8008a70:	47a0      	blx	r4
    return false;
 8008a72:	2300      	movs	r3, #0
 8008a74:	e050      	b.n	8008b18 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f00d f84c 	bl	8015b18 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d02c      	beq.n	8008ae0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	330c      	adds	r3, #12
 8008a8c:	681c      	ldr	r4, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f00d f864 	bl	8015b60 <_ZNK20CommandLineArguments14getPackageNameEv>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	47a0      	blx	r4
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f00c f9ea 	bl	8014e84 <_ZNK20CommandLineArguments9isVerboseEv>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d02f      	beq.n	8008b16 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3314      	adds	r3, #20
 8008abc:	681c      	ldr	r4, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685d      	ldr	r5, [r3, #4]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	3310      	adds	r3, #16
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	4798      	blx	r3
 8008ace:	4603      	mov	r3, r0
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	47a0      	blx	r4
 8008ad8:	4602      	mov	r2, r0
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	605a      	str	r2, [r3, #4]
 8008ade:	e01a      	b.n	8008b16 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f00d f829 	bl	8015b3c <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d009      	beq.n	8008b04 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3308      	adds	r3, #8
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	4798      	blx	r3
 8008afc:	4602      	mov	r2, r0
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	605a      	str	r2, [r3, #4]
 8008b02:	e008      	b.n	8008b16 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3310      	adds	r3, #16
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	4798      	blx	r3
 8008b10:	4602      	mov	r2, r0
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	605a      	str	r2, [r3, #4]
  return true;
 8008b16:	2301      	movs	r3, #1
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bdb0      	pop	{r4, r5, r7, pc}

08008b20 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	4a05      	ldr	r2, [pc, #20]	; (8008b40 <_ZN16SetPointerPluginD1Ev+0x20>)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f008 f9e7 	bl	8010f04 <_ZN10TestPluginD1Ev>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	080280d8 	.word	0x080280d8

08008b44 <_ZN16SetPointerPluginD0Ev>:
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7ff ffe7 	bl	8008b20 <_ZN16SetPointerPluginD1Ev>
 8008b52:	2114      	movs	r1, #20
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f001 f8ef 	bl	8009d38 <_ZdlPvj>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	691b      	ldr	r3, [r3, #16]
    }
 8008b70:	4618      	mov	r0, r3
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4910      	ldr	r1, [pc, #64]	; (8008bc8 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f003 fc84 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	609a      	str	r2, [r3, #8]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	60da      	str	r2, [r3, #12]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	741a      	strb	r2, [r3, #16]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3314      	adds	r3, #20
 8008ba4:	4908      	ldr	r1, [pc, #32]	; (8008bc8 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f003 fc75 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	61da      	str	r2, [r3, #28]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	621a      	str	r2, [r3, #32]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	0802398c 	.word	0x0802398c

08008bcc <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	605a      	str	r2, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	609a      	str	r2, [r3, #8]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	60da      	str	r2, [r3, #12]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	611a      	str	r2, [r3, #16]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	3314      	adds	r3, #20
 8008bf6:	4907      	ldr	r1, [pc, #28]	; (8008c14 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f003 fc4c 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	61da      	str	r2, [r3, #28]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	621a      	str	r2, [r3, #32]
    {
    }
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	0802398c 	.word	0x0802398c

08008c18 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3314      	adds	r3, #20
 8008c24:	4618      	mov	r0, r3
 8008c26:	f003 ffee 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff ffc4 	bl	8008bcc <_ZN20JUnitTestGroupResultC1Ev>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	3328      	adds	r3, #40	; 0x28
 8008c48:	4907      	ldr	r1, [pc, #28]	; (8008c68 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f003 fc23 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	3330      	adds	r3, #48	; 0x30
 8008c54:	4904      	ldr	r1, [pc, #16]	; (8008c68 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8008c56:	4618      	mov	r0, r3
 8008c58:	f003 fc1d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	0802398c 	.word	0x0802398c

08008c6c <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8008c6c:	b590      	push	{r4, r7, lr}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f007 f936 	bl	800fee8 <_ZN10TestOutputC1Ev>
 8008c7c:	4a09      	ldr	r2, [pc, #36]	; (8008ca4 <_ZN15JUnitTestOutputC1Ev+0x38>)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	224d      	movs	r2, #77	; 0x4d
 8008c84:	4908      	ldr	r1, [pc, #32]	; (8008ca8 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 8008c86:	2038      	movs	r0, #56	; 0x38
 8008c88:	f001 f842 	bl	8009d10 <_ZnwjPKci>
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f7ff ffd0 	bl	8008c34 <_ZN19JUnitTestOutputImplC1Ev>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	611c      	str	r4, [r3, #16]
{
}
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd90      	pop	{r4, r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	08027978 	.word	0x08027978
 8008ca8:	08023990 	.word	0x08023990

08008cac <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3330      	adds	r3, #48	; 0x30
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f003 ffa4 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3328      	adds	r3, #40	; 0x28
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f003 ff9f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7ff ffa4 	bl	8008c18 <_ZN20JUnitTestGroupResultD1Ev>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
	...

08008cdc <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8008cdc:	b590      	push	{r4, r7, lr}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	4a0c      	ldr	r2, [pc, #48]	; (8008d18 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f838 	bl	8008d60 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	691c      	ldr	r4, [r3, #16]
 8008cf4:	2c00      	cmp	r4, #0
 8008cf6:	d006      	beq.n	8008d06 <_ZN15JUnitTestOutputD1Ev+0x2a>
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f7ff ffd7 	bl	8008cac <_ZN19JUnitTestOutputImplD1Ev>
 8008cfe:	2138      	movs	r1, #56	; 0x38
 8008d00:	4620      	mov	r0, r4
 8008d02:	f001 f819 	bl	8009d38 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f007 f90b 	bl	800ff24 <_ZN10TestOutputD1Ev>
}
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4618      	mov	r0, r3
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd90      	pop	{r4, r7, pc}
 8008d18:	08027978 	.word	0x08027978

08008d1c <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
}
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff ffd9 	bl	8008cdc <_ZN15JUnitTestOutputD1Ev>
 8008d2a:	2114      	movs	r1, #20
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 f803 	bl	8009d38 <_ZdlPvj>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4618      	mov	r0, r3
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3314      	adds	r3, #20
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f003 ff5c 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f003 ff58 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8008d60:	b590      	push	{r4, r7, lr}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	2200      	movs	r2, #0
 8008d76:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	f103 0414 	add.w	r4, r3, #20
 8008d80:	f107 0308 	add.w	r3, r7, #8
 8008d84:	491d      	ldr	r1, [pc, #116]	; (8008dfc <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 8008d86:	4618      	mov	r0, r3
 8008d88:	f003 fb85 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8008d8c:	f107 0308 	add.w	r3, r7, #8
 8008d90:	4619      	mov	r1, r3
 8008d92:	4620      	mov	r0, r4
 8008d94:	f003 fbeb 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 8008d98:	f107 0308 	add.w	r3, r7, #8
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f003 ff32 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	69db      	ldr	r3, [r3, #28]
 8008da8:	617b      	str	r3, [r7, #20]
    while (cur) {
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d018      	beq.n	8008de2 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db4:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d004      	beq.n	8008dc8 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	3204      	adds	r2, #4
 8008dc2:	6812      	ldr	r2, [r2, #0]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	4790      	blx	r2
        delete cur;
 8008dc8:	697c      	ldr	r4, [r7, #20]
 8008dca:	2c00      	cmp	r4, #0
 8008dcc:	d006      	beq.n	8008ddc <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f7ff ffb4 	bl	8008d3c <_ZN23JUnitTestCaseResultNodeD1Ev>
 8008dd4:	2128      	movs	r1, #40	; 0x28
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f000 ffae 	bl	8009d38 <_ZdlPvj>
        cur = tmp;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	617b      	str	r3, [r7, #20]
    while (cur) {
 8008de0:	e7e3      	b.n	8008daa <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	2200      	movs	r2, #0
 8008de8:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	2200      	movs	r2, #0
 8008df0:	621a      	str	r2, [r3, #32]
}
 8008df2:	bf00      	nop
 8008df4:	371c      	adds	r7, #28
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd90      	pop	{r4, r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	0802398c 	.word	0x0802398c

08008e00 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
}
 8008e1e:	bf00      	nop
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8008e2a:	b590      	push	{r4, r7, lr}
 8008e2c:	b083      	sub	sp, #12
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	6a1c      	ldr	r4, [r3, #32]
 8008e3a:	6838      	ldr	r0, [r7, #0]
 8008e3c:	f009 f9c6 	bl	80121cc <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8008e40:	4603      	mov	r3, r0
 8008e42:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	6a1c      	ldr	r4, [r3, #32]
 8008e4a:	6838      	ldr	r0, [r7, #0]
 8008e4c:	f7ff fe8a 	bl	8008b64 <_ZNK10TestResult13getCheckCountEv>
 8008e50:	4603      	mov	r3, r0
 8008e52:	6223      	str	r3, [r4, #32]
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd90      	pop	{r4, r7, pc}

08008e5c <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
}
 8008e66:	bf00      	nop
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 8008e72:	b590      	push	{r4, r7, lr}
 8008e74:	b083      	sub	sp, #12
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	691c      	ldr	r4, [r3, #16]
 8008e80:	6838      	ldr	r0, [r7, #0]
 8008e82:	f009 f9af 	bl	80121e4 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 8008e86:	4603      	mov	r3, r0
 8008e88:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3364      	adds	r3, #100	; 0x64
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	4798      	blx	r3
    resetTestGroupResult();
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7ff ff62 	bl	8008d60 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd90      	pop	{r4, r7, pc}

08008ea4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8008ea4:	b590      	push	{r4, r7, lr}
 8008ea6:	b089      	sub	sp, #36	; 0x24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	3201      	adds	r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	f103 0414 	add.w	r4, r3, #20
 8008ec0:	f107 0308 	add.w	r3, r7, #8
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f009 fcef 	bl	80128aa <_ZNK10UtestShell8getGroupEv>
 8008ecc:	f107 0308 	add.w	r3, r7, #8
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f003 fb4b 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 8008ed8:	f107 0308 	add.w	r3, r7, #8
 8008edc:	4618      	mov	r0, r3
 8008ede:	f003 fe92 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8008ee2:	4b3c      	ldr	r3, [pc, #240]	; (8008fd4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4798      	blx	r3
 8008ee8:	4602      	mov	r2, r0
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d110      	bne.n	8008f1c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8008efa:	2288      	movs	r2, #136	; 0x88
 8008efc:	4936      	ldr	r1, [pc, #216]	; (8008fd8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8008efe:	2028      	movs	r0, #40	; 0x28
 8008f00:	f000 ff06 	bl	8009d10 <_ZnwjPKci>
 8008f04:	4604      	mov	r4, r0
 8008f06:	4620      	mov	r0, r4
 8008f08:	f7ff fe38 	bl	8008b7c <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8008f10:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	6912      	ldr	r2, [r2, #16]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	61d3      	str	r3, [r2, #28]
 8008f1a:	e013      	b.n	8008f44 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8008f1c:	228b      	movs	r2, #139	; 0x8b
 8008f1e:	492e      	ldr	r1, [pc, #184]	; (8008fd8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8008f20:	2028      	movs	r0, #40	; 0x28
 8008f22:	f000 fef5 	bl	8009d10 <_ZnwjPKci>
 8008f26:	4604      	mov	r4, r0
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f7ff fe27 	bl	8008b7c <_ZN23JUnitTestCaseResultNodeC1Ev>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	6a1a      	ldr	r2, [r3, #32]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f42:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	461c      	mov	r4, r3
 8008f4c:	f107 0310 	add.w	r3, r7, #16
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f009 fc9a 	bl	801288c <_ZNK10UtestShell7getNameEv>
 8008f58:	f107 0310 	add.w	r3, r7, #16
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f003 fb05 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 8008f64:	f107 0310 	add.w	r3, r7, #16
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f003 fe4c 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	6a1b      	ldr	r3, [r3, #32]
 8008f74:	f103 0414 	add.w	r4, r3, #20
 8008f78:	f107 0318 	add.w	r3, r7, #24
 8008f7c:	6839      	ldr	r1, [r7, #0]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f009 fd55 	bl	8012a2e <_ZNK10UtestShell7getFileEv>
 8008f84:	f107 0318 	add.w	r3, r7, #24
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f003 faef 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 8008f90:	f107 0318 	add.w	r3, r7, #24
 8008f94:	4618      	mov	r0, r3
 8008f96:	f003 fe36 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	6a1c      	ldr	r4, [r3, #32]
 8008fa0:	6838      	ldr	r0, [r7, #0]
 8008fa2:	f009 fd53 	bl	8012a4c <_ZNK10UtestShell13getLineNumberEv>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3318      	adds	r3, #24
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6838      	ldr	r0, [r7, #0]
 8008fb4:	4798      	blx	r3
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	f083 0301 	eor.w	r3, r3, #1
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d004      	beq.n	8008fcc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	6a1b      	ldr	r3, [r3, #32]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	741a      	strb	r2, [r3, #16]
    }
}
 8008fcc:	bf00      	nop
 8008fce:	3724      	adds	r7, #36	; 0x24
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd90      	pop	{r4, r7, pc}
 8008fd4:	200000a8 	.word	0x200000a8
 8008fd8:	08023990 	.word	0x08023990

08008fdc <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b08a      	sub	sp, #40	; 0x28
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8008fe8:	f107 0310 	add.w	r3, r7, #16
 8008fec:	4928      	ldr	r1, [pc, #160]	; (8009090 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f003 fa51 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	3328      	adds	r3, #40	; 0x28
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f003 fdf2 	bl	800cbe4 <_ZNK12SimpleString7isEmptyEv>
 8009000:	4603      	mov	r3, r0
 8009002:	f083 0301 	eor.w	r3, r3, #1
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00f      	beq.n	800902c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009014:	f107 0310 	add.w	r3, r7, #16
 8009018:	4611      	mov	r1, r2
 800901a:	4618      	mov	r0, r3
 800901c:	f003 fe70 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 8009020:	f107 0310 	add.w	r3, r7, #16
 8009024:	491b      	ldr	r1, [pc, #108]	; (8009094 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 8009026:	4618      	mov	r0, r3
 8009028:	f003 fe7c 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 800902c:	f107 0310 	add.w	r3, r7, #16
 8009030:	6879      	ldr	r1, [r7, #4]
 8009032:	4618      	mov	r0, r3
 8009034:	f003 fe64 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3384      	adds	r3, #132	; 0x84
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f107 0018 	add.w	r0, r7, #24
 8009044:	f107 0210 	add.w	r2, r7, #16
 8009048:	68b9      	ldr	r1, [r7, #8]
 800904a:	4798      	blx	r3
 800904c:	f107 0320 	add.w	r3, r7, #32
 8009050:	4911      	ldr	r1, [pc, #68]	; (8009098 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 8009052:	4618      	mov	r0, r3
 8009054:	f003 fa1f 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f107 0220 	add.w	r2, r7, #32
 800905e:	f107 0118 	add.w	r1, r7, #24
 8009062:	4618      	mov	r0, r3
 8009064:	f003 fe31 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 8009068:	f107 0320 	add.w	r3, r7, #32
 800906c:	4618      	mov	r0, r3
 800906e:	f003 fdca 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8009072:	f107 0318 	add.w	r3, r7, #24
 8009076:	4618      	mov	r0, r3
 8009078:	f003 fdc5 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 800907c:	f107 0310 	add.w	r3, r7, #16
 8009080:	4618      	mov	r0, r3
 8009082:	f003 fdc0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 8009086:	bf00      	nop
}
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	3728      	adds	r7, #40	; 0x28
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	080239ac 	.word	0x080239ac
 8009094:	080239b8 	.word	0x080239b8
 8009098:	080239bc 	.word	0x080239bc

0800909c <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f003 fa47 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 80090b0:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 80090b2:	617b      	str	r3, [r7, #20]
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00a      	beq.n	80090d2 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	225f      	movs	r2, #95	; 0x5f
 80090c2:	4619      	mov	r1, r3
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f003 fbcc 	bl	800c862 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	3301      	adds	r3, #1
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	e7f0      	b.n	80090b4 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 80090d2:	bf00      	nop
}
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	080239c4 	.word	0x080239c4

080090e0 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d006      	beq.n	8009100 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	3328      	adds	r3, #40	; 0x28
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f003 fa37 	bl	800c56e <_ZN12SimpleStringaSERKS_>
    }
}
 8009100:	bf00      	nop
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8009108:	b590      	push	{r4, r7, lr}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	3368      	adds	r3, #104	; 0x68
 8009116:	681c      	ldr	r4, [r3, #0]
 8009118:	f107 0308 	add.w	r3, r7, #8
 800911c:	4908      	ldr	r1, [pc, #32]	; (8009140 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 800911e:	4618      	mov	r0, r3
 8009120:	f003 f9b9 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8009124:	f107 0308 	add.w	r3, r7, #8
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	47a0      	blx	r4
 800912e:	f107 0308 	add.w	r3, r7, #8
 8009132:	4618      	mov	r0, r3
 8009134:	f003 fd67 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 8009138:	bf00      	nop
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	bd90      	pop	{r4, r7, pc}
 8009140:	080239d0 	.word	0x080239d0

08009144 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8009144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009148:	b08a      	sub	sp, #40	; 0x28
 800914a:	af04      	add	r7, sp, #16
 800914c:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8009154:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 800915a:	3314      	adds	r3, #20
 800915c:	4618      	mov	r0, r3
 800915e:	f003 fd25 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 8009162:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 800916a:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	4a23      	ldr	r2, [pc, #140]	; (8009200 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8009174:	fba2 2303 	umull	r2, r3, r2, r3
 8009178:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 800917a:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	691a      	ldr	r2, [r3, #16]
 8009182:	4b1f      	ldr	r3, [pc, #124]	; (8009200 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8009184:	fba3 1302 	umull	r1, r3, r3, r2
 8009188:	099b      	lsrs	r3, r3, #6
 800918a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800918e:	fb01 f303 	mul.w	r3, r1, r3
 8009192:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8009194:	603b      	str	r3, [r7, #0]
 8009196:	4b1b      	ldr	r3, [pc, #108]	; (8009204 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4798      	blx	r3
 800919c:	4603      	mov	r3, r0
 800919e:	f107 0008 	add.w	r0, r7, #8
 80091a2:	9303      	str	r3, [sp, #12]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	9302      	str	r3, [sp, #8]
 80091a8:	9601      	str	r6, [sp, #4]
 80091aa:	9500      	str	r5, [sp, #0]
 80091ac:	4623      	mov	r3, r4
 80091ae:	4642      	mov	r2, r8
 80091b0:	4915      	ldr	r1, [pc, #84]	; (8009208 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 80091b2:	f004 fa2f 	bl	800d614 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3368      	adds	r3, #104	; 0x68
 80091bc:	681c      	ldr	r4, [r3, #0]
 80091be:	f107 0308 	add.w	r3, r7, #8
 80091c2:	4618      	mov	r0, r3
 80091c4:	f003 fcf2 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 80091c8:	4602      	mov	r2, r0
 80091ca:	f107 0310 	add.w	r3, r7, #16
 80091ce:	4611      	mov	r1, r2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f003 f960 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80091d6:	f107 0310 	add.w	r3, r7, #16
 80091da:	4619      	mov	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	47a0      	blx	r4
 80091e0:	f107 0310 	add.w	r3, r7, #16
 80091e4:	4618      	mov	r0, r3
 80091e6:	f003 fd0e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 80091ea:	f107 0308 	add.w	r3, r7, #8
 80091ee:	4618      	mov	r0, r3
 80091f0:	f003 fd09 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 80091f4:	bf00      	nop
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091fe:	bf00      	nop
 8009200:	10624dd3 	.word	0x10624dd3
 8009204:	200000ac 	.word	0x200000ac
 8009208:	080239fc 	.word	0x080239fc

0800920c <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 800920c:	b590      	push	{r4, r7, lr}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3368      	adds	r3, #104	; 0x68
 800921a:	681c      	ldr	r4, [r3, #0]
 800921c:	f107 0308 	add.w	r3, r7, #8
 8009220:	4912      	ldr	r1, [pc, #72]	; (800926c <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 8009222:	4618      	mov	r0, r3
 8009224:	f003 f937 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8009228:	f107 0308 	add.w	r3, r7, #8
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	47a0      	blx	r4
 8009232:	f107 0308 	add.w	r3, r7, #8
 8009236:	4618      	mov	r0, r3
 8009238:	f003 fce5 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3368      	adds	r3, #104	; 0x68
 8009242:	681c      	ldr	r4, [r3, #0]
 8009244:	f107 0310 	add.w	r3, r7, #16
 8009248:	4909      	ldr	r1, [pc, #36]	; (8009270 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 800924a:	4618      	mov	r0, r3
 800924c:	f003 f923 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8009250:	f107 0310 	add.w	r3, r7, #16
 8009254:	4619      	mov	r1, r3
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	47a0      	blx	r4
 800925a:	f107 0310 	add.w	r3, r7, #16
 800925e:	4618      	mov	r0, r3
 8009260:	f003 fcd1 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 8009264:	bf00      	nop
 8009266:	371c      	adds	r7, #28
 8009268:	46bd      	mov	sp, r7
 800926a:	bd90      	pop	{r4, r7, pc}
 800926c:	08023a6c 	.word	0x08023a6c
 8009270:	08023a7c 	.word	0x08023a7c

08009274 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f003 fc93 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 8009286:	4603      	mov	r3, r0
 8009288:	4619      	mov	r1, r3
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f003 f903 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8009290:	4a0e      	ldr	r2, [pc, #56]	; (80092cc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8009292:	490f      	ldr	r1, [pc, #60]	; (80092d0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f003 fb13 	bl	800c8c0 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 800929a:	4a0e      	ldr	r2, [pc, #56]	; (80092d4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 800929c:	490e      	ldr	r1, [pc, #56]	; (80092d8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f003 fb0e 	bl	800c8c0 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 80092a4:	4a0d      	ldr	r2, [pc, #52]	; (80092dc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 80092a6:	490e      	ldr	r1, [pc, #56]	; (80092e0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f003 fb09 	bl	800c8c0 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 80092ae:	4a0d      	ldr	r2, [pc, #52]	; (80092e4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 80092b0:	490d      	ldr	r1, [pc, #52]	; (80092e8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f003 fb04 	bl	800c8c0 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 80092b8:	4a0c      	ldr	r2, [pc, #48]	; (80092ec <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 80092ba:	490d      	ldr	r1, [pc, #52]	; (80092f0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f003 faff 	bl	800c8c0 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 80092c2:	bf00      	nop
}
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	08023a8c 	.word	0x08023a8c
 80092d0:	08023a94 	.word	0x08023a94
 80092d4:	08023a98 	.word	0x08023a98
 80092d8:	08023aa0 	.word	0x08023aa0
 80092dc:	08023aa4 	.word	0x08023aa4
 80092e0:	08023aac 	.word	0x08023aac
 80092e4:	08023ab0 	.word	0x08023ab0
 80092e8:	08023ab8 	.word	0x08023ab8
 80092ec:	08023abc 	.word	0x08023abc
 80092f0:	08023ac8 	.word	0x08023ac8

080092f4 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 80092f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f8:	b096      	sub	sp, #88	; 0x58
 80092fa:	af08      	add	r7, sp, #32
 80092fc:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 8009306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 80b2 	beq.w	8009472 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8009312:	3328      	adds	r3, #40	; 0x28
 8009314:	4618      	mov	r0, r3
 8009316:	f003 fc49 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800931a:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	3328      	adds	r3, #40	; 0x28
 8009322:	4618      	mov	r0, r3
 8009324:	f003 fc5e 	bl	800cbe4 <_ZNK12SimpleString7isEmptyEv>
 8009328:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 800932e:	4c53      	ldr	r4, [pc, #332]	; (800947c <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8009330:	e000      	b.n	8009334 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8009332:	4c53      	ldr	r4, [pc, #332]	; (8009480 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8009338:	3314      	adds	r3, #20
 800933a:	4618      	mov	r0, r3
 800933c:	f003 fc36 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 8009340:	4605      	mov	r5, r0
 8009342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009344:	4618      	mov	r0, r3
 8009346:	f003 fc31 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800934a:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 800934c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934e:	6a1a      	ldr	r2, [r3, #32]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8009358:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800935a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	4a49      	ldr	r2, [pc, #292]	; (8009484 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8009360:	fba2 2303 	umull	r2, r3, r2, r3
 8009364:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8009366:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8009368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800936a:	689a      	ldr	r2, [r3, #8]
 800936c:	4b45      	ldr	r3, [pc, #276]	; (8009484 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800936e:	fba3 1302 	umull	r1, r3, r3, r2
 8009372:	099b      	lsrs	r3, r3, #6
 8009374:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009378:	fb01 f303 	mul.w	r3, r1, r3
 800937c:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800937e:	603b      	str	r3, [r7, #0]
 8009380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009382:	3314      	adds	r3, #20
 8009384:	4618      	mov	r0, r3
 8009386:	f003 fc11 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800938a:	4602      	mov	r2, r0
 800938c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938e:	69db      	ldr	r3, [r3, #28]
 8009390:	f107 0014 	add.w	r0, r7, #20
 8009394:	9306      	str	r3, [sp, #24]
 8009396:	9205      	str	r2, [sp, #20]
 8009398:	683a      	ldr	r2, [r7, #0]
 800939a:	9204      	str	r2, [sp, #16]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	9203      	str	r2, [sp, #12]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	9302      	str	r3, [sp, #8]
 80093a4:	9601      	str	r6, [sp, #4]
 80093a6:	9500      	str	r5, [sp, #0]
 80093a8:	4623      	mov	r3, r4
 80093aa:	4642      	mov	r2, r8
 80093ac:	4936      	ldr	r1, [pc, #216]	; (8009488 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 80093ae:	f004 f931 	bl	800d614 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3368      	adds	r3, #104	; 0x68
 80093b8:	681c      	ldr	r4, [r3, #0]
 80093ba:	f107 0314 	add.w	r3, r7, #20
 80093be:	4618      	mov	r0, r3
 80093c0:	f003 fbf4 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 80093c4:	4602      	mov	r2, r0
 80093c6:	f107 031c 	add.w	r3, r7, #28
 80093ca:	4611      	mov	r1, r2
 80093cc:	4618      	mov	r0, r3
 80093ce:	f003 f862 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80093d2:	f107 031c 	add.w	r3, r7, #28
 80093d6:	4619      	mov	r1, r3
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	47a0      	blx	r4
 80093dc:	f107 031c 	add.w	r3, r7, #28
 80093e0:	4618      	mov	r0, r3
 80093e2:	f003 fc10 	bl	800cc06 <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093ec:	6a12      	ldr	r2, [r2, #32]
 80093ee:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 80093f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d007      	beq.n	8009408 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3388      	adds	r3, #136	; 0x88
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	4798      	blx	r3
 8009406:	e017      	b.n	8009438 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8009408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940a:	7c1b      	ldrb	r3, [r3, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d013      	beq.n	8009438 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	3368      	adds	r3, #104	; 0x68
 8009416:	681c      	ldr	r4, [r3, #0]
 8009418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800941c:	491b      	ldr	r1, [pc, #108]	; (800948c <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 800941e:	4618      	mov	r0, r3
 8009420:	f003 f839 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8009424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009428:	4619      	mov	r1, r3
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	47a0      	blx	r4
 800942e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009432:	4618      	mov	r0, r3
 8009434:	f003 fbe7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3368      	adds	r3, #104	; 0x68
 800943e:	681c      	ldr	r4, [r3, #0]
 8009440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009444:	4912      	ldr	r1, [pc, #72]	; (8009490 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 8009446:	4618      	mov	r0, r3
 8009448:	f003 f825 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800944c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009450:	4619      	mov	r1, r3
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	47a0      	blx	r4
 8009456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800945a:	4618      	mov	r0, r3
 800945c:	f003 fbd3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8009460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009464:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 8009466:	f107 0314 	add.w	r3, r7, #20
 800946a:	4618      	mov	r0, r3
 800946c:	f003 fbcb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    while (cur) {
 8009470:	e749      	b.n	8009306 <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8009472:	bf00      	nop
 8009474:	3738      	adds	r7, #56	; 0x38
 8009476:	46bd      	mov	sp, r7
 8009478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800947c:	0802398c 	.word	0x0802398c
 8009480:	08023acc 	.word	0x08023acc
 8009484:	10624dd3 	.word	0x10624dd3
 8009488:	08023ad0 	.word	0x08023ad0
 800948c:	08023b2c 	.word	0x08023b2c
 8009490:	08023b3c 	.word	0x08023b3c

08009494 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8009494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009496:	b091      	sub	sp, #68	; 0x44
 8009498:	af02      	add	r7, sp, #8
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	68d9      	ldr	r1, [r3, #12]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3308      	adds	r3, #8
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f107 0210 	add.w	r2, r7, #16
 80094b0:	4610      	mov	r0, r2
 80094b2:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80094b4:	f107 0310 	add.w	r3, r7, #16
 80094b8:	4618      	mov	r0, r3
 80094ba:	f003 fb77 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 80094be:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	68da      	ldr	r2, [r3, #12]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3314      	adds	r3, #20
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4610      	mov	r0, r2
 80094d0:	4798      	blx	r3
 80094d2:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80094d4:	461e      	mov	r6, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3380      	adds	r3, #128	; 0x80
 80094dc:	681c      	ldr	r4, [r3, #0]
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	68d9      	ldr	r1, [r3, #12]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3318      	adds	r3, #24
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f107 0220 	add.w	r2, r7, #32
 80094f0:	4610      	mov	r0, r2
 80094f2:	4798      	blx	r3
 80094f4:	f107 0318 	add.w	r3, r7, #24
 80094f8:	f107 0220 	add.w	r2, r7, #32
 80094fc:	6879      	ldr	r1, [r7, #4]
 80094fe:	4618      	mov	r0, r3
 8009500:	47a0      	blx	r4
 8009502:	f107 0318 	add.w	r3, r7, #24
 8009506:	4618      	mov	r0, r3
 8009508:	f003 fb50 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800950c:	4603      	mov	r3, r0
 800950e:	f107 0008 	add.w	r0, r7, #8
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	4633      	mov	r3, r6
 8009516:	462a      	mov	r2, r5
 8009518:	4924      	ldr	r1, [pc, #144]	; (80095ac <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 800951a:	f004 f87b 	bl	800d614 <_Z16StringFromFormatPKcz>
 800951e:	f107 0318 	add.w	r3, r7, #24
 8009522:	4618      	mov	r0, r3
 8009524:	f003 fb6f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8009528:	f107 0320 	add.w	r3, r7, #32
 800952c:	4618      	mov	r0, r3
 800952e:	f003 fb6a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 8009532:	f107 0310 	add.w	r3, r7, #16
 8009536:	4618      	mov	r0, r3
 8009538:	f003 fb65 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3368      	adds	r3, #104	; 0x68
 8009542:	681c      	ldr	r4, [r3, #0]
 8009544:	f107 0308 	add.w	r3, r7, #8
 8009548:	4618      	mov	r0, r3
 800954a:	f003 fb2f 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800954e:	4602      	mov	r2, r0
 8009550:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009554:	4611      	mov	r1, r2
 8009556:	4618      	mov	r0, r3
 8009558:	f002 ff9d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800955c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	47a0      	blx	r4
 8009566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800956a:	4618      	mov	r0, r3
 800956c:	f003 fb4b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3368      	adds	r3, #104	; 0x68
 8009576:	681c      	ldr	r4, [r3, #0]
 8009578:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800957c:	490c      	ldr	r1, [pc, #48]	; (80095b0 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 800957e:	4618      	mov	r0, r3
 8009580:	f002 ff89 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8009584:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	47a0      	blx	r4
 800958e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009592:	4618      	mov	r0, r3
 8009594:	f003 fb37 	bl	800cc06 <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009598:	f107 0308 	add.w	r3, r7, #8
 800959c:	4618      	mov	r0, r3
 800959e:	f003 fb32 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 80095a2:	bf00      	nop
 80095a4:	373c      	adds	r7, #60	; 0x3c
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095aa:	bf00      	nop
 80095ac:	08023b4c 	.word	0x08023b4c
 80095b0:	08023b88 	.word	0x08023b88

080095b4 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 80095b4:	b590      	push	{r4, r7, lr}
 80095b6:	b08d      	sub	sp, #52	; 0x34
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3368      	adds	r3, #104	; 0x68
 80095c2:	681c      	ldr	r4, [r3, #0]
 80095c4:	f107 0308 	add.w	r3, r7, #8
 80095c8:	4933      	ldr	r1, [pc, #204]	; (8009698 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 80095ca:	4618      	mov	r0, r3
 80095cc:	f002 ff63 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80095d0:	f107 0308 	add.w	r3, r7, #8
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	47a0      	blx	r4
 80095da:	f107 0308 	add.w	r3, r7, #8
 80095de:	4618      	mov	r0, r3
 80095e0:	f003 fb11 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3368      	adds	r3, #104	; 0x68
 80095ea:	681c      	ldr	r4, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3380      	adds	r3, #128	; 0x80
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	6912      	ldr	r2, [r2, #16]
 80095f8:	3230      	adds	r2, #48	; 0x30
 80095fa:	f107 0010 	add.w	r0, r7, #16
 80095fe:	6879      	ldr	r1, [r7, #4]
 8009600:	4798      	blx	r3
 8009602:	f107 0310 	add.w	r3, r7, #16
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	47a0      	blx	r4
 800960c:	f107 0310 	add.w	r3, r7, #16
 8009610:	4618      	mov	r0, r3
 8009612:	f003 faf8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3368      	adds	r3, #104	; 0x68
 800961c:	681c      	ldr	r4, [r3, #0]
 800961e:	f107 0318 	add.w	r3, r7, #24
 8009622:	491e      	ldr	r1, [pc, #120]	; (800969c <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8009624:	4618      	mov	r0, r3
 8009626:	f002 ff36 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800962a:	f107 0318 	add.w	r3, r7, #24
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	47a0      	blx	r4
 8009634:	f107 0318 	add.w	r3, r7, #24
 8009638:	4618      	mov	r0, r3
 800963a:	f003 fae4 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3368      	adds	r3, #104	; 0x68
 8009644:	681c      	ldr	r4, [r3, #0]
 8009646:	f107 0320 	add.w	r3, r7, #32
 800964a:	4915      	ldr	r1, [pc, #84]	; (80096a0 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 800964c:	4618      	mov	r0, r3
 800964e:	f002 ff22 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8009652:	f107 0320 	add.w	r3, r7, #32
 8009656:	4619      	mov	r1, r3
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	47a0      	blx	r4
 800965c:	f107 0320 	add.w	r3, r7, #32
 8009660:	4618      	mov	r0, r3
 8009662:	f003 fad0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3368      	adds	r3, #104	; 0x68
 800966c:	681c      	ldr	r4, [r3, #0]
 800966e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009672:	490c      	ldr	r1, [pc, #48]	; (80096a4 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8009674:	4618      	mov	r0, r3
 8009676:	f002 ff0e 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800967a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	47a0      	blx	r4
 8009684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009688:	4618      	mov	r0, r3
 800968a:	f003 fabc 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 800968e:	bf00      	nop
 8009690:	3734      	adds	r7, #52	; 0x34
 8009692:	46bd      	mov	sp, r7
 8009694:	bd90      	pop	{r4, r7, pc}
 8009696:	bf00      	nop
 8009698:	08023b94 	.word	0x08023b94
 800969c:	08023ba4 	.word	0x08023ba4
 80096a0:	08023bb4 	.word	0x08023bb4
 80096a4:	08023bd0 	.word	0x08023bd0

080096a8 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 80096a8:	b590      	push	{r4, r7, lr}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3360      	adds	r3, #96	; 0x60
 80096b6:	681c      	ldr	r4, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	335c      	adds	r3, #92	; 0x5c
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	6912      	ldr	r2, [r2, #16]
 80096c4:	3214      	adds	r2, #20
 80096c6:	f107 0008 	add.w	r0, r7, #8
 80096ca:	6879      	ldr	r1, [r7, #4]
 80096cc:	4798      	blx	r3
 80096ce:	f107 0308 	add.w	r3, r7, #8
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	47a0      	blx	r4
 80096d8:	f107 0308 	add.w	r3, r7, #8
 80096dc:	4618      	mov	r0, r3
 80096de:	f003 fa92 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	3370      	adds	r3, #112	; 0x70
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	4798      	blx	r3
    writeTestSuiteSummary();
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3374      	adds	r3, #116	; 0x74
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	4798      	blx	r3
    writeProperties();
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3378      	adds	r3, #120	; 0x78
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	4798      	blx	r3
    writeTestCases();
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	337c      	adds	r3, #124	; 0x7c
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	4798      	blx	r3
    writeFileEnding();
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	338c      	adds	r3, #140	; 0x8c
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	4798      	blx	r3
    closeFile();
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	336c      	adds	r3, #108	; 0x6c
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	4798      	blx	r3
}
 800972a:	bf00      	nop
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	bd90      	pop	{r4, r7, pc}

08009732 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 8009732:	b480      	push	{r7}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	3330      	adds	r3, #48	; 0x30
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	4618      	mov	r0, r3
 800975c:	f003 fae2 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
}
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
}
 8009772:	bf00      	nop
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 800977e:	b480      	push	{r7}
 8009780:	b083      	sub	sp, #12
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	6039      	str	r1, [r7, #0]
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 80097a8:	b590      	push	{r4, r7, lr}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	6a1b      	ldr	r3, [r3, #32]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d113      	bne.n	80097e6 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	685a      	ldr	r2, [r3, #4]
 80097c4:	3201      	adds	r2, #1
 80097c6:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 80097c8:	f240 1233 	movw	r2, #307	; 0x133
 80097cc:	4908      	ldr	r1, [pc, #32]	; (80097f0 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 80097ce:	2034      	movs	r0, #52	; 0x34
 80097d0:	f000 fa9e 	bl	8009d10 <_ZnwjPKci>
 80097d4:	4604      	mov	r4, r0
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	4620      	mov	r0, r4
 80097da:	f004 fd37 	bl	800e24c <_ZN11TestFailureC1ERKS_>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	6a1b      	ldr	r3, [r3, #32]
 80097e4:	60dc      	str	r4, [r3, #12]
    }
}
 80097e6:	bf00      	nop
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd90      	pop	{r4, r7, pc}
 80097ee:	bf00      	nop
 80097f0:	08023990 	.word	0x08023990

080097f4 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 80097f4:	b5b0      	push	{r4, r5, r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 80097fe:	4b08      	ldr	r3, [pc, #32]	; (8009820 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8009800:	681d      	ldr	r5, [r3, #0]
 8009802:	6838      	ldr	r0, [r7, #0]
 8009804:	f003 f9d2 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 8009808:	4602      	mov	r2, r0
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	691c      	ldr	r4, [r3, #16]
 800980e:	4905      	ldr	r1, [pc, #20]	; (8009824 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 8009810:	4610      	mov	r0, r2
 8009812:	47a8      	blx	r5
 8009814:	4603      	mov	r3, r0
 8009816:	6263      	str	r3, [r4, #36]	; 0x24
}
 8009818:	bf00      	nop
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bdb0      	pop	{r4, r5, r7, pc}
 8009820:	200000b4 	.word	0x200000b4
 8009824:	08023be0 	.word	0x08023be0

08009828 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 8009828:	b590      	push	{r4, r7, lr}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 8009832:	4b08      	ldr	r3, [pc, #32]	; (8009854 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 8009834:	681c      	ldr	r4, [r3, #0]
 8009836:	6838      	ldr	r0, [r7, #0]
 8009838:	f003 f9b8 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800983c:	4602      	mov	r2, r0
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009844:	4619      	mov	r1, r3
 8009846:	4610      	mov	r0, r2
 8009848:	47a0      	blx	r4
}
 800984a:	bf00      	nop
 800984c:	370c      	adds	r7, #12
 800984e:	46bd      	mov	sp, r7
 8009850:	bd90      	pop	{r4, r7, pc}
 8009852:	bf00      	nop
 8009854:	200000b8 	.word	0x200000b8

08009858 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8009860:	4b05      	ldr	r3, [pc, #20]	; (8009878 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	6912      	ldr	r2, [r2, #16]
 8009868:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800986a:	4610      	mov	r0, r2
 800986c:	4798      	blx	r3
}
 800986e:	bf00      	nop
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	200000bc 	.word	0x200000bc

0800987c <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
        return false;
 800988a:	2300      	movs	r3, #0
    }
 800988c:	4618      	mov	r0, r3
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
    {
 80098a0:	4a04      	ldr	r2, [pc, #16]	; (80098b4 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	601a      	str	r2, [r3, #0]
    }
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4618      	mov	r0, r3
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	08027a24 	.word	0x08027a24

080098b8 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
    }
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff ffe9 	bl	8009898 <_ZN17MemoryLeakFailureD1Ev>
 80098c6:	2104      	movs	r1, #4
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fa35 	bl	8009d38 <_ZdlPvj>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4618      	mov	r0, r3
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 80098d8:	b590      	push	{r4, r7, lr}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	687c      	ldr	r4, [r7, #4]
 80098e2:	f000 fc71 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80098e6:	4603      	mov	r3, r0
 80098e8:	4618      	mov	r0, r3
 80098ea:	f00c ff6c 	bl	80167c6 <_ZN18MemoryLeakDetector8getMutexEv>
 80098ee:	4603      	mov	r3, r0
 80098f0:	4619      	mov	r1, r3
 80098f2:	4620      	mov	r0, r4
 80098f4:	f002 fb24 	bl	800bf40 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4618      	mov	r0, r3
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd90      	pop	{r4, r7, pc}

08009902 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 8009902:	b580      	push	{r7, lr}
 8009904:	b082      	sub	sp, #8
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4618      	mov	r0, r3
 800990e:	f002 fb29 	bl	800bf64 <_ZN15ScopedMutexLockD1Ev>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4618      	mov	r0, r3
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 800991c:	b590      	push	{r4, r7, lr}
 800991e:	b087      	sub	sp, #28
 8009920:	af02      	add	r7, sp, #8
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 8009928:	f000 fc4e 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800992c:	4604      	mov	r4, r0
 800992e:	f006 f8df 	bl	800faf0 <_Z25getCurrentMallocAllocatorv>
 8009932:	4601      	mov	r1, r0
 8009934:	2301      	movs	r3, #1
 8009936:	9301      	str	r3, [sp, #4]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	4620      	mov	r0, r4
 8009942:	f00d f983 	bl	8016c4c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8009946:	4603      	mov	r3, r0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	bd90      	pop	{r4, r7, pc}

08009950 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 8009950:	b590      	push	{r4, r7, lr}
 8009952:	b087      	sub	sp, #28
 8009954:	af02      	add	r7, sp, #8
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 800995c:	f000 fc34 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009960:	4603      	mov	r3, r0
 8009962:	68f9      	ldr	r1, [r7, #12]
 8009964:	4618      	mov	r0, r3
 8009966:	f00c ffdd 	bl	8016924 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 800996a:	f000 fc2d 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800996e:	4604      	mov	r4, r0
 8009970:	f006 f8be 	bl	800faf0 <_Z25getCurrentMallocAllocatorv>
 8009974:	4601      	mov	r1, r0
 8009976:	2301      	movs	r3, #1
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	4620      	mov	r0, r4
 8009984:	f00d f996 	bl	8016cb4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8009988:	bf00      	nop
 800998a:	3714      	adds	r7, #20
 800998c:	46bd      	mov	sp, r7
 800998e:	bd90      	pop	{r4, r7, pc}

08009990 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8009990:	b590      	push	{r4, r7, lr}
 8009992:	b089      	sub	sp, #36	; 0x24
 8009994:	af04      	add	r7, sp, #16
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
 800999c:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 800999e:	f000 fc13 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80099a2:	4604      	mov	r4, r0
 80099a4:	f006 f8a4 	bl	800faf0 <_Z25getCurrentMallocAllocatorv>
 80099a8:	4601      	mov	r1, r0
 80099aa:	2301      	movs	r3, #1
 80099ac:	9302      	str	r3, [sp, #8]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	9301      	str	r3, [sp, #4]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	4620      	mov	r0, r4
 80099bc:	f00d f9de 	bl	8016d7c <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 80099c0:	4603      	mov	r3, r0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd90      	pop	{r4, r7, pc}
	...

080099cc <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 80099d8:	4b04      	ldr	r3, [pc, #16]	; (80099ec <_ZL13normal_mallocjPKcj+0x20>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	4798      	blx	r3
 80099e0:	4603      	mov	r3, r0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	200000c8 	.word	0x200000c8

080099f0 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
 80099fc:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 80099fe:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <_ZL14normal_reallocPvjPKcj+0x24>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68b9      	ldr	r1, [r7, #8]
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	4798      	blx	r3
 8009a08:	4603      	mov	r3, r0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	200000cc 	.word	0x200000cc

08009a18 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 8009a24:	4b03      	ldr	r3, [pc, #12]	; (8009a34 <_ZL11normal_freePvPKcj+0x1c>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	4798      	blx	r3
}
 8009a2c:	bf00      	nop
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	200000d0 	.word	0x200000d0

08009a38 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8009a38:	b590      	push	{r4, r7, lr}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8009a40:	f107 0308 	add.w	r3, r7, #8
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7ff ff47 	bl	80098d8 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8009a4a:	f000 fbbd 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009a4e:	4604      	mov	r4, r0
 8009a50:	f005 ff9e 	bl	800f990 <_Z22getCurrentNewAllocatorv>
 8009a54:	4601      	mov	r1, r0
 8009a56:	2300      	movs	r3, #0
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f00d f864 	bl	8016b28 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009a60:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009a62:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 8009a64:	f107 0308 	add.w	r3, r7, #8
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7ff ff4a 	bl	8009902 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8009a6e:	4623      	mov	r3, r4
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd90      	pop	{r4, r7, pc}

08009a78 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8009a78:	b590      	push	{r4, r7, lr}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8009a80:	f000 fba2 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009a84:	4604      	mov	r4, r0
 8009a86:	f005 ff83 	bl	800f990 <_Z22getCurrentNewAllocatorv>
 8009a8a:	4601      	mov	r1, r0
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	4620      	mov	r0, r4
 8009a92:	f00d f849 	bl	8016b28 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009a96:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009a98:	68fb      	ldr	r3, [r7, #12]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3714      	adds	r7, #20
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd90      	pop	{r4, r7, pc}

08009aa2 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8009aa2:	b590      	push	{r4, r7, lr}
 8009aa4:	b083      	sub	sp, #12
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8009aaa:	f000 fb8d 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009aae:	4604      	mov	r4, r0
 8009ab0:	f005 ff6e 	bl	800f990 <_Z22getCurrentNewAllocatorv>
 8009ab4:	4601      	mov	r1, r0
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	4620      	mov	r0, r4
 8009abc:	f00d f834 	bl	8016b28 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009ac0:	4603      	mov	r3, r0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd90      	pop	{r4, r7, pc}

08009aca <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8009aca:	b590      	push	{r4, r7, lr}
 8009acc:	b089      	sub	sp, #36	; 0x24
 8009ace:	af02      	add	r7, sp, #8
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 8009ad6:	f000 fb77 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009ada:	4604      	mov	r4, r0
 8009adc:	f005 ff58 	bl	800f990 <_Z22getCurrentNewAllocatorv>
 8009ae0:	4601      	mov	r1, r0
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	9301      	str	r3, [sp, #4]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	4620      	mov	r0, r4
 8009af0:	f00d f8ac 	bl	8016c4c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8009af4:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009af6:	697b      	ldr	r3, [r7, #20]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	371c      	adds	r7, #28
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd90      	pop	{r4, r7, pc}

08009b00 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8009b00:	b590      	push	{r4, r7, lr}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8009b08:	f000 fb5e 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	f005 ff97 	bl	800fa40 <_Z27getCurrentNewArrayAllocatorv>
 8009b12:	4601      	mov	r1, r0
 8009b14:	2300      	movs	r3, #0
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f00d f805 	bl	8016b28 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009b1e:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009b20:	68fb      	ldr	r3, [r7, #12]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd90      	pop	{r4, r7, pc}

08009b2a <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8009b2a:	b590      	push	{r4, r7, lr}
 8009b2c:	b083      	sub	sp, #12
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8009b32:	f000 fb49 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009b36:	4604      	mov	r4, r0
 8009b38:	f005 ff82 	bl	800fa40 <_Z27getCurrentNewArrayAllocatorv>
 8009b3c:	4601      	mov	r1, r0
 8009b3e:	2300      	movs	r3, #0
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	4620      	mov	r0, r4
 8009b44:	f00c fff0 	bl	8016b28 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009b48:	4603      	mov	r3, r0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	370c      	adds	r7, #12
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd90      	pop	{r4, r7, pc}

08009b52 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8009b52:	b590      	push	{r4, r7, lr}
 8009b54:	b089      	sub	sp, #36	; 0x24
 8009b56:	af02      	add	r7, sp, #8
 8009b58:	60f8      	str	r0, [r7, #12]
 8009b5a:	60b9      	str	r1, [r7, #8]
 8009b5c:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8009b5e:	f000 fb33 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009b62:	4604      	mov	r4, r0
 8009b64:	f005 ff6c 	bl	800fa40 <_Z27getCurrentNewArrayAllocatorv>
 8009b68:	4601      	mov	r1, r0
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	9301      	str	r3, [sp, #4]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	4620      	mov	r0, r4
 8009b78:	f00d f868 	bl	8016c4c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8009b7c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009b7e:	697b      	ldr	r3, [r7, #20]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	371c      	adds	r7, #28
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd90      	pop	{r4, r7, pc}

08009b88 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 8009b88:	b590      	push	{r4, r7, lr}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8009b90:	f000 fb1a 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009b94:	4603      	mov	r3, r0
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f00c fec3 	bl	8016924 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 8009b9e:	f000 fb13 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	f005 fef4 	bl	800f990 <_Z22getCurrentNewAllocatorv>
 8009ba8:	4601      	mov	r1, r0
 8009baa:	2300      	movs	r3, #0
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f00d f8ca 	bl	8016d48 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd90      	pop	{r4, r7, pc}

08009bbc <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 8009bbc:	b590      	push	{r4, r7, lr}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8009bc4:	f000 fb00 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	6879      	ldr	r1, [r7, #4]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f00c fea9 	bl	8016924 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 8009bd2:	f000 faf9 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	f005 ff32 	bl	800fa40 <_Z27getCurrentNewArrayAllocatorv>
 8009bdc:	4601      	mov	r1, r0
 8009bde:	2300      	movs	r3, #0
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	4620      	mov	r0, r4
 8009be4:	f00d f8b0 	bl	8016d48 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd90      	pop	{r4, r7, pc}

08009bf0 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8009bf8:	4b04      	ldr	r3, [pc, #16]	; (8009c0c <_ZL19normal_operator_newj+0x1c>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	4798      	blx	r3
 8009c00:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009c02:	68fb      	ldr	r3, [r7, #12]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	200000c8 	.word	0x200000c8

08009c10 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8009c18:	4b04      	ldr	r3, [pc, #16]	; (8009c2c <_ZL27normal_operator_new_nothrowj+0x1c>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	4798      	blx	r3
 8009c20:	4603      	mov	r3, r0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	200000c8 	.word	0x200000c8

08009c30 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8009c3c:	4b04      	ldr	r3, [pc, #16]	; (8009c50 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	4798      	blx	r3
 8009c44:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009c46:	697b      	ldr	r3, [r7, #20]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3718      	adds	r7, #24
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	200000c8 	.word	0x200000c8

08009c54 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8009c5c:	4b04      	ldr	r3, [pc, #16]	; (8009c70 <_ZL25normal_operator_new_arrayj+0x1c>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	4798      	blx	r3
 8009c64:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009c66:	68fb      	ldr	r3, [r7, #12]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	200000c8 	.word	0x200000c8

08009c74 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8009c7c:	4b04      	ldr	r3, [pc, #16]	; (8009c90 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	4798      	blx	r3
 8009c84:	4603      	mov	r3, r0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	200000c8 	.word	0x200000c8

08009c94 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8009ca0:	4b04      	ldr	r3, [pc, #16]	; (8009cb4 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	4798      	blx	r3
 8009ca8:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009caa:	697b      	ldr	r3, [r7, #20]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3718      	adds	r7, #24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	200000c8 	.word	0x200000c8

08009cb8 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8009cc0:	4b03      	ldr	r3, [pc, #12]	; (8009cd0 <_ZL22normal_operator_deletePv+0x18>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	4798      	blx	r3
}
 8009cc8:	bf00      	nop
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	200000d0 	.word	0x200000d0

08009cd4 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8009cdc:	4b03      	ldr	r3, [pc, #12]	; (8009cec <_ZL28normal_operator_delete_arrayPv+0x18>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	4798      	blx	r3
}
 8009ce4:	bf00      	nop
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	200000d0 	.word	0x200000d0

08009cf0 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 8009cf8:	4b04      	ldr	r3, [pc, #16]	; (8009d0c <_Znwj+0x1c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	4798      	blx	r3
 8009d00:	4603      	mov	r3, r0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	2000002c 	.word	0x2000002c

08009d10 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 8009d1c:	4b05      	ldr	r3, [pc, #20]	; (8009d34 <_ZnwjPKci+0x24>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	68b9      	ldr	r1, [r7, #8]
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	4798      	blx	r3
 8009d28:	4603      	mov	r3, r0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	20000034 	.word	0x20000034

08009d38 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 8009d42:	4b04      	ldr	r3, [pc, #16]	; (8009d54 <_ZdlPvj+0x1c>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	4798      	blx	r3
}
 8009d4a:	bf00      	nop
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	20000044 	.word	0x20000044

08009d58 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 8009d64:	4b05      	ldr	r3, [pc, #20]	; (8009d7c <_ZnajPKci+0x24>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	68b9      	ldr	r1, [r7, #8]
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	4798      	blx	r3
 8009d70:	4603      	mov	r3, r0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20000040 	.word	0x20000040

08009d80 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 8009d88:	4b03      	ldr	r3, [pc, #12]	; (8009d98 <_ZdaPv+0x18>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	4798      	blx	r3
}
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	20000048 	.word	0x20000048

08009d9c <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 8009da6:	4b04      	ldr	r3, [pc, #16]	; (8009db8 <_ZdaPvj+0x1c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	4798      	blx	r3
}
 8009dae:	bf00      	nop
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20000048 	.word	0x20000048

08009dbc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 8009dc0:	4b12      	ldr	r3, [pc, #72]	; (8009e0c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 8009dc2:	4a13      	ldr	r2, [pc, #76]	; (8009e10 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 8009dc4:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 8009dc6:	4b13      	ldr	r3, [pc, #76]	; (8009e14 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 8009dc8:	4a13      	ldr	r2, [pc, #76]	; (8009e18 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 8009dca:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 8009dcc:	4b13      	ldr	r3, [pc, #76]	; (8009e1c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 8009dce:	4a14      	ldr	r2, [pc, #80]	; (8009e20 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 8009dd0:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 8009dd2:	4b14      	ldr	r3, [pc, #80]	; (8009e24 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 8009dd4:	4a14      	ldr	r2, [pc, #80]	; (8009e28 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 8009dd6:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 8009dd8:	4b14      	ldr	r3, [pc, #80]	; (8009e2c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 8009dda:	4a15      	ldr	r2, [pc, #84]	; (8009e30 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 8009ddc:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 8009dde:	4b15      	ldr	r3, [pc, #84]	; (8009e34 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8009de0:	4a15      	ldr	r2, [pc, #84]	; (8009e38 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 8009de2:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8009de4:	4b15      	ldr	r3, [pc, #84]	; (8009e3c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 8009de6:	4a16      	ldr	r2, [pc, #88]	; (8009e40 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 8009de8:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 8009dea:	4b16      	ldr	r3, [pc, #88]	; (8009e44 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 8009dec:	4a16      	ldr	r2, [pc, #88]	; (8009e48 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 8009dee:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 8009df0:	4b16      	ldr	r3, [pc, #88]	; (8009e4c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 8009df2:	4a17      	ldr	r2, [pc, #92]	; (8009e50 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8009df4:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 8009df6:	4b17      	ldr	r3, [pc, #92]	; (8009e54 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 8009df8:	4a17      	ldr	r2, [pc, #92]	; (8009e58 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 8009dfa:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 8009dfc:	4b17      	ldr	r3, [pc, #92]	; (8009e5c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 8009dfe:	4a18      	ldr	r2, [pc, #96]	; (8009e60 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 8009e00:	601a      	str	r2, [r3, #0]

#endif
}
 8009e02:	bf00      	nop
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	2000002c 	.word	0x2000002c
 8009e10:	08009bf1 	.word	0x08009bf1
 8009e14:	20000030 	.word	0x20000030
 8009e18:	08009c11 	.word	0x08009c11
 8009e1c:	20000034 	.word	0x20000034
 8009e20:	08009c31 	.word	0x08009c31
 8009e24:	20000038 	.word	0x20000038
 8009e28:	08009c55 	.word	0x08009c55
 8009e2c:	2000003c 	.word	0x2000003c
 8009e30:	08009c75 	.word	0x08009c75
 8009e34:	20000040 	.word	0x20000040
 8009e38:	08009c95 	.word	0x08009c95
 8009e3c:	20000044 	.word	0x20000044
 8009e40:	08009cb9 	.word	0x08009cb9
 8009e44:	20000048 	.word	0x20000048
 8009e48:	08009cd5 	.word	0x08009cd5
 8009e4c:	20000014 	.word	0x20000014
 8009e50:	080099cd 	.word	0x080099cd
 8009e54:	2000001c 	.word	0x2000001c
 8009e58:	080099f1 	.word	0x080099f1
 8009e5c:	20000018 	.word	0x20000018
 8009e60:	08009a19 	.word	0x08009a19

08009e64 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8009e64:	b480      	push	{r7}
 8009e66:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8009e68:	4b08      	ldr	r3, [pc, #32]	; (8009e8c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a08      	ldr	r2, [pc, #32]	; (8009e90 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d004      	beq.n	8009e7c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 8009e72:	4b06      	ldr	r3, [pc, #24]	; (8009e8c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a07      	ldr	r2, [pc, #28]	; (8009e94 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d101      	bne.n	8009e80 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e000      	b.n	8009e82 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 8009e80:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	2000002c 	.word	0x2000002c
 8009e90:	08009a79 	.word	0x08009a79
 8009e94:	08009a39 	.word	0x08009a39

08009e98 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 8009e9c:	4b1f      	ldr	r3, [pc, #124]	; (8009f1c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	4a1e      	ldr	r2, [pc, #120]	; (8009f1c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	4b1d      	ldr	r3, [pc, #116]	; (8009f1c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	bfcc      	ite	gt
 8009eae:	2301      	movgt	r3, #1
 8009eb0:	2300      	movle	r3, #0
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d12e      	bne.n	8009f16 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 8009eb8:	4b19      	ldr	r3, [pc, #100]	; (8009f20 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a19      	ldr	r2, [pc, #100]	; (8009f24 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 8009ebe:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 8009ec0:	4b19      	ldr	r3, [pc, #100]	; (8009f28 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a19      	ldr	r2, [pc, #100]	; (8009f2c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 8009ec6:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 8009ec8:	4b19      	ldr	r3, [pc, #100]	; (8009f30 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a19      	ldr	r2, [pc, #100]	; (8009f34 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 8009ece:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 8009ed0:	4b19      	ldr	r3, [pc, #100]	; (8009f38 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a19      	ldr	r2, [pc, #100]	; (8009f3c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 8009ed6:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 8009ed8:	4b19      	ldr	r3, [pc, #100]	; (8009f40 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a19      	ldr	r2, [pc, #100]	; (8009f44 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 8009ede:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8009ee0:	4b19      	ldr	r3, [pc, #100]	; (8009f48 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a19      	ldr	r2, [pc, #100]	; (8009f4c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 8009ee6:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8009ee8:	4b19      	ldr	r3, [pc, #100]	; (8009f50 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a19      	ldr	r2, [pc, #100]	; (8009f54 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 8009eee:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8009ef0:	4b19      	ldr	r3, [pc, #100]	; (8009f58 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a19      	ldr	r2, [pc, #100]	; (8009f5c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 8009ef6:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 8009ef8:	4b19      	ldr	r3, [pc, #100]	; (8009f60 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a19      	ldr	r2, [pc, #100]	; (8009f64 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 8009efe:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8009f00:	4b19      	ldr	r3, [pc, #100]	; (8009f68 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a19      	ldr	r2, [pc, #100]	; (8009f6c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 8009f06:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 8009f08:	4b19      	ldr	r3, [pc, #100]	; (8009f70 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a19      	ldr	r2, [pc, #100]	; (8009f74 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 8009f0e:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8009f10:	f7ff ff54 	bl	8009dbc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8009f14:	e000      	b.n	8009f18 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 8009f16:	bf00      	nop
#endif
}
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20000848 	.word	0x20000848
 8009f20:	2000002c 	.word	0x2000002c
 8009f24:	2000004c 	.word	0x2000004c
 8009f28:	20000030 	.word	0x20000030
 8009f2c:	20000050 	.word	0x20000050
 8009f30:	20000034 	.word	0x20000034
 8009f34:	20000054 	.word	0x20000054
 8009f38:	20000038 	.word	0x20000038
 8009f3c:	20000058 	.word	0x20000058
 8009f40:	2000003c 	.word	0x2000003c
 8009f44:	2000005c 	.word	0x2000005c
 8009f48:	20000040 	.word	0x20000040
 8009f4c:	20000060 	.word	0x20000060
 8009f50:	20000044 	.word	0x20000044
 8009f54:	20000064 	.word	0x20000064
 8009f58:	20000048 	.word	0x20000048
 8009f5c:	20000068 	.word	0x20000068
 8009f60:	20000014 	.word	0x20000014
 8009f64:	20000020 	.word	0x20000020
 8009f68:	2000001c 	.word	0x2000001c
 8009f6c:	20000028 	.word	0x20000028
 8009f70:	20000018 	.word	0x20000018
 8009f74:	20000024 	.word	0x20000024

08009f78 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 8009f78:	b480      	push	{r7}
 8009f7a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 8009f7c:	4b1f      	ldr	r3, [pc, #124]	; (8009ffc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	3b01      	subs	r3, #1
 8009f82:	4a1e      	ldr	r2, [pc, #120]	; (8009ffc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8009f84:	6013      	str	r3, [r2, #0]
 8009f86:	4b1d      	ldr	r3, [pc, #116]	; (8009ffc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	bfcc      	ite	gt
 8009f8e:	2301      	movgt	r3, #1
 8009f90:	2300      	movle	r3, #0
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d12c      	bne.n	8009ff2 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 8009f98:	4b19      	ldr	r3, [pc, #100]	; (800a000 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a19      	ldr	r2, [pc, #100]	; (800a004 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 8009f9e:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 8009fa0:	4b19      	ldr	r3, [pc, #100]	; (800a008 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a19      	ldr	r2, [pc, #100]	; (800a00c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 8009fa6:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 8009fa8:	4b19      	ldr	r3, [pc, #100]	; (800a010 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a19      	ldr	r2, [pc, #100]	; (800a014 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 8009fae:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 8009fb0:	4b19      	ldr	r3, [pc, #100]	; (800a018 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a19      	ldr	r2, [pc, #100]	; (800a01c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 8009fb6:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 8009fb8:	4b19      	ldr	r3, [pc, #100]	; (800a020 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a19      	ldr	r2, [pc, #100]	; (800a024 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 8009fbe:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 8009fc0:	4b19      	ldr	r3, [pc, #100]	; (800a028 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a19      	ldr	r2, [pc, #100]	; (800a02c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 8009fc6:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 8009fc8:	4b19      	ldr	r3, [pc, #100]	; (800a030 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a19      	ldr	r2, [pc, #100]	; (800a034 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 8009fce:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 8009fd0:	4b19      	ldr	r3, [pc, #100]	; (800a038 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a19      	ldr	r2, [pc, #100]	; (800a03c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 8009fd6:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 8009fd8:	4b19      	ldr	r3, [pc, #100]	; (800a040 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a19      	ldr	r2, [pc, #100]	; (800a044 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 8009fde:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 8009fe0:	4b19      	ldr	r3, [pc, #100]	; (800a048 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a19      	ldr	r2, [pc, #100]	; (800a04c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 8009fe6:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 8009fe8:	4b19      	ldr	r3, [pc, #100]	; (800a050 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a19      	ldr	r2, [pc, #100]	; (800a054 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 8009fee:	6013      	str	r3, [r2, #0]
 8009ff0:	e000      	b.n	8009ff4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 8009ff2:	bf00      	nop
#endif
}
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	20000848 	.word	0x20000848
 800a000:	2000004c 	.word	0x2000004c
 800a004:	2000002c 	.word	0x2000002c
 800a008:	20000050 	.word	0x20000050
 800a00c:	20000030 	.word	0x20000030
 800a010:	20000054 	.word	0x20000054
 800a014:	20000034 	.word	0x20000034
 800a018:	20000058 	.word	0x20000058
 800a01c:	20000038 	.word	0x20000038
 800a020:	2000005c 	.word	0x2000005c
 800a024:	2000003c 	.word	0x2000003c
 800a028:	20000060 	.word	0x20000060
 800a02c:	20000040 	.word	0x20000040
 800a030:	20000064 	.word	0x20000064
 800a034:	20000044 	.word	0x20000044
 800a038:	20000068 	.word	0x20000068
 800a03c:	20000048 	.word	0x20000048
 800a040:	20000020 	.word	0x20000020
 800a044:	20000014 	.word	0x20000014
 800a048:	20000028 	.word	0x20000028
 800a04c:	2000001c 	.word	0x2000001c
 800a050:	20000024 	.word	0x20000024
 800a054:	20000018 	.word	0x20000018

0800a058 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
    {
 800a060:	4a05      	ldr	r2, [pc, #20]	; (800a078 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	601a      	str	r2, [r3, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4618      	mov	r0, r3
 800a06a:	f7ff fc15 	bl	8009898 <_ZN17MemoryLeakFailureD1Ev>
    }
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4618      	mov	r0, r3
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	08027a10 	.word	0x08027a10

0800a07c <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
    }
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7ff ffe7 	bl	800a058 <_ZN25MemoryLeakWarningReporterD1Ev>
 800a08a:	2104      	movs	r1, #4
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff fe53 	bl	8009d38 <_ZdlPvj>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	4a04      	ldr	r2, [pc, #16]	; (800a0b8 <_ZN14TestTerminatorC1Ev+0x1c>)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	601a      	str	r2, [r3, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	080283bc 	.word	0x080283bc

0800a0bc <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7ff ffe8 	bl	800a09c <_ZN14TestTerminatorC1Ev>
 800a0cc:	4a03      	ldr	r2, [pc, #12]	; (800a0dc <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	601a      	str	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	08028394 	.word	0x08028394

0800a0e0 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 800a0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0e2:	b099      	sub	sp, #100	; 0x64
 800a0e4:	af02      	add	r7, sp, #8
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800a0ea:	f009 fdb7 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 800a0ee:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800a0f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	339c      	adds	r3, #156	; 0x9c
 800a0f6:	681c      	ldr	r4, [r3, #0]
 800a0f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a0fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0fe:	4618      	mov	r0, r3
 800a100:	f008 fbc4 	bl	801288c <_ZNK10UtestShell7getNameEv>
 800a104:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a108:	4618      	mov	r0, r3
 800a10a:	f002 fd4f 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800a10e:	4605      	mov	r5, r0
 800a110:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a112:	f008 fc9b 	bl	8012a4c <_ZNK10UtestShell13getLineNumberEv>
 800a116:	4606      	mov	r6, r0
 800a118:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	4618      	mov	r0, r3
 800a120:	f002 f9b9 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800a124:	f107 000c 	add.w	r0, r7, #12
 800a128:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	4633      	mov	r3, r6
 800a130:	462a      	mov	r2, r5
 800a132:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a134:	f004 fd14 	bl	800eb60 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800a138:	2300      	movs	r3, #0
 800a13a:	653b      	str	r3, [r7, #80]	; 0x50
 800a13c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a140:	4618      	mov	r0, r3
 800a142:	f7ff ffbb 	bl	800a0bc <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800a146:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800a14a:	f107 030c 	add.w	r3, r7, #12
 800a14e:	4619      	mov	r1, r3
 800a150:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a152:	47a0      	blx	r4
 800a154:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a158:	4618      	mov	r0, r3
 800a15a:	f009 fe79 	bl	8013e50 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800a15e:	f107 030c 	add.w	r3, r7, #12
 800a162:	4618      	mov	r0, r3
 800a164:	f000 f9ac 	bl	800a4c0 <_ZN11FailFailureD1Ev>
 800a168:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a16c:	4618      	mov	r0, r3
 800a16e:	f002 fd4a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800a172:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a176:	4618      	mov	r0, r3
 800a178:	f002 fd45 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800a17c:	bf00      	nop
 800a17e:	375c      	adds	r7, #92	; 0x5c
 800a180:	46bd      	mov	sp, r7
 800a182:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a184 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	4a04      	ldr	r2, [pc, #16]	; (800a1a0 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	08027a24 	.word	0x08027a24

0800a1a4 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7ff ffe8 	bl	800a184 <_ZN17MemoryLeakFailureC1Ev>
 800a1b4:	4a03      	ldr	r2, [pc, #12]	; (800a1c4 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	08027a10 	.word	0x08027a10

0800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800a1c8:	b598      	push	{r3, r4, r7, lr}
 800a1ca:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 800a1cc:	4b11      	ldr	r3, [pc, #68]	; (800a214 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d11b      	bne.n	800a20c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 800a1d4:	f7ff fe60 	bl	8009e98 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800a1d8:	2004      	movs	r0, #4
 800a1da:	f7ff fd89 	bl	8009cf0 <_Znwj>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	461c      	mov	r4, r3
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f7ff ffde 	bl	800a1a4 <_ZN25MemoryLeakWarningReporterC1Ev>
 800a1e8:	4b0b      	ldr	r3, [pc, #44]	; (800a218 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800a1ea:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800a1ec:	f241 1050 	movw	r0, #4432	; 0x1150
 800a1f0:	f7ff fd7e 	bl	8009cf0 <_Znwj>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	461c      	mov	r4, r3
 800a1f8:	4b07      	ldr	r3, [pc, #28]	; (800a218 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	4620      	mov	r0, r4
 800a200:	f00c fa3e 	bl	8016680 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 800a204:	4b03      	ldr	r3, [pc, #12]	; (800a214 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800a206:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800a208:	f7ff feb6 	bl	8009f78 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 800a20c:	4b01      	ldr	r3, [pc, #4]	; (800a214 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
}
 800a210:	4618      	mov	r0, r3
 800a212:	bd98      	pop	{r3, r4, r7, pc}
 800a214:	20000850 	.word	0x20000850
 800a218:	2000084c 	.word	0x2000084c

0800a21c <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	78fa      	ldrb	r2, [r7, #3]
 800a22c:	765a      	strb	r2, [r3, #25]
}
 800a22e:	bf00      	nop
 800a230:	370c      	adds	r7, #12
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
	...

0800a23c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 800a240:	f7ff fdbc 	bl	8009dbc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800a244:	4b0b      	ldr	r3, [pc, #44]	; (800a274 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d004      	beq.n	800a256 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	3204      	adds	r2, #4
 800a250:	6812      	ldr	r2, [r2, #0]
 800a252:	4618      	mov	r0, r3
 800a254:	4790      	blx	r2
    delete globalReporter;
 800a256:	4b08      	ldr	r3, [pc, #32]	; (800a278 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d004      	beq.n	800a268 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	3204      	adds	r2, #4
 800a262:	6812      	ldr	r2, [r2, #0]
 800a264:	4618      	mov	r0, r3
 800a266:	4790      	blx	r2
    globalDetector = NULLPTR;
 800a268:	4b02      	ldr	r3, [pc, #8]	; (800a274 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	601a      	str	r2, [r3, #0]
}
 800a26e:	bf00      	nop
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	20000850 	.word	0x20000850
 800a278:	2000084c 	.word	0x2000084c

0800a27c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	68b9      	ldr	r1, [r7, #8]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f006 fdfd 	bl	8010e8c <_ZN10TestPluginC1ERK12SimpleString>
 800a292:	4a14      	ldr	r2, [pc, #80]	; (800a2e4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	601a      	str	r2, [r3, #0]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2200      	movs	r2, #0
 800a29c:	761a      	strb	r2, [r3, #24]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	765a      	strb	r2, [r3, #25]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800a2aa:	4b0f      	ldr	r3, [pc, #60]	; (800a2e8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d102      	bne.n	800a2b8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 800a2b2:	4a0d      	ldr	r2, [pc, #52]	; (800a2e8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d003      	beq.n	800a2c6 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	615a      	str	r2, [r3, #20]
 800a2c4:	e004      	b.n	800a2d0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800a2c6:	f7ff ff7f 	bl	800a1c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f00c fa69 	bl	80167ac <_ZN18MemoryLeakDetector6enableEv>
}
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	08027a38 	.word	0x08027a38
 800a2e8:	20000854 	.word	0x20000854

0800a2ec <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	4a09      	ldr	r2, [pc, #36]	; (800a31c <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	7e5b      	ldrb	r3, [r3, #25]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d003      	beq.n	800a30a <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800a302:	f7ff fd5b 	bl	8009dbc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800a306:	f7ff ff99 	bl	800a23c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f006 fdf9 	bl	8010f04 <_ZN10TestPluginD1Ev>
    }
}
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4618      	mov	r0, r3
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	08027a38 	.word	0x08027a38

0800a320 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
}
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f7ff ffdf 	bl	800a2ec <_ZN23MemoryLeakWarningPluginD1Ev>
 800a32e:	2124      	movs	r1, #36	; 0x24
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f7ff fd01 	bl	8009d38 <_ZdlPvj>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4618      	mov	r0, r3
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	695b      	ldr	r3, [r3, #20]
 800a350:	4618      	mov	r0, r3
 800a352:	f00c fa0e 	bl	8016772 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7fd ffb0 	bl	80082bc <_ZNK10TestResult15getFailureCountEv>
 800a35c:	4602      	mov	r2, r0
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	621a      	str	r2, [r3, #32]
}
 800a362:	bf00      	nop
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
	...

0800a36c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800a36c:	b590      	push	{r4, r7, lr}
 800a36e:	b097      	sub	sp, #92	; 0x5c
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f00c fa08 	bl	8016792 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	2103      	movs	r1, #3
 800a388:	4618      	mov	r0, r3
 800a38a:	f00c fda5 	bl	8016ed8 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800a38e:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	7e1b      	ldrb	r3, [r3, #24]
 800a394:	f083 0301 	eor.w	r3, r3, #1
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00e      	beq.n	800a3bc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	69db      	ldr	r3, [r3, #28]
 800a3a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d009      	beq.n	800a3bc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6a1c      	ldr	r4, [r3, #32]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7fd ff85 	bl	80082bc <_ZNK10TestResult15getFailureCountEv>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	429c      	cmp	r4, r3
 800a3b6:	d101      	bne.n	800a3bc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e000      	b.n	800a3be <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 800a3bc:	2300      	movs	r3, #0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d04c      	beq.n	800a45c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 800a3c2:	f7ff fd4f 	bl	8009e64 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d028      	beq.n	800a41e <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	2103      	movs	r1, #3
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f00c fd45 	bl	8016e62 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a3de:	4611      	mov	r1, r2
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f002 f858 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800a3e6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a3ea:	f107 0310 	add.w	r3, r7, #16
 800a3ee:	68b9      	ldr	r1, [r7, #8]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f003 feaf 	bl	800e154 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800a3f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f002 fc03 	bl	800cc06 <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	3334      	adds	r3, #52	; 0x34
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f107 0210 	add.w	r2, r7, #16
 800a40c:	4611      	mov	r1, r2
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800a412:	f107 0310 	add.w	r3, r7, #16
 800a416:	4618      	mov	r0, r3
 800a418:	f003 ff5c 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800a41c:	e01e      	b.n	800a45c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d01a      	beq.n	800a45c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3338      	adds	r3, #56	; 0x38
 800a42c:	681c      	ldr	r4, [r3, #0]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	69db      	ldr	r3, [r3, #28]
 800a432:	461a      	mov	r2, r3
 800a434:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a438:	4910      	ldr	r1, [pc, #64]	; (800a47c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800a43a:	4618      	mov	r0, r3
 800a43c:	f003 f8ea 	bl	800d614 <_Z16StringFromFormatPKcz>
 800a440:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a444:	4618      	mov	r0, r3
 800a446:	f002 fbb1 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800a44a:	4603      	mov	r3, r0
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	47a0      	blx	r4
 800a452:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a456:	4618      	mov	r0, r3
 800a458:	f002 fbd5 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	4618      	mov	r0, r3
 800a462:	f00c fd13 	bl	8016e8c <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	61da      	str	r2, [r3, #28]
}
 800a472:	bf00      	nop
 800a474:	375c      	adds	r7, #92	; 0x5c
 800a476:	46bd      	mov	sp, r7
 800a478:	bd90      	pop	{r4, r7, pc}
 800a47a:	bf00      	nop
 800a47c:	08023be4 	.word	0x08023be4

0800a480 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	695b      	ldr	r3, [r3, #20]
 800a48e:	2102      	movs	r1, #2
 800a490:	4618      	mov	r0, r3
 800a492:	f00c fd21 	bl	8016ed8 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800a496:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d007      	beq.n	800a4b0 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	695b      	ldr	r3, [r3, #20]
 800a4a4:	2102      	movs	r1, #2
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f00c fcdb 	bl	8016e62 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	e000      	b.n	800a4b2 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 800a4b0:	4b02      	ldr	r3, [pc, #8]	; (800a4bc <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	08023c24 	.word	0x08023c24

0800a4c0 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	4a05      	ldr	r2, [pc, #20]	; (800a4e0 <_ZN11FailFailureD1Ev+0x20>)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f003 feff 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	08027a80 	.word	0x08027a80

0800a4e4 <_ZN11FailFailureD0Ev>:
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7ff ffe7 	bl	800a4c0 <_ZN11FailFailureD1Ev>
 800a4f2:	2134      	movs	r1, #52	; 0x34
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7ff fc1f 	bl	8009d38 <_ZdlPvj>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4618      	mov	r0, r3
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	4a06      	ldr	r2, [pc, #24]	; (800a558 <_ZN19MockFailureReporterC1Ev+0x24>)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	601a      	str	r2, [r3, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	711a      	strb	r2, [r3, #4]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4618      	mov	r0, r3
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	08028c5c 	.word	0x08028c5c

0800a55c <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	4a04      	ldr	r2, [pc, #16]	; (800a578 <_ZN19MockFailureReporterD1Ev+0x1c>)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4618      	mov	r0, r3
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	08028c5c 	.word	0x08028c5c

0800a57c <_ZN19MockFailureReporterD0Ev>:
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7ff ffe9 	bl	800a55c <_ZN19MockFailureReporterD1Ev>
 800a58a:	2108      	movs	r1, #8
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7ff fbd3 	bl	8009d38 <_ZdlPvj>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	4618      	mov	r0, r3
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	4a05      	ldr	r2, [pc, #20]	; (800a5bc <_ZN11MockFailureD1Ev+0x20>)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f003 fe91 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	08027bd4 	.word	0x08027bd4

0800a5c0 <_ZN11MockFailureD0Ev>:
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff ffe7 	bl	800a59c <_ZN11MockFailureD1Ev>
 800a5ce:	2134      	movs	r1, #52	; 0x34
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7ff fbb1 	bl	8009d38 <_ZdlPvj>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 800a5e0:	b590      	push	{r4, r7, lr}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
 800a5ea:	4a16      	ldr	r2, [pc, #88]	; (800a644 <_ZN14MockNamedValueC1ERKS_+0x64>)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	601a      	str	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	1d1a      	adds	r2, r3, #4
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	4610      	mov	r0, r2
 800a5fc:	f001 ff9f 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f103 020c 	add.w	r2, r3, #12
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	330c      	adds	r3, #12
 800a60a:	4619      	mov	r1, r3
 800a60c:	4610      	mov	r0, r2
 800a60e:	f001 ff96 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	f102 0418 	add.w	r4, r2, #24
 800a61a:	3318      	adds	r3, #24
 800a61c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a61e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	629a      	str	r2, [r3, #40]	; 0x28
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	62da      	str	r2, [r3, #44]	; 0x2c
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	631a      	str	r2, [r3, #48]	; 0x30
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4618      	mov	r0, r3
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	bd90      	pop	{r4, r7, pc}
 800a644:	08028c9c 	.word	0x08028c9c

0800a648 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800a652:	f107 030c 	add.w	r3, r7, #12
 800a656:	4916      	ldr	r1, [pc, #88]	; (800a6b0 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800a658:	4618      	mov	r0, r3
 800a65a:	f001 ff1c 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800a65e:	f107 030c 	add.w	r3, r7, #12
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f002 fb1f 	bl	800cca8 <_ZneRK12SimpleStringS1_>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d005      	beq.n	800a67c <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 800a670:	6879      	ldr	r1, [r7, #4]
 800a672:	4810      	ldr	r0, [pc, #64]	; (800a6b4 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800a674:	f000 ff70 	bl	800b558 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800a678:	4603      	mov	r3, r0
 800a67a:	e000      	b.n	800a67e <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 800a67c:	4b0d      	ldr	r3, [pc, #52]	; (800a6b4 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800a67e:	617b      	str	r3, [r7, #20]
 800a680:	f107 030c 	add.w	r3, r7, #12
 800a684:	4618      	mov	r0, r3
 800a686:	f002 fabe 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	33a8      	adds	r3, #168	; 0xa8
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6839      	ldr	r1, [r7, #0]
 800a694:	6978      	ldr	r0, [r7, #20]
 800a696:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	33ac      	adds	r3, #172	; 0xac
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6978      	ldr	r0, [r7, #20]
 800a6a2:	4798      	blx	r3
    return mock_support;
 800a6a4:	697b      	ldr	r3, [r7, #20]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	08023c28 	.word	0x08023c28
 800a6b4:	20000858 	.word	0x20000858

0800a6b8 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 800a6c2:	4a21      	ldr	r2, [pc, #132]	; (800a748 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	601a      	str	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	605a      	str	r2, [r3, #4]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	609a      	str	r2, [r3, #8]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	731a      	strb	r2, [r3, #12]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f103 0218 	add.w	r2, r3, #24
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	615a      	str	r2, [r3, #20]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	3318      	adds	r3, #24
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7ff ff23 	bl	800a534 <_ZN19MockFailureReporterC1Ev>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	3320      	adds	r3, #32
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f010 fefc 	bl	801b4f0 <_ZN21MockExpectedCallsListC1Ev>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	62da      	str	r2, [r3, #44]	; 0x2c
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	3330      	adds	r3, #48	; 0x30
 800a712:	4618      	mov	r0, r3
 800a714:	f014 fbea 	bl	801eeec <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3338      	adds	r3, #56	; 0x38
 800a71c:	4618      	mov	r0, r3
 800a71e:	f014 faf4 	bl	801ed0a <_ZN18MockNamedValueListC1Ev>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	333c      	adds	r3, #60	; 0x3c
 800a726:	6839      	ldr	r1, [r7, #0]
 800a728:	4618      	mov	r0, r3
 800a72a:	f001 ff08 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800a736:	2100      	movs	r1, #0
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f894 	bl	800a866 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4618      	mov	r0, r3
 800a742:	3708      	adds	r7, #8
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	08027aac 	.word	0x08027aac

0800a74c <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	4a0d      	ldr	r2, [pc, #52]	; (800a78c <_ZN11MockSupportD1Ev+0x40>)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	601a      	str	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	333c      	adds	r3, #60	; 0x3c
 800a75e:	4618      	mov	r0, r3
 800a760:	f002 fa51 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	3330      	adds	r3, #48	; 0x30
 800a768:	4618      	mov	r0, r3
 800a76a:	f014 fbd3 	bl	801ef14 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	3320      	adds	r3, #32
 800a772:	4618      	mov	r0, r3
 800a774:	f010 fed0 	bl	801b518 <_ZN21MockExpectedCallsListD1Ev>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	3318      	adds	r3, #24
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7ff feed 	bl	800a55c <_ZN19MockFailureReporterD1Ev>
{
}
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4618      	mov	r0, r3
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	08027aac 	.word	0x08027aac

0800a790 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
}
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f7ff ffd7 	bl	800a74c <_ZN11MockSupportD1Ev>
 800a79e:	2148      	movs	r1, #72	; 0x48
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7ff fac9 	bl	8009d38 <_ZdlPvj>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3708      	adds	r7, #8
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	691a      	ldr	r2, [r3, #16]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	3310      	adds	r3, #16
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	78f9      	ldrb	r1, [r7, #3]
 800a7cc:	4610      	mov	r0, r2
 800a7ce:	4798      	blx	r3
}
 800a7d0:	bf00      	nop
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d102      	bne.n	800a7ee <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	3318      	adds	r3, #24
 800a7ec:	e000      	b.n	800a7f0 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00a      	beq.n	800a812 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	33c8      	adds	r3, #200	; 0xc8
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	6952      	ldr	r2, [r2, #20]
 800a80e:	4611      	mov	r1, r2
 800a810:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	3338      	adds	r3, #56	; 0x38
 800a816:	4618      	mov	r0, r3
 800a818:	f014 fb0d 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 800a81c:	60f8      	str	r0, [r7, #12]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d01c      	beq.n	800a85e <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 800a824:	68f9      	ldr	r1, [r7, #12]
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 ff26 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	bf14      	ite	ne
 800a832:	2301      	movne	r3, #1
 800a834:	2300      	moveq	r3, #0
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00b      	beq.n	800a854 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 800a83c:	68f9      	ldr	r1, [r7, #12]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 ff1a 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a844:	4603      	mov	r3, r0
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	32a4      	adds	r2, #164	; 0xa4
 800a84a:	6812      	ldr	r2, [r2, #0]
 800a84c:	6879      	ldr	r1, [r7, #4]
 800a84e:	6949      	ldr	r1, [r1, #20]
 800a850:	4618      	mov	r0, r3
 800a852:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f014 f9f7 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	e7df      	b.n	800a81e <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 800a85e:	bf00      	nop
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d102      	bne.n	800a87c <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	e000      	b.n	800a87e <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	6113      	str	r3, [r2, #16]
}
 800a882:	bf00      	nop
 800a884:	370c      	adds	r7, #12
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b082      	sub	sp, #8
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	3330      	adds	r3, #48	; 0x30
 800a89a:	4618      	mov	r0, r3
 800a89c:	f012 fb10 	bl	801cec0 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800a8a8:	b590      	push	{r4, r7, lr}
 800a8aa:	b087      	sub	sp, #28
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	3330      	adds	r3, #48	; 0x30
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	68b9      	ldr	r1, [r7, #8]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f014 fb77 	bl	801efb0 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3338      	adds	r3, #56	; 0x38
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f014 fab5 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 800a8cc:	6178      	str	r0, [r7, #20]
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d01c      	beq.n	800a90e <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 800a8d4:	6979      	ldr	r1, [r7, #20]
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f000 fece 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	bf14      	ite	ne
 800a8e2:	2301      	movne	r3, #1
 800a8e4:	2300      	moveq	r3, #0
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00b      	beq.n	800a904 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 800a8ec:	6979      	ldr	r1, [r7, #20]
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f000 fec2 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	32b0      	adds	r2, #176	; 0xb0
 800a8fa:	6814      	ldr	r4, [r2, #0]
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	68b9      	ldr	r1, [r7, #8]
 800a900:	4618      	mov	r0, r3
 800a902:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a904:	6978      	ldr	r0, [r7, #20]
 800a906:	f014 f99f 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 800a90a:	6178      	str	r0, [r7, #20]
 800a90c:	e7df      	b.n	800a8ce <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 800a90e:	bf00      	nop
 800a910:	371c      	adds	r7, #28
 800a912:	46bd      	mov	sp, r7
 800a914:	bd90      	pop	{r4, r7, pc}

0800a916 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800a916:	b590      	push	{r4, r7, lr}
 800a918:	b087      	sub	sp, #28
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	60f8      	str	r0, [r7, #12]
 800a91e:	60b9      	str	r1, [r7, #8]
 800a920:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	3330      	adds	r3, #48	; 0x30
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	68b9      	ldr	r1, [r7, #8]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f014 fb5c 	bl	801efe8 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	3338      	adds	r3, #56	; 0x38
 800a934:	4618      	mov	r0, r3
 800a936:	f014 fa7e 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 800a93a:	6178      	str	r0, [r7, #20]
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d01c      	beq.n	800a97c <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800a942:	6979      	ldr	r1, [r7, #20]
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f000 fe97 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	bf14      	ite	ne
 800a950:	2301      	movne	r3, #1
 800a952:	2300      	moveq	r3, #0
 800a954:	b2db      	uxtb	r3, r3
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00b      	beq.n	800a972 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800a95a:	6979      	ldr	r1, [r7, #20]
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f000 fe8b 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a962:	4603      	mov	r3, r0
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	32b4      	adds	r2, #180	; 0xb4
 800a968:	6814      	ldr	r4, [r2, #0]
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	68b9      	ldr	r1, [r7, #8]
 800a96e:	4618      	mov	r0, r3
 800a970:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a972:	6978      	ldr	r0, [r7, #20]
 800a974:	f014 f968 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 800a978:	6178      	str	r0, [r7, #20]
 800a97a:	e7df      	b.n	800a93c <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 800a97c:	bf00      	nop
 800a97e:	371c      	adds	r7, #28
 800a980:	46bd      	mov	sp, r7
 800a982:	bd90      	pop	{r4, r7, pc}

0800a984 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	3330      	adds	r3, #48	; 0x30
 800a992:	6839      	ldr	r1, [r7, #0]
 800a994:	4618      	mov	r0, r3
 800a996:	f014 fb93 	bl	801f0c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	3338      	adds	r3, #56	; 0x38
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f014 fa49 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 800a9a4:	60f8      	str	r0, [r7, #12]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d01b      	beq.n	800a9e4 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 800a9ac:	68f9      	ldr	r1, [r7, #12]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fe62 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	bf14      	ite	ne
 800a9ba:	2301      	movne	r3, #1
 800a9bc:	2300      	moveq	r3, #0
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00a      	beq.n	800a9da <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 800a9c4:	68f9      	ldr	r1, [r7, #12]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fe56 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	32b8      	adds	r2, #184	; 0xb8
 800a9d2:	6812      	ldr	r2, [r2, #0]
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f014 f934 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 800a9e0:	60f8      	str	r0, [r7, #12]
 800a9e2:	e7e0      	b.n	800a9a6 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 800a9e4:	bf00      	nop
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	3330      	adds	r3, #48	; 0x30
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f014 faba 	bl	801ef72 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	3338      	adds	r3, #56	; 0x38
 800aa02:	4618      	mov	r0, r3
 800aa04:	f014 fa17 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 800aa08:	60f8      	str	r0, [r7, #12]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d01a      	beq.n	800aa46 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 800aa10:	68f9      	ldr	r1, [r7, #12]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fe30 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	bf14      	ite	ne
 800aa1e:	2301      	movne	r3, #1
 800aa20:	2300      	moveq	r3, #0
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d009      	beq.n	800aa3c <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800aa28:	68f9      	ldr	r1, [r7, #12]
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fe24 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800aa30:	4603      	mov	r3, r0
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	32bc      	adds	r2, #188	; 0xbc
 800aa36:	6812      	ldr	r2, [r2, #0]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f014 f903 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	e7e1      	b.n	800aa0a <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800aa46:	bf00      	nop
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b084      	sub	sp, #16
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d004      	beq.n	800aa68 <_ZN11MockSupport5clearEv+0x1a>
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	3204      	adds	r2, #4
 800aa62:	6812      	ldr	r2, [r2, #0]
 800aa64:	4618      	mov	r0, r3
 800aa66:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800aa76:	f00e fe0d 	bl	8019694 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	3320      	adds	r3, #32
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f011 f937 	bl	801bcf2 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	3338      	adds	r3, #56	; 0x38
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f014 f9c3 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 800aab0:	60f8      	str	r0, [r7, #12]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d01a      	beq.n	800aaee <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800aab8:	68f9      	ldr	r1, [r7, #12]
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fddc 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800aac0:	60b8      	str	r0, [r7, #8]
        if (support) {
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d00d      	beq.n	800aae4 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	339c      	adds	r3, #156	; 0x9c
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68b8      	ldr	r0, [r7, #8]
 800aad2:	4798      	blx	r3
            delete support;
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d004      	beq.n	800aae4 <_ZN11MockSupport5clearEv+0x96>
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	3204      	adds	r2, #4
 800aade:	6812      	ldr	r2, [r2, #0]
 800aae0:	4618      	mov	r0, r3
 800aae2:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f014 f8af 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	e7e1      	b.n	800aab2 <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	3338      	adds	r3, #56	; 0x38
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f014 f917 	bl	801ed26 <_ZN18MockNamedValueList5clearEv>
}
 800aaf8:	bf00      	nop
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	731a      	strb	r2, [r3, #12]
}
 800ab0e:	bf00      	nop
 800ab10:	370c      	adds	r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
	...

0800ab1c <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 800ab1c:	b590      	push	{r4, r7, lr}
 800ab1e:	b089      	sub	sp, #36	; 0x24
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	333c      	adds	r3, #60	; 0x3c
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f002 f859 	bl	800cbe4 <_ZNK12SimpleString7isEmptyEv>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d004      	beq.n	800ab42 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 800ab38:	6879      	ldr	r1, [r7, #4]
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f001 fcff 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 800ab40:	e021      	b.n	800ab86 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800ab48:	f107 0318 	add.w	r3, r7, #24
 800ab4c:	4910      	ldr	r1, [pc, #64]	; (800ab90 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f001 fca1 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800ab54:	f107 0310 	add.w	r3, r7, #16
 800ab58:	f107 0218 	add.w	r2, r7, #24
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f002 f8b3 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f107 0110 	add.w	r1, r7, #16
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f002 f8ac 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800ab72:	f107 0310 	add.w	r3, r7, #16
 800ab76:	4618      	mov	r0, r3
 800ab78:	f002 f845 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800ab7c:	f107 0318 	add.w	r3, r7, #24
 800ab80:	4618      	mov	r0, r3
 800ab82:	f002 f840 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	3724      	adds	r7, #36	; 0x24
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd90      	pop	{r4, r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	08023c2c 	.word	0x08023c2c

0800ab94 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	3314      	adds	r3, #20
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	2101      	movs	r1, #1
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	4798      	blx	r3
 800abae:	4603      	mov	r3, r0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	3314      	adds	r3, #20
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	2100      	movs	r1, #0
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	4798      	blx	r3
}
 800abd2:	bf00      	nop
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
	...

0800abdc <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 800abdc:	b590      	push	{r4, r7, lr}
 800abde:	b089      	sub	sp, #36	; 0x24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800abee:	f083 0301 	eor.w	r3, r3, #1
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d003      	beq.n	800ac00 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800abf8:	f010 fbf6 	bl	801b3e8 <_ZN23MockIgnoredExpectedCall8instanceEv>
 800abfc:	4603      	mov	r3, r0
 800abfe:	e041      	b.n	800ac84 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f000 fb1b 	bl	800b23c <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800ac06:	22a5      	movs	r2, #165	; 0xa5
 800ac08:	4920      	ldr	r1, [pc, #128]	; (800ac8c <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800ac0a:	2070      	movs	r0, #112	; 0x70
 800ac0c:	f7ff f880 	bl	8009d10 <_ZnwjPKci>
 800ac10:	4604      	mov	r4, r0
 800ac12:	68b9      	ldr	r1, [r7, #8]
 800ac14:	4620      	mov	r0, r4
 800ac16:	f00f f8f3 	bl	8019e00 <_ZN23MockCheckedExpectedCallC1Ej>
 800ac1a:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	3308      	adds	r3, #8
 800ac22:	681c      	ldr	r4, [r3, #0]
 800ac24:	f107 0314 	add.w	r3, r7, #20
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	68f9      	ldr	r1, [r7, #12]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7ff ff75 	bl	800ab1c <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800ac32:	f107 0314 	add.w	r3, r7, #20
 800ac36:	4619      	mov	r1, r3
 800ac38:	69f8      	ldr	r0, [r7, #28]
 800ac3a:	47a0      	blx	r4
 800ac3c:	f107 0314 	add.w	r3, r7, #20
 800ac40:	4618      	mov	r0, r3
 800ac42:	f001 ffe0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	7b1b      	ldrb	r3, [r3, #12]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d013      	beq.n	800ac76 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	3310      	adds	r3, #16
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	68fa      	ldr	r2, [r7, #12]
 800ac58:	6892      	ldr	r2, [r2, #8]
 800ac5a:	1c50      	adds	r0, r2, #1
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	6891      	ldr	r1, [r2, #8]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	440a      	add	r2, r1
 800ac64:	4601      	mov	r1, r0
 800ac66:	69f8      	ldr	r0, [r7, #28]
 800ac68:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	689a      	ldr	r2, [r3, #8]
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	441a      	add	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	3320      	adds	r3, #32
 800ac7a:	69f9      	ldr	r1, [r7, #28]
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f010 fd89 	bl	801b794 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 800ac82:	69fb      	ldr	r3, [r7, #28]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3724      	adds	r7, #36	; 0x24
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd90      	pop	{r4, r7, pc}
 800ac8c:	08023c30 	.word	0x08023c30

0800ac90 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 800ac90:	b5b0      	push	{r4, r5, r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	1c5a      	adds	r2, r3, #1
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	605a      	str	r2, [r3, #4]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	685d      	ldr	r5, [r3, #4]
 800aca6:	22b1      	movs	r2, #177	; 0xb1
 800aca8:	490a      	ldr	r1, [pc, #40]	; (800acd4 <_ZN11MockSupport16createActualCallEv+0x44>)
 800acaa:	202c      	movs	r0, #44	; 0x2c
 800acac:	f7ff f830 	bl	8009d10 <_ZnwjPKci>
 800acb0:	4604      	mov	r4, r0
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	691a      	ldr	r2, [r3, #16]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	3320      	adds	r3, #32
 800acba:	4629      	mov	r1, r5
 800acbc:	4620      	mov	r0, r4
 800acbe:	f00c fbdb 	bl	8017478 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800acca:	4618      	mov	r0, r3
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bdb0      	pop	{r4, r5, r7, pc}
 800acd2:	bf00      	nop
 800acd4:	08023c30 	.word	0x08023c30

0800acd8 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00d      	beq.n	800ad08 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	3320      	adds	r3, #32
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	4618      	mov	r0, r3
 800acf4:	f010 fd2a 	bl	801b74c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800acf8:	4603      	mov	r3, r0
 800acfa:	f083 0301 	eor.w	r3, r3, #1
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d001      	beq.n	800ad08 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800ad04:	2301      	movs	r3, #1
 800ad06:	e000      	b.n	800ad0a <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800ad12:	b590      	push	{r4, r7, lr}
 800ad14:	b087      	sub	sp, #28
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800ad1c:	f107 030c 	add.w	r3, r7, #12
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	6879      	ldr	r1, [r7, #4]
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7ff fef9 	bl	800ab1c <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d014      	beq.n	800ad5c <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	33c4      	adds	r3, #196	; 0xc4
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4610      	mov	r0, r2
 800ad42:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d004      	beq.n	800ad56 <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	3204      	adds	r2, #4
 800ad50:	6812      	ldr	r2, [r2, #0]
 800ad52:	4618      	mov	r0, r3
 800ad54:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ad62:	f083 0301 	eor.w	r3, r3, #1
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d004      	beq.n	800ad76 <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800ad6c:	f00e fcbe 	bl	80196ec <_ZN21MockIgnoredActualCall8instanceEv>
 800ad70:	4603      	mov	r3, r0
 800ad72:	461c      	mov	r4, r3
 800ad74:	e02f      	b.n	800add6 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00b      	beq.n	800ad98 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 800ad80:	f00e fc6e 	bl	8019660 <_ZN19MockActualCallTrace8instanceEv>
 800ad84:	4603      	mov	r3, r0
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	3208      	adds	r2, #8
 800ad8a:	6812      	ldr	r2, [r2, #0]
 800ad8c:	f107 010c 	add.w	r1, r7, #12
 800ad90:	4618      	mov	r0, r3
 800ad92:	4790      	blx	r2
 800ad94:	4604      	mov	r4, r0
 800ad96:	e01e      	b.n	800add6 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800ad98:	f107 030c 	add.w	r3, r7, #12
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f7ff ff9a 	bl	800acd8 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d004      	beq.n	800adb4 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800adaa:	f00e fc9f 	bl	80196ec <_ZN21MockIgnoredActualCall8instanceEv>
 800adae:	4603      	mov	r3, r0
 800adb0:	461c      	mov	r4, r3
 800adb2:	e010      	b.n	800add6 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	33c0      	adds	r3, #192	; 0xc0
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	4798      	blx	r3
 800adc0:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	3308      	adds	r3, #8
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f107 020c 	add.w	r2, r7, #12
 800adce:	4611      	mov	r1, r2
 800add0:	6978      	ldr	r0, [r7, #20]
 800add2:	4798      	blx	r3
    return *call;
 800add4:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800add6:	f107 030c 	add.w	r3, r7, #12
 800adda:	4618      	mov	r0, r3
 800addc:	f001 ff13 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800ade0:	4623      	mov	r3, r4
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	371c      	adds	r7, #28
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd90      	pop	{r4, r7, pc}

0800adea <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b084      	sub	sp, #16
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2201      	movs	r2, #1
 800adf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	3338      	adds	r3, #56	; 0x38
 800adfe:	4618      	mov	r0, r3
 800ae00:	f014 f819 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 800ae04:	60f8      	str	r0, [r7, #12]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d01a      	beq.n	800ae42 <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800ae0c:	68f9      	ldr	r1, [r7, #12]
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fc32 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	bf14      	ite	ne
 800ae1a:	2301      	movne	r3, #1
 800ae1c:	2300      	moveq	r3, #0
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d009      	beq.n	800ae38 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800ae24:	68f9      	ldr	r1, [r7, #12]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 fc26 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	3290      	adds	r2, #144	; 0x90
 800ae32:	6812      	ldr	r2, [r2, #0]
 800ae34:	4618      	mov	r0, r3
 800ae36:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f013 ff05 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	e7e1      	b.n	800ae06 <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800ae42:	bf00      	nop
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b084      	sub	sp, #16
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	3338      	adds	r3, #56	; 0x38
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f013 ffe9 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 800ae64:	60f8      	str	r0, [r7, #12]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d01a      	beq.n	800aea2 <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800ae6c:	68f9      	ldr	r1, [r7, #12]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fc02 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	bf14      	ite	ne
 800ae7a:	2301      	movne	r3, #1
 800ae7c:	2300      	moveq	r3, #0
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d009      	beq.n	800ae98 <_ZN11MockSupport7disableEv+0x4e>
 800ae84:	68f9      	ldr	r1, [r7, #12]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fbf6 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	3284      	adds	r2, #132	; 0x84
 800ae92:	6812      	ldr	r2, [r2, #0]
 800ae94:	4618      	mov	r0, r3
 800ae96:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f013 fed5 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	e7e1      	b.n	800ae66 <_ZN11MockSupport7disableEv+0x1c>
}
 800aea2:	bf00      	nop
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b084      	sub	sp, #16
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	3338      	adds	r3, #56	; 0x38
 800aebe:	4618      	mov	r0, r3
 800aec0:	f013 ffb9 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 800aec4:	60f8      	str	r0, [r7, #12]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d01a      	beq.n	800af02 <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 800aecc:	68f9      	ldr	r1, [r7, #12]
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fbd2 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	bf14      	ite	ne
 800aeda:	2301      	movne	r3, #1
 800aedc:	2300      	moveq	r3, #0
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d009      	beq.n	800aef8 <_ZN11MockSupport6enableEv+0x4e>
 800aee4:	68f9      	ldr	r1, [r7, #12]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fbc6 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800aeec:	4603      	mov	r3, r0
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	3288      	adds	r2, #136	; 0x88
 800aef2:	6812      	ldr	r2, [r2, #0]
 800aef4:	4618      	mov	r0, r3
 800aef6:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800aef8:	68f8      	ldr	r0, [r7, #12]
 800aefa:	f013 fea5 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	e7e1      	b.n	800aec6 <_ZN11MockSupport6enableEv+0x1c>
}
 800af02:	bf00      	nop
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b084      	sub	sp, #16
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
 800af12:	460b      	mov	r3, r1
 800af14:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	78fa      	ldrb	r2, [r7, #3]
 800af1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	3338      	adds	r3, #56	; 0x38
 800af22:	4618      	mov	r0, r3
 800af24:	f013 ff87 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 800af28:	60f8      	str	r0, [r7, #12]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d01b      	beq.n	800af68 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 800af30:	68f9      	ldr	r1, [r7, #12]
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fba0 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	bf14      	ite	ne
 800af3e:	2301      	movne	r3, #1
 800af40:	2300      	moveq	r3, #0
 800af42:	b2db      	uxtb	r3, r3
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00a      	beq.n	800af5e <_ZN11MockSupport7tracingEb+0x54>
 800af48:	68f9      	ldr	r1, [r7, #12]
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 fb94 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800af50:	4603      	mov	r3, r0
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	328c      	adds	r2, #140	; 0x8c
 800af56:	6812      	ldr	r2, [r2, #0]
 800af58:	78f9      	ldrb	r1, [r7, #3]
 800af5a:	4618      	mov	r0, r3
 800af5c:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800af5e:	68f8      	ldr	r0, [r7, #12]
 800af60:	f013 fe72 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 800af64:	60f8      	str	r0, [r7, #12]
 800af66:	e7e0      	b.n	800af2a <_ZN11MockSupport7tracingEb+0x20>
}
 800af68:	bf00      	nop
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	3320      	adds	r3, #32
 800af7c:	4618      	mov	r0, r3
 800af7e:	f010 fbc1 	bl	801b704 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800af82:	4603      	mov	r3, r0
 800af84:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	3338      	adds	r3, #56	; 0x38
 800af8a:	4618      	mov	r0, r3
 800af8c:	f013 ff53 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 800af90:	60b8      	str	r0, [r7, #8]
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d01f      	beq.n	800afd8 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800af98:	68b9      	ldr	r1, [r7, #8]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fb6c 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	bf14      	ite	ne
 800afa6:	2301      	movne	r3, #1
 800afa8:	2300      	moveq	r3, #0
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00e      	beq.n	800afce <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800afb0:	68b9      	ldr	r1, [r7, #8]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fb60 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800afb8:	4603      	mov	r3, r0
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	3298      	adds	r2, #152	; 0x98
 800afbe:	6812      	ldr	r2, [r2, #0]
 800afc0:	4618      	mov	r0, r3
 800afc2:	4790      	blx	r2
 800afc4:	4603      	mov	r3, r0
 800afc6:	461a      	mov	r2, r3
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	4413      	add	r3, r2
 800afcc:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800afce:	68b8      	ldr	r0, [r7, #8]
 800afd0:	f013 fe3a 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 800afd4:	60b8      	str	r0, [r7, #8]
 800afd6:	e7dc      	b.n	800af92 <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	bf14      	ite	ne
 800afde:	2301      	movne	r3, #1
 800afe0:	2300      	moveq	r3, #0
 800afe2:	b2db      	uxtb	r3, r3
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d010      	beq.n	800b01e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	33bc      	adds	r3, #188	; 0xbc
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4610      	mov	r0, r2
 800b00c:	4798      	blx	r3
 800b00e:	4603      	mov	r3, r0
 800b010:	f083 0301 	eor.w	r3, r3, #1
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b00      	cmp	r3, #0
 800b018:	d001      	beq.n	800b01e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800b01a:	2301      	movs	r3, #1
 800b01c:	e000      	b.n	800b020 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800b01e:	2300      	movs	r3, #0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d001      	beq.n	800b028 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800b024:	2300      	movs	r3, #0
 800b026:	e02a      	b.n	800b07e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	3338      	adds	r3, #56	; 0x38
 800b02c:	4618      	mov	r0, r3
 800b02e:	f013 ff02 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d020      	beq.n	800b07c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800b03a:	68f9      	ldr	r1, [r7, #12]
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 fb1b 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00f      	beq.n	800b068 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800b048:	68f9      	ldr	r1, [r7, #12]
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 fb14 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b050:	4603      	mov	r3, r0
 800b052:	4618      	mov	r0, r3
 800b054:	f7ff ffca 	bl	800afec <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800b058:	4603      	mov	r3, r0
 800b05a:	f083 0301 	eor.w	r3, r3, #1
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	2b00      	cmp	r3, #0
 800b062:	d001      	beq.n	800b068 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800b064:	2301      	movs	r3, #1
 800b066:	e000      	b.n	800b06a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800b068:	2300      	movs	r3, #0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d001      	beq.n	800b072 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800b06e:	2300      	movs	r3, #0
 800b070:	e005      	b.n	800b07e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f013 fde8 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 800b078:	60f8      	str	r0, [r7, #12]
 800b07a:	e7db      	b.n	800b034 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800b07c:	2301      	movs	r3, #1
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b092      	sub	sp, #72	; 0x48
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800b08e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b092:	4618      	mov	r0, r3
 800b094:	f010 fa2c 	bl	801b4f0 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f103 0220 	add.w	r2, r3, #32
 800b09e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f010 fbf3 	bl	801b890 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	3338      	adds	r3, #56	; 0x38
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f013 fec1 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 800b0b4:	6478      	str	r0, [r7, #68]	; 0x44
 800b0b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d01d      	beq.n	800b0f8 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800b0bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 fada 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	bf14      	ite	ne
 800b0ca:	2301      	movne	r3, #1
 800b0cc:	2300      	moveq	r3, #0
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00c      	beq.n	800b0ee <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800b0d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 face 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	f103 0220 	add.w	r2, r3, #32
 800b0e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f010 fbd1 	bl	801b890 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b0ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b0f0:	f013 fdaa 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 800b0f4:	6478      	str	r0, [r7, #68]	; 0x44
 800b0f6:	e7de      	b.n	800b0b6 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	691a      	ldr	r2, [r3, #16]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	330c      	adds	r3, #12
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4610      	mov	r0, r2
 800b108:	4798      	blx	r3
 800b10a:	4601      	mov	r1, r0
 800b10c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b110:	f107 0308 	add.w	r3, r7, #8
 800b114:	4618      	mov	r0, r3
 800b116:	f011 f9f5 	bl	801c504 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	33c4      	adds	r3, #196	; 0xc4
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f107 0208 	add.w	r2, r7, #8
 800b126:	4611      	mov	r1, r2
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b12c:	f107 0308 	add.w	r3, r7, #8
 800b130:	4618      	mov	r0, r3
 800b132:	f000 fe6d 	bl	800be10 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800b136:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b13a:	4618      	mov	r0, r3
 800b13c:	f010 f9ec 	bl	801b518 <_ZN21MockExpectedCallsListD1Ev>
}
 800b140:	bf00      	nop
 800b142:	3748      	adds	r7, #72	; 0x48
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b092      	sub	sp, #72	; 0x48
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800b150:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b154:	4618      	mov	r0, r3
 800b156:	f010 f9cb 	bl	801b4f0 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f103 0220 	add.w	r2, r3, #32
 800b160:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b164:	4611      	mov	r1, r2
 800b166:	4618      	mov	r0, r3
 800b168:	f010 fb92 	bl	801b890 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	3338      	adds	r3, #56	; 0x38
 800b170:	4618      	mov	r0, r3
 800b172:	f013 fe60 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 800b176:	6478      	str	r0, [r7, #68]	; 0x44
 800b178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d01d      	beq.n	800b1ba <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800b17e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 fa79 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	bf14      	ite	ne
 800b18c:	2301      	movne	r3, #1
 800b18e:	2300      	moveq	r3, #0
 800b190:	b2db      	uxtb	r3, r3
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00c      	beq.n	800b1b0 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800b196:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fa6d 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	f103 0220 	add.w	r2, r3, #32
 800b1a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f010 fb70 	bl	801b890 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b1b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b1b2:	f013 fd49 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 800b1b6:	6478      	str	r0, [r7, #68]	; 0x44
 800b1b8:	e7de      	b.n	800b178 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	691a      	ldr	r2, [r3, #16]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	330c      	adds	r3, #12
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	4798      	blx	r3
 800b1cc:	4601      	mov	r1, r0
 800b1ce:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b1d2:	f107 0308 	add.w	r3, r7, #8
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f011 fa38 	bl	801c64c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	33c4      	adds	r3, #196	; 0xc4
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f107 0208 	add.w	r2, r7, #8
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b1ee:	f107 0308 	add.w	r3, r7, #8
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 fe2e 	bl	800be54 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800b1f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f010 f98b 	bl	801b518 <_ZN21MockExpectedCallsListD1Ev>
}
 800b202:	bf00      	nop
 800b204:	3748      	adds	r7, #72	; 0x48
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b082      	sub	sp, #8
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
 800b212:	6039      	str	r1, [r7, #0]
    clear();
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	339c      	adds	r3, #156	; 0x9c
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	691a      	ldr	r2, [r3, #16]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	691b      	ldr	r3, [r3, #16]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	3308      	adds	r3, #8
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	6839      	ldr	r1, [r7, #0]
 800b230:	4610      	mov	r0, r2
 800b232:	4798      	blx	r3
}
 800b234:	bf00      	nop
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800b244:	f008 fd0a 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 800b248:	4603      	mov	r3, r0
 800b24a:	4618      	mov	r0, r3
 800b24c:	f007 fb78 	bl	8012940 <_ZN10UtestShell10countCheckEv>
}
 800b250:	bf00      	nop
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b264:	2b00      	cmp	r3, #0
 800b266:	d008      	beq.n	800b27a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	33c4      	adds	r3, #196	; 0xc4
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4610      	mov	r0, r2
 800b278:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	3338      	adds	r3, #56	; 0x38
 800b27e:	4618      	mov	r0, r3
 800b280:	f013 fdd9 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 800b284:	60f8      	str	r0, [r7, #12]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d023      	beq.n	800b2d4 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800b28c:	68f9      	ldr	r1, [r7, #12]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 f9f2 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d009      	beq.n	800b2ae <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800b29a:	68f9      	ldr	r1, [r7, #12]
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 f9eb 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e000      	b.n	800b2b0 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00a      	beq.n	800b2ca <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800b2b4:	68f9      	ldr	r1, [r7, #12]
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f9de 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	32c4      	adds	r2, #196	; 0xc4
 800b2c4:	6812      	ldr	r2, [r2, #0]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f013 fcbc 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 800b2d0:	60f8      	str	r0, [r7, #12]
 800b2d2:	e7d8      	b.n	800b286 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800b2d4:	bf00      	nop
 800b2d6:	3710      	adds	r7, #16
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	3320      	adds	r3, #32
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f010 f947 	bl	801b57c <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e027      	b.n	800b348 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3338      	adds	r3, #56	; 0x38
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f013 fd9a 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d01d      	beq.n	800b346 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800b30a:	68f9      	ldr	r1, [r7, #12]
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 f9b3 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00c      	beq.n	800b332 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800b318:	68f9      	ldr	r1, [r7, #12]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f9ac 	bl	800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b320:	4603      	mov	r3, r0
 800b322:	4618      	mov	r0, r3
 800b324:	f7ff ffda 	bl	800b2dc <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d001      	beq.n	800b332 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800b32e:	2301      	movs	r3, #1
 800b330:	e000      	b.n	800b334 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800b332:	2300      	movs	r3, #0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800b338:	2301      	movs	r3, #1
 800b33a:	e005      	b.n	800b348 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f013 fc83 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	e7de      	b.n	800b304 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7ff ff7d 	bl	800b258 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f7ff fe44 	bl	800afec <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d00a      	beq.n	800b380 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3398      	adds	r3, #152	; 0x98
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	4798      	blx	r3
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800b37c:	2301      	movs	r3, #1
 800b37e:	e000      	b.n	800b382 <_ZN11MockSupport17checkExpectationsEv+0x32>
 800b380:	2300      	movs	r3, #0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d002      	beq.n	800b38c <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f7ff fe7d 	bl	800b086 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f7ff ffa5 	bl	800b2dc <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d002      	beq.n	800b39e <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7ff fed5 	bl	800b148 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800b39e:	bf00      	nop
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b082      	sub	sp, #8
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
 800b3ae:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	3338      	adds	r3, #56	; 0x38
 800b3b4:	6839      	ldr	r1, [r7, #0]
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f013 fd0e 	bl	801edd8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	bf14      	ite	ne
 800b3c2:	2301      	movne	r3, #1
 800b3c4:	2300      	moveq	r3, #0
 800b3c6:	b2db      	uxtb	r3, r3
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800b3d0:	b590      	push	{r4, r7, lr}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	3338      	adds	r3, #56	; 0x38
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f013 fcf9 	bl	801edd8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800b3e6:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d111      	bne.n	800b412 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800b3ee:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b3f2:	490a      	ldr	r1, [pc, #40]	; (800b41c <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800b3f4:	2038      	movs	r0, #56	; 0x38
 800b3f6:	f7fe fc8b 	bl	8009d10 <_ZnwjPKci>
 800b3fa:	4604      	mov	r4, r0
 800b3fc:	6839      	ldr	r1, [r7, #0]
 800b3fe:	4620      	mov	r0, r4
 800b400:	f011 fd6e 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
 800b404:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	3338      	adds	r3, #56	; 0x38
 800b40a:	68f9      	ldr	r1, [r7, #12]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f013 fcad 	bl	801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800b412:	68fb      	ldr	r3, [r7, #12]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd90      	pop	{r4, r7, pc}
 800b41c:	08023c30 	.word	0x08023c30

0800b420 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
 800b42c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800b42e:	68b9      	ldr	r1, [r7, #8]
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	f7ff ffcd 	bl	800b3d0 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800b436:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3344      	adds	r3, #68	; 0x44
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	6879      	ldr	r1, [r7, #4]
 800b444:	6978      	ldr	r0, [r7, #20]
 800b446:	4798      	blx	r3
}
 800b448:	bf00      	nop
 800b44a:	3718      	adds	r7, #24
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b088      	sub	sp, #32
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	3338      	adds	r3, #56	; 0x38
 800b460:	6879      	ldr	r1, [r7, #4]
 800b462:	4618      	mov	r0, r3
 800b464:	f013 fcb8 	bl	801edd8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800b468:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d111      	bne.n	800b494 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800b470:	f107 0314 	add.w	r3, r7, #20
 800b474:	490b      	ldr	r1, [pc, #44]	; (800b4a4 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800b476:	4618      	mov	r0, r3
 800b478:	f001 f80d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800b47c:	f107 0314 	add.w	r3, r7, #20
 800b480:	4619      	mov	r1, r3
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f011 fd2c 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
 800b488:	f107 0314 	add.w	r3, r7, #20
 800b48c:	4618      	mov	r0, r3
 800b48e:	f001 fbba 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800b492:	e003      	b.n	800b49c <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800b494:	69f9      	ldr	r1, [r7, #28]
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	f7ff f8a2 	bl	800a5e0 <_ZN14MockNamedValueC1ERKS_>
}
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	3720      	adds	r7, #32
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	08023c28 	.word	0x08023c28

0800b4a8 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800b4a8:	b590      	push	{r4, r7, lr}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800b4b2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b4b6:	4927      	ldr	r1, [pc, #156]	; (800b554 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800b4b8:	2048      	movs	r0, #72	; 0x48
 800b4ba:	f7fe fc29 	bl	8009d10 <_ZnwjPKci>
 800b4be:	4604      	mov	r4, r0
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f7ff f8f8 	bl	800a6b8 <_ZN11MockSupportC1ERK12SimpleString>
 800b4c8:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	33a4      	adds	r3, #164	; 0xa4
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	6952      	ldr	r2, [r2, #20]
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d005      	beq.n	800b4f2 <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	3390      	adds	r3, #144	; 0x90
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b4f8:	f083 0301 	eor.w	r3, r3, #1
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d005      	beq.n	800b50e <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	3384      	adds	r3, #132	; 0x84
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	7b1b      	ldrb	r3, [r3, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d005      	beq.n	800b522 <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3308      	adds	r3, #8
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	68f8      	ldr	r0, [r7, #12]
 800b520:	4798      	blx	r3

    newMock->tracing(tracing_);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	338c      	adds	r3, #140	; 0x8c
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800b530:	4611      	mov	r1, r2
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	33b8      	adds	r3, #184	; 0xb8
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	3230      	adds	r2, #48	; 0x30
 800b542:	4611      	mov	r1, r2
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	4798      	blx	r3
    return newMock;
 800b548:	68fb      	ldr	r3, [r7, #12]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd90      	pop	{r4, r7, pc}
 800b552:	bf00      	nop
 800b554:	08023c30 	.word	0x08023c30

0800b558 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800b558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b55a:	b0ab      	sub	sp, #172	; 0xac
 800b55c:	af04      	add	r7, sp, #16
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800b562:	f107 0308 	add.w	r3, r7, #8
 800b566:	4941      	ldr	r1, [pc, #260]	; (800b66c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800b568:	4618      	mov	r0, r3
 800b56a:	f000 ff94 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800b56e:	f107 0308 	add.w	r3, r7, #8
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	4618      	mov	r0, r3
 800b576:	f001 fbc3 	bl	800cd00 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800b57a:	f107 0308 	add.w	r3, r7, #8
 800b57e:	4619      	mov	r1, r3
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f7ff ff10 	bl	800b3a6 <_ZN11MockSupport7hasDataERK12SimpleString>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d048      	beq.n	800b61e <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800b58c:	f008 fb66 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 800b590:	4604      	mov	r4, r0
 800b592:	6823      	ldr	r3, [r4, #0]
 800b594:	3324      	adds	r3, #36	; 0x24
 800b596:	681d      	ldr	r5, [r3, #0]
 800b598:	f107 0318 	add.w	r3, r7, #24
 800b59c:	f107 0208 	add.w	r2, r7, #8
 800b5a0:	6879      	ldr	r1, [r7, #4]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7ff ff54 	bl	800b450 <_ZN11MockSupport7getDataERK12SimpleString>
 800b5a8:	f107 0310 	add.w	r3, r7, #16
 800b5ac:	f107 0218 	add.w	r2, r7, #24
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f011 ff63 	bl	801d47e <_ZNK14MockNamedValue7getTypeEv>
 800b5b8:	f107 0310 	add.w	r3, r7, #16
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f001 faf5 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	f008 fb5a 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	9302      	str	r3, [sp, #8]
 800b5cc:	f240 13bd 	movw	r3, #445	; 0x1bd
 800b5d0:	9301      	str	r3, [sp, #4]
 800b5d2:	4b27      	ldr	r3, [pc, #156]	; (800b670 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	4632      	mov	r2, r6
 800b5da:	4926      	ldr	r1, [pc, #152]	; (800b674 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800b5dc:	4620      	mov	r0, r4
 800b5de:	47a8      	blx	r5
 800b5e0:	f107 0310 	add.w	r3, r7, #16
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f001 fb0e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800b5ea:	f107 0318 	add.w	r3, r7, #24
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f011 fca0 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800b5f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b5f8:	f107 0208 	add.w	r2, r7, #8
 800b5fc:	6879      	ldr	r1, [r7, #4]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7ff ff26 	bl	800b450 <_ZN11MockSupport7getDataERK12SimpleString>
 800b604:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b608:	4618      	mov	r0, r3
 800b60a:	f012 fa51 	bl	801dab0 <_ZNK14MockNamedValue16getObjectPointerEv>
 800b60e:	4604      	mov	r4, r0
 800b610:	bf00      	nop
 800b612:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b616:	4618      	mov	r0, r3
 800b618:	f011 fc8c 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 800b61c:	e01b      	b.n	800b656 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800b61e:	6839      	ldr	r1, [r7, #0]
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff ff41 	bl	800b4a8 <_ZN11MockSupport5cloneERK12SimpleString>
 800b626:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800b62a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b62e:	4911      	ldr	r1, [pc, #68]	; (800b674 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800b630:	4618      	mov	r0, r3
 800b632:	f000 ff30 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800b636:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800b63a:	f107 0108 	add.w	r1, r7, #8
 800b63e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f7ff feec 	bl	800b420 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800b648:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b64c:	4618      	mov	r0, r3
 800b64e:	f001 fada 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return newMock;
 800b652:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800b656:	f107 0308 	add.w	r3, r7, #8
 800b65a:	4618      	mov	r0, r3
 800b65c:	f001 fad3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800b660:	4623      	mov	r3, r4
}
 800b662:	4618      	mov	r0, r3
 800b664:	379c      	adds	r7, #156	; 0x9c
 800b666:	46bd      	mov	sp, r7
 800b668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b66a:	bf00      	nop
 800b66c:	08023c48 	.word	0x08023c48
 800b670:	08023c30 	.word	0x08023c30
 800b674:	08023c68 	.word	0x08023c68

0800b678 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800b678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b67c:	b08b      	sub	sp, #44	; 0x2c
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800b684:	2500      	movs	r5, #0
 800b686:	2600      	movs	r6, #0
 800b688:	f107 0308 	add.w	r3, r7, #8
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	4618      	mov	r0, r3
 800b690:	f013 fb28 	bl	801ece4 <_ZNK22MockNamedValueListNode7getTypeEv>
 800b694:	f04f 0801 	mov.w	r8, #1
 800b698:	f107 0310 	add.w	r3, r7, #16
 800b69c:	492e      	ldr	r1, [pc, #184]	; (800b758 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f000 fef9 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800b6a4:	f04f 0901 	mov.w	r9, #1
 800b6a8:	f107 0210 	add.w	r2, r7, #16
 800b6ac:	f107 0308 	add.w	r3, r7, #8
 800b6b0:	4611      	mov	r1, r2
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f001 fab3 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d01a      	beq.n	800b6f4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800b6be:	f107 0318 	add.w	r3, r7, #24
 800b6c2:	6839      	ldr	r1, [r7, #0]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f013 fafa 	bl	801ecbe <_ZNK22MockNamedValueListNode7getNameEv>
 800b6ca:	2501      	movs	r5, #1
 800b6cc:	f107 0320 	add.w	r3, r7, #32
 800b6d0:	4922      	ldr	r1, [pc, #136]	; (800b75c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 fedf 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800b6d8:	2601      	movs	r6, #1
 800b6da:	f107 0220 	add.w	r2, r7, #32
 800b6de:	f107 0318 	add.w	r3, r7, #24
 800b6e2:	4611      	mov	r1, r2
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f000 ff54 	bl	800c592 <_ZNK12SimpleString8containsERKS_>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d001      	beq.n	800b6f4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800b6f0:	2401      	movs	r4, #1
 800b6f2:	e000      	b.n	800b6f6 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800b6f4:	2400      	movs	r4, #0
 800b6f6:	2e00      	cmp	r6, #0
 800b6f8:	d004      	beq.n	800b704 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800b6fa:	f107 0320 	add.w	r3, r7, #32
 800b6fe:	4618      	mov	r0, r3
 800b700:	f001 fa81 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800b704:	2d00      	cmp	r5, #0
 800b706:	d004      	beq.n	800b712 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800b708:	f107 0318 	add.w	r3, r7, #24
 800b70c:	4618      	mov	r0, r3
 800b70e:	f001 fa7a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800b712:	f1b9 0f00 	cmp.w	r9, #0
 800b716:	d004      	beq.n	800b722 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800b718:	f107 0310 	add.w	r3, r7, #16
 800b71c:	4618      	mov	r0, r3
 800b71e:	f001 fa72 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800b722:	f1b8 0f00 	cmp.w	r8, #0
 800b726:	d004      	beq.n	800b732 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800b728:	f107 0308 	add.w	r3, r7, #8
 800b72c:	4618      	mov	r0, r3
 800b72e:	f001 fa6a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800b732:	2c00      	cmp	r4, #0
 800b734:	d00a      	beq.n	800b74c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800b736:	6838      	ldr	r0, [r7, #0]
 800b738:	f013 fa92 	bl	801ec60 <_ZN22MockNamedValueListNode4itemEv>
 800b73c:	4603      	mov	r3, r0
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	32a0      	adds	r2, #160	; 0xa0
 800b742:	6812      	ldr	r2, [r2, #0]
 800b744:	4618      	mov	r0, r3
 800b746:	4790      	blx	r2
 800b748:	4603      	mov	r3, r0
 800b74a:	e000      	b.n	800b74e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	372c      	adds	r7, #44	; 0x2c
 800b752:	46bd      	mov	sp, r7
 800b754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b758:	08023c68 	.word	0x08023c68
 800b75c:	08023c48 	.word	0x08023c48

0800b760 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00a      	beq.n	800b788 <_ZN11MockSupport11returnValueEv+0x28>
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	3354      	adds	r3, #84	; 0x54
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	4610      	mov	r0, r2
 800b784:	4798      	blx	r3
 800b786:	e010      	b.n	800b7aa <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800b788:	f107 0308 	add.w	r3, r7, #8
 800b78c:	4909      	ldr	r1, [pc, #36]	; (800b7b4 <_ZN11MockSupport11returnValueEv+0x54>)
 800b78e:	4618      	mov	r0, r3
 800b790:	f000 fe81 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800b794:	f107 0308 	add.w	r3, r7, #8
 800b798:	4619      	mov	r1, r3
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f011 fba0 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
 800b7a0:	f107 0308 	add.w	r3, r7, #8
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f001 fa2e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	08023c28 	.word	0x08023c28

0800b7b8 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800b7b8:	b590      	push	{r4, r7, lr}
 800b7ba:	b091      	sub	sp, #68	; 0x44
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3320      	adds	r3, #32
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f107 0208 	add.w	r2, r7, #8
 800b7cc:	6879      	ldr	r1, [r7, #4]
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	4798      	blx	r3
 800b7d2:	f107 0308 	add.w	r3, r7, #8
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f011 fe60 	bl	801d49c <_ZNK14MockNamedValue12getBoolValueEv>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	461c      	mov	r4, r3
 800b7e0:	bf00      	nop
 800b7e2:	f107 0308 	add.w	r3, r7, #8
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f011 fba4 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 800b7ec:	4623      	mov	r3, r4
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3744      	adds	r7, #68	; 0x44
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd90      	pop	{r4, r7, pc}

0800b7f6 <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800b7f6:	b590      	push	{r4, r7, lr}
 800b7f8:	b091      	sub	sp, #68	; 0x44
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	3320      	adds	r3, #32
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f107 0208 	add.w	r2, r7, #8
 800b80a:	6879      	ldr	r1, [r7, #4]
 800b80c:	4610      	mov	r0, r2
 800b80e:	4798      	blx	r3
 800b810:	f107 0308 	add.w	r3, r7, #8
 800b814:	4618      	mov	r0, r3
 800b816:	f011 fe69 	bl	801d4ec <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800b81a:	4604      	mov	r4, r0
 800b81c:	bf00      	nop
 800b81e:	f107 0308 	add.w	r3, r7, #8
 800b822:	4618      	mov	r0, r3
 800b824:	f011 fb86 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 800b828:	4623      	mov	r3, r4
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3744      	adds	r7, #68	; 0x44
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd90      	pop	{r4, r7, pc}

0800b832 <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800b832:	b590      	push	{r4, r7, lr}
 800b834:	b091      	sub	sp, #68	; 0x44
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	3320      	adds	r3, #32
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f107 0208 	add.w	r2, r7, #8
 800b846:	6879      	ldr	r1, [r7, #4]
 800b848:	4610      	mov	r0, r2
 800b84a:	4798      	blx	r3
 800b84c:	f107 0308 	add.w	r3, r7, #8
 800b850:	4618      	mov	r0, r3
 800b852:	f011 fe9b 	bl	801d58c <_ZNK14MockNamedValue11getIntValueEv>
 800b856:	4604      	mov	r4, r0
 800b858:	bf00      	nop
 800b85a:	f107 0308 	add.w	r3, r7, #8
 800b85e:	4618      	mov	r0, r3
 800b860:	f011 fb68 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 800b864:	4623      	mov	r3, r4
}
 800b866:	4618      	mov	r0, r3
 800b868:	3744      	adds	r7, #68	; 0x44
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd90      	pop	{r4, r7, pc}

0800b86e <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b082      	sub	sp, #8
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	331c      	adds	r3, #28
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	4798      	blx	r3
 800b884:	4603      	mov	r3, r0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d007      	beq.n	800b89a <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	335c      	adds	r3, #92	; 0x5c
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	4798      	blx	r3
 800b896:	4603      	mov	r3, r0
 800b898:	e000      	b.n	800b89c <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800b89a:	683b      	ldr	r3, [r7, #0]
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	331c      	adds	r3, #28
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	4798      	blx	r3
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d00a      	beq.n	800b8d8 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3368      	adds	r3, #104	; 0x68
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	4798      	blx	r3
 800b8ce:	eeb0 7a40 	vmov.f32	s14, s0
 800b8d2:	eef0 7a60 	vmov.f32	s15, s1
 800b8d6:	e001      	b.n	800b8dc <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800b8d8:	ed97 7b00 	vldr	d7, [r7]
}
 800b8dc:	eeb0 0a47 	vmov.f32	s0, s14
 800b8e0:	eef0 0a67 	vmov.f32	s1, s15
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b082      	sub	sp, #8
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	331c      	adds	r3, #28
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	4798      	blx	r3
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d007      	beq.n	800b916 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	3338      	adds	r3, #56	; 0x38
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	4798      	blx	r3
 800b912:	4603      	mov	r3, r0
 800b914:	e000      	b.n	800b918 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800b916:	683b      	ldr	r3, [r7, #0]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	460b      	mov	r3, r1
 800b92a:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	331c      	adds	r3, #28
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	4798      	blx	r3
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d007      	beq.n	800b94e <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	3324      	adds	r3, #36	; 0x24
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	4798      	blx	r3
 800b94a:	4603      	mov	r3, r0
 800b94c:	e000      	b.n	800b950 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800b94e:	78fb      	ldrb	r3, [r7, #3]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	331c      	adds	r3, #28
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	4798      	blx	r3
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d007      	beq.n	800b984 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	332c      	adds	r3, #44	; 0x2c
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	4798      	blx	r3
 800b980:	4603      	mov	r3, r0
 800b982:	e000      	b.n	800b986 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800b984:	683b      	ldr	r3, [r7, #0]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3708      	adds	r7, #8
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b082      	sub	sp, #8
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	331c      	adds	r3, #28
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	4798      	blx	r3
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d007      	beq.n	800b9ba <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	3334      	adds	r3, #52	; 0x34
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	4798      	blx	r3
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	e000      	b.n	800b9bc <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800b9ba:	683b      	ldr	r3, [r7, #0]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	331c      	adds	r3, #28
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	4798      	blx	r3
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d007      	beq.n	800b9f0 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3340      	adds	r3, #64	; 0x40
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	4798      	blx	r3
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	e000      	b.n	800b9f2 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800b9f0:	683b      	ldr	r3, [r7, #0]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3708      	adds	r7, #8
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800b9fa:	b590      	push	{r4, r7, lr}
 800b9fc:	b091      	sub	sp, #68	; 0x44
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	3320      	adds	r3, #32
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f107 0208 	add.w	r2, r7, #8
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	4610      	mov	r0, r2
 800ba12:	4798      	blx	r3
 800ba14:	f107 0308 	add.w	r3, r7, #8
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f011 fddf 	bl	801d5dc <_ZNK14MockNamedValue15getLongIntValueEv>
 800ba1e:	4604      	mov	r4, r0
 800ba20:	bf00      	nop
 800ba22:	f107 0308 	add.w	r3, r7, #8
 800ba26:	4618      	mov	r0, r3
 800ba28:	f011 fa84 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 800ba2c:	4623      	mov	r3, r4
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3744      	adds	r7, #68	; 0x44
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd90      	pop	{r4, r7, pc}

0800ba36 <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800ba36:	b590      	push	{r4, r7, lr}
 800ba38:	b091      	sub	sp, #68	; 0x44
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	3320      	adds	r3, #32
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f107 0208 	add.w	r2, r7, #8
 800ba4a:	6879      	ldr	r1, [r7, #4]
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	4798      	blx	r3
 800ba50:	f107 0308 	add.w	r3, r7, #8
 800ba54:	4618      	mov	r0, r3
 800ba56:	f011 fe23 	bl	801d6a0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	bf00      	nop
 800ba5e:	f107 0308 	add.w	r3, r7, #8
 800ba62:	4618      	mov	r0, r3
 800ba64:	f011 fa66 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 800ba68:	4623      	mov	r3, r4
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3744      	adds	r7, #68	; 0x44
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd90      	pop	{r4, r7, pc}
	...

0800ba74 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800ba74:	b5b0      	push	{r4, r5, r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af02      	add	r7, sp, #8
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800ba7e:	f008 f8ed 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 800ba82:	4604      	mov	r4, r0
 800ba84:	6823      	ldr	r3, [r4, #0]
 800ba86:	3368      	adds	r3, #104	; 0x68
 800ba88:	681d      	ldr	r5, [r3, #0]
 800ba8a:	f008 f8f7 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	f240 2345 	movw	r3, #581	; 0x245
 800ba96:	4a06      	ldr	r2, [pc, #24]	; (800bab0 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800ba98:	4906      	ldr	r1, [pc, #24]	; (800bab4 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	47a8      	blx	r5
    return cpputest_longlong(0);
 800ba9e:	2100      	movs	r1, #0
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7fe fd2f 	bl	800a504 <_ZN17cpputest_longlongC1Ei>
}
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	3708      	adds	r7, #8
 800baaa:	46bd      	mov	sp, r7
 800baac:	bdb0      	pop	{r4, r5, r7, pc}
 800baae:	bf00      	nop
 800bab0:	08023c30 	.word	0x08023c30
 800bab4:	08023c74 	.word	0x08023c74

0800bab8 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800bab8:	b5b0      	push	{r4, r5, r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af02      	add	r7, sp, #8
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800bac2:	f008 f8cb 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 800bac6:	4604      	mov	r4, r0
 800bac8:	6823      	ldr	r3, [r4, #0]
 800baca:	3368      	adds	r3, #104	; 0x68
 800bacc:	681d      	ldr	r5, [r3, #0]
 800bace:	f008 f8d5 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800bad2:	4603      	mov	r3, r0
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	f240 234b 	movw	r3, #587	; 0x24b
 800bada:	4a06      	ldr	r2, [pc, #24]	; (800baf4 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800badc:	4906      	ldr	r1, [pc, #24]	; (800baf8 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800bade:	4620      	mov	r0, r4
 800bae0:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800bae2:	2100      	movs	r1, #0
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f7fe fd19 	bl	800a51c <_ZN18cpputest_ulonglongC1Ei>
}
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	3708      	adds	r7, #8
 800baee:	46bd      	mov	sp, r7
 800baf0:	bdb0      	pop	{r4, r5, r7, pc}
 800baf2:	bf00      	nop
 800baf4:	08023c30 	.word	0x08023c30
 800baf8:	08023c94 	.word	0x08023c94

0800bafc <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800bafc:	b5b0      	push	{r4, r5, r7, lr}
 800bafe:	b086      	sub	sp, #24
 800bb00:	af02      	add	r7, sp, #8
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	4639      	mov	r1, r7
 800bb08:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800bb0c:	f008 f8a6 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 800bb10:	4604      	mov	r4, r0
 800bb12:	6823      	ldr	r3, [r4, #0]
 800bb14:	3368      	adds	r3, #104	; 0x68
 800bb16:	681d      	ldr	r5, [r3, #0]
 800bb18:	f008 f8b0 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	9300      	str	r3, [sp, #0]
 800bb20:	f240 2351 	movw	r3, #593	; 0x251
 800bb24:	4a06      	ldr	r2, [pc, #24]	; (800bb40 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800bb26:	4907      	ldr	r1, [pc, #28]	; (800bb44 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800bb28:	4620      	mov	r0, r4
 800bb2a:	47a8      	blx	r5
    return defaultValue;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	463b      	mov	r3, r7
 800bb32:	cb03      	ldmia	r3!, {r0, r1}
 800bb34:	6010      	str	r0, [r2, #0]
 800bb36:	6051      	str	r1, [r2, #4]
}
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	3710      	adds	r7, #16
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bdb0      	pop	{r4, r5, r7, pc}
 800bb40:	08023c30 	.word	0x08023c30
 800bb44:	08023c74 	.word	0x08023c74

0800bb48 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800bb48:	b5b0      	push	{r4, r5, r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af02      	add	r7, sp, #8
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	4639      	mov	r1, r7
 800bb54:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800bb58:	f008 f880 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 800bb5c:	4604      	mov	r4, r0
 800bb5e:	6823      	ldr	r3, [r4, #0]
 800bb60:	3368      	adds	r3, #104	; 0x68
 800bb62:	681d      	ldr	r5, [r3, #0]
 800bb64:	f008 f88a 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	f240 2357 	movw	r3, #599	; 0x257
 800bb70:	4a06      	ldr	r2, [pc, #24]	; (800bb8c <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800bb72:	4907      	ldr	r1, [pc, #28]	; (800bb90 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800bb74:	4620      	mov	r0, r4
 800bb76:	47a8      	blx	r5
    return defaultValue;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	463b      	mov	r3, r7
 800bb7e:	cb03      	ldmia	r3!, {r0, r1}
 800bb80:	6010      	str	r0, [r2, #0]
 800bb82:	6051      	str	r1, [r2, #4]
}
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bdb0      	pop	{r4, r5, r7, pc}
 800bb8c:	08023c30 	.word	0x08023c30
 800bb90:	08023c94 	.word	0x08023c94

0800bb94 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800bb94:	b590      	push	{r4, r7, lr}
 800bb96:	b091      	sub	sp, #68	; 0x44
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	3320      	adds	r3, #32
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f107 0208 	add.w	r2, r7, #8
 800bba8:	6879      	ldr	r1, [r7, #4]
 800bbaa:	4610      	mov	r0, r2
 800bbac:	4798      	blx	r3
 800bbae:	f107 0308 	add.w	r3, r7, #8
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f011 fea8 	bl	801d908 <_ZNK14MockNamedValue14getStringValueEv>
 800bbb8:	4604      	mov	r4, r0
 800bbba:	bf00      	nop
 800bbbc:	f107 0308 	add.w	r3, r7, #8
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f011 f9b7 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 800bbc6:	4623      	mov	r3, r4
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3744      	adds	r7, #68	; 0x44
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd90      	pop	{r4, r7, pc}

0800bbd0 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	ed2d 8b02 	vpush	{d8}
 800bbd6:	b090      	sub	sp, #64	; 0x40
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	3320      	adds	r3, #32
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f107 0208 	add.w	r2, r7, #8
 800bbe8:	6879      	ldr	r1, [r7, #4]
 800bbea:	4610      	mov	r0, r2
 800bbec:	4798      	blx	r3
 800bbee:	f107 0308 	add.w	r3, r7, #8
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f011 fe2c 	bl	801d850 <_ZNK14MockNamedValue14getDoubleValueEv>
 800bbf8:	eeb0 8a40 	vmov.f32	s16, s0
 800bbfc:	eef0 8a60 	vmov.f32	s17, s1
 800bc00:	bf00      	nop
 800bc02:	f107 0308 	add.w	r3, r7, #8
 800bc06:	4618      	mov	r0, r3
 800bc08:	f011 f994 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 800bc0c:	eeb0 7a48 	vmov.f32	s14, s16
 800bc10:	eef0 7a68 	vmov.f32	s15, s17
}
 800bc14:	eeb0 0a47 	vmov.f32	s0, s14
 800bc18:	eef0 0a67 	vmov.f32	s1, s15
 800bc1c:	3740      	adds	r7, #64	; 0x40
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	ecbd 8b02 	vpop	{d8}
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b082      	sub	sp, #8
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
 800bc2e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	331c      	adds	r3, #28
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	4798      	blx	r3
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d007      	beq.n	800bc52 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	336c      	adds	r3, #108	; 0x6c
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	4798      	blx	r3
 800bc4e:	4603      	mov	r3, r0
 800bc50:	e000      	b.n	800bc54 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800bc52:	683b      	ldr	r3, [r7, #0]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	331c      	adds	r3, #28
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	4798      	blx	r3
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d007      	beq.n	800bc88 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	3378      	adds	r3, #120	; 0x78
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	4798      	blx	r3
 800bc84:	4603      	mov	r3, r0
 800bc86:	e000      	b.n	800bc8a <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800bc88:	683b      	ldr	r3, [r7, #0]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b082      	sub	sp, #8
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
 800bc9a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	331c      	adds	r3, #28
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	4798      	blx	r3
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d007      	beq.n	800bcbe <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	3380      	adds	r3, #128	; 0x80
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	4798      	blx	r3
 800bcba:	4603      	mov	r3, r0
 800bcbc:	e000      	b.n	800bcc0 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800bcbe:	683b      	ldr	r3, [r7, #0]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800bcc8:	b590      	push	{r4, r7, lr}
 800bcca:	b091      	sub	sp, #68	; 0x44
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	3320      	adds	r3, #32
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f107 0208 	add.w	r2, r7, #8
 800bcdc:	6879      	ldr	r1, [r7, #4]
 800bcde:	4610      	mov	r0, r2
 800bce0:	4798      	blx	r3
 800bce2:	f107 0308 	add.w	r3, r7, #8
 800bce6:	4618      	mov	r0, r3
 800bce8:	f011 fe36 	bl	801d958 <_ZNK14MockNamedValue15getPointerValueEv>
 800bcec:	4604      	mov	r4, r0
 800bcee:	bf00      	nop
 800bcf0:	f107 0308 	add.w	r3, r7, #8
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f011 f91d 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 800bcfa:	4623      	mov	r3, r4
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3744      	adds	r7, #68	; 0x44
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd90      	pop	{r4, r7, pc}

0800bd04 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800bd04:	b590      	push	{r4, r7, lr}
 800bd06:	b091      	sub	sp, #68	; 0x44
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	3320      	adds	r3, #32
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f107 0208 	add.w	r2, r7, #8
 800bd18:	6879      	ldr	r1, [r7, #4]
 800bd1a:	4610      	mov	r0, r2
 800bd1c:	4798      	blx	r3
 800bd1e:	f107 0308 	add.w	r3, r7, #8
 800bd22:	4618      	mov	r0, r3
 800bd24:	f011 fe40 	bl	801d9a8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800bd28:	4604      	mov	r4, r0
 800bd2a:	bf00      	nop
 800bd2c:	f107 0308 	add.w	r3, r7, #8
 800bd30:	4618      	mov	r0, r3
 800bd32:	f011 f8ff 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 800bd36:	4623      	mov	r3, r4
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3744      	adds	r7, #68	; 0x44
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd90      	pop	{r4, r7, pc}

0800bd40 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800bd40:	b590      	push	{r4, r7, lr}
 800bd42:	b091      	sub	sp, #68	; 0x44
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	3320      	adds	r3, #32
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f107 0208 	add.w	r2, r7, #8
 800bd54:	6879      	ldr	r1, [r7, #4]
 800bd56:	4610      	mov	r0, r2
 800bd58:	4798      	blx	r3
 800bd5a:	f107 0308 	add.w	r3, r7, #8
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f011 fe4a 	bl	801d9f8 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800bd64:	4604      	mov	r4, r0
 800bd66:	bf00      	nop
 800bd68:	f107 0308 	add.w	r3, r7, #8
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f011 f8e1 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 800bd72:	4623      	mov	r3, r4
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3744      	adds	r7, #68	; 0x44
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd90      	pop	{r4, r7, pc}

0800bd7c <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d00a      	beq.n	800bda2 <_ZN11MockSupport14hasReturnValueEv+0x26>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	3350      	adds	r3, #80	; 0x50
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4610      	mov	r0, r2
 800bd9c:	4798      	blx	r3
 800bd9e:	4603      	mov	r3, r0
 800bda0:	e000      	b.n	800bda4 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800bda2:	2300      	movs	r3, #0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3708      	adds	r7, #8
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <_Z41__static_initialization_and_destruction_0ii>:
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d115      	bne.n	800bde8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d110      	bne.n	800bde8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800bdc6:	f107 0308 	add.w	r3, r7, #8
 800bdca:	490f      	ldr	r1, [pc, #60]	; (800be08 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f000 fb62 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800bdd2:	f107 0308 	add.w	r3, r7, #8
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	480c      	ldr	r0, [pc, #48]	; (800be0c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800bdda:	f7fe fc6d 	bl	800a6b8 <_ZN11MockSupportC1ERK12SimpleString>
 800bdde:	f107 0308 	add.w	r3, r7, #8
 800bde2:	4618      	mov	r0, r3
 800bde4:	f000 ff0f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d107      	bne.n	800bdfe <_Z41__static_initialization_and_destruction_0ii+0x52>
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d102      	bne.n	800bdfe <_Z41__static_initialization_and_destruction_0ii+0x52>
 800bdf8:	4804      	ldr	r0, [pc, #16]	; (800be0c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800bdfa:	f7fe fca7 	bl	800a74c <_ZN11MockSupportD1Ev>
}
 800bdfe:	bf00      	nop
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	08023c28 	.word	0x08023c28
 800be0c:	20000858 	.word	0x20000858

0800be10 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	4a05      	ldr	r2, [pc, #20]	; (800be30 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	601a      	str	r2, [r3, #0]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	4618      	mov	r0, r3
 800be22:	f7fe fbbb 	bl	800a59c <_ZN11MockFailureD1Ev>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4618      	mov	r0, r3
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	08027ba8 	.word	0x08027ba8

0800be34 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f7ff ffe7 	bl	800be10 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800be42:	2134      	movs	r1, #52	; 0x34
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f7fd ff77 	bl	8009d38 <_ZdlPvj>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4618      	mov	r0, r3
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	4a05      	ldr	r2, [pc, #20]	; (800be74 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	601a      	str	r2, [r3, #0]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4618      	mov	r0, r3
 800be66:	f7fe fb99 	bl	800a59c <_ZN11MockFailureD1Ev>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4618      	mov	r0, r3
 800be6e:	3708      	adds	r7, #8
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	08027b7c 	.word	0x08027b7c

0800be78 <_ZN20MockCallOrderFailureD0Ev>:
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f7ff ffe7 	bl	800be54 <_ZN20MockCallOrderFailureD1Ev>
 800be86:	2134      	movs	r1, #52	; 0x34
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f7fd ff55 	bl	8009d38 <_ZdlPvj>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800be98:	b580      	push	{r7, lr}
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bea0:	2001      	movs	r0, #1
 800bea2:	f7ff ff83 	bl	800bdac <_Z41__static_initialization_and_destruction_0ii>
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800bea8:	b580      	push	{r7, lr}
 800beaa:	af00      	add	r7, sp, #0
 800beac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800beb0:	2000      	movs	r0, #0
 800beb2:	f7ff ff7b 	bl	800bdac <_Z41__static_initialization_and_destruction_0ii>
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800bec0:	4b05      	ldr	r3, [pc, #20]	; (800bed8 <_ZN11SimpleMutexC1Ev+0x20>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4798      	blx	r3
 800bec6:	4602      	mov	r2, r0
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	601a      	str	r2, [r3, #0]
}
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4618      	mov	r0, r3
 800bed0:	3708      	adds	r7, #8
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	200000f0 	.word	0x200000f0

0800bedc <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800bee4:	4b05      	ldr	r3, [pc, #20]	; (800befc <_ZN11SimpleMutexD1Ev+0x20>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	6812      	ldr	r2, [r2, #0]
 800beec:	4610      	mov	r0, r2
 800beee:	4798      	blx	r3
}
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4618      	mov	r0, r3
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	200000fc 	.word	0x200000fc

0800bf00 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800bf08:	4b04      	ldr	r3, [pc, #16]	; (800bf1c <_ZN11SimpleMutex4LockEv+0x1c>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	6812      	ldr	r2, [r2, #0]
 800bf10:	4610      	mov	r0, r2
 800bf12:	4798      	blx	r3
}
 800bf14:	bf00      	nop
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	200000f4 	.word	0x200000f4

0800bf20 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800bf28:	4b04      	ldr	r3, [pc, #16]	; (800bf3c <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	6812      	ldr	r2, [r2, #0]
 800bf30:	4610      	mov	r0, r2
 800bf32:	4798      	blx	r3
}
 800bf34:	bf00      	nop
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	200000f8 	.word	0x200000f8

0800bf40 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	683a      	ldr	r2, [r7, #0]
 800bf4e:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7ff ffd3 	bl	800bf00 <_ZN11SimpleMutex4LockEv>
}
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3708      	adds	r7, #8
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7ff ffd5 	bl	800bf20 <_ZN11SimpleMutex6UnlockEv>
}
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800bf84:	4b05      	ldr	r3, [pc, #20]	; (800bf9c <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d103      	bne.n	800bf94 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800bf8c:	f003 fd7a 	bl	800fa84 <_Z24defaultNewArrayAllocatorv>
 800bf90:	4603      	mov	r3, r0
 800bf92:	e001      	b.n	800bf98 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800bf94:	4b01      	ldr	r3, [pc, #4]	; (800bf9c <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800bf96:	681b      	ldr	r3, [r3, #0]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	200008a0 	.word	0x200008a0

0800bfa0 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800bfa0:	b590      	push	{r4, r7, lr}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800bfac:	f7ff ffe8 	bl	800bf80 <_ZN12SimpleString18getStringAllocatorEv>
 800bfb0:	6803      	ldr	r3, [r0, #0]
 800bfb2:	3308      	adds	r3, #8
 800bfb4:	681c      	ldr	r4, [r3, #0]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	68ba      	ldr	r2, [r7, #8]
 800bfba:	68f9      	ldr	r1, [r7, #12]
 800bfbc:	47a0      	blx	r4
 800bfbe:	4603      	mov	r3, r0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3714      	adds	r7, #20
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd90      	pop	{r4, r7, pc}

0800bfc8 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800bfc8:	b590      	push	{r4, r7, lr}
 800bfca:	b087      	sub	sp, #28
 800bfcc:	af02      	add	r7, sp, #8
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
 800bfd4:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800bfd6:	f7ff ffd3 	bl	800bf80 <_ZN12SimpleString18getStringAllocatorEv>
 800bfda:	6803      	ldr	r3, [r0, #0]
 800bfdc:	330c      	adds	r3, #12
 800bfde:	681c      	ldr	r4, [r3, #0]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	68ba      	ldr	r2, [r7, #8]
 800bfe8:	68f9      	ldr	r1, [r7, #12]
 800bfea:	47a0      	blx	r4
}
 800bfec:	bf00      	nop
 800bfee:	3714      	adds	r7, #20
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd90      	pop	{r4, r7, pc}

0800bff4 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800bffc:	2284      	movs	r2, #132	; 0x84
 800bffe:	4906      	ldr	r1, [pc, #24]	; (800c018 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800c000:	2001      	movs	r0, #1
 800c002:	f7ff ffcd 	bl	800bfa0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c006:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2200      	movs	r2, #0
 800c00c:	701a      	strb	r2, [r3, #0]
    return empty;
 800c00e:	68fb      	ldr	r3, [r7, #12]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3710      	adds	r7, #16
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}
 800c018:	08023cc0 	.word	0x08023cc0

0800c01c <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	4618      	mov	r0, r3
 800c02a:	f001 f809 	bl	800d040 <_ZN12SimpleString7isSpaceEc>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d003      	beq.n	800c03c <_ZN12SimpleString4AtoUEPKc+0x20>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	3301      	adds	r3, #1
 800c038:	607b      	str	r3, [r7, #4]
 800c03a:	e7f3      	b.n	800c024 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800c03c:	2300      	movs	r3, #0
 800c03e:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	4618      	mov	r0, r3
 800c046:	f000 ffe7 	bl	800d018 <_ZN12SimpleString7isDigitEc>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d005      	beq.n	800c05c <_ZN12SimpleString4AtoUEPKc+0x40>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	2b2f      	cmp	r3, #47	; 0x2f
 800c056:	d901      	bls.n	800c05c <_ZN12SimpleString4AtoUEPKc+0x40>
 800c058:	2301      	movs	r3, #1
 800c05a:	e000      	b.n	800c05e <_ZN12SimpleString4AtoUEPKc+0x42>
 800c05c:	2300      	movs	r3, #0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d010      	beq.n	800c084 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800c062:	68fa      	ldr	r2, [r7, #12]
 800c064:	4613      	mov	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4413      	add	r3, r2
 800c06a:	005b      	lsls	r3, r3, #1
 800c06c:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	461a      	mov	r2, r3
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	4413      	add	r3, r2
 800c078:	3b30      	subs	r3, #48	; 0x30
 800c07a:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	3301      	adds	r3, #1
 800c080:	607b      	str	r3, [r7, #4]
 800c082:	e7dd      	b.n	800c040 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800c084:	68fb      	ldr	r3, [r7, #12]
}
 800c086:	4618      	mov	r0, r3
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b084      	sub	sp, #16
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	4618      	mov	r0, r3
 800c09c:	f000 ffd0 	bl	800d040 <_ZN12SimpleString7isSpaceEc>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d003      	beq.n	800c0ae <_ZN12SimpleString4AtoIEPKc+0x20>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	607b      	str	r3, [r7, #4]
 800c0ac:	e7f3      	b.n	800c096 <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800c0b4:	7afb      	ldrb	r3, [r7, #11]
 800c0b6:	2b2d      	cmp	r3, #45	; 0x2d
 800c0b8:	d002      	beq.n	800c0c0 <_ZN12SimpleString4AtoIEPKc+0x32>
 800c0ba:	7afb      	ldrb	r3, [r7, #11]
 800c0bc:	2b2b      	cmp	r3, #43	; 0x2b
 800c0be:	d102      	bne.n	800c0c6 <_ZN12SimpleString4AtoIEPKc+0x38>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f000 ffa2 	bl	800d018 <_ZN12SimpleString7isDigitEc>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00f      	beq.n	800c0fa <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800c0da:	68fa      	ldr	r2, [r7, #12]
 800c0dc:	4613      	mov	r3, r2
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	005b      	lsls	r3, r3, #1
 800c0e4:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	3b30      	subs	r3, #48	; 0x30
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	4413      	add	r3, r2
 800c0f0:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	607b      	str	r3, [r7, #4]
 800c0f8:	e7e7      	b.n	800c0ca <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800c0fa:	7afb      	ldrb	r3, [r7, #11]
 800c0fc:	2b2d      	cmp	r3, #45	; 0x2d
 800c0fe:	d102      	bne.n	800c106 <_ZN12SimpleString4AtoIEPKc+0x78>
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	425b      	negs	r3, r3
 800c104:	e000      	b.n	800c108 <_ZN12SimpleString4AtoIEPKc+0x7a>
 800c106:	68fb      	ldr	r3, [r7, #12]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00c      	beq.n	800c13c <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	781a      	ldrb	r2, [r3, #0]
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d106      	bne.n	800c13c <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	3301      	adds	r3, #1
 800c132:	607b      	str	r3, [r7, #4]
       ++s2;
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	3301      	adds	r3, #1
 800c138:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800c13a:	e7ee      	b.n	800c11a <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	461a      	mov	r2, r3
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	1ad3      	subs	r3, r2, r3
}
 800c148:	4618      	mov	r0, r3
 800c14a:	370c      	adds	r7, #12
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800c154:	b480      	push	{r7}
 800c156:	b085      	sub	sp, #20
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800c15c:	f04f 33ff 	mov.w	r3, #4294967295
 800c160:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3301      	adds	r3, #1
 800c166:	60fb      	str	r3, [r7, #12]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	1c5a      	adds	r2, r3, #1
 800c16c:	607a      	str	r2, [r7, #4]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	bf14      	ite	ne
 800c174:	2301      	movne	r3, #1
 800c176:	2300      	moveq	r3, #0
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d000      	beq.n	800c180 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800c17e:	e7f0      	b.n	800c162 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800c180:	68fb      	ldr	r3, [r7, #12]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3714      	adds	r7, #20
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr

0800c18e <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800c18e:	b480      	push	{r7}
 800c190:	b085      	sub	sp, #20
 800c192:	af00      	add	r7, sp, #0
 800c194:	60f8      	str	r0, [r7, #12]
 800c196:	60b9      	str	r1, [r7, #8]
 800c198:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d013      	beq.n	800c1c8 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00f      	beq.n	800c1c8 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	781a      	ldrb	r2, [r3, #0]
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d109      	bne.n	800c1c8 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	607b      	str	r3, [r7, #4]
        ++s1;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	3301      	adds	r3, #1
 800c1be:	60fb      	str	r3, [r7, #12]
        ++s2;
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800c1c6:	e7e8      	b.n	800c19a <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d006      	beq.n	800c1dc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	1ad3      	subs	r3, r2, r3
 800c1da:	e000      	b.n	800c1de <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3714      	adds	r7, #20
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr

0800c1ea <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800c1ea:	b480      	push	{r7}
 800c1ec:	b087      	sub	sp, #28
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	60f8      	str	r0, [r7, #12]
 800c1f2:	60b9      	str	r1, [r7, #8]
 800c1f4:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d002      	beq.n	800c206 <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d101      	bne.n	800c20a <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	e01e      	b.n	800c248 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	781a      	ldrb	r2, [r3, #0]
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	3b01      	subs	r3, #1
 800c216:	607b      	str	r3, [r7, #4]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d005      	beq.n	800c22a <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d001      	beq.n	800c22a <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800c226:	2301      	movs	r3, #1
 800c228:	e000      	b.n	800c22c <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800c22a:	2300      	movs	r3, #0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00a      	beq.n	800c246 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	3301      	adds	r3, #1
 800c234:	60bb      	str	r3, [r7, #8]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	3301      	adds	r3, #1
 800c23a:	60fb      	str	r3, [r7, #12]
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	781a      	ldrb	r2, [r3, #0]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800c244:	e7e5      	b.n	800c212 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800c246:	697b      	ldr	r3, [r7, #20]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	371c      	adds	r7, #28
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	e01b      	b.n	800c2a2 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d016      	beq.n	800c2a0 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800c272:	6838      	ldr	r0, [r7, #0]
 800c274:	f7ff ff6e 	bl	800c154 <_ZN12SimpleString6StrLenEPKc>
 800c278:	4603      	mov	r3, r0
 800c27a:	461a      	mov	r2, r3
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f7ff ff85 	bl	800c18e <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800c284:	4603      	mov	r3, r0
 800c286:	2b00      	cmp	r3, #0
 800c288:	bf0c      	ite	eq
 800c28a:	2301      	moveq	r3, #1
 800c28c:	2300      	movne	r3, #0
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	2b00      	cmp	r3, #0
 800c292:	d001      	beq.n	800c298 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	e004      	b.n	800c2a2 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	3301      	adds	r3, #1
 800c29c:	607b      	str	r3, [r7, #4]
 800c29e:	e7e4      	b.n	800c26a <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b082      	sub	sp, #8
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800c2b4:	79fb      	ldrb	r3, [r7, #7]
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f000 fed9 	bl	800d06e <_ZN12SimpleString7isUpperEc>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d003      	beq.n	800c2ca <_ZN12SimpleString7ToLowerEc+0x20>
 800c2c2:	79fb      	ldrb	r3, [r7, #7]
 800c2c4:	3320      	adds	r3, #32
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	e000      	b.n	800c2cc <_ZN12SimpleString7ToLowerEc+0x22>
 800c2ca:	79fb      	ldrb	r3, [r7, #7]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b087      	sub	sp, #28
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	613b      	str	r3, [r7, #16]

    while (n--)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	1e5a      	subs	r2, r3, #1
 800c2ec:	607a      	str	r2, [r7, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	bf14      	ite	ne
 800c2f2:	2301      	movne	r3, #1
 800c2f4:	2300      	moveq	r3, #0
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d013      	beq.n	800c324 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	781a      	ldrb	r2, [r3, #0]
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	429a      	cmp	r2, r3
 800c306:	d006      	beq.n	800c316 <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	461a      	mov	r2, r3
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	1ad3      	subs	r3, r2, r3
 800c314:	e007      	b.n	800c326 <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	3301      	adds	r3, #1
 800c31a:	617b      	str	r3, [r7, #20]
            ++p2;
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	3301      	adds	r3, #1
 800c320:	613b      	str	r3, [r7, #16]
    while (n--)
 800c322:	e7e1      	b.n	800c2e8 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	371c      	adds	r7, #28
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr
	...

0800c334 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00d      	beq.n	800c360 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6818      	ldr	r0, [r3, #0]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6859      	ldr	r1, [r3, #4]
 800c34c:	23ee      	movs	r3, #238	; 0xee
 800c34e:	4a06      	ldr	r2, [pc, #24]	; (800c368 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800c350:	f7ff fe3a 	bl	800bfc8 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	605a      	str	r2, [r3, #4]
    }
}
 800c360:	bf00      	nop
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	08023cc0 	.word	0x08023cc0

0800c36c <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f7ff ffdd 	bl	800c334 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2201      	movs	r2, #1
 800c37e:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f7ff fe37 	bl	800bff4 <_ZNK12SimpleString14getEmptyStringEv>
 800c386:	4602      	mov	r2, r0
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	601a      	str	r2, [r3, #0]
}
 800c38c:	bf00      	nop
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	f7ff ffc7 	bl	800c334 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	68b8      	ldr	r0, [r7, #8]
 800c3b4:	f000 fe12 	bl	800cfdc <_ZN12SimpleString15copyToNewBufferEPKcj>
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	601a      	str	r2, [r3, #0]
}
 800c3be:	bf00      	nop
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
	...

0800c3c8 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7ff ffae 	bl	800c334 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	683a      	ldr	r2, [r7, #0]
 800c3dc:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	f240 1209 	movw	r2, #265	; 0x109
 800c3e6:	4907      	ldr	r1, [pc, #28]	; (800c404 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7ff fdd9 	bl	800bfa0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	701a      	strb	r2, [r3, #0]
}
 800c3fc:	bf00      	nop
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	08023cc0 	.word	0x08023cc0

0800c408 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800c414:	68f8      	ldr	r0, [r7, #12]
 800c416:	f7ff ff8d 	bl	800c334 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	601a      	str	r2, [r3, #0]
}
 800c426:	bf00      	nop
 800c428:	3710      	adds	r7, #16
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800c42e:	b590      	push	{r4, r7, lr}
 800c430:	b083      	sub	sp, #12
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
 800c436:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	681c      	ldr	r4, [r3, #0]
 800c43c:	6838      	ldr	r0, [r7, #0]
 800c43e:	f000 fbc1 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800c442:	4603      	mov	r3, r0
 800c444:	3301      	adds	r3, #1
 800c446:	461a      	mov	r2, r3
 800c448:	4621      	mov	r1, r4
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f7ff ffa2 	bl	800c394 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800c450:	bf00      	nop
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	bd90      	pop	{r4, r7, pc}

0800c458 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800c462:	6838      	ldr	r0, [r7, #0]
 800c464:	f7ff fe76 	bl	800c154 <_ZN12SimpleString6StrLenEPKc>
 800c468:	4603      	mov	r3, r0
 800c46a:	3301      	adds	r3, #1
 800c46c:	461a      	mov	r2, r3
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f7ff ff8f 	bl	800c394 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800c476:	bf00      	nop
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800c47e:	b480      	push	{r7}
 800c480:	b083      	sub	sp, #12
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
    return buffer_;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	370c      	adds	r7, #12
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr

0800c496 <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800c496:	b580      	push	{r7, lr}
 800c498:	b082      	sub	sp, #8
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
 800c49e:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	601a      	str	r2, [r3, #0]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d103      	bne.n	800c4ba <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7ff ff5a 	bl	800c36c <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800c4b8:	e003      	b.n	800c4c2 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f7ff ffcb 	bl	800c458 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b088      	sub	sp, #32
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	601a      	str	r2, [r3, #0]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800c4e4:	68b8      	ldr	r0, [r7, #8]
 800c4e6:	f7ff fe35 	bl	800c154 <_ZN12SimpleString6StrLenEPKc>
 800c4ea:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	fb02 f303 	mul.w	r3, r2, r3
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f7ff ff65 	bl	800c3c8 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800c504:	2300      	movs	r3, #0
 800c506:	61bb      	str	r3, [r7, #24]
 800c508:	69ba      	ldr	r2, [r7, #24]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d20e      	bcs.n	800c52e <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	3301      	adds	r3, #1
 800c514:	461a      	mov	r2, r3
 800c516:	68b9      	ldr	r1, [r7, #8]
 800c518:	69f8      	ldr	r0, [r7, #28]
 800c51a:	f7ff fe66 	bl	800c1ea <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800c51e:	69fa      	ldr	r2, [r7, #28]
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	4413      	add	r3, r2
 800c524:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	3301      	adds	r3, #1
 800c52a:	61bb      	str	r3, [r7, #24]
 800c52c:	e7ec      	b.n	800c508 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	2200      	movs	r2, #0
 800c532:	701a      	strb	r2, [r3, #0]
}
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	4618      	mov	r0, r3
 800c538:	3720      	adds	r7, #32
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800c53e:	b580      	push	{r7, lr}
 800c540:	b082      	sub	sp, #8
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
 800c546:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2200      	movs	r2, #0
 800c54c:	601a      	str	r2, [r3, #0]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2200      	movs	r2, #0
 800c552:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800c554:	6838      	ldr	r0, [r7, #0]
 800c556:	f7ff ff92 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800c55a:	4603      	mov	r3, r0
 800c55c:	4619      	mov	r1, r3
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f7ff ff7a 	bl	800c458 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	4618      	mov	r0, r3
 800c568:	3708      	adds	r7, #8
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b082      	sub	sp, #8
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
 800c576:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d003      	beq.n	800c588 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800c580:	6839      	ldr	r1, [r7, #0]
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f7ff ff53 	bl	800c42e <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800c588:	687b      	ldr	r3, [r7, #4]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800c592:	b590      	push	{r4, r7, lr}
 800c594:	b083      	sub	sp, #12
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
 800c59a:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f7ff ff6e 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	6838      	ldr	r0, [r7, #0]
 800c5a6:	f7ff ff6a 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	f7ff fe50 	bl	800c254 <_ZN12SimpleString6StrStrEPKcS1_>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	bf14      	ite	ne
 800c5ba:	2301      	movne	r3, #1
 800c5bc:	2300      	moveq	r3, #0
 800c5be:	b2db      	uxtb	r3, r3
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd90      	pop	{r4, r7, pc}

0800c5c8 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800c5c8:	b590      	push	{r4, r7, lr}
 800c5ca:	b087      	sub	sp, #28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800c5d2:	f107 0308 	add.w	r3, r7, #8
 800c5d6:	6879      	ldr	r1, [r7, #4]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f000 fabb 	bl	800cb54 <_ZNK12SimpleString9lowerCaseEv>
 800c5de:	f107 0310 	add.w	r3, r7, #16
 800c5e2:	6839      	ldr	r1, [r7, #0]
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f000 fab5 	bl	800cb54 <_ZNK12SimpleString9lowerCaseEv>
 800c5ea:	f107 0210 	add.w	r2, r7, #16
 800c5ee:	f107 0308 	add.w	r3, r7, #8
 800c5f2:	4611      	mov	r1, r2
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7ff ffcc 	bl	800c592 <_ZNK12SimpleString8containsERKS_>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	461c      	mov	r4, r3
 800c5fe:	bf00      	nop
 800c600:	f107 0310 	add.w	r3, r7, #16
 800c604:	4618      	mov	r0, r3
 800c606:	f000 fafe 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800c60a:	f107 0308 	add.w	r3, r7, #8
 800c60e:	4618      	mov	r0, r3
 800c610:	f000 faf9 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800c614:	4623      	mov	r3, r4
}
 800c616:	4618      	mov	r0, r3
 800c618:	371c      	adds	r7, #28
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd90      	pop	{r4, r7, pc}

0800c61e <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800c61e:	b590      	push	{r4, r7, lr}
 800c620:	b083      	sub	sp, #12
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
 800c626:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800c628:	6838      	ldr	r0, [r7, #0]
 800c62a:	f000 facb 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	bf0c      	ite	eq
 800c634:	2301      	moveq	r3, #1
 800c636:	2300      	movne	r3, #0
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d001      	beq.n	800c642 <_ZNK12SimpleString10startsWithERKS_+0x24>
 800c63e:	2301      	movs	r3, #1
 800c640:	e022      	b.n	800c688 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 fabe 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	bf0c      	ite	eq
 800c64e:	2301      	moveq	r3, #1
 800c650:	2300      	movne	r3, #0
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b00      	cmp	r3, #0
 800c656:	d001      	beq.n	800c65c <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800c658:	2300      	movs	r3, #0
 800c65a:	e015      	b.n	800c688 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f7ff ff0e 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800c662:	4604      	mov	r4, r0
 800c664:	6838      	ldr	r0, [r7, #0]
 800c666:	f7ff ff0a 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800c66a:	4603      	mov	r3, r0
 800c66c:	4619      	mov	r1, r3
 800c66e:	4620      	mov	r0, r4
 800c670:	f7ff fdf0 	bl	800c254 <_ZN12SimpleString6StrStrEPKcS1_>
 800c674:	4604      	mov	r4, r0
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7ff ff01 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800c67c:	4603      	mov	r3, r0
 800c67e:	429c      	cmp	r4, r3
 800c680:	bf0c      	ite	eq
 800c682:	2301      	moveq	r3, #1
 800c684:	2300      	movne	r3, #0
 800c686:	b2db      	uxtb	r3, r3
}
 800c688:	4618      	mov	r0, r3
 800c68a:	370c      	adds	r7, #12
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd90      	pop	{r4, r7, pc}

0800c690 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800c690:	b590      	push	{r4, r7, lr}
 800c692:	b085      	sub	sp, #20
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 fa92 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800c6a0:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800c6a2:	6838      	ldr	r0, [r7, #0]
 800c6a4:	f000 fa8e 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800c6a8:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d101      	bne.n	800c6b4 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e020      	b.n	800c6f6 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d101      	bne.n	800c6be <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	e01b      	b.n	800c6f6 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d201      	bcs.n	800c6ca <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	e015      	b.n	800c6f6 <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7ff fed7 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800c6d0:	4601      	mov	r1, r0
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	1ad3      	subs	r3, r2, r3
 800c6d8:	18cc      	adds	r4, r1, r3
 800c6da:	6838      	ldr	r0, [r7, #0]
 800c6dc:	f7ff fecf 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	f7ff fd13 	bl	800c110 <_ZN12SimpleString6StrCmpEPKcS1_>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	bf0c      	ite	eq
 800c6f0:	2301      	moveq	r3, #1
 800c6f2:	2300      	movne	r3, #0
 800c6f4:	b2db      	uxtb	r3, r3
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3714      	adds	r7, #20
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd90      	pop	{r4, r7, pc}

0800c6fe <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b086      	sub	sp, #24
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800c708:	2300      	movs	r3, #0
 800c70a:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7ff feb6 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800c712:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800c714:	2300      	movs	r3, #0
 800c716:	60fb      	str	r3, [r7, #12]
    if (*str){
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d008      	beq.n	800c732 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800c720:	6838      	ldr	r0, [r7, #0]
 800c722:	f7ff feac 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800c726:	4603      	mov	r3, r0
 800c728:	4619      	mov	r1, r3
 800c72a:	6938      	ldr	r0, [r7, #16]
 800c72c:	f7ff fd92 	bl	800c254 <_ZN12SimpleString6StrStrEPKcS1_>
 800c730:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d014      	beq.n	800c764 <_ZNK12SimpleString5countERKS_+0x66>
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d011      	beq.n	800c764 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	613b      	str	r3, [r7, #16]
        str++;
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	3301      	adds	r3, #1
 800c748:	613b      	str	r3, [r7, #16]
        num++;
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	3301      	adds	r3, #1
 800c74e:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800c750:	6838      	ldr	r0, [r7, #0]
 800c752:	f7ff fe94 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800c756:	4603      	mov	r3, r0
 800c758:	4619      	mov	r1, r3
 800c75a:	6938      	ldr	r0, [r7, #16]
 800c75c:	f7ff fd7a 	bl	800c254 <_ZN12SimpleString6StrStrEPKcS1_>
 800c760:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800c762:	e7e6      	b.n	800c732 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800c764:	697b      	ldr	r3, [r7, #20]
}
 800c766:	4618      	mov	r0, r3
 800c768:	3718      	adds	r7, #24
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}

0800c76e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800c76e:	b590      	push	{r4, r7, lr}
 800c770:	b091      	sub	sp, #68	; 0x44
 800c772:	af00      	add	r7, sp, #0
 800c774:	60f8      	str	r0, [r7, #12]
 800c776:	60b9      	str	r1, [r7, #8]
 800c778:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800c77a:	68b9      	ldr	r1, [r7, #8]
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f7ff ffbe 	bl	800c6fe <_ZNK12SimpleString5countERKS_>
 800c782:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800c784:	68b9      	ldr	r1, [r7, #8]
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f7ff ff82 	bl	800c690 <_ZNK12SimpleString8endsWithERKS_>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d001      	beq.n	800c796 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800c792:	2300      	movs	r3, #0
 800c794:	e000      	b.n	800c798 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800c796:	2301      	movs	r3, #1
 800c798:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800c79a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	4413      	add	r3, r2
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f001 f95c 	bl	800da60 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800c7a8:	68f8      	ldr	r0, [r7, #12]
 800c7aa:	f7ff fe68 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800c7ae:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d235      	bcs.n	800c828 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800c7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7be:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800c7c0:	68b8      	ldr	r0, [r7, #8]
 800c7c2:	f7ff fe5c 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c7cc:	f7ff fd42 	bl	800c254 <_ZN12SimpleString6StrStrEPKcS1_>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800c7d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f001 f9db 	bl	800db94 <_ZN22SimpleStringCollectionixEj>
 800c7de:	4604      	mov	r4, r0
 800c7e0:	f107 031c 	add.w	r3, r7, #28
 800c7e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7ff fe55 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800c7ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f0:	1ad3      	subs	r3, r2, r3
 800c7f2:	f107 0014 	add.w	r0, r7, #20
 800c7f6:	f107 011c 	add.w	r1, r7, #28
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f000 fb0c 	bl	800ce18 <_ZNK12SimpleString9subStringEjj>
 800c800:	f107 0314 	add.w	r3, r7, #20
 800c804:	4619      	mov	r1, r3
 800c806:	4620      	mov	r0, r4
 800c808:	f7ff feb1 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800c80c:	f107 0314 	add.w	r3, r7, #20
 800c810:	4618      	mov	r0, r3
 800c812:	f000 f9f8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800c816:	f107 031c 	add.w	r3, r7, #28
 800c81a:	4618      	mov	r0, r3
 800c81c:	f000 f9f3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800c820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c822:	3301      	adds	r3, #1
 800c824:	63bb      	str	r3, [r7, #56]	; 0x38
 800c826:	e7c5      	b.n	800c7b4 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800c828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d015      	beq.n	800c85a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800c82e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f001 f9af 	bl	800db94 <_ZN22SimpleStringCollectionixEj>
 800c836:	4604      	mov	r4, r0
 800c838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c83c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c83e:	4618      	mov	r0, r3
 800c840:	f7ff fe29 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800c844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c848:	4619      	mov	r1, r3
 800c84a:	4620      	mov	r0, r4
 800c84c:	f7ff fe8f 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800c850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c854:	4618      	mov	r0, r3
 800c856:	f000 f9d6 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    }
}
 800c85a:	bf00      	nop
 800c85c:	3744      	adds	r7, #68	; 0x44
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd90      	pop	{r4, r7, pc}

0800c862 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b084      	sub	sp, #16
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
 800c86a:	460b      	mov	r3, r1
 800c86c:	70fb      	strb	r3, [r7, #3]
 800c86e:	4613      	mov	r3, r2
 800c870:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 f9a6 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800c878:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800c87a:	2300      	movs	r3, #0
 800c87c:	60fb      	str	r3, [r7, #12]
 800c87e:	68fa      	ldr	r2, [r7, #12]
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	429a      	cmp	r2, r3
 800c884:	d218      	bcs.n	800c8b8 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f7ff fdf9 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800c88c:	4602      	mov	r2, r0
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	4413      	add	r3, r2
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	78fa      	ldrb	r2, [r7, #3]
 800c896:	429a      	cmp	r2, r3
 800c898:	bf0c      	ite	eq
 800c89a:	2301      	moveq	r3, #1
 800c89c:	2300      	movne	r3, #0
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d005      	beq.n	800c8b0 <_ZN12SimpleString7replaceEcc+0x4e>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	4413      	add	r3, r2
 800c8ac:	78ba      	ldrb	r2, [r7, #2]
 800c8ae:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	60fb      	str	r3, [r7, #12]
 800c8b6:	e7e2      	b.n	800c87e <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800c8b8:	bf00      	nop
 800c8ba:	3710      	adds	r7, #16
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b08e      	sub	sp, #56	; 0x38
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800c8cc:	f107 0310 	add.w	r3, r7, #16
 800c8d0:	68b9      	ldr	r1, [r7, #8]
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7ff fddf 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800c8d8:	f107 0310 	add.w	r3, r7, #16
 800c8dc:	4619      	mov	r1, r3
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f7ff ff0d 	bl	800c6fe <_ZNK12SimpleString5countERKS_>
 800c8e4:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c8e6:	f107 0310 	add.w	r3, r7, #16
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f000 f98b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800c8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d071      	beq.n	800c9da <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	f000 f964 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800c8fc:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800c8fe:	68b8      	ldr	r0, [r7, #8]
 800c900:	f7ff fc28 	bl	800c154 <_ZN12SimpleString6StrLenEPKc>
 800c904:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f7ff fc24 	bl	800c154 <_ZN12SimpleString6StrLenEPKc>
 800c90c:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800c90e:	6a3b      	ldr	r3, [r7, #32]
 800c910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c912:	fb02 f203 	mul.w	r2, r2, r3
 800c916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c918:	441a      	add	r2, r3
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c91e:	fb01 f303 	mul.w	r3, r1, r3
 800c922:	1ad3      	subs	r3, r2, r3
 800c924:	3301      	adds	r3, #1
 800c926:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d951      	bls.n	800c9d2 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800c92e:	f240 129d 	movw	r2, #413	; 0x19d
 800c932:	492c      	ldr	r1, [pc, #176]	; (800c9e4 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800c934:	69f8      	ldr	r0, [r7, #28]
 800c936:	f7ff fb33 	bl	800bfa0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c93a:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800c93c:	2300      	movs	r3, #0
 800c93e:	637b      	str	r3, [r7, #52]	; 0x34
 800c940:	2300      	movs	r3, #0
 800c942:	633b      	str	r3, [r7, #48]	; 0x30
 800c944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c948:	429a      	cmp	r2, r3
 800c94a:	d236      	bcs.n	800c9ba <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f7ff fd96 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800c952:	4602      	mov	r2, r0
 800c954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c956:	4413      	add	r3, r2
 800c958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c95a:	68b9      	ldr	r1, [r7, #8]
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7ff fc16 	bl	800c18e <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	bf0c      	ite	eq
 800c968:	2301      	moveq	r3, #1
 800c96a:	2300      	movne	r3, #0
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d011      	beq.n	800c996 <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800c972:	69ba      	ldr	r2, [r7, #24]
 800c974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c976:	18d0      	adds	r0, r2, r3
 800c978:	6a3b      	ldr	r3, [r7, #32]
 800c97a:	3301      	adds	r3, #1
 800c97c:	461a      	mov	r2, r3
 800c97e:	6879      	ldr	r1, [r7, #4]
 800c980:	f7ff fc33 	bl	800c1ea <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800c984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c986:	6a3b      	ldr	r3, [r7, #32]
 800c988:	4413      	add	r3, r2
 800c98a:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800c98c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c990:	4413      	add	r3, r2
 800c992:	637b      	str	r3, [r7, #52]	; 0x34
 800c994:	e7d6      	b.n	800c944 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f7ff fd71 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800c99c:	4602      	mov	r2, r0
 800c99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a0:	441a      	add	r2, r3
 800c9a2:	69b9      	ldr	r1, [r7, #24]
 800c9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a6:	440b      	add	r3, r1
 800c9a8:	7812      	ldrb	r2, [r2, #0]
 800c9aa:	701a      	strb	r2, [r3, #0]
                j++;
 800c9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800c9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800c9b8:	e7c4      	b.n	800c944 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	3b01      	subs	r3, #1
 800c9be:	69ba      	ldr	r2, [r7, #24]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800c9c6:	69fa      	ldr	r2, [r7, #28]
 800c9c8:	69b9      	ldr	r1, [r7, #24]
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	f7ff fd1c 	bl	800c408 <_ZN12SimpleString19setInternalBufferToEPcj>
 800c9d0:	e004      	b.n	800c9dc <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800c9d2:	68f8      	ldr	r0, [r7, #12]
 800c9d4:	f7ff fcca 	bl	800c36c <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800c9d8:	e000      	b.n	800c9dc <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800c9da:	bf00      	nop
}
 800c9dc:	3738      	adds	r7, #56	; 0x38
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	08023cc0 	.word	0x08023cc0

0800c9e8 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800c9e8:	b590      	push	{r4, r7, lr}
 800c9ea:	b089      	sub	sp, #36	; 0x24
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800c9f2:	493b      	ldr	r1, [pc, #236]	; (800cae0 <_ZNK12SimpleString9printableEv+0xf8>)
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f7ff fd4e 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800c9fa:	6838      	ldr	r0, [r7, #0]
 800c9fc:	f000 f876 	bl	800caec <_ZNK12SimpleString16getPrintableSizeEv>
 800ca00:	4603      	mov	r3, r0
 800ca02:	3301      	adds	r3, #1
 800ca04:	4619      	mov	r1, r3
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f7ff fcde 	bl	800c3c8 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800ca0c:	6838      	ldr	r0, [r7, #0]
 800ca0e:	f000 f8d9 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800ca12:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800ca14:	2300      	movs	r3, #0
 800ca16:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800ca18:	2300      	movs	r3, #0
 800ca1a:	61bb      	str	r3, [r7, #24]
 800ca1c:	69ba      	ldr	r2, [r7, #24]
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d252      	bcs.n	800caca <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	69bb      	ldr	r3, [r7, #24]
 800ca2a:	4413      	add	r3, r2
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800ca30:	7cfb      	ldrb	r3, [r7, #19]
 800ca32:	4618      	mov	r0, r3
 800ca34:	f000 fb43 	bl	800d0be <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d012      	beq.n	800ca64 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	18d0      	adds	r0, r2, r3
 800ca46:	7cfb      	ldrb	r3, [r7, #19]
 800ca48:	3b07      	subs	r3, #7
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	4b25      	ldr	r3, [pc, #148]	; (800cae4 <_ZNK12SimpleString9printableEv+0xfc>)
 800ca50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca54:	2202      	movs	r2, #2
 800ca56:	4619      	mov	r1, r3
 800ca58:	f7ff fbc7 	bl	800c1ea <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	3302      	adds	r3, #2
 800ca60:	61fb      	str	r3, [r7, #28]
 800ca62:	e02e      	b.n	800cac2 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800ca64:	7cfb      	ldrb	r3, [r7, #19]
 800ca66:	4618      	mov	r0, r3
 800ca68:	f000 fb15 	bl	800d096 <_ZN12SimpleString9isControlEc>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d01e      	beq.n	800cab0 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800ca72:	7cfa      	ldrb	r2, [r7, #19]
 800ca74:	f107 0308 	add.w	r3, r7, #8
 800ca78:	491b      	ldr	r1, [pc, #108]	; (800cae8 <_ZNK12SimpleString9printableEv+0x100>)
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f000 fdca 	bl	800d614 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	18d4      	adds	r4, r2, r3
 800ca88:	f107 0308 	add.w	r3, r7, #8
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f000 f88d 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2204      	movs	r2, #4
 800ca96:	4619      	mov	r1, r3
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f7ff fba6 	bl	800c1ea <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800ca9e:	69fb      	ldr	r3, [r7, #28]
 800caa0:	3304      	adds	r3, #4
 800caa2:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800caa4:	f107 0308 	add.w	r3, r7, #8
 800caa8:	4618      	mov	r0, r3
 800caaa:	f000 f8ac 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800caae:	e008      	b.n	800cac2 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	4413      	add	r3, r2
 800cab8:	7cfa      	ldrb	r2, [r7, #19]
 800caba:	701a      	strb	r2, [r3, #0]
            j++;
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	3301      	adds	r3, #1
 800cac0:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	3301      	adds	r3, #1
 800cac6:	61bb      	str	r3, [r7, #24]
 800cac8:	e7a8      	b.n	800ca1c <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	4413      	add	r3, r2
 800cad2:	2200      	movs	r2, #0
 800cad4:	701a      	strb	r2, [r3, #0]

    return result;
 800cad6:	bf00      	nop
}
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	3724      	adds	r7, #36	; 0x24
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd90      	pop	{r4, r7, pc}
 800cae0:	08023d80 	.word	0x08023d80
 800cae4:	2000006c 	.word	0x2000006c
 800cae8:	08023d84 	.word	0x08023d84

0800caec <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 f865 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800cafa:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800cb00:	2300      	movs	r3, #0
 800cb02:	613b      	str	r3, [r7, #16]
 800cb04:	693a      	ldr	r2, [r7, #16]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d21e      	bcs.n	800cb4a <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	4413      	add	r3, r2
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800cb18:	7afb      	ldrb	r3, [r7, #11]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f000 facf 	bl	800d0be <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800cb20:	4603      	mov	r3, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d003      	beq.n	800cb2e <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	617b      	str	r3, [r7, #20]
 800cb2c:	e009      	b.n	800cb42 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800cb2e:	7afb      	ldrb	r3, [r7, #11]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f000 fab0 	bl	800d096 <_ZN12SimpleString9isControlEc>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d002      	beq.n	800cb42 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	3303      	adds	r3, #3
 800cb40:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	3301      	adds	r3, #1
 800cb46:	613b      	str	r3, [r7, #16]
 800cb48:	e7dc      	b.n	800cb04 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800cb4a:	697b      	ldr	r3, [r7, #20]
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3718      	adds	r7, #24
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800cb54:	b590      	push	{r4, r7, lr}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800cb5e:	6839      	ldr	r1, [r7, #0]
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f7ff fcec 	bl	800c53e <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 f82c 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800cb6c:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800cb6e:	2300      	movs	r3, #0
 800cb70:	60fb      	str	r3, [r7, #12]
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d213      	bcs.n	800cba2 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7ff fc7f 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800cb80:	4602      	mov	r2, r0
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	4413      	add	r3, r2
 800cb86:	7819      	ldrb	r1, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	18d4      	adds	r4, r2, r3
 800cb90:	4608      	mov	r0, r1
 800cb92:	f7ff fb8a 	bl	800c2aa <_ZN12SimpleString7ToLowerEc>
 800cb96:	4603      	mov	r3, r0
 800cb98:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	60fb      	str	r3, [r7, #12]
 800cba0:	e7e7      	b.n	800cb72 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800cba2:	bf00      	nop
}
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	3714      	adds	r7, #20
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd90      	pop	{r4, r7, pc}

0800cbac <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f7ff fc62 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800cbba:	4603      	mov	r3, r0
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f7ff fc56 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7ff fabd 	bl	800c154 <_ZN12SimpleString6StrLenEPKc>
 800cbda:	4603      	mov	r3, r0
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7ff ffe9 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	bf0c      	ite	eq
 800cbf8:	2301      	moveq	r3, #1
 800cbfa:	2300      	movne	r3, #0
 800cbfc:	b2db      	uxtb	r3, r3
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b082      	sub	sp, #8
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7ff fb90 	bl	800c334 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4618      	mov	r0, r3
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800cc1e:	b590      	push	{r4, r7, lr}
 800cc20:	b083      	sub	sp, #12
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f7ff ffbf 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800cc2e:	4604      	mov	r4, r0
 800cc30:	6838      	ldr	r0, [r7, #0]
 800cc32:	f7ff ffbb 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800cc36:	4603      	mov	r3, r0
 800cc38:	4619      	mov	r1, r3
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f7ff fa68 	bl	800c110 <_ZN12SimpleString6StrCmpEPKcS1_>
 800cc40:	4603      	mov	r3, r0
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	bf0c      	ite	eq
 800cc46:	2301      	moveq	r3, #1
 800cc48:	2300      	movne	r3, #0
 800cc4a:	b2db      	uxtb	r3, r3
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd90      	pop	{r4, r7, pc}

0800cc54 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800cc54:	b590      	push	{r4, r7, lr}
 800cc56:	b087      	sub	sp, #28
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800cc5e:	f107 0308 	add.w	r3, r7, #8
 800cc62:	6879      	ldr	r1, [r7, #4]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7ff ff75 	bl	800cb54 <_ZNK12SimpleString9lowerCaseEv>
 800cc6a:	f107 0310 	add.w	r3, r7, #16
 800cc6e:	6839      	ldr	r1, [r7, #0]
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7ff ff6f 	bl	800cb54 <_ZNK12SimpleString9lowerCaseEv>
 800cc76:	f107 0210 	add.w	r2, r7, #16
 800cc7a:	f107 0308 	add.w	r3, r7, #8
 800cc7e:	4611      	mov	r1, r2
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7ff ffcc 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 800cc86:	4603      	mov	r3, r0
 800cc88:	461c      	mov	r4, r3
 800cc8a:	f107 0310 	add.w	r3, r7, #16
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7ff ffb9 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800cc94:	f107 0308 	add.w	r3, r7, #8
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7ff ffb4 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800cc9e:	4623      	mov	r3, r4
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	371c      	adds	r7, #28
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd90      	pop	{r4, r7, pc}

0800cca8 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800ccb2:	6839      	ldr	r1, [r7, #0]
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f7ff ffb2 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	f083 0301 	eor.w	r3, r3, #1
 800ccc0:	b2db      	uxtb	r3, r3
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3708      	adds	r7, #8
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b084      	sub	sp, #16
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	60f8      	str	r0, [r7, #12]
 800ccd2:	60b9      	str	r1, [r7, #8]
 800ccd4:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800ccd6:	68b8      	ldr	r0, [r7, #8]
 800ccd8:	f7ff fbd1 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	4619      	mov	r1, r3
 800cce0:	68f8      	ldr	r0, [r7, #12]
 800cce2:	f7ff fbd8 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7ff fbc9 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800ccec:	4603      	mov	r3, r0
 800ccee:	4619      	mov	r1, r3
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f000 f817 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    return t;
 800ccf6:	bf00      	nop
}
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800cd0a:	6838      	ldr	r0, [r7, #0]
 800cd0c:	f7ff fbb7 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800cd10:	4603      	mov	r3, r0
 800cd12:	4619      	mov	r1, r3
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f000 f805 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
 800cd1a:	4603      	mov	r3, r0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3708      	adds	r7, #8
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b086      	sub	sp, #24
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7ff ff48 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800cd34:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800cd36:	6838      	ldr	r0, [r7, #0]
 800cd38:	f7ff fa0c 	bl	800c154 <_ZN12SimpleString6StrLenEPKc>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	3301      	adds	r3, #1
 800cd40:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800cd42:	697a      	ldr	r2, [r7, #20]
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	4413      	add	r3, r2
 800cd48:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7ff fb97 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800cd50:	4603      	mov	r3, r0
 800cd52:	68f9      	ldr	r1, [r7, #12]
 800cd54:	4618      	mov	r0, r3
 800cd56:	f000 f941 	bl	800cfdc <_ZN12SimpleString15copyToNewBufferEPKcj>
 800cd5a:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	4413      	add	r3, r2
 800cd62:	693a      	ldr	r2, [r7, #16]
 800cd64:	6839      	ldr	r1, [r7, #0]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7ff fa3f 	bl	800c1ea <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	68b9      	ldr	r1, [r7, #8]
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7ff fb49 	bl	800c408 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800cd76:	687b      	ldr	r3, [r7, #4]
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3718      	adds	r7, #24
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800cd80:	b590      	push	{r4, r7, lr}
 800cd82:	b08b      	sub	sp, #44	; 0x2c
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800cd8e:	68f8      	ldr	r0, [r7, #12]
 800cd90:	f7ff ff18 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800cd94:	4604      	mov	r4, r0
 800cd96:	68b8      	ldr	r0, [r7, #8]
 800cd98:	f7ff ff14 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	429c      	cmp	r4, r3
 800cda0:	bf8c      	ite	hi
 800cda2:	2301      	movhi	r3, #1
 800cda4:	2300      	movls	r3, #0
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d006      	beq.n	800cdba <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800cdac:	79fb      	ldrb	r3, [r7, #7]
 800cdae:	461a      	mov	r2, r3
 800cdb0:	68f9      	ldr	r1, [r7, #12]
 800cdb2:	68b8      	ldr	r0, [r7, #8]
 800cdb4:	f7ff ffe4 	bl	800cd80 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800cdb8:	e02b      	b.n	800ce12 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800cdba:	79fb      	ldrb	r3, [r7, #7]
 800cdbc:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800cdc2:	68b8      	ldr	r0, [r7, #8]
 800cdc4:	f7ff fefe 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800cdc8:	4604      	mov	r4, r0
 800cdca:	68f8      	ldr	r0, [r7, #12]
 800cdcc:	f7ff fefa 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	1ae2      	subs	r2, r4, r3
 800cdd4:	f107 0114 	add.w	r1, r7, #20
 800cdd8:	f107 0320 	add.w	r3, r7, #32
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7ff fb75 	bl	800c4cc <_ZN12SimpleStringC1EPKcj>
 800cde2:	f107 0318 	add.w	r3, r7, #24
 800cde6:	f107 0120 	add.w	r1, r7, #32
 800cdea:	68fa      	ldr	r2, [r7, #12]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7ff ff6c 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800cdf2:	f107 0318 	add.w	r3, r7, #24
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f7ff fbb8 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800cdfe:	f107 0318 	add.w	r3, r7, #24
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7ff feff 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800ce08:	f107 0320 	add.w	r3, r7, #32
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f7ff fefa 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 800ce12:	372c      	adds	r7, #44	; 0x2c
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd90      	pop	{r4, r7, pc}

0800ce18 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b086      	sub	sp, #24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	607a      	str	r2, [r7, #4]
 800ce24:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800ce26:	68b8      	ldr	r0, [r7, #8]
 800ce28:	f7ff fecc 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	bf8c      	ite	hi
 800ce36:	2301      	movhi	r3, #1
 800ce38:	2300      	movls	r3, #0
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d004      	beq.n	800ce4a <_ZNK12SimpleString9subStringEjj+0x32>
 800ce40:	4919      	ldr	r1, [pc, #100]	; (800cea8 <_ZNK12SimpleString9subStringEjj+0x90>)
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	f7ff fb27 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800ce48:	e029      	b.n	800ce9e <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800ce4a:	68b8      	ldr	r0, [r7, #8]
 800ce4c:	f7ff fb17 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800ce50:	4602      	mov	r2, r0
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	441a      	add	r2, r3
 800ce56:	f107 0310 	add.w	r3, r7, #16
 800ce5a:	4611      	mov	r1, r2
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7ff fb1a 	bl	800c496 <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800ce62:	f107 0310 	add.w	r3, r7, #16
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7ff feac 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	4293      	cmp	r3, r2
 800ce72:	bf34      	ite	cc
 800ce74:	2301      	movcc	r3, #1
 800ce76:	2300      	movcs	r3, #0
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d004      	beq.n	800ce88 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800ce7e:	693a      	ldr	r2, [r7, #16]
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	4413      	add	r3, r2
 800ce84:	2200      	movs	r2, #0
 800ce86:	701a      	strb	r2, [r3, #0]

    return newString;
 800ce88:	f107 0310 	add.w	r3, r7, #16
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f7ff fb55 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800ce94:	f107 0310 	add.w	r3, r7, #16
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7ff feb4 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 800ce9e:	68f8      	ldr	r0, [r7, #12]
 800cea0:	3718      	adds	r7, #24
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	08023d80 	.word	0x08023d80

0800ceac <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	f04f 33ff 	mov.w	r3, #4294967295
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	68b9      	ldr	r1, [r7, #8]
 800cec2:	f7ff ffa9 	bl	800ce18 <_ZNK12SimpleString9subStringEjj>
}
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b082      	sub	sp, #8
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
 800ced6:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f7ff fad0 	bl	800c47e <_ZNK12SimpleString9getBufferEv>
 800cede:	4602      	mov	r2, r0
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	4413      	add	r3, r2
 800cee4:	781b      	ldrb	r3, [r3, #0]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b082      	sub	sp, #8
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	460b      	mov	r3, r1
 800cef8:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800cefa:	78fb      	ldrb	r3, [r7, #3]
 800cefc:	461a      	mov	r2, r3
 800cefe:	2100      	movs	r1, #0
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 f805 	bl	800cf10 <_ZNK12SimpleString8findFromEjc>
 800cf06:	4603      	mov	r3, r0
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3708      	adds	r7, #8
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	4613      	mov	r3, r2
 800cf1c:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f7ff fe50 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800cf24:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	617b      	str	r3, [r7, #20]
 800cf2a:	697a      	ldr	r2, [r7, #20]
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d213      	bcs.n	800cf5a <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800cf32:	6979      	ldr	r1, [r7, #20]
 800cf34:	68f8      	ldr	r0, [r7, #12]
 800cf36:	f7ff ffca 	bl	800cece <_ZNK12SimpleString2atEj>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	79fb      	ldrb	r3, [r7, #7]
 800cf40:	4293      	cmp	r3, r2
 800cf42:	bf0c      	ite	eq
 800cf44:	2301      	moveq	r3, #1
 800cf46:	2300      	movne	r3, #0
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d001      	beq.n	800cf52 <_ZNK12SimpleString8findFromEjc+0x42>
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	e005      	b.n	800cf5e <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	3301      	adds	r3, #1
 800cf56:	617b      	str	r3, [r7, #20]
 800cf58:	e7e7      	b.n	800cf2a <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800cf5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3718      	adds	r7, #24
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
	...

0800cf68 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	4611      	mov	r1, r2
 800cf74:	461a      	mov	r2, r3
 800cf76:	460b      	mov	r3, r1
 800cf78:	71fb      	strb	r3, [r7, #7]
 800cf7a:	4613      	mov	r3, r2
 800cf7c:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800cf7e:	79fb      	ldrb	r3, [r7, #7]
 800cf80:	4619      	mov	r1, r3
 800cf82:	68b8      	ldr	r0, [r7, #8]
 800cf84:	f7ff ffb3 	bl	800ceee <_ZNK12SimpleString4findEc>
 800cf88:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf90:	d104      	bne.n	800cf9c <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800cf92:	4911      	ldr	r1, [pc, #68]	; (800cfd8 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800cf94:	68f8      	ldr	r0, [r7, #12]
 800cf96:	f7ff fa7e 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800cf9a:	e019      	b.n	800cfd0 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800cf9c:	79bb      	ldrb	r3, [r7, #6]
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	6979      	ldr	r1, [r7, #20]
 800cfa2:	68b8      	ldr	r0, [r7, #8]
 800cfa4:	f7ff ffb4 	bl	800cf10 <_ZNK12SimpleString8findFromEjc>
 800cfa8:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb0:	d106      	bne.n	800cfc0 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	697a      	ldr	r2, [r7, #20]
 800cfb6:	68b9      	ldr	r1, [r7, #8]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7ff ff77 	bl	800ceac <_ZNK12SimpleString9subStringEj>
 800cfbe:	e007      	b.n	800cfd0 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800cfc0:	693a      	ldr	r2, [r7, #16]
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	1ad3      	subs	r3, r2, r3
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	697a      	ldr	r2, [r7, #20]
 800cfca:	68b9      	ldr	r1, [r7, #8]
 800cfcc:	f7ff ff24 	bl	800ce18 <_ZNK12SimpleString9subStringEjj>
}
 800cfd0:	68f8      	ldr	r0, [r7, #12]
 800cfd2:	3718      	adds	r7, #24
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	08023d80 	.word	0x08023d80

0800cfdc <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800cfe6:	f240 2275 	movw	r2, #629	; 0x275
 800cfea:	490a      	ldr	r1, [pc, #40]	; (800d014 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800cfec:	6838      	ldr	r0, [r7, #0]
 800cfee:	f7fe ffd7 	bl	800bfa0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800cff2:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800cff4:	683a      	ldr	r2, [r7, #0]
 800cff6:	6879      	ldr	r1, [r7, #4]
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f7ff f8f6 	bl	800c1ea <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	3b01      	subs	r3, #1
 800d002:	68fa      	ldr	r2, [r7, #12]
 800d004:	4413      	add	r3, r2
 800d006:	2200      	movs	r2, #0
 800d008:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800d00a:	68fb      	ldr	r3, [r7, #12]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	08023cc0 	.word	0x08023cc0

0800d018 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	4603      	mov	r3, r0
 800d020:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800d022:	79fb      	ldrb	r3, [r7, #7]
 800d024:	2b2f      	cmp	r3, #47	; 0x2f
 800d026:	d904      	bls.n	800d032 <_ZN12SimpleString7isDigitEc+0x1a>
 800d028:	79fb      	ldrb	r3, [r7, #7]
 800d02a:	2b39      	cmp	r3, #57	; 0x39
 800d02c:	d801      	bhi.n	800d032 <_ZN12SimpleString7isDigitEc+0x1a>
 800d02e:	2301      	movs	r3, #1
 800d030:	e000      	b.n	800d034 <_ZN12SimpleString7isDigitEc+0x1c>
 800d032:	2300      	movs	r3, #0
}
 800d034:	4618      	mov	r0, r3
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	4603      	mov	r3, r0
 800d048:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800d04a:	79fb      	ldrb	r3, [r7, #7]
 800d04c:	2b20      	cmp	r3, #32
 800d04e:	d005      	beq.n	800d05c <_ZN12SimpleString7isSpaceEc+0x1c>
 800d050:	79fb      	ldrb	r3, [r7, #7]
 800d052:	2b08      	cmp	r3, #8
 800d054:	d904      	bls.n	800d060 <_ZN12SimpleString7isSpaceEc+0x20>
 800d056:	79fb      	ldrb	r3, [r7, #7]
 800d058:	2b0d      	cmp	r3, #13
 800d05a:	d801      	bhi.n	800d060 <_ZN12SimpleString7isSpaceEc+0x20>
 800d05c:	2301      	movs	r3, #1
 800d05e:	e000      	b.n	800d062 <_ZN12SimpleString7isSpaceEc+0x22>
 800d060:	2300      	movs	r3, #0
}
 800d062:	4618      	mov	r0, r3
 800d064:	370c      	adds	r7, #12
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr

0800d06e <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800d06e:	b480      	push	{r7}
 800d070:	b083      	sub	sp, #12
 800d072:	af00      	add	r7, sp, #0
 800d074:	4603      	mov	r3, r0
 800d076:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800d078:	79fb      	ldrb	r3, [r7, #7]
 800d07a:	2b40      	cmp	r3, #64	; 0x40
 800d07c:	d904      	bls.n	800d088 <_ZN12SimpleString7isUpperEc+0x1a>
 800d07e:	79fb      	ldrb	r3, [r7, #7]
 800d080:	2b5a      	cmp	r3, #90	; 0x5a
 800d082:	d801      	bhi.n	800d088 <_ZN12SimpleString7isUpperEc+0x1a>
 800d084:	2301      	movs	r3, #1
 800d086:	e000      	b.n	800d08a <_ZN12SimpleString7isUpperEc+0x1c>
 800d088:	2300      	movs	r3, #0
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	370c      	adds	r7, #12
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr

0800d096 <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800d096:	b480      	push	{r7}
 800d098:	b083      	sub	sp, #12
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	4603      	mov	r3, r0
 800d09e:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800d0a0:	79fb      	ldrb	r3, [r7, #7]
 800d0a2:	2b1f      	cmp	r3, #31
 800d0a4:	d902      	bls.n	800d0ac <_ZN12SimpleString9isControlEc+0x16>
 800d0a6:	79fb      	ldrb	r3, [r7, #7]
 800d0a8:	2b7f      	cmp	r3, #127	; 0x7f
 800d0aa:	d101      	bne.n	800d0b0 <_ZN12SimpleString9isControlEc+0x1a>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e000      	b.n	800d0b2 <_ZN12SimpleString9isControlEc+0x1c>
 800d0b0:	2300      	movs	r3, #0
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800d0be:	b480      	push	{r7}
 800d0c0:	b083      	sub	sp, #12
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800d0c8:	79fb      	ldrb	r3, [r7, #7]
 800d0ca:	2b06      	cmp	r3, #6
 800d0cc:	d904      	bls.n	800d0d8 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800d0ce:	79fb      	ldrb	r3, [r7, #7]
 800d0d0:	2b0d      	cmp	r3, #13
 800d0d2:	d801      	bhi.n	800d0d8 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e000      	b.n	800d0da <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800d0d8:	2300      	movs	r3, #0
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	370c      	adds	r7, #12
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr
	...

0800d0e8 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800d0f4:	78fb      	ldrb	r3, [r7, #3]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d001      	beq.n	800d0fe <_Z10StringFromb+0x16>
 800d0fa:	4a06      	ldr	r2, [pc, #24]	; (800d114 <_Z10StringFromb+0x2c>)
 800d0fc:	e000      	b.n	800d100 <_Z10StringFromb+0x18>
 800d0fe:	4a06      	ldr	r2, [pc, #24]	; (800d118 <_Z10StringFromb+0x30>)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	4906      	ldr	r1, [pc, #24]	; (800d11c <_Z10StringFromb+0x34>)
 800d104:	4618      	mov	r0, r3
 800d106:	f000 fa85 	bl	800d614 <_Z16StringFromFormatPKcz>
}
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	3708      	adds	r7, #8
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	08023d8c 	.word	0x08023d8c
 800d118:	08023d94 	.word	0x08023d94
 800d11c:	08023d9c 	.word	0x08023d9c

0800d120 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800d12a:	6839      	ldr	r1, [r7, #0]
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f7ff f9b2 	bl	800c496 <_ZN12SimpleStringC1EPKc>
}
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
	...

0800d13c <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800d13c:	b590      	push	{r4, r7, lr}
 800d13e:	b085      	sub	sp, #20
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800d146:	2400      	movs	r4, #0
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00e      	beq.n	800d16c <_Z25PrintableStringFromOrNullPKc+0x30>
 800d14e:	f107 0308 	add.w	r3, r7, #8
 800d152:	6839      	ldr	r1, [r7, #0]
 800d154:	4618      	mov	r0, r3
 800d156:	f7ff ffe3 	bl	800d120 <_Z10StringFromPKc>
 800d15a:	2401      	movs	r4, #1
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f107 0208 	add.w	r2, r7, #8
 800d162:	4611      	mov	r1, r2
 800d164:	4618      	mov	r0, r3
 800d166:	f7ff fc3f 	bl	800c9e8 <_ZNK12SimpleString9printableEv>
 800d16a:	e004      	b.n	800d176 <_Z25PrintableStringFromOrNullPKc+0x3a>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	4908      	ldr	r1, [pc, #32]	; (800d190 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800d170:	4618      	mov	r0, r3
 800d172:	f7ff ffd5 	bl	800d120 <_Z10StringFromPKc>
 800d176:	2c00      	cmp	r4, #0
 800d178:	d004      	beq.n	800d184 <_Z25PrintableStringFromOrNullPKc+0x48>
 800d17a:	f107 0308 	add.w	r3, r7, #8
 800d17e:	4618      	mov	r0, r3
 800d180:	f7ff fd41 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800d184:	bf00      	nop
}
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	3714      	adds	r7, #20
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd90      	pop	{r4, r7, pc}
 800d18e:	bf00      	nop
 800d190:	08023da0 	.word	0x08023da0

0800d194 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	683a      	ldr	r2, [r7, #0]
 800d1a2:	4904      	ldr	r1, [pc, #16]	; (800d1b4 <_Z10StringFromi+0x20>)
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f000 fa35 	bl	800d614 <_Z16StringFromFormatPKcz>
}
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	3708      	adds	r7, #8
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	08023da8 	.word	0x08023da8

0800d1b8 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	683a      	ldr	r2, [r7, #0]
 800d1c6:	4904      	ldr	r1, [pc, #16]	; (800d1d8 <_Z10StringFroml+0x20>)
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f000 fa23 	bl	800d614 <_Z16StringFromFormatPKcz>
}
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	3708      	adds	r7, #8
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	08023dac 	.word	0x08023dac

0800d1dc <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b086      	sub	sp, #24
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800d1e6:	f107 0308 	add.w	r3, r7, #8
 800d1ea:	4910      	ldr	r1, [pc, #64]	; (800d22c <_Z10StringFromPKv+0x50>)
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7ff f952 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800d1f2:	f107 0310 	add.w	r3, r7, #16
 800d1f6:	6839      	ldr	r1, [r7, #0]
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f000 f9a1 	bl	800d540 <_Z13HexStringFromPKv>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f107 0210 	add.w	r2, r7, #16
 800d204:	f107 0108 	add.w	r1, r7, #8
 800d208:	4618      	mov	r0, r3
 800d20a:	f7ff fd5e 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800d20e:	f107 0310 	add.w	r3, r7, #16
 800d212:	4618      	mov	r0, r3
 800d214:	f7ff fcf7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800d218:	f107 0308 	add.w	r3, r7, #8
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7ff fcf2 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800d222:	bf00      	nop
}
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	3718      	adds	r7, #24
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	08023db0 	.word	0x08023db0

0800d230 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b086      	sub	sp, #24
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800d23a:	f107 0308 	add.w	r3, r7, #8
 800d23e:	4910      	ldr	r1, [pc, #64]	; (800d280 <_Z10StringFromPFvvE+0x50>)
 800d240:	4618      	mov	r0, r3
 800d242:	f7ff f928 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800d246:	f107 0310 	add.w	r3, r7, #16
 800d24a:	6839      	ldr	r1, [r7, #0]
 800d24c:	4618      	mov	r0, r3
 800d24e:	f000 f98b 	bl	800d568 <_Z13HexStringFromPFvvE>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f107 0210 	add.w	r2, r7, #16
 800d258:	f107 0108 	add.w	r1, r7, #8
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7ff fd34 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800d262:	f107 0310 	add.w	r3, r7, #16
 800d266:	4618      	mov	r0, r3
 800d268:	f7ff fccd 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800d26c:	f107 0308 	add.w	r3, r7, #8
 800d270:	4618      	mov	r0, r3
 800d272:	f7ff fcc8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800d276:	bf00      	nop
}
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	3718      	adds	r7, #24
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	08023db0 	.word	0x08023db0

0800d284 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	683a      	ldr	r2, [r7, #0]
 800d292:	4904      	ldr	r1, [pc, #16]	; (800d2a4 <_Z13HexStringFroml+0x20>)
 800d294:	4618      	mov	r0, r3
 800d296:	f000 f9bd 	bl	800d614 <_Z16StringFromFormatPKcz>
}
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	3708      	adds	r7, #8
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	08023db4 	.word	0x08023db4

0800d2a8 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	683a      	ldr	r2, [r7, #0]
 800d2b6:	4904      	ldr	r1, [pc, #16]	; (800d2c8 <_Z13HexStringFromi+0x20>)
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f000 f9ab 	bl	800d614 <_Z16StringFromFormatPKcz>
}
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	3708      	adds	r7, #8
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	08023db8 	.word	0x08023db8

0800d2cc <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b086      	sub	sp, #24
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800d2d8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4912      	ldr	r1, [pc, #72]	; (800d328 <_Z13HexStringFroma+0x5c>)
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f000 f997 	bl	800d614 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800d2e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	da16      	bge.n	800d31c <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f7ff fc68 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800d2f4:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	1e9a      	subs	r2, r3, #2
 800d2fa:	f107 030c 	add.w	r3, r7, #12
 800d2fe:	6879      	ldr	r1, [r7, #4]
 800d300:	4618      	mov	r0, r3
 800d302:	f7ff fdd3 	bl	800ceac <_ZNK12SimpleString9subStringEj>
 800d306:	f107 030c 	add.w	r3, r7, #12
 800d30a:	4619      	mov	r1, r3
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f7ff f92e 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800d312:	f107 030c 	add.w	r3, r7, #12
 800d316:	4618      	mov	r0, r3
 800d318:	f7ff fc75 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    }
    return result;
 800d31c:	bf00      	nop
}
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	3718      	adds	r7, #24
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	08023db8 	.word	0x08023db8

0800d32c <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	683a      	ldr	r2, [r7, #0]
 800d33a:	4904      	ldr	r1, [pc, #16]	; (800d34c <_Z13HexStringFromm+0x20>)
 800d33c:	4618      	mov	r0, r3
 800d33e:	f000 f969 	bl	800d614 <_Z16StringFromFormatPKcz>
}
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	3708      	adds	r7, #8
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	08023db4 	.word	0x08023db4

0800d350 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	683a      	ldr	r2, [r7, #0]
 800d35e:	4904      	ldr	r1, [pc, #16]	; (800d370 <_Z13HexStringFromj+0x20>)
 800d360:	4618      	mov	r0, r3
 800d362:	f000 f957 	bl	800d614 <_Z16StringFromFormatPKcz>
}
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	3708      	adds	r7, #8
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	08023db8 	.word	0x08023db8

0800d374 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d37e:	f107 0308 	add.w	r3, r7, #8
 800d382:	6839      	ldr	r1, [r7, #0]
 800d384:	4618      	mov	r0, r3
 800d386:	f7ff ff8f 	bl	800d2a8 <_Z13HexStringFromi>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f107 0208 	add.w	r2, r7, #8
 800d390:	4611      	mov	r1, r2
 800d392:	4618      	mov	r0, r3
 800d394:	f000 f87e 	bl	800d494 <_Z26BracketsFormattedHexString12SimpleString>
 800d398:	f107 0308 	add.w	r3, r7, #8
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7ff fc32 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800d3a2:	bf00      	nop
}
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	3710      	adds	r7, #16
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d3b6:	f107 0308 	add.w	r3, r7, #8
 800d3ba:	6839      	ldr	r1, [r7, #0]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7ff ffc7 	bl	800d350 <_Z13HexStringFromj>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f107 0208 	add.w	r2, r7, #8
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f000 f862 	bl	800d494 <_Z26BracketsFormattedHexString12SimpleString>
 800d3d0:	f107 0308 	add.w	r3, r7, #8
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7ff fc16 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800d3da:	bf00      	nop
}
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	3710      	adds	r7, #16
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d3ee:	f107 0308 	add.w	r3, r7, #8
 800d3f2:	6839      	ldr	r1, [r7, #0]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7ff ff45 	bl	800d284 <_Z13HexStringFroml>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f107 0208 	add.w	r2, r7, #8
 800d400:	4611      	mov	r1, r2
 800d402:	4618      	mov	r0, r3
 800d404:	f000 f846 	bl	800d494 <_Z26BracketsFormattedHexString12SimpleString>
 800d408:	f107 0308 	add.w	r3, r7, #8
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7ff fbfa 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800d412:	bf00      	nop
}
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b084      	sub	sp, #16
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d426:	f107 0308 	add.w	r3, r7, #8
 800d42a:	6839      	ldr	r1, [r7, #0]
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7ff ff7d 	bl	800d32c <_Z13HexStringFromm>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f107 0208 	add.w	r2, r7, #8
 800d438:	4611      	mov	r1, r2
 800d43a:	4618      	mov	r0, r3
 800d43c:	f000 f82a 	bl	800d494 <_Z26BracketsFormattedHexString12SimpleString>
 800d440:	f107 0308 	add.w	r3, r7, #8
 800d444:	4618      	mov	r0, r3
 800d446:	f7ff fbde 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800d44a:	bf00      	nop
}
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	3710      	adds	r7, #16
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	460b      	mov	r3, r1
 800d45e:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d460:	f107 0308 	add.w	r3, r7, #8
 800d464:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800d468:	4611      	mov	r1, r2
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7ff ff2e 	bl	800d2cc <_Z13HexStringFroma>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f107 0208 	add.w	r2, r7, #8
 800d476:	4611      	mov	r1, r2
 800d478:	4618      	mov	r0, r3
 800d47a:	f000 f80b 	bl	800d494 <_Z26BracketsFormattedHexString12SimpleString>
 800d47e:	f107 0308 	add.w	r3, r7, #8
 800d482:	4618      	mov	r0, r3
 800d484:	f7ff fbbf 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800d488:	bf00      	nop
}
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
	...

0800d494 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b088      	sub	sp, #32
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800d49e:	f107 0310 	add.w	r3, r7, #16
 800d4a2:	4917      	ldr	r1, [pc, #92]	; (800d500 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7fe fff6 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800d4aa:	f107 0308 	add.w	r3, r7, #8
 800d4ae:	f107 0110 	add.w	r1, r7, #16
 800d4b2:	683a      	ldr	r2, [r7, #0]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7ff fc08 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800d4ba:	f107 0318 	add.w	r3, r7, #24
 800d4be:	4911      	ldr	r1, [pc, #68]	; (800d504 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7fe ffe8 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f107 0218 	add.w	r2, r7, #24
 800d4cc:	f107 0108 	add.w	r1, r7, #8
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7ff fbfa 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800d4d6:	f107 0318 	add.w	r3, r7, #24
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7ff fb93 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800d4e0:	f107 0308 	add.w	r3, r7, #8
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7ff fb8e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800d4ea:	f107 0310 	add.w	r3, r7, #16
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7ff fb89 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800d4f4:	bf00      	nop
}
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	3720      	adds	r7, #32
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	08023dbc 	.word	0x08023dbc
 800d504:	08023dc0 	.word	0x08023dc0

0800d508 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800d508:	b480      	push	{r7}
 800d50a:	b085      	sub	sp, #20
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800d510:	1d3b      	adds	r3, r7, #4
 800d512:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3714      	adds	r7, #20
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800d524:	b480      	push	{r7}
 800d526:	b085      	sub	sp, #20
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800d52c:	1d3b      	adds	r3, r7, #4
 800d52e:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
}
 800d534:	4618      	mov	r0, r3
 800d536:	3714      	adds	r7, #20
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr

0800d540 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800d54a:	6838      	ldr	r0, [r7, #0]
 800d54c:	f7ff ffdc 	bl	800d508 <_ZL25convertPointerToLongValuePKv>
 800d550:	4602      	mov	r2, r0
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	4903      	ldr	r1, [pc, #12]	; (800d564 <_Z13HexStringFromPKv+0x24>)
 800d556:	4618      	mov	r0, r3
 800d558:	f000 f85c 	bl	800d614 <_Z16StringFromFormatPKcz>
}
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	3708      	adds	r7, #8
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	08023db4 	.word	0x08023db4

0800d568 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800d572:	6838      	ldr	r0, [r7, #0]
 800d574:	f7ff ffd6 	bl	800d524 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800d578:	4602      	mov	r2, r0
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	4903      	ldr	r1, [pc, #12]	; (800d58c <_Z13HexStringFromPFvvE+0x24>)
 800d57e:	4618      	mov	r0, r3
 800d580:	f000 f848 	bl	800d614 <_Z16StringFromFormatPKcz>
}
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	08023db4 	.word	0x08023db4

0800d590 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b086      	sub	sp, #24
 800d594:	af02      	add	r7, sp, #8
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	ed87 0b00 	vstr	d0, [r7]
 800d59c:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800d59e:	4b18      	ldr	r3, [pc, #96]	; (800d600 <_Z10StringFromdi+0x70>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	ed97 0b00 	vldr	d0, [r7]
 800d5a6:	4798      	blx	r3
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bf14      	ite	ne
 800d5ae:	2301      	movne	r3, #1
 800d5b0:	2300      	moveq	r3, #0
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d004      	beq.n	800d5c2 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800d5b8:	4912      	ldr	r1, [pc, #72]	; (800d604 <_Z10StringFromdi+0x74>)
 800d5ba:	68f8      	ldr	r0, [r7, #12]
 800d5bc:	f7fe ff6b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800d5c0:	e01a      	b.n	800d5f8 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800d5c2:	4b11      	ldr	r3, [pc, #68]	; (800d608 <_Z10StringFromdi+0x78>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	ed97 0b00 	vldr	d0, [r7]
 800d5ca:	4798      	blx	r3
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	bf14      	ite	ne
 800d5d2:	2301      	movne	r3, #1
 800d5d4:	2300      	moveq	r3, #0
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d004      	beq.n	800d5e6 <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800d5dc:	490b      	ldr	r1, [pc, #44]	; (800d60c <_Z10StringFromdi+0x7c>)
 800d5de:	68f8      	ldr	r0, [r7, #12]
 800d5e0:	f7fe ff59 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800d5e4:	e008      	b.n	800d5f8 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5ec:	e9cd 2300 	strd	r2, r3, [sp]
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	4907      	ldr	r1, [pc, #28]	; (800d610 <_Z10StringFromdi+0x80>)
 800d5f4:	f000 f80e 	bl	800d614 <_Z16StringFromFormatPKcz>
}
 800d5f8:	68f8      	ldr	r0, [r7, #12]
 800d5fa:	3710      	adds	r7, #16
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	200000e8 	.word	0x200000e8
 800d604:	08023df4 	.word	0x08023df4
 800d608:	200000ec 	.word	0x200000ec
 800d60c:	08023e08 	.word	0x08023e08
 800d610:	08023e18 	.word	0x08023e18

0800d614 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800d614:	b40e      	push	{r1, r2, r3}
 800d616:	b580      	push	{r7, lr}
 800d618:	b087      	sub	sp, #28
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800d61e:	4910      	ldr	r1, [pc, #64]	; (800d660 <_Z16StringFromFormatPKcz+0x4c>)
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f7fe ff38 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800d626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d62a:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800d62c:	f107 0310 	add.w	r3, r7, #16
 800d630:	68fa      	ldr	r2, [r7, #12]
 800d632:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d634:	4618      	mov	r0, r3
 800d636:	f000 f839 	bl	800d6ac <_Z17VStringFromFormatPKcSt9__va_list>
 800d63a:	f107 0310 	add.w	r3, r7, #16
 800d63e:	4619      	mov	r1, r3
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7fe ff94 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800d646:	f107 0310 	add.w	r3, r7, #16
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7ff fadb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800d650:	bf00      	nop
}
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	371c      	adds	r7, #28
 800d656:	46bd      	mov	sp, r7
 800d658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d65c:	b003      	add	sp, #12
 800d65e:	4770      	bx	lr
 800d660:	08023d80 	.word	0x08023d80

0800d664 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	683a      	ldr	r2, [r7, #0]
 800d672:	4904      	ldr	r1, [pc, #16]	; (800d684 <_Z10StringFromj+0x20>)
 800d674:	4618      	mov	r0, r3
 800d676:	f7ff ffcd 	bl	800d614 <_Z16StringFromFormatPKcz>
}
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	08023e24 	.word	0x08023e24

0800d688 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	683a      	ldr	r2, [r7, #0]
 800d696:	4904      	ldr	r1, [pc, #16]	; (800d6a8 <_Z10StringFromm+0x20>)
 800d698:	4618      	mov	r0, r3
 800d69a:	f7ff ffbb 	bl	800d614 <_Z16StringFromFormatPKcz>
}
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	08023e28 	.word	0x08023e28

0800d6ac <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800d6ac:	b590      	push	{r4, r7, lr}
 800d6ae:	b0a7      	sub	sp, #156	; 0x9c
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800d6bc:	492e      	ldr	r1, [pc, #184]	; (800d778 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800d6be:	68f8      	ldr	r0, [r7, #12]
 800d6c0:	f7fe fee9 	bl	800c496 <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800d6c4:	4b2d      	ldr	r3, [pc, #180]	; (800d77c <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800d6c6:	681c      	ldr	r4, [r3, #0]
 800d6c8:	f107 0014 	add.w	r0, r7, #20
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	68ba      	ldr	r2, [r7, #8]
 800d6d0:	2164      	movs	r1, #100	; 0x64
 800d6d2:	47a0      	blx	r4
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800d6da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d6de:	2b63      	cmp	r3, #99	; 0x63
 800d6e0:	d813      	bhi.n	800d70a <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800d6e2:	f107 0214 	add.w	r2, r7, #20
 800d6e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d6ea:	4611      	mov	r1, r2
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7fe fed2 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800d6f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	68f8      	ldr	r0, [r7, #12]
 800d6fa:	f7fe ff38 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800d6fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d702:	4618      	mov	r0, r3
 800d704:	f7ff fa7f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800d708:	e031      	b.n	800d76e <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800d70a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d70e:	3301      	adds	r3, #1
 800d710:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800d714:	f240 32c3 	movw	r2, #963	; 0x3c3
 800d718:	4919      	ldr	r1, [pc, #100]	; (800d780 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800d71a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d71e:	f7fe fc3f 	bl	800bfa0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800d722:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800d726:	4b15      	ldr	r3, [pc, #84]	; (800d77c <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800d728:	681c      	ldr	r4, [r3, #0]
 800d72a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d72c:	68ba      	ldr	r2, [r7, #8]
 800d72e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d732:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d736:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800d738:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d73c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d740:	4618      	mov	r0, r3
 800d742:	f7fe fea8 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800d746:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d74a:	4619      	mov	r1, r3
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	f7fe ff0e 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800d752:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d756:	4618      	mov	r0, r3
 800d758:	f7ff fa55 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800d75c:	f240 33c7 	movw	r3, #967	; 0x3c7
 800d760:	4a07      	ldr	r2, [pc, #28]	; (800d780 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800d762:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d766:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d76a:	f7fe fc2d 	bl	800bfc8 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800d76e:	bf00      	nop
}
 800d770:	68f8      	ldr	r0, [r7, #12]
 800d772:	379c      	adds	r7, #156	; 0x9c
 800d774:	46bd      	mov	sp, r7
 800d776:	bd90      	pop	{r4, r7, pc}
 800d778:	08023d80 	.word	0x08023d80
 800d77c:	200000b0 	.word	0x200000b0
 800d780:	08023cc0 	.word	0x08023cc0

0800d784 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b08a      	sub	sp, #40	; 0x28
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800d790:	491f      	ldr	r1, [pc, #124]	; (800d810 <_Z16StringFromBinaryPKhj+0x8c>)
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f7fe fe7f 	bl	800c496 <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800d798:	2300      	movs	r3, #0
 800d79a:	627b      	str	r3, [r7, #36]	; 0x24
 800d79c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d219      	bcs.n	800d7d8 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800d7a4:	68ba      	ldr	r2, [r7, #8]
 800d7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a8:	4413      	add	r3, r2
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	f107 0314 	add.w	r3, r7, #20
 800d7b2:	4918      	ldr	r1, [pc, #96]	; (800d814 <_Z16StringFromBinaryPKhj+0x90>)
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7ff ff2d 	bl	800d614 <_Z16StringFromFormatPKcz>
 800d7ba:	f107 0314 	add.w	r3, r7, #20
 800d7be:	4619      	mov	r1, r3
 800d7c0:	68f8      	ldr	r0, [r7, #12]
 800d7c2:	f7ff fa9d 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800d7c6:	f107 0314 	add.w	r3, r7, #20
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7ff fa1b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	627b      	str	r3, [r7, #36]	; 0x24
 800d7d6:	e7e1      	b.n	800d79c <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f7ff f9f3 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	f107 001c 	add.w	r0, r7, #28
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	68f9      	ldr	r1, [r7, #12]
 800d7ea:	f7ff fb15 	bl	800ce18 <_ZNK12SimpleString9subStringEjj>
 800d7ee:	f107 031c 	add.w	r3, r7, #28
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	68f8      	ldr	r0, [r7, #12]
 800d7f6:	f7fe feba 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800d7fa:	f107 031c 	add.w	r3, r7, #28
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7ff fa01 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    return result;
 800d804:	bf00      	nop
}
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	3728      	adds	r7, #40	; 0x28
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	08023d80 	.word	0x08023d80
 800d814:	08023e2c 	.word	0x08023e2c

0800d818 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d006      	beq.n	800d838 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	68b9      	ldr	r1, [r7, #8]
 800d830:	4618      	mov	r0, r3
 800d832:	f7ff ffa7 	bl	800d784 <_Z16StringFromBinaryPKhj>
 800d836:	e004      	b.n	800d842 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	4904      	ldr	r1, [pc, #16]	; (800d84c <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7ff fc6f 	bl	800d120 <_Z10StringFromPKc>
}
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	08023da0 	.word	0x08023da0

0800d850 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b088      	sub	sp, #32
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	4913      	ldr	r1, [pc, #76]	; (800d8b0 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800d862:	4618      	mov	r0, r3
 800d864:	f7ff fed6 	bl	800d614 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2b80      	cmp	r3, #128	; 0x80
 800d86c:	bf28      	it	cs
 800d86e:	2380      	movcs	r3, #128	; 0x80
 800d870:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800d872:	f107 0314 	add.w	r3, r7, #20
 800d876:	69fa      	ldr	r2, [r7, #28]
 800d878:	68b9      	ldr	r1, [r7, #8]
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7ff ffcc 	bl	800d818 <_Z22StringFromBinaryOrNullPKhj>
 800d880:	f107 0314 	add.w	r3, r7, #20
 800d884:	4619      	mov	r1, r3
 800d886:	68f8      	ldr	r0, [r7, #12]
 800d888:	f7ff fa3a 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800d88c:	f107 0314 	add.w	r3, r7, #20
 800d890:	4618      	mov	r0, r3
 800d892:	f7ff f9b8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d903      	bls.n	800d8a6 <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800d89e:	4905      	ldr	r1, [pc, #20]	; (800d8b4 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800d8a0:	68f8      	ldr	r0, [r7, #12]
 800d8a2:	f7ff fa3f 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800d8a6:	bf00      	nop
}
 800d8a8:	68f8      	ldr	r0, [r7, #12]
 800d8aa:	3720      	adds	r7, #32
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	08023e34 	.word	0x08023e34
 800d8b4:	08023e50 	.word	0x08023e50

0800d8b8 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d006      	beq.n	800d8d8 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	68b9      	ldr	r1, [r7, #8]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7ff ffbd 	bl	800d850 <_Z24StringFromBinaryWithSizePKhj>
 800d8d6:	e004      	b.n	800d8e2 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	4904      	ldr	r1, [pc, #16]	; (800d8ec <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7ff fc1f 	bl	800d120 <_Z10StringFromPKc>
}
 800d8e2:	68f8      	ldr	r0, [r7, #12]
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	08023da0 	.word	0x08023da0

0800d8f0 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b088      	sub	sp, #32
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	60b9      	str	r1, [r7, #8]
 800d8fa:	607a      	str	r2, [r7, #4]
 800d8fc:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800d8fe:	4925      	ldr	r1, [pc, #148]	; (800d994 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f7fe fdc8 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	2b04      	cmp	r3, #4
 800d90a:	d802      	bhi.n	800d912 <_Z20StringFromMaskedBitsmmj+0x22>
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	00db      	lsls	r3, r3, #3
 800d910:	e000      	b.n	800d914 <_Z20StringFromMaskedBitsmmj+0x24>
 800d912:	2320      	movs	r3, #32
 800d914:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800d916:	69bb      	ldr	r3, [r7, #24]
 800d918:	3b01      	subs	r3, #1
 800d91a:	2201      	movs	r2, #1
 800d91c:	fa02 f303 	lsl.w	r3, r2, r3
 800d920:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800d922:	2300      	movs	r3, #0
 800d924:	61fb      	str	r3, [r7, #28]
 800d926:	69fa      	ldr	r2, [r7, #28]
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d22d      	bcs.n	800d98a <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	4013      	ands	r3, r2
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00c      	beq.n	800d952 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800d938:	68ba      	ldr	r2, [r7, #8]
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	4013      	ands	r3, r2
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d001      	beq.n	800d946 <_Z20StringFromMaskedBitsmmj+0x56>
 800d942:	4b15      	ldr	r3, [pc, #84]	; (800d998 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800d944:	e000      	b.n	800d948 <_Z20StringFromMaskedBitsmmj+0x58>
 800d946:	4b15      	ldr	r3, [pc, #84]	; (800d99c <_Z20StringFromMaskedBitsmmj+0xac>)
 800d948:	4619      	mov	r1, r3
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f7ff f9ea 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
 800d950:	e003      	b.n	800d95a <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800d952:	4913      	ldr	r1, [pc, #76]	; (800d9a0 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800d954:	68f8      	ldr	r0, [r7, #12]
 800d956:	f7ff f9e5 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	f003 0307 	and.w	r3, r3, #7
 800d960:	2b07      	cmp	r3, #7
 800d962:	d108      	bne.n	800d976 <_Z20StringFromMaskedBitsmmj+0x86>
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	3b01      	subs	r3, #1
 800d968:	69fa      	ldr	r2, [r7, #28]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d003      	beq.n	800d976 <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800d96e:	490d      	ldr	r1, [pc, #52]	; (800d9a4 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f7ff f9d7 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	005b      	lsls	r3, r3, #1
 800d97a:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	005b      	lsls	r3, r3, #1
 800d980:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	3301      	adds	r3, #1
 800d986:	61fb      	str	r3, [r7, #28]
 800d988:	e7cd      	b.n	800d926 <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800d98a:	bf00      	nop
}
 800d98c:	68f8      	ldr	r0, [r7, #12]
 800d98e:	3720      	adds	r7, #32
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}
 800d994:	08023d80 	.word	0x08023d80
 800d998:	08023e58 	.word	0x08023e58
 800d99c:	08023e5c 	.word	0x08023e5c
 800d9a0:	08023e60 	.word	0x08023e60
 800d9a4:	08023e64 	.word	0x08023e64

0800d9a8 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800d9b2:	683a      	ldr	r2, [r7, #0]
 800d9b4:	4b18      	ldr	r3, [pc, #96]	; (800da18 <_Z23StringFromOrdinalNumberj+0x70>)
 800d9b6:	fba3 1302 	umull	r1, r3, r3, r2
 800d9ba:	08d9      	lsrs	r1, r3, #3
 800d9bc:	460b      	mov	r3, r1
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	440b      	add	r3, r1
 800d9c2:	005b      	lsls	r3, r3, #1
 800d9c4:	1ad3      	subs	r3, r2, r3
 800d9c6:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	2b0a      	cmp	r3, #10
 800d9cc:	d905      	bls.n	800d9da <_Z23StringFromOrdinalNumberj+0x32>
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	2b0d      	cmp	r3, #13
 800d9d2:	d802      	bhi.n	800d9da <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800d9d4:	4b11      	ldr	r3, [pc, #68]	; (800da1c <_Z23StringFromOrdinalNumberj+0x74>)
 800d9d6:	60fb      	str	r3, [r7, #12]
 800d9d8:	e013      	b.n	800da02 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	2b03      	cmp	r3, #3
 800d9de:	d102      	bne.n	800d9e6 <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800d9e0:	4b0f      	ldr	r3, [pc, #60]	; (800da20 <_Z23StringFromOrdinalNumberj+0x78>)
 800d9e2:	60fb      	str	r3, [r7, #12]
 800d9e4:	e00d      	b.n	800da02 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	2b02      	cmp	r3, #2
 800d9ea:	d102      	bne.n	800d9f2 <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800d9ec:	4b0d      	ldr	r3, [pc, #52]	; (800da24 <_Z23StringFromOrdinalNumberj+0x7c>)
 800d9ee:	60fb      	str	r3, [r7, #12]
 800d9f0:	e007      	b.n	800da02 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d102      	bne.n	800d9fe <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800d9f8:	4b0b      	ldr	r3, [pc, #44]	; (800da28 <_Z23StringFromOrdinalNumberj+0x80>)
 800d9fa:	60fb      	str	r3, [r7, #12]
 800d9fc:	e001      	b.n	800da02 <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800d9fe:	4b07      	ldr	r3, [pc, #28]	; (800da1c <_Z23StringFromOrdinalNumberj+0x74>)
 800da00:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	683a      	ldr	r2, [r7, #0]
 800da08:	4908      	ldr	r1, [pc, #32]	; (800da2c <_Z23StringFromOrdinalNumberj+0x84>)
 800da0a:	f7ff fe03 	bl	800d614 <_Z16StringFromFormatPKcz>
}
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	3710      	adds	r7, #16
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	cccccccd 	.word	0xcccccccd
 800da1c:	08023e68 	.word	0x08023e68
 800da20:	08023e6c 	.word	0x08023e6c
 800da24:	08023e70 	.word	0x08023e70
 800da28:	08023e74 	.word	0x08023e74
 800da2c:	08023e78 	.word	0x08023e78

0800da30 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	3304      	adds	r3, #4
 800da3c:	4907      	ldr	r1, [pc, #28]	; (800da5c <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800da3e:	4618      	mov	r0, r3
 800da40:	f7fe fd29 	bl	800c496 <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2200      	movs	r2, #0
 800da48:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	60da      	str	r2, [r3, #12]
}
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	4618      	mov	r0, r3
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	08023d80 	.word	0x08023d80

0800da60 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800da60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d01e      	beq.n	800dab0 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	3b04      	subs	r3, #4
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	00db      	lsls	r3, r3, #3
 800da80:	18d4      	adds	r4, r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	429c      	cmp	r4, r3
 800da88:	d004      	beq.n	800da94 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800da8a:	3c08      	subs	r4, #8
 800da8c:	4620      	mov	r0, r4
 800da8e:	f7ff f8ba 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800da92:	e7f6      	b.n	800da82 <_ZN22SimpleStringCollection8allocateEj+0x22>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f1a3 0208 	sub.w	r2, r3, #8
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	3b04      	subs	r3, #4
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	3301      	adds	r3, #1
 800daa6:	00db      	lsls	r3, r3, #3
 800daa8:	4619      	mov	r1, r3
 800daaa:	4610      	mov	r0, r2
 800daac:	f7fc f976 	bl	8009d9c <_ZdaPvj>

    size_ = _size;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	683a      	ldr	r2, [r7, #0]
 800dab4:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	68dc      	ldr	r4, [r3, #12]
 800daba:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800dabe:	d202      	bcs.n	800dac6 <_ZN22SimpleStringCollection8allocateEj+0x66>
 800dac0:	1c63      	adds	r3, r4, #1
 800dac2:	00db      	lsls	r3, r3, #3
 800dac4:	e001      	b.n	800daca <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800dac6:	f04f 33ff 	mov.w	r3, #4294967295
 800daca:	f240 4227 	movw	r2, #1063	; 0x427
 800dace:	4910      	ldr	r1, [pc, #64]	; (800db10 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7fc f941 	bl	8009d58 <_ZnajPKci>
 800dad6:	4605      	mov	r5, r0
 800dad8:	1d2b      	adds	r3, r5, #4
 800dada:	3b04      	subs	r3, #4
 800dadc:	2208      	movs	r2, #8
 800dade:	601a      	str	r2, [r3, #0]
 800dae0:	1d2b      	adds	r3, r5, #4
 800dae2:	601c      	str	r4, [r3, #0]
 800dae4:	f105 0308 	add.w	r3, r5, #8
 800dae8:	1e62      	subs	r2, r4, #1
 800daea:	4614      	mov	r4, r2
 800daec:	461e      	mov	r6, r3
 800daee:	2c00      	cmp	r4, #0
 800daf0:	db06      	blt.n	800db00 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800daf2:	4908      	ldr	r1, [pc, #32]	; (800db14 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800daf4:	4630      	mov	r0, r6
 800daf6:	f7fe fcce 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800dafa:	3608      	adds	r6, #8
 800dafc:	3c01      	subs	r4, #1
 800dafe:	e7f6      	b.n	800daee <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800db00:	f105 0208 	add.w	r2, r5, #8
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	601a      	str	r2, [r3, #0]
}
 800db08:	bf00      	nop
 800db0a:	370c      	adds	r7, #12
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db10:	08023cc0 	.word	0x08023cc0
 800db14:	08023d80 	.word	0x08023d80

0800db18 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800db18:	b590      	push	{r4, r7, lr}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d01e      	beq.n	800db66 <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	3b04      	subs	r3, #4
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	00db      	lsls	r3, r3, #3
 800db36:	18d4      	adds	r4, r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	429c      	cmp	r4, r3
 800db3e:	d004      	beq.n	800db4a <_ZN22SimpleStringCollectionD1Ev+0x32>
 800db40:	3c08      	subs	r4, #8
 800db42:	4620      	mov	r0, r4
 800db44:	f7ff f85f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800db48:	e7f6      	b.n	800db38 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f1a3 0208 	sub.w	r2, r3, #8
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	3b04      	subs	r3, #4
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	3301      	adds	r3, #1
 800db5c:	00db      	lsls	r3, r3, #3
 800db5e:	4619      	mov	r1, r3
 800db60:	4610      	mov	r0, r2
 800db62:	f7fc f91b 	bl	8009d9c <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	3304      	adds	r3, #4
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7ff f84b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	4618      	mov	r0, r3
 800db74:	370c      	adds	r7, #12
 800db76:	46bd      	mov	sp, r7
 800db78:	bd90      	pop	{r4, r7, pc}

0800db7a <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800db7a:	b480      	push	{r7}
 800db7c:	b083      	sub	sp, #12
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
    return size_;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	68db      	ldr	r3, [r3, #12]
}
 800db86:	4618      	mov	r0, r3
 800db88:	370c      	adds	r7, #12
 800db8a:	46bd      	mov	sp, r7
 800db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db90:	4770      	bx	lr
	...

0800db94 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800db94:	b590      	push	{r4, r7, lr}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	683a      	ldr	r2, [r7, #0]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d315      	bcc.n	800dbd4 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	1d1c      	adds	r4, r3, #4
 800dbac:	f107 0308 	add.w	r3, r7, #8
 800dbb0:	490d      	ldr	r1, [pc, #52]	; (800dbe8 <_ZN22SimpleStringCollectionixEj+0x54>)
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fe fc6f 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800dbb8:	f107 0308 	add.w	r3, r7, #8
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f7fe fcd5 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800dbc4:	f107 0308 	add.w	r3, r7, #8
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7ff f81c 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        return empty_;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	e004      	b.n	800dbde <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	00db      	lsls	r3, r3, #3
 800dbdc:	4413      	add	r3, r2
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3714      	adds	r7, #20
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd90      	pop	{r4, r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	08023d80 	.word	0x08023d80

0800dbec <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fa fb88 	bl	800830c <_ZN17ConsoleTestOutputC1Ev>
 800dbfc:	4a08      	ldr	r2, [pc, #32]	; (800dc20 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	601a      	str	r2, [r3, #0]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2200      	movs	r2, #0
 800dc06:	611a      	str	r2, [r3, #16]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	3314      	adds	r3, #20
 800dc0c:	4905      	ldr	r1, [pc, #20]	; (800dc24 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7fe fc41 	bl	800c496 <_ZN12SimpleStringC1EPKc>
{
}
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	4618      	mov	r0, r3
 800dc18:	3708      	adds	r7, #8
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	08027c00 	.word	0x08027c00
 800dc24:	08023e80 	.word	0x08023e80

0800dc28 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	4a08      	ldr	r2, [pc, #32]	; (800dc54 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	601a      	str	r2, [r3, #0]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	3314      	adds	r3, #20
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fe ffe3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7fa fb74 	bl	8008330 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3708      	adds	r7, #8
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	08027c00 	.word	0x08027c00

0800dc58 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
}
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f7ff ffe1 	bl	800dc28 <_ZN18TeamCityTestOutputD1Ev>
 800dc66:	211c      	movs	r1, #28
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7fc f865 	bl	8009d38 <_ZdlPvj>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	4618      	mov	r0, r3
 800dc72:	3708      	adds	r7, #8
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b086      	sub	sp, #24
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	332c      	adds	r3, #44	; 0x2c
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	492b      	ldr	r1, [pc, #172]	; (800dd3c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800dc8e:	4610      	mov	r0, r2
 800dc90:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800dc92:	f107 0308 	add.w	r3, r7, #8
 800dc96:	6839      	ldr	r1, [r7, #0]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f004 fdf7 	bl	801288c <_ZNK10UtestShell7getNameEv>
 800dc9e:	f107 0308 	add.w	r3, r7, #8
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7fe ff82 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	4619      	mov	r1, r3
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 f919 	bl	800dee4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800dcb2:	f107 0308 	add.w	r3, r7, #8
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fe ffa5 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800dcbc:	687a      	ldr	r2, [r7, #4]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	332c      	adds	r3, #44	; 0x2c
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	491e      	ldr	r1, [pc, #120]	; (800dd40 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800dcc8:	4610      	mov	r0, r2
 800dcca:	4798      	blx	r3
    if (!test.willRun()) {
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	3318      	adds	r3, #24
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	6838      	ldr	r0, [r7, #0]
 800dcd6:	4798      	blx	r3
 800dcd8:	4603      	mov	r3, r0
 800dcda:	f083 0301 	eor.w	r3, r3, #1
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d024      	beq.n	800dd2e <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	332c      	adds	r3, #44	; 0x2c
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4915      	ldr	r1, [pc, #84]	; (800dd44 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800dcf0:	4610      	mov	r0, r2
 800dcf2:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800dcf4:	f107 0310 	add.w	r3, r7, #16
 800dcf8:	6839      	ldr	r1, [r7, #0]
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f004 fdc6 	bl	801288c <_ZNK10UtestShell7getNameEv>
 800dd00:	f107 0310 	add.w	r3, r7, #16
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7fe ff51 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f000 f8e8 	bl	800dee4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800dd14:	f107 0310 	add.w	r3, r7, #16
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7fe ff74 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        print("']\n");
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	332c      	adds	r3, #44	; 0x2c
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4905      	ldr	r1, [pc, #20]	; (800dd40 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800dd2a:	4610      	mov	r0, r2
 800dd2c:	4798      	blx	r3
    }
    currtest_ = &test;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	683a      	ldr	r2, [r7, #0]
 800dd32:	611a      	str	r2, [r3, #16]
}
 800dd34:	bf00      	nop
 800dd36:	3718      	adds	r7, #24
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	08023e84 	.word	0x08023e84
 800dd40:	08023ea4 	.word	0x08023ea4
 800dd44:	08023ea8 	.word	0x08023ea8

0800dd48 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800dd48:	b5b0      	push	{r4, r5, r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	691b      	ldr	r3, [r3, #16]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d03b      	beq.n	800ddd2 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800dd5a:	687a      	ldr	r2, [r7, #4]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	332c      	adds	r3, #44	; 0x2c
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	491d      	ldr	r1, [pc, #116]	; (800dddc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800dd66:	4610      	mov	r0, r2
 800dd68:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	691a      	ldr	r2, [r3, #16]
 800dd6e:	f107 0308 	add.w	r3, r7, #8
 800dd72:	4611      	mov	r1, r2
 800dd74:	4618      	mov	r0, r3
 800dd76:	f004 fd89 	bl	801288c <_ZNK10UtestShell7getNameEv>
 800dd7a:	f107 0308 	add.w	r3, r7, #8
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7fe ff14 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800dd84:	4603      	mov	r3, r0
 800dd86:	4619      	mov	r1, r3
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f000 f8ab 	bl	800dee4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800dd8e:	f107 0308 	add.w	r3, r7, #8
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7fe ff37 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	332c      	adds	r3, #44	; 0x2c
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	490f      	ldr	r1, [pc, #60]	; (800dde0 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800dda4:	4610      	mov	r0, r2
 800dda6:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800dda8:	687d      	ldr	r5, [r7, #4]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	3334      	adds	r3, #52	; 0x34
 800ddb0:	681c      	ldr	r4, [r3, #0]
 800ddb2:	6838      	ldr	r0, [r7, #0]
 800ddb4:	f004 fa0a 	bl	80121cc <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	4619      	mov	r1, r3
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	47a0      	blx	r4
    print("']\n");
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	332c      	adds	r3, #44	; 0x2c
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4906      	ldr	r1, [pc, #24]	; (800dde4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800ddcc:	4610      	mov	r0, r2
 800ddce:	4798      	blx	r3
 800ddd0:	e000      	b.n	800ddd4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800ddd2:	bf00      	nop
}
 800ddd4:	3710      	adds	r7, #16
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bdb0      	pop	{r4, r5, r7, pc}
 800ddda:	bf00      	nop
 800dddc:	08023ec8 	.word	0x08023ec8
 800dde0:	08023ee8 	.word	0x08023ee8
 800dde4:	08023ea4 	.word	0x08023ea4

0800dde8 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800dde8:	b590      	push	{r4, r7, lr}
 800ddea:	b085      	sub	sp, #20
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
 800ddf0:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f103 0414 	add.w	r4, r3, #20
 800ddf8:	f107 0308 	add.w	r3, r7, #8
 800ddfc:	6839      	ldr	r1, [r7, #0]
 800ddfe:	4618      	mov	r0, r3
 800de00:	f004 fd53 	bl	80128aa <_ZNK10UtestShell8getGroupEv>
 800de04:	f107 0308 	add.w	r3, r7, #8
 800de08:	4619      	mov	r1, r3
 800de0a:	4620      	mov	r0, r4
 800de0c:	f7fe fbaf 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800de10:	f107 0308 	add.w	r3, r7, #8
 800de14:	4618      	mov	r0, r3
 800de16:	f7fe fef6 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800de1a:	687a      	ldr	r2, [r7, #4]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	332c      	adds	r3, #44	; 0x2c
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	490c      	ldr	r1, [pc, #48]	; (800de58 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800de26:	4610      	mov	r0, r2
 800de28:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	3314      	adds	r3, #20
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fe febc 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800de34:	4603      	mov	r3, r0
 800de36:	4619      	mov	r1, r3
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 f853 	bl	800dee4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	332c      	adds	r3, #44	; 0x2c
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	4904      	ldr	r1, [pc, #16]	; (800de5c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800de4a:	4610      	mov	r0, r2
 800de4c:	4798      	blx	r3
}
 800de4e:	bf00      	nop
 800de50:	3714      	adds	r7, #20
 800de52:	46bd      	mov	sp, r7
 800de54:	bd90      	pop	{r4, r7, pc}
 800de56:	bf00      	nop
 800de58:	08023ef8 	.word	0x08023ef8
 800de5c:	08023ea4 	.word	0x08023ea4

0800de60 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800de60:	b590      	push	{r4, r7, lr}
 800de62:	b085      	sub	sp, #20
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f103 0414 	add.w	r4, r3, #20
 800de70:	f107 0308 	add.w	r3, r7, #8
 800de74:	4918      	ldr	r1, [pc, #96]	; (800ded8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800de76:	4618      	mov	r0, r3
 800de78:	f7fe fb0d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800de7c:	f107 0308 	add.w	r3, r7, #8
 800de80:	4619      	mov	r1, r3
 800de82:	4620      	mov	r0, r4
 800de84:	f7fe fecb 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 800de88:	4603      	mov	r3, r0
 800de8a:	461c      	mov	r4, r3
 800de8c:	f107 0308 	add.w	r3, r7, #8
 800de90:	4618      	mov	r0, r3
 800de92:	f7fe feb8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800de96:	2c00      	cmp	r4, #0
 800de98:	d11a      	bne.n	800ded0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	332c      	adds	r3, #44	; 0x2c
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	490d      	ldr	r1, [pc, #52]	; (800dedc <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800dea6:	4610      	mov	r0, r2
 800dea8:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	3314      	adds	r3, #20
 800deae:	4618      	mov	r0, r3
 800deb0:	f7fe fe7c 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800deb4:	4603      	mov	r3, r0
 800deb6:	4619      	mov	r1, r3
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 f813 	bl	800dee4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800debe:	687a      	ldr	r2, [r7, #4]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	332c      	adds	r3, #44	; 0x2c
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4905      	ldr	r1, [pc, #20]	; (800dee0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800deca:	4610      	mov	r0, r2
 800decc:	4798      	blx	r3
 800dece:	e000      	b.n	800ded2 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800ded0:	bf00      	nop
}
 800ded2:	3714      	adds	r7, #20
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd90      	pop	{r4, r7, pc}
 800ded8:	08023e80 	.word	0x08023e80
 800dedc:	08023f1c 	.word	0x08023f1c
 800dee0:	08023ea4 	.word	0x08023ea4

0800dee4 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	6039      	str	r1, [r7, #0]
    while (*s) {
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d03f      	beq.n	800df76 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	2b27      	cmp	r3, #39	; 0x27
 800defc:	d00b      	beq.n	800df16 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	2b7c      	cmp	r3, #124	; 0x7c
 800df04:	d007      	beq.n	800df16 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	2b5b      	cmp	r3, #91	; 0x5b
 800df0c:	d003      	beq.n	800df16 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	2b5d      	cmp	r3, #93	; 0x5d
 800df14:	d107      	bne.n	800df26 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800df16:	237c      	movs	r3, #124	; 0x7c
 800df18:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800df20:	2300      	movs	r3, #0
 800df22:	73bb      	strb	r3, [r7, #14]
 800df24:	e01a      	b.n	800df5c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	2b0d      	cmp	r3, #13
 800df2c:	d106      	bne.n	800df3c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800df2e:	237c      	movs	r3, #124	; 0x7c
 800df30:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800df32:	2372      	movs	r3, #114	; 0x72
 800df34:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800df36:	2300      	movs	r3, #0
 800df38:	73bb      	strb	r3, [r7, #14]
 800df3a:	e00f      	b.n	800df5c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	2b0a      	cmp	r3, #10
 800df42:	d106      	bne.n	800df52 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800df44:	237c      	movs	r3, #124	; 0x7c
 800df46:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800df48:	236e      	movs	r3, #110	; 0x6e
 800df4a:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800df4c:	2300      	movs	r3, #0
 800df4e:	73bb      	strb	r3, [r7, #14]
 800df50:	e004      	b.n	800df5c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800df58:	2300      	movs	r3, #0
 800df5a:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	3328      	adds	r3, #40	; 0x28
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f107 010c 	add.w	r1, r7, #12
 800df6a:	4610      	mov	r0, r2
 800df6c:	4798      	blx	r3
        s++;
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	3301      	adds	r3, #1
 800df72:	603b      	str	r3, [r7, #0]
    while (*s) {
 800df74:	e7bb      	b.n	800deee <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800df76:	bf00      	nop
 800df78:	3710      	adds	r7, #16
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
	...

0800df80 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800df80:	b5b0      	push	{r4, r5, r7, lr}
 800df82:	b08a      	sub	sp, #40	; 0x28
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	332c      	adds	r3, #44	; 0x2c
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4968      	ldr	r1, [pc, #416]	; (800e138 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800df96:	4610      	mov	r0, r2
 800df98:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	3310      	adds	r3, #16
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f107 0208 	add.w	r2, r7, #8
 800dfa6:	6839      	ldr	r1, [r7, #0]
 800dfa8:	4610      	mov	r0, r2
 800dfaa:	4798      	blx	r3
 800dfac:	f107 0308 	add.w	r3, r7, #8
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7fe fdfb 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	4619      	mov	r1, r3
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f7ff ff92 	bl	800dee4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800dfc0:	f107 0308 	add.w	r3, r7, #8
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7fe fe1e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    print("' message='");
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	332c      	adds	r3, #44	; 0x2c
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4959      	ldr	r1, [pc, #356]	; (800e13c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800dfd6:	4610      	mov	r0, r2
 800dfd8:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800dfda:	6838      	ldr	r0, [r7, #0]
 800dfdc:	f000 fa15 	bl	800e40a <_ZNK11TestFailure17isOutsideTestFileEv>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d105      	bne.n	800dff2 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800dfe6:	6838      	ldr	r0, [r7, #0]
 800dfe8:	f000 fa21 	bl	800e42e <_ZNK11TestFailure18isInHelperFunctionEv>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d001      	beq.n	800dff6 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800dff2:	2301      	movs	r3, #1
 800dff4:	e000      	b.n	800dff8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800dff6:	2300      	movs	r3, #0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d042      	beq.n	800e082 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	332c      	adds	r3, #44	; 0x2c
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	494e      	ldr	r1, [pc, #312]	; (800e140 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800e008:	4610      	mov	r0, r2
 800e00a:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800e00c:	687d      	ldr	r5, [r7, #4]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	332c      	adds	r3, #44	; 0x2c
 800e014:	681c      	ldr	r4, [r3, #0]
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	331c      	adds	r3, #28
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f107 0210 	add.w	r2, r7, #16
 800e022:	6839      	ldr	r1, [r7, #0]
 800e024:	4610      	mov	r0, r2
 800e026:	4798      	blx	r3
 800e028:	f107 0310 	add.w	r3, r7, #16
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7fe fdbd 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800e032:	4603      	mov	r3, r0
 800e034:	4619      	mov	r1, r3
 800e036:	4628      	mov	r0, r5
 800e038:	47a0      	blx	r4
 800e03a:	f107 0310 	add.w	r3, r7, #16
 800e03e:	4618      	mov	r0, r3
 800e040:	f7fe fde1 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        print(":");
 800e044:	687a      	ldr	r2, [r7, #4]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	332c      	adds	r3, #44	; 0x2c
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	493d      	ldr	r1, [pc, #244]	; (800e144 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800e050:	4610      	mov	r0, r2
 800e052:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800e054:	687d      	ldr	r5, [r7, #4]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	3334      	adds	r3, #52	; 0x34
 800e05c:	681c      	ldr	r4, [r3, #0]
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	3320      	adds	r3, #32
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	6838      	ldr	r0, [r7, #0]
 800e068:	4798      	blx	r3
 800e06a:	4603      	mov	r3, r0
 800e06c:	4619      	mov	r1, r3
 800e06e:	4628      	mov	r0, r5
 800e070:	47a0      	blx	r4
        print("): ");
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	332c      	adds	r3, #44	; 0x2c
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4932      	ldr	r1, [pc, #200]	; (800e148 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800e07e:	4610      	mov	r0, r2
 800e080:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	3308      	adds	r3, #8
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f107 0218 	add.w	r2, r7, #24
 800e08e:	6839      	ldr	r1, [r7, #0]
 800e090:	4610      	mov	r0, r2
 800e092:	4798      	blx	r3
 800e094:	f107 0318 	add.w	r3, r7, #24
 800e098:	4618      	mov	r0, r3
 800e09a:	f7fe fd87 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f7ff ff1e 	bl	800dee4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e0a8:	f107 0318 	add.w	r3, r7, #24
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7fe fdaa 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    print(":");
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	332c      	adds	r3, #44	; 0x2c
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4921      	ldr	r1, [pc, #132]	; (800e144 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800e0be:	4610      	mov	r0, r2
 800e0c0:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800e0c2:	687d      	ldr	r5, [r7, #4]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	3334      	adds	r3, #52	; 0x34
 800e0ca:	681c      	ldr	r4, [r3, #0]
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	3314      	adds	r3, #20
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	6838      	ldr	r0, [r7, #0]
 800e0d6:	4798      	blx	r3
 800e0d8:	4603      	mov	r3, r0
 800e0da:	4619      	mov	r1, r3
 800e0dc:	4628      	mov	r0, r5
 800e0de:	47a0      	blx	r4

    print("' details='");
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	332c      	adds	r3, #44	; 0x2c
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4918      	ldr	r1, [pc, #96]	; (800e14c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800e0ec:	4610      	mov	r0, r2
 800e0ee:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	3318      	adds	r3, #24
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f107 0220 	add.w	r2, r7, #32
 800e0fc:	6839      	ldr	r1, [r7, #0]
 800e0fe:	4610      	mov	r0, r2
 800e100:	4798      	blx	r3
 800e102:	f107 0320 	add.w	r3, r7, #32
 800e106:	4618      	mov	r0, r3
 800e108:	f7fe fd50 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800e10c:	4603      	mov	r3, r0
 800e10e:	4619      	mov	r1, r3
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f7ff fee7 	bl	800dee4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e116:	f107 0320 	add.w	r3, r7, #32
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7fe fd73 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	332c      	adds	r3, #44	; 0x2c
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4909      	ldr	r1, [pc, #36]	; (800e150 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800e12c:	4610      	mov	r0, r2
 800e12e:	4798      	blx	r3
}
 800e130:	bf00      	nop
 800e132:	3728      	adds	r7, #40	; 0x28
 800e134:	46bd      	mov	sp, r7
 800e136:	bdb0      	pop	{r4, r5, r7, pc}
 800e138:	08023f40 	.word	0x08023f40
 800e13c:	08023f60 	.word	0x08023f60
 800e140:	08023f6c 	.word	0x08023f6c
 800e144:	08023f7c 	.word	0x08023f7c
 800e148:	08023f80 	.word	0x08023f80
 800e14c:	08023f84 	.word	0x08023f84
 800e150:	08023ea4 	.word	0x08023ea4

0800e154 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800e160:	4a1a      	ldr	r2, [pc, #104]	; (800e1cc <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	601a      	str	r2, [r3, #0]
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	3314      	adds	r3, #20
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	68fa      	ldr	r2, [r7, #12]
 800e170:	3204      	adds	r2, #4
 800e172:	68b9      	ldr	r1, [r7, #8]
 800e174:	4610      	mov	r0, r2
 800e176:	4798      	blx	r3
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	330c      	adds	r3, #12
 800e17c:	68b9      	ldr	r1, [r7, #8]
 800e17e:	4618      	mov	r0, r3
 800e180:	f004 fb84 	bl	801288c <_ZNK10UtestShell7getNameEv>
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	3314      	adds	r3, #20
 800e188:	68b9      	ldr	r1, [r7, #8]
 800e18a:	4618      	mov	r0, r3
 800e18c:	f004 fc4f 	bl	8012a2e <_ZNK10UtestShell7getFileEv>
 800e190:	68b8      	ldr	r0, [r7, #8]
 800e192:	f004 fc5b 	bl	8012a4c <_ZNK10UtestShell13getLineNumberEv>
 800e196:	4602      	mov	r2, r0
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	61da      	str	r2, [r3, #28]
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	3320      	adds	r3, #32
 800e1a0:	68b9      	ldr	r1, [r7, #8]
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f004 fc43 	bl	8012a2e <_ZNK10UtestShell7getFileEv>
 800e1a8:	68b8      	ldr	r0, [r7, #8]
 800e1aa:	f004 fc4f 	bl	8012a4c <_ZNK10UtestShell13getLineNumberEv>
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	629a      	str	r2, [r3, #40]	; 0x28
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	332c      	adds	r3, #44	; 0x2c
 800e1b8:	6879      	ldr	r1, [r7, #4]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fe f9bf 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
{
}
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3710      	adds	r7, #16
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	08027ecc 	.word	0x08027ecc

0800e1d0 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
 800e1dc:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800e1de:	4a19      	ldr	r2, [pc, #100]	; (800e244 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	601a      	str	r2, [r3, #0]
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	3314      	adds	r3, #20
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	68fa      	ldr	r2, [r7, #12]
 800e1ee:	3204      	adds	r2, #4
 800e1f0:	68b9      	ldr	r1, [r7, #8]
 800e1f2:	4610      	mov	r0, r2
 800e1f4:	4798      	blx	r3
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	330c      	adds	r3, #12
 800e1fa:	68b9      	ldr	r1, [r7, #8]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f004 fb45 	bl	801288c <_ZNK10UtestShell7getNameEv>
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	3314      	adds	r3, #20
 800e206:	6879      	ldr	r1, [r7, #4]
 800e208:	4618      	mov	r0, r3
 800e20a:	f7fe f944 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	683a      	ldr	r2, [r7, #0]
 800e212:	61da      	str	r2, [r3, #28]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	3320      	adds	r3, #32
 800e218:	68b9      	ldr	r1, [r7, #8]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f004 fc07 	bl	8012a2e <_ZNK10UtestShell7getFileEv>
 800e220:	68b8      	ldr	r0, [r7, #8]
 800e222:	f004 fc13 	bl	8012a4c <_ZNK10UtestShell13getLineNumberEv>
 800e226:	4602      	mov	r2, r0
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	629a      	str	r2, [r3, #40]	; 0x28
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	332c      	adds	r3, #44	; 0x2c
 800e230:	4905      	ldr	r1, [pc, #20]	; (800e248 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800e232:	4618      	mov	r0, r3
 800e234:	f7fe f92f 	bl	800c496 <_ZN12SimpleStringC1EPKc>
{
}
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	4618      	mov	r0, r3
 800e23c:	3710      	adds	r7, #16
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	08027ecc 	.word	0x08027ecc
 800e248:	08023f90 	.word	0x08023f90

0800e24c <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800e256:	4a1e      	ldr	r2, [pc, #120]	; (800e2d0 <_ZN11TestFailureC1ERKS_+0x84>)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	601a      	str	r2, [r3, #0]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	1d1a      	adds	r2, r3, #4
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	3304      	adds	r3, #4
 800e264:	4619      	mov	r1, r3
 800e266:	4610      	mov	r0, r2
 800e268:	f7fe f969 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f103 020c 	add.w	r2, r3, #12
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	330c      	adds	r3, #12
 800e276:	4619      	mov	r1, r3
 800e278:	4610      	mov	r0, r2
 800e27a:	f7fe f960 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f103 0214 	add.w	r2, r3, #20
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	3314      	adds	r3, #20
 800e288:	4619      	mov	r1, r3
 800e28a:	4610      	mov	r0, r2
 800e28c:	f7fe f957 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	69da      	ldr	r2, [r3, #28]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	61da      	str	r2, [r3, #28]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f103 0220 	add.w	r2, r3, #32
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	3320      	adds	r3, #32
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	4610      	mov	r0, r2
 800e2a6:	f7fe f94a 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	629a      	str	r2, [r3, #40]	; 0x28
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	332c      	adds	r3, #44	; 0x2c
 800e2bc:	4619      	mov	r1, r3
 800e2be:	4610      	mov	r0, r2
 800e2c0:	f7fe f93d 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
{
}
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3708      	adds	r7, #8
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	08027ecc 	.word	0x08027ecc

0800e2d4 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	4a10      	ldr	r2, [pc, #64]	; (800e320 <_ZN11TestFailureD1Ev+0x4c>)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	601a      	str	r2, [r3, #0]
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	332c      	adds	r3, #44	; 0x2c
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7fe fc8d 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	3320      	adds	r3, #32
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7fe fc88 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	3314      	adds	r3, #20
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7fe fc83 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	330c      	adds	r3, #12
 800e304:	4618      	mov	r0, r3
 800e306:	f7fe fc7e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	3304      	adds	r3, #4
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fe fc79 	bl	800cc06 <_ZN12SimpleStringD1Ev>
{
}
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	4618      	mov	r0, r3
 800e318:	3708      	adds	r7, #8
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	08027ecc 	.word	0x08027ecc

0800e324 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
}
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f7ff ffd1 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800e332:	2134      	movs	r1, #52	; 0x34
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f7fb fcff 	bl	8009d38 <_ZdlPvj>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	4618      	mov	r0, r3
 800e33e:	3708      	adds	r7, #8
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
    return fileName_;
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	3314      	adds	r3, #20
 800e352:	4619      	mov	r1, r3
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f7fe f8f2 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
}
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	3708      	adds	r7, #8
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b082      	sub	sp, #8
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
 800e36a:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	3320      	adds	r3, #32
 800e370:	4619      	mov	r1, r3
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7fe f8e3 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
}
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	3708      	adds	r7, #8
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
    return testName_;
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	3304      	adds	r3, #4
 800e38e:	4619      	mov	r1, r3
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f7fe f8d4 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
}
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	3708      	adds	r7, #8
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800e39e:	b580      	push	{r7, lr}
 800e3a0:	b082      	sub	sp, #8
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	6078      	str	r0, [r7, #4]
 800e3a6:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	330c      	adds	r3, #12
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f7fe f8c5 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
}
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	3708      	adds	r7, #8
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	69db      	ldr	r3, [r3, #28]
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	370c      	adds	r7, #12
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	370c      	adds	r7, #12
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr

0800e3ec <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	6039      	str	r1, [r7, #0]
    return message_;
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	332c      	adds	r3, #44	; 0x2c
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f7fe f89e 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
}
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	3708      	adds	r7, #8
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b082      	sub	sp, #8
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f103 0220 	add.w	r2, r3, #32
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	3314      	adds	r3, #20
 800e41c:	4619      	mov	r1, r3
 800e41e:	4610      	mov	r0, r2
 800e420:	f7fe fc42 	bl	800cca8 <_ZneRK12SimpleStringS1_>
 800e424:	4603      	mov	r3, r0
}
 800e426:	4618      	mov	r0, r3
 800e428:	3708      	adds	r7, #8
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800e42e:	b480      	push	{r7}
 800e430:	b083      	sub	sp, #12
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	69da      	ldr	r2, [r3, #28]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e43e:	429a      	cmp	r2, r3
 800e440:	bf34      	ite	cc
 800e442:	2301      	movcc	r3, #1
 800e444:	2300      	movcs	r3, #0
 800e446:	b2db      	uxtb	r3, r3
}
 800e448:	4618      	mov	r0, r3
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800e454:	b590      	push	{r4, r7, lr}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	607a      	str	r2, [r7, #4]
 800e460:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7fe fba2 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800e468:	4604      	mov	r4, r0
 800e46a:	6838      	ldr	r0, [r7, #0]
 800e46c:	f7fe fb9e 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800e470:	4603      	mov	r3, r0
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	4622      	mov	r2, r4
 800e476:	4903      	ldr	r1, [pc, #12]	; (800e484 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800e478:	f7ff f8cc 	bl	800d614 <_Z16StringFromFormatPKcz>
}
 800e47c:	68f8      	ldr	r0, [r7, #12]
 800e47e:	3714      	adds	r7, #20
 800e480:	46bd      	mov	sp, r7
 800e482:	bd90      	pop	{r4, r7, pc}
 800e484:	08023f9c 	.word	0x08023f9c

0800e488 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800e488:	b590      	push	{r4, r7, lr}
 800e48a:	b097      	sub	sp, #92	; 0x5c
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	607a      	str	r2, [r7, #4]
 800e494:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800e496:	494c      	ldr	r1, [pc, #304]	; (800e5c8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f7fd fffc 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800e49e:	2314      	movs	r3, #20
 800e4a0:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800e4a2:	230a      	movs	r3, #10
 800e4a4:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800e4a6:	f107 0320 	add.w	r3, r7, #32
 800e4aa:	220a      	movs	r2, #10
 800e4ac:	4947      	ldr	r1, [pc, #284]	; (800e5cc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fe f80c 	bl	800c4cc <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800e4b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e4b8:	f107 0120 	add.w	r1, r7, #32
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fe fc03 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800e4c4:	f107 0318 	add.w	r3, r7, #24
 800e4c8:	f107 0220 	add.w	r2, r7, #32
 800e4cc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7fe fbfa 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800e4d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7fe fb93 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800e4e0:	f107 0310 	add.w	r3, r7, #16
 800e4e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e4e6:	493a      	ldr	r1, [pc, #232]	; (800e5d0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7ff f893 	bl	800d614 <_Z16StringFromFormatPKcz>

    result += "\n";
 800e4ee:	4939      	ldr	r1, [pc, #228]	; (800e5d4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	f7fe fc17 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800e4f6:	f107 0310 	add.w	r3, r7, #16
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7fe fb56 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800e500:	4604      	mov	r4, r0
 800e502:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800e506:	f107 0118 	add.w	r1, r7, #24
 800e50a:	2314      	movs	r3, #20
 800e50c:	683a      	ldr	r2, [r7, #0]
 800e50e:	f7fe fc83 	bl	800ce18 <_ZNK12SimpleString9subStringEjj>
 800e512:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e516:	4618      	mov	r0, r3
 800e518:	f7fe fb48 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800e51c:	4603      	mov	r3, r0
 800e51e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e522:	4622      	mov	r2, r4
 800e524:	492c      	ldr	r1, [pc, #176]	; (800e5d8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800e526:	f7ff f875 	bl	800d614 <_Z16StringFromFormatPKcz>
 800e52a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e52e:	4619      	mov	r1, r3
 800e530:	68f8      	ldr	r0, [r7, #12]
 800e532:	f7fe fbe5 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800e536:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7fe fb63 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800e540:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e544:	4618      	mov	r0, r3
 800e546:	f7fe fb5e 	bl	800cc06 <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800e54a:	f107 0310 	add.w	r3, r7, #16
 800e54e:	4618      	mov	r0, r3
 800e550:	f7fe fb38 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 800e554:	4603      	mov	r3, r0
 800e556:	f103 020a 	add.w	r2, r3, #10
 800e55a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e55e:	491b      	ldr	r1, [pc, #108]	; (800e5cc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800e560:	4618      	mov	r0, r3
 800e562:	f7fd ffb3 	bl	800c4cc <_ZN12SimpleStringC1EPKcj>
 800e566:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7fe fb1e 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800e570:	4602      	mov	r2, r0
 800e572:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e576:	4919      	ldr	r1, [pc, #100]	; (800e5dc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800e578:	4618      	mov	r0, r3
 800e57a:	f7ff f84b 	bl	800d614 <_Z16StringFromFormatPKcz>
 800e57e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e582:	4619      	mov	r1, r3
 800e584:	68f8      	ldr	r0, [r7, #12]
 800e586:	f7fe fbbb 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800e58a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e58e:	4618      	mov	r0, r3
 800e590:	f7fe fb39 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800e594:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e598:	4618      	mov	r0, r3
 800e59a:	f7fe fb34 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return result;
 800e59e:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800e5a0:	f107 0310 	add.w	r3, r7, #16
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fe fb2e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800e5aa:	f107 0318 	add.w	r3, r7, #24
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fe fb29 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800e5b4:	f107 0320 	add.w	r3, r7, #32
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7fe fb24 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return result;
 800e5be:	bf00      	nop
}
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	375c      	adds	r7, #92	; 0x5c
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd90      	pop	{r4, r7, pc}
 800e5c8:	08023fbc 	.word	0x08023fbc
 800e5cc:	08023fc0 	.word	0x08023fc0
 800e5d0:	08023fc4 	.word	0x08023fc4
 800e5d4:	08023fec 	.word	0x08023fec
 800e5d8:	08023ff0 	.word	0x08023ff0
 800e5dc:	08023ff8 	.word	0x08023ff8

0800e5e0 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800e5e0:	b590      	push	{r4, r7, lr}
 800e5e2:	b087      	sub	sp, #28
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	60f8      	str	r0, [r7, #12]
 800e5e8:	60b9      	str	r1, [r7, #8]
 800e5ea:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800e5ec:	491a      	ldr	r1, [pc, #104]	; (800e658 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800e5ee:	68f8      	ldr	r0, [r7, #12]
 800e5f0:	f7fd ff51 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f7fe faf5 	bl	800cbe4 <_ZNK12SimpleString7isEmptyEv>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	f083 0301 	eor.w	r3, r3, #1
 800e600:	b2db      	uxtb	r3, r3
 800e602:	2b00      	cmp	r3, #0
 800e604:	d022      	beq.n	800e64c <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800e606:	f107 0310 	add.w	r3, r7, #16
 800e60a:	4914      	ldr	r1, [pc, #80]	; (800e65c <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800e60c:	4618      	mov	r0, r3
 800e60e:	f7fd ff42 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800e612:	f107 0310 	add.w	r3, r7, #16
 800e616:	4619      	mov	r1, r3
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f7fe f800 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 800e61e:	4603      	mov	r3, r0
 800e620:	f083 0301 	eor.w	r3, r3, #1
 800e624:	b2dc      	uxtb	r4, r3
 800e626:	f107 0310 	add.w	r3, r7, #16
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7fe faeb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800e630:	2c00      	cmp	r4, #0
 800e632:	d003      	beq.n	800e63c <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800e634:	490a      	ldr	r1, [pc, #40]	; (800e660 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800e636:	68f8      	ldr	r0, [r7, #12]
 800e638:	f7fe fb74 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800e63c:	6879      	ldr	r1, [r7, #4]
 800e63e:	68f8      	ldr	r0, [r7, #12]
 800e640:	f7fe fb5e 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800e644:	4907      	ldr	r1, [pc, #28]	; (800e664 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800e646:	68f8      	ldr	r0, [r7, #12]
 800e648:	f7fe fb6c 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800e64c:	bf00      	nop
}
 800e64e:	68f8      	ldr	r0, [r7, #12]
 800e650:	371c      	adds	r7, #28
 800e652:	46bd      	mov	sp, r7
 800e654:	bd90      	pop	{r4, r7, pc}
 800e656:	bf00      	nop
 800e658:	08023fbc 	.word	0x08023fbc
 800e65c:	08024000 	.word	0x08024000
 800e660:	0802400c 	.word	0x0802400c
 800e664:	08024018 	.word	0x08024018

0800e668 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800e668:	b590      	push	{r4, r7, lr}
 800e66a:	b089      	sub	sp, #36	; 0x24
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	60f8      	str	r0, [r7, #12]
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	607a      	str	r2, [r7, #4]
 800e674:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800e676:	68f8      	ldr	r0, [r7, #12]
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	68b9      	ldr	r1, [r7, #8]
 800e67e:	f7ff fda7 	bl	800e1d0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e682:	4a19      	ldr	r2, [pc, #100]	; (800e6e8 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e68e:	68f9      	ldr	r1, [r7, #12]
 800e690:	f107 0310 	add.w	r3, r7, #16
 800e694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e696:	4618      	mov	r0, r3
 800e698:	f7ff ffa2 	bl	800e5e0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e69c:	f107 0310 	add.w	r3, r7, #16
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	f7fd ff63 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800e6a8:	f107 0310 	add.w	r3, r7, #16
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7fe faaa 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e6b8:	68f9      	ldr	r1, [r7, #12]
 800e6ba:	f107 0018 	add.w	r0, r7, #24
 800e6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6c2:	f7ff fec7 	bl	800e454 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e6c6:	f107 0318 	add.w	r3, r7, #24
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	f7fe fb17 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800e6d2:	f107 0318 	add.w	r3, r7, #24
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7fe fa95 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3724      	adds	r7, #36	; 0x24
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd90      	pop	{r4, r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	08027ea0 	.word	0x08027ea0

0800e6ec <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800e6ec:	b5b0      	push	{r4, r5, r7, lr}
 800e6ee:	b094      	sub	sp, #80	; 0x50
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6278      	str	r0, [r7, #36]	; 0x24
 800e6f4:	6239      	str	r1, [r7, #32]
 800e6f6:	61fa      	str	r2, [r7, #28]
 800e6f8:	61bb      	str	r3, [r7, #24]
 800e6fa:	ed87 0b04 	vstr	d0, [r7, #16]
 800e6fe:	ed87 1b02 	vstr	d1, [r7, #8]
 800e702:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800e706:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	69fa      	ldr	r2, [r7, #28]
 800e70c:	6a39      	ldr	r1, [r7, #32]
 800e70e:	f7ff fd5f 	bl	800e1d0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e712:	4a4a      	ldr	r2, [pc, #296]	; (800e83c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800e714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e716:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e71e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e724:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e726:	4618      	mov	r0, r3
 800e728:	f7ff ff5a 	bl	800e5e0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e72c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e730:	4619      	mov	r1, r3
 800e732:	4620      	mov	r0, r4
 800e734:	f7fd ff1b 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800e738:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7fe fa62 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800e742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e744:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e748:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800e74a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e74e:	2107      	movs	r1, #7
 800e750:	ed97 0b04 	vldr	d0, [r7, #16]
 800e754:	4618      	mov	r0, r3
 800e756:	f7fe ff1b 	bl	800d590 <_Z10StringFromdi>
 800e75a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e75e:	2107      	movs	r1, #7
 800e760:	ed97 0b02 	vldr	d0, [r7, #8]
 800e764:	4618      	mov	r0, r3
 800e766:	f7fe ff13 	bl	800d590 <_Z10StringFromdi>
 800e76a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e76e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e772:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e776:	4629      	mov	r1, r5
 800e778:	f7ff fe6c 	bl	800e454 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e77c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e780:	4619      	mov	r1, r3
 800e782:	4620      	mov	r0, r4
 800e784:	f7fe fabc 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800e788:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7fe fa3a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800e792:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e796:	4618      	mov	r0, r3
 800e798:	f7fe fa35 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800e79c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fe fa30 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800e7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a8:	332c      	adds	r3, #44	; 0x2c
 800e7aa:	4925      	ldr	r1, [pc, #148]	; (800e840 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7fe fab9 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800e7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e7b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e7bc:	2107      	movs	r1, #7
 800e7be:	ed97 0b00 	vldr	d0, [r7]
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fe fee4 	bl	800d590 <_Z10StringFromdi>
 800e7c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e7cc:	4619      	mov	r1, r3
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	f7fe fa96 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800e7d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7fe fa14 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800e7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e0:	332c      	adds	r3, #44	; 0x2c
 800e7e2:	4918      	ldr	r1, [pc, #96]	; (800e844 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fe fa9d 	bl	800cd24 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800e7ea:	4b17      	ldr	r3, [pc, #92]	; (800e848 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	ed97 0b04 	vldr	d0, [r7, #16]
 800e7f2:	4798      	blx	r3
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d10f      	bne.n	800e81a <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800e7fa:	4b13      	ldr	r3, [pc, #76]	; (800e848 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	ed97 0b02 	vldr	d0, [r7, #8]
 800e802:	4798      	blx	r3
 800e804:	4603      	mov	r3, r0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d107      	bne.n	800e81a <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800e80a:	4b0f      	ldr	r3, [pc, #60]	; (800e848 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	ed97 0b00 	vldr	d0, [r7]
 800e812:	4798      	blx	r3
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d001      	beq.n	800e81e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800e81a:	2301      	movs	r3, #1
 800e81c:	e000      	b.n	800e820 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800e81e:	2300      	movs	r3, #0
 800e820:	2b00      	cmp	r3, #0
 800e822:	d005      	beq.n	800e830 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800e824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e826:	332c      	adds	r3, #44	; 0x2c
 800e828:	4908      	ldr	r1, [pc, #32]	; (800e84c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800e82a:	4618      	mov	r0, r3
 800e82c:	f7fe fa7a 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
}
 800e830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e832:	4618      	mov	r0, r3
 800e834:	3750      	adds	r7, #80	; 0x50
 800e836:	46bd      	mov	sp, r7
 800e838:	bdb0      	pop	{r4, r5, r7, pc}
 800e83a:	bf00      	nop
 800e83c:	08027e74 	.word	0x08027e74
 800e840:	0802401c 	.word	0x0802401c
 800e844:	08024034 	.word	0x08024034
 800e848:	200000e8 	.word	0x200000e8
 800e84c:	08024038 	.word	0x08024038

0800e850 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800e850:	b590      	push	{r4, r7, lr}
 800e852:	b093      	sub	sp, #76	; 0x4c
 800e854:	af02      	add	r7, sp, #8
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	607a      	str	r2, [r7, #4]
 800e85c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800e85e:	68f8      	ldr	r0, [r7, #12]
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	68b9      	ldr	r1, [r7, #8]
 800e866:	f7ff fcb3 	bl	800e1d0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e86a:	4a4f      	ldr	r2, [pc, #316]	; (800e9a8 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e876:	68f9      	ldr	r1, [r7, #12]
 800e878:	f107 0320 	add.w	r3, r7, #32
 800e87c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e87e:	4618      	mov	r0, r3
 800e880:	f7ff feae 	bl	800e5e0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e884:	f107 0320 	add.w	r3, r7, #32
 800e888:	4619      	mov	r1, r3
 800e88a:	4620      	mov	r0, r4
 800e88c:	f7fd fe6f 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800e890:	f107 0320 	add.w	r3, r7, #32
 800e894:	4618      	mov	r0, r3
 800e896:	f7fe f9b6 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800e89a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e89c:	f7fe f986 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	f107 0318 	add.w	r3, r7, #24
 800e8a6:	4611      	mov	r1, r2
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7fe fc47 	bl	800d13c <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800e8ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e8b0:	f7fe f97c 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	f107 0310 	add.w	r3, r7, #16
 800e8ba:	4611      	mov	r1, r2
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7fe fc3d 	bl	800d13c <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e8c8:	68f9      	ldr	r1, [r7, #12]
 800e8ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e8ce:	f107 0310 	add.w	r3, r7, #16
 800e8d2:	f107 0218 	add.w	r2, r7, #24
 800e8d6:	f7ff fdbd 	bl	800e454 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e8da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e8de:	4619      	mov	r1, r3
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	f7fe fa0d 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800e8e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fe f98b 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e8f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e8f8:	f7fe fae9 	bl	800cece <_ZNK12SimpleString2atEj>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	461c      	mov	r4, r3
 800e900:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e902:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e904:	f7fe fae3 	bl	800cece <_ZNK12SimpleString2atEj>
 800e908:	4603      	mov	r3, r0
 800e90a:	429c      	cmp	r4, r3
 800e90c:	bf0c      	ite	eq
 800e90e:	2301      	moveq	r3, #1
 800e910:	2300      	movne	r3, #0
 800e912:	b2db      	uxtb	r3, r3
 800e914:	2b00      	cmp	r3, #0
 800e916:	d003      	beq.n	800e920 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800e918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e91a:	3301      	adds	r3, #1
 800e91c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e91e:	e7e9      	b.n	800e8f4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800e920:	2300      	movs	r3, #0
 800e922:	63bb      	str	r3, [r7, #56]	; 0x38
 800e924:	f107 0310 	add.w	r3, r7, #16
 800e928:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7fe facf 	bl	800cece <_ZNK12SimpleString2atEj>
 800e930:	4603      	mov	r3, r0
 800e932:	461c      	mov	r4, r3
 800e934:	f107 0318 	add.w	r3, r7, #24
 800e938:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7fe fac7 	bl	800cece <_ZNK12SimpleString2atEj>
 800e940:	4603      	mov	r3, r0
 800e942:	429c      	cmp	r4, r3
 800e944:	bf0c      	ite	eq
 800e946:	2301      	moveq	r3, #1
 800e948:	2300      	movne	r3, #0
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d003      	beq.n	800e958 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800e950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e952:	3301      	adds	r3, #1
 800e954:	63bb      	str	r3, [r7, #56]	; 0x38
 800e956:	e7e5      	b.n	800e924 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e95e:	68f9      	ldr	r1, [r7, #12]
 800e960:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e964:	f107 0210 	add.w	r2, r7, #16
 800e968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e96a:	9300      	str	r3, [sp, #0]
 800e96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96e:	f7ff fd8b 	bl	800e488 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800e972:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e976:	4619      	mov	r1, r3
 800e978:	4620      	mov	r0, r4
 800e97a:	f7fe f9c1 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800e97e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e982:	4618      	mov	r0, r3
 800e984:	f7fe f93f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800e988:	f107 0310 	add.w	r3, r7, #16
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7fe f93a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800e992:	f107 0318 	add.w	r3, r7, #24
 800e996:	4618      	mov	r0, r3
 800e998:	f7fe f935 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3744      	adds	r7, #68	; 0x44
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd90      	pop	{r4, r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	08027e48 	.word	0x08027e48

0800e9ac <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800e9ac:	b590      	push	{r4, r7, lr}
 800e9ae:	b087      	sub	sp, #28
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	607a      	str	r2, [r7, #4]
 800e9b8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800e9ba:	68f8      	ldr	r0, [r7, #12]
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	687a      	ldr	r2, [r7, #4]
 800e9c0:	68b9      	ldr	r1, [r7, #8]
 800e9c2:	f7ff fc05 	bl	800e1d0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e9c6:	4a1a      	ldr	r2, [pc, #104]	; (800ea30 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e9d2:	68f9      	ldr	r1, [r7, #12]
 800e9d4:	f107 0310 	add.w	r3, r7, #16
 800e9d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7ff fe00 	bl	800e5e0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e9e0:	f107 0310 	add.w	r3, r7, #16
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f7fd fdc1 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800e9ec:	f107 0310 	add.w	r3, r7, #16
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7fe f908 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	332c      	adds	r3, #44	; 0x2c
 800e9fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7fe f97f 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	332c      	adds	r3, #44	; 0x2c
 800ea06:	490b      	ldr	r1, [pc, #44]	; (800ea34 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7fe f98b 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	332c      	adds	r3, #44	; 0x2c
 800ea12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7fe f973 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	332c      	adds	r3, #44	; 0x2c
 800ea1e:	4906      	ldr	r1, [pc, #24]	; (800ea38 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7fe f97f 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
}
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	4618      	mov	r0, r3
 800ea2a:	371c      	adds	r7, #28
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd90      	pop	{r4, r7, pc}
 800ea30:	08027e1c 	.word	0x08027e1c
 800ea34:	0802405c 	.word	0x0802405c
 800ea38:	08024060 	.word	0x08024060

0800ea3c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800ea3c:	b5b0      	push	{r4, r5, r7, lr}
 800ea3e:	b088      	sub	sp, #32
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	607a      	str	r2, [r7, #4]
 800ea48:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	68b9      	ldr	r1, [r7, #8]
 800ea52:	f7ff fbbd 	bl	800e1d0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ea56:	4a1c      	ldr	r2, [pc, #112]	; (800eac8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ea62:	68f9      	ldr	r1, [r7, #12]
 800ea64:	f107 0310 	add.w	r3, r7, #16
 800ea68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7ff fdb8 	bl	800e5e0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ea70:	f107 0310 	add.w	r3, r7, #16
 800ea74:	4619      	mov	r1, r3
 800ea76:	4620      	mov	r0, r4
 800ea78:	f7fd fd79 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800ea7c:	f107 0310 	add.w	r3, r7, #16
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7fe f8c0 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ea8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ea8e:	f7fe f88d 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800ea92:	4605      	mov	r5, r0
 800ea94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea96:	f7fe f889 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	f107 0018 	add.w	r0, r7, #24
 800eaa0:	462a      	mov	r2, r5
 800eaa2:	490a      	ldr	r1, [pc, #40]	; (800eacc <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800eaa4:	f7fe fdb6 	bl	800d614 <_Z16StringFromFormatPKcz>
 800eaa8:	f107 0318 	add.w	r3, r7, #24
 800eaac:	4619      	mov	r1, r3
 800eaae:	4620      	mov	r0, r4
 800eab0:	f7fe f926 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800eab4:	f107 0318 	add.w	r3, r7, #24
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7fe f8a4 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	4618      	mov	r0, r3
 800eac2:	3720      	adds	r7, #32
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bdb0      	pop	{r4, r5, r7, pc}
 800eac8:	08027df0 	.word	0x08027df0
 800eacc:	0802406c 	.word	0x0802406c

0800ead0 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800ead0:	b590      	push	{r4, r7, lr}
 800ead2:	b087      	sub	sp, #28
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	607a      	str	r2, [r7, #4]
 800eadc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800eade:	68f8      	ldr	r0, [r7, #12]
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	68b9      	ldr	r1, [r7, #8]
 800eae6:	f7ff fb73 	bl	800e1d0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800eaea:	4a1a      	ldr	r2, [pc, #104]	; (800eb54 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eaf6:	68f9      	ldr	r1, [r7, #12]
 800eaf8:	f107 0310 	add.w	r3, r7, #16
 800eafc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7ff fd6e 	bl	800e5e0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800eb04:	f107 0310 	add.w	r3, r7, #16
 800eb08:	4619      	mov	r1, r3
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	f7fd fd2f 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800eb10:	f107 0310 	add.w	r3, r7, #16
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7fe f876 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	332c      	adds	r3, #44	; 0x2c
 800eb1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7fe f8ed 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	332c      	adds	r3, #44	; 0x2c
 800eb2a:	490b      	ldr	r1, [pc, #44]	; (800eb58 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7fe f8f9 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	332c      	adds	r3, #44	; 0x2c
 800eb36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7fe f8e1 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	332c      	adds	r3, #44	; 0x2c
 800eb42:	4906      	ldr	r1, [pc, #24]	; (800eb5c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fe f8ed 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
}
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	371c      	adds	r7, #28
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd90      	pop	{r4, r7, pc}
 800eb54:	08027dc4 	.word	0x08027dc4
 800eb58:	0802405c 	.word	0x0802405c
 800eb5c:	08024060 	.word	0x08024060

0800eb60 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b084      	sub	sp, #16
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	607a      	str	r2, [r7, #4]
 800eb6c:	603b      	str	r3, [r7, #0]
 800eb6e:	68f8      	ldr	r0, [r7, #12]
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	68b9      	ldr	r1, [r7, #8]
 800eb76:	f7ff fb2b 	bl	800e1d0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800eb7a:	4a07      	ldr	r2, [pc, #28]	; (800eb98 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	332c      	adds	r3, #44	; 0x2c
 800eb84:	69b9      	ldr	r1, [r7, #24]
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fd fcf1 	bl	800c56e <_ZN12SimpleStringaSERKS_>
}
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3710      	adds	r7, #16
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
 800eb96:	bf00      	nop
 800eb98:	08027a80 	.word	0x08027a80

0800eb9c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800eb9c:	b590      	push	{r4, r7, lr}
 800eb9e:	b09d      	sub	sp, #116	; 0x74
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	607a      	str	r2, [r7, #4]
 800eba8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ebaa:	68f8      	ldr	r0, [r7, #12]
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	68b9      	ldr	r1, [r7, #8]
 800ebb2:	f7ff fb0d 	bl	800e1d0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ebb6:	4a5d      	ldr	r2, [pc, #372]	; (800ed2c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ebc2:	68f9      	ldr	r1, [r7, #12]
 800ebc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ebc8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7ff fd07 	bl	800e5e0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ebd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	4620      	mov	r0, r4
 800ebda:	f7fd fcc8 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800ebde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7fe f80f 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800ebe8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ebec:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7fe fae1 	bl	800d1b8 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800ebf6:	f107 0320 	add.w	r3, r7, #32
 800ebfa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fe fada 	bl	800d1b8 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800ec04:	f107 0120 	add.w	r1, r7, #32
 800ec08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec0c:	2220      	movs	r2, #32
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fe f8b6 	bl	800cd80 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800ec14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ec18:	4945      	ldr	r1, [pc, #276]	; (800ed30 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7fd fc3b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800ec20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ec24:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ec28:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7fe f84c 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800ec32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ec36:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fe fbd2 	bl	800d3e4 <_Z30BracketsFormattedHexStringFroml>
 800ec40:	f107 0318 	add.w	r3, r7, #24
 800ec44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ec48:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7fe f83c 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800ec52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7fd ffd5 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800ec5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7fd ffd0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800ec66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7fd ffcb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ec70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ec74:	492e      	ldr	r1, [pc, #184]	; (800ed30 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7fd fc0d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800ec7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ec80:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ec84:	f107 0120 	add.w	r1, r7, #32
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fe f81e 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800ec8e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ec92:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7fe fba4 	bl	800d3e4 <_Z30BracketsFormattedHexStringFroml>
 800ec9c:	f107 0310 	add.w	r3, r7, #16
 800eca0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800eca4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7fe f80e 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800ecae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fd ffa7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800ecb8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7fd ffa2 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800ecc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fd ff9d 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ecd2:	68f9      	ldr	r1, [r7, #12]
 800ecd4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800ecd8:	f107 0318 	add.w	r3, r7, #24
 800ecdc:	f107 0210 	add.w	r2, r7, #16
 800ece0:	f7ff fbb8 	bl	800e454 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ece4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ece8:	4619      	mov	r1, r3
 800ecea:	4620      	mov	r0, r4
 800ecec:	f7fe f808 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800ecf0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7fd ff86 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ecfa:	f107 0310 	add.w	r3, r7, #16
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7fd ff81 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800ed04:	f107 0318 	add.w	r3, r7, #24
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7fd ff7c 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800ed0e:	f107 0320 	add.w	r3, r7, #32
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fd ff77 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800ed18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7fd ff72 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	4618      	mov	r0, r3
 800ed26:	3774      	adds	r7, #116	; 0x74
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd90      	pop	{r4, r7, pc}
 800ed2c:	08027d98 	.word	0x08027d98
 800ed30:	08023fc0 	.word	0x08023fc0

0800ed34 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800ed34:	b590      	push	{r4, r7, lr}
 800ed36:	b09d      	sub	sp, #116	; 0x74
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	60b9      	str	r1, [r7, #8]
 800ed3e:	607a      	str	r2, [r7, #4]
 800ed40:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ed42:	68f8      	ldr	r0, [r7, #12]
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	687a      	ldr	r2, [r7, #4]
 800ed48:	68b9      	ldr	r1, [r7, #8]
 800ed4a:	f7ff fa41 	bl	800e1d0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ed4e:	4a5d      	ldr	r2, [pc, #372]	; (800eec4 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ed5a:	68f9      	ldr	r1, [r7, #12]
 800ed5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed60:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7ff fc3b 	bl	800e5e0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ed6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed6e:	4619      	mov	r1, r3
 800ed70:	4620      	mov	r0, r4
 800ed72:	f7fd fbfc 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800ed76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7fd ff43 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800ed80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ed84:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7fe fc7d 	bl	800d688 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800ed8e:	f107 0320 	add.w	r3, r7, #32
 800ed92:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fe fc76 	bl	800d688 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800ed9c:	f107 0120 	add.w	r1, r7, #32
 800eda0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eda4:	2220      	movs	r2, #32
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7fd ffea 	bl	800cd80 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800edac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800edb0:	4945      	ldr	r1, [pc, #276]	; (800eec8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fd fb6f 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800edb8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800edbc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800edc0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7fd ff80 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800edca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800edce:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7fe fb22 	bl	800d41c <_Z30BracketsFormattedHexStringFromm>
 800edd8:	f107 0318 	add.w	r3, r7, #24
 800eddc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ede0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ede4:	4618      	mov	r0, r3
 800ede6:	f7fd ff70 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800edea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800edee:	4618      	mov	r0, r3
 800edf0:	f7fd ff09 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800edf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7fd ff04 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800edfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7fd feff 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ee08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ee0c:	492e      	ldr	r1, [pc, #184]	; (800eec8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7fd fb41 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800ee14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ee18:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ee1c:	f107 0120 	add.w	r1, r7, #32
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7fd ff52 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800ee26:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ee2a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7fe faf4 	bl	800d41c <_Z30BracketsFormattedHexStringFromm>
 800ee34:	f107 0310 	add.w	r3, r7, #16
 800ee38:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ee3c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7fd ff42 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800ee46:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f7fd fedb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800ee50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ee54:	4618      	mov	r0, r3
 800ee56:	f7fd fed6 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800ee5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fd fed1 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ee6a:	68f9      	ldr	r1, [r7, #12]
 800ee6c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800ee70:	f107 0318 	add.w	r3, r7, #24
 800ee74:	f107 0210 	add.w	r2, r7, #16
 800ee78:	f7ff faec 	bl	800e454 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ee7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ee80:	4619      	mov	r1, r3
 800ee82:	4620      	mov	r0, r4
 800ee84:	f7fd ff3c 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800ee88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7fd feba 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ee92:	f107 0310 	add.w	r3, r7, #16
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7fd feb5 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800ee9c:	f107 0318 	add.w	r3, r7, #24
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7fd feb0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800eea6:	f107 0320 	add.w	r3, r7, #32
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7fd feab 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800eeb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7fd fea6 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	4618      	mov	r0, r3
 800eebe:	3774      	adds	r7, #116	; 0x74
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd90      	pop	{r4, r7, pc}
 800eec4:	08027d6c 	.word	0x08027d6c
 800eec8:	08023fc0 	.word	0x08023fc0

0800eecc <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800eecc:	b590      	push	{r4, r7, lr}
 800eece:	b09d      	sub	sp, #116	; 0x74
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	607a      	str	r2, [r7, #4]
 800eed8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800eeda:	68f8      	ldr	r0, [r7, #12]
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	68b9      	ldr	r1, [r7, #8]
 800eee2:	f7ff f975 	bl	800e1d0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800eee6:	4a5f      	ldr	r2, [pc, #380]	; (800f064 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eef2:	68f9      	ldr	r1, [r7, #12]
 800eef4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eef8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7ff fb6f 	bl	800e5e0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ef02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ef06:	4619      	mov	r1, r3
 800ef08:	4620      	mov	r0, r4
 800ef0a:	f7fd fb30 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800ef0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7fd fe77 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800ef18:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800ef1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef20:	4611      	mov	r1, r2
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fe f936 	bl	800d194 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800ef28:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800ef2c:	f107 0320 	add.w	r3, r7, #32
 800ef30:	4611      	mov	r1, r2
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fe f92e 	bl	800d194 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800ef38:	f107 0120 	add.w	r1, r7, #32
 800ef3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef40:	2220      	movs	r2, #32
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fd ff1c 	bl	800cd80 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800ef48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ef4c:	4946      	ldr	r1, [pc, #280]	; (800f068 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7fd faa1 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800ef54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef58:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ef5c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7fd feb2 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800ef66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ef6a:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800ef6e:	4611      	mov	r1, r2
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7fe fa6f 	bl	800d454 <_Z30BracketsFormattedHexStringFroma>
 800ef76:	f107 0318 	add.w	r3, r7, #24
 800ef7a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ef7e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fd fea1 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800ef88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7fd fe3a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800ef92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7fd fe35 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800ef9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7fd fe30 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800efa6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800efaa:	492f      	ldr	r1, [pc, #188]	; (800f068 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800efac:	4618      	mov	r0, r3
 800efae:	f7fd fa72 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 800efb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800efb6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800efba:	f107 0120 	add.w	r1, r7, #32
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7fd fe83 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800efc4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800efc8:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800efcc:	4611      	mov	r1, r2
 800efce:	4618      	mov	r0, r3
 800efd0:	f7fe fa40 	bl	800d454 <_Z30BracketsFormattedHexStringFroma>
 800efd4:	f107 0310 	add.w	r3, r7, #16
 800efd8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800efdc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7fd fe72 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 800efe6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800efea:	4618      	mov	r0, r3
 800efec:	f7fd fe0b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800eff0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7fd fe06 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800effa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800effe:	4618      	mov	r0, r3
 800f000:	f7fd fe01 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f00a:	68f9      	ldr	r1, [r7, #12]
 800f00c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f010:	f107 0318 	add.w	r3, r7, #24
 800f014:	f107 0210 	add.w	r2, r7, #16
 800f018:	f7ff fa1c 	bl	800e454 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f01c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f020:	4619      	mov	r1, r3
 800f022:	4620      	mov	r0, r4
 800f024:	f7fd fe6c 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800f028:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7fd fdea 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f032:	f107 0310 	add.w	r3, r7, #16
 800f036:	4618      	mov	r0, r3
 800f038:	f7fd fde5 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f03c:	f107 0318 	add.w	r3, r7, #24
 800f040:	4618      	mov	r0, r3
 800f042:	f7fd fde0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800f046:	f107 0320 	add.w	r3, r7, #32
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fd fddb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800f050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f054:	4618      	mov	r0, r3
 800f056:	f7fd fdd6 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	4618      	mov	r0, r3
 800f05e:	3774      	adds	r7, #116	; 0x74
 800f060:	46bd      	mov	sp, r7
 800f062:	bd90      	pop	{r4, r7, pc}
 800f064:	08027d40 	.word	0x08027d40
 800f068:	08023fc0 	.word	0x08023fc0

0800f06c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800f06c:	b590      	push	{r4, r7, lr}
 800f06e:	b093      	sub	sp, #76	; 0x4c
 800f070:	af02      	add	r7, sp, #8
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	607a      	str	r2, [r7, #4]
 800f078:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f07a:	68f8      	ldr	r0, [r7, #12]
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	68b9      	ldr	r1, [r7, #8]
 800f082:	f7ff f8a5 	bl	800e1d0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f086:	4a4a      	ldr	r2, [pc, #296]	; (800f1b0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f092:	68f9      	ldr	r1, [r7, #12]
 800f094:	f107 0320 	add.w	r3, r7, #32
 800f098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7ff faa0 	bl	800e5e0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f0a0:	f107 0320 	add.w	r3, r7, #32
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	f7fd fa61 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800f0ac:	f107 0320 	add.w	r3, r7, #32
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7fd fda8 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f0b6:	f107 0318 	add.w	r3, r7, #24
 800f0ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7fe f83d 	bl	800d13c <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f0c2:	f107 0310 	add.w	r3, r7, #16
 800f0c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7fe f837 	bl	800d13c <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f0d4:	68f9      	ldr	r1, [r7, #12]
 800f0d6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f0da:	f107 0310 	add.w	r3, r7, #16
 800f0de:	f107 0218 	add.w	r2, r7, #24
 800f0e2:	f7ff f9b7 	bl	800e454 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f0e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	f7fd fe07 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800f0f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7fd fd85 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800f0fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d046      	beq.n	800f190 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800f102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f104:	2b00      	cmp	r3, #0
 800f106:	d043      	beq.n	800f190 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800f108:	2300      	movs	r3, #0
 800f10a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f10c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f110:	4413      	add	r3, r2
 800f112:	781a      	ldrb	r2, [r3, #0]
 800f114:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f118:	440b      	add	r3, r1
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d103      	bne.n	800f128 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800f120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f122:	3301      	adds	r3, #1
 800f124:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f126:	e7f1      	b.n	800f10c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800f128:	2300      	movs	r3, #0
 800f12a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f12c:	f107 0310 	add.w	r3, r7, #16
 800f130:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f132:	4618      	mov	r0, r3
 800f134:	f7fd fecb 	bl	800cece <_ZNK12SimpleString2atEj>
 800f138:	4603      	mov	r3, r0
 800f13a:	461c      	mov	r4, r3
 800f13c:	f107 0318 	add.w	r3, r7, #24
 800f140:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f142:	4618      	mov	r0, r3
 800f144:	f7fd fec3 	bl	800cece <_ZNK12SimpleString2atEj>
 800f148:	4603      	mov	r3, r0
 800f14a:	429c      	cmp	r4, r3
 800f14c:	bf0c      	ite	eq
 800f14e:	2301      	moveq	r3, #1
 800f150:	2300      	movne	r3, #0
 800f152:	b2db      	uxtb	r3, r3
 800f154:	2b00      	cmp	r3, #0
 800f156:	d003      	beq.n	800f160 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800f158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f15a:	3301      	adds	r3, #1
 800f15c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f15e:	e7e5      	b.n	800f12c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f166:	68f9      	ldr	r1, [r7, #12]
 800f168:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f16c:	f107 0210 	add.w	r2, r7, #16
 800f170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f172:	9300      	str	r3, [sp, #0]
 800f174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f176:	f7ff f987 	bl	800e488 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f17a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f17e:	4619      	mov	r1, r3
 800f180:	4620      	mov	r0, r4
 800f182:	f7fd fdbd 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800f186:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fd fd3b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f190:	f107 0310 	add.w	r3, r7, #16
 800f194:	4618      	mov	r0, r3
 800f196:	f7fd fd36 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f19a:	f107 0318 	add.w	r3, r7, #24
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7fd fd31 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    }
}
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3744      	adds	r7, #68	; 0x44
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd90      	pop	{r4, r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	08027d14 	.word	0x08027d14

0800f1b4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800f1b4:	b590      	push	{r4, r7, lr}
 800f1b6:	b093      	sub	sp, #76	; 0x4c
 800f1b8:	af02      	add	r7, sp, #8
 800f1ba:	60f8      	str	r0, [r7, #12]
 800f1bc:	60b9      	str	r1, [r7, #8]
 800f1be:	607a      	str	r2, [r7, #4]
 800f1c0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f1c2:	68f8      	ldr	r0, [r7, #12]
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	687a      	ldr	r2, [r7, #4]
 800f1c8:	68b9      	ldr	r1, [r7, #8]
 800f1ca:	f7ff f801 	bl	800e1d0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f1ce:	4a55      	ldr	r2, [pc, #340]	; (800f324 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f1da:	68f9      	ldr	r1, [r7, #12]
 800f1dc:	f107 0320 	add.w	r3, r7, #32
 800f1e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7ff f9fc 	bl	800e5e0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f1e8:	f107 0320 	add.w	r3, r7, #32
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	f7fd f9bd 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800f1f4:	f107 0320 	add.w	r3, r7, #32
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7fd fd04 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f1fe:	f107 0318 	add.w	r3, r7, #24
 800f202:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f204:	4618      	mov	r0, r3
 800f206:	f7fd ff99 	bl	800d13c <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f20a:	f107 0310 	add.w	r3, r7, #16
 800f20e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f210:	4618      	mov	r0, r3
 800f212:	f7fd ff93 	bl	800d13c <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f21c:	68f9      	ldr	r1, [r7, #12]
 800f21e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f222:	f107 0310 	add.w	r3, r7, #16
 800f226:	f107 0218 	add.w	r2, r7, #24
 800f22a:	f7ff f913 	bl	800e454 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f22e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f232:	4619      	mov	r1, r3
 800f234:	4620      	mov	r0, r4
 800f236:	f7fd fd63 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800f23a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f23e:	4618      	mov	r0, r3
 800f240:	f7fd fce1 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800f244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f246:	2b00      	cmp	r3, #0
 800f248:	d05c      	beq.n	800f304 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800f24a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d059      	beq.n	800f304 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800f250:	2300      	movs	r3, #0
 800f252:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f254:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f258:	4413      	add	r3, r2
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7fd f824 	bl	800c2aa <_ZN12SimpleString7ToLowerEc>
 800f262:	4603      	mov	r3, r0
 800f264:	461c      	mov	r4, r3
 800f266:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f26a:	4413      	add	r3, r2
 800f26c:	781b      	ldrb	r3, [r3, #0]
 800f26e:	4618      	mov	r0, r3
 800f270:	f7fd f81b 	bl	800c2aa <_ZN12SimpleString7ToLowerEc>
 800f274:	4603      	mov	r3, r0
 800f276:	429c      	cmp	r4, r3
 800f278:	bf0c      	ite	eq
 800f27a:	2301      	moveq	r3, #1
 800f27c:	2300      	movne	r3, #0
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	2b00      	cmp	r3, #0
 800f282:	d003      	beq.n	800f28c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800f284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f286:	3301      	adds	r3, #1
 800f288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f28a:	e7e3      	b.n	800f254 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800f28c:	2300      	movs	r3, #0
 800f28e:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800f290:	f107 0310 	add.w	r3, r7, #16
 800f294:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f296:	4618      	mov	r0, r3
 800f298:	f7fd fe19 	bl	800cece <_ZNK12SimpleString2atEj>
 800f29c:	4603      	mov	r3, r0
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7fd f803 	bl	800c2aa <_ZN12SimpleString7ToLowerEc>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	461c      	mov	r4, r3
 800f2a8:	f107 0318 	add.w	r3, r7, #24
 800f2ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fd fe0d 	bl	800cece <_ZNK12SimpleString2atEj>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f7fc fff7 	bl	800c2aa <_ZN12SimpleString7ToLowerEc>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	429c      	cmp	r4, r3
 800f2c0:	bf0c      	ite	eq
 800f2c2:	2301      	moveq	r3, #1
 800f2c4:	2300      	movne	r3, #0
 800f2c6:	b2db      	uxtb	r3, r3
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d003      	beq.n	800f2d4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800f2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ce:	3301      	adds	r3, #1
 800f2d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f2d2:	e7dd      	b.n	800f290 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f2da:	68f9      	ldr	r1, [r7, #12]
 800f2dc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f2e0:	f107 0210 	add.w	r2, r7, #16
 800f2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2e6:	9300      	str	r3, [sp, #0]
 800f2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ea:	f7ff f8cd 	bl	800e488 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f2ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f2f2:	4619      	mov	r1, r3
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	f7fd fd03 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800f2fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fd fc81 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f304:	f107 0310 	add.w	r3, r7, #16
 800f308:	4618      	mov	r0, r3
 800f30a:	f7fd fc7c 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f30e:	f107 0318 	add.w	r3, r7, #24
 800f312:	4618      	mov	r0, r3
 800f314:	f7fd fc77 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    }
}
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	4618      	mov	r0, r3
 800f31c:	3744      	adds	r7, #68	; 0x44
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd90      	pop	{r4, r7, pc}
 800f322:	bf00      	nop
 800f324:	08027ce8 	.word	0x08027ce8

0800f328 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800f328:	b5b0      	push	{r4, r5, r7, lr}
 800f32a:	b092      	sub	sp, #72	; 0x48
 800f32c:	af02      	add	r7, sp, #8
 800f32e:	60f8      	str	r0, [r7, #12]
 800f330:	60b9      	str	r1, [r7, #8]
 800f332:	607a      	str	r2, [r7, #4]
 800f334:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800f336:	68f8      	ldr	r0, [r7, #12]
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	68b9      	ldr	r1, [r7, #8]
 800f33e:	f7fe ff47 	bl	800e1d0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f342:	4a40      	ldr	r2, [pc, #256]	; (800f444 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f34e:	68f9      	ldr	r1, [r7, #12]
 800f350:	f107 031c 	add.w	r3, r7, #28
 800f354:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f356:	4618      	mov	r0, r3
 800f358:	f7ff f942 	bl	800e5e0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f35c:	f107 031c 	add.w	r3, r7, #28
 800f360:	4619      	mov	r1, r3
 800f362:	4620      	mov	r0, r4
 800f364:	f7fd f903 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800f368:	f107 031c 	add.w	r3, r7, #28
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7fd fc4a 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800f372:	f107 0314 	add.w	r3, r7, #20
 800f376:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fe fa4c 	bl	800d818 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f386:	68fd      	ldr	r5, [r7, #12]
 800f388:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f38c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f38e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f390:	4618      	mov	r0, r3
 800f392:	f7fe fa41 	bl	800d818 <_Z22StringFromBinaryOrNullPKhj>
 800f396:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f39a:	f107 0314 	add.w	r3, r7, #20
 800f39e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f3a2:	4629      	mov	r1, r5
 800f3a4:	f7ff f856 	bl	800e454 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f3a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	f7fd fca6 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800f3b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7fd fc24 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800f3be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7fd fc1f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800f3c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d02f      	beq.n	800f42e <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800f3ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d02c      	beq.n	800f42e <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f3da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3dc:	4413      	add	r3, r2
 800f3de:	781a      	ldrb	r2, [r3, #0]
 800f3e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3e4:	440b      	add	r3, r1
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d103      	bne.n	800f3f4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800f3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3f2:	e7f1      	b.n	800f3d8 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f3fa:	68f9      	ldr	r1, [r7, #12]
 800f3fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f3fe:	4613      	mov	r3, r2
 800f400:	005b      	lsls	r3, r3, #1
 800f402:	4413      	add	r3, r2
 800f404:	1c5d      	adds	r5, r3, #1
 800f406:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800f40a:	f107 0214 	add.w	r2, r7, #20
 800f40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f410:	9300      	str	r3, [sp, #0]
 800f412:	462b      	mov	r3, r5
 800f414:	f7ff f838 	bl	800e488 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f418:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f41c:	4619      	mov	r1, r3
 800f41e:	4620      	mov	r0, r4
 800f420:	f7fd fc6e 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800f424:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f428:	4618      	mov	r0, r3
 800f42a:	f7fd fbec 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800f42e:	f107 0314 	add.w	r3, r7, #20
 800f432:	4618      	mov	r0, r3
 800f434:	f7fd fbe7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
	}
}
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	4618      	mov	r0, r3
 800f43c:	3740      	adds	r7, #64	; 0x40
 800f43e:	46bd      	mov	sp, r7
 800f440:	bdb0      	pop	{r4, r5, r7, pc}
 800f442:	bf00      	nop
 800f444:	08027cbc 	.word	0x08027cbc

0800f448 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800f448:	b5b0      	push	{r4, r5, r7, lr}
 800f44a:	b08c      	sub	sp, #48	; 0x30
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	60f8      	str	r0, [r7, #12]
 800f450:	60b9      	str	r1, [r7, #8]
 800f452:	607a      	str	r2, [r7, #4]
 800f454:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800f456:	68f8      	ldr	r0, [r7, #12]
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	687a      	ldr	r2, [r7, #4]
 800f45c:	68b9      	ldr	r1, [r7, #8]
 800f45e:	f7fe feb7 	bl	800e1d0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f462:	4a26      	ldr	r2, [pc, #152]	; (800f4fc <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f46e:	68f9      	ldr	r1, [r7, #12]
 800f470:	f107 0310 	add.w	r3, r7, #16
 800f474:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f476:	4618      	mov	r0, r3
 800f478:	f7ff f8b2 	bl	800e5e0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f47c:	f107 0310 	add.w	r3, r7, #16
 800f480:	4619      	mov	r1, r3
 800f482:	4620      	mov	r0, r4
 800f484:	f7fd f873 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800f488:	f107 0310 	add.w	r3, r7, #16
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7fd fbba 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f498:	68fd      	ldr	r5, [r7, #12]
 800f49a:	f107 0020 	add.w	r0, r7, #32
 800f49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f4a4:	f7fe fa24 	bl	800d8f0 <_Z20StringFromMaskedBitsmmj>
 800f4a8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f4ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4b2:	f7fe fa1d 	bl	800d8f0 <_Z20StringFromMaskedBitsmmj>
 800f4b6:	f107 0018 	add.w	r0, r7, #24
 800f4ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4be:	f107 0220 	add.w	r2, r7, #32
 800f4c2:	4629      	mov	r1, r5
 800f4c4:	f7fe ffc6 	bl	800e454 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f4c8:	f107 0318 	add.w	r3, r7, #24
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	f7fd fc16 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800f4d4:	f107 0318 	add.w	r3, r7, #24
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7fd fb94 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800f4de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7fd fb8f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 800f4e8:	f107 0320 	add.w	r3, r7, #32
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7fd fb8a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3730      	adds	r7, #48	; 0x30
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bdb0      	pop	{r4, r5, r7, pc}
 800f4fc:	08027c90 	.word	0x08027c90

0800f500 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800f500:	b590      	push	{r4, r7, lr}
 800f502:	b089      	sub	sp, #36	; 0x24
 800f504:	af00      	add	r7, sp, #0
 800f506:	60f8      	str	r0, [r7, #12]
 800f508:	60b9      	str	r1, [r7, #8]
 800f50a:	607a      	str	r2, [r7, #4]
 800f50c:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800f50e:	68f8      	ldr	r0, [r7, #12]
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	68b9      	ldr	r1, [r7, #8]
 800f516:	f7fe fe5b 	bl	800e1d0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f51a:	4a1a      	ldr	r2, [pc, #104]	; (800f584 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f526:	68f9      	ldr	r1, [r7, #12]
 800f528:	f107 0310 	add.w	r3, r7, #16
 800f52c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f52e:	4618      	mov	r0, r3
 800f530:	f7ff f856 	bl	800e5e0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f534:	f107 0310 	add.w	r3, r7, #16
 800f538:	4619      	mov	r1, r3
 800f53a:	4620      	mov	r0, r4
 800f53c:	f7fd f817 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 800f540:	f107 0310 	add.w	r3, r7, #16
 800f544:	4618      	mov	r0, r3
 800f546:	f7fd fb5e 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f552:	f7fd fb2b 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800f556:	4602      	mov	r2, r0
 800f558:	f107 0318 	add.w	r3, r7, #24
 800f55c:	490a      	ldr	r1, [pc, #40]	; (800f588 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fe f858 	bl	800d614 <_Z16StringFromFormatPKcz>
 800f564:	f107 0318 	add.w	r3, r7, #24
 800f568:	4619      	mov	r1, r3
 800f56a:	4620      	mov	r0, r4
 800f56c:	f7fd fbc8 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 800f570:	f107 0318 	add.w	r3, r7, #24
 800f574:	4618      	mov	r0, r3
 800f576:	f7fd fb46 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	4618      	mov	r0, r3
 800f57e:	3724      	adds	r7, #36	; 0x24
 800f580:	46bd      	mov	sp, r7
 800f582:	bd90      	pop	{r4, r7, pc}
 800f584:	08027c64 	.word	0x08027c64
 800f588:	08024090 	.word	0x08024090

0800f58c <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b082      	sub	sp, #8
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	4a05      	ldr	r2, [pc, #20]	; (800f5ac <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	601a      	str	r2, [r3, #0]
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7fe fe99 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3708      	adds	r7, #8
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	08027c64 	.word	0x08027c64

0800f5b0 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b082      	sub	sp, #8
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f7ff ffe7 	bl	800f58c <_ZN25FeatureUnsupportedFailureD1Ev>
 800f5be:	2134      	movs	r1, #52	; 0x34
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f7fa fbb9 	bl	8009d38 <_ZdlPvj>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3708      	adds	r7, #8
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	4a05      	ldr	r2, [pc, #20]	; (800f5f0 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	601a      	str	r2, [r3, #0]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7fe fe77 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3708      	adds	r7, #8
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}
 800f5f0:	08027c90 	.word	0x08027c90

0800f5f4 <_ZN16BitsEqualFailureD0Ev>:
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f7ff ffe7 	bl	800f5d0 <_ZN16BitsEqualFailureD1Ev>
 800f602:	2134      	movs	r1, #52	; 0x34
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f7fa fb97 	bl	8009d38 <_ZdlPvj>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4618      	mov	r0, r3
 800f60e:	3708      	adds	r7, #8
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800f614:	b580      	push	{r7, lr}
 800f616:	b082      	sub	sp, #8
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	4a05      	ldr	r2, [pc, #20]	; (800f634 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	601a      	str	r2, [r3, #0]
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4618      	mov	r0, r3
 800f626:	f7fe fe55 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	4618      	mov	r0, r3
 800f62e:	3708      	adds	r7, #8
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}
 800f634:	08027cbc 	.word	0x08027cbc

0800f638 <_ZN18BinaryEqualFailureD0Ev>:
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f7ff ffe7 	bl	800f614 <_ZN18BinaryEqualFailureD1Ev>
 800f646:	2134      	movs	r1, #52	; 0x34
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f7fa fb75 	bl	8009d38 <_ZdlPvj>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	4618      	mov	r0, r3
 800f652:	3708      	adds	r7, #8
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}

0800f658 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800f658:	b580      	push	{r7, lr}
 800f65a:	b082      	sub	sp, #8
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	4a05      	ldr	r2, [pc, #20]	; (800f678 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	601a      	str	r2, [r3, #0]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	4618      	mov	r0, r3
 800f66a:	f7fe fe33 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	4618      	mov	r0, r3
 800f672:	3708      	adds	r7, #8
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	08027ce8 	.word	0x08027ce8

0800f67c <_ZN24StringEqualNoCaseFailureD0Ev>:
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f7ff ffe7 	bl	800f658 <_ZN24StringEqualNoCaseFailureD1Ev>
 800f68a:	2134      	movs	r1, #52	; 0x34
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f7fa fb53 	bl	8009d38 <_ZdlPvj>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	4618      	mov	r0, r3
 800f696:	3708      	adds	r7, #8
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}

0800f69c <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
 800f6a4:	4a05      	ldr	r2, [pc, #20]	; (800f6bc <_ZN18StringEqualFailureD1Ev+0x20>)
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	601a      	str	r2, [r3, #0]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7fe fe11 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	08027d14 	.word	0x08027d14

0800f6c0 <_ZN18StringEqualFailureD0Ev>:
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f7ff ffe7 	bl	800f69c <_ZN18StringEqualFailureD1Ev>
 800f6ce:	2134      	movs	r1, #52	; 0x34
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f7fa fb31 	bl	8009d38 <_ZdlPvj>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3708      	adds	r7, #8
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b082      	sub	sp, #8
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	4a05      	ldr	r2, [pc, #20]	; (800f700 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	601a      	str	r2, [r3, #0]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f7fe fdef 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3708      	adds	r7, #8
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	08027d40 	.word	0x08027d40

0800f704 <_ZN23SignedBytesEqualFailureD0Ev>:
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f7ff ffe7 	bl	800f6e0 <_ZN23SignedBytesEqualFailureD1Ev>
 800f712:	2134      	movs	r1, #52	; 0x34
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f7fa fb0f 	bl	8009d38 <_ZdlPvj>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	4618      	mov	r0, r3
 800f71e:	3708      	adds	r7, #8
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	4a05      	ldr	r2, [pc, #20]	; (800f744 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	601a      	str	r2, [r3, #0]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	4618      	mov	r0, r3
 800f736:	f7fe fdcd 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	4618      	mov	r0, r3
 800f73e:	3708      	adds	r7, #8
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}
 800f744:	08027d6c 	.word	0x08027d6c

0800f748 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f7ff ffe7 	bl	800f724 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800f756:	2134      	movs	r1, #52	; 0x34
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f7fa faed 	bl	8009d38 <_ZdlPvj>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	4618      	mov	r0, r3
 800f762:	3708      	adds	r7, #8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800f768:	b580      	push	{r7, lr}
 800f76a:	b082      	sub	sp, #8
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	4a05      	ldr	r2, [pc, #20]	; (800f788 <_ZN17LongsEqualFailureD1Ev+0x20>)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	601a      	str	r2, [r3, #0]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fe fdab 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4618      	mov	r0, r3
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}
 800f788:	08027d98 	.word	0x08027d98

0800f78c <_ZN17LongsEqualFailureD0Ev>:
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b082      	sub	sp, #8
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f7ff ffe7 	bl	800f768 <_ZN17LongsEqualFailureD1Ev>
 800f79a:	2134      	movs	r1, #52	; 0x34
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f7fa facb 	bl	8009d38 <_ZdlPvj>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	3708      	adds	r7, #8
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}

0800f7ac <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	4a05      	ldr	r2, [pc, #20]	; (800f7cc <_ZN12CheckFailureD1Ev+0x20>)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	601a      	str	r2, [r3, #0]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7fe fd89 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	3708      	adds	r7, #8
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}
 800f7cc:	08027dc4 	.word	0x08027dc4

0800f7d0 <_ZN12CheckFailureD0Ev>:
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b082      	sub	sp, #8
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f7ff ffe7 	bl	800f7ac <_ZN12CheckFailureD1Ev>
 800f7de:	2134      	movs	r1, #52	; 0x34
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f7fa faa9 	bl	8009d38 <_ZdlPvj>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3708      	adds	r7, #8
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}

0800f7f0 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b082      	sub	sp, #8
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
 800f7f8:	4a05      	ldr	r2, [pc, #20]	; (800f810 <_ZN15ContainsFailureD1Ev+0x20>)
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	601a      	str	r2, [r3, #0]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4618      	mov	r0, r3
 800f802:	f7fe fd67 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4618      	mov	r0, r3
 800f80a:	3708      	adds	r7, #8
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	08027df0 	.word	0x08027df0

0800f814 <_ZN15ContainsFailureD0Ev>:
 800f814:	b580      	push	{r7, lr}
 800f816:	b082      	sub	sp, #8
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f7ff ffe7 	bl	800f7f0 <_ZN15ContainsFailureD1Ev>
 800f822:	2134      	movs	r1, #52	; 0x34
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f7fa fa87 	bl	8009d38 <_ZdlPvj>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4618      	mov	r0, r3
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800f834:	b580      	push	{r7, lr}
 800f836:	b082      	sub	sp, #8
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	4a05      	ldr	r2, [pc, #20]	; (800f854 <_ZN17ComparisonFailureD1Ev+0x20>)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	601a      	str	r2, [r3, #0]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	4618      	mov	r0, r3
 800f846:	f7fe fd45 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	4618      	mov	r0, r3
 800f84e:	3708      	adds	r7, #8
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}
 800f854:	08027e1c 	.word	0x08027e1c

0800f858 <_ZN17ComparisonFailureD0Ev>:
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f7ff ffe7 	bl	800f834 <_ZN17ComparisonFailureD1Ev>
 800f866:	2134      	movs	r1, #52	; 0x34
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f7fa fa65 	bl	8009d38 <_ZdlPvj>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	4618      	mov	r0, r3
 800f872:	3708      	adds	r7, #8
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}

0800f878 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	4a05      	ldr	r2, [pc, #20]	; (800f898 <_ZN17CheckEqualFailureD1Ev+0x20>)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	601a      	str	r2, [r3, #0]
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4618      	mov	r0, r3
 800f88a:	f7fe fd23 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	4618      	mov	r0, r3
 800f892:	3708      	adds	r7, #8
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}
 800f898:	08027e48 	.word	0x08027e48

0800f89c <_ZN17CheckEqualFailureD0Ev>:
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f7ff ffe7 	bl	800f878 <_ZN17CheckEqualFailureD1Ev>
 800f8aa:	2134      	movs	r1, #52	; 0x34
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f7fa fa43 	bl	8009d38 <_ZdlPvj>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3708      	adds	r7, #8
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}

0800f8bc <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b082      	sub	sp, #8
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
 800f8c4:	4a05      	ldr	r2, [pc, #20]	; (800f8dc <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	601a      	str	r2, [r3, #0]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7fe fd01 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	08027e74 	.word	0x08027e74

0800f8e0 <_ZN19DoublesEqualFailureD0Ev>:
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f7ff ffe7 	bl	800f8bc <_ZN19DoublesEqualFailureD1Ev>
 800f8ee:	2134      	movs	r1, #52	; 0x34
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f7fa fa21 	bl	8009d38 <_ZdlPvj>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3708      	adds	r7, #8
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	4a05      	ldr	r2, [pc, #20]	; (800f920 <_ZN13EqualsFailureD1Ev+0x20>)
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	601a      	str	r2, [r3, #0]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4618      	mov	r0, r3
 800f912:	f7fe fcdf 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4618      	mov	r0, r3
 800f91a:	3708      	adds	r7, #8
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	08027ea0 	.word	0x08027ea0

0800f924 <_ZN13EqualsFailureD0Ev>:
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f7ff ffe7 	bl	800f900 <_ZN13EqualsFailureD1Ev>
 800f932:	2134      	movs	r1, #52	; 0x34
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7fa f9ff 	bl	8009d38 <_ZdlPvj>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	4618      	mov	r0, r3
 800f93e:	3708      	adds	r7, #8
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800f944:	b5b0      	push	{r4, r5, r7, lr}
 800f946:	b086      	sub	sp, #24
 800f948:	af02      	add	r7, sp, #8
 800f94a:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800f94c:	4b0d      	ldr	r3, [pc, #52]	; (800f984 <_ZL13checkedMallocj+0x40>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	4798      	blx	r3
 800f954:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d10e      	bne.n	800f97a <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800f95c:	f004 f97e 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 800f960:	4604      	mov	r4, r0
 800f962:	6823      	ldr	r3, [r4, #0]
 800f964:	3368      	adds	r3, #104	; 0x68
 800f966:	681d      	ldr	r5, [r3, #0]
 800f968:	f004 f988 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800f96c:	4603      	mov	r3, r0
 800f96e:	9300      	str	r3, [sp, #0]
 800f970:	2325      	movs	r3, #37	; 0x25
 800f972:	4a05      	ldr	r2, [pc, #20]	; (800f988 <_ZL13checkedMallocj+0x44>)
 800f974:	4905      	ldr	r1, [pc, #20]	; (800f98c <_ZL13checkedMallocj+0x48>)
 800f976:	4620      	mov	r0, r4
 800f978:	47a8      	blx	r5
    return mem;
 800f97a:	68fb      	ldr	r3, [r7, #12]
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3710      	adds	r7, #16
 800f980:	46bd      	mov	sp, r7
 800f982:	bdb0      	pop	{r4, r5, r7, pc}
 800f984:	200000c8 	.word	0x200000c8
 800f988:	08024104 	.word	0x08024104
 800f98c:	08024124 	.word	0x08024124

0800f990 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800f990:	b580      	push	{r7, lr}
 800f992:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800f994:	4b04      	ldr	r3, [pc, #16]	; (800f9a8 <_Z22getCurrentNewAllocatorv+0x18>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d101      	bne.n	800f9a0 <_Z22getCurrentNewAllocatorv+0x10>
 800f99c:	f000 f806 	bl	800f9ac <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800f9a0:	4b01      	ldr	r3, [pc, #4]	; (800f9a8 <_Z22getCurrentNewAllocatorv+0x18>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	bd80      	pop	{r7, pc}
 800f9a8:	200008a4 	.word	0x200008a4

0800f9ac <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800f9b0:	f000 f810 	bl	800f9d4 <_Z19defaultNewAllocatorv>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	4a02      	ldr	r2, [pc, #8]	; (800f9c0 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800f9b8:	6013      	str	r3, [r2, #0]
}
 800f9ba:	bf00      	nop
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	200008a4 	.word	0x200008a4

0800f9c4 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	4801      	ldr	r0, [pc, #4]	; (800f9d0 <__tcf_0+0xc>)
 800f9ca:	f000 f909 	bl	800fbe0 <_ZN19TestMemoryAllocatorD1Ev>
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	200008b0 	.word	0x200008b0

0800f9d4 <_Z19defaultNewAllocatorv>:
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800f9d8:	4b13      	ldr	r3, [pc, #76]	; (800fa28 <_Z19defaultNewAllocatorv+0x54>)
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	f3bf 8f5b 	dmb	ish
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	f003 0301 	and.w	r3, r3, #1
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	bf0c      	ite	eq
 800f9ea:	2301      	moveq	r3, #1
 800f9ec:	2300      	movne	r3, #0
 800f9ee:	b2db      	uxtb	r3, r3
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d016      	beq.n	800fa22 <_Z19defaultNewAllocatorv+0x4e>
 800f9f4:	480c      	ldr	r0, [pc, #48]	; (800fa28 <_Z19defaultNewAllocatorv+0x54>)
 800f9f6:	f00f fc0f 	bl	801f218 <__cxa_guard_acquire>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	bf14      	ite	ne
 800fa00:	2301      	movne	r3, #1
 800fa02:	2300      	moveq	r3, #0
 800fa04:	b2db      	uxtb	r3, r3
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d00b      	beq.n	800fa22 <_Z19defaultNewAllocatorv+0x4e>
 800fa0a:	4b08      	ldr	r3, [pc, #32]	; (800fa2c <_Z19defaultNewAllocatorv+0x58>)
 800fa0c:	4a08      	ldr	r2, [pc, #32]	; (800fa30 <_Z19defaultNewAllocatorv+0x5c>)
 800fa0e:	4909      	ldr	r1, [pc, #36]	; (800fa34 <_Z19defaultNewAllocatorv+0x60>)
 800fa10:	4809      	ldr	r0, [pc, #36]	; (800fa38 <_Z19defaultNewAllocatorv+0x64>)
 800fa12:	f000 f8c5 	bl	800fba0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800fa16:	4804      	ldr	r0, [pc, #16]	; (800fa28 <_Z19defaultNewAllocatorv+0x54>)
 800fa18:	f00f fc0a 	bl	801f230 <__cxa_guard_release>
 800fa1c:	4807      	ldr	r0, [pc, #28]	; (800fa3c <_Z19defaultNewAllocatorv+0x68>)
 800fa1e:	f00f fc2e 	bl	801f27e <atexit>
    return &allocator;
 800fa22:	4b05      	ldr	r3, [pc, #20]	; (800fa38 <_Z19defaultNewAllocatorv+0x64>)
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	bd80      	pop	{r7, pc}
 800fa28:	200008c4 	.word	0x200008c4
 800fa2c:	08024144 	.word	0x08024144
 800fa30:	0802414c 	.word	0x0802414c
 800fa34:	08024150 	.word	0x08024150
 800fa38:	200008b0 	.word	0x200008b0
 800fa3c:	0800f9c5 	.word	0x0800f9c5

0800fa40 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800fa44:	4b04      	ldr	r3, [pc, #16]	; (800fa58 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d101      	bne.n	800fa50 <_Z27getCurrentNewArrayAllocatorv+0x10>
 800fa4c:	f000 f806 	bl	800fa5c <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800fa50:	4b01      	ldr	r3, [pc, #4]	; (800fa58 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800fa52:	681b      	ldr	r3, [r3, #0]
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	200008a8 	.word	0x200008a8

0800fa5c <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800fa60:	f000 f810 	bl	800fa84 <_Z24defaultNewArrayAllocatorv>
 800fa64:	4603      	mov	r3, r0
 800fa66:	4a02      	ldr	r2, [pc, #8]	; (800fa70 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800fa68:	6013      	str	r3, [r2, #0]
}
 800fa6a:	bf00      	nop
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	200008a8 	.word	0x200008a8

0800fa74 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800fa74:	b580      	push	{r7, lr}
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	4801      	ldr	r0, [pc, #4]	; (800fa80 <__tcf_1+0xc>)
 800fa7a:	f000 f8b1 	bl	800fbe0 <_ZN19TestMemoryAllocatorD1Ev>
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	200008c8 	.word	0x200008c8

0800fa84 <_Z24defaultNewArrayAllocatorv>:
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800fa88:	4b13      	ldr	r3, [pc, #76]	; (800fad8 <_Z24defaultNewArrayAllocatorv+0x54>)
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	f3bf 8f5b 	dmb	ish
 800fa90:	b2db      	uxtb	r3, r3
 800fa92:	f003 0301 	and.w	r3, r3, #1
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	bf0c      	ite	eq
 800fa9a:	2301      	moveq	r3, #1
 800fa9c:	2300      	movne	r3, #0
 800fa9e:	b2db      	uxtb	r3, r3
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d016      	beq.n	800fad2 <_Z24defaultNewArrayAllocatorv+0x4e>
 800faa4:	480c      	ldr	r0, [pc, #48]	; (800fad8 <_Z24defaultNewArrayAllocatorv+0x54>)
 800faa6:	f00f fbb7 	bl	801f218 <__cxa_guard_acquire>
 800faaa:	4603      	mov	r3, r0
 800faac:	2b00      	cmp	r3, #0
 800faae:	bf14      	ite	ne
 800fab0:	2301      	movne	r3, #1
 800fab2:	2300      	moveq	r3, #0
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d00b      	beq.n	800fad2 <_Z24defaultNewArrayAllocatorv+0x4e>
 800faba:	4b08      	ldr	r3, [pc, #32]	; (800fadc <_Z24defaultNewArrayAllocatorv+0x58>)
 800fabc:	4a08      	ldr	r2, [pc, #32]	; (800fae0 <_Z24defaultNewArrayAllocatorv+0x5c>)
 800fabe:	4909      	ldr	r1, [pc, #36]	; (800fae4 <_Z24defaultNewArrayAllocatorv+0x60>)
 800fac0:	4809      	ldr	r0, [pc, #36]	; (800fae8 <_Z24defaultNewArrayAllocatorv+0x64>)
 800fac2:	f000 f86d 	bl	800fba0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800fac6:	4804      	ldr	r0, [pc, #16]	; (800fad8 <_Z24defaultNewArrayAllocatorv+0x54>)
 800fac8:	f00f fbb2 	bl	801f230 <__cxa_guard_release>
 800facc:	4807      	ldr	r0, [pc, #28]	; (800faec <_Z24defaultNewArrayAllocatorv+0x68>)
 800face:	f00f fbd6 	bl	801f27e <atexit>
    return &allocator;
 800fad2:	4b05      	ldr	r3, [pc, #20]	; (800fae8 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	bd80      	pop	{r7, pc}
 800fad8:	200008dc 	.word	0x200008dc
 800fadc:	08024168 	.word	0x08024168
 800fae0:	08024174 	.word	0x08024174
 800fae4:	0802417c 	.word	0x0802417c
 800fae8:	200008c8 	.word	0x200008c8
 800faec:	0800fa75 	.word	0x0800fa75

0800faf0 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800faf4:	4b04      	ldr	r3, [pc, #16]	; (800fb08 <_Z25getCurrentMallocAllocatorv+0x18>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d101      	bne.n	800fb00 <_Z25getCurrentMallocAllocatorv+0x10>
 800fafc:	f000 f806 	bl	800fb0c <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800fb00:	4b01      	ldr	r3, [pc, #4]	; (800fb08 <_Z25getCurrentMallocAllocatorv+0x18>)
 800fb02:	681b      	ldr	r3, [r3, #0]
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	200008ac 	.word	0x200008ac

0800fb0c <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800fb10:	f000 f810 	bl	800fb34 <_Z22defaultMallocAllocatorv>
 800fb14:	4603      	mov	r3, r0
 800fb16:	4a02      	ldr	r2, [pc, #8]	; (800fb20 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800fb18:	6013      	str	r3, [r2, #0]
}
 800fb1a:	bf00      	nop
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	200008ac 	.word	0x200008ac

0800fb24 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800fb24:	b580      	push	{r7, lr}
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	4801      	ldr	r0, [pc, #4]	; (800fb30 <__tcf_2+0xc>)
 800fb2a:	f000 f859 	bl	800fbe0 <_ZN19TestMemoryAllocatorD1Ev>
 800fb2e:	bd80      	pop	{r7, pc}
 800fb30:	200008e0 	.word	0x200008e0

0800fb34 <_Z22defaultMallocAllocatorv>:
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800fb38:	4b13      	ldr	r3, [pc, #76]	; (800fb88 <_Z22defaultMallocAllocatorv+0x54>)
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	f3bf 8f5b 	dmb	ish
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	f003 0301 	and.w	r3, r3, #1
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	bf0c      	ite	eq
 800fb4a:	2301      	moveq	r3, #1
 800fb4c:	2300      	movne	r3, #0
 800fb4e:	b2db      	uxtb	r3, r3
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d016      	beq.n	800fb82 <_Z22defaultMallocAllocatorv+0x4e>
 800fb54:	480c      	ldr	r0, [pc, #48]	; (800fb88 <_Z22defaultMallocAllocatorv+0x54>)
 800fb56:	f00f fb5f 	bl	801f218 <__cxa_guard_acquire>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	bf14      	ite	ne
 800fb60:	2301      	movne	r3, #1
 800fb62:	2300      	moveq	r3, #0
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d00b      	beq.n	800fb82 <_Z22defaultMallocAllocatorv+0x4e>
 800fb6a:	4b08      	ldr	r3, [pc, #32]	; (800fb8c <_Z22defaultMallocAllocatorv+0x58>)
 800fb6c:	4a08      	ldr	r2, [pc, #32]	; (800fb90 <_Z22defaultMallocAllocatorv+0x5c>)
 800fb6e:	4909      	ldr	r1, [pc, #36]	; (800fb94 <_Z22defaultMallocAllocatorv+0x60>)
 800fb70:	4809      	ldr	r0, [pc, #36]	; (800fb98 <_Z22defaultMallocAllocatorv+0x64>)
 800fb72:	f000 f815 	bl	800fba0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800fb76:	4804      	ldr	r0, [pc, #16]	; (800fb88 <_Z22defaultMallocAllocatorv+0x54>)
 800fb78:	f00f fb5a 	bl	801f230 <__cxa_guard_release>
 800fb7c:	4807      	ldr	r0, [pc, #28]	; (800fb9c <_Z22defaultMallocAllocatorv+0x68>)
 800fb7e:	f00f fb7e 	bl	801f27e <atexit>
    return &allocator;
 800fb82:	4b05      	ldr	r3, [pc, #20]	; (800fb98 <_Z22defaultMallocAllocatorv+0x64>)
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	200008f4 	.word	0x200008f4
 800fb8c:	08024198 	.word	0x08024198
 800fb90:	080241a0 	.word	0x080241a0
 800fb94:	080241a8 	.word	0x080241a8
 800fb98:	200008e0 	.word	0x200008e0
 800fb9c:	0800fb25 	.word	0x0800fb25

0800fba0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800fba0:	b480      	push	{r7}
 800fba2:	b085      	sub	sp, #20
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	60b9      	str	r1, [r7, #8]
 800fbaa:	607a      	str	r2, [r7, #4]
 800fbac:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800fbae:	4a0b      	ldr	r2, [pc, #44]	; (800fbdc <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	601a      	str	r2, [r3, #0]
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	68ba      	ldr	r2, [r7, #8]
 800fbb8:	605a      	str	r2, [r3, #4]
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	609a      	str	r2, [r3, #8]
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	683a      	ldr	r2, [r7, #0]
 800fbc4:	60da      	str	r2, [r3, #12]
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	741a      	strb	r2, [r3, #16]
{
}
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3714      	adds	r7, #20
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr
 800fbda:	bf00      	nop
 800fbdc:	08027f2c 	.word	0x08027f2c

0800fbe0 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800fbe0:	b480      	push	{r7}
 800fbe2:	b083      	sub	sp, #12
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
 800fbe8:	4a06      	ldr	r2, [pc, #24]	; (800fc04 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2201      	movs	r2, #1
 800fbf2:	741a      	strb	r2, [r3, #16]
}
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	370c      	adds	r7, #12
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop
 800fc04:	08027f2c 	.word	0x08027f2c

0800fc08 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
}
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f7ff ffe5 	bl	800fbe0 <_ZN19TestMemoryAllocatorD1Ev>
 800fc16:	2114      	movs	r1, #20
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f7fa f88d 	bl	8009d38 <_ZdlPvj>
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	4618      	mov	r0, r3
 800fc22:	3708      	adds	r7, #8
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}

0800fc28 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b083      	sub	sp, #12
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	7c1b      	ldrb	r3, [r3, #16]
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	370c      	adds	r7, #12
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3e:	4770      	bx	lr

0800fc40 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800fc40:	b590      	push	{r4, r7, lr}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	3310      	adds	r3, #16
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	4798      	blx	r3
 800fc56:	4604      	mov	r4, r0
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	3310      	adds	r3, #16
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	6838      	ldr	r0, [r7, #0]
 800fc62:	4798      	blx	r3
 800fc64:	4603      	mov	r3, r0
 800fc66:	4619      	mov	r1, r3
 800fc68:	4620      	mov	r0, r4
 800fc6a:	f7fc fa51 	bl	800c110 <_ZN12SimpleString6StrCmpEPKcS1_>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	bf0c      	ite	eq
 800fc74:	2301      	moveq	r3, #1
 800fc76:	2300      	movne	r3, #0
 800fc78:	b2db      	uxtb	r3, r3
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	370c      	adds	r7, #12
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd90      	pop	{r4, r7, pc}
	...

0800fc84 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800fc84:	b590      	push	{r4, r7, lr}
 800fc86:	b083      	sub	sp, #12
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	3308      	adds	r3, #8
 800fc94:	681c      	ldr	r4, [r3, #0]
 800fc96:	2301      	movs	r3, #1
 800fc98:	4a04      	ldr	r2, [pc, #16]	; (800fcac <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800fc9a:	6839      	ldr	r1, [r7, #0]
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	47a0      	blx	r4
 800fca0:	4603      	mov	r3, r0
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	370c      	adds	r7, #12
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd90      	pop	{r4, r7, pc}
 800fcaa:	bf00      	nop
 800fcac:	080241c4 	.word	0x080241c4

0800fcb0 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800fcb0:	b590      	push	{r4, r7, lr}
 800fcb2:	b085      	sub	sp, #20
 800fcb4:	af02      	add	r7, sp, #8
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	330c      	adds	r3, #12
 800fcc0:	681c      	ldr	r4, [r3, #0]
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	9300      	str	r3, [sp, #0]
 800fcc6:	4b04      	ldr	r3, [pc, #16]	; (800fcd8 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800fcc8:	2200      	movs	r2, #0
 800fcca:	6839      	ldr	r1, [r7, #0]
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	47a0      	blx	r4
}
 800fcd0:	bf00      	nop
 800fcd2:	370c      	adds	r7, #12
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd90      	pop	{r4, r7, pc}
 800fcd8:	080241c4 	.word	0x080241c4

0800fcdc <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b084      	sub	sp, #16
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	60f8      	str	r0, [r7, #12]
 800fce4:	60b9      	str	r1, [r7, #8]
 800fce6:	607a      	str	r2, [r7, #4]
 800fce8:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800fcea:	68b8      	ldr	r0, [r7, #8]
 800fcec:	f7ff fe2a 	bl	800f944 <_ZL13checkedMallocj>
 800fcf0:	4603      	mov	r3, r0
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3710      	adds	r7, #16
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}
	...

0800fcfc <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b084      	sub	sp, #16
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	60b9      	str	r1, [r7, #8]
 800fd06:	607a      	str	r2, [r7, #4]
 800fd08:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800fd0a:	4b04      	ldr	r3, [pc, #16]	; (800fd1c <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	68b8      	ldr	r0, [r7, #8]
 800fd10:	4798      	blx	r3
}
 800fd12:	bf00      	nop
 800fd14:	3710      	adds	r7, #16
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	200000d0 	.word	0x200000d0

0800fd20 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800fd20:	b480      	push	{r7}
 800fd22:	b083      	sub	sp, #12
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
    return name_;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	685b      	ldr	r3, [r3, #4]
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	370c      	adds	r7, #12
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr

0800fd38 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b083      	sub	sp, #12
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	689b      	ldr	r3, [r3, #8]
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	370c      	adds	r7, #12
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr

0800fd50 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800fd50:	b480      	push	{r7}
 800fd52:	b083      	sub	sp, #12
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
    return free_name_;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	68db      	ldr	r3, [r3, #12]
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	370c      	adds	r7, #12
 800fd60:	46bd      	mov	sp, r7
 800fd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd66:	4770      	bx	lr

0800fd68 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800fd68:	b480      	push	{r7}
 800fd6a:	b083      	sub	sp, #12
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
    return this;
 800fd70:	687b      	ldr	r3, [r7, #4]
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	370c      	adds	r7, #12
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr
	...

0800fd80 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	4a05      	ldr	r2, [pc, #20]	; (800fda0 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	601a      	str	r2, [r3, #0]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7ff ff25 	bl	800fbe0 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3708      	adds	r7, #8
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	08027ef8 	.word	0x08027ef8

0800fda4 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
}
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f7ff ffe7 	bl	800fd80 <_ZN20NullUnknownAllocatorD1Ev>
 800fdb2:	2114      	movs	r1, #20
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f7f9 ffbf 	bl	8009d38 <_ZdlPvj>
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3708      	adds	r7, #8
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b085      	sub	sp, #20
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]
 800fdd0:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800fdd2:	2300      	movs	r3, #0
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3714      	adds	r7, #20
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr

0800fde0 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b085      	sub	sp, #20
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	60f8      	str	r0, [r7, #12]
 800fde8:	60b9      	str	r1, [r7, #8]
 800fdea:	607a      	str	r2, [r7, #4]
 800fdec:	603b      	str	r3, [r7, #0]
}
 800fdee:	bf00      	nop
 800fdf0:	3714      	adds	r7, #20
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf8:	4770      	bx	lr
	...

0800fdfc <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	4b06      	ldr	r3, [pc, #24]	; (800fe20 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800fe08:	4a05      	ldr	r2, [pc, #20]	; (800fe20 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800fe0a:	4906      	ldr	r1, [pc, #24]	; (800fe24 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800fe0c:	f7ff fec8 	bl	800fba0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800fe10:	4a05      	ldr	r2, [pc, #20]	; (800fe28 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	601a      	str	r2, [r3, #0]
{
}
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3708      	adds	r7, #8
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	080241f8 	.word	0x080241f8
 800fe24:	08024200 	.word	0x08024200
 800fe28:	08027ef8 	.word	0x08027ef8

0800fe2c <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	4801      	ldr	r0, [pc, #4]	; (800fe38 <__tcf_3+0xc>)
 800fe32:	f7ff ffa5 	bl	800fd80 <_ZN20NullUnknownAllocatorD1Ev>
 800fe36:	bd80      	pop	{r7, pc}
 800fe38:	200008f8 	.word	0x200008f8

0800fe3c <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800fe40:	4b12      	ldr	r3, [pc, #72]	; (800fe8c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	f3bf 8f5b 	dmb	ish
 800fe48:	b2db      	uxtb	r3, r3
 800fe4a:	f003 0301 	and.w	r3, r3, #1
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	bf0c      	ite	eq
 800fe52:	2301      	moveq	r3, #1
 800fe54:	2300      	movne	r3, #0
 800fe56:	b2db      	uxtb	r3, r3
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d013      	beq.n	800fe84 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800fe5c:	480b      	ldr	r0, [pc, #44]	; (800fe8c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800fe5e:	f00f f9db 	bl	801f218 <__cxa_guard_acquire>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	bf14      	ite	ne
 800fe68:	2301      	movne	r3, #1
 800fe6a:	2300      	moveq	r3, #0
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d008      	beq.n	800fe84 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800fe72:	4807      	ldr	r0, [pc, #28]	; (800fe90 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800fe74:	f7ff ffc2 	bl	800fdfc <_ZN20NullUnknownAllocatorC1Ev>
 800fe78:	4804      	ldr	r0, [pc, #16]	; (800fe8c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800fe7a:	f00f f9d9 	bl	801f230 <__cxa_guard_release>
 800fe7e:	4805      	ldr	r0, [pc, #20]	; (800fe94 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800fe80:	f00f f9fd 	bl	801f27e <atexit>
    return &allocator;
 800fe84:	4b02      	ldr	r3, [pc, #8]	; (800fe90 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	2000090c 	.word	0x2000090c
 800fe90:	200008f8 	.word	0x200008f8
 800fe94:	0800fe2d 	.word	0x0800fe2d

0800fe98 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800fe98:	b480      	push	{r7}
 800fe9a:	b083      	sub	sp, #12
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
        return testCount_;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	689b      	ldr	r3, [r3, #8]
    }
 800fea4:	4618      	mov	r0, r3
 800fea6:	370c      	adds	r7, #12
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr

0800feb0 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800feb0:	b480      	push	{r7}
 800feb2:	b083      	sub	sp, #12
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	699b      	ldr	r3, [r3, #24]
    }
 800febc:	4618      	mov	r0, r3
 800febe:	370c      	adds	r7, #12
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr

0800fec8 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800fecc:	4b05      	ldr	r3, [pc, #20]	; (800fee4 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	2b02      	cmp	r3, #2
 800fed2:	d103      	bne.n	800fedc <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800fed4:	f004 fa4a 	bl	801436c <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800fed8:	4603      	mov	r3, r0
 800feda:	e001      	b.n	800fee0 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800fedc:	4b01      	ldr	r3, [pc, #4]	; (800fee4 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800fede:	781b      	ldrb	r3, [r3, #0]
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	20000088 	.word	0x20000088

0800fee8 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800fee8:	b480      	push	{r7}
 800feea:	b083      	sub	sp, #12
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800fef0:	4a0a      	ldr	r2, [pc, #40]	; (800ff1c <_ZN10TestOutputC1Ev+0x34>)
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	601a      	str	r2, [r3, #0]
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2200      	movs	r2, #0
 800fefa:	605a      	str	r2, [r3, #4]
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2200      	movs	r2, #0
 800ff00:	721a      	strb	r2, [r3, #8]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2200      	movs	r2, #0
 800ff06:	725a      	strb	r2, [r3, #9]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	4a05      	ldr	r2, [pc, #20]	; (800ff20 <_ZN10TestOutputC1Ev+0x38>)
 800ff0c:	60da      	str	r2, [r3, #12]
{
}
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4618      	mov	r0, r3
 800ff12:	370c      	adds	r7, #12
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr
 800ff1c:	08028030 	.word	0x08028030
 800ff20:	08024600 	.word	0x08024600

0800ff24 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800ff24:	b480      	push	{r7}
 800ff26:	b083      	sub	sp, #12
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	4a04      	ldr	r2, [pc, #16]	; (800ff40 <_ZN10TestOutputD1Ev+0x1c>)
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	601a      	str	r2, [r3, #0]
{
}
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	4618      	mov	r0, r3
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr
 800ff40:	08028030 	.word	0x08028030

0800ff44 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	78fa      	ldrb	r2, [r7, #3]
 800ff54:	721a      	strb	r2, [r3, #8]
}
 800ff56:	bf00      	nop
 800ff58:	370c      	adds	r7, #12
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr

0800ff62 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800ff62:	b480      	push	{r7}
 800ff64:	b083      	sub	sp, #12
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
    color_ = true;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2201      	movs	r2, #1
 800ff6e:	725a      	strb	r2, [r3, #9]
}
 800ff70:	bf00      	nop
 800ff72:	370c      	adds	r7, #12
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr

0800ff7c <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	3328      	adds	r3, #40	; 0x28
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	6839      	ldr	r1, [r7, #0]
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	4798      	blx	r3
}
 800ff94:	bf00      	nop
 800ff96:	3708      	adds	r7, #8
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}

0800ff9c <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800ff9c:	b590      	push	{r4, r7, lr}
 800ff9e:	b085      	sub	sp, #20
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	332c      	adds	r3, #44	; 0x2c
 800ffac:	681c      	ldr	r4, [r3, #0]
 800ffae:	f107 0308 	add.w	r3, r7, #8
 800ffb2:	6839      	ldr	r1, [r7, #0]
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f7fd f8ff 	bl	800d1b8 <_Z10StringFroml>
 800ffba:	f107 0308 	add.w	r3, r7, #8
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7fc fdf4 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	47a0      	blx	r4
 800ffcc:	f107 0308 	add.w	r3, r7, #8
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7fc fe18 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 800ffd6:	bf00      	nop
 800ffd8:	3714      	adds	r7, #20
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd90      	pop	{r4, r7, pc}

0800ffde <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800ffde:	b590      	push	{r4, r7, lr}
 800ffe0:	b085      	sub	sp, #20
 800ffe2:	af00      	add	r7, sp, #0
 800ffe4:	6078      	str	r0, [r7, #4]
 800ffe6:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	332c      	adds	r3, #44	; 0x2c
 800ffee:	681c      	ldr	r4, [r3, #0]
 800fff0:	f107 0308 	add.w	r3, r7, #8
 800fff4:	6839      	ldr	r1, [r7, #0]
 800fff6:	4618      	mov	r0, r3
 800fff8:	f7fd fb34 	bl	800d664 <_Z10StringFromj>
 800fffc:	f107 0308 	add.w	r3, r7, #8
 8010000:	4618      	mov	r0, r3
 8010002:	f7fc fdd3 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 8010006:	4603      	mov	r3, r0
 8010008:	4619      	mov	r1, r3
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	47a0      	blx	r4
 801000e:	f107 0308 	add.w	r3, r7, #8
 8010012:	4618      	mov	r0, r3
 8010014:	f7fc fdf7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 8010018:	bf00      	nop
 801001a:	3714      	adds	r7, #20
 801001c:	46bd      	mov	sp, r7
 801001e:	bd90      	pop	{r4, r7, pc}

08010020 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 8010020:	b590      	push	{r4, r7, lr}
 8010022:	b087      	sub	sp, #28
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	332c      	adds	r3, #44	; 0x2c
 8010032:	681c      	ldr	r4, [r3, #0]
 8010034:	f107 0310 	add.w	r3, r7, #16
 8010038:	2106      	movs	r1, #6
 801003a:	ed97 0b00 	vldr	d0, [r7]
 801003e:	4618      	mov	r0, r3
 8010040:	f7fd faa6 	bl	800d590 <_Z10StringFromdi>
 8010044:	f107 0310 	add.w	r3, r7, #16
 8010048:	4618      	mov	r0, r3
 801004a:	f7fc fdaf 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801004e:	4603      	mov	r3, r0
 8010050:	4619      	mov	r1, r3
 8010052:	68f8      	ldr	r0, [r7, #12]
 8010054:	47a0      	blx	r4
 8010056:	f107 0310 	add.w	r3, r7, #16
 801005a:	4618      	mov	r0, r3
 801005c:	f7fc fdd3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 8010060:	bf00      	nop
 8010062:	371c      	adds	r7, #28
 8010064:	46bd      	mov	sp, r7
 8010066:	bd90      	pop	{r4, r7, pc}

08010068 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b082      	sub	sp, #8
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
    p.print(s);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	332c      	adds	r3, #44	; 0x2c
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	6839      	ldr	r1, [r7, #0]
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	4798      	blx	r3
    return p;
 8010080:	687b      	ldr	r3, [r7, #4]
}
 8010082:	4618      	mov	r0, r3
 8010084:	3708      	adds	r7, #8
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
	...

0801008c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 801008c:	b590      	push	{r4, r7, lr}
 801008e:	b085      	sub	sp, #20
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	7a1b      	ldrb	r3, [r3, #8]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d01a      	beq.n	80100d4 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	332c      	adds	r3, #44	; 0x2c
 80100a4:	681c      	ldr	r4, [r3, #0]
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	3314      	adds	r3, #20
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f107 0208 	add.w	r2, r7, #8
 80100b2:	6839      	ldr	r1, [r7, #0]
 80100b4:	4610      	mov	r0, r2
 80100b6:	4798      	blx	r3
 80100b8:	f107 0308 	add.w	r3, r7, #8
 80100bc:	4618      	mov	r0, r3
 80100be:	f7fc fd75 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 80100c2:	4603      	mov	r3, r0
 80100c4:	4619      	mov	r1, r3
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	47a0      	blx	r4
 80100ca:	f107 0308 	add.w	r3, r7, #8
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fc fd99 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	3318      	adds	r3, #24
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	6838      	ldr	r0, [r7, #0]
 80100de:	4798      	blx	r3
 80100e0:	4603      	mov	r3, r0
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d007      	beq.n	80100f6 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	3344      	adds	r3, #68	; 0x44
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	4907      	ldr	r1, [pc, #28]	; (801010c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 80100f4:	e006      	b.n	8010104 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	3344      	adds	r3, #68	; 0x44
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4904      	ldr	r1, [pc, #16]	; (8010110 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	4798      	blx	r3
}
 8010104:	bf00      	nop
 8010106:	3714      	adds	r7, #20
 8010108:	46bd      	mov	sp, r7
 801010a:	bd90      	pop	{r4, r7, pc}
 801010c:	08024600 	.word	0x08024600
 8010110:	08024604 	.word	0x08024604

08010114 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 8010114:	b590      	push	{r4, r7, lr}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	7a1b      	ldrb	r3, [r3, #8]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d019      	beq.n	801015a <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	332c      	adds	r3, #44	; 0x2c
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	4910      	ldr	r1, [pc, #64]	; (8010170 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	3334      	adds	r3, #52	; 0x34
 801013a:	681c      	ldr	r4, [r3, #0]
 801013c:	6838      	ldr	r0, [r7, #0]
 801013e:	f002 f845 	bl	80121cc <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8010142:	4603      	mov	r3, r0
 8010144:	4619      	mov	r1, r3
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	47a0      	blx	r4
        print(" ms\n");
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	332c      	adds	r3, #44	; 0x2c
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	4908      	ldr	r1, [pc, #32]	; (8010174 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 8010158:	e005      	b.n	8010166 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	3358      	adds	r3, #88	; 0x58
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	4798      	blx	r3
}
 8010166:	bf00      	nop
 8010168:	370c      	adds	r7, #12
 801016a:	46bd      	mov	sp, r7
 801016c:	bd90      	pop	{r4, r7, pc}
 801016e:	bf00      	nop
 8010170:	08024608 	.word	0x08024608
 8010174:	0802460c 	.word	0x0802460c

08010178 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	332c      	adds	r3, #44	; 0x2c
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	68d2      	ldr	r2, [r2, #12]
 801018c:	4611      	mov	r1, r2
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	1c5a      	adds	r2, r3, #1
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	605a      	str	r2, [r3, #4]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	685a      	ldr	r2, [r3, #4]
 80101a0:	4b0d      	ldr	r3, [pc, #52]	; (80101d8 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 80101a2:	fb83 1302 	smull	r1, r3, r3, r2
 80101a6:	1119      	asrs	r1, r3, #4
 80101a8:	17d3      	asrs	r3, r2, #31
 80101aa:	1acb      	subs	r3, r1, r3
 80101ac:	2132      	movs	r1, #50	; 0x32
 80101ae:	fb01 f303 	mul.w	r3, r1, r3
 80101b2:	1ad3      	subs	r3, r2, r3
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	bf0c      	ite	eq
 80101b8:	2301      	moveq	r3, #1
 80101ba:	2300      	movne	r3, #0
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d006      	beq.n	80101d0 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	332c      	adds	r3, #44	; 0x2c
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4904      	ldr	r1, [pc, #16]	; (80101dc <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	4798      	blx	r3
}
 80101d0:	bf00      	nop
 80101d2:	3708      	adds	r7, #8
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}
 80101d8:	51eb851f 	.word	0x51eb851f
 80101dc:	08024614 	.word	0x08024614

080101e0 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b083      	sub	sp, #12
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	683a      	ldr	r2, [r7, #0]
 80101ee:	60da      	str	r2, [r3, #12]
}
 80101f0:	bf00      	nop
 80101f2:	370c      	adds	r7, #12
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr

080101fc <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 80101fc:	b480      	push	{r7}
 80101fe:	b083      	sub	sp, #12
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
}
 8010204:	bf00      	nop
 8010206:	370c      	adds	r7, #12
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr

08010210 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8010210:	b480      	push	{r7}
 8010212:	b083      	sub	sp, #12
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
 8010218:	6039      	str	r1, [r7, #0]
}
 801021a:	bf00      	nop
 801021c:	370c      	adds	r7, #12
 801021e:	46bd      	mov	sp, r7
 8010220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010224:	4770      	bx	lr

08010226 <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8010226:	b480      	push	{r7}
 8010228:	b083      	sub	sp, #12
 801022a:	af00      	add	r7, sp, #0
 801022c:	6078      	str	r0, [r7, #4]
 801022e:	6039      	str	r1, [r7, #0]
}
 8010230:	bf00      	nop
 8010232:	370c      	adds	r7, #12
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr

0801023c <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 801023c:	b590      	push	{r4, r7, lr}
 801023e:	b085      	sub	sp, #20
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	6039      	str	r1, [r7, #0]
    print("\n");
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	332c      	adds	r3, #44	; 0x2c
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	496f      	ldr	r1, [pc, #444]	; (801040c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 8010254:	6838      	ldr	r0, [r7, #0]
 8010256:	f7f8 f83d 	bl	80082d4 <_ZNK10TestResult9isFailureEv>
 801025a:	4603      	mov	r3, r0
 801025c:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 801025e:	6838      	ldr	r0, [r7, #0]
 8010260:	f7f8 f82c 	bl	80082bc <_ZNK10TestResult15getFailureCountEv>
 8010264:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 8010266:	7bfb      	ldrb	r3, [r7, #15]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d02b      	beq.n	80102c4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	7a5b      	ldrb	r3, [r3, #9]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d006      	beq.n	8010282 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	332c      	adds	r3, #44	; 0x2c
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	4964      	ldr	r1, [pc, #400]	; (8010410 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	4798      	blx	r3
        }
        print("Errors (");
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	332c      	adds	r3, #44	; 0x2c
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	4962      	ldr	r1, [pc, #392]	; (8010414 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	4798      	blx	r3
        if (failureCount > 0) {
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d00e      	beq.n	80102b4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	3334      	adds	r3, #52	; 0x34
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	68b9      	ldr	r1, [r7, #8]
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	4798      	blx	r3
            print(" failures, ");
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	332c      	adds	r3, #44	; 0x2c
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	495a      	ldr	r1, [pc, #360]	; (8010418 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	4798      	blx	r3
 80102b2:	e019      	b.n	80102e8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	332c      	adds	r3, #44	; 0x2c
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	4957      	ldr	r1, [pc, #348]	; (801041c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	4798      	blx	r3
 80102c2:	e011      	b.n	80102e8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	7a5b      	ldrb	r3, [r3, #9]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d006      	beq.n	80102da <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	332c      	adds	r3, #44	; 0x2c
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	4952      	ldr	r1, [pc, #328]	; (8010420 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	4798      	blx	r3
        }
        print("OK (");
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	332c      	adds	r3, #44	; 0x2c
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	4950      	ldr	r1, [pc, #320]	; (8010424 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	4798      	blx	r3
    }
    print(result.getTestCount());
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	3334      	adds	r3, #52	; 0x34
 80102ee:	681c      	ldr	r4, [r3, #0]
 80102f0:	6838      	ldr	r0, [r7, #0]
 80102f2:	f7ff fdd1 	bl	800fe98 <_ZNK10TestResult12getTestCountEv>
 80102f6:	4603      	mov	r3, r0
 80102f8:	4619      	mov	r1, r3
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	47a0      	blx	r4
    print(" tests, ");
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	332c      	adds	r3, #44	; 0x2c
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	4948      	ldr	r1, [pc, #288]	; (8010428 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	4798      	blx	r3
    print(result.getRunCount());
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	3334      	adds	r3, #52	; 0x34
 8010312:	681c      	ldr	r4, [r3, #0]
 8010314:	6838      	ldr	r0, [r7, #0]
 8010316:	f7f7 ffb9 	bl	800828c <_ZNK10TestResult11getRunCountEv>
 801031a:	4603      	mov	r3, r0
 801031c:	4619      	mov	r1, r3
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	47a0      	blx	r4
    print(" ran, ");
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	332c      	adds	r3, #44	; 0x2c
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	4940      	ldr	r1, [pc, #256]	; (801042c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	4798      	blx	r3
    print(result.getCheckCount());
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	3334      	adds	r3, #52	; 0x34
 8010336:	681c      	ldr	r4, [r3, #0]
 8010338:	6838      	ldr	r0, [r7, #0]
 801033a:	f7f8 fc13 	bl	8008b64 <_ZNK10TestResult13getCheckCountEv>
 801033e:	4603      	mov	r3, r0
 8010340:	4619      	mov	r1, r3
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	47a0      	blx	r4
    print(" checks, ");
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	332c      	adds	r3, #44	; 0x2c
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	4938      	ldr	r1, [pc, #224]	; (8010430 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	4798      	blx	r3
    print(result.getIgnoredCount());
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	3334      	adds	r3, #52	; 0x34
 801035a:	681c      	ldr	r4, [r3, #0]
 801035c:	6838      	ldr	r0, [r7, #0]
 801035e:	f7f7 ffa1 	bl	80082a4 <_ZNK10TestResult15getIgnoredCountEv>
 8010362:	4603      	mov	r3, r0
 8010364:	4619      	mov	r1, r3
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	47a0      	blx	r4
    print(" ignored, ");
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	332c      	adds	r3, #44	; 0x2c
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	4930      	ldr	r1, [pc, #192]	; (8010434 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	4798      	blx	r3
    print(result.getFilteredOutCount());
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	3334      	adds	r3, #52	; 0x34
 801037e:	681c      	ldr	r4, [r3, #0]
 8010380:	6838      	ldr	r0, [r7, #0]
 8010382:	f7ff fd95 	bl	800feb0 <_ZNK10TestResult19getFilteredOutCountEv>
 8010386:	4603      	mov	r3, r0
 8010388:	4619      	mov	r1, r3
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	47a0      	blx	r4
    print(" filtered out, ");
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	332c      	adds	r3, #44	; 0x2c
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	4928      	ldr	r1, [pc, #160]	; (8010438 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	3334      	adds	r3, #52	; 0x34
 80103a2:	681c      	ldr	r4, [r3, #0]
 80103a4:	6838      	ldr	r0, [r7, #0]
 80103a6:	f001 ff05 	bl	80121b4 <_ZNK10TestResult21getTotalExecutionTimeEv>
 80103aa:	4603      	mov	r3, r0
 80103ac:	4619      	mov	r1, r3
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	47a0      	blx	r4
    print(" ms)");
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	332c      	adds	r3, #44	; 0x2c
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	4920      	ldr	r1, [pc, #128]	; (801043c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	4798      	blx	r3
    if (color_) {
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	7a5b      	ldrb	r3, [r3, #9]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d006      	beq.n	80103d6 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	332c      	adds	r3, #44	; 0x2c
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	491b      	ldr	r1, [pc, #108]	; (8010440 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 80103d6:	7bfb      	ldrb	r3, [r7, #15]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d009      	beq.n	80103f0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d106      	bne.n	80103f0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	332c      	adds	r3, #44	; 0x2c
 80103e8:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 80103ea:	4916      	ldr	r1, [pc, #88]	; (8010444 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	4798      	blx	r3
    }
    print("\n\n");
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	332c      	adds	r3, #44	; 0x2c
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4913      	ldr	r1, [pc, #76]	; (8010448 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	4798      	blx	r3

    dotCount_ = 0;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2200      	movs	r2, #0
 8010402:	605a      	str	r2, [r3, #4]
}
 8010404:	bf00      	nop
 8010406:	3714      	adds	r7, #20
 8010408:	46bd      	mov	sp, r7
 801040a:	bd90      	pop	{r4, r7, pc}
 801040c:	08024614 	.word	0x08024614
 8010410:	08024618 	.word	0x08024618
 8010414:	08024620 	.word	0x08024620
 8010418:	0802462c 	.word	0x0802462c
 801041c:	08024638 	.word	0x08024638
 8010420:	08024648 	.word	0x08024648
 8010424:	08024650 	.word	0x08024650
 8010428:	08024658 	.word	0x08024658
 801042c:	08024664 	.word	0x08024664
 8010430:	0802466c 	.word	0x0802466c
 8010434:	08024678 	.word	0x08024678
 8010438:	08024684 	.word	0x08024684
 801043c:	08024694 	.word	0x08024694
 8010440:	0802469c 	.word	0x0802469c
 8010444:	080246a0 	.word	0x080246a0
 8010448:	08024744 	.word	0x08024744

0801044c <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b084      	sub	sp, #16
 8010450:	af00      	add	r7, sp, #0
 8010452:	60f8      	str	r0, [r7, #12]
 8010454:	60b9      	str	r1, [r7, #8]
 8010456:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2b01      	cmp	r3, #1
 801045c:	d922      	bls.n	80104a4 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	332c      	adds	r3, #44	; 0x2c
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	4911      	ldr	r1, [pc, #68]	; (80104ac <_ZN10TestOutput12printTestRunEjj+0x60>)
 8010468:	68f8      	ldr	r0, [r7, #12]
 801046a:	4798      	blx	r3
        print(number);
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	3334      	adds	r3, #52	; 0x34
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	68b9      	ldr	r1, [r7, #8]
 8010476:	68f8      	ldr	r0, [r7, #12]
 8010478:	4798      	blx	r3
        print(" of ");
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	332c      	adds	r3, #44	; 0x2c
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	490b      	ldr	r1, [pc, #44]	; (80104b0 <_ZN10TestOutput12printTestRunEjj+0x64>)
 8010484:	68f8      	ldr	r0, [r7, #12]
 8010486:	4798      	blx	r3
        print(total);
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	3334      	adds	r3, #52	; 0x34
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	6879      	ldr	r1, [r7, #4]
 8010492:	68f8      	ldr	r0, [r7, #12]
 8010494:	4798      	blx	r3
        print("\n");
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	332c      	adds	r3, #44	; 0x2c
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4905      	ldr	r1, [pc, #20]	; (80104b4 <_ZN10TestOutput12printTestRunEjj+0x68>)
 80104a0:	68f8      	ldr	r0, [r7, #12]
 80104a2:	4798      	blx	r3
    }
}
 80104a4:	bf00      	nop
 80104a6:	3710      	adds	r7, #16
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	08024748 	.word	0x08024748
 80104b0:	08024754 	.word	0x08024754
 80104b4:	08024614 	.word	0x08024614

080104b8 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b084      	sub	sp, #16
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 80104c2:	6838      	ldr	r0, [r7, #0]
 80104c4:	f7fd ffa1 	bl	800e40a <_ZNK11TestFailure17isOutsideTestFileEv>
 80104c8:	4603      	mov	r3, r0
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d105      	bne.n	80104da <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 80104ce:	6838      	ldr	r0, [r7, #0]
 80104d0:	f7fd ffad 	bl	800e42e <_ZNK11TestFailure18isInHelperFunctionEv>
 80104d4:	4603      	mov	r3, r0
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d001      	beq.n	80104de <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 80104da:	2301      	movs	r3, #1
 80104dc:	e000      	b.n	80104e0 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 80104de:	2300      	movs	r3, #0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d004      	beq.n	80104ee <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 80104e4:	6839      	ldr	r1, [r7, #0]
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f000 f81d 	bl	8010526 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 80104ec:	e003      	b.n	80104f6 <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 80104ee:	6839      	ldr	r1, [r7, #0]
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f000 f86b 	bl	80105cc <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	3318      	adds	r3, #24
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	f107 0208 	add.w	r2, r7, #8
 8010502:	6839      	ldr	r1, [r7, #0]
 8010504:	4610      	mov	r0, r2
 8010506:	4798      	blx	r3
 8010508:	f107 0308 	add.w	r3, r7, #8
 801050c:	4619      	mov	r1, r3
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f000 f8b2 	bl	8010678 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 8010514:	f107 0308 	add.w	r3, r7, #8
 8010518:	4618      	mov	r0, r3
 801051a:	f7fc fb74 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 801051e:	bf00      	nop
 8010520:	3710      	adds	r7, #16
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}

08010526 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 8010526:	b580      	push	{r7, lr}
 8010528:	b088      	sub	sp, #32
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
 801052e:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	331c      	adds	r3, #28
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	f107 0208 	add.w	r2, r7, #8
 801053c:	6839      	ldr	r1, [r7, #0]
 801053e:	4610      	mov	r0, r2
 8010540:	4798      	blx	r3
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	3320      	adds	r3, #32
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	6838      	ldr	r0, [r7, #0]
 801054c:	4798      	blx	r3
 801054e:	4602      	mov	r2, r0
 8010550:	f107 0308 	add.w	r3, r7, #8
 8010554:	4619      	mov	r1, r3
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f000 f8be 	bl	80106d8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 801055c:	f107 0308 	add.w	r3, r7, #8
 8010560:	4618      	mov	r0, r3
 8010562:	f7fc fb50 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	330c      	adds	r3, #12
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	f107 0210 	add.w	r2, r7, #16
 8010572:	6839      	ldr	r1, [r7, #0]
 8010574:	4610      	mov	r0, r2
 8010576:	4798      	blx	r3
 8010578:	f107 0310 	add.w	r3, r7, #16
 801057c:	4619      	mov	r1, r3
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 f85c 	bl	801063c <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8010584:	f107 0310 	add.w	r3, r7, #16
 8010588:	4618      	mov	r0, r3
 801058a:	f7fc fb3c 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	3308      	adds	r3, #8
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f107 0218 	add.w	r2, r7, #24
 801059a:	6839      	ldr	r1, [r7, #0]
 801059c:	4610      	mov	r0, r2
 801059e:	4798      	blx	r3
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	3314      	adds	r3, #20
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	6838      	ldr	r0, [r7, #0]
 80105aa:	4798      	blx	r3
 80105ac:	4602      	mov	r2, r0
 80105ae:	f107 0318 	add.w	r3, r7, #24
 80105b2:	4619      	mov	r1, r3
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f000 f88f 	bl	80106d8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 80105ba:	f107 0318 	add.w	r3, r7, #24
 80105be:	4618      	mov	r0, r3
 80105c0:	f7fc fb21 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 80105c4:	bf00      	nop
 80105c6:	3720      	adds	r7, #32
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b086      	sub	sp, #24
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	3308      	adds	r3, #8
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	f107 0208 	add.w	r2, r7, #8
 80105e2:	6839      	ldr	r1, [r7, #0]
 80105e4:	4610      	mov	r0, r2
 80105e6:	4798      	blx	r3
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	3314      	adds	r3, #20
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	6838      	ldr	r0, [r7, #0]
 80105f2:	4798      	blx	r3
 80105f4:	4602      	mov	r2, r0
 80105f6:	f107 0308 	add.w	r3, r7, #8
 80105fa:	4619      	mov	r1, r3
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f000 f86b 	bl	80106d8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8010602:	f107 0308 	add.w	r3, r7, #8
 8010606:	4618      	mov	r0, r3
 8010608:	f7fc fafd 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	330c      	adds	r3, #12
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	f107 0210 	add.w	r2, r7, #16
 8010618:	6839      	ldr	r1, [r7, #0]
 801061a:	4610      	mov	r0, r2
 801061c:	4798      	blx	r3
 801061e:	f107 0310 	add.w	r3, r7, #16
 8010622:	4619      	mov	r1, r3
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f000 f809 	bl	801063c <_ZN10TestOutput18printFailureInTestE12SimpleString>
 801062a:	f107 0310 	add.w	r3, r7, #16
 801062e:	4618      	mov	r0, r3
 8010630:	f7fc fae9 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 8010634:	bf00      	nop
 8010636:	3718      	adds	r7, #24
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 801063c:	b590      	push	{r4, r7, lr}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	332c      	adds	r3, #44	; 0x2c
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	4909      	ldr	r1, [pc, #36]	; (8010674 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	4798      	blx	r3
    print(testName.asCharString());
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	332c      	adds	r3, #44	; 0x2c
 801065a:	681c      	ldr	r4, [r3, #0]
 801065c:	6838      	ldr	r0, [r7, #0]
 801065e:	f7fc faa5 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 8010662:	4603      	mov	r3, r0
 8010664:	4619      	mov	r1, r3
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	47a0      	blx	r4
}
 801066a:	bf00      	nop
 801066c:	370c      	adds	r7, #12
 801066e:	46bd      	mov	sp, r7
 8010670:	bd90      	pop	{r4, r7, pc}
 8010672:	bf00      	nop
 8010674:	0802475c 	.word	0x0802475c

08010678 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 8010678:	b590      	push	{r4, r7, lr}
 801067a:	b083      	sub	sp, #12
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	6039      	str	r1, [r7, #0]
    print("\n");
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	332c      	adds	r3, #44	; 0x2c
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	4910      	ldr	r1, [pc, #64]	; (80106cc <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	4798      	blx	r3
    print("\t");
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	332c      	adds	r3, #44	; 0x2c
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	490d      	ldr	r1, [pc, #52]	; (80106d0 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	4798      	blx	r3
    print(reason.asCharString());
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	332c      	adds	r3, #44	; 0x2c
 80106a4:	681c      	ldr	r4, [r3, #0]
 80106a6:	6838      	ldr	r0, [r7, #0]
 80106a8:	f7fc fa80 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 80106ac:	4603      	mov	r3, r0
 80106ae:	4619      	mov	r1, r3
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	47a0      	blx	r4
    print("\n\n");
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	332c      	adds	r3, #44	; 0x2c
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	4905      	ldr	r1, [pc, #20]	; (80106d4 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	4798      	blx	r3
}
 80106c2:	bf00      	nop
 80106c4:	370c      	adds	r7, #12
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd90      	pop	{r4, r7, pc}
 80106ca:	bf00      	nop
 80106cc:	08024614 	.word	0x08024614
 80106d0:	0802476c 	.word	0x0802476c
 80106d4:	08024744 	.word	0x08024744

080106d8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 80106d8:	b590      	push	{r4, r7, lr}
 80106da:	b089      	sub	sp, #36	; 0x24
 80106dc:	af00      	add	r7, sp, #0
 80106de:	60f8      	str	r0, [r7, #12]
 80106e0:	60b9      	str	r1, [r7, #8]
 80106e2:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 80106e4:	f7ff fbf0 	bl	800fec8 <_ZN10TestOutput21getWorkingEnvironmentEv>
 80106e8:	4603      	mov	r3, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	bf0c      	ite	eq
 80106ee:	2301      	moveq	r3, #1
 80106f0:	2300      	movne	r3, #0
 80106f2:	b2db      	uxtb	r3, r3
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d015      	beq.n	8010724 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	3354      	adds	r3, #84	; 0x54
 80106fe:	681c      	ldr	r4, [r3, #0]
 8010700:	f107 0310 	add.w	r3, r7, #16
 8010704:	68b9      	ldr	r1, [r7, #8]
 8010706:	4618      	mov	r0, r3
 8010708:	f7fb ff19 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 801070c:	f107 0310 	add.w	r3, r7, #16
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	4619      	mov	r1, r3
 8010714:	68f8      	ldr	r0, [r7, #12]
 8010716:	47a0      	blx	r4
 8010718:	f107 0310 	add.w	r3, r7, #16
 801071c:	4618      	mov	r0, r3
 801071e:	f7fc fa72 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 8010722:	e014      	b.n	801074e <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	3350      	adds	r3, #80	; 0x50
 801072a:	681c      	ldr	r4, [r3, #0]
 801072c:	f107 0318 	add.w	r3, r7, #24
 8010730:	68b9      	ldr	r1, [r7, #8]
 8010732:	4618      	mov	r0, r3
 8010734:	f7fb ff03 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 8010738:	f107 0318 	add.w	r3, r7, #24
 801073c:	687a      	ldr	r2, [r7, #4]
 801073e:	4619      	mov	r1, r3
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	47a0      	blx	r4
 8010744:	f107 0318 	add.w	r3, r7, #24
 8010748:	4618      	mov	r0, r3
 801074a:	f7fc fa5c 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 801074e:	bf00      	nop
 8010750:	3724      	adds	r7, #36	; 0x24
 8010752:	46bd      	mov	sp, r7
 8010754:	bd90      	pop	{r4, r7, pc}
	...

08010758 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8010758:	b590      	push	{r4, r7, lr}
 801075a:	b085      	sub	sp, #20
 801075c:	af00      	add	r7, sp, #0
 801075e:	60f8      	str	r0, [r7, #12]
 8010760:	60b9      	str	r1, [r7, #8]
 8010762:	607a      	str	r2, [r7, #4]
    print("\n");
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	332c      	adds	r3, #44	; 0x2c
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	4916      	ldr	r1, [pc, #88]	; (80107c8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 801076e:	68f8      	ldr	r0, [r7, #12]
 8010770:	4798      	blx	r3
    print(file.asCharString());
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	332c      	adds	r3, #44	; 0x2c
 8010778:	681c      	ldr	r4, [r3, #0]
 801077a:	68b8      	ldr	r0, [r7, #8]
 801077c:	f7fc fa16 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 8010780:	4603      	mov	r3, r0
 8010782:	4619      	mov	r1, r3
 8010784:	68f8      	ldr	r0, [r7, #12]
 8010786:	47a0      	blx	r4
    print(":");
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	332c      	adds	r3, #44	; 0x2c
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	490e      	ldr	r1, [pc, #56]	; (80107cc <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 8010792:	68f8      	ldr	r0, [r7, #12]
 8010794:	4798      	blx	r3
    print(lineNumber);
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	3334      	adds	r3, #52	; 0x34
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	6879      	ldr	r1, [r7, #4]
 80107a0:	68f8      	ldr	r0, [r7, #12]
 80107a2:	4798      	blx	r3
    print(":");
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	332c      	adds	r3, #44	; 0x2c
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	4907      	ldr	r1, [pc, #28]	; (80107cc <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 80107ae:	68f8      	ldr	r0, [r7, #12]
 80107b0:	4798      	blx	r3
    print(" error:");
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	332c      	adds	r3, #44	; 0x2c
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4905      	ldr	r1, [pc, #20]	; (80107d0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 80107bc:	68f8      	ldr	r0, [r7, #12]
 80107be:	4798      	blx	r3
}
 80107c0:	bf00      	nop
 80107c2:	3714      	adds	r7, #20
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd90      	pop	{r4, r7, pc}
 80107c8:	08024614 	.word	0x08024614
 80107cc:	08024770 	.word	0x08024770
 80107d0:	08024774 	.word	0x08024774

080107d4 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 80107d4:	b590      	push	{r4, r7, lr}
 80107d6:	b085      	sub	sp, #20
 80107d8:	af00      	add	r7, sp, #0
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	607a      	str	r2, [r7, #4]
    print("\n");
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	332c      	adds	r3, #44	; 0x2c
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	4916      	ldr	r1, [pc, #88]	; (8010844 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 80107ea:	68f8      	ldr	r0, [r7, #12]
 80107ec:	4798      	blx	r3
    print(file.asCharString());
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	332c      	adds	r3, #44	; 0x2c
 80107f4:	681c      	ldr	r4, [r3, #0]
 80107f6:	68b8      	ldr	r0, [r7, #8]
 80107f8:	f7fc f9d8 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 80107fc:	4603      	mov	r3, r0
 80107fe:	4619      	mov	r1, r3
 8010800:	68f8      	ldr	r0, [r7, #12]
 8010802:	47a0      	blx	r4
    print("(");
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	332c      	adds	r3, #44	; 0x2c
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	490e      	ldr	r1, [pc, #56]	; (8010848 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 801080e:	68f8      	ldr	r0, [r7, #12]
 8010810:	4798      	blx	r3
    print(lineNumber);
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	3334      	adds	r3, #52	; 0x34
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	6879      	ldr	r1, [r7, #4]
 801081c:	68f8      	ldr	r0, [r7, #12]
 801081e:	4798      	blx	r3
    print("):");
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	332c      	adds	r3, #44	; 0x2c
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	4908      	ldr	r1, [pc, #32]	; (801084c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 801082a:	68f8      	ldr	r0, [r7, #12]
 801082c:	4798      	blx	r3
    print(" error:");
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	332c      	adds	r3, #44	; 0x2c
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	4906      	ldr	r1, [pc, #24]	; (8010850 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 8010838:	68f8      	ldr	r0, [r7, #12]
 801083a:	4798      	blx	r3
}
 801083c:	bf00      	nop
 801083e:	3714      	adds	r7, #20
 8010840:	46bd      	mov	sp, r7
 8010842:	bd90      	pop	{r4, r7, pc}
 8010844:	08024614 	.word	0x08024614
 8010848:	0802477c 	.word	0x0802477c
 801084c:	08024780 	.word	0x08024780
 8010850:	08024774 	.word	0x08024774

08010854 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	7a1b      	ldrb	r3, [r3, #8]
 8010862:	2b02      	cmp	r3, #2
 8010864:	d106      	bne.n	8010874 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	3328      	adds	r3, #40	; 0x28
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	6839      	ldr	r1, [r7, #0]
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	4798      	blx	r3
}
 8010874:	bf00      	nop
 8010876:	3708      	adds	r7, #8
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	6039      	str	r1, [r7, #0]
    while (*s) {
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d009      	beq.n	80108a2 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 801088e:	4b0a      	ldr	r3, [pc, #40]	; (80108b8 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	683a      	ldr	r2, [r7, #0]
 8010894:	7812      	ldrb	r2, [r2, #0]
 8010896:	4610      	mov	r0, r2
 8010898:	4798      	blx	r3
        s++;
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	3301      	adds	r3, #1
 801089e:	603b      	str	r3, [r7, #0]
    while (*s) {
 80108a0:	e7f1      	b.n	8010886 <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	334c      	adds	r3, #76	; 0x4c
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	4798      	blx	r3
}
 80108ae:	bf00      	nop
 80108b0:	3708      	adds	r7, #8
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	200000c0 	.word	0x200000c0

080108bc <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b082      	sub	sp, #8
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 80108c4:	4b03      	ldr	r3, [pc, #12]	; (80108d4 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	4798      	blx	r3
}
 80108ca:	bf00      	nop
 80108cc:	3708      	adds	r7, #8
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}
 80108d2:	bf00      	nop
 80108d4:	200000c4 	.word	0x200000c4

080108d8 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7ff fb00 	bl	800fee8 <_ZN10TestOutputC1Ev>
 80108e8:	4a06      	ldr	r2, [pc, #24]	; (8010904 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	601a      	str	r2, [r3, #0]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2200      	movs	r2, #0
 80108f2:	611a      	str	r2, [r3, #16]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2200      	movs	r2, #0
 80108f8:	615a      	str	r2, [r3, #20]
{
}
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	4618      	mov	r0, r3
 80108fe:	3708      	adds	r7, #8
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}
 8010904:	08027f60 	.word	0x08027f60

08010908 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	4a0e      	ldr	r2, [pc, #56]	; (801094c <_ZN19CompositeTestOutputD1Ev+0x44>)
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	691b      	ldr	r3, [r3, #16]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d004      	beq.n	8010928 <_ZN19CompositeTestOutputD1Ev+0x20>
 801091e:	681a      	ldr	r2, [r3, #0]
 8010920:	3204      	adds	r2, #4
 8010922:	6812      	ldr	r2, [r2, #0]
 8010924:	4618      	mov	r0, r3
 8010926:	4790      	blx	r2
  delete outputTwo_;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	695b      	ldr	r3, [r3, #20]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d004      	beq.n	801093a <_ZN19CompositeTestOutputD1Ev+0x32>
 8010930:	681a      	ldr	r2, [r3, #0]
 8010932:	3204      	adds	r2, #4
 8010934:	6812      	ldr	r2, [r2, #0]
 8010936:	4618      	mov	r0, r3
 8010938:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	4618      	mov	r0, r3
 801093e:	f7ff faf1 	bl	800ff24 <_ZN10TestOutputD1Ev>
}
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	4618      	mov	r0, r3
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}
 801094c:	08027f60 	.word	0x08027f60

08010950 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
}
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f7ff ffd5 	bl	8010908 <_ZN19CompositeTestOutputD1Ev>
 801095e:	2118      	movs	r1, #24
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f7f9 f9e9 	bl	8009d38 <_ZdlPvj>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	4618      	mov	r0, r3
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b082      	sub	sp, #8
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	691b      	ldr	r3, [r3, #16]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d004      	beq.n	801098c <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 8010982:	681a      	ldr	r2, [r3, #0]
 8010984:	3204      	adds	r2, #4
 8010986:	6812      	ldr	r2, [r2, #0]
 8010988:	4618      	mov	r0, r3
 801098a:	4790      	blx	r2
  outputOne_ = output;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	683a      	ldr	r2, [r7, #0]
 8010990:	611a      	str	r2, [r3, #16]
}
 8010992:	bf00      	nop
 8010994:	3708      	adds	r7, #8
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}

0801099a <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 801099a:	b580      	push	{r7, lr}
 801099c:	b082      	sub	sp, #8
 801099e:	af00      	add	r7, sp, #0
 80109a0:	6078      	str	r0, [r7, #4]
 80109a2:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	695b      	ldr	r3, [r3, #20]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d004      	beq.n	80109b6 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 80109ac:	681a      	ldr	r2, [r3, #0]
 80109ae:	3204      	adds	r2, #4
 80109b0:	6812      	ldr	r2, [r2, #0]
 80109b2:	4618      	mov	r0, r3
 80109b4:	4790      	blx	r2
  outputTwo_ = output;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	683a      	ldr	r2, [r7, #0]
 80109ba:	615a      	str	r2, [r3, #20]
}
 80109bc:	bf00      	nop
 80109be:	3708      	adds	r7, #8
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}

080109c4 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	691b      	ldr	r3, [r3, #16]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d008      	beq.n	80109e6 <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	691a      	ldr	r2, [r3, #16]
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	691b      	ldr	r3, [r3, #16]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	3308      	adds	r3, #8
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	4610      	mov	r0, r2
 80109e4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	695b      	ldr	r3, [r3, #20]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d008      	beq.n	8010a00 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	695a      	ldr	r2, [r3, #20]
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	695b      	ldr	r3, [r3, #20]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	3308      	adds	r3, #8
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	4610      	mov	r0, r2
 80109fe:	4798      	blx	r3
}
 8010a00:	bf00      	nop
 8010a02:	3708      	adds	r7, #8
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b082      	sub	sp, #8
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	691b      	ldr	r3, [r3, #16]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d009      	beq.n	8010a2e <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	691a      	ldr	r2, [r3, #16]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	691b      	ldr	r3, [r3, #16]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	330c      	adds	r3, #12
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	6839      	ldr	r1, [r7, #0]
 8010a2a:	4610      	mov	r0, r2
 8010a2c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	695b      	ldr	r3, [r3, #20]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d009      	beq.n	8010a4a <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	695a      	ldr	r2, [r3, #20]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	695b      	ldr	r3, [r3, #20]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	330c      	adds	r3, #12
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	6839      	ldr	r1, [r7, #0]
 8010a46:	4610      	mov	r0, r2
 8010a48:	4798      	blx	r3
}
 8010a4a:	bf00      	nop
 8010a4c:	3708      	adds	r7, #8
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}

08010a52 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8010a52:	b580      	push	{r7, lr}
 8010a54:	b082      	sub	sp, #8
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	6078      	str	r0, [r7, #4]
 8010a5a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	691b      	ldr	r3, [r3, #16]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d009      	beq.n	8010a78 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	691a      	ldr	r2, [r3, #16]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	691b      	ldr	r3, [r3, #16]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	3310      	adds	r3, #16
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	6839      	ldr	r1, [r7, #0]
 8010a74:	4610      	mov	r0, r2
 8010a76:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	695b      	ldr	r3, [r3, #20]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d009      	beq.n	8010a94 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	695a      	ldr	r2, [r3, #20]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	695b      	ldr	r3, [r3, #20]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	3310      	adds	r3, #16
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	6839      	ldr	r1, [r7, #0]
 8010a90:	4610      	mov	r0, r2
 8010a92:	4798      	blx	r3
}
 8010a94:	bf00      	nop
 8010a96:	3708      	adds	r7, #8
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}

08010a9c <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b082      	sub	sp, #8
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	691b      	ldr	r3, [r3, #16]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d009      	beq.n	8010ac2 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	691a      	ldr	r2, [r3, #16]
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	691b      	ldr	r3, [r3, #16]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	3314      	adds	r3, #20
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	6839      	ldr	r1, [r7, #0]
 8010abe:	4610      	mov	r0, r2
 8010ac0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	695b      	ldr	r3, [r3, #20]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d009      	beq.n	8010ade <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	695a      	ldr	r2, [r3, #20]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	695b      	ldr	r3, [r3, #20]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	3314      	adds	r3, #20
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	6839      	ldr	r1, [r7, #0]
 8010ada:	4610      	mov	r0, r2
 8010adc:	4798      	blx	r3
}
 8010ade:	bf00      	nop
 8010ae0:	3708      	adds	r7, #8
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}

08010ae6 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 8010ae6:	b580      	push	{r7, lr}
 8010ae8:	b082      	sub	sp, #8
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	6078      	str	r0, [r7, #4]
 8010aee:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	691b      	ldr	r3, [r3, #16]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d009      	beq.n	8010b0c <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	691a      	ldr	r2, [r3, #16]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	691b      	ldr	r3, [r3, #16]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	3318      	adds	r3, #24
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	6839      	ldr	r1, [r7, #0]
 8010b08:	4610      	mov	r0, r2
 8010b0a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	695b      	ldr	r3, [r3, #20]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d009      	beq.n	8010b28 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	695a      	ldr	r2, [r3, #20]
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	695b      	ldr	r3, [r3, #20]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	3318      	adds	r3, #24
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	6839      	ldr	r1, [r7, #0]
 8010b24:	4610      	mov	r0, r2
 8010b26:	4798      	blx	r3
}
 8010b28:	bf00      	nop
 8010b2a:	3708      	adds	r7, #8
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b082      	sub	sp, #8
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	691b      	ldr	r3, [r3, #16]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d009      	beq.n	8010b56 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	691a      	ldr	r2, [r3, #16]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	691b      	ldr	r3, [r3, #16]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	331c      	adds	r3, #28
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	6839      	ldr	r1, [r7, #0]
 8010b52:	4610      	mov	r0, r2
 8010b54:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	695b      	ldr	r3, [r3, #20]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d009      	beq.n	8010b72 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	695a      	ldr	r2, [r3, #20]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	695b      	ldr	r3, [r3, #20]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	331c      	adds	r3, #28
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	6839      	ldr	r1, [r7, #0]
 8010b6e:	4610      	mov	r0, r2
 8010b70:	4798      	blx	r3
}
 8010b72:	bf00      	nop
 8010b74:	3708      	adds	r7, #8
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}

08010b7a <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 8010b7a:	b580      	push	{r7, lr}
 8010b7c:	b082      	sub	sp, #8
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	6078      	str	r0, [r7, #4]
 8010b82:	460b      	mov	r3, r1
 8010b84:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	691b      	ldr	r3, [r3, #16]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d009      	beq.n	8010ba2 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	691a      	ldr	r2, [r3, #16]
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	691b      	ldr	r3, [r3, #16]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	3320      	adds	r3, #32
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	78f9      	ldrb	r1, [r7, #3]
 8010b9e:	4610      	mov	r0, r2
 8010ba0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	695b      	ldr	r3, [r3, #20]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d009      	beq.n	8010bbe <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	695a      	ldr	r2, [r3, #20]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	695b      	ldr	r3, [r3, #20]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	3320      	adds	r3, #32
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	78f9      	ldrb	r1, [r7, #3]
 8010bba:	4610      	mov	r0, r2
 8010bbc:	4798      	blx	r3
}
 8010bbe:	bf00      	nop
 8010bc0:	3708      	adds	r7, #8
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}

08010bc6 <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 8010bc6:	b580      	push	{r7, lr}
 8010bc8:	b082      	sub	sp, #8
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	691b      	ldr	r3, [r3, #16]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d008      	beq.n	8010be8 <_ZN19CompositeTestOutput5colorEv+0x22>
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	691a      	ldr	r2, [r3, #16]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	691b      	ldr	r3, [r3, #16]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	3324      	adds	r3, #36	; 0x24
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	4610      	mov	r0, r2
 8010be6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	695b      	ldr	r3, [r3, #20]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d008      	beq.n	8010c02 <_ZN19CompositeTestOutput5colorEv+0x3c>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	695a      	ldr	r2, [r3, #20]
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	695b      	ldr	r3, [r3, #20]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	3324      	adds	r3, #36	; 0x24
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	4610      	mov	r0, r2
 8010c00:	4798      	blx	r3
}
 8010c02:	bf00      	nop
 8010c04:	3708      	adds	r7, #8
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}

08010c0a <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 8010c0a:	b580      	push	{r7, lr}
 8010c0c:	b082      	sub	sp, #8
 8010c0e:	af00      	add	r7, sp, #0
 8010c10:	6078      	str	r0, [r7, #4]
 8010c12:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	691b      	ldr	r3, [r3, #16]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d009      	beq.n	8010c30 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	691a      	ldr	r2, [r3, #16]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	691b      	ldr	r3, [r3, #16]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	3328      	adds	r3, #40	; 0x28
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	6839      	ldr	r1, [r7, #0]
 8010c2c:	4610      	mov	r0, r2
 8010c2e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	695b      	ldr	r3, [r3, #20]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d009      	beq.n	8010c4c <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	695a      	ldr	r2, [r3, #20]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	695b      	ldr	r3, [r3, #20]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	3328      	adds	r3, #40	; 0x28
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	6839      	ldr	r1, [r7, #0]
 8010c48:	4610      	mov	r0, r2
 8010c4a:	4798      	blx	r3
}
 8010c4c:	bf00      	nop
 8010c4e:	3708      	adds	r7, #8
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b082      	sub	sp, #8
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	691b      	ldr	r3, [r3, #16]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d009      	beq.n	8010c7a <_ZN19CompositeTestOutput5printEPKc+0x26>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	691a      	ldr	r2, [r3, #16]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	691b      	ldr	r3, [r3, #16]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	332c      	adds	r3, #44	; 0x2c
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	6839      	ldr	r1, [r7, #0]
 8010c76:	4610      	mov	r0, r2
 8010c78:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	695b      	ldr	r3, [r3, #20]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d009      	beq.n	8010c96 <_ZN19CompositeTestOutput5printEPKc+0x42>
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	695a      	ldr	r2, [r3, #20]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	695b      	ldr	r3, [r3, #20]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	332c      	adds	r3, #44	; 0x2c
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	6839      	ldr	r1, [r7, #0]
 8010c92:	4610      	mov	r0, r2
 8010c94:	4798      	blx	r3
}
 8010c96:	bf00      	nop
 8010c98:	3708      	adds	r7, #8
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}

08010c9e <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 8010c9e:	b580      	push	{r7, lr}
 8010ca0:	b082      	sub	sp, #8
 8010ca2:	af00      	add	r7, sp, #0
 8010ca4:	6078      	str	r0, [r7, #4]
 8010ca6:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	691b      	ldr	r3, [r3, #16]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d009      	beq.n	8010cc4 <_ZN19CompositeTestOutput5printEl+0x26>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	691a      	ldr	r2, [r3, #16]
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	691b      	ldr	r3, [r3, #16]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	3330      	adds	r3, #48	; 0x30
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	6839      	ldr	r1, [r7, #0]
 8010cc0:	4610      	mov	r0, r2
 8010cc2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	695b      	ldr	r3, [r3, #20]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d009      	beq.n	8010ce0 <_ZN19CompositeTestOutput5printEl+0x42>
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	695a      	ldr	r2, [r3, #20]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	695b      	ldr	r3, [r3, #20]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	3330      	adds	r3, #48	; 0x30
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	6839      	ldr	r1, [r7, #0]
 8010cdc:	4610      	mov	r0, r2
 8010cde:	4798      	blx	r3
}
 8010ce0:	bf00      	nop
 8010ce2:	3708      	adds	r7, #8
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}

08010ce8 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	691b      	ldr	r3, [r3, #16]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d009      	beq.n	8010d0e <_ZN19CompositeTestOutput5printEj+0x26>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	691a      	ldr	r2, [r3, #16]
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	691b      	ldr	r3, [r3, #16]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	3334      	adds	r3, #52	; 0x34
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	6839      	ldr	r1, [r7, #0]
 8010d0a:	4610      	mov	r0, r2
 8010d0c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	695b      	ldr	r3, [r3, #20]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d009      	beq.n	8010d2a <_ZN19CompositeTestOutput5printEj+0x42>
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	695a      	ldr	r2, [r3, #20]
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	695b      	ldr	r3, [r3, #20]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	3334      	adds	r3, #52	; 0x34
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	6839      	ldr	r1, [r7, #0]
 8010d26:	4610      	mov	r0, r2
 8010d28:	4798      	blx	r3
}
 8010d2a:	bf00      	nop
 8010d2c:	3708      	adds	r7, #8
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}

08010d32 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 8010d32:	b580      	push	{r7, lr}
 8010d34:	b084      	sub	sp, #16
 8010d36:	af00      	add	r7, sp, #0
 8010d38:	60f8      	str	r0, [r7, #12]
 8010d3a:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	691b      	ldr	r3, [r3, #16]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d00a      	beq.n	8010d5c <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	691a      	ldr	r2, [r3, #16]
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	691b      	ldr	r3, [r3, #16]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	3338      	adds	r3, #56	; 0x38
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	ed97 0b00 	vldr	d0, [r7]
 8010d58:	4610      	mov	r0, r2
 8010d5a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	695b      	ldr	r3, [r3, #20]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d00a      	beq.n	8010d7a <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	695a      	ldr	r2, [r3, #20]
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	695b      	ldr	r3, [r3, #20]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	3338      	adds	r3, #56	; 0x38
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	ed97 0b00 	vldr	d0, [r7]
 8010d76:	4610      	mov	r0, r2
 8010d78:	4798      	blx	r3
}
 8010d7a:	bf00      	nop
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}

08010d82 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 8010d82:	b580      	push	{r7, lr}
 8010d84:	b082      	sub	sp, #8
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	6078      	str	r0, [r7, #4]
 8010d8a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	691b      	ldr	r3, [r3, #16]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d009      	beq.n	8010da8 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	691a      	ldr	r2, [r3, #16]
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	691b      	ldr	r3, [r3, #16]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	333c      	adds	r3, #60	; 0x3c
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	6839      	ldr	r1, [r7, #0]
 8010da4:	4610      	mov	r0, r2
 8010da6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	695b      	ldr	r3, [r3, #20]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d009      	beq.n	8010dc4 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	695a      	ldr	r2, [r3, #20]
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	695b      	ldr	r3, [r3, #20]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	333c      	adds	r3, #60	; 0x3c
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	6839      	ldr	r1, [r7, #0]
 8010dc0:	4610      	mov	r0, r2
 8010dc2:	4798      	blx	r3
}
 8010dc4:	bf00      	nop
 8010dc6:	3708      	adds	r7, #8
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b082      	sub	sp, #8
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	691b      	ldr	r3, [r3, #16]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d009      	beq.n	8010df2 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	691a      	ldr	r2, [r3, #16]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	691b      	ldr	r3, [r3, #16]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	3344      	adds	r3, #68	; 0x44
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	6839      	ldr	r1, [r7, #0]
 8010dee:	4610      	mov	r0, r2
 8010df0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	695b      	ldr	r3, [r3, #20]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d009      	beq.n	8010e0e <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	695a      	ldr	r2, [r3, #20]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	695b      	ldr	r3, [r3, #20]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	3344      	adds	r3, #68	; 0x44
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	6839      	ldr	r1, [r7, #0]
 8010e0a:	4610      	mov	r0, r2
 8010e0c:	4798      	blx	r3
}
 8010e0e:	bf00      	nop
 8010e10:	3708      	adds	r7, #8
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}

08010e16 <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 8010e16:	b580      	push	{r7, lr}
 8010e18:	b082      	sub	sp, #8
 8010e1a:	af00      	add	r7, sp, #0
 8010e1c:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	691b      	ldr	r3, [r3, #16]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d008      	beq.n	8010e38 <_ZN19CompositeTestOutput5flushEv+0x22>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	691a      	ldr	r2, [r3, #16]
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	691b      	ldr	r3, [r3, #16]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	334c      	adds	r3, #76	; 0x4c
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	4610      	mov	r0, r2
 8010e36:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	695b      	ldr	r3, [r3, #20]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d008      	beq.n	8010e52 <_ZN19CompositeTestOutput5flushEv+0x3c>
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	695a      	ldr	r2, [r3, #20]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	695b      	ldr	r3, [r3, #20]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	334c      	adds	r3, #76	; 0x4c
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	4610      	mov	r0, r2
 8010e50:	4798      	blx	r3
}
 8010e52:	bf00      	nop
 8010e54:	3708      	adds	r7, #8
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}

08010e5a <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 8010e5a:	b480      	push	{r7}
 8010e5c:	b085      	sub	sp, #20
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	60f8      	str	r0, [r7, #12]
 8010e62:	60b9      	str	r1, [r7, #8]
 8010e64:	607a      	str	r2, [r7, #4]
    }
 8010e66:	bf00      	nop
 8010e68:	3714      	adds	r7, #20
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr

08010e72 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 8010e72:	b480      	push	{r7}
 8010e74:	b085      	sub	sp, #20
 8010e76:	af00      	add	r7, sp, #0
 8010e78:	60f8      	str	r0, [r7, #12]
 8010e7a:	60b9      	str	r1, [r7, #8]
 8010e7c:	607a      	str	r2, [r7, #4]
    }
 8010e7e:	bf00      	nop
 8010e80:	3714      	adds	r7, #20
 8010e82:	46bd      	mov	sp, r7
 8010e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e88:	4770      	bx	lr
	...

08010e8c <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b082      	sub	sp, #8
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 8010e96:	4a0b      	ldr	r2, [pc, #44]	; (8010ec4 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	601a      	str	r2, [r3, #0]
 8010e9c:	f000 f9ce 	bl	801123c <_ZN14NullTestPlugin8instanceEv>
 8010ea0:	4602      	mov	r2, r0
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	605a      	str	r2, [r3, #4]
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	3308      	adds	r3, #8
 8010eaa:	6839      	ldr	r1, [r7, #0]
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7fb fb46 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	2201      	movs	r2, #1
 8010eb6:	741a      	strb	r2, [r3, #16]
{
}
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	4618      	mov	r0, r3
 8010ebc:	3708      	adds	r7, #8
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}
 8010ec2:	bf00      	nop
 8010ec4:	0802811c 	.word	0x0802811c

08010ec8 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b082      	sub	sp, #8
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 8010ed2:	4a0a      	ldr	r2, [pc, #40]	; (8010efc <_ZN10TestPluginC1EPS_+0x34>)
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	601a      	str	r2, [r3, #0]
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	683a      	ldr	r2, [r7, #0]
 8010edc:	605a      	str	r2, [r3, #4]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	3308      	adds	r3, #8
 8010ee2:	4907      	ldr	r1, [pc, #28]	; (8010f00 <_ZN10TestPluginC1EPS_+0x38>)
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7fb fad6 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2201      	movs	r2, #1
 8010eee:	741a      	strb	r2, [r3, #16]
{
}
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	3708      	adds	r7, #8
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}
 8010efa:	bf00      	nop
 8010efc:	0802811c 	.word	0x0802811c
 8010f00:	08024784 	.word	0x08024784

08010f04 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b082      	sub	sp, #8
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	4a06      	ldr	r2, [pc, #24]	; (8010f28 <_ZN10TestPluginD1Ev+0x24>)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	601a      	str	r2, [r3, #0]
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	3308      	adds	r3, #8
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7fb fe75 	bl	800cc06 <_ZN12SimpleStringD1Ev>
{
}
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	4618      	mov	r0, r3
 8010f20:	3708      	adds	r7, #8
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd80      	pop	{r7, pc}
 8010f26:	bf00      	nop
 8010f28:	0802811c 	.word	0x0802811c

08010f2c <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
}
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f7ff ffe5 	bl	8010f04 <_ZN10TestPluginD1Ev>
 8010f3a:	2114      	movs	r1, #20
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f7f8 fefb 	bl	8009d38 <_ZdlPvj>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	4618      	mov	r0, r3
 8010f46:	3708      	adds	r7, #8
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}

08010f4c <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b083      	sub	sp, #12
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	683a      	ldr	r2, [r7, #0]
 8010f5a:	605a      	str	r2, [r3, #4]
    return this;
 8010f5c:	687b      	ldr	r3, [r7, #4]
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	370c      	adds	r7, #12
 8010f62:	46bd      	mov	sp, r7
 8010f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f68:	4770      	bx	lr

08010f6a <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 8010f6a:	b580      	push	{r7, lr}
 8010f6c:	b084      	sub	sp, #16
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	60f8      	str	r0, [r7, #12]
 8010f72:	60b9      	str	r1, [r7, #8]
 8010f74:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	7c1b      	ldrb	r3, [r3, #16]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d007      	beq.n	8010f8e <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	3308      	adds	r3, #8
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	687a      	ldr	r2, [r7, #4]
 8010f88:	68b9      	ldr	r1, [r7, #8]
 8010f8a:	68f8      	ldr	r0, [r7, #12]
 8010f8c:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	6858      	ldr	r0, [r3, #4]
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	685b      	ldr	r3, [r3, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	3314      	adds	r3, #20
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	687a      	ldr	r2, [r7, #4]
 8010f9e:	68b9      	ldr	r1, [r7, #8]
 8010fa0:	4798      	blx	r3
}
 8010fa2:	bf00      	nop
 8010fa4:	3710      	adds	r7, #16
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}

08010faa <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 8010faa:	b580      	push	{r7, lr}
 8010fac:	b084      	sub	sp, #16
 8010fae:	af00      	add	r7, sp, #0
 8010fb0:	60f8      	str	r0, [r7, #12]
 8010fb2:	60b9      	str	r1, [r7, #8]
 8010fb4:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	6858      	ldr	r0, [r3, #4]
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	685b      	ldr	r3, [r3, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	3318      	adds	r3, #24
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	68b9      	ldr	r1, [r7, #8]
 8010fc8:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	7c1b      	ldrb	r3, [r3, #16]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d007      	beq.n	8010fe2 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	330c      	adds	r3, #12
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	687a      	ldr	r2, [r7, #4]
 8010fdc:	68b9      	ldr	r1, [r7, #8]
 8010fde:	68f8      	ldr	r0, [r7, #12]
 8010fe0:	4798      	blx	r3
}
 8010fe2:	bf00      	nop
 8010fe4:	3710      	adds	r7, #16
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}

08010fea <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 8010fea:	b590      	push	{r4, r7, lr}
 8010fec:	b085      	sub	sp, #20
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	60f8      	str	r0, [r7, #12]
 8010ff2:	60b9      	str	r1, [r7, #8]
 8010ff4:	607a      	str	r2, [r7, #4]
 8010ff6:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	331c      	adds	r3, #28
 8010ffe:	681c      	ldr	r4, [r3, #0]
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	68b9      	ldr	r1, [r7, #8]
 8011006:	68f8      	ldr	r0, [r7, #12]
 8011008:	47a0      	blx	r4
 801100a:	4603      	mov	r3, r0
}
 801100c:	4618      	mov	r0, r3
 801100e:	3714      	adds	r7, #20
 8011010:	46bd      	mov	sp, r7
 8011012:	bd90      	pop	{r4, r7, pc}

08011014 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 8011014:	b590      	push	{r4, r7, lr}
 8011016:	b085      	sub	sp, #20
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	607a      	str	r2, [r7, #4]
 8011020:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	3310      	adds	r3, #16
 8011028:	681c      	ldr	r4, [r3, #0]
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	687a      	ldr	r2, [r7, #4]
 801102e:	68b9      	ldr	r1, [r7, #8]
 8011030:	68f8      	ldr	r0, [r7, #12]
 8011032:	47a0      	blx	r4
 8011034:	4603      	mov	r3, r0
 8011036:	2b00      	cmp	r3, #0
 8011038:	d001      	beq.n	801103e <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 801103a:	2301      	movs	r3, #1
 801103c:	e011      	b.n	8011062 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d00c      	beq.n	8011060 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	6858      	ldr	r0, [r3, #4]
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	331c      	adds	r3, #28
 8011052:	681c      	ldr	r4, [r3, #0]
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	687a      	ldr	r2, [r7, #4]
 8011058:	68b9      	ldr	r1, [r7, #8]
 801105a:	47a0      	blx	r4
 801105c:	4603      	mov	r3, r0
 801105e:	e000      	b.n	8011062 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 8011060:	2300      	movs	r3, #0
}
 8011062:	4618      	mov	r0, r3
 8011064:	3714      	adds	r7, #20
 8011066:	46bd      	mov	sp, r7
 8011068:	bd90      	pop	{r4, r7, pc}

0801106a <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 801106a:	b480      	push	{r7}
 801106c:	b083      	sub	sp, #12
 801106e:	af00      	add	r7, sp, #0
 8011070:	6078      	str	r0, [r7, #4]
    return name_;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	3308      	adds	r3, #8
}
 8011076:	4618      	mov	r0, r3
 8011078:	370c      	adds	r7, #12
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr

08011082 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 8011082:	b580      	push	{r7, lr}
 8011084:	b082      	sub	sp, #8
 8011086:	af00      	add	r7, sp, #0
 8011088:	6078      	str	r0, [r7, #4]
 801108a:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	3308      	adds	r3, #8
 8011090:	4619      	mov	r1, r3
 8011092:	6838      	ldr	r0, [r7, #0]
 8011094:	f7fb fdc3 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 8011098:	4603      	mov	r3, r0
 801109a:	2b00      	cmp	r3, #0
 801109c:	d001      	beq.n	80110a2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	e00d      	b.n	80110be <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d007      	beq.n	80110ba <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	685b      	ldr	r3, [r3, #4]
 80110ae:	6839      	ldr	r1, [r7, #0]
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7ff ffe6 	bl	8011082 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 80110b6:	4603      	mov	r3, r0
 80110b8:	e001      	b.n	80110be <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	685b      	ldr	r3, [r3, #4]
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3708      	adds	r7, #8
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}

080110c6 <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 80110c6:	b480      	push	{r7}
 80110c8:	b083      	sub	sp, #12
 80110ca:	af00      	add	r7, sp, #0
 80110cc:	6078      	str	r0, [r7, #4]
    return next_;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	685b      	ldr	r3, [r3, #4]
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	370c      	adds	r7, #12
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr

080110de <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 80110de:	b580      	push	{r7, lr}
 80110e0:	b084      	sub	sp, #16
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	6078      	str	r0, [r7, #4]
 80110e6:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 80110e8:	2300      	movs	r3, #0
 80110ea:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	685b      	ldr	r3, [r3, #4]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d00e      	beq.n	8011112 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	685b      	ldr	r3, [r3, #4]
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7ff ffb6 	bl	801106a <_ZN10TestPlugin7getNameEv>
 80110fe:	4603      	mov	r3, r0
 8011100:	6839      	ldr	r1, [r7, #0]
 8011102:	4618      	mov	r0, r3
 8011104:	f7fb fd8b 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 8011108:	4603      	mov	r3, r0
 801110a:	2b00      	cmp	r3, #0
 801110c:	d001      	beq.n	8011112 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 801110e:	2301      	movs	r3, #1
 8011110:	e000      	b.n	8011114 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 8011112:	2300      	movs	r3, #0
 8011114:	2b00      	cmp	r3, #0
 8011116:	d007      	beq.n	8011128 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	685a      	ldr	r2, [r3, #4]
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	605a      	str	r2, [r3, #4]
    }
    return removed;
 8011128:	68fb      	ldr	r3, [r7, #12]
}
 801112a:	4618      	mov	r0, r3
 801112c:	3710      	adds	r7, #16
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}

08011132 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 8011132:	b480      	push	{r7}
 8011134:	b083      	sub	sp, #12
 8011136:	af00      	add	r7, sp, #0
 8011138:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	2200      	movs	r2, #0
 801113e:	741a      	strb	r2, [r3, #16]
}
 8011140:	bf00      	nop
 8011142:	370c      	adds	r7, #12
 8011144:	46bd      	mov	sp, r7
 8011146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114a:	4770      	bx	lr

0801114c <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 801114c:	b480      	push	{r7}
 801114e:	b083      	sub	sp, #12
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2201      	movs	r2, #1
 8011158:	741a      	strb	r2, [r3, #16]
}
 801115a:	bf00      	nop
 801115c:	370c      	adds	r7, #12
 801115e:	46bd      	mov	sp, r7
 8011160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011164:	4770      	bx	lr

08011166 <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 8011166:	b480      	push	{r7}
 8011168:	b083      	sub	sp, #12
 801116a:	af00      	add	r7, sp, #0
 801116c:	6078      	str	r0, [r7, #4]
    return enabled_;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	7c1b      	ldrb	r3, [r3, #16]
}
 8011172:	4618      	mov	r0, r3
 8011174:	370c      	adds	r7, #12
 8011176:	46bd      	mov	sp, r7
 8011178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117c:	4770      	bx	lr
	...

08011180 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6839      	ldr	r1, [r7, #0]
 801118e:	4618      	mov	r0, r3
 8011190:	f7ff fe7c 	bl	8010e8c <_ZN10TestPluginC1ERK12SimpleString>
 8011194:	4a05      	ldr	r2, [pc, #20]	; (80111ac <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 801119a:	4b05      	ldr	r3, [pc, #20]	; (80111b0 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 801119c:	2200      	movs	r2, #0
 801119e:	601a      	str	r2, [r3, #0]
}
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	4618      	mov	r0, r3
 80111a4:	3708      	adds	r7, #8
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
 80111aa:	bf00      	nop
 80111ac:	080280d8 	.word	0x080280d8
 80111b0:	20000910 	.word	0x20000910

080111b4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 80111b4:	b480      	push	{r7}
 80111b6:	b087      	sub	sp, #28
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	60f8      	str	r0, [r7, #12]
 80111bc:	60b9      	str	r1, [r7, #8]
 80111be:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 80111c0:	4b0e      	ldr	r3, [pc, #56]	; (80111fc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	3b01      	subs	r3, #1
 80111c6:	617b      	str	r3, [r7, #20]
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	db0d      	blt.n	80111ea <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 80111ce:	4a0c      	ldr	r2, [pc, #48]	; (8011200 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80111d6:	490a      	ldr	r1, [pc, #40]	; (8011200 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	00db      	lsls	r3, r3, #3
 80111dc:	440b      	add	r3, r1
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	3b01      	subs	r3, #1
 80111e6:	617b      	str	r3, [r7, #20]
 80111e8:	e7ee      	b.n	80111c8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 80111ea:	4b04      	ldr	r3, [pc, #16]	; (80111fc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 80111ec:	2200      	movs	r2, #0
 80111ee:	601a      	str	r2, [r3, #0]
}
 80111f0:	bf00      	nop
 80111f2:	371c      	adds	r7, #28
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr
 80111fc:	20000910 	.word	0x20000910
 8011200:	20000914 	.word	0x20000914

08011204 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2100      	movs	r1, #0
 8011210:	4618      	mov	r0, r3
 8011212:	f7ff fe59 	bl	8010ec8 <_ZN10TestPluginC1EPS_>
 8011216:	4a04      	ldr	r2, [pc, #16]	; (8011228 <_ZN14NullTestPluginC1Ev+0x24>)
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	601a      	str	r2, [r3, #0]
{
}
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	4618      	mov	r0, r3
 8011220:	3708      	adds	r7, #8
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
 8011226:	bf00      	nop
 8011228:	08028094 	.word	0x08028094

0801122c <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 801122c:	b580      	push	{r7, lr}
 801122e:	af00      	add	r7, sp, #0
 8011230:	4801      	ldr	r0, [pc, #4]	; (8011238 <__tcf_0+0xc>)
 8011232:	f000 f849 	bl	80112c8 <_ZN14NullTestPluginD1Ev>
 8011236:	bd80      	pop	{r7, pc}
 8011238:	20000a14 	.word	0x20000a14

0801123c <_ZN14NullTestPlugin8instanceEv>:
{
 801123c:	b580      	push	{r7, lr}
 801123e:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 8011240:	4b12      	ldr	r3, [pc, #72]	; (801128c <_ZN14NullTestPlugin8instanceEv+0x50>)
 8011242:	781b      	ldrb	r3, [r3, #0]
 8011244:	f3bf 8f5b 	dmb	ish
 8011248:	b2db      	uxtb	r3, r3
 801124a:	f003 0301 	and.w	r3, r3, #1
 801124e:	2b00      	cmp	r3, #0
 8011250:	bf0c      	ite	eq
 8011252:	2301      	moveq	r3, #1
 8011254:	2300      	movne	r3, #0
 8011256:	b2db      	uxtb	r3, r3
 8011258:	2b00      	cmp	r3, #0
 801125a:	d013      	beq.n	8011284 <_ZN14NullTestPlugin8instanceEv+0x48>
 801125c:	480b      	ldr	r0, [pc, #44]	; (801128c <_ZN14NullTestPlugin8instanceEv+0x50>)
 801125e:	f00d ffdb 	bl	801f218 <__cxa_guard_acquire>
 8011262:	4603      	mov	r3, r0
 8011264:	2b00      	cmp	r3, #0
 8011266:	bf14      	ite	ne
 8011268:	2301      	movne	r3, #1
 801126a:	2300      	moveq	r3, #0
 801126c:	b2db      	uxtb	r3, r3
 801126e:	2b00      	cmp	r3, #0
 8011270:	d008      	beq.n	8011284 <_ZN14NullTestPlugin8instanceEv+0x48>
 8011272:	4807      	ldr	r0, [pc, #28]	; (8011290 <_ZN14NullTestPlugin8instanceEv+0x54>)
 8011274:	f7ff ffc6 	bl	8011204 <_ZN14NullTestPluginC1Ev>
 8011278:	4804      	ldr	r0, [pc, #16]	; (801128c <_ZN14NullTestPlugin8instanceEv+0x50>)
 801127a:	f00d ffd9 	bl	801f230 <__cxa_guard_release>
 801127e:	4805      	ldr	r0, [pc, #20]	; (8011294 <_ZN14NullTestPlugin8instanceEv+0x58>)
 8011280:	f00d fffd 	bl	801f27e <atexit>
    return &_instance;
 8011284:	4b02      	ldr	r3, [pc, #8]	; (8011290 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 8011286:	4618      	mov	r0, r3
 8011288:	bd80      	pop	{r7, pc}
 801128a:	bf00      	nop
 801128c:	20000a28 	.word	0x20000a28
 8011290:	20000a14 	.word	0x20000a14
 8011294:	0801122d 	.word	0x0801122d

08011298 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 8011298:	b480      	push	{r7}
 801129a:	b085      	sub	sp, #20
 801129c:	af00      	add	r7, sp, #0
 801129e:	60f8      	str	r0, [r7, #12]
 80112a0:	60b9      	str	r1, [r7, #8]
 80112a2:	607a      	str	r2, [r7, #4]
}
 80112a4:	bf00      	nop
 80112a6:	3714      	adds	r7, #20
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr

080112b0 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 80112b0:	b480      	push	{r7}
 80112b2:	b085      	sub	sp, #20
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	60f8      	str	r0, [r7, #12]
 80112b8:	60b9      	str	r1, [r7, #8]
 80112ba:	607a      	str	r2, [r7, #4]
}
 80112bc:	bf00      	nop
 80112be:	3714      	adds	r7, #20
 80112c0:	46bd      	mov	sp, r7
 80112c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c6:	4770      	bx	lr

080112c8 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b082      	sub	sp, #8
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
 80112d0:	4a05      	ldr	r2, [pc, #20]	; (80112e8 <_ZN14NullTestPluginD1Ev+0x20>)
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	601a      	str	r2, [r3, #0]
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4618      	mov	r0, r3
 80112da:	f7ff fe13 	bl	8010f04 <_ZN10TestPluginD1Ev>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4618      	mov	r0, r3
 80112e2:	3708      	adds	r7, #8
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}
 80112e8:	08028094 	.word	0x08028094

080112ec <_ZN14NullTestPluginD0Ev>:
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b082      	sub	sp, #8
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	f7ff ffe7 	bl	80112c8 <_ZN14NullTestPluginD1Ev>
 80112fa:	2114      	movs	r1, #20
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f7f8 fd1b 	bl	8009d38 <_ZdlPvj>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	4618      	mov	r0, r3
 8011306:	3708      	adds	r7, #8
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}

0801130c <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 801130c:	b580      	push	{r7, lr}
 801130e:	b082      	sub	sp, #8
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 8011314:	4a0f      	ldr	r2, [pc, #60]	; (8011354 <_ZN12TestRegistryC1Ev+0x48>)
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	601a      	str	r2, [r3, #0]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2200      	movs	r2, #0
 801131e:	605a      	str	r2, [r3, #4]
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2200      	movs	r2, #0
 8011324:	609a      	str	r2, [r3, #8]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2200      	movs	r2, #0
 801132a:	60da      	str	r2, [r3, #12]
 801132c:	f7ff ff86 	bl	801123c <_ZN14NullTestPlugin8instanceEv>
 8011330:	4602      	mov	r2, r0
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	611a      	str	r2, [r3, #16]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	2200      	movs	r2, #0
 801133a:	751a      	strb	r2, [r3, #20]
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2200      	movs	r2, #0
 8011340:	619a      	str	r2, [r3, #24]
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2200      	movs	r2, #0
 8011346:	771a      	strb	r2, [r3, #28]
{
}
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	4618      	mov	r0, r3
 801134c:	3708      	adds	r7, #8
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop
 8011354:	08028160 	.word	0x08028160

08011358 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 8011358:	b480      	push	{r7}
 801135a:	b083      	sub	sp, #12
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
 8011360:	4a04      	ldr	r2, [pc, #16]	; (8011374 <_ZN12TestRegistryD1Ev+0x1c>)
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	601a      	str	r2, [r3, #0]
{
}
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	4618      	mov	r0, r3
 801136a:	370c      	adds	r7, #12
 801136c:	46bd      	mov	sp, r7
 801136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011372:	4770      	bx	lr
 8011374:	08028160 	.word	0x08028160

08011378 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 8011378:	b580      	push	{r7, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
}
 8011380:	6878      	ldr	r0, [r7, #4]
 8011382:	f7ff ffe9 	bl	8011358 <_ZN12TestRegistryD1Ev>
 8011386:	2120      	movs	r1, #32
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f7f8 fcd5 	bl	8009d38 <_ZdlPvj>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	4618      	mov	r0, r3
 8011392:	3708      	adds	r7, #8
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}

08011398 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
 80113a0:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	3308      	adds	r3, #8
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	687a      	ldr	r2, [r7, #4]
 80113ac:	6852      	ldr	r2, [r2, #4]
 80113ae:	4611      	mov	r1, r2
 80113b0:	6838      	ldr	r0, [r7, #0]
 80113b2:	4798      	blx	r3
 80113b4:	4602      	mov	r2, r0
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	605a      	str	r2, [r3, #4]
}
 80113ba:	bf00      	nop
 80113bc:	3708      	adds	r7, #8
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}

080113c2 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 80113c2:	b580      	push	{r7, lr}
 80113c4:	b084      	sub	sp, #16
 80113c6:	af00      	add	r7, sp, #0
 80113c8:	6078      	str	r0, [r7, #4]
 80113ca:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 80113cc:	2301      	movs	r3, #1
 80113ce:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	3308      	adds	r3, #8
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	6838      	ldr	r0, [r7, #0]
 80113da:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	685b      	ldr	r3, [r3, #4]
 80113e0:	60bb      	str	r3, [r7, #8]
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d05c      	beq.n	80114a2 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	7d1b      	ldrb	r3, [r3, #20]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d005      	beq.n	80113fc <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	3380      	adds	r3, #128	; 0x80
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	68b8      	ldr	r0, [r7, #8]
 80113fa:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	7f1b      	ldrb	r3, [r3, #28]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d005      	beq.n	8011410 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	3384      	adds	r3, #132	; 0x84
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	68b8      	ldr	r0, [r7, #8]
 801140e:	4798      	blx	r3

        if (groupStart) {
 8011410:	7bfb      	ldrb	r3, [r7, #15]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d008      	beq.n	8011428 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	3310      	adds	r3, #16
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	68b9      	ldr	r1, [r7, #8]
 8011420:	6838      	ldr	r0, [r7, #0]
 8011422:	4798      	blx	r3
            groupStart = false;
 8011424:	2300      	movs	r3, #0
 8011426:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	3320      	adds	r3, #32
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	6838      	ldr	r0, [r7, #0]
 8011432:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 8011434:	683a      	ldr	r2, [r7, #0]
 8011436:	68b9      	ldr	r1, [r7, #8]
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 fb79 	bl	8011b30 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 801143e:	4603      	mov	r3, r0
 8011440:	2b00      	cmp	r3, #0
 8011442:	d016      	beq.n	8011472 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	3318      	adds	r3, #24
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	68b9      	ldr	r1, [r7, #8]
 801144e:	6838      	ldr	r0, [r7, #0]
 8011450:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	3390      	adds	r3, #144	; 0x90
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	687a      	ldr	r2, [r7, #4]
 801145c:	6911      	ldr	r1, [r2, #16]
 801145e:	683a      	ldr	r2, [r7, #0]
 8011460:	68b8      	ldr	r0, [r7, #8]
 8011462:	4798      	blx	r3
            result.currentTestEnded(test);
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	331c      	adds	r3, #28
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	68b9      	ldr	r1, [r7, #8]
 801146e:	6838      	ldr	r0, [r7, #0]
 8011470:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 8011472:	68b9      	ldr	r1, [r7, #8]
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f000 fa5b 	bl	8011930 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 801147a:	4603      	mov	r3, r0
 801147c:	2b00      	cmp	r3, #0
 801147e:	d008      	beq.n	8011492 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 8011480:	2301      	movs	r3, #1
 8011482:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	3314      	adds	r3, #20
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	68b9      	ldr	r1, [r7, #8]
 801148e:	6838      	ldr	r0, [r7, #0]
 8011490:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	330c      	adds	r3, #12
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	68b8      	ldr	r0, [r7, #8]
 801149c:	4798      	blx	r3
 801149e:	60b8      	str	r0, [r7, #8]
 80114a0:	e79f      	b.n	80113e2 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	330c      	adds	r3, #12
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	6838      	ldr	r0, [r7, #0]
 80114ac:	4798      	blx	r3
    currentRepetition_++;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	699b      	ldr	r3, [r3, #24]
 80114b2:	1c5a      	adds	r2, r3, #1
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	619a      	str	r2, [r3, #24]
}
 80114b8:	bf00      	nop
 80114ba:	3710      	adds	r7, #16
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}

080114c0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 80114c0:	b590      	push	{r4, r7, lr}
 80114c2:	b08f      	sub	sp, #60	; 0x3c
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
 80114c8:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 80114ca:	f107 0314 	add.w	r3, r7, #20
 80114ce:	4953      	ldr	r1, [pc, #332]	; (801161c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 80114d0:	4618      	mov	r0, r3
 80114d2:	f7fa ffe0 	bl	800c496 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	685b      	ldr	r3, [r3, #4]
 80114da:	637b      	str	r3, [r7, #52]	; 0x34
 80114dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d04d      	beq.n	801157e <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 80114e2:	f107 030c 	add.w	r3, r7, #12
 80114e6:	494d      	ldr	r1, [pc, #308]	; (801161c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7fa ffd4 	bl	800c496 <_ZN12SimpleStringC1EPKc>
        gname += "#";
 80114ee:	f107 030c 	add.w	r3, r7, #12
 80114f2:	494b      	ldr	r1, [pc, #300]	; (8011620 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7fb fc15 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 80114fa:	f107 031c 	add.w	r3, r7, #28
 80114fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011500:	4618      	mov	r0, r3
 8011502:	f001 f9d2 	bl	80128aa <_ZNK10UtestShell8getGroupEv>
 8011506:	f107 021c 	add.w	r2, r7, #28
 801150a:	f107 030c 	add.w	r3, r7, #12
 801150e:	4611      	mov	r1, r2
 8011510:	4618      	mov	r0, r3
 8011512:	f7fb fbf5 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 8011516:	f107 031c 	add.w	r3, r7, #28
 801151a:	4618      	mov	r0, r3
 801151c:	f7fb fb73 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        gname += "#";
 8011520:	f107 030c 	add.w	r3, r7, #12
 8011524:	493e      	ldr	r1, [pc, #248]	; (8011620 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011526:	4618      	mov	r0, r3
 8011528:	f7fb fbfc 	bl	800cd24 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 801152c:	f107 020c 	add.w	r2, r7, #12
 8011530:	f107 0314 	add.w	r3, r7, #20
 8011534:	4611      	mov	r1, r2
 8011536:	4618      	mov	r0, r3
 8011538:	f7fb f82b 	bl	800c592 <_ZNK12SimpleString8containsERKS_>
 801153c:	4603      	mov	r3, r0
 801153e:	f083 0301 	eor.w	r3, r3, #1
 8011542:	b2db      	uxtb	r3, r3
 8011544:	2b00      	cmp	r3, #0
 8011546:	d00d      	beq.n	8011564 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 8011548:	f107 020c 	add.w	r2, r7, #12
 801154c:	f107 0314 	add.w	r3, r7, #20
 8011550:	4611      	mov	r1, r2
 8011552:	4618      	mov	r0, r3
 8011554:	f7fb fbd4 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 8011558:	f107 0314 	add.w	r3, r7, #20
 801155c:	4931      	ldr	r1, [pc, #196]	; (8011624 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 801155e:	4618      	mov	r0, r3
 8011560:	f7fb fbe0 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 8011564:	f107 030c 	add.w	r3, r7, #12
 8011568:	4618      	mov	r0, r3
 801156a:	f7fb fb4c 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801156e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	330c      	adds	r3, #12
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011578:	4798      	blx	r3
 801157a:	6378      	str	r0, [r7, #52]	; 0x34
 801157c:	e7ae      	b.n	80114dc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 801157e:	f107 0314 	add.w	r3, r7, #20
 8011582:	4a26      	ldr	r2, [pc, #152]	; (801161c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011584:	4926      	ldr	r1, [pc, #152]	; (8011620 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011586:	4618      	mov	r0, r3
 8011588:	f7fb f99a 	bl	800c8c0 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 801158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011590:	4924      	ldr	r1, [pc, #144]	; (8011624 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8011592:	4618      	mov	r0, r3
 8011594:	f7fa ff7f 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8011598:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801159c:	f107 0314 	add.w	r3, r7, #20
 80115a0:	4611      	mov	r1, r2
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fb f874 	bl	800c690 <_ZNK12SimpleString8endsWithERKS_>
 80115a8:	4603      	mov	r3, r0
 80115aa:	461c      	mov	r4, r3
 80115ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7fb fb28 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80115b6:	2c00      	cmp	r4, #0
 80115b8:	d01a      	beq.n	80115f0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 80115ba:	f107 0314 	add.w	r3, r7, #20
 80115be:	4618      	mov	r0, r3
 80115c0:	f7fb fb00 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 80115c4:	4603      	mov	r3, r0
 80115c6:	3b01      	subs	r3, #1
 80115c8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80115cc:	f107 0114 	add.w	r1, r7, #20
 80115d0:	2200      	movs	r2, #0
 80115d2:	f7fb fc21 	bl	800ce18 <_ZNK12SimpleString9subStringEjj>
 80115d6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80115da:	f107 0314 	add.w	r3, r7, #20
 80115de:	4611      	mov	r1, r2
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7fa ffc4 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 80115e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7fb fb0b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	3338      	adds	r3, #56	; 0x38
 80115f6:	681c      	ldr	r4, [r3, #0]
 80115f8:	f107 0314 	add.w	r3, r7, #20
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7fb fad5 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 8011602:	4603      	mov	r3, r0
 8011604:	4619      	mov	r1, r3
 8011606:	6838      	ldr	r0, [r7, #0]
 8011608:	47a0      	blx	r4
    SimpleString groupList;
 801160a:	f107 0314 	add.w	r3, r7, #20
 801160e:	4618      	mov	r0, r3
 8011610:	f7fb faf9 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 8011614:	bf00      	nop
 8011616:	373c      	adds	r7, #60	; 0x3c
 8011618:	46bd      	mov	sp, r7
 801161a:	bd90      	pop	{r4, r7, pc}
 801161c:	080247d4 	.word	0x080247d4
 8011620:	080247d8 	.word	0x080247d8
 8011624:	080247dc 	.word	0x080247dc

08011628 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 8011628:	b590      	push	{r4, r7, lr}
 801162a:	b091      	sub	sp, #68	; 0x44
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
 8011630:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 8011632:	f107 0314 	add.w	r3, r7, #20
 8011636:	4964      	ldr	r1, [pc, #400]	; (80117c8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8011638:	4618      	mov	r0, r3
 801163a:	f7fa ff2c 	bl	800c496 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011646:	2b00      	cmp	r3, #0
 8011648:	d06e      	beq.n	8011728 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 801164a:	683a      	ldr	r2, [r7, #0]
 801164c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f000 fa6e 	bl	8011b30 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8011654:	4603      	mov	r3, r0
 8011656:	2b00      	cmp	r3, #0
 8011658:	d05e      	beq.n	8011718 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 801165a:	f107 030c 	add.w	r3, r7, #12
 801165e:	495a      	ldr	r1, [pc, #360]	; (80117c8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8011660:	4618      	mov	r0, r3
 8011662:	f7fa ff18 	bl	800c496 <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 8011666:	f107 030c 	add.w	r3, r7, #12
 801166a:	4958      	ldr	r1, [pc, #352]	; (80117cc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 801166c:	4618      	mov	r0, r3
 801166e:	f7fb fb59 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 8011672:	f107 031c 	add.w	r3, r7, #28
 8011676:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011678:	4618      	mov	r0, r3
 801167a:	f001 f916 	bl	80128aa <_ZNK10UtestShell8getGroupEv>
 801167e:	f107 021c 	add.w	r2, r7, #28
 8011682:	f107 030c 	add.w	r3, r7, #12
 8011686:	4611      	mov	r1, r2
 8011688:	4618      	mov	r0, r3
 801168a:	f7fb fb39 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801168e:	f107 031c 	add.w	r3, r7, #28
 8011692:	4618      	mov	r0, r3
 8011694:	f7fb fab7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 8011698:	f107 030c 	add.w	r3, r7, #12
 801169c:	494c      	ldr	r1, [pc, #304]	; (80117d0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 801169e:	4618      	mov	r0, r3
 80116a0:	f7fb fb40 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 80116a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80116aa:	4618      	mov	r0, r3
 80116ac:	f001 f8ee 	bl	801288c <_ZNK10UtestShell7getNameEv>
 80116b0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80116b4:	f107 030c 	add.w	r3, r7, #12
 80116b8:	4611      	mov	r1, r2
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7fb fb20 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 80116c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116c4:	4618      	mov	r0, r3
 80116c6:	f7fb fa9e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 80116ca:	f107 030c 	add.w	r3, r7, #12
 80116ce:	493f      	ldr	r1, [pc, #252]	; (80117cc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7fb fb27 	bl	800cd24 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 80116d6:	f107 020c 	add.w	r2, r7, #12
 80116da:	f107 0314 	add.w	r3, r7, #20
 80116de:	4611      	mov	r1, r2
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7fa ff56 	bl	800c592 <_ZNK12SimpleString8containsERKS_>
 80116e6:	4603      	mov	r3, r0
 80116e8:	f083 0301 	eor.w	r3, r3, #1
 80116ec:	b2db      	uxtb	r3, r3
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d00d      	beq.n	801170e <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 80116f2:	f107 020c 	add.w	r2, r7, #12
 80116f6:	f107 0314 	add.w	r3, r7, #20
 80116fa:	4611      	mov	r1, r2
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7fb faff 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 8011702:	f107 0314 	add.w	r3, r7, #20
 8011706:	4933      	ldr	r1, [pc, #204]	; (80117d4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8011708:	4618      	mov	r0, r3
 801170a:	f7fb fb0b 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 801170e:	f107 030c 	add.w	r3, r7, #12
 8011712:	4618      	mov	r0, r3
 8011714:	f7fb fa77 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	330c      	adds	r3, #12
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011722:	4798      	blx	r3
 8011724:	63f8      	str	r0, [r7, #60]	; 0x3c
 8011726:	e78d      	b.n	8011644 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 8011728:	f107 0314 	add.w	r3, r7, #20
 801172c:	4a26      	ldr	r2, [pc, #152]	; (80117c8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 801172e:	4927      	ldr	r1, [pc, #156]	; (80117cc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8011730:	4618      	mov	r0, r3
 8011732:	f7fb f8c5 	bl	800c8c0 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 8011736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801173a:	4926      	ldr	r1, [pc, #152]	; (80117d4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 801173c:	4618      	mov	r0, r3
 801173e:	f7fa feaa 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8011742:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011746:	f107 0314 	add.w	r3, r7, #20
 801174a:	4611      	mov	r1, r2
 801174c:	4618      	mov	r0, r3
 801174e:	f7fa ff9f 	bl	800c690 <_ZNK12SimpleString8endsWithERKS_>
 8011752:	4603      	mov	r3, r0
 8011754:	461c      	mov	r4, r3
 8011756:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801175a:	4618      	mov	r0, r3
 801175c:	f7fb fa53 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8011760:	2c00      	cmp	r4, #0
 8011762:	d01a      	beq.n	801179a <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 8011764:	f107 0314 	add.w	r3, r7, #20
 8011768:	4618      	mov	r0, r3
 801176a:	f7fb fa2b 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 801176e:	4603      	mov	r3, r0
 8011770:	3b01      	subs	r3, #1
 8011772:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8011776:	f107 0114 	add.w	r1, r7, #20
 801177a:	2200      	movs	r2, #0
 801177c:	f7fb fb4c 	bl	800ce18 <_ZNK12SimpleString9subStringEjj>
 8011780:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011784:	f107 0314 	add.w	r3, r7, #20
 8011788:	4611      	mov	r1, r2
 801178a:	4618      	mov	r0, r3
 801178c:	f7fa feef 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 8011790:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011794:	4618      	mov	r0, r3
 8011796:	f7fb fa36 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	3338      	adds	r3, #56	; 0x38
 80117a0:	681c      	ldr	r4, [r3, #0]
 80117a2:	f107 0314 	add.w	r3, r7, #20
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7fb fa00 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 80117ac:	4603      	mov	r3, r0
 80117ae:	4619      	mov	r1, r3
 80117b0:	6838      	ldr	r0, [r7, #0]
 80117b2:	47a0      	blx	r4
    SimpleString groupAndNameList;
 80117b4:	f107 0314 	add.w	r3, r7, #20
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7fb fa24 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 80117be:	bf00      	nop
 80117c0:	3744      	adds	r7, #68	; 0x44
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd90      	pop	{r4, r7, pc}
 80117c6:	bf00      	nop
 80117c8:	080247d4 	.word	0x080247d4
 80117cc:	080247d8 	.word	0x080247d8
 80117d0:	080247e0 	.word	0x080247e0
 80117d4:	080247dc 	.word	0x080247dc

080117d8 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 80117d8:	b590      	push	{r4, r7, lr}
 80117da:	b091      	sub	sp, #68	; 0x44
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
 80117e0:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 80117e2:	f107 0314 	add.w	r3, r7, #20
 80117e6:	494f      	ldr	r1, [pc, #316]	; (8011924 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80117e8:	4618      	mov	r0, r3
 80117ea:	f7fa fe54 	bl	800c496 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	685b      	ldr	r3, [r3, #4]
 80117f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d07d      	beq.n	80118f6 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 80117fa:	f107 030c 	add.w	r3, r7, #12
 80117fe:	4949      	ldr	r1, [pc, #292]	; (8011924 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8011800:	4618      	mov	r0, r3
 8011802:	f7fa fe48 	bl	800c496 <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 8011806:	f107 031c 	add.w	r3, r7, #28
 801180a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801180c:	4618      	mov	r0, r3
 801180e:	f001 f84c 	bl	80128aa <_ZNK10UtestShell8getGroupEv>
 8011812:	f107 021c 	add.w	r2, r7, #28
 8011816:	f107 030c 	add.w	r3, r7, #12
 801181a:	4611      	mov	r1, r2
 801181c:	4618      	mov	r0, r3
 801181e:	f7fb fa6f 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 8011822:	f107 031c 	add.w	r3, r7, #28
 8011826:	4618      	mov	r0, r3
 8011828:	f7fb f9ed 	bl	800cc06 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 801182c:	f107 030c 	add.w	r3, r7, #12
 8011830:	493d      	ldr	r1, [pc, #244]	; (8011928 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8011832:	4618      	mov	r0, r3
 8011834:	f7fb fa76 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 8011838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801183c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801183e:	4618      	mov	r0, r3
 8011840:	f001 f824 	bl	801288c <_ZNK10UtestShell7getNameEv>
 8011844:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011848:	f107 030c 	add.w	r3, r7, #12
 801184c:	4611      	mov	r1, r2
 801184e:	4618      	mov	r0, r3
 8011850:	f7fb fa56 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 8011854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011858:	4618      	mov	r0, r3
 801185a:	f7fb f9d4 	bl	800cc06 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 801185e:	f107 030c 	add.w	r3, r7, #12
 8011862:	4931      	ldr	r1, [pc, #196]	; (8011928 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8011864:	4618      	mov	r0, r3
 8011866:	f7fb fa5d 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 801186a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801186e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011870:	4618      	mov	r0, r3
 8011872:	f001 f8dc 	bl	8012a2e <_ZNK10UtestShell7getFileEv>
 8011876:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801187a:	f107 030c 	add.w	r3, r7, #12
 801187e:	4611      	mov	r1, r2
 8011880:	4618      	mov	r0, r3
 8011882:	f7fb fa3d 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 8011886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801188a:	4618      	mov	r0, r3
 801188c:	f7fb f9bb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8011890:	f107 030c 	add.w	r3, r7, #12
 8011894:	4924      	ldr	r1, [pc, #144]	; (8011928 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8011896:	4618      	mov	r0, r3
 8011898:	f7fb fa44 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 801189c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801189e:	f001 f8d5 	bl	8012a4c <_ZNK10UtestShell13getLineNumberEv>
 80118a2:	4603      	mov	r3, r0
 80118a4:	461a      	mov	r2, r3
 80118a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80118aa:	4920      	ldr	r1, [pc, #128]	; (801192c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 80118ac:	4618      	mov	r0, r3
 80118ae:	f7fb feb1 	bl	800d614 <_Z16StringFromFormatPKcz>
 80118b2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80118b6:	f107 030c 	add.w	r3, r7, #12
 80118ba:	4611      	mov	r1, r2
 80118bc:	4618      	mov	r0, r3
 80118be:	f7fb fa1f 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 80118c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80118c6:	4618      	mov	r0, r3
 80118c8:	f7fb f99d 	bl	800cc06 <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 80118cc:	f107 020c 	add.w	r2, r7, #12
 80118d0:	f107 0314 	add.w	r3, r7, #20
 80118d4:	4611      	mov	r1, r2
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7fb fa12 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 80118dc:	f107 030c 	add.w	r3, r7, #12
 80118e0:	4618      	mov	r0, r3
 80118e2:	f7fb f990 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80118e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	330c      	adds	r3, #12
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80118f0:	4798      	blx	r3
 80118f2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80118f4:	e77e      	b.n	80117f4 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	3338      	adds	r3, #56	; 0x38
 80118fc:	681c      	ldr	r4, [r3, #0]
 80118fe:	f107 0314 	add.w	r3, r7, #20
 8011902:	4618      	mov	r0, r3
 8011904:	f7fb f952 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 8011908:	4603      	mov	r3, r0
 801190a:	4619      	mov	r1, r3
 801190c:	6838      	ldr	r0, [r7, #0]
 801190e:	47a0      	blx	r4
    SimpleString testLocations;
 8011910:	f107 0314 	add.w	r3, r7, #20
 8011914:	4618      	mov	r0, r3
 8011916:	f7fb f976 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 801191a:	bf00      	nop
 801191c:	3744      	adds	r7, #68	; 0x44
 801191e:	46bd      	mov	sp, r7
 8011920:	bd90      	pop	{r4, r7, pc}
 8011922:	bf00      	nop
 8011924:	080247d4 	.word	0x080247d4
 8011928:	080247e0 	.word	0x080247e0
 801192c:	080247e4 	.word	0x080247e4

08011930 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 8011930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011932:	b087      	sub	sp, #28
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 801193a:	2400      	movs	r4, #0
 801193c:	2500      	movs	r5, #0
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d028      	beq.n	8011996 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	330c      	adds	r3, #12
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	6838      	ldr	r0, [r7, #0]
 801194e:	4798      	blx	r3
 8011950:	4603      	mov	r3, r0
 8011952:	2b00      	cmp	r3, #0
 8011954:	d01f      	beq.n	8011996 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8011956:	f107 0308 	add.w	r3, r7, #8
 801195a:	6839      	ldr	r1, [r7, #0]
 801195c:	4618      	mov	r0, r3
 801195e:	f000 ffa4 	bl	80128aa <_ZNK10UtestShell8getGroupEv>
 8011962:	2401      	movs	r4, #1
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	330c      	adds	r3, #12
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	6838      	ldr	r0, [r7, #0]
 801196e:	4798      	blx	r3
 8011970:	4602      	mov	r2, r0
 8011972:	f107 0310 	add.w	r3, r7, #16
 8011976:	4611      	mov	r1, r2
 8011978:	4618      	mov	r0, r3
 801197a:	f000 ff96 	bl	80128aa <_ZNK10UtestShell8getGroupEv>
 801197e:	2501      	movs	r5, #1
 8011980:	f107 0210 	add.w	r2, r7, #16
 8011984:	f107 0308 	add.w	r3, r7, #8
 8011988:	4611      	mov	r1, r2
 801198a:	4618      	mov	r0, r3
 801198c:	f7fb f98c 	bl	800cca8 <_ZneRK12SimpleStringS1_>
 8011990:	4603      	mov	r3, r0
 8011992:	2b00      	cmp	r3, #0
 8011994:	d001      	beq.n	801199a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 8011996:	2601      	movs	r6, #1
 8011998:	e000      	b.n	801199c <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 801199a:	2600      	movs	r6, #0
 801199c:	2d00      	cmp	r5, #0
 801199e:	d004      	beq.n	80119aa <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 80119a0:	f107 0310 	add.w	r3, r7, #16
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7fb f92e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80119aa:	2c00      	cmp	r4, #0
 80119ac:	d004      	beq.n	80119b8 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 80119ae:	f107 0308 	add.w	r3, r7, #8
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7fb f927 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80119b8:	4633      	mov	r3, r6
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	371c      	adds	r7, #28
 80119be:	46bd      	mov	sp, r7
 80119c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080119c2 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 80119c2:	b580      	push	{r7, lr}
 80119c4:	b082      	sub	sp, #8
 80119c6:	af00      	add	r7, sp, #0
 80119c8:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	685b      	ldr	r3, [r3, #4]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d00a      	beq.n	80119e8 <_ZN12TestRegistry10countTestsEv+0x26>
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	685a      	ldr	r2, [r3, #4]
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	3310      	adds	r3, #16
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	4610      	mov	r0, r2
 80119e2:	4798      	blx	r3
 80119e4:	4603      	mov	r3, r0
 80119e6:	e000      	b.n	80119ea <_ZN12TestRegistry10countTestsEv+0x28>
 80119e8:	2300      	movs	r3, #0
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3708      	adds	r7, #8
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
	...

080119f4 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 80119f4:	b580      	push	{r7, lr}
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	4801      	ldr	r0, [pc, #4]	; (8011a00 <__tcf_0+0xc>)
 80119fa:	f7ff fcad 	bl	8011358 <_ZN12TestRegistryD1Ev>
 80119fe:	bd80      	pop	{r7, pc}
 8011a00:	20000a30 	.word	0x20000a30

08011a04 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 8011a08:	4b15      	ldr	r3, [pc, #84]	; (8011a60 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	f3bf 8f5b 	dmb	ish
 8011a10:	b2db      	uxtb	r3, r3
 8011a12:	f003 0301 	and.w	r3, r3, #1
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	bf0c      	ite	eq
 8011a1a:	2301      	moveq	r3, #1
 8011a1c:	2300      	movne	r3, #0
 8011a1e:	b2db      	uxtb	r3, r3
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d013      	beq.n	8011a4c <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8011a24:	480e      	ldr	r0, [pc, #56]	; (8011a60 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8011a26:	f00d fbf7 	bl	801f218 <__cxa_guard_acquire>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	bf14      	ite	ne
 8011a30:	2301      	movne	r3, #1
 8011a32:	2300      	moveq	r3, #0
 8011a34:	b2db      	uxtb	r3, r3
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d008      	beq.n	8011a4c <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8011a3a:	480a      	ldr	r0, [pc, #40]	; (8011a64 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 8011a3c:	f7ff fc66 	bl	801130c <_ZN12TestRegistryC1Ev>
 8011a40:	4807      	ldr	r0, [pc, #28]	; (8011a60 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8011a42:	f00d fbf5 	bl	801f230 <__cxa_guard_release>
 8011a46:	4808      	ldr	r0, [pc, #32]	; (8011a68 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 8011a48:	f00d fc19 	bl	801f27e <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 8011a4c:	4b07      	ldr	r3, [pc, #28]	; (8011a6c <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d002      	beq.n	8011a5a <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 8011a54:	4b05      	ldr	r3, [pc, #20]	; (8011a6c <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	e000      	b.n	8011a5c <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 8011a5a:	4b02      	ldr	r3, [pc, #8]	; (8011a64 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	bd80      	pop	{r7, pc}
 8011a60:	20000a50 	.word	0x20000a50
 8011a64:	20000a30 	.word	0x20000a30
 8011a68:	080119f5 	.word	0x080119f5
 8011a6c:	20000a2c 	.word	0x20000a2c

08011a70 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 8011a70:	b480      	push	{r7}
 8011a72:	b083      	sub	sp, #12
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 8011a7a:	4a04      	ldr	r2, [pc, #16]	; (8011a8c <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	6013      	str	r3, [r2, #0]
}
 8011a80:	bf00      	nop
 8011a82:	370c      	adds	r7, #12
 8011a84:	46bd      	mov	sp, r7
 8011a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8a:	4770      	bx	lr
 8011a8c:	20000a2c 	.word	0x20000a2c

08011a90 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b082      	sub	sp, #8
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	685b      	ldr	r3, [r3, #4]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d00a      	beq.n	8011ab6 <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	685a      	ldr	r2, [r3, #4]
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	685b      	ldr	r3, [r3, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	330c      	adds	r3, #12
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	4610      	mov	r0, r2
 8011ab0:	4798      	blx	r3
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	e000      	b.n	8011ab8 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	687a      	ldr	r2, [r7, #4]
 8011aba:	6053      	str	r3, [r2, #4]

}
 8011abc:	bf00      	nop
 8011abe:	3708      	adds	r7, #8
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd80      	pop	{r7, pc}

08011ac4 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 8011ac4:	b480      	push	{r7}
 8011ac6:	b083      	sub	sp, #12
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	683a      	ldr	r2, [r7, #0]
 8011ad2:	609a      	str	r2, [r3, #8]
}
 8011ad4:	bf00      	nop
 8011ad6:	370c      	adds	r7, #12
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ade:	4770      	bx	lr

08011ae0 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 8011ae0:	b480      	push	{r7}
 8011ae2:	b083      	sub	sp, #12
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	683a      	ldr	r2, [r7, #0]
 8011aee:	60da      	str	r2, [r3, #12]
}
 8011af0:	bf00      	nop
 8011af2:	370c      	adds	r7, #12
 8011af4:	46bd      	mov	sp, r7
 8011af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afa:	4770      	bx	lr

08011afc <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 8011afc:	b480      	push	{r7}
 8011afe:	b083      	sub	sp, #12
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2201      	movs	r2, #1
 8011b08:	771a      	strb	r2, [r3, #28]
}
 8011b0a:	bf00      	nop
 8011b0c:	370c      	adds	r7, #12
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b14:	4770      	bx	lr

08011b16 <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 8011b16:	b480      	push	{r7}
 8011b18:	b083      	sub	sp, #12
 8011b1a:	af00      	add	r7, sp, #0
 8011b1c:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2201      	movs	r2, #1
 8011b22:	751a      	strb	r2, [r3, #20]
}
 8011b24:	bf00      	nop
 8011b26:	370c      	adds	r7, #12
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2e:	4770      	bx	lr

08011b30 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b084      	sub	sp, #16
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	68d9      	ldr	r1, [r3, #12]
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	689b      	ldr	r3, [r3, #8]
 8011b44:	461a      	mov	r2, r3
 8011b46:	68b8      	ldr	r0, [r7, #8]
 8011b48:	f000 ffbb 	bl	8012ac2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d001      	beq.n	8011b56 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 8011b52:	2301      	movs	r3, #1
 8011b54:	e006      	b.n	8011b64 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	332c      	adds	r3, #44	; 0x2c
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	4798      	blx	r3
        return false;
 8011b62:	2300      	movs	r3, #0
    }
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3710      	adds	r7, #16
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 8011b74:	f7ff fb62 	bl	801123c <_ZN14NullTestPlugin8instanceEv>
 8011b78:	4602      	mov	r2, r0
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	611a      	str	r2, [r3, #16]
}
 8011b7e:	bf00      	nop
 8011b80:	3708      	adds	r7, #8
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}

08011b86 <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 8011b86:	b580      	push	{r7, lr}
 8011b88:	b082      	sub	sp, #8
 8011b8a:	af00      	add	r7, sp, #0
 8011b8c:	6078      	str	r0, [r7, #4]
 8011b8e:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	3324      	adds	r3, #36	; 0x24
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	687a      	ldr	r2, [r7, #4]
 8011b9a:	6912      	ldr	r2, [r2, #16]
 8011b9c:	4611      	mov	r1, r2
 8011b9e:	6838      	ldr	r0, [r7, #0]
 8011ba0:	4798      	blx	r3
 8011ba2:	4602      	mov	r2, r0
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	611a      	str	r2, [r3, #16]
}
 8011ba8:	bf00      	nop
 8011baa:	3708      	adds	r7, #8
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}

08011bb0 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	b083      	sub	sp, #12
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	691b      	ldr	r3, [r3, #16]
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	370c      	adds	r7, #12
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	4770      	bx	lr

08011bc8 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b082      	sub	sp, #8
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	691b      	ldr	r3, [r3, #16]
 8011bd6:	6839      	ldr	r1, [r7, #0]
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f7ff fa52 	bl	8011082 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8011bde:	4603      	mov	r3, r0
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3708      	adds	r7, #8
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}

08011be8 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	691a      	ldr	r2, [r3, #16]
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	691b      	ldr	r3, [r3, #16]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	3328      	adds	r3, #40	; 0x28
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	6839      	ldr	r1, [r7, #0]
 8011c02:	4610      	mov	r0, r2
 8011c04:	4798      	blx	r3
 8011c06:	4602      	mov	r2, r0
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	691b      	ldr	r3, [r3, #16]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	bf0c      	ite	eq
 8011c10:	2301      	moveq	r3, #1
 8011c12:	2300      	movne	r3, #0
 8011c14:	b2db      	uxtb	r3, r3
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d00b      	beq.n	8011c32 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	691a      	ldr	r2, [r3, #16]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	691b      	ldr	r3, [r3, #16]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	332c      	adds	r3, #44	; 0x2c
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	4610      	mov	r0, r2
 8011c2a:	4798      	blx	r3
 8011c2c:	4602      	mov	r2, r0
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	691b      	ldr	r3, [r3, #16]
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7ff fa17 	bl	801106a <_ZN10TestPlugin7getNameEv>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	6839      	ldr	r1, [r7, #0]
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7fa ffec 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 8011c46:	4603      	mov	r3, r0
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d00b      	beq.n	8011c64 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	691a      	ldr	r2, [r3, #16]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	691b      	ldr	r3, [r3, #16]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	332c      	adds	r3, #44	; 0x2c
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	4610      	mov	r0, r2
 8011c5c:	4798      	blx	r3
 8011c5e:	4602      	mov	r2, r0
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	691a      	ldr	r2, [r3, #16]
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	691b      	ldr	r3, [r3, #16]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	3328      	adds	r3, #40	; 0x28
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	6839      	ldr	r1, [r7, #0]
 8011c74:	4610      	mov	r0, r2
 8011c76:	4798      	blx	r3
}
 8011c78:	bf00      	nop
 8011c7a:	3708      	adds	r7, #8
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}

08011c80 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b084      	sub	sp, #16
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
    int count = 0;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	691b      	ldr	r3, [r3, #16]
 8011c90:	60bb      	str	r3, [r7, #8]
 8011c92:	f7ff fad3 	bl	801123c <_ZN14NullTestPlugin8instanceEv>
 8011c96:	4602      	mov	r2, r0
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	bf14      	ite	ne
 8011c9e:	2301      	movne	r3, #1
 8011ca0:	2300      	moveq	r3, #0
 8011ca2:	b2db      	uxtb	r3, r3
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d00a      	beq.n	8011cbe <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	3301      	adds	r3, #1
 8011cac:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	332c      	adds	r3, #44	; 0x2c
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	68b8      	ldr	r0, [r7, #8]
 8011cb8:	4798      	blx	r3
 8011cba:	60b8      	str	r0, [r7, #8]
 8011cbc:	e7e9      	b.n	8011c92 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
}
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	3710      	adds	r7, #16
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}

08011cc8 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b083      	sub	sp, #12
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
    return tests_;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	685b      	ldr	r3, [r3, #4]
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	370c      	adds	r7, #12
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr

08011ce0 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b084      	sub	sp, #16
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	334c      	adds	r3, #76	; 0x4c
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	4798      	blx	r3
 8011cf6:	4602      	mov	r2, r0
 8011cf8:	f107 0308 	add.w	r3, r7, #8
 8011cfc:	4611      	mov	r1, r2
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f002 f8f8 	bl	8013ef4 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 8011d04:	f107 0308 	add.w	r3, r7, #8
 8011d08:	6839      	ldr	r1, [r7, #0]
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f002 f980 	bl	8014010 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 8011d10:	f107 0308 	add.w	r3, r7, #8
 8011d14:	4618      	mov	r0, r3
 8011d16:	f002 fa13 	bl	8014140 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8011d1a:	4602      	mov	r2, r0
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8011d20:	f107 0308 	add.w	r3, r7, #8
 8011d24:	4618      	mov	r0, r3
 8011d26:	f002 f939 	bl	8013f9c <_ZN22UtestShellPointerArrayD1Ev>
}
 8011d2a:	bf00      	nop
 8011d2c:	3710      	adds	r7, #16
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}

08011d32 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 8011d32:	b580      	push	{r7, lr}
 8011d34:	b084      	sub	sp, #16
 8011d36:	af00      	add	r7, sp, #0
 8011d38:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	334c      	adds	r3, #76	; 0x4c
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	4798      	blx	r3
 8011d46:	4602      	mov	r2, r0
 8011d48:	f107 0308 	add.w	r3, r7, #8
 8011d4c:	4611      	mov	r1, r2
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f002 f8d0 	bl	8013ef4 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 8011d54:	f107 0308 	add.w	r3, r7, #8
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f002 f995 	bl	8014088 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 8011d5e:	f107 0308 	add.w	r3, r7, #8
 8011d62:	4618      	mov	r0, r3
 8011d64:	f002 f9ec 	bl	8014140 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8011d68:	4602      	mov	r2, r0
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8011d6e:	f107 0308 	add.w	r3, r7, #8
 8011d72:	4618      	mov	r0, r3
 8011d74:	f002 f912 	bl	8013f9c <_ZN22UtestShellPointerArrayD1Ev>
}
 8011d78:	bf00      	nop
 8011d7a:	3710      	adds	r7, #16
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}

08011d80 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b084      	sub	sp, #16
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
 8011d88:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	685b      	ldr	r3, [r3, #4]
 8011d8e:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d00b      	beq.n	8011dae <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	330c      	adds	r3, #12
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	68f8      	ldr	r0, [r7, #12]
 8011da0:	4798      	blx	r3
 8011da2:	4602      	mov	r2, r0
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	4293      	cmp	r3, r2
 8011da8:	d001      	beq.n	8011dae <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8011daa:	2301      	movs	r3, #1
 8011dac:	e000      	b.n	8011db0 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 8011dae:	2300      	movs	r3, #0
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d007      	beq.n	8011dc4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	330c      	adds	r3, #12
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	68f8      	ldr	r0, [r7, #12]
 8011dbe:	4798      	blx	r3
 8011dc0:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 8011dc2:	e7e5      	b.n	8011d90 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	3710      	adds	r7, #16
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	bd80      	pop	{r7, pc}

08011dce <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 8011dce:	b590      	push	{r4, r7, lr}
 8011dd0:	b087      	sub	sp, #28
 8011dd2:	af00      	add	r7, sp, #0
 8011dd4:	6078      	str	r0, [r7, #4]
 8011dd6:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	685b      	ldr	r3, [r3, #4]
 8011ddc:	617b      	str	r3, [r7, #20]
    while (current) {
 8011dde:	697b      	ldr	r3, [r7, #20]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d01e      	beq.n	8011e22 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 8011de4:	f107 030c 	add.w	r3, r7, #12
 8011de8:	6979      	ldr	r1, [r7, #20]
 8011dea:	4618      	mov	r0, r3
 8011dec:	f000 fd4e 	bl	801288c <_ZNK10UtestShell7getNameEv>
 8011df0:	f107 030c 	add.w	r3, r7, #12
 8011df4:	6839      	ldr	r1, [r7, #0]
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7fa ff11 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	461c      	mov	r4, r3
 8011e00:	f107 030c 	add.w	r3, r7, #12
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7fa fefe 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8011e0a:	2c00      	cmp	r4, #0
 8011e0c:	d001      	beq.n	8011e12 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	e008      	b.n	8011e24 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 8011e12:	697b      	ldr	r3, [r7, #20]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	330c      	adds	r3, #12
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	6978      	ldr	r0, [r7, #20]
 8011e1c:	4798      	blx	r3
 8011e1e:	6178      	str	r0, [r7, #20]
    while (current) {
 8011e20:	e7dd      	b.n	8011dde <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 8011e22:	2300      	movs	r3, #0
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	371c      	adds	r7, #28
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd90      	pop	{r4, r7, pc}

08011e2c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 8011e2c:	b590      	push	{r4, r7, lr}
 8011e2e:	b087      	sub	sp, #28
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	617b      	str	r3, [r7, #20]
    while (current) {
 8011e3c:	697b      	ldr	r3, [r7, #20]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d01e      	beq.n	8011e80 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 8011e42:	f107 030c 	add.w	r3, r7, #12
 8011e46:	6979      	ldr	r1, [r7, #20]
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f000 fd2e 	bl	80128aa <_ZNK10UtestShell8getGroupEv>
 8011e4e:	f107 030c 	add.w	r3, r7, #12
 8011e52:	6839      	ldr	r1, [r7, #0]
 8011e54:	4618      	mov	r0, r3
 8011e56:	f7fa fee2 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	461c      	mov	r4, r3
 8011e5e:	f107 030c 	add.w	r3, r7, #12
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7fa fecf 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8011e68:	2c00      	cmp	r4, #0
 8011e6a:	d001      	beq.n	8011e70 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	e008      	b.n	8011e82 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	330c      	adds	r3, #12
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	6978      	ldr	r0, [r7, #20]
 8011e7a:	4798      	blx	r3
 8011e7c:	6178      	str	r0, [r7, #20]
    while (current) {
 8011e7e:	e7dd      	b.n	8011e3c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 8011e80:	2300      	movs	r3, #0
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	371c      	adds	r7, #28
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd90      	pop	{r4, r7, pc}
	...

08011e8c <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 8011e8c:	b480      	push	{r7}
 8011e8e:	b083      	sub	sp, #12
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 8011e96:	4a18      	ldr	r2, [pc, #96]	; (8011ef8 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	601a      	str	r2, [r3, #0]
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	683a      	ldr	r2, [r7, #0]
 8011ea0:	605a      	str	r2, [r3, #4]
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	609a      	str	r2, [r3, #8]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	60da      	str	r2, [r3, #12]
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	611a      	str	r2, [r3, #16]
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	615a      	str	r2, [r3, #20]
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	619a      	str	r2, [r3, #24]
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	61da      	str	r2, [r3, #28]
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	621a      	str	r2, [r3, #32]
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2200      	movs	r2, #0
 8011ed0:	625a      	str	r2, [r3, #36]	; 0x24
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	629a      	str	r2, [r3, #40]	; 0x28
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	2200      	movs	r2, #0
 8011edc:	62da      	str	r2, [r3, #44]	; 0x2c
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	4618      	mov	r0, r3
 8011eee:	370c      	adds	r7, #12
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef6:	4770      	bx	lr
 8011ef8:	080281cc 	.word	0x080281cc

08011efc <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 8011efc:	b480      	push	{r7}
 8011efe:	b083      	sub	sp, #12
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
 8011f04:	4a04      	ldr	r2, [pc, #16]	; (8011f18 <_ZN10TestResultD1Ev+0x1c>)
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	601a      	str	r2, [r3, #0]
{
}
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	370c      	adds	r7, #12
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr
 8011f18:	080281cc 	.word	0x080281cc

08011f1c <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
}
 8011f24:	6878      	ldr	r0, [r7, #4]
 8011f26:	f7ff ffe9 	bl	8011efc <_ZN10TestResultD1Ev>
 8011f2a:	2138      	movs	r1, #56	; 0x38
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f7f7 ff03 	bl	8009d38 <_ZdlPvj>
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	4618      	mov	r0, r3
 8011f36:	3708      	adds	r7, #8
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}

08011f3c <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b082      	sub	sp, #8
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
 8011f44:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	685a      	ldr	r2, [r3, #4]
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	685b      	ldr	r3, [r3, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	3318      	adds	r3, #24
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	6839      	ldr	r1, [r7, #0]
 8011f56:	4610      	mov	r0, r2
 8011f58:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8011f5a:	4b05      	ldr	r3, [pc, #20]	; (8011f70 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	4798      	blx	r3
 8011f60:	4603      	mov	r3, r0
 8011f62:	461a      	mov	r2, r3
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011f68:	bf00      	nop
 8011f6a:	3708      	adds	r7, #8
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}
 8011f70:	200000a8 	.word	0x200000a8

08011f74 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
 8011f7c:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 8011f7e:	4b0c      	ldr	r3, [pc, #48]	; (8011fb0 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	4798      	blx	r3
 8011f84:	4603      	mov	r3, r0
 8011f86:	461a      	mov	r2, r3
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f8c:	1ad2      	subs	r2, r2, r3
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	685a      	ldr	r2, [r3, #4]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	331c      	adds	r3, #28
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	6879      	ldr	r1, [r7, #4]
 8011fa2:	4610      	mov	r0, r2
 8011fa4:	4798      	blx	r3
}
 8011fa6:	bf00      	nop
 8011fa8:	3708      	adds	r7, #8
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}
 8011fae:	bf00      	nop
 8011fb0:	200000a8 	.word	0x200000a8

08011fb4 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b082      	sub	sp, #8
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
 8011fbc:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	685a      	ldr	r2, [r3, #4]
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	3310      	adds	r3, #16
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	6839      	ldr	r1, [r7, #0]
 8011fce:	4610      	mov	r0, r2
 8011fd0:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8011fd2:	4b05      	ldr	r3, [pc, #20]	; (8011fe8 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	4798      	blx	r3
 8011fd8:	4603      	mov	r3, r0
 8011fda:	461a      	mov	r2, r3
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8011fe0:	bf00      	nop
 8011fe2:	3708      	adds	r7, #8
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}
 8011fe8:	200000a8 	.word	0x200000a8

08011fec <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b082      	sub	sp, #8
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	6039      	str	r1, [r7, #0]
    output_.print(text);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	685a      	ldr	r2, [r3, #4]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	685b      	ldr	r3, [r3, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	332c      	adds	r3, #44	; 0x2c
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	6839      	ldr	r1, [r7, #0]
 8012006:	4610      	mov	r0, r2
 8012008:	4798      	blx	r3
}
 801200a:	bf00      	nop
 801200c:	3708      	adds	r7, #8
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}

08012012 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 8012012:	b580      	push	{r7, lr}
 8012014:	b082      	sub	sp, #8
 8012016:	af00      	add	r7, sp, #0
 8012018:	6078      	str	r0, [r7, #4]
 801201a:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	685a      	ldr	r2, [r3, #4]
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	3348      	adds	r3, #72	; 0x48
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	6839      	ldr	r1, [r7, #0]
 801202c:	4610      	mov	r0, r2
 801202e:	4798      	blx	r3
}
 8012030:	bf00      	nop
 8012032:	3708      	adds	r7, #8
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b082      	sub	sp, #8
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
 8012040:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 8012042:	4b0c      	ldr	r3, [pc, #48]	; (8012074 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	4798      	blx	r3
 8012048:	4603      	mov	r3, r0
 801204a:	461a      	mov	r2, r3
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012050:	1ad2      	subs	r2, r2, r3
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	685a      	ldr	r2, [r3, #4]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	3314      	adds	r3, #20
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	6879      	ldr	r1, [r7, #4]
 8012066:	4610      	mov	r0, r2
 8012068:	4798      	blx	r3

}
 801206a:	bf00      	nop
 801206c:	3708      	adds	r7, #8
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}
 8012072:	bf00      	nop
 8012074:	200000a8 	.word	0x200000a8

08012078 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	685a      	ldr	r2, [r3, #4]
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	685b      	ldr	r3, [r3, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	333c      	adds	r3, #60	; 0x3c
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	6839      	ldr	r1, [r7, #0]
 8012092:	4610      	mov	r0, r2
 8012094:	4798      	blx	r3
    failureCount_++;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	695b      	ldr	r3, [r3, #20]
 801209a:	1c5a      	adds	r2, r3, #1
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	615a      	str	r2, [r3, #20]
}
 80120a0:	bf00      	nop
 80120a2:	3708      	adds	r7, #8
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}

080120a8 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
    testCount_++;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	689b      	ldr	r3, [r3, #8]
 80120b4:	1c5a      	adds	r2, r3, #1
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	609a      	str	r2, [r3, #8]
}
 80120ba:	bf00      	nop
 80120bc:	370c      	adds	r7, #12
 80120be:	46bd      	mov	sp, r7
 80120c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c4:	4770      	bx	lr

080120c6 <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 80120c6:	b480      	push	{r7}
 80120c8:	b083      	sub	sp, #12
 80120ca:	af00      	add	r7, sp, #0
 80120cc:	6078      	str	r0, [r7, #4]
    runCount_++;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	68db      	ldr	r3, [r3, #12]
 80120d2:	1c5a      	adds	r2, r3, #1
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	60da      	str	r2, [r3, #12]
}
 80120d8:	bf00      	nop
 80120da:	370c      	adds	r7, #12
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr

080120e4 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 80120e4:	b480      	push	{r7}
 80120e6:	b083      	sub	sp, #12
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
    checkCount_++;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	691b      	ldr	r3, [r3, #16]
 80120f0:	1c5a      	adds	r2, r3, #1
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	611a      	str	r2, [r3, #16]
}
 80120f6:	bf00      	nop
 80120f8:	370c      	adds	r7, #12
 80120fa:	46bd      	mov	sp, r7
 80120fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012100:	4770      	bx	lr

08012102 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 8012102:	b480      	push	{r7}
 8012104:	b083      	sub	sp, #12
 8012106:	af00      	add	r7, sp, #0
 8012108:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	699b      	ldr	r3, [r3, #24]
 801210e:	1c5a      	adds	r2, r3, #1
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	619a      	str	r2, [r3, #24]
}
 8012114:	bf00      	nop
 8012116:	370c      	adds	r7, #12
 8012118:	46bd      	mov	sp, r7
 801211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211e:	4770      	bx	lr

08012120 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 8012120:	b480      	push	{r7}
 8012122:	b083      	sub	sp, #12
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	69db      	ldr	r3, [r3, #28]
 801212c:	1c5a      	adds	r2, r3, #1
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	61da      	str	r2, [r3, #28]
}
 8012132:	bf00      	nop
 8012134:	370c      	adds	r7, #12
 8012136:	46bd      	mov	sp, r7
 8012138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213c:	4770      	bx	lr
	...

08012140 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8012148:	4b09      	ldr	r3, [pc, #36]	; (8012170 <_ZN10TestResult12testsStartedEv+0x30>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	4798      	blx	r3
 801214e:	4603      	mov	r3, r0
 8012150:	461a      	mov	r2, r3
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	685a      	ldr	r2, [r3, #4]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	3308      	adds	r3, #8
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	4610      	mov	r0, r2
 8012166:	4798      	blx	r3
}
 8012168:	bf00      	nop
 801216a:	3708      	adds	r7, #8
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}
 8012170:	200000a8 	.word	0x200000a8

08012174 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 801217c:	4b0c      	ldr	r3, [pc, #48]	; (80121b0 <_ZN10TestResult10testsEndedEv+0x3c>)
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	4798      	blx	r3
 8012182:	4603      	mov	r3, r0
 8012184:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801218a:	68fa      	ldr	r2, [r7, #12]
 801218c:	1ad2      	subs	r2, r2, r3
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	685a      	ldr	r2, [r3, #4]
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	330c      	adds	r3, #12
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	6879      	ldr	r1, [r7, #4]
 80121a2:	4610      	mov	r0, r2
 80121a4:	4798      	blx	r3
}
 80121a6:	bf00      	nop
 80121a8:	3710      	adds	r7, #16
 80121aa:	46bd      	mov	sp, r7
 80121ac:	bd80      	pop	{r7, pc}
 80121ae:	bf00      	nop
 80121b0:	200000a8 	.word	0x200000a8

080121b4 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 80121b4:	b480      	push	{r7}
 80121b6:	b083      	sub	sp, #12
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	6a1b      	ldr	r3, [r3, #32]
}
 80121c0:	4618      	mov	r0, r3
 80121c2:	370c      	adds	r7, #12
 80121c4:	46bd      	mov	sp, r7
 80121c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ca:	4770      	bx	lr

080121cc <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 80121cc:	b480      	push	{r7}
 80121ce:	b083      	sub	sp, #12
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80121d8:	4618      	mov	r0, r3
 80121da:	370c      	adds	r7, #12
 80121dc:	46bd      	mov	sp, r7
 80121de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e2:	4770      	bx	lr

080121e4 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 80121e4:	b480      	push	{r7}
 80121e6:	b083      	sub	sp, #12
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80121f0:	4618      	mov	r0, r3
 80121f2:	370c      	adds	r7, #12
 80121f4:	46bd      	mov	sp, r7
 80121f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fa:	4770      	bx	lr

080121fc <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 80121fc:	b590      	push	{r4, r7, lr}
 80121fe:	b087      	sub	sp, #28
 8012200:	af00      	add	r7, sp, #0
 8012202:	ed87 0b04 	vstr	d0, [r7, #16]
 8012206:	ed87 1b02 	vstr	d1, [r7, #8]
 801220a:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 801220e:	4b2c      	ldr	r3, [pc, #176]	; (80122c0 <_Z13doubles_equalddd+0xc4>)
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	ed97 0b04 	vldr	d0, [r7, #16]
 8012216:	4798      	blx	r3
 8012218:	4603      	mov	r3, r0
 801221a:	2b00      	cmp	r3, #0
 801221c:	d10f      	bne.n	801223e <_Z13doubles_equalddd+0x42>
 801221e:	4b28      	ldr	r3, [pc, #160]	; (80122c0 <_Z13doubles_equalddd+0xc4>)
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	ed97 0b02 	vldr	d0, [r7, #8]
 8012226:	4798      	blx	r3
 8012228:	4603      	mov	r3, r0
 801222a:	2b00      	cmp	r3, #0
 801222c:	d107      	bne.n	801223e <_Z13doubles_equalddd+0x42>
 801222e:	4b24      	ldr	r3, [pc, #144]	; (80122c0 <_Z13doubles_equalddd+0xc4>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	ed97 0b00 	vldr	d0, [r7]
 8012236:	4798      	blx	r3
 8012238:	4603      	mov	r3, r0
 801223a:	2b00      	cmp	r3, #0
 801223c:	d001      	beq.n	8012242 <_Z13doubles_equalddd+0x46>
 801223e:	2301      	movs	r3, #1
 8012240:	e000      	b.n	8012244 <_Z13doubles_equalddd+0x48>
 8012242:	2300      	movs	r3, #0
 8012244:	2b00      	cmp	r3, #0
 8012246:	d001      	beq.n	801224c <_Z13doubles_equalddd+0x50>
        return false;
 8012248:	2300      	movs	r3, #0
 801224a:	e035      	b.n	80122b8 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 801224c:	4b1d      	ldr	r3, [pc, #116]	; (80122c4 <_Z13doubles_equalddd+0xc8>)
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	ed97 0b04 	vldr	d0, [r7, #16]
 8012254:	4798      	blx	r3
 8012256:	4603      	mov	r3, r0
 8012258:	2b00      	cmp	r3, #0
 801225a:	d009      	beq.n	8012270 <_Z13doubles_equalddd+0x74>
 801225c:	4b19      	ldr	r3, [pc, #100]	; (80122c4 <_Z13doubles_equalddd+0xc8>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	ed97 0b02 	vldr	d0, [r7, #8]
 8012264:	4798      	blx	r3
 8012266:	4603      	mov	r3, r0
 8012268:	2b00      	cmp	r3, #0
 801226a:	d001      	beq.n	8012270 <_Z13doubles_equalddd+0x74>
 801226c:	2301      	movs	r3, #1
 801226e:	e000      	b.n	8012272 <_Z13doubles_equalddd+0x76>
 8012270:	2300      	movs	r3, #0
 8012272:	2b00      	cmp	r3, #0
 8012274:	d001      	beq.n	801227a <_Z13doubles_equalddd+0x7e>
    {
        return true;
 8012276:	2301      	movs	r3, #1
 8012278:	e01e      	b.n	80122b8 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 801227a:	4b13      	ldr	r3, [pc, #76]	; (80122c8 <_Z13doubles_equalddd+0xcc>)
 801227c:	681c      	ldr	r4, [r3, #0]
 801227e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012282:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012286:	f7ee f83f 	bl	8000308 <__aeabi_dsub>
 801228a:	4602      	mov	r2, r0
 801228c:	460b      	mov	r3, r1
 801228e:	ec43 2b17 	vmov	d7, r2, r3
 8012292:	eeb0 0a47 	vmov.f32	s0, s14
 8012296:	eef0 0a67 	vmov.f32	s1, s15
 801229a:	47a0      	blx	r4
 801229c:	ec53 2b10 	vmov	r2, r3, d0
 80122a0:	2101      	movs	r1, #1
 80122a2:	460c      	mov	r4, r1
 80122a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80122a8:	f7ee fa5a 	bl	8000760 <__aeabi_dcmpge>
 80122ac:	4603      	mov	r3, r0
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d101      	bne.n	80122b6 <_Z13doubles_equalddd+0xba>
 80122b2:	2300      	movs	r3, #0
 80122b4:	461c      	mov	r4, r3
 80122b6:	b2e3      	uxtb	r3, r4
}
 80122b8:	4618      	mov	r0, r3
 80122ba:	371c      	adds	r7, #28
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd90      	pop	{r4, r7, pc}
 80122c0:	200000e8 	.word	0x200000e8
 80122c4:	200000ec 	.word	0x200000ec
 80122c8:	200000dc 	.word	0x200000dc

080122cc <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 80122cc:	b480      	push	{r7}
 80122ce:	b083      	sub	sp, #12
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	332c      	adds	r3, #44	; 0x2c
    }
 80122d8:	4618      	mov	r0, r3
 80122da:	370c      	adds	r7, #12
 80122dc:	46bd      	mov	sp, r7
 80122de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e2:	4770      	bx	lr

080122e4 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b082      	sub	sp, #8
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
    {
 80122ec:	4a0a      	ldr	r2, [pc, #40]	; (8012318 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	601a      	str	r2, [r3, #0]
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	332c      	adds	r3, #44	; 0x2c
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7ff fe00 	bl	8011efc <_ZN10TestResultD1Ev>
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	331c      	adds	r3, #28
 8012300:	4618      	mov	r0, r3
 8012302:	f7f6 f815 	bl	8008330 <_ZN17ConsoleTestOutputD1Ev>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	4618      	mov	r0, r3
 801230a:	f000 f943 	bl	8012594 <_ZN10UtestShellD1Ev>
    }
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	4618      	mov	r0, r3
 8012312:	3708      	adds	r7, #8
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}
 8012318:	08028214 	.word	0x08028214

0801231c <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 801231c:	b580      	push	{r7, lr}
 801231e:	b082      	sub	sp, #8
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
    }
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f7ff ffdd 	bl	80122e4 <_ZN22OutsideTestRunnerUTestD1Ev>
 801232a:	2164      	movs	r1, #100	; 0x64
 801232c:	6878      	ldr	r0, [r7, #4]
 801232e:	f7f7 fd03 	bl	8009d38 <_ZdlPvj>
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	4618      	mov	r0, r3
 8012336:	3708      	adds	r7, #8
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}

0801233c <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 801233c:	b580      	push	{r7, lr}
 801233e:	b084      	sub	sp, #16
 8012340:	af02      	add	r7, sp, #8
 8012342:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	2300      	movs	r3, #0
 8012348:	9300      	str	r3, [sp, #0]
 801234a:	4b0d      	ldr	r3, [pc, #52]	; (8012380 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 801234c:	4a0d      	ldr	r2, [pc, #52]	; (8012384 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 801234e:	490e      	ldr	r1, [pc, #56]	; (8012388 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 8012350:	f000 f8f8 	bl	8012544 <_ZN10UtestShellC1EPKcS1_S1_j>
 8012354:	4a0d      	ldr	r2, [pc, #52]	; (801238c <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	601a      	str	r2, [r3, #0]
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	331c      	adds	r3, #28
 801235e:	4618      	mov	r0, r3
 8012360:	f7f5 ffd4 	bl	800830c <_ZN17ConsoleTestOutputC1Ev>
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	331c      	adds	r3, #28
 801236e:	4619      	mov	r1, r3
 8012370:	4610      	mov	r0, r2
 8012372:	f7ff fd8b 	bl	8011e8c <_ZN10TestResultC1ER10TestOutput>
    {
    }
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	4618      	mov	r0, r3
 801237a:	3708      	adds	r7, #8
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	080247e8 	.word	0x080247e8
 8012384:	080247f8 	.word	0x080247f8
 8012388:	08024838 	.word	0x08024838
 801238c:	08028214 	.word	0x08028214

08012390 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 8012390:	b580      	push	{r7, lr}
 8012392:	af00      	add	r7, sp, #0
 8012394:	4801      	ldr	r0, [pc, #4]	; (801239c <__tcf_0+0xc>)
 8012396:	f7ff ffa5 	bl	80122e4 <_ZN22OutsideTestRunnerUTestD1Ev>
 801239a:	bd80      	pop	{r7, pc}
 801239c:	20000a54 	.word	0x20000a54

080123a0 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 80123a4:	4b12      	ldr	r3, [pc, #72]	; (80123f0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80123a6:	781b      	ldrb	r3, [r3, #0]
 80123a8:	f3bf 8f5b 	dmb	ish
 80123ac:	b2db      	uxtb	r3, r3
 80123ae:	f003 0301 	and.w	r3, r3, #1
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	bf0c      	ite	eq
 80123b6:	2301      	moveq	r3, #1
 80123b8:	2300      	movne	r3, #0
 80123ba:	b2db      	uxtb	r3, r3
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d013      	beq.n	80123e8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80123c0:	480b      	ldr	r0, [pc, #44]	; (80123f0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80123c2:	f00c ff29 	bl	801f218 <__cxa_guard_acquire>
 80123c6:	4603      	mov	r3, r0
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	bf14      	ite	ne
 80123cc:	2301      	movne	r3, #1
 80123ce:	2300      	moveq	r3, #0
 80123d0:	b2db      	uxtb	r3, r3
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d008      	beq.n	80123e8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80123d6:	4807      	ldr	r0, [pc, #28]	; (80123f4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 80123d8:	f7ff ffb0 	bl	801233c <_ZN22OutsideTestRunnerUTestC1Ev>
 80123dc:	4804      	ldr	r0, [pc, #16]	; (80123f0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80123de:	f00c ff27 	bl	801f230 <__cxa_guard_release>
 80123e2:	4805      	ldr	r0, [pc, #20]	; (80123f8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 80123e4:	f00c ff4b 	bl	801f27e <atexit>
    return instance_;
 80123e8:	4b02      	ldr	r3, [pc, #8]	; (80123f4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 80123ea:	4618      	mov	r0, r3
 80123ec:	bd80      	pop	{r7, pc}
 80123ee:	bf00      	nop
 80123f0:	20000ab8 	.word	0x20000ab8
 80123f4:	20000a54 	.word	0x20000a54
 80123f8:	08012391 	.word	0x08012391

080123fc <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b082      	sub	sp, #8
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	330c      	adds	r3, #12
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	4798      	blx	r3
    }
 8012410:	bf00      	nop
 8012412:	3708      	adds	r7, #8
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}

08012418 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	3314      	adds	r3, #20
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	4798      	blx	r3
    }
 801242c:	bf00      	nop
 801242e:	3708      	adds	r7, #8
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}

08012434 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	3310      	adds	r3, #16
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	4798      	blx	r3
    }
 8012448:	bf00      	nop
 801244a:	3708      	adds	r7, #8
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}

08012450 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 8012450:	b480      	push	{r7}
 8012452:	b085      	sub	sp, #20
 8012454:	af00      	add	r7, sp, #0
 8012456:	60f8      	str	r0, [r7, #12]
 8012458:	60b9      	str	r1, [r7, #8]
 801245a:	607a      	str	r2, [r7, #4]
 801245c:	603b      	str	r3, [r7, #0]
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	68ba      	ldr	r2, [r7, #8]
 8012462:	601a      	str	r2, [r3, #0]
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	687a      	ldr	r2, [r7, #4]
 8012468:	605a      	str	r2, [r3, #4]
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	683a      	ldr	r2, [r7, #0]
 801246e:	609a      	str	r2, [r3, #8]
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	4618      	mov	r0, r3
 8012474:	3714      	adds	r7, #20
 8012476:	46bd      	mov	sp, r7
 8012478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247c:	4770      	bx	lr

0801247e <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 801247e:	b580      	push	{r7, lr}
 8012480:	b086      	sub	sp, #24
 8012482:	af00      	add	r7, sp, #0
 8012484:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	689b      	ldr	r3, [r3, #8]
 801249a:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 801249c:	693b      	ldr	r3, [r7, #16]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	3394      	adds	r3, #148	; 0x94
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	68ba      	ldr	r2, [r7, #8]
 80124a6:	68f9      	ldr	r1, [r7, #12]
 80124a8:	6938      	ldr	r0, [r7, #16]
 80124aa:	4798      	blx	r3
    }
 80124ac:	bf00      	nop
 80124ae:	3718      	adds	r7, #24
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b086      	sub	sp, #24
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 80124c0:	697b      	ldr	r3, [r7, #20]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	685b      	ldr	r3, [r3, #4]
 80124ca:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 80124cc:	697b      	ldr	r3, [r7, #20]
 80124ce:	689b      	ldr	r3, [r3, #8]
 80124d0:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 80124d2:	4b05      	ldr	r3, [pc, #20]	; (80124e8 <helperDoRunOneTestSeperateProcess+0x34>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	68ba      	ldr	r2, [r7, #8]
 80124d8:	68f9      	ldr	r1, [r7, #12]
 80124da:	6938      	ldr	r0, [r7, #16]
 80124dc:	4798      	blx	r3
    }
 80124de:	bf00      	nop
 80124e0:	3718      	adds	r7, #24
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}
 80124e6:	bf00      	nop
 80124e8:	2000009c 	.word	0x2000009c

080124ec <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 80124ec:	b480      	push	{r7}
 80124ee:	b083      	sub	sp, #12
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 80124f4:	4a0f      	ldr	r2, [pc, #60]	; (8012534 <_ZN10UtestShellC1Ev+0x48>)
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	601a      	str	r2, [r3, #0]
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	4a0e      	ldr	r2, [pc, #56]	; (8012538 <_ZN10UtestShellC1Ev+0x4c>)
 80124fe:	605a      	str	r2, [r3, #4]
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	4a0e      	ldr	r2, [pc, #56]	; (801253c <_ZN10UtestShellC1Ev+0x50>)
 8012504:	609a      	str	r2, [r3, #8]
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	4a0d      	ldr	r2, [pc, #52]	; (8012540 <_ZN10UtestShellC1Ev+0x54>)
 801250a:	60da      	str	r2, [r3, #12]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2200      	movs	r2, #0
 8012510:	611a      	str	r2, [r3, #16]
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2200      	movs	r2, #0
 8012516:	615a      	str	r2, [r3, #20]
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2200      	movs	r2, #0
 801251c:	761a      	strb	r2, [r3, #24]
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2200      	movs	r2, #0
 8012522:	765a      	strb	r2, [r3, #25]
{
}
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	4618      	mov	r0, r3
 8012528:	370c      	adds	r7, #12
 801252a:	46bd      	mov	sp, r7
 801252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012530:	4770      	bx	lr
 8012532:	bf00      	nop
 8012534:	080282d4 	.word	0x080282d4
 8012538:	08024884 	.word	0x08024884
 801253c:	08024898 	.word	0x08024898
 8012540:	080248a8 	.word	0x080248a8

08012544 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8012544:	b480      	push	{r7}
 8012546:	b085      	sub	sp, #20
 8012548:	af00      	add	r7, sp, #0
 801254a:	60f8      	str	r0, [r7, #12]
 801254c:	60b9      	str	r1, [r7, #8]
 801254e:	607a      	str	r2, [r7, #4]
 8012550:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8012552:	4a0f      	ldr	r2, [pc, #60]	; (8012590 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	601a      	str	r2, [r3, #0]
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	68ba      	ldr	r2, [r7, #8]
 801255c:	605a      	str	r2, [r3, #4]
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	687a      	ldr	r2, [r7, #4]
 8012562:	609a      	str	r2, [r3, #8]
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	683a      	ldr	r2, [r7, #0]
 8012568:	60da      	str	r2, [r3, #12]
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	69ba      	ldr	r2, [r7, #24]
 801256e:	611a      	str	r2, [r3, #16]
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	2200      	movs	r2, #0
 8012574:	615a      	str	r2, [r3, #20]
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	2200      	movs	r2, #0
 801257a:	761a      	strb	r2, [r3, #24]
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	2200      	movs	r2, #0
 8012580:	765a      	strb	r2, [r3, #25]
{
}
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	4618      	mov	r0, r3
 8012586:	3714      	adds	r7, #20
 8012588:	46bd      	mov	sp, r7
 801258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258e:	4770      	bx	lr
 8012590:	080282d4 	.word	0x080282d4

08012594 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 8012594:	b480      	push	{r7}
 8012596:	b083      	sub	sp, #12
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	4a04      	ldr	r2, [pc, #16]	; (80125b0 <_ZN10UtestShellD1Ev+0x1c>)
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	601a      	str	r2, [r3, #0]
{
}
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	4618      	mov	r0, r3
 80125a6:	370c      	adds	r7, #12
 80125a8:	46bd      	mov	sp, r7
 80125aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ae:	4770      	bx	lr
 80125b0:	080282d4 	.word	0x080282d4

080125b4 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b082      	sub	sp, #8
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
}
 80125bc:	6878      	ldr	r0, [r7, #4]
 80125be:	f7ff ffe9 	bl	8012594 <_ZN10UtestShellD1Ev>
 80125c2:	211c      	movs	r1, #28
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f7f7 fbb7 	bl	8009d38 <_ZdlPvj>
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	4618      	mov	r0, r3
 80125ce:	3708      	adds	r7, #8
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}

080125d4 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b082      	sub	sp, #8
 80125d8:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 80125da:	2300      	movs	r3, #0
 80125dc:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	3310      	adds	r3, #16
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	4798      	blx	r3
}
 80125ea:	bf00      	nop
 80125ec:	3708      	adds	r7, #8
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
	...

080125f4 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 80125f8:	4b02      	ldr	r3, [pc, #8]	; (8012604 <_ZN10UtestShell5crashEv+0x10>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	4798      	blx	r3
}
 80125fe:	bf00      	nop
 8012600:	bd80      	pop	{r7, pc}
 8012602:	bf00      	nop
 8012604:	20000098 	.word	0x20000098

08012608 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b088      	sub	sp, #32
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	2200      	movs	r2, #0
 8012618:	765a      	strb	r2, [r3, #25]
    result.countRun();
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	3324      	adds	r3, #36	; 0x24
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	6878      	ldr	r0, [r7, #4]
 8012624:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 8012626:	f107 0014 	add.w	r0, r7, #20
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	68ba      	ldr	r2, [r7, #8]
 801262e:	68f9      	ldr	r1, [r7, #12]
 8012630:	f7ff ff0e 	bl	8012450 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	337c      	adds	r3, #124	; 0x7c
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	68f8      	ldr	r0, [r7, #12]
 801263e:	4798      	blx	r3
 8012640:	4603      	mov	r3, r0
 8012642:	2b00      	cmp	r3, #0
 8012644:	d007      	beq.n	8012656 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 8012646:	4b09      	ldr	r3, [pc, #36]	; (801266c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	f107 0214 	add.w	r2, r7, #20
 801264e:	4611      	mov	r1, r2
 8012650:	4807      	ldr	r0, [pc, #28]	; (8012670 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 8012652:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8012654:	e006      	b.n	8012664 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 8012656:	4b05      	ldr	r3, [pc, #20]	; (801266c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	f107 0214 	add.w	r2, r7, #20
 801265e:	4611      	mov	r1, r2
 8012660:	4804      	ldr	r0, [pc, #16]	; (8012674 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 8012662:	4798      	blx	r3
}
 8012664:	bf00      	nop
 8012666:	3720      	adds	r7, #32
 8012668:	46bd      	mov	sp, r7
 801266a:	bd80      	pop	{r7, pc}
 801266c:	200000a4 	.word	0x200000a4
 8012670:	080124b5 	.word	0x080124b5
 8012674:	0801247f 	.word	0x0801247f

08012678 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 8012678:	b590      	push	{r4, r7, lr}
 801267a:	b083      	sub	sp, #12
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
    return new Utest();
 8012680:	22d3      	movs	r2, #211	; 0xd3
 8012682:	4906      	ldr	r1, [pc, #24]	; (801269c <_ZN10UtestShell10createTestEv+0x24>)
 8012684:	2004      	movs	r0, #4
 8012686:	f7f7 fb43 	bl	8009d10 <_ZnwjPKci>
 801268a:	4604      	mov	r4, r0
 801268c:	4620      	mov	r0, r4
 801268e:	f001 fb0f 	bl	8013cb0 <_ZN5UtestC1Ev>
 8012692:	4623      	mov	r3, r4
}
 8012694:	4618      	mov	r0, r3
 8012696:	370c      	adds	r7, #12
 8012698:	46bd      	mov	sp, r7
 801269a:	bd90      	pop	{r4, r7, pc}
 801269c:	080248b8 	.word	0x080248b8

080126a0 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	6039      	str	r1, [r7, #0]
    delete test;
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d004      	beq.n	80126ba <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 80126b0:	681a      	ldr	r2, [r3, #0]
 80126b2:	3204      	adds	r2, #4
 80126b4:	6812      	ldr	r2, [r2, #0]
 80126b6:	4618      	mov	r0, r3
 80126b8:	4790      	blx	r2
}
 80126ba:	bf00      	nop
 80126bc:	3708      	adds	r7, #8
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
	...

080126c4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b088      	sub	sp, #32
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	60f8      	str	r0, [r7, #12]
 80126cc:	60b9      	str	r1, [r7, #8]
 80126ce:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	333c      	adds	r3, #60	; 0x3c
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	4940      	ldr	r1, [pc, #256]	; (80127dc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	3314      	adds	r3, #20
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	687a      	ldr	r2, [r7, #4]
 80126e8:	68f9      	ldr	r1, [r7, #12]
 80126ea:	68b8      	ldr	r0, [r7, #8]
 80126ec:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	333c      	adds	r3, #60	; 0x3c
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	493a      	ldr	r1, [pc, #232]	; (80127e0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 80126fc:	f001 faae 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8012700:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 8012702:	68f8      	ldr	r0, [r7, #12]
 8012704:	f001 fa90 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 8012708:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 801270a:	6879      	ldr	r1, [r7, #4]
 801270c:	68f8      	ldr	r0, [r7, #12]
 801270e:	f001 fa6b 	bl	8013be8 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 8012712:	68f9      	ldr	r1, [r7, #12]
 8012714:	68f8      	ldr	r0, [r7, #12]
 8012716:	f001 fa77 	bl	8013c08 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	333c      	adds	r3, #60	; 0x3c
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	4930      	ldr	r1, [pc, #192]	; (80127e4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8012724:	6878      	ldr	r0, [r7, #4]
 8012726:	4798      	blx	r3
    Utest* testToRun = createTest();
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	3388      	adds	r3, #136	; 0x88
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	68f8      	ldr	r0, [r7, #12]
 8012732:	4798      	blx	r3
 8012734:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	333c      	adds	r3, #60	; 0x3c
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	492a      	ldr	r1, [pc, #168]	; (80127e8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	333c      	adds	r3, #60	; 0x3c
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	4927      	ldr	r1, [pc, #156]	; (80127ec <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	4798      	blx	r3
    testToRun->run();
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	3308      	adds	r3, #8
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	6978      	ldr	r0, [r7, #20]
 801275c:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	333c      	adds	r3, #60	; 0x3c
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	4922      	ldr	r1, [pc, #136]	; (80127f0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 801276c:	69f9      	ldr	r1, [r7, #28]
 801276e:	68f8      	ldr	r0, [r7, #12]
 8012770:	f001 fa4a 	bl	8013c08 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8012774:	69b9      	ldr	r1, [r7, #24]
 8012776:	68f8      	ldr	r0, [r7, #12]
 8012778:	f001 fa36 	bl	8013be8 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	333c      	adds	r3, #60	; 0x3c
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	491b      	ldr	r1, [pc, #108]	; (80127f4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 8012786:	6878      	ldr	r0, [r7, #4]
 8012788:	4798      	blx	r3
    destroyTest(testToRun);
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	338c      	adds	r3, #140	; 0x8c
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	6979      	ldr	r1, [r7, #20]
 8012794:	68f8      	ldr	r0, [r7, #12]
 8012796:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	333c      	adds	r3, #60	; 0x3c
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	4915      	ldr	r1, [pc, #84]	; (80127f8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 80127a2:	6878      	ldr	r0, [r7, #4]
 80127a4:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	333c      	adds	r3, #60	; 0x3c
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	4913      	ldr	r1, [pc, #76]	; (80127fc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	3318      	adds	r3, #24
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	687a      	ldr	r2, [r7, #4]
 80127be:	68f9      	ldr	r1, [r7, #12]
 80127c0:	68b8      	ldr	r0, [r7, #8]
 80127c2:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	333c      	adds	r3, #60	; 0x3c
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	490c      	ldr	r1, [pc, #48]	; (8012800 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	4798      	blx	r3
}
 80127d2:	bf00      	nop
 80127d4:	3720      	adds	r7, #32
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}
 80127da:	bf00      	nop
 80127dc:	080248cc 	.word	0x080248cc
 80127e0:	080248f0 	.word	0x080248f0
 80127e4:	08024910 	.word	0x08024910
 80127e8:	0802492c 	.word	0x0802492c
 80127ec:	08024948 	.word	0x08024948
 80127f0:	08024964 	.word	0x08024964
 80127f4:	0802497c 	.word	0x0802497c
 80127f8:	08024998 	.word	0x08024998
 80127fc:	080249b4 	.word	0x080249b4
 8012800:	080249d8 	.word	0x080249d8

08012804 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 8012804:	b480      	push	{r7}
 8012806:	b083      	sub	sp, #12
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
    return next_;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	695b      	ldr	r3, [r3, #20]
}
 8012810:	4618      	mov	r0, r3
 8012812:	370c      	adds	r7, #12
 8012814:	46bd      	mov	sp, r7
 8012816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281a:	4770      	bx	lr

0801281c <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 801281c:	b480      	push	{r7}
 801281e:	b083      	sub	sp, #12
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
 8012824:	6039      	str	r1, [r7, #0]
    next_ = test;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	683a      	ldr	r2, [r7, #0]
 801282a:	615a      	str	r2, [r3, #20]
    return this;
 801282c:	687b      	ldr	r3, [r7, #4]
}
 801282e:	4618      	mov	r0, r3
 8012830:	370c      	adds	r7, #12
 8012832:	46bd      	mov	sp, r7
 8012834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012838:	4770      	bx	lr

0801283a <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 801283a:	b580      	push	{r7, lr}
 801283c:	b082      	sub	sp, #8
 801283e:	af00      	add	r7, sp, #0
 8012840:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	695b      	ldr	r3, [r3, #20]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d00b      	beq.n	8012862 <_ZN10UtestShell10countTestsEv+0x28>
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	695a      	ldr	r2, [r3, #20]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	695b      	ldr	r3, [r3, #20]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	3310      	adds	r3, #16
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	4610      	mov	r0, r2
 801285a:	4798      	blx	r3
 801285c:	4603      	mov	r3, r0
 801285e:	3301      	adds	r3, #1
 8012860:	e000      	b.n	8012864 <_ZN10UtestShell10countTestsEv+0x2a>
 8012862:	2301      	movs	r3, #1
}
 8012864:	4618      	mov	r0, r3
 8012866:	3708      	adds	r7, #8
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}

0801286c <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b082      	sub	sp, #8
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	6039      	str	r1, [r7, #0]
    return "TEST";
 8012876:	4904      	ldr	r1, [pc, #16]	; (8012888 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f7f9 fe0c 	bl	800c496 <_ZN12SimpleStringC1EPKc>
}
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	3708      	adds	r7, #8
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}
 8012886:	bf00      	nop
 8012888:	080249fc 	.word	0x080249fc

0801288c <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b082      	sub	sp, #8
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
 8012894:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	689b      	ldr	r3, [r3, #8]
 801289a:	4619      	mov	r1, r3
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f7f9 fdfa 	bl	800c496 <_ZN12SimpleStringC1EPKc>
}
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	3708      	adds	r7, #8
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}

080128aa <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 80128aa:	b580      	push	{r7, lr}
 80128ac:	b082      	sub	sp, #8
 80128ae:	af00      	add	r7, sp, #0
 80128b0:	6078      	str	r0, [r7, #4]
 80128b2:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	685b      	ldr	r3, [r3, #4]
 80128b8:	4619      	mov	r1, r3
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f7f9 fdeb 	bl	800c496 <_ZN12SimpleStringC1EPKc>
}
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	3708      	adds	r7, #8
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}

080128c8 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b082      	sub	sp, #8
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
 80128d0:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	33a0      	adds	r3, #160	; 0xa0
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	687a      	ldr	r2, [r7, #4]
 80128dc:	6839      	ldr	r1, [r7, #0]
 80128de:	4610      	mov	r0, r2
 80128e0:	4798      	blx	r3
    formattedName += "(";
 80128e2:	490e      	ldr	r1, [pc, #56]	; (801291c <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 80128e4:	6878      	ldr	r0, [r7, #4]
 80128e6:	f7fa fa1d 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	685b      	ldr	r3, [r3, #4]
 80128ee:	4619      	mov	r1, r3
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f7fa fa17 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 80128f6:	490a      	ldr	r1, [pc, #40]	; (8012920 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f7fa fa13 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	689b      	ldr	r3, [r3, #8]
 8012902:	4619      	mov	r1, r3
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f7fa fa0d 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 801290a:	4906      	ldr	r1, [pc, #24]	; (8012924 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f7fa fa09 	bl	800cd24 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 8012912:	bf00      	nop
}
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	3708      	adds	r7, #8
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	08024a04 	.word	0x08024a04
 8012920:	08024a08 	.word	0x08024a08
 8012924:	08024a0c 	.word	0x08024a0c

08012928 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8012928:	b480      	push	{r7}
 801292a:	b083      	sub	sp, #12
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	7e5b      	ldrb	r3, [r3, #25]
}
 8012934:	4618      	mov	r0, r3
 8012936:	370c      	adds	r7, #12
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr

08012940 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 8012948:	6878      	ldr	r0, [r7, #4]
 801294a:	f001 f96d 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 801294e:	4603      	mov	r3, r0
 8012950:	681a      	ldr	r2, [r3, #0]
 8012952:	3228      	adds	r2, #40	; 0x28
 8012954:	6812      	ldr	r2, [r2, #0]
 8012956:	4618      	mov	r0, r3
 8012958:	4790      	blx	r2
}
 801295a:	bf00      	nop
 801295c:	3708      	adds	r7, #8
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}

08012962 <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 8012962:	b480      	push	{r7}
 8012964:	b083      	sub	sp, #12
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
    return true;
 801296a:	2301      	movs	r3, #1
}
 801296c:	4618      	mov	r0, r3
 801296e:	370c      	adds	r7, #12
 8012970:	46bd      	mov	sp, r7
 8012972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012976:	4770      	bx	lr

08012978 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 8012978:	b480      	push	{r7}
 801297a:	b083      	sub	sp, #12
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	7e1b      	ldrb	r3, [r3, #24]
}
 8012984:	4618      	mov	r0, r3
 8012986:	370c      	adds	r7, #12
 8012988:	46bd      	mov	sp, r7
 801298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298e:	4770      	bx	lr

08012990 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8012990:	b480      	push	{r7}
 8012992:	b083      	sub	sp, #12
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2201      	movs	r2, #1
 801299c:	761a      	strb	r2, [r3, #24]
}
 801299e:	bf00      	nop
 80129a0:	370c      	adds	r7, #12
 80129a2:	46bd      	mov	sp, r7
 80129a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a8:	4770      	bx	lr

080129aa <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 80129aa:	b480      	push	{r7}
 80129ac:	b083      	sub	sp, #12
 80129ae:	af00      	add	r7, sp, #0
 80129b0:	6078      	str	r0, [r7, #4]

}
 80129b2:	bf00      	nop
 80129b4:	370c      	adds	r7, #12
 80129b6:	46bd      	mov	sp, r7
 80129b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129bc:	4770      	bx	lr

080129be <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 80129be:	b480      	push	{r7}
 80129c0:	b083      	sub	sp, #12
 80129c2:	af00      	add	r7, sp, #0
 80129c4:	6078      	str	r0, [r7, #4]
 80129c6:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	683a      	ldr	r2, [r7, #0]
 80129cc:	60da      	str	r2, [r3, #12]
}
 80129ce:	bf00      	nop
 80129d0:	370c      	adds	r7, #12
 80129d2:	46bd      	mov	sp, r7
 80129d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d8:	4770      	bx	lr

080129da <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 80129da:	b480      	push	{r7}
 80129dc:	b083      	sub	sp, #12
 80129de:	af00      	add	r7, sp, #0
 80129e0:	6078      	str	r0, [r7, #4]
 80129e2:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	683a      	ldr	r2, [r7, #0]
 80129e8:	611a      	str	r2, [r3, #16]
}
 80129ea:	bf00      	nop
 80129ec:	370c      	adds	r7, #12
 80129ee:	46bd      	mov	sp, r7
 80129f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f4:	4770      	bx	lr

080129f6 <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 80129f6:	b480      	push	{r7}
 80129f8:	b083      	sub	sp, #12
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	6078      	str	r0, [r7, #4]
 80129fe:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	683a      	ldr	r2, [r7, #0]
 8012a04:	605a      	str	r2, [r3, #4]
}
 8012a06:	bf00      	nop
 8012a08:	370c      	adds	r7, #12
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a10:	4770      	bx	lr

08012a12 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 8012a12:	b480      	push	{r7}
 8012a14:	b083      	sub	sp, #12
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	6078      	str	r0, [r7, #4]
 8012a1a:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	683a      	ldr	r2, [r7, #0]
 8012a20:	609a      	str	r2, [r3, #8]
}
 8012a22:	bf00      	nop
 8012a24:	370c      	adds	r7, #12
 8012a26:	46bd      	mov	sp, r7
 8012a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2c:	4770      	bx	lr

08012a2e <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8012a2e:	b580      	push	{r7, lr}
 8012a30:	b082      	sub	sp, #8
 8012a32:	af00      	add	r7, sp, #0
 8012a34:	6078      	str	r0, [r7, #4]
 8012a36:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	68db      	ldr	r3, [r3, #12]
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f7f9 fd29 	bl	800c496 <_ZN12SimpleStringC1EPKc>
}
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	3708      	adds	r7, #8
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}

08012a4c <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	b083      	sub	sp, #12
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	691b      	ldr	r3, [r3, #16]
}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	370c      	adds	r7, #12
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a62:	4770      	bx	lr

08012a64 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 8012a64:	b590      	push	{r4, r7, lr}
 8012a66:	b087      	sub	sp, #28
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	60f8      	str	r0, [r7, #12]
 8012a6c:	60b9      	str	r1, [r7, #8]
 8012a6e:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d101      	bne.n	8012a7a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 8012a76:	2301      	movs	r3, #1
 8012a78:	e01f      	b.n	8012aba <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d01b      	beq.n	8012ab8 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8012a80:	f107 0310 	add.w	r3, r7, #16
 8012a84:	68b9      	ldr	r1, [r7, #8]
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7f9 fd05 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8012a8c:	f107 0310 	add.w	r3, r7, #16
 8012a90:	4619      	mov	r1, r3
 8012a92:	6878      	ldr	r0, [r7, #4]
 8012a94:	f00c fb93 	bl	801f1be <_ZNK10TestFilter5matchERK12SimpleString>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	461c      	mov	r4, r3
 8012a9c:	f107 0310 	add.w	r3, r7, #16
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7fa f8b0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8012aa6:	2c00      	cmp	r4, #0
 8012aa8:	d001      	beq.n	8012aae <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 8012aaa:	2301      	movs	r3, #1
 8012aac:	e005      	b.n	8012aba <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f00c fb5f 	bl	801f172 <_ZNK10TestFilter7getNextEv>
 8012ab4:	6078      	str	r0, [r7, #4]
 8012ab6:	e7e0      	b.n	8012a7a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 8012ab8:	2300      	movs	r3, #0
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	371c      	adds	r7, #28
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd90      	pop	{r4, r7, pc}

08012ac2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 8012ac2:	b580      	push	{r7, lr}
 8012ac4:	b084      	sub	sp, #16
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	60f8      	str	r0, [r7, #12]
 8012aca:	60b9      	str	r1, [r7, #8]
 8012acc:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	685b      	ldr	r3, [r3, #4]
 8012ad2:	68ba      	ldr	r2, [r7, #8]
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	68f8      	ldr	r0, [r7, #12]
 8012ad8:	f7ff ffc4 	bl	8012a64 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8012adc:	4603      	mov	r3, r0
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d00b      	beq.n	8012afa <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	689b      	ldr	r3, [r3, #8]
 8012ae6:	687a      	ldr	r2, [r7, #4]
 8012ae8:	4619      	mov	r1, r3
 8012aea:	68f8      	ldr	r0, [r7, #12]
 8012aec:	f7ff ffba 	bl	8012a64 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8012af0:	4603      	mov	r3, r0
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d001      	beq.n	8012afa <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8012af6:	2301      	movs	r3, #1
 8012af8:	e000      	b.n	8012afc <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 8012afa:	2300      	movs	r3, #0
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3710      	adds	r7, #16
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}

08012b04 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 8012b04:	b590      	push	{r4, r7, lr}
 8012b06:	b083      	sub	sp, #12
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
 8012b0c:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	339c      	adds	r3, #156	; 0x9c
 8012b14:	681c      	ldr	r4, [r3, #0]
 8012b16:	f001 f8b1 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	6839      	ldr	r1, [r7, #0]
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8012b24:	bf00      	nop
 8012b26:	370c      	adds	r7, #12
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd90      	pop	{r4, r7, pc}

08012b2c <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b084      	sub	sp, #16
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	60f8      	str	r0, [r7, #12]
 8012b34:	60b9      	str	r1, [r7, #8]
 8012b36:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	2201      	movs	r2, #1
 8012b3c:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8012b3e:	68f8      	ldr	r0, [r7, #12]
 8012b40:	f001 f872 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 8012b44:	4603      	mov	r3, r0
 8012b46:	681a      	ldr	r2, [r3, #0]
 8012b48:	3234      	adds	r2, #52	; 0x34
 8012b4a:	6812      	ldr	r2, [r2, #0]
 8012b4c:	68b9      	ldr	r1, [r7, #8]
 8012b4e:	4618      	mov	r0, r3
 8012b50:	4790      	blx	r2
    terminator.exitCurrentTest();
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8012b5c:	bf00      	nop
 8012b5e:	3710      	adds	r7, #16
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}

08012b64 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b082      	sub	sp, #8
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	6838      	ldr	r0, [r7, #0]
 8012b76:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8012b78:	bf00      	nop
 8012b7a:	3708      	adds	r7, #8
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}

08012b80 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012b80:	b590      	push	{r4, r7, lr}
 8012b82:	b09d      	sub	sp, #116	; 0x74
 8012b84:	af04      	add	r7, sp, #16
 8012b86:	60f8      	str	r0, [r7, #12]
 8012b88:	607a      	str	r2, [r7, #4]
 8012b8a:	603b      	str	r3, [r7, #0]
 8012b8c:	460b      	mov	r3, r1
 8012b8e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8012b90:	68f8      	ldr	r0, [r7, #12]
 8012b92:	f001 f849 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 8012b96:	4603      	mov	r3, r0
 8012b98:	681a      	ldr	r2, [r3, #0]
 8012b9a:	3228      	adds	r2, #40	; 0x28
 8012b9c:	6812      	ldr	r2, [r2, #0]
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	4790      	blx	r2
    if (!condition)
 8012ba2:	7afb      	ldrb	r3, [r7, #11]
 8012ba4:	f083 0301 	eor.w	r3, r3, #1
 8012ba8:	b2db      	uxtb	r3, r3
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d03f      	beq.n	8012c2e <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	339c      	adds	r3, #156	; 0x9c
 8012bb4:	681c      	ldr	r4, [r3, #0]
 8012bb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012bba:	6879      	ldr	r1, [r7, #4]
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7f9 fc6a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8012bc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012bc6:	6839      	ldr	r1, [r7, #0]
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7f9 fc64 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8012bce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012bd2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7f9 fc5e 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8012bda:	f107 0014 	add.w	r0, r7, #20
 8012bde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012be2:	9302      	str	r3, [sp, #8]
 8012be4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012be8:	9301      	str	r3, [sp, #4]
 8012bea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012bee:	9300      	str	r3, [sp, #0]
 8012bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012bf2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012bf4:	68f9      	ldr	r1, [r7, #12]
 8012bf6:	f7fb ff6b 	bl	800ead0 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8012bfa:	f107 0314 	add.w	r3, r7, #20
 8012bfe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012c00:	4619      	mov	r1, r3
 8012c02:	68f8      	ldr	r0, [r7, #12]
 8012c04:	47a0      	blx	r4
 8012c06:	f107 0314 	add.w	r3, r7, #20
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f7fc fdce 	bl	800f7ac <_ZN12CheckFailureD1Ev>
 8012c10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7f9 fff6 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8012c1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7f9 fff1 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8012c24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f7f9 ffec 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 8012c2e:	bf00      	nop
 8012c30:	3764      	adds	r7, #100	; 0x64
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd90      	pop	{r4, r7, pc}

08012c36 <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012c36:	b590      	push	{r4, r7, lr}
 8012c38:	b097      	sub	sp, #92	; 0x5c
 8012c3a:	af02      	add	r7, sp, #8
 8012c3c:	60f8      	str	r0, [r7, #12]
 8012c3e:	60b9      	str	r1, [r7, #8]
 8012c40:	607a      	str	r2, [r7, #4]
 8012c42:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012c44:	68f8      	ldr	r0, [r7, #12]
 8012c46:	f000 ffef 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	681a      	ldr	r2, [r3, #0]
 8012c4e:	3228      	adds	r2, #40	; 0x28
 8012c50:	6812      	ldr	r2, [r2, #0]
 8012c52:	4618      	mov	r0, r3
 8012c54:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	339c      	adds	r3, #156	; 0x9c
 8012c5c:	681c      	ldr	r4, [r3, #0]
 8012c5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c62:	68b9      	ldr	r1, [r7, #8]
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7f9 fc16 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8012c6a:	f107 0014 	add.w	r0, r7, #20
 8012c6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c72:	9300      	str	r3, [sp, #0]
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	687a      	ldr	r2, [r7, #4]
 8012c78:	68f9      	ldr	r1, [r7, #12]
 8012c7a:	f7fb ff71 	bl	800eb60 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8012c7e:	f107 0314 	add.w	r3, r7, #20
 8012c82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012c84:	4619      	mov	r1, r3
 8012c86:	68f8      	ldr	r0, [r7, #12]
 8012c88:	47a0      	blx	r4
 8012c8a:	f107 0314 	add.w	r3, r7, #20
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f7f7 fc16 	bl	800a4c0 <_ZN11FailFailureD1Ev>
 8012c94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f7f9 ffb4 	bl	800cc06 <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 8012c9e:	bf00      	nop
 8012ca0:	3754      	adds	r7, #84	; 0x54
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bd90      	pop	{r4, r7, pc}

08012ca6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012ca6:	b590      	push	{r4, r7, lr}
 8012ca8:	b0a7      	sub	sp, #156	; 0x9c
 8012caa:	af04      	add	r7, sp, #16
 8012cac:	60f8      	str	r0, [r7, #12]
 8012cae:	60b9      	str	r1, [r7, #8]
 8012cb0:	607a      	str	r2, [r7, #4]
 8012cb2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012cb4:	68f8      	ldr	r0, [r7, #12]
 8012cb6:	f000 ffb7 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	681a      	ldr	r2, [r3, #0]
 8012cbe:	3228      	adds	r2, #40	; 0x28
 8012cc0:	6812      	ldr	r2, [r2, #0]
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d102      	bne.n	8012cd2 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d068      	beq.n	8012da4 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d002      	beq.n	8012cde <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d12a      	bne.n	8012d34 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	339c      	adds	r3, #156	; 0x9c
 8012ce4:	681c      	ldr	r4, [r3, #0]
 8012ce6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012cea:	6839      	ldr	r1, [r7, #0]
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7f9 fbd2 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8012cf2:	f107 0010 	add.w	r0, r7, #16
 8012cf6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012cfa:	9302      	str	r3, [sp, #8]
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	9301      	str	r3, [sp, #4]
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	9300      	str	r3, [sp, #0]
 8012d04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012d08:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012d0c:	68f9      	ldr	r1, [r7, #12]
 8012d0e:	f7fc f9ad 	bl	800f06c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012d12:	f107 0310 	add.w	r3, r7, #16
 8012d16:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8012d1a:	4619      	mov	r1, r3
 8012d1c:	68f8      	ldr	r0, [r7, #12]
 8012d1e:	47a0      	blx	r4
 8012d20:	f107 0310 	add.w	r3, r7, #16
 8012d24:	4618      	mov	r0, r3
 8012d26:	f7fc fcb9 	bl	800f69c <_ZN18StringEqualFailureD1Ev>
 8012d2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f7f9 ff69 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8012d34:	6879      	ldr	r1, [r7, #4]
 8012d36:	68b8      	ldr	r0, [r7, #8]
 8012d38:	f7f9 f9ea 	bl	800c110 <_ZN12SimpleString6StrCmpEPKcS1_>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	bf14      	ite	ne
 8012d42:	2301      	movne	r3, #1
 8012d44:	2300      	moveq	r3, #0
 8012d46:	b2db      	uxtb	r3, r3
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d02c      	beq.n	8012da6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	339c      	adds	r3, #156	; 0x9c
 8012d52:	681c      	ldr	r4, [r3, #0]
 8012d54:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012d58:	6839      	ldr	r1, [r7, #0]
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f7f9 fb9b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8012d60:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8012d64:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012d68:	9302      	str	r3, [sp, #8]
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	9301      	str	r3, [sp, #4]
 8012d6e:	68bb      	ldr	r3, [r7, #8]
 8012d70:	9300      	str	r3, [sp, #0]
 8012d72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012d76:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012d7a:	68f9      	ldr	r1, [r7, #12]
 8012d7c:	f7fc f976 	bl	800f06c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012d80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012d84:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8012d88:	4619      	mov	r1, r3
 8012d8a:	68f8      	ldr	r0, [r7, #12]
 8012d8c:	47a0      	blx	r4
 8012d8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012d92:	4618      	mov	r0, r3
 8012d94:	f7fc fc82 	bl	800f69c <_ZN18StringEqualFailureD1Ev>
 8012d98:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7f9 ff32 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8012da2:	e000      	b.n	8012da6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012da4:	bf00      	nop
}
 8012da6:	378c      	adds	r7, #140	; 0x8c
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd90      	pop	{r4, r7, pc}

08012dac <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012dac:	b590      	push	{r4, r7, lr}
 8012dae:	b0a7      	sub	sp, #156	; 0x9c
 8012db0:	af04      	add	r7, sp, #16
 8012db2:	60f8      	str	r0, [r7, #12]
 8012db4:	60b9      	str	r1, [r7, #8]
 8012db6:	607a      	str	r2, [r7, #4]
 8012db8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012dba:	68f8      	ldr	r0, [r7, #12]
 8012dbc:	f000 ff34 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	681a      	ldr	r2, [r3, #0]
 8012dc4:	3228      	adds	r2, #40	; 0x28
 8012dc6:	6812      	ldr	r2, [r2, #0]
 8012dc8:	4618      	mov	r0, r3
 8012dca:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d102      	bne.n	8012dd8 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d06b      	beq.n	8012eb0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d002      	beq.n	8012de4 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 8012dde:	68bb      	ldr	r3, [r7, #8]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d12b      	bne.n	8012e3c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	339c      	adds	r3, #156	; 0x9c
 8012dea:	681c      	ldr	r4, [r3, #0]
 8012dec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012df0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012df4:	4618      	mov	r0, r3
 8012df6:	f7f9 fb4e 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8012dfa:	f107 0010 	add.w	r0, r7, #16
 8012dfe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012e02:	9302      	str	r3, [sp, #8]
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	9301      	str	r3, [sp, #4]
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	9300      	str	r3, [sp, #0]
 8012e0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012e10:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012e14:	68f9      	ldr	r1, [r7, #12]
 8012e16:	f7fc f929 	bl	800f06c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012e1a:	f107 0310 	add.w	r3, r7, #16
 8012e1e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8012e22:	4619      	mov	r1, r3
 8012e24:	68f8      	ldr	r0, [r7, #12]
 8012e26:	47a0      	blx	r4
 8012e28:	f107 0310 	add.w	r3, r7, #16
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7fc fc35 	bl	800f69c <_ZN18StringEqualFailureD1Ev>
 8012e32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012e36:	4618      	mov	r0, r3
 8012e38:	f7f9 fee5 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8012e3c:	683a      	ldr	r2, [r7, #0]
 8012e3e:	6879      	ldr	r1, [r7, #4]
 8012e40:	68b8      	ldr	r0, [r7, #8]
 8012e42:	f7f9 f9a4 	bl	800c18e <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8012e46:	4603      	mov	r3, r0
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	bf14      	ite	ne
 8012e4c:	2301      	movne	r3, #1
 8012e4e:	2300      	moveq	r3, #0
 8012e50:	b2db      	uxtb	r3, r3
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d02d      	beq.n	8012eb2 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	339c      	adds	r3, #156	; 0x9c
 8012e5c:	681c      	ldr	r4, [r3, #0]
 8012e5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012e62:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7f9 fb15 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8012e6c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8012e70:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012e74:	9302      	str	r3, [sp, #8]
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	9301      	str	r3, [sp, #4]
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	9300      	str	r3, [sp, #0]
 8012e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012e82:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012e86:	68f9      	ldr	r1, [r7, #12]
 8012e88:	f7fc f8f0 	bl	800f06c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012e8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012e90:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8012e94:	4619      	mov	r1, r3
 8012e96:	68f8      	ldr	r0, [r7, #12]
 8012e98:	47a0      	blx	r4
 8012e9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f7fc fbfc 	bl	800f69c <_ZN18StringEqualFailureD1Ev>
 8012ea4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7f9 feac 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8012eae:	e000      	b.n	8012eb2 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012eb0:	bf00      	nop
}
 8012eb2:	378c      	adds	r7, #140	; 0x8c
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd90      	pop	{r4, r7, pc}

08012eb8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8012eb8:	b590      	push	{r4, r7, lr}
 8012eba:	b0ab      	sub	sp, #172	; 0xac
 8012ebc:	af04      	add	r7, sp, #16
 8012ebe:	60f8      	str	r0, [r7, #12]
 8012ec0:	60b9      	str	r1, [r7, #8]
 8012ec2:	607a      	str	r2, [r7, #4]
 8012ec4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012ec6:	68f8      	ldr	r0, [r7, #12]
 8012ec8:	f000 feae 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	681a      	ldr	r2, [r3, #0]
 8012ed0:	3228      	adds	r2, #40	; 0x28
 8012ed2:	6812      	ldr	r2, [r2, #0]
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d102      	bne.n	8012ee4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d07c      	beq.n	8012fde <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d002      	beq.n	8012ef0 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d128      	bne.n	8012f42 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	3398      	adds	r3, #152	; 0x98
 8012ef6:	681c      	ldr	r4, [r3, #0]
 8012ef8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012efc:	6839      	ldr	r1, [r7, #0]
 8012efe:	4618      	mov	r0, r3
 8012f00:	f7f9 fac9 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8012f04:	f107 0010 	add.w	r0, r7, #16
 8012f08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012f0c:	9302      	str	r3, [sp, #8]
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	9301      	str	r3, [sp, #4]
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	9300      	str	r3, [sp, #0]
 8012f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012f1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012f1e:	68f9      	ldr	r1, [r7, #12]
 8012f20:	f7fc f948 	bl	800f1b4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012f24:	f107 0310 	add.w	r3, r7, #16
 8012f28:	4619      	mov	r1, r3
 8012f2a:	68f8      	ldr	r0, [r7, #12]
 8012f2c:	47a0      	blx	r4
 8012f2e:	f107 0310 	add.w	r3, r7, #16
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7fc fb90 	bl	800f658 <_ZN24StringEqualNoCaseFailureD1Ev>
 8012f38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f7f9 fe62 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 8012f42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012f46:	68b9      	ldr	r1, [r7, #8]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f7f9 faa4 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8012f4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012f52:	6879      	ldr	r1, [r7, #4]
 8012f54:	4618      	mov	r0, r3
 8012f56:	f7f9 fa9e 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8012f5a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8012f5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012f62:	4611      	mov	r1, r2
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7f9 fe75 	bl	800cc54 <_ZNK12SimpleString12equalsNoCaseERKS_>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	f083 0301 	eor.w	r3, r3, #1
 8012f70:	b2dc      	uxtb	r4, r3
 8012f72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012f76:	4618      	mov	r0, r3
 8012f78:	f7f9 fe45 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8012f7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012f80:	4618      	mov	r0, r3
 8012f82:	f7f9 fe40 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8012f86:	2c00      	cmp	r4, #0
 8012f88:	d02a      	beq.n	8012fe0 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	3398      	adds	r3, #152	; 0x98
 8012f90:	681c      	ldr	r4, [r3, #0]
 8012f92:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8012f96:	6839      	ldr	r1, [r7, #0]
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f7f9 fa7c 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8012f9e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8012fa2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8012fa6:	9302      	str	r3, [sp, #8]
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	9301      	str	r3, [sp, #4]
 8012fac:	68bb      	ldr	r3, [r7, #8]
 8012fae:	9300      	str	r3, [sp, #0]
 8012fb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012fb4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012fb8:	68f9      	ldr	r1, [r7, #12]
 8012fba:	f7fc f8fb 	bl	800f1b4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012fbe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012fc2:	4619      	mov	r1, r3
 8012fc4:	68f8      	ldr	r0, [r7, #12]
 8012fc6:	47a0      	blx	r4
 8012fc8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7fc fb43 	bl	800f658 <_ZN24StringEqualNoCaseFailureD1Ev>
 8012fd2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7f9 fe15 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8012fdc:	e000      	b.n	8012fe0 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012fde:	bf00      	nop
}
 8012fe0:	379c      	adds	r7, #156	; 0x9c
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd90      	pop	{r4, r7, pc}

08012fe6 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8012fe6:	b590      	push	{r4, r7, lr}
 8012fe8:	b0b3      	sub	sp, #204	; 0xcc
 8012fea:	af04      	add	r7, sp, #16
 8012fec:	60f8      	str	r0, [r7, #12]
 8012fee:	60b9      	str	r1, [r7, #8]
 8012ff0:	607a      	str	r2, [r7, #4]
 8012ff2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012ff4:	68f8      	ldr	r0, [r7, #12]
 8012ff6:	f000 fe17 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	3228      	adds	r2, #40	; 0x28
 8013000:	6812      	ldr	r2, [r2, #0]
 8013002:	4618      	mov	r0, r3
 8013004:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d103      	bne.n	8013014 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	2b00      	cmp	r3, #0
 8013010:	f000 80ad 	beq.w	801316e <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d002      	beq.n	8013020 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d140      	bne.n	80130a2 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	3398      	adds	r3, #152	; 0x98
 8013026:	681c      	ldr	r4, [r3, #0]
 8013028:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801302c:	68b9      	ldr	r1, [r7, #8]
 801302e:	4618      	mov	r0, r3
 8013030:	f7f9 fa31 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8013034:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013038:	6879      	ldr	r1, [r7, #4]
 801303a:	4618      	mov	r0, r3
 801303c:	f7f9 fa2b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8013040:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013044:	6839      	ldr	r1, [r7, #0]
 8013046:	4618      	mov	r0, r3
 8013048:	f7f9 fa25 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801304c:	f107 0010 	add.w	r0, r7, #16
 8013050:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013054:	9302      	str	r3, [sp, #8]
 8013056:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801305a:	9301      	str	r3, [sp, #4]
 801305c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013060:	9300      	str	r3, [sp, #0]
 8013062:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013066:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801306a:	68f9      	ldr	r1, [r7, #12]
 801306c:	f7fb fce6 	bl	800ea3c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013070:	f107 0310 	add.w	r3, r7, #16
 8013074:	4619      	mov	r1, r3
 8013076:	68f8      	ldr	r0, [r7, #12]
 8013078:	47a0      	blx	r4
 801307a:	f107 0310 	add.w	r3, r7, #16
 801307e:	4618      	mov	r0, r3
 8013080:	f7fc fbb6 	bl	800f7f0 <_ZN15ContainsFailureD1Ev>
 8013084:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013088:	4618      	mov	r0, r3
 801308a:	f7f9 fdbc 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801308e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013092:	4618      	mov	r0, r3
 8013094:	f7f9 fdb7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8013098:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801309c:	4618      	mov	r0, r3
 801309e:	f7f9 fdb2 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 80130a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80130a6:	6879      	ldr	r1, [r7, #4]
 80130a8:	4618      	mov	r0, r3
 80130aa:	f7f9 f9f4 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80130ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80130b2:	68b9      	ldr	r1, [r7, #8]
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7f9 f9ee 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80130ba:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80130be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80130c2:	4611      	mov	r1, r2
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7f9 fa64 	bl	800c592 <_ZNK12SimpleString8containsERKS_>
 80130ca:	4603      	mov	r3, r0
 80130cc:	f083 0301 	eor.w	r3, r3, #1
 80130d0:	b2dc      	uxtb	r4, r3
 80130d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7f9 fd95 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80130dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7f9 fd90 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80130e6:	2c00      	cmp	r4, #0
 80130e8:	d042      	beq.n	8013170 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	3398      	adds	r3, #152	; 0x98
 80130f0:	681c      	ldr	r4, [r3, #0]
 80130f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80130f6:	68b9      	ldr	r1, [r7, #8]
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7f9 f9cc 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80130fe:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013102:	6879      	ldr	r1, [r7, #4]
 8013104:	4618      	mov	r0, r3
 8013106:	f7f9 f9c6 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801310a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801310e:	6839      	ldr	r1, [r7, #0]
 8013110:	4618      	mov	r0, r3
 8013112:	f7f9 f9c0 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8013116:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801311a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801311e:	9302      	str	r3, [sp, #8]
 8013120:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013124:	9301      	str	r3, [sp, #4]
 8013126:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801312a:	9300      	str	r3, [sp, #0]
 801312c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013130:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013134:	68f9      	ldr	r1, [r7, #12]
 8013136:	f7fb fc81 	bl	800ea3c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801313a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801313e:	4619      	mov	r1, r3
 8013140:	68f8      	ldr	r0, [r7, #12]
 8013142:	47a0      	blx	r4
 8013144:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013148:	4618      	mov	r0, r3
 801314a:	f7fc fb51 	bl	800f7f0 <_ZN15ContainsFailureD1Ev>
 801314e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013152:	4618      	mov	r0, r3
 8013154:	f7f9 fd57 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8013158:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801315c:	4618      	mov	r0, r3
 801315e:	f7f9 fd52 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8013162:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013166:	4618      	mov	r0, r3
 8013168:	f7f9 fd4d 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801316c:	e000      	b.n	8013170 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801316e:	bf00      	nop
}
 8013170:	37bc      	adds	r7, #188	; 0xbc
 8013172:	46bd      	mov	sp, r7
 8013174:	bd90      	pop	{r4, r7, pc}

08013176 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8013176:	b590      	push	{r4, r7, lr}
 8013178:	b0b3      	sub	sp, #204	; 0xcc
 801317a:	af04      	add	r7, sp, #16
 801317c:	60f8      	str	r0, [r7, #12]
 801317e:	60b9      	str	r1, [r7, #8]
 8013180:	607a      	str	r2, [r7, #4]
 8013182:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013184:	68f8      	ldr	r0, [r7, #12]
 8013186:	f000 fd4f 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 801318a:	4603      	mov	r3, r0
 801318c:	681a      	ldr	r2, [r3, #0]
 801318e:	3228      	adds	r2, #40	; 0x28
 8013190:	6812      	ldr	r2, [r2, #0]
 8013192:	4618      	mov	r0, r3
 8013194:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d103      	bne.n	80131a4 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 801319c:	68bb      	ldr	r3, [r7, #8]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	f000 80ad 	beq.w	80132fe <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d002      	beq.n	80131b0 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d140      	bne.n	8013232 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	3398      	adds	r3, #152	; 0x98
 80131b6:	681c      	ldr	r4, [r3, #0]
 80131b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80131bc:	68b9      	ldr	r1, [r7, #8]
 80131be:	4618      	mov	r0, r3
 80131c0:	f7f9 f969 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80131c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80131c8:	6879      	ldr	r1, [r7, #4]
 80131ca:	4618      	mov	r0, r3
 80131cc:	f7f9 f963 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80131d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80131d4:	6839      	ldr	r1, [r7, #0]
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7f9 f95d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80131dc:	f107 0010 	add.w	r0, r7, #16
 80131e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80131e4:	9302      	str	r3, [sp, #8]
 80131e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80131ea:	9301      	str	r3, [sp, #4]
 80131ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80131f0:	9300      	str	r3, [sp, #0]
 80131f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80131f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80131fa:	68f9      	ldr	r1, [r7, #12]
 80131fc:	f7fb fc1e 	bl	800ea3c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013200:	f107 0310 	add.w	r3, r7, #16
 8013204:	4619      	mov	r1, r3
 8013206:	68f8      	ldr	r0, [r7, #12]
 8013208:	47a0      	blx	r4
 801320a:	f107 0310 	add.w	r3, r7, #16
 801320e:	4618      	mov	r0, r3
 8013210:	f7fc faee 	bl	800f7f0 <_ZN15ContainsFailureD1Ev>
 8013214:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013218:	4618      	mov	r0, r3
 801321a:	f7f9 fcf4 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801321e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013222:	4618      	mov	r0, r3
 8013224:	f7f9 fcef 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8013228:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801322c:	4618      	mov	r0, r3
 801322e:	f7f9 fcea 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 8013232:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013236:	6879      	ldr	r1, [r7, #4]
 8013238:	4618      	mov	r0, r3
 801323a:	f7f9 f92c 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801323e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013242:	68b9      	ldr	r1, [r7, #8]
 8013244:	4618      	mov	r0, r3
 8013246:	f7f9 f926 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801324a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801324e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013252:	4611      	mov	r1, r2
 8013254:	4618      	mov	r0, r3
 8013256:	f7f9 f9b7 	bl	800c5c8 <_ZNK12SimpleString14containsNoCaseERKS_>
 801325a:	4603      	mov	r3, r0
 801325c:	f083 0301 	eor.w	r3, r3, #1
 8013260:	b2dc      	uxtb	r4, r3
 8013262:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013266:	4618      	mov	r0, r3
 8013268:	f7f9 fccd 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801326c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013270:	4618      	mov	r0, r3
 8013272:	f7f9 fcc8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8013276:	2c00      	cmp	r4, #0
 8013278:	d042      	beq.n	8013300 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	3398      	adds	r3, #152	; 0x98
 8013280:	681c      	ldr	r4, [r3, #0]
 8013282:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013286:	68b9      	ldr	r1, [r7, #8]
 8013288:	4618      	mov	r0, r3
 801328a:	f7f9 f904 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801328e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013292:	6879      	ldr	r1, [r7, #4]
 8013294:	4618      	mov	r0, r3
 8013296:	f7f9 f8fe 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801329a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801329e:	6839      	ldr	r1, [r7, #0]
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7f9 f8f8 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80132a6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80132aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80132ae:	9302      	str	r3, [sp, #8]
 80132b0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80132b4:	9301      	str	r3, [sp, #4]
 80132b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80132ba:	9300      	str	r3, [sp, #0]
 80132bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80132c0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80132c4:	68f9      	ldr	r1, [r7, #12]
 80132c6:	f7fb fbb9 	bl	800ea3c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80132ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80132ce:	4619      	mov	r1, r3
 80132d0:	68f8      	ldr	r0, [r7, #12]
 80132d2:	47a0      	blx	r4
 80132d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80132d8:	4618      	mov	r0, r3
 80132da:	f7fc fa89 	bl	800f7f0 <_ZN15ContainsFailureD1Ev>
 80132de:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7f9 fc8f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80132e8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7f9 fc8a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80132f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80132f6:	4618      	mov	r0, r3
 80132f8:	f7f9 fc85 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80132fc:	e000      	b.n	8013300 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80132fe:	bf00      	nop
}
 8013300:	37bc      	adds	r7, #188	; 0xbc
 8013302:	46bd      	mov	sp, r7
 8013304:	bd90      	pop	{r4, r7, pc}

08013306 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013306:	b590      	push	{r4, r7, lr}
 8013308:	b099      	sub	sp, #100	; 0x64
 801330a:	af04      	add	r7, sp, #16
 801330c:	60f8      	str	r0, [r7, #12]
 801330e:	60b9      	str	r1, [r7, #8]
 8013310:	607a      	str	r2, [r7, #4]
 8013312:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013314:	68f8      	ldr	r0, [r7, #12]
 8013316:	f000 fc87 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 801331a:	4603      	mov	r3, r0
 801331c:	681a      	ldr	r2, [r3, #0]
 801331e:	3228      	adds	r2, #40	; 0x28
 8013320:	6812      	ldr	r2, [r2, #0]
 8013322:	4618      	mov	r0, r3
 8013324:	4790      	blx	r2
    if (expected != actual)
 8013326:	68ba      	ldr	r2, [r7, #8]
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	429a      	cmp	r2, r3
 801332c:	d027      	beq.n	801337e <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	339c      	adds	r3, #156	; 0x9c
 8013334:	681c      	ldr	r4, [r3, #0]
 8013336:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801333a:	6839      	ldr	r1, [r7, #0]
 801333c:	4618      	mov	r0, r3
 801333e:	f7f9 f8aa 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8013342:	f107 0014 	add.w	r0, r7, #20
 8013346:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801334a:	9302      	str	r3, [sp, #8]
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	9301      	str	r3, [sp, #4]
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	9300      	str	r3, [sp, #0]
 8013354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013356:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013358:	68f9      	ldr	r1, [r7, #12]
 801335a:	f7fb fc1f 	bl	800eb9c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 801335e:	f107 0314 	add.w	r3, r7, #20
 8013362:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013364:	4619      	mov	r1, r3
 8013366:	68f8      	ldr	r0, [r7, #12]
 8013368:	47a0      	blx	r4
 801336a:	f107 0314 	add.w	r3, r7, #20
 801336e:	4618      	mov	r0, r3
 8013370:	f7fc f9fa 	bl	800f768 <_ZN17LongsEqualFailureD1Ev>
 8013374:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013378:	4618      	mov	r0, r3
 801337a:	f7f9 fc44 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 801337e:	bf00      	nop
 8013380:	3754      	adds	r7, #84	; 0x54
 8013382:	46bd      	mov	sp, r7
 8013384:	bd90      	pop	{r4, r7, pc}

08013386 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013386:	b590      	push	{r4, r7, lr}
 8013388:	b099      	sub	sp, #100	; 0x64
 801338a:	af04      	add	r7, sp, #16
 801338c:	60f8      	str	r0, [r7, #12]
 801338e:	60b9      	str	r1, [r7, #8]
 8013390:	607a      	str	r2, [r7, #4]
 8013392:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013394:	68f8      	ldr	r0, [r7, #12]
 8013396:	f000 fc47 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 801339a:	4603      	mov	r3, r0
 801339c:	681a      	ldr	r2, [r3, #0]
 801339e:	3228      	adds	r2, #40	; 0x28
 80133a0:	6812      	ldr	r2, [r2, #0]
 80133a2:	4618      	mov	r0, r3
 80133a4:	4790      	blx	r2
    if (expected != actual)
 80133a6:	68ba      	ldr	r2, [r7, #8]
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d027      	beq.n	80133fe <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	339c      	adds	r3, #156	; 0x9c
 80133b4:	681c      	ldr	r4, [r3, #0]
 80133b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80133ba:	6839      	ldr	r1, [r7, #0]
 80133bc:	4618      	mov	r0, r3
 80133be:	f7f9 f86a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80133c2:	f107 0014 	add.w	r0, r7, #20
 80133c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80133ca:	9302      	str	r3, [sp, #8]
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	9301      	str	r3, [sp, #4]
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	9300      	str	r3, [sp, #0]
 80133d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80133d8:	68f9      	ldr	r1, [r7, #12]
 80133da:	f7fb fcab 	bl	800ed34 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 80133de:	f107 0314 	add.w	r3, r7, #20
 80133e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80133e4:	4619      	mov	r1, r3
 80133e6:	68f8      	ldr	r0, [r7, #12]
 80133e8:	47a0      	blx	r4
 80133ea:	f107 0314 	add.w	r3, r7, #20
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7fc f998 	bl	800f724 <_ZN25UnsignedLongsEqualFailureD1Ev>
 80133f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7f9 fc04 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 80133fe:	bf00      	nop
 8013400:	3754      	adds	r7, #84	; 0x54
 8013402:	46bd      	mov	sp, r7
 8013404:	bd90      	pop	{r4, r7, pc}
	...

08013408 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013408:	b082      	sub	sp, #8
 801340a:	b590      	push	{r4, r7, lr}
 801340c:	b099      	sub	sp, #100	; 0x64
 801340e:	af02      	add	r7, sp, #8
 8013410:	60f8      	str	r0, [r7, #12]
 8013412:	1d38      	adds	r0, r7, #4
 8013414:	e880 0006 	stmia.w	r0, {r1, r2}
 8013418:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 801341a:	68f8      	ldr	r0, [r7, #12]
 801341c:	f000 fc04 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 8013420:	4603      	mov	r3, r0
 8013422:	681a      	ldr	r2, [r3, #0]
 8013424:	3228      	adds	r2, #40	; 0x28
 8013426:	6812      	ldr	r2, [r2, #0]
 8013428:	4618      	mov	r0, r3
 801342a:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	339c      	adds	r3, #156	; 0x9c
 8013432:	681c      	ldr	r4, [r3, #0]
 8013434:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013438:	4919      	ldr	r1, [pc, #100]	; (80134a0 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 801343a:	4618      	mov	r0, r3
 801343c:	f7f9 f82b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8013440:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013444:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013446:	4618      	mov	r0, r3
 8013448:	f7f9 f825 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801344c:	f107 0014 	add.w	r0, r7, #20
 8013450:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013454:	9301      	str	r3, [sp, #4]
 8013456:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801345a:	9300      	str	r3, [sp, #0]
 801345c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801345e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013460:	68f9      	ldr	r1, [r7, #12]
 8013462:	f7fc f84d 	bl	800f500 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8013466:	f107 0314 	add.w	r3, r7, #20
 801346a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801346e:	4619      	mov	r1, r3
 8013470:	68f8      	ldr	r0, [r7, #12]
 8013472:	47a0      	blx	r4
 8013474:	f107 0314 	add.w	r3, r7, #20
 8013478:	4618      	mov	r0, r3
 801347a:	f7fc f887 	bl	800f58c <_ZN25FeatureUnsupportedFailureD1Ev>
 801347e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013482:	4618      	mov	r0, r3
 8013484:	f7f9 fbbf 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8013488:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801348c:	4618      	mov	r0, r3
 801348e:	f7f9 fbba 	bl	800cc06 <_ZN12SimpleStringD1Ev>
#endif
}
 8013492:	bf00      	nop
 8013494:	375c      	adds	r7, #92	; 0x5c
 8013496:	46bd      	mov	sp, r7
 8013498:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801349c:	b002      	add	sp, #8
 801349e:	4770      	bx	lr
 80134a0:	08024a10 	.word	0x08024a10

080134a4 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80134a4:	b082      	sub	sp, #8
 80134a6:	b590      	push	{r4, r7, lr}
 80134a8:	b099      	sub	sp, #100	; 0x64
 80134aa:	af02      	add	r7, sp, #8
 80134ac:	60f8      	str	r0, [r7, #12]
 80134ae:	1d38      	adds	r0, r7, #4
 80134b0:	e880 0006 	stmia.w	r0, {r1, r2}
 80134b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 80134b6:	68f8      	ldr	r0, [r7, #12]
 80134b8:	f000 fbb6 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 80134bc:	4603      	mov	r3, r0
 80134be:	681a      	ldr	r2, [r3, #0]
 80134c0:	3228      	adds	r2, #40	; 0x28
 80134c2:	6812      	ldr	r2, [r2, #0]
 80134c4:	4618      	mov	r0, r3
 80134c6:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	339c      	adds	r3, #156	; 0x9c
 80134ce:	681c      	ldr	r4, [r3, #0]
 80134d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134d4:	4919      	ldr	r1, [pc, #100]	; (801353c <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 80134d6:	4618      	mov	r0, r3
 80134d8:	f7f8 ffdd 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80134dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80134e0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7f8 ffd7 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80134e8:	f107 0014 	add.w	r0, r7, #20
 80134ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80134f0:	9301      	str	r3, [sp, #4]
 80134f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134f6:	9300      	str	r3, [sp, #0]
 80134f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80134fa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80134fc:	68f9      	ldr	r1, [r7, #12]
 80134fe:	f7fb ffff 	bl	800f500 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8013502:	f107 0314 	add.w	r3, r7, #20
 8013506:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801350a:	4619      	mov	r1, r3
 801350c:	68f8      	ldr	r0, [r7, #12]
 801350e:	47a0      	blx	r4
 8013510:	f107 0314 	add.w	r3, r7, #20
 8013514:	4618      	mov	r0, r3
 8013516:	f7fc f839 	bl	800f58c <_ZN25FeatureUnsupportedFailureD1Ev>
 801351a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801351e:	4618      	mov	r0, r3
 8013520:	f7f9 fb71 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8013524:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013528:	4618      	mov	r0, r3
 801352a:	f7f9 fb6c 	bl	800cc06 <_ZN12SimpleStringD1Ev>
#endif
}
 801352e:	bf00      	nop
 8013530:	375c      	adds	r7, #92	; 0x5c
 8013532:	46bd      	mov	sp, r7
 8013534:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8013538:	b002      	add	sp, #8
 801353a:	4770      	bx	lr
 801353c:	08024a10 	.word	0x08024a10

08013540 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013540:	b590      	push	{r4, r7, lr}
 8013542:	b099      	sub	sp, #100	; 0x64
 8013544:	af04      	add	r7, sp, #16
 8013546:	60f8      	str	r0, [r7, #12]
 8013548:	607b      	str	r3, [r7, #4]
 801354a:	460b      	mov	r3, r1
 801354c:	72fb      	strb	r3, [r7, #11]
 801354e:	4613      	mov	r3, r2
 8013550:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 8013552:	68f8      	ldr	r0, [r7, #12]
 8013554:	f000 fb68 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 8013558:	4603      	mov	r3, r0
 801355a:	681a      	ldr	r2, [r3, #0]
 801355c:	3228      	adds	r2, #40	; 0x28
 801355e:	6812      	ldr	r2, [r2, #0]
 8013560:	4618      	mov	r0, r3
 8013562:	4790      	blx	r2
    if (expected != actual)
 8013564:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8013568:	f997 300a 	ldrsb.w	r3, [r7, #10]
 801356c:	429a      	cmp	r2, r3
 801356e:	d029      	beq.n	80135c4 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	339c      	adds	r3, #156	; 0x9c
 8013576:	681c      	ldr	r4, [r3, #0]
 8013578:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801357c:	6879      	ldr	r1, [r7, #4]
 801357e:	4618      	mov	r0, r3
 8013580:	f7f8 ff89 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8013584:	f107 0014 	add.w	r0, r7, #20
 8013588:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801358c:	9302      	str	r3, [sp, #8]
 801358e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8013592:	9301      	str	r3, [sp, #4]
 8013594:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013598:	9300      	str	r3, [sp, #0]
 801359a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801359c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801359e:	68f9      	ldr	r1, [r7, #12]
 80135a0:	f7fb fc94 	bl	800eecc <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 80135a4:	f107 0314 	add.w	r3, r7, #20
 80135a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80135aa:	4619      	mov	r1, r3
 80135ac:	68f8      	ldr	r0, [r7, #12]
 80135ae:	47a0      	blx	r4
 80135b0:	f107 0314 	add.w	r3, r7, #20
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7fc f893 	bl	800f6e0 <_ZN23SignedBytesEqualFailureD1Ev>
 80135ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80135be:	4618      	mov	r0, r3
 80135c0:	f7f9 fb21 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 80135c4:	bf00      	nop
 80135c6:	3754      	adds	r7, #84	; 0x54
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd90      	pop	{r4, r7, pc}

080135cc <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80135cc:	b590      	push	{r4, r7, lr}
 80135ce:	b09d      	sub	sp, #116	; 0x74
 80135d0:	af04      	add	r7, sp, #16
 80135d2:	60f8      	str	r0, [r7, #12]
 80135d4:	60b9      	str	r1, [r7, #8]
 80135d6:	607a      	str	r2, [r7, #4]
 80135d8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80135da:	68f8      	ldr	r0, [r7, #12]
 80135dc:	f000 fb24 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 80135e0:	4603      	mov	r3, r0
 80135e2:	681a      	ldr	r2, [r3, #0]
 80135e4:	3228      	adds	r2, #40	; 0x28
 80135e6:	6812      	ldr	r2, [r2, #0]
 80135e8:	4618      	mov	r0, r3
 80135ea:	4790      	blx	r2
    if (expected != actual)
 80135ec:	68ba      	ldr	r2, [r7, #8]
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d03f      	beq.n	8013674 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	339c      	adds	r3, #156	; 0x9c
 80135fa:	681c      	ldr	r4, [r3, #0]
 80135fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013600:	68b9      	ldr	r1, [r7, #8]
 8013602:	4618      	mov	r0, r3
 8013604:	f7f9 fdea 	bl	800d1dc <_Z10StringFromPKv>
 8013608:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801360c:	6879      	ldr	r1, [r7, #4]
 801360e:	4618      	mov	r0, r3
 8013610:	f7f9 fde4 	bl	800d1dc <_Z10StringFromPKv>
 8013614:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013618:	6839      	ldr	r1, [r7, #0]
 801361a:	4618      	mov	r0, r3
 801361c:	f7f8 ff3b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8013620:	f107 0014 	add.w	r0, r7, #20
 8013624:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013628:	9302      	str	r3, [sp, #8]
 801362a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801362e:	9301      	str	r3, [sp, #4]
 8013630:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013634:	9300      	str	r3, [sp, #0]
 8013636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013638:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801363a:	68f9      	ldr	r1, [r7, #12]
 801363c:	f7fb f814 	bl	800e668 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013640:	f107 0314 	add.w	r3, r7, #20
 8013644:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013646:	4619      	mov	r1, r3
 8013648:	68f8      	ldr	r0, [r7, #12]
 801364a:	47a0      	blx	r4
 801364c:	f107 0314 	add.w	r3, r7, #20
 8013650:	4618      	mov	r0, r3
 8013652:	f7fc f955 	bl	800f900 <_ZN13EqualsFailureD1Ev>
 8013656:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801365a:	4618      	mov	r0, r3
 801365c:	f7f9 fad3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8013660:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013664:	4618      	mov	r0, r3
 8013666:	f7f9 face 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801366a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801366e:	4618      	mov	r0, r3
 8013670:	f7f9 fac9 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 8013674:	bf00      	nop
 8013676:	3764      	adds	r7, #100	; 0x64
 8013678:	46bd      	mov	sp, r7
 801367a:	bd90      	pop	{r4, r7, pc}

0801367c <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801367c:	b590      	push	{r4, r7, lr}
 801367e:	b09d      	sub	sp, #116	; 0x74
 8013680:	af04      	add	r7, sp, #16
 8013682:	60f8      	str	r0, [r7, #12]
 8013684:	60b9      	str	r1, [r7, #8]
 8013686:	607a      	str	r2, [r7, #4]
 8013688:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801368a:	68f8      	ldr	r0, [r7, #12]
 801368c:	f000 facc 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 8013690:	4603      	mov	r3, r0
 8013692:	681a      	ldr	r2, [r3, #0]
 8013694:	3228      	adds	r2, #40	; 0x28
 8013696:	6812      	ldr	r2, [r2, #0]
 8013698:	4618      	mov	r0, r3
 801369a:	4790      	blx	r2
    if (expected != actual)
 801369c:	68ba      	ldr	r2, [r7, #8]
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d03f      	beq.n	8013724 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	339c      	adds	r3, #156	; 0x9c
 80136aa:	681c      	ldr	r4, [r3, #0]
 80136ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80136b0:	68b9      	ldr	r1, [r7, #8]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7f9 fdbc 	bl	800d230 <_Z10StringFromPFvvE>
 80136b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80136bc:	6879      	ldr	r1, [r7, #4]
 80136be:	4618      	mov	r0, r3
 80136c0:	f7f9 fdb6 	bl	800d230 <_Z10StringFromPFvvE>
 80136c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80136c8:	6839      	ldr	r1, [r7, #0]
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7f8 fee3 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80136d0:	f107 0014 	add.w	r0, r7, #20
 80136d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80136d8:	9302      	str	r3, [sp, #8]
 80136da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80136de:	9301      	str	r3, [sp, #4]
 80136e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80136e4:	9300      	str	r3, [sp, #0]
 80136e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80136e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80136ea:	68f9      	ldr	r1, [r7, #12]
 80136ec:	f7fa ffbc 	bl	800e668 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80136f0:	f107 0314 	add.w	r3, r7, #20
 80136f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80136f6:	4619      	mov	r1, r3
 80136f8:	68f8      	ldr	r0, [r7, #12]
 80136fa:	47a0      	blx	r4
 80136fc:	f107 0314 	add.w	r3, r7, #20
 8013700:	4618      	mov	r0, r3
 8013702:	f7fc f8fd 	bl	800f900 <_ZN13EqualsFailureD1Ev>
 8013706:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801370a:	4618      	mov	r0, r3
 801370c:	f7f9 fa7b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8013710:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013714:	4618      	mov	r0, r3
 8013716:	f7f9 fa76 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801371a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801371e:	4618      	mov	r0, r3
 8013720:	f7f9 fa71 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 8013724:	bf00      	nop
 8013726:	3764      	adds	r7, #100	; 0x64
 8013728:	46bd      	mov	sp, r7
 801372a:	bd90      	pop	{r4, r7, pc}

0801372c <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801372c:	b590      	push	{r4, r7, lr}
 801372e:	b09d      	sub	sp, #116	; 0x74
 8013730:	af02      	add	r7, sp, #8
 8013732:	6278      	str	r0, [r7, #36]	; 0x24
 8013734:	ed87 0b06 	vstr	d0, [r7, #24]
 8013738:	ed87 1b04 	vstr	d1, [r7, #16]
 801373c:	ed87 2b02 	vstr	d2, [r7, #8]
 8013740:	6239      	str	r1, [r7, #32]
 8013742:	607a      	str	r2, [r7, #4]
 8013744:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013748:	f000 fa6e 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 801374c:	4603      	mov	r3, r0
 801374e:	681a      	ldr	r2, [r3, #0]
 8013750:	3228      	adds	r2, #40	; 0x28
 8013752:	6812      	ldr	r2, [r2, #0]
 8013754:	4618      	mov	r0, r3
 8013756:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8013758:	ed97 2b02 	vldr	d2, [r7, #8]
 801375c:	ed97 1b04 	vldr	d1, [r7, #16]
 8013760:	ed97 0b06 	vldr	d0, [r7, #24]
 8013764:	f7fe fd4a 	bl	80121fc <_Z13doubles_equalddd>
 8013768:	4603      	mov	r3, r0
 801376a:	f083 0301 	eor.w	r3, r3, #1
 801376e:	b2db      	uxtb	r3, r3
 8013770:	2b00      	cmp	r3, #0
 8013772:	d029      	beq.n	80137c8 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8013774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	339c      	adds	r3, #156	; 0x9c
 801377a:	681c      	ldr	r4, [r3, #0]
 801377c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013780:	6a39      	ldr	r1, [r7, #32]
 8013782:	4618      	mov	r0, r3
 8013784:	f7f8 fe87 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8013788:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801378c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013790:	9300      	str	r3, [sp, #0]
 8013792:	ed97 2b02 	vldr	d2, [r7, #8]
 8013796:	ed97 1b04 	vldr	d1, [r7, #16]
 801379a:	ed97 0b06 	vldr	d0, [r7, #24]
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	687a      	ldr	r2, [r7, #4]
 80137a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80137a4:	f7fa ffa2 	bl	800e6ec <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 80137a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80137ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80137ae:	4619      	mov	r1, r3
 80137b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137b2:	47a0      	blx	r4
 80137b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7fc f87f 	bl	800f8bc <_ZN19DoublesEqualFailureD1Ev>
 80137be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7f9 fa1f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 80137c8:	bf00      	nop
 80137ca:	376c      	adds	r7, #108	; 0x6c
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd90      	pop	{r4, r7, pc}

080137d0 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80137d0:	b590      	push	{r4, r7, lr}
 80137d2:	b0a7      	sub	sp, #156	; 0x9c
 80137d4:	af04      	add	r7, sp, #16
 80137d6:	60f8      	str	r0, [r7, #12]
 80137d8:	60b9      	str	r1, [r7, #8]
 80137da:	607a      	str	r2, [r7, #4]
 80137dc:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80137de:	68f8      	ldr	r0, [r7, #12]
 80137e0:	f000 fa22 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 80137e4:	4603      	mov	r3, r0
 80137e6:	681a      	ldr	r2, [r3, #0]
 80137e8:	3228      	adds	r2, #40	; 0x28
 80137ea:	6812      	ldr	r2, [r2, #0]
 80137ec:	4618      	mov	r0, r3
 80137ee:	4790      	blx	r2
	if (length == 0) return;
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d075      	beq.n	80138e2 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d102      	bne.n	8013802 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 80137fc:	68bb      	ldr	r3, [r7, #8]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d071      	beq.n	80138e6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d002      	beq.n	801380e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 8013808:	68bb      	ldr	r3, [r7, #8]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d12d      	bne.n	801386a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	339c      	adds	r3, #156	; 0x9c
 8013814:	681c      	ldr	r4, [r3, #0]
 8013816:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801381a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801381e:	4618      	mov	r0, r3
 8013820:	f7f8 fe39 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8013824:	f107 0010 	add.w	r0, r7, #16
 8013828:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801382c:	9303      	str	r3, [sp, #12]
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	9302      	str	r3, [sp, #8]
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	9301      	str	r3, [sp, #4]
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	9300      	str	r3, [sp, #0]
 801383a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801383e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013842:	68f9      	ldr	r1, [r7, #12]
 8013844:	f7fb fd70 	bl	800f328 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8013848:	f107 0310 	add.w	r3, r7, #16
 801384c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013850:	4619      	mov	r1, r3
 8013852:	68f8      	ldr	r0, [r7, #12]
 8013854:	47a0      	blx	r4
 8013856:	f107 0310 	add.w	r3, r7, #16
 801385a:	4618      	mov	r0, r3
 801385c:	f7fb feda 	bl	800f614 <_ZN18BinaryEqualFailureD1Ev>
 8013860:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013864:	4618      	mov	r0, r3
 8013866:	f7f9 f9ce 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 801386a:	683a      	ldr	r2, [r7, #0]
 801386c:	6879      	ldr	r1, [r7, #4]
 801386e:	68b8      	ldr	r0, [r7, #8]
 8013870:	f7f8 fd30 	bl	800c2d4 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8013874:	4603      	mov	r3, r0
 8013876:	2b00      	cmp	r3, #0
 8013878:	bf14      	ite	ne
 801387a:	2301      	movne	r3, #1
 801387c:	2300      	moveq	r3, #0
 801387e:	b2db      	uxtb	r3, r3
 8013880:	2b00      	cmp	r3, #0
 8013882:	d031      	beq.n	80138e8 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	339c      	adds	r3, #156	; 0x9c
 801388a:	681c      	ldr	r4, [r3, #0]
 801388c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013890:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013894:	4618      	mov	r0, r3
 8013896:	f7f8 fdfe 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801389a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801389e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80138a2:	9303      	str	r3, [sp, #12]
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	9302      	str	r3, [sp, #8]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	9301      	str	r3, [sp, #4]
 80138ac:	68bb      	ldr	r3, [r7, #8]
 80138ae:	9300      	str	r3, [sp, #0]
 80138b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80138b4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80138b8:	68f9      	ldr	r1, [r7, #12]
 80138ba:	f7fb fd35 	bl	800f328 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 80138be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80138c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80138c6:	4619      	mov	r1, r3
 80138c8:	68f8      	ldr	r0, [r7, #12]
 80138ca:	47a0      	blx	r4
 80138cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80138d0:	4618      	mov	r0, r3
 80138d2:	f7fb fe9f 	bl	800f614 <_ZN18BinaryEqualFailureD1Ev>
 80138d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80138da:	4618      	mov	r0, r3
 80138dc:	f7f9 f993 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80138e0:	e002      	b.n	80138e8 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 80138e2:	bf00      	nop
 80138e4:	e000      	b.n	80138e8 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80138e6:	bf00      	nop
}
 80138e8:	378c      	adds	r7, #140	; 0x8c
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bd90      	pop	{r4, r7, pc}

080138ee <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80138ee:	b590      	push	{r4, r7, lr}
 80138f0:	b09b      	sub	sp, #108	; 0x6c
 80138f2:	af06      	add	r7, sp, #24
 80138f4:	60f8      	str	r0, [r7, #12]
 80138f6:	60b9      	str	r1, [r7, #8]
 80138f8:	607a      	str	r2, [r7, #4]
 80138fa:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80138fc:	68f8      	ldr	r0, [r7, #12]
 80138fe:	f000 f993 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 8013902:	4603      	mov	r3, r0
 8013904:	681a      	ldr	r2, [r3, #0]
 8013906:	3228      	adds	r2, #40	; 0x28
 8013908:	6812      	ldr	r2, [r2, #0]
 801390a:	4618      	mov	r0, r3
 801390c:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 801390e:	68ba      	ldr	r2, [r7, #8]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	405a      	eors	r2, r3
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	4013      	ands	r3, r2
 8013918:	2b00      	cmp	r3, #0
 801391a:	d02b      	beq.n	8013974 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	339c      	adds	r3, #156	; 0x9c
 8013922:	681c      	ldr	r4, [r3, #0]
 8013924:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013928:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801392a:	4618      	mov	r0, r3
 801392c:	f7f8 fdb3 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8013930:	f107 0014 	add.w	r0, r7, #20
 8013934:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013938:	9304      	str	r3, [sp, #16]
 801393a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801393c:	9303      	str	r3, [sp, #12]
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	9302      	str	r3, [sp, #8]
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	9301      	str	r3, [sp, #4]
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	9300      	str	r3, [sp, #0]
 801394a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801394c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801394e:	68f9      	ldr	r1, [r7, #12]
 8013950:	f7fb fd7a 	bl	800f448 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 8013954:	f107 0314 	add.w	r3, r7, #20
 8013958:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801395a:	4619      	mov	r1, r3
 801395c:	68f8      	ldr	r0, [r7, #12]
 801395e:	47a0      	blx	r4
 8013960:	f107 0314 	add.w	r3, r7, #20
 8013964:	4618      	mov	r0, r3
 8013966:	f7fb fe33 	bl	800f5d0 <_ZN16BitsEqualFailureD1Ev>
 801396a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801396e:	4618      	mov	r0, r3
 8013970:	f7f9 f949 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 8013974:	bf00      	nop
 8013976:	3754      	adds	r7, #84	; 0x54
 8013978:	46bd      	mov	sp, r7
 801397a:	bd90      	pop	{r4, r7, pc}

0801397c <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 801397c:	b590      	push	{r4, r7, lr}
 801397e:	b09d      	sub	sp, #116	; 0x74
 8013980:	af04      	add	r7, sp, #16
 8013982:	60f8      	str	r0, [r7, #12]
 8013984:	607a      	str	r2, [r7, #4]
 8013986:	603b      	str	r3, [r7, #0]
 8013988:	460b      	mov	r3, r1
 801398a:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 801398c:	68f8      	ldr	r0, [r7, #12]
 801398e:	f000 f94b 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 8013992:	4603      	mov	r3, r0
 8013994:	681a      	ldr	r2, [r3, #0]
 8013996:	3228      	adds	r2, #40	; 0x28
 8013998:	6812      	ldr	r2, [r2, #0]
 801399a:	4618      	mov	r0, r3
 801399c:	4790      	blx	r2
    if (failed)
 801399e:	7afb      	ldrb	r3, [r7, #11]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d03f      	beq.n	8013a24 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	339c      	adds	r3, #156	; 0x9c
 80139aa:	681c      	ldr	r4, [r3, #0]
 80139ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139b0:	6879      	ldr	r1, [r7, #4]
 80139b2:	4618      	mov	r0, r3
 80139b4:	f7f8 fd6f 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80139b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80139bc:	6839      	ldr	r1, [r7, #0]
 80139be:	4618      	mov	r0, r3
 80139c0:	f7f8 fd69 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80139c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80139c8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80139ca:	4618      	mov	r0, r3
 80139cc:	f7f8 fd63 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80139d0:	f107 0014 	add.w	r0, r7, #20
 80139d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80139d8:	9302      	str	r3, [sp, #8]
 80139da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80139de:	9301      	str	r3, [sp, #4]
 80139e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139e4:	9300      	str	r3, [sp, #0]
 80139e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80139e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80139ea:	68f9      	ldr	r1, [r7, #12]
 80139ec:	f7fa ff30 	bl	800e850 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80139f0:	f107 0314 	add.w	r3, r7, #20
 80139f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80139f6:	4619      	mov	r1, r3
 80139f8:	68f8      	ldr	r0, [r7, #12]
 80139fa:	47a0      	blx	r4
 80139fc:	f107 0314 	add.w	r3, r7, #20
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7fb ff39 	bl	800f878 <_ZN17CheckEqualFailureD1Ev>
 8013a06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7f9 f8fb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8013a10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a14:	4618      	mov	r0, r3
 8013a16:	f7f9 f8f6 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8013a1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7f9 f8f1 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 8013a24:	bf00      	nop
 8013a26:	3764      	adds	r7, #100	; 0x64
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd90      	pop	{r4, r7, pc}

08013a2c <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8013a2c:	b590      	push	{r4, r7, lr}
 8013a2e:	b09d      	sub	sp, #116	; 0x74
 8013a30:	af04      	add	r7, sp, #16
 8013a32:	60f8      	str	r0, [r7, #12]
 8013a34:	607a      	str	r2, [r7, #4]
 8013a36:	603b      	str	r3, [r7, #0]
 8013a38:	460b      	mov	r3, r1
 8013a3a:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8013a3c:	68f8      	ldr	r0, [r7, #12]
 8013a3e:	f000 f8f3 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 8013a42:	4603      	mov	r3, r0
 8013a44:	681a      	ldr	r2, [r3, #0]
 8013a46:	3228      	adds	r2, #40	; 0x28
 8013a48:	6812      	ldr	r2, [r2, #0]
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	4790      	blx	r2
    if (!comparison)
 8013a4e:	7afb      	ldrb	r3, [r7, #11]
 8013a50:	f083 0301 	eor.w	r3, r3, #1
 8013a54:	b2db      	uxtb	r3, r3
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d03f      	beq.n	8013ada <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	339c      	adds	r3, #156	; 0x9c
 8013a60:	681c      	ldr	r4, [r3, #0]
 8013a62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a66:	6879      	ldr	r1, [r7, #4]
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7f8 fd14 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8013a6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a72:	6839      	ldr	r1, [r7, #0]
 8013a74:	4618      	mov	r0, r3
 8013a76:	f7f8 fd0e 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8013a7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013a7e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7f8 fd08 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8013a86:	f107 0014 	add.w	r0, r7, #20
 8013a8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013a8e:	9302      	str	r3, [sp, #8]
 8013a90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a94:	9301      	str	r3, [sp, #4]
 8013a96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a9a:	9300      	str	r3, [sp, #0]
 8013a9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013a9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013aa0:	68f9      	ldr	r1, [r7, #12]
 8013aa2:	f7fa ff83 	bl	800e9ac <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013aa6:	f107 0314 	add.w	r3, r7, #20
 8013aaa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013aac:	4619      	mov	r1, r3
 8013aae:	68f8      	ldr	r0, [r7, #12]
 8013ab0:	47a0      	blx	r4
 8013ab2:	f107 0314 	add.w	r3, r7, #20
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7fb febc 	bl	800f834 <_ZN17ComparisonFailureD1Ev>
 8013abc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	f7f9 f8a0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8013ac6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013aca:	4618      	mov	r0, r3
 8013acc:	f7f9 f89b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8013ad0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f7f9 f896 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 8013ada:	bf00      	nop
 8013adc:	3764      	adds	r7, #100	; 0x64
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	bd90      	pop	{r4, r7, pc}
	...

08013ae4 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 8013ae4:	b5b0      	push	{r4, r5, r7, lr}
 8013ae6:	b088      	sub	sp, #32
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	60f8      	str	r0, [r7, #12]
 8013aec:	60b9      	str	r1, [r7, #8]
 8013aee:	607a      	str	r2, [r7, #4]
 8013af0:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 8013af2:	f107 0310 	add.w	r3, r7, #16
 8013af6:	4924      	ldr	r1, [pc, #144]	; (8013b88 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7f8 fccc 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8013afe:	f107 0310 	add.w	r3, r7, #16
 8013b02:	6879      	ldr	r1, [r7, #4]
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7f9 f90d 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 8013b0a:	f107 0310 	add.w	r3, r7, #16
 8013b0e:	491f      	ldr	r1, [pc, #124]	; (8013b8c <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8013b10:	4618      	mov	r0, r3
 8013b12:	f7f9 f907 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 8013b16:	f107 0318 	add.w	r3, r7, #24
 8013b1a:	6839      	ldr	r1, [r7, #0]
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f7f9 fda1 	bl	800d664 <_Z10StringFromj>
 8013b22:	f107 0218 	add.w	r2, r7, #24
 8013b26:	f107 0310 	add.w	r3, r7, #16
 8013b2a:	4611      	mov	r1, r2
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f7f9 f8e7 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 8013b32:	f107 0318 	add.w	r3, r7, #24
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7f9 f865 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8013b3c:	f107 0310 	add.w	r3, r7, #16
 8013b40:	4913      	ldr	r1, [pc, #76]	; (8013b90 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 8013b42:	4618      	mov	r0, r3
 8013b44:	f7f9 f8ee 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8013b48:	f107 0310 	add.w	r3, r7, #16
 8013b4c:	68b9      	ldr	r1, [r7, #8]
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7f9 f8e8 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8013b54:	68f8      	ldr	r0, [r7, #12]
 8013b56:	f000 f867 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 8013b5a:	4604      	mov	r4, r0
 8013b5c:	6823      	ldr	r3, [r4, #0]
 8013b5e:	3338      	adds	r3, #56	; 0x38
 8013b60:	681d      	ldr	r5, [r3, #0]
 8013b62:	f107 0310 	add.w	r3, r7, #16
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7f9 f820 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	4619      	mov	r1, r3
 8013b70:	4620      	mov	r0, r4
 8013b72:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8013b74:	f107 0310 	add.w	r3, r7, #16
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7f9 f844 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 8013b7e:	bf00      	nop
 8013b80:	3720      	adds	r7, #32
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bdb0      	pop	{r4, r5, r7, pc}
 8013b86:	bf00      	nop
 8013b88:	08024a28 	.word	0x08024a28
 8013b8c:	08024a2c 	.word	0x08024a2c
 8013b90:	08024a30 	.word	0x08024a30

08013b94 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 8013b94:	b590      	push	{r4, r7, lr}
 8013b96:	b085      	sub	sp, #20
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	60f8      	str	r0, [r7, #12]
 8013b9c:	60b9      	str	r1, [r7, #8]
 8013b9e:	607a      	str	r2, [r7, #4]
 8013ba0:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	3370      	adds	r3, #112	; 0x70
 8013ba8:	681c      	ldr	r4, [r3, #0]
 8013baa:	68b8      	ldr	r0, [r7, #8]
 8013bac:	f7f8 fffe 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 8013bb0:	4601      	mov	r1, r0
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	687a      	ldr	r2, [r7, #4]
 8013bb6:	68f8      	ldr	r0, [r7, #12]
 8013bb8:	47a0      	blx	r4
}
 8013bba:	bf00      	nop
 8013bbc:	3714      	adds	r7, #20
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd90      	pop	{r4, r7, pc}

08013bc2 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 8013bc2:	b580      	push	{r7, lr}
 8013bc4:	b082      	sub	sp, #8
 8013bc6:	af00      	add	r7, sp, #0
 8013bc8:	6078      	str	r0, [r7, #4]
 8013bca:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8013bcc:	6878      	ldr	r0, [r7, #4]
 8013bce:	f000 f82b 	bl	8013c28 <_ZN10UtestShell13getTestResultEv>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	681a      	ldr	r2, [r3, #0]
 8013bd6:	323c      	adds	r2, #60	; 0x3c
 8013bd8:	6812      	ldr	r2, [r2, #0]
 8013bda:	6839      	ldr	r1, [r7, #0]
 8013bdc:	4618      	mov	r0, r3
 8013bde:	4790      	blx	r2
}
 8013be0:	bf00      	nop
 8013be2:	3708      	adds	r7, #8
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd80      	pop	{r7, pc}

08013be8 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8013be8:	b480      	push	{r7}
 8013bea:	b083      	sub	sp, #12
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
 8013bf0:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8013bf2:	4a04      	ldr	r2, [pc, #16]	; (8013c04 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8013bf4:	683b      	ldr	r3, [r7, #0]
 8013bf6:	6013      	str	r3, [r2, #0]
}
 8013bf8:	bf00      	nop
 8013bfa:	370c      	adds	r7, #12
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c02:	4770      	bx	lr
 8013c04:	20000abc 	.word	0x20000abc

08013c08 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8013c08:	b480      	push	{r7}
 8013c0a:	b083      	sub	sp, #12
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
 8013c10:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8013c12:	4a04      	ldr	r2, [pc, #16]	; (8013c24 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	6013      	str	r3, [r2, #0]
}
 8013c18:	bf00      	nop
 8013c1a:	370c      	adds	r7, #12
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c22:	4770      	bx	lr
 8013c24:	20000ac0 	.word	0x20000ac0

08013c28 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b082      	sub	sp, #8
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8013c30:	4b09      	ldr	r3, [pc, #36]	; (8013c58 <_ZN10UtestShell13getTestResultEv+0x30>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d109      	bne.n	8013c4c <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8013c38:	f7fe fbb2 	bl	80123a0 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	681a      	ldr	r2, [r3, #0]
 8013c40:	32a4      	adds	r2, #164	; 0xa4
 8013c42:	6812      	ldr	r2, [r2, #0]
 8013c44:	4618      	mov	r0, r3
 8013c46:	4790      	blx	r2
 8013c48:	4603      	mov	r3, r0
 8013c4a:	e001      	b.n	8013c50 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8013c4c:	4b02      	ldr	r3, [pc, #8]	; (8013c58 <_ZN10UtestShell13getTestResultEv+0x30>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	3708      	adds	r7, #8
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}
 8013c58:	20000abc 	.word	0x20000abc

08013c5c <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8013c60:	4b05      	ldr	r3, [pc, #20]	; (8013c78 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d103      	bne.n	8013c70 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8013c68:	f7fe fb9a 	bl	80123a0 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	e001      	b.n	8013c74 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8013c70:	4b01      	ldr	r3, [pc, #4]	; (8013c78 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8013c72:	681b      	ldr	r3, [r3, #0]
}
 8013c74:	4618      	mov	r0, r3
 8013c76:	bd80      	pop	{r7, pc}
 8013c78:	20000ac0 	.word	0x20000ac0

08013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8013c7c:	b480      	push	{r7}
 8013c7e:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8013c80:	4b03      	ldr	r3, [pc, #12]	; (8013c90 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 8013c82:	681b      	ldr	r3, [r3, #0]
}
 8013c84:	4618      	mov	r0, r3
 8013c86:	46bd      	mov	sp, r7
 8013c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8c:	4770      	bx	lr
 8013c8e:	bf00      	nop
 8013c90:	20000094 	.word	0x20000094

08013c94 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 8013c94:	b480      	push	{r7}
 8013c96:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 8013c98:	4b03      	ldr	r3, [pc, #12]	; (8013ca8 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 8013c9a:	4a04      	ldr	r2, [pc, #16]	; (8013cac <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8013c9c:	601a      	str	r2, [r3, #0]
}
 8013c9e:	bf00      	nop
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca6:	4770      	bx	lr
 8013ca8:	20000094 	.word	0x20000094
 8013cac:	20000090 	.word	0x20000090

08013cb0 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8013cb0:	b480      	push	{r7}
 8013cb2:	b083      	sub	sp, #12
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
 8013cb8:	4a04      	ldr	r2, [pc, #16]	; (8013ccc <_ZN5UtestC1Ev+0x1c>)
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	601a      	str	r2, [r3, #0]
{
}
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	370c      	adds	r7, #12
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cca:	4770      	bx	lr
 8013ccc:	080283d0 	.word	0x080283d0

08013cd0 <_ZN5UtestD1Ev>:

Utest::~Utest()
 8013cd0:	b480      	push	{r7}
 8013cd2:	b083      	sub	sp, #12
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
 8013cd8:	4a04      	ldr	r2, [pc, #16]	; (8013cec <_ZN5UtestD1Ev+0x1c>)
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	601a      	str	r2, [r3, #0]
{
}
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	370c      	adds	r7, #12
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cea:	4770      	bx	lr
 8013cec:	080283d0 	.word	0x080283d0

08013cf0 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
}
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f7ff ffe9 	bl	8013cd0 <_ZN5UtestD1Ev>
 8013cfe:	2104      	movs	r1, #4
 8013d00:	6878      	ldr	r0, [r7, #4]
 8013d02:	f7f6 f819 	bl	8009d38 <_ZdlPvj>
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3708      	adds	r7, #8
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b082      	sub	sp, #8
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8013d18:	4b0d      	ldr	r3, [pc, #52]	; (8013d50 <_ZN5Utest3runEv+0x40>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	6879      	ldr	r1, [r7, #4]
 8013d1e:	480d      	ldr	r0, [pc, #52]	; (8013d54 <_ZN5Utest3runEv+0x44>)
 8013d20:	4798      	blx	r3
 8013d22:	4603      	mov	r3, r0
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	bf14      	ite	ne
 8013d28:	2301      	movne	r3, #1
 8013d2a:	2300      	moveq	r3, #0
 8013d2c:	b2db      	uxtb	r3, r3
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d004      	beq.n	8013d3c <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8013d32:	4b07      	ldr	r3, [pc, #28]	; (8013d50 <_ZN5Utest3runEv+0x40>)
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	6879      	ldr	r1, [r7, #4]
 8013d38:	4807      	ldr	r0, [pc, #28]	; (8013d58 <_ZN5Utest3runEv+0x48>)
 8013d3a:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8013d3c:	4b04      	ldr	r3, [pc, #16]	; (8013d50 <_ZN5Utest3runEv+0x40>)
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	6879      	ldr	r1, [r7, #4]
 8013d42:	4806      	ldr	r0, [pc, #24]	; (8013d5c <_ZN5Utest3runEv+0x4c>)
 8013d44:	4798      	blx	r3
}
 8013d46:	bf00      	nop
 8013d48:	3708      	adds	r7, #8
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}
 8013d4e:	bf00      	nop
 8013d50:	200000a4 	.word	0x200000a4
 8013d54:	080123fd 	.word	0x080123fd
 8013d58:	08012419 	.word	0x08012419
 8013d5c:	08012435 	.word	0x08012435

08013d60 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8013d60:	b480      	push	{r7}
 8013d62:	b083      	sub	sp, #12
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
}
 8013d68:	bf00      	nop
 8013d6a:	370c      	adds	r7, #12
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d72:	4770      	bx	lr

08013d74 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8013d74:	b480      	push	{r7}
 8013d76:	b083      	sub	sp, #12
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
}
 8013d7c:	bf00      	nop
 8013d7e:	370c      	adds	r7, #12
 8013d80:	46bd      	mov	sp, r7
 8013d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d86:	4770      	bx	lr

08013d88 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 8013d88:	b480      	push	{r7}
 8013d8a:	b083      	sub	sp, #12
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
}
 8013d90:	bf00      	nop
 8013d92:	370c      	adds	r7, #12
 8013d94:	46bd      	mov	sp, r7
 8013d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9a:	4770      	bx	lr

08013d9c <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 8013d9c:	b480      	push	{r7}
 8013d9e:	b083      	sub	sp, #12
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
 8013da4:	4a04      	ldr	r2, [pc, #16]	; (8013db8 <_ZN14TestTerminatorD1Ev+0x1c>)
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	601a      	str	r2, [r3, #0]
{
}
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	4618      	mov	r0, r3
 8013dae:	370c      	adds	r7, #12
 8013db0:	46bd      	mov	sp, r7
 8013db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db6:	4770      	bx	lr
 8013db8:	080283bc 	.word	0x080283bc

08013dbc <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b084      	sub	sp, #16
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	60fb      	str	r3, [r7, #12]
 8013dc8:	f107 030c 	add.w	r3, r7, #12
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7f6 f975 	bl	800a0bc <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8013dd2:	f107 030c 	add.w	r3, r7, #12
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f000 f82c 	bl	8013e34 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8013ddc:	f107 030c 	add.w	r3, r7, #12
 8013de0:	4618      	mov	r0, r3
 8013de2:	f000 f835 	bl	8013e50 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 8013de6:	bf00      	nop
 8013de8:	3710      	adds	r7, #16
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}
	...

08013df0 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b082      	sub	sp, #8
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
 8013df8:	4a05      	ldr	r2, [pc, #20]	; (8013e10 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	601a      	str	r2, [r3, #0]
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	4618      	mov	r0, r3
 8013e02:	f7ff ffcb 	bl	8013d9c <_ZN14TestTerminatorD1Ev>
{
}
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3708      	adds	r7, #8
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}
 8013e10:	080283a8 	.word	0x080283a8

08013e14 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b082      	sub	sp, #8
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
}
 8013e1c:	6878      	ldr	r0, [r7, #4]
 8013e1e:	f7ff ffe7 	bl	8013df0 <_ZN20NormalTestTerminatorD1Ev>
 8013e22:	2104      	movs	r1, #4
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	f7f5 ff87 	bl	8009d38 <_ZdlPvj>
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3708      	adds	r7, #8
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}

08013e34 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b082      	sub	sp, #8
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8013e3c:	4b03      	ldr	r3, [pc, #12]	; (8013e4c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8013e42:	bf00      	nop
 8013e44:	3708      	adds	r7, #8
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}
 8013e4a:	bf00      	nop
 8013e4c:	200000a0 	.word	0x200000a0

08013e50 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b082      	sub	sp, #8
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
 8013e58:	4a05      	ldr	r2, [pc, #20]	; (8013e70 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	601a      	str	r2, [r3, #0]
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	4618      	mov	r0, r3
 8013e62:	f7ff ff9b 	bl	8013d9c <_ZN14TestTerminatorD1Ev>
{
}
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3708      	adds	r7, #8
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	08028394 	.word	0x08028394

08013e74 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b082      	sub	sp, #8
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
}
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f7ff ffe7 	bl	8013e50 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8013e82:	2104      	movs	r1, #4
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f7f5 ff57 	bl	8009d38 <_ZdlPvj>
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	3708      	adds	r7, #8
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}

08013e94 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b082      	sub	sp, #8
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 8013e9c:	f7fe fbaa 	bl	80125f4 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f7ff ff8a 	bl	8013dbc <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8013ea8:	bf00      	nop
 8013eaa:	3708      	adds	r7, #8
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}

08013eb0 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b082      	sub	sp, #8
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
 8013eb8:	4a05      	ldr	r2, [pc, #20]	; (8013ed0 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	601a      	str	r2, [r3, #0]
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f7ff ff95 	bl	8013df0 <_ZN20NormalTestTerminatorD1Ev>
{
}
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	4618      	mov	r0, r3
 8013eca:	3708      	adds	r7, #8
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd80      	pop	{r7, pc}
 8013ed0:	08028380 	.word	0x08028380

08013ed4 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b082      	sub	sp, #8
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
}
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f7ff ffe7 	bl	8013eb0 <_ZN22CrashingTestTerminatorD1Ev>
 8013ee2:	2104      	movs	r1, #4
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f7f5 ff27 	bl	8009d38 <_ZdlPvj>
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	4618      	mov	r0, r3
 8013eee:	3708      	adds	r7, #8
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd80      	pop	{r7, pc}

08013ef4 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b084      	sub	sp, #16
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
 8013efc:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	2200      	movs	r2, #0
 8013f02:	601a      	str	r2, [r3, #0]
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2200      	movs	r2, #0
 8013f08:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d007      	beq.n	8013f20 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8013f10:	683b      	ldr	r3, [r7, #0]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	3310      	adds	r3, #16
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	6838      	ldr	r0, [r7, #0]
 8013f1a:	4798      	blx	r3
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	e000      	b.n	8013f22 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8013f20:	2300      	movs	r3, #0
 8013f22:	687a      	ldr	r2, [r7, #4]
 8013f24:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	685b      	ldr	r3, [r3, #4]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d02d      	beq.n	8013f8a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	685b      	ldr	r3, [r3, #4]
 8013f32:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8013f36:	4293      	cmp	r3, r2
 8013f38:	d201      	bcs.n	8013f3e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 8013f3a:	009b      	lsls	r3, r3, #2
 8013f3c:	e001      	b.n	8013f42 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8013f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8013f42:	f240 3237 	movw	r2, #823	; 0x337
 8013f46:	4914      	ldr	r1, [pc, #80]	; (8013f98 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f7f5 ff05 	bl	8009d58 <_ZnajPKci>
 8013f4e:	4602      	mov	r2, r0
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8013f54:	683b      	ldr	r3, [r7, #0]
 8013f56:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8013f58:	2300      	movs	r3, #0
 8013f5a:	60bb      	str	r3, [r7, #8]
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	685b      	ldr	r3, [r3, #4]
 8013f60:	68ba      	ldr	r2, [r7, #8]
 8013f62:	429a      	cmp	r2, r3
 8013f64:	d212      	bcs.n	8013f8c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	681a      	ldr	r2, [r3, #0]
 8013f6a:	68bb      	ldr	r3, [r7, #8]
 8013f6c:	009b      	lsls	r3, r3, #2
 8013f6e:	4413      	add	r3, r2
 8013f70:	68fa      	ldr	r2, [r7, #12]
 8013f72:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	330c      	adds	r3, #12
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	68f8      	ldr	r0, [r7, #12]
 8013f7e:	4798      	blx	r3
 8013f80:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8013f82:	68bb      	ldr	r3, [r7, #8]
 8013f84:	3301      	adds	r3, #1
 8013f86:	60bb      	str	r3, [r7, #8]
 8013f88:	e7e8      	b.n	8013f5c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 8013f8a:	bf00      	nop
    }
}
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3710      	adds	r7, #16
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop
 8013f98:	080248b8 	.word	0x080248b8

08013f9c <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b082      	sub	sp, #8
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d004      	beq.n	8013fb6 <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f7f5 fee5 	bl	8009d80 <_ZdaPv>
}
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	4618      	mov	r0, r3
 8013fba:	3708      	adds	r7, #8
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	bd80      	pop	{r7, pc}

08013fc0 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 8013fc0:	b480      	push	{r7}
 8013fc2:	b087      	sub	sp, #28
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	60f8      	str	r0, [r7, #12]
 8013fc8:	60b9      	str	r1, [r7, #8]
 8013fca:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	681a      	ldr	r2, [r3, #0]
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	009b      	lsls	r3, r3, #2
 8013fd4:	4413      	add	r3, r2
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	681a      	ldr	r2, [r3, #0]
 8013fde:	68bb      	ldr	r3, [r7, #8]
 8013fe0:	009b      	lsls	r3, r3, #2
 8013fe2:	4413      	add	r3, r2
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	681a      	ldr	r2, [r3, #0]
 8013fec:	68bb      	ldr	r3, [r7, #8]
 8013fee:	009b      	lsls	r3, r3, #2
 8013ff0:	4413      	add	r3, r2
 8013ff2:	697a      	ldr	r2, [r7, #20]
 8013ff4:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	681a      	ldr	r2, [r3, #0]
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	009b      	lsls	r3, r3, #2
 8013ffe:	4413      	add	r3, r2
 8014000:	693a      	ldr	r2, [r7, #16]
 8014002:	601a      	str	r2, [r3, #0]
}
 8014004:	bf00      	nop
 8014006:	371c      	adds	r7, #28
 8014008:	46bd      	mov	sp, r7
 801400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400e:	4770      	bx	lr

08014010 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b084      	sub	sp, #16
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	685b      	ldr	r3, [r3, #4]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d028      	beq.n	8014074 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 8014022:	4b17      	ldr	r3, [pc, #92]	; (8014080 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	6838      	ldr	r0, [r7, #0]
 8014028:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	685b      	ldr	r3, [r3, #4]
 801402e:	3b01      	subs	r3, #1
 8014030:	60fb      	str	r3, [r7, #12]
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d019      	beq.n	801406c <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	685b      	ldr	r3, [r3, #4]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d01b      	beq.n	8014078 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 8014040:	4b10      	ldr	r3, [pc, #64]	; (8014084 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	4798      	blx	r3
 8014046:	4603      	mov	r3, r0
 8014048:	461a      	mov	r2, r3
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	3301      	adds	r3, #1
 801404e:	fbb2 f1f3 	udiv	r1, r2, r3
 8014052:	fb03 f301 	mul.w	r3, r3, r1
 8014056:	1ad3      	subs	r3, r2, r3
 8014058:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 801405a:	68ba      	ldr	r2, [r7, #8]
 801405c:	68f9      	ldr	r1, [r7, #12]
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f7ff ffae 	bl	8013fc0 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	3b01      	subs	r3, #1
 8014068:	60fb      	str	r3, [r7, #12]
 801406a:	e7e2      	b.n	8014032 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f000 f834 	bl	80140da <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8014072:	e002      	b.n	801407a <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8014074:	bf00      	nop
 8014076:	e000      	b.n	801407a <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8014078:	bf00      	nop
}
 801407a:	3710      	adds	r7, #16
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}
 8014080:	200000e0 	.word	0x200000e0
 8014084:	200000e4 	.word	0x200000e4

08014088 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b086      	sub	sp, #24
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	685b      	ldr	r3, [r3, #4]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d01c      	beq.n	80140d2 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	685b      	ldr	r3, [r3, #4]
 801409c:	085b      	lsrs	r3, r3, #1
 801409e:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 80140a0:	2300      	movs	r3, #0
 80140a2:	617b      	str	r3, [r7, #20]
 80140a4:	697a      	ldr	r2, [r7, #20]
 80140a6:	693b      	ldr	r3, [r7, #16]
 80140a8:	429a      	cmp	r2, r3
 80140aa:	d20e      	bcs.n	80140ca <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	685a      	ldr	r2, [r3, #4]
 80140b0:	697b      	ldr	r3, [r7, #20]
 80140b2:	1ad3      	subs	r3, r2, r3
 80140b4:	3b01      	subs	r3, #1
 80140b6:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 80140b8:	68fa      	ldr	r2, [r7, #12]
 80140ba:	6979      	ldr	r1, [r7, #20]
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f7ff ff7f 	bl	8013fc0 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 80140c2:	697b      	ldr	r3, [r7, #20]
 80140c4:	3301      	adds	r3, #1
 80140c6:	617b      	str	r3, [r7, #20]
 80140c8:	e7ec      	b.n	80140a4 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f000 f805 	bl	80140da <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 80140d0:	e000      	b.n	80140d4 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 80140d2:	bf00      	nop
}
 80140d4:	3718      	adds	r7, #24
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}

080140da <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 80140da:	b580      	push	{r7, lr}
 80140dc:	b084      	sub	sp, #16
 80140de:	af00      	add	r7, sp, #0
 80140e0:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 80140e2:	2300      	movs	r3, #0
 80140e4:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80140e6:	2300      	movs	r3, #0
 80140e8:	60bb      	str	r3, [r7, #8]
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	685b      	ldr	r3, [r3, #4]
 80140ee:	68ba      	ldr	r2, [r7, #8]
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d221      	bcs.n	8014138 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	681a      	ldr	r2, [r3, #0]
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	6859      	ldr	r1, [r3, #4]
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	1acb      	subs	r3, r1, r3
 8014100:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014104:	3b01      	subs	r3, #1
 8014106:	009b      	lsls	r3, r3, #2
 8014108:	4413      	add	r3, r2
 801410a:	6818      	ldr	r0, [r3, #0]
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	681a      	ldr	r2, [r3, #0]
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6859      	ldr	r1, [r3, #4]
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	1acb      	subs	r3, r1, r3
 8014118:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801411c:	3b01      	subs	r3, #1
 801411e:	009b      	lsls	r3, r3, #2
 8014120:	4413      	add	r3, r2
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	3308      	adds	r3, #8
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	68f9      	ldr	r1, [r7, #12]
 801412c:	4798      	blx	r3
 801412e:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	3301      	adds	r3, #1
 8014134:	60bb      	str	r3, [r7, #8]
 8014136:	e7d8      	b.n	80140ea <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8014138:	bf00      	nop
 801413a:	3710      	adds	r7, #16
 801413c:	46bd      	mov	sp, r7
 801413e:	bd80      	pop	{r7, pc}

08014140 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b082      	sub	sp, #8
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
    return get(0);
 8014148:	2100      	movs	r1, #0
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f000 f805 	bl	801415a <_ZNK22UtestShellPointerArray3getEj>
 8014150:	4603      	mov	r3, r0
}
 8014152:	4618      	mov	r0, r3
 8014154:	3708      	adds	r7, #8
 8014156:	46bd      	mov	sp, r7
 8014158:	bd80      	pop	{r7, pc}

0801415a <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 801415a:	b480      	push	{r7}
 801415c:	b083      	sub	sp, #12
 801415e:	af00      	add	r7, sp, #0
 8014160:	6078      	str	r0, [r7, #4]
 8014162:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	685b      	ldr	r3, [r3, #4]
 8014168:	683a      	ldr	r2, [r7, #0]
 801416a:	429a      	cmp	r2, r3
 801416c:	d301      	bcc.n	8014172 <_ZNK22UtestShellPointerArray3getEj+0x18>
 801416e:	2300      	movs	r3, #0
 8014170:	e005      	b.n	801417e <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	681a      	ldr	r2, [r3, #0]
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	009b      	lsls	r3, r3, #2
 801417a:	4413      	add	r3, r2
 801417c:	681b      	ldr	r3, [r3, #0]
}
 801417e:	4618      	mov	r0, r3
 8014180:	370c      	adds	r7, #12
 8014182:	46bd      	mov	sp, r7
 8014184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014188:	4770      	bx	lr
	...

0801418c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 801418c:	b580      	push	{r7, lr}
 801418e:	b084      	sub	sp, #16
 8014190:	af00      	add	r7, sp, #0
 8014192:	60f8      	str	r0, [r7, #12]
 8014194:	60b9      	str	r1, [r7, #8]
 8014196:	607a      	str	r2, [r7, #4]
 8014198:	603b      	str	r3, [r7, #0]
 801419a:	4a10      	ldr	r2, [pc, #64]	; (80141dc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 80141a0:	6879      	ldr	r1, [r7, #4]
 80141a2:	68b8      	ldr	r0, [r7, #8]
 80141a4:	f7fe fc27 	bl	80129f6 <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 80141a8:	6839      	ldr	r1, [r7, #0]
 80141aa:	68b8      	ldr	r0, [r7, #8]
 80141ac:	f7fe fc31 	bl	8012a12 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 80141b0:	69b9      	ldr	r1, [r7, #24]
 80141b2:	68b8      	ldr	r0, [r7, #8]
 80141b4:	f7fe fc03 	bl	80129be <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 80141b8:	69f9      	ldr	r1, [r7, #28]
 80141ba:	68b8      	ldr	r0, [r7, #8]
 80141bc:	f7fe fc0d 	bl	80129da <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 80141c0:	f7fd fc20 	bl	8011a04 <_ZN12TestRegistry18getCurrentRegistryEv>
 80141c4:	4603      	mov	r3, r0
 80141c6:	681a      	ldr	r2, [r3, #0]
 80141c8:	3208      	adds	r2, #8
 80141ca:	6812      	ldr	r2, [r2, #0]
 80141cc:	68b9      	ldr	r1, [r7, #8]
 80141ce:	4618      	mov	r0, r3
 80141d0:	4790      	blx	r2
}
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	4618      	mov	r0, r3
 80141d6:	3710      	adds	r7, #16
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}
 80141dc:	080282c4 	.word	0x080282c4

080141e0 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 80141e0:	b480      	push	{r7}
 80141e2:	b083      	sub	sp, #12
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
 80141e8:	4a04      	ldr	r2, [pc, #16]	; (80141fc <_ZN13TestInstallerD1Ev+0x1c>)
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	601a      	str	r2, [r3, #0]
{
}
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	4618      	mov	r0, r3
 80141f2:	370c      	adds	r7, #12
 80141f4:	46bd      	mov	sp, r7
 80141f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fa:	4770      	bx	lr
 80141fc:	080282c4 	.word	0x080282c4

08014200 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8014200:	b580      	push	{r7, lr}
 8014202:	b082      	sub	sp, #8
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
}
 8014208:	6878      	ldr	r0, [r7, #4]
 801420a:	f7ff ffe9 	bl	80141e0 <_ZN13TestInstallerD1Ev>
 801420e:	2104      	movs	r1, #4
 8014210:	6878      	ldr	r0, [r7, #4]
 8014212:	f7f5 fd91 	bl	8009d38 <_ZdlPvj>
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	4618      	mov	r0, r3
 801421a:	3708      	adds	r7, #8
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}

08014220 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8014220:	b580      	push	{r7, lr}
 8014222:	b082      	sub	sp, #8
 8014224:	af00      	add	r7, sp, #0
 8014226:	6078      	str	r0, [r7, #4]
 8014228:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d10a      	bne.n	8014246 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014236:	4293      	cmp	r3, r2
 8014238:	d105      	bne.n	8014246 <_Z41__static_initialization_and_destruction_0ii+0x26>
 801423a:	4805      	ldr	r0, [pc, #20]	; (8014250 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 801423c:	f7ff fe38 	bl	8013eb0 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8014240:	4804      	ldr	r0, [pc, #16]	; (8014254 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8014242:	f7ff fdd5 	bl	8013df0 <_ZN20NormalTestTerminatorD1Ev>
}
 8014246:	bf00      	nop
 8014248:	3708      	adds	r7, #8
 801424a:	46bd      	mov	sp, r7
 801424c:	bd80      	pop	{r7, pc}
 801424e:	bf00      	nop
 8014250:	20000090 	.word	0x20000090
 8014254:	2000008c 	.word	0x2000008c

08014258 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8014258:	b580      	push	{r7, lr}
 801425a:	af00      	add	r7, sp, #0
 801425c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014260:	2001      	movs	r0, #1
 8014262:	f7ff ffdd 	bl	8014220 <_Z41__static_initialization_and_destruction_0ii>
 8014266:	bd80      	pop	{r7, pc}

08014268 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8014268:	b580      	push	{r7, lr}
 801426a:	af00      	add	r7, sp, #0
 801426c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014270:	2000      	movs	r0, #0
 8014272:	f7ff ffd5 	bl	8014220 <_Z41__static_initialization_and_destruction_0ii>
 8014276:	bd80      	pop	{r7, pc}

08014278 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8014278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801427a:	b083      	sub	sp, #12
 801427c:	af00      	add	r7, sp, #0
 801427e:	ed87 0b00 	vstr	d0, [r7]
 8014282:	683c      	ldr	r4, [r7, #0]
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801428a:	2301      	movs	r3, #1
 801428c:	461e      	mov	r6, r3
 801428e:	f04f 32ff 	mov.w	r2, #4294967295
 8014292:	4b10      	ldr	r3, [pc, #64]	; (80142d4 <_ZSt5isinfd+0x5c>)
 8014294:	4620      	mov	r0, r4
 8014296:	4629      	mov	r1, r5
 8014298:	f7ec fa76 	bl	8000788 <__aeabi_dcmpun>
 801429c:	4603      	mov	r3, r0
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d10b      	bne.n	80142ba <_ZSt5isinfd+0x42>
 80142a2:	f04f 32ff 	mov.w	r2, #4294967295
 80142a6:	4b0b      	ldr	r3, [pc, #44]	; (80142d4 <_ZSt5isinfd+0x5c>)
 80142a8:	4620      	mov	r0, r4
 80142aa:	4629      	mov	r1, r5
 80142ac:	f7ec fa4e 	bl	800074c <__aeabi_dcmple>
 80142b0:	4603      	mov	r3, r0
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d101      	bne.n	80142ba <_ZSt5isinfd+0x42>
 80142b6:	2300      	movs	r3, #0
 80142b8:	461e      	mov	r6, r3
 80142ba:	b2f3      	uxtb	r3, r6
 80142bc:	f083 0301 	eor.w	r3, r3, #1
 80142c0:	b2db      	uxtb	r3, r3
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	bf14      	ite	ne
 80142c6:	2301      	movne	r3, #1
 80142c8:	2300      	moveq	r3, #0
 80142ca:	b2db      	uxtb	r3, r3
 80142cc:	4618      	mov	r0, r3
 80142ce:	370c      	adds	r7, #12
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142d4:	7fefffff 	.word	0x7fefffff

080142d8 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 80142d8:	b590      	push	{r4, r7, lr}
 80142da:	b083      	sub	sp, #12
 80142dc:	af00      	add	r7, sp, #0
 80142de:	ed87 0b00 	vstr	d0, [r7]
 80142e2:	2301      	movs	r3, #1
 80142e4:	461c      	mov	r4, r3
 80142e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80142ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80142ee:	f7ec fa4b 	bl	8000788 <__aeabi_dcmpun>
 80142f2:	4603      	mov	r3, r0
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d101      	bne.n	80142fc <_ZSt5isnand+0x24>
 80142f8:	2300      	movs	r3, #0
 80142fa:	461c      	mov	r4, r3
 80142fc:	b2e3      	uxtb	r3, r4
 80142fe:	2b00      	cmp	r3, #0
 8014300:	bf14      	ite	ne
 8014302:	2301      	movne	r3, #1
 8014304:	2300      	moveq	r3, #0
 8014306:	b2db      	uxtb	r3, r3
 8014308:	4618      	mov	r0, r3
 801430a:	370c      	adds	r7, #12
 801430c:	46bd      	mov	sp, r7
 801430e:	bd90      	pop	{r4, r7, pc}

08014310 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8014310:	b590      	push	{r4, r7, lr}
 8014312:	b095      	sub	sp, #84	; 0x54
 8014314:	af00      	add	r7, sp, #0
 8014316:	60f8      	str	r0, [r7, #12]
 8014318:	60b9      	str	r1, [r7, #8]
 801431a:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	3334      	adds	r3, #52	; 0x34
 8014322:	681c      	ldr	r4, [r3, #0]
 8014324:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014328:	490f      	ldr	r1, [pc, #60]	; (8014368 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 801432a:	4618      	mov	r0, r3
 801432c:	f7f8 f8b3 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014330:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8014334:	f107 0314 	add.w	r3, r7, #20
 8014338:	68f9      	ldr	r1, [r7, #12]
 801433a:	4618      	mov	r0, r3
 801433c:	f7f9 ff0a 	bl	800e154 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8014340:	f107 0314 	add.w	r3, r7, #20
 8014344:	4619      	mov	r1, r3
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	47a0      	blx	r4
 801434a:	f107 0314 	add.w	r3, r7, #20
 801434e:	4618      	mov	r0, r3
 8014350:	f7f9 ffc0 	bl	800e2d4 <_ZN11TestFailureD1Ev>
 8014354:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014358:	4618      	mov	r0, r3
 801435a:	f7f8 fc54 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 801435e:	bf00      	nop
 8014360:	3754      	adds	r7, #84	; 0x54
 8014362:	46bd      	mov	sp, r7
 8014364:	bd90      	pop	{r4, r7, pc}
 8014366:	bf00      	nop
 8014368:	08024a40 	.word	0x08024a40

0801436c <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 801436c:	b480      	push	{r7}
 801436e:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8014370:	2301      	movs	r3, #1
}
 8014372:	4618      	mov	r0, r3
 8014374:	46bd      	mov	sp, r7
 8014376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437a:	4770      	bx	lr

0801437c <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b082      	sub	sp, #8
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
 8014384:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 8014386:	4b13      	ldr	r3, [pc, #76]	; (80143d4 <PlatformSpecificSetJmpImplementation+0x58>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	225c      	movs	r2, #92	; 0x5c
 801438c:	fb02 f303 	mul.w	r3, r2, r3
 8014390:	4a11      	ldr	r2, [pc, #68]	; (80143d8 <PlatformSpecificSetJmpImplementation+0x5c>)
 8014392:	4413      	add	r3, r2
 8014394:	4618      	mov	r0, r3
 8014396:	f7eb ff43 	bl	8000220 <setjmp>
 801439a:	4603      	mov	r3, r0
 801439c:	2b00      	cmp	r3, #0
 801439e:	bf0c      	ite	eq
 80143a0:	2301      	moveq	r3, #1
 80143a2:	2300      	movne	r3, #0
 80143a4:	b2db      	uxtb	r3, r3
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d00e      	beq.n	80143c8 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 80143aa:	4b0a      	ldr	r3, [pc, #40]	; (80143d4 <PlatformSpecificSetJmpImplementation+0x58>)
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	3301      	adds	r3, #1
 80143b0:	4a08      	ldr	r2, [pc, #32]	; (80143d4 <PlatformSpecificSetJmpImplementation+0x58>)
 80143b2:	6013      	str	r3, [r2, #0]
        function(data);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	6838      	ldr	r0, [r7, #0]
 80143b8:	4798      	blx	r3
        jmp_buf_index--;
 80143ba:	4b06      	ldr	r3, [pc, #24]	; (80143d4 <PlatformSpecificSetJmpImplementation+0x58>)
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	3b01      	subs	r3, #1
 80143c0:	4a04      	ldr	r2, [pc, #16]	; (80143d4 <PlatformSpecificSetJmpImplementation+0x58>)
 80143c2:	6013      	str	r3, [r2, #0]
        return 1;
 80143c4:	2301      	movs	r3, #1
 80143c6:	e000      	b.n	80143ca <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 80143c8:	2300      	movs	r3, #0
}
 80143ca:	4618      	mov	r0, r3
 80143cc:	3708      	adds	r7, #8
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}
 80143d2:	bf00      	nop
 80143d4:	20000e5c 	.word	0x20000e5c
 80143d8:	20000ac4 	.word	0x20000ac4

080143dc <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 80143e0:	4b07      	ldr	r3, [pc, #28]	; (8014400 <PlatformSpecificLongJmpImplementation+0x24>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	3b01      	subs	r3, #1
 80143e6:	4a06      	ldr	r2, [pc, #24]	; (8014400 <PlatformSpecificLongJmpImplementation+0x24>)
 80143e8:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 80143ea:	4b05      	ldr	r3, [pc, #20]	; (8014400 <PlatformSpecificLongJmpImplementation+0x24>)
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	225c      	movs	r2, #92	; 0x5c
 80143f0:	fb02 f303 	mul.w	r3, r2, r3
 80143f4:	4a03      	ldr	r2, [pc, #12]	; (8014404 <PlatformSpecificLongJmpImplementation+0x28>)
 80143f6:	4413      	add	r3, r2
 80143f8:	2101      	movs	r1, #1
 80143fa:	4618      	mov	r0, r3
 80143fc:	f7eb ff16 	bl	800022c <longjmp>
 8014400:	20000e5c 	.word	0x20000e5c
 8014404:	20000ac4 	.word	0x20000ac4

08014408 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8014408:	b480      	push	{r7}
 801440a:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 801440c:	2300      	movs	r3, #0
#endif
}
 801440e:	4618      	mov	r0, r3
 8014410:	46bd      	mov	sp, r7
 8014412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014416:	4770      	bx	lr

08014418 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b084      	sub	sp, #16
 801441c:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 801441e:	2000      	movs	r0, #0
 8014420:	f00e ec4e 	blx	8022cc0 <__time_veneer>
 8014424:	4602      	mov	r2, r0
 8014426:	460b      	mov	r3, r1
 8014428:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 801442c:	463b      	mov	r3, r7
 801442e:	4618      	mov	r0, r3
 8014430:	f00b fb7a 	bl	801fb28 <localtime>
 8014434:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	4a04      	ldr	r2, [pc, #16]	; (801444c <TimeStringImplementation+0x34>)
 801443a:	2150      	movs	r1, #80	; 0x50
 801443c:	4804      	ldr	r0, [pc, #16]	; (8014450 <TimeStringImplementation+0x38>)
 801443e:	f00c fc7b 	bl	8020d38 <strftime>
    return dateTime;
 8014442:	4b03      	ldr	r3, [pc, #12]	; (8014450 <TimeStringImplementation+0x38>)
}
 8014444:	4618      	mov	r0, r3
 8014446:	3710      	adds	r7, #16
 8014448:	46bd      	mov	sp, r7
 801444a:	bd80      	pop	{r7, pc}
 801444c:	08024a7c 	.word	0x08024a7c
 8014450:	20000e60 	.word	0x20000e60

08014454 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b082      	sub	sp, #8
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 801445e:	6839      	ldr	r1, [r7, #0]
 8014460:	6878      	ldr	r0, [r7, #4]
 8014462:	f00b f997 	bl	801f794 <fopen>
 8014466:	4603      	mov	r3, r0
#endif
}
 8014468:	4618      	mov	r0, r3
 801446a:	3708      	adds	r7, #8
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}

08014470 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b082      	sub	sp, #8
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 801447a:	6839      	ldr	r1, [r7, #0]
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	f00b f9f7 	bl	801f870 <fputs>
}
 8014482:	bf00      	nop
 8014484:	3708      	adds	r7, #8
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}

0801448a <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 801448a:	b580      	push	{r7, lr}
 801448c:	b082      	sub	sp, #8
 801448e:	af00      	add	r7, sp, #0
 8014490:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f00a ff78 	bl	801f388 <fclose>
}
 8014498:	bf00      	nop
 801449a:	3708      	adds	r7, #8
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}

080144a0 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	af00      	add	r7, sp, #0
  fflush(stdout);
 80144a4:	4b03      	ldr	r3, [pc, #12]	; (80144b4 <PlatformSpecificFlushImplementation+0x14>)
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	689b      	ldr	r3, [r3, #8]
 80144aa:	4618      	mov	r0, r3
 80144ac:	f00b f836 	bl	801f51c <fflush>
}
 80144b0:	bf00      	nop
 80144b2:	bd80      	pop	{r7, pc}
 80144b4:	20000108 	.word	0x20000108

080144b8 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b082      	sub	sp, #8
 80144bc:	af00      	add	r7, sp, #0
 80144be:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 80144c2:	ed97 0b00 	vldr	d0, [r7]
 80144c6:	f7ff ff07 	bl	80142d8 <_ZSt5isnand>
 80144ca:	4603      	mov	r3, r0
}
 80144cc:	4618      	mov	r0, r3
 80144ce:	3708      	adds	r7, #8
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}

080144d4 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b082      	sub	sp, #8
 80144d8:	af00      	add	r7, sp, #0
 80144da:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 80144de:	ed97 0b00 	vldr	d0, [r7]
 80144e2:	f7ff fec9 	bl	8014278 <_ZSt5isinfd>
 80144e6:	4603      	mov	r3, r0
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	3708      	adds	r7, #8
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}

080144f0 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 80144f0:	b480      	push	{r7}
 80144f2:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 80144f4:	2300      	movs	r3, #0
#endif

}
 80144f6:	4618      	mov	r0, r3
 80144f8:	46bd      	mov	sp, r7
 80144fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fe:	4770      	bx	lr

08014500 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8014500:	b480      	push	{r7}
 8014502:	b083      	sub	sp, #12
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
}
 8014508:	bf00      	nop
 801450a:	370c      	adds	r7, #12
 801450c:	46bd      	mov	sp, r7
 801450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014512:	4770      	bx	lr

08014514 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8014514:	b480      	push	{r7}
 8014516:	b083      	sub	sp, #12
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
}
 801451c:	bf00      	nop
 801451e:	370c      	adds	r7, #12
 8014520:	46bd      	mov	sp, r7
 8014522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014526:	4770      	bx	lr

08014528 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8014528:	b480      	push	{r7}
 801452a:	b083      	sub	sp, #12
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
}
 8014530:	bf00      	nop
 8014532:	370c      	adds	r7, #12
 8014534:	46bd      	mov	sp, r7
 8014536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453a:	4770      	bx	lr

0801453c <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 801453c:	b580      	push	{r7, lr}
 801453e:	b084      	sub	sp, #16
 8014540:	af00      	add	r7, sp, #0
 8014542:	60f8      	str	r0, [r7, #12]
 8014544:	60b9      	str	r1, [r7, #8]
 8014546:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8014548:	4a25      	ldr	r2, [pc, #148]	; (80145e0 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	601a      	str	r2, [r3, #0]
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	68ba      	ldr	r2, [r7, #8]
 8014552:	605a      	str	r2, [r3, #4]
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	687a      	ldr	r2, [r7, #4]
 8014558:	609a      	str	r2, [r3, #8]
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	2200      	movs	r2, #0
 801455e:	731a      	strb	r2, [r3, #12]
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	2200      	movs	r2, #0
 8014564:	735a      	strb	r2, [r3, #13]
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	2200      	movs	r2, #0
 801456a:	739a      	strb	r2, [r3, #14]
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	2200      	movs	r2, #0
 8014570:	73da      	strb	r2, [r3, #15]
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	2200      	movs	r2, #0
 8014576:	741a      	strb	r2, [r3, #16]
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	2200      	movs	r2, #0
 801457c:	745a      	strb	r2, [r3, #17]
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	2200      	movs	r2, #0
 8014582:	749a      	strb	r2, [r3, #18]
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	2200      	movs	r2, #0
 8014588:	74da      	strb	r2, [r3, #19]
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	2200      	movs	r2, #0
 801458e:	751a      	strb	r2, [r3, #20]
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	2200      	movs	r2, #0
 8014594:	755a      	strb	r2, [r3, #21]
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	2200      	movs	r2, #0
 801459a:	759a      	strb	r2, [r3, #22]
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	2200      	movs	r2, #0
 80145a0:	75da      	strb	r2, [r3, #23]
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	2200      	movs	r2, #0
 80145a6:	761a      	strb	r2, [r3, #24]
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	2201      	movs	r2, #1
 80145ac:	61da      	str	r2, [r3, #28]
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	2200      	movs	r2, #0
 80145b2:	621a      	str	r2, [r3, #32]
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	2200      	movs	r2, #0
 80145b8:	625a      	str	r2, [r3, #36]	; 0x24
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	2200      	movs	r2, #0
 80145be:	629a      	str	r2, [r3, #40]	; 0x28
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	2200      	movs	r2, #0
 80145c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	3330      	adds	r3, #48	; 0x30
 80145cc:	4905      	ldr	r1, [pc, #20]	; (80145e4 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 80145ce:	4618      	mov	r0, r3
 80145d0:	f7f7 ff61 	bl	800c496 <_ZN12SimpleStringC1EPKc>
{
}
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	4618      	mov	r0, r3
 80145d8:	3710      	adds	r7, #16
 80145da:	46bd      	mov	sp, r7
 80145dc:	bd80      	pop	{r7, pc}
 80145de:	bf00      	nop
 80145e0:	080283f0 	.word	0x080283f0
 80145e4:	08024a90 	.word	0x08024a90

080145e8 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b082      	sub	sp, #8
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	4618      	mov	r0, r3
 80145f4:	f7f8 fb07 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	4618      	mov	r0, r3
 80145fc:	3708      	adds	r7, #8
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}
	...

08014604 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8014604:	b590      	push	{r4, r7, lr}
 8014606:	b085      	sub	sp, #20
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
 801460c:	4a20      	ldr	r2, [pc, #128]	; (8014690 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014616:	2b00      	cmp	r3, #0
 8014618:	d015      	beq.n	8014646 <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801461e:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014624:	4618      	mov	r0, r3
 8014626:	f00a fda4 	bl	801f172 <_ZNK10TestFilter7getNextEv>
 801462a:	4602      	mov	r2, r0
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8014630:	68fc      	ldr	r4, [r7, #12]
 8014632:	2c00      	cmp	r4, #0
 8014634:	d0ed      	beq.n	8014612 <_ZN20CommandLineArgumentsD1Ev+0xe>
 8014636:	4620      	mov	r0, r4
 8014638:	f7ff ffd6 	bl	80145e8 <_ZN10TestFilterD1Ev>
 801463c:	2110      	movs	r1, #16
 801463e:	4620      	mov	r0, r4
 8014640:	f7f5 fb7a 	bl	8009d38 <_ZdlPvj>
    while(groupFilters_) {
 8014644:	e7e5      	b.n	8014612 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801464a:	2b00      	cmp	r3, #0
 801464c:	d015      	beq.n	801467a <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014652:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014658:	4618      	mov	r0, r3
 801465a:	f00a fd8a 	bl	801f172 <_ZNK10TestFilter7getNextEv>
 801465e:	4602      	mov	r2, r0
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8014664:	68bc      	ldr	r4, [r7, #8]
 8014666:	2c00      	cmp	r4, #0
 8014668:	d0ed      	beq.n	8014646 <_ZN20CommandLineArgumentsD1Ev+0x42>
 801466a:	4620      	mov	r0, r4
 801466c:	f7ff ffbc 	bl	80145e8 <_ZN10TestFilterD1Ev>
 8014670:	2110      	movs	r1, #16
 8014672:	4620      	mov	r0, r4
 8014674:	f7f5 fb60 	bl	8009d38 <_ZdlPvj>
    while(nameFilters_) {
 8014678:	e7e5      	b.n	8014646 <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	3330      	adds	r3, #48	; 0x30
 801467e:	4618      	mov	r0, r3
 8014680:	f7f8 fac1 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    }
}
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	4618      	mov	r0, r3
 8014688:	3714      	adds	r7, #20
 801468a:	46bd      	mov	sp, r7
 801468c:	bd90      	pop	{r4, r7, pc}
 801468e:	bf00      	nop
 8014690:	080283f0 	.word	0x080283f0

08014694 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 8014694:	b580      	push	{r7, lr}
 8014696:	b082      	sub	sp, #8
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
}
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f7ff ffb1 	bl	8014604 <_ZN20CommandLineArgumentsD1Ev>
 80146a2:	2138      	movs	r1, #56	; 0x38
 80146a4:	6878      	ldr	r0, [r7, #4]
 80146a6:	f7f5 fb47 	bl	8009d38 <_ZdlPvj>
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	4618      	mov	r0, r3
 80146ae:	3708      	adds	r7, #8
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bd80      	pop	{r7, pc}

080146b4 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 80146b4:	b5b0      	push	{r4, r5, r7, lr}
 80146b6:	b0be      	sub	sp, #248	; 0xf8
 80146b8:	af02      	add	r7, sp, #8
 80146ba:	6078      	str	r0, [r7, #4]
 80146bc:	6039      	str	r1, [r7, #0]
 80146be:	2400      	movs	r4, #0
    bool correctParameters = true;
 80146c0:	2301      	movs	r3, #1
 80146c2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 80146c6:	2301      	movs	r3, #1
 80146c8:	613b      	str	r3, [r7, #16]
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	685a      	ldr	r2, [r3, #4]
 80146ce:	693b      	ldr	r3, [r7, #16]
 80146d0:	429a      	cmp	r2, r3
 80146d2:	f340 83a4 	ble.w	8014e1e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	689a      	ldr	r2, [r3, #8]
 80146da:	693b      	ldr	r3, [r7, #16]
 80146dc:	009b      	lsls	r3, r3, #2
 80146de:	4413      	add	r3, r2
 80146e0:	681a      	ldr	r2, [r3, #0]
 80146e2:	f107 0308 	add.w	r3, r7, #8
 80146e6:	4611      	mov	r1, r2
 80146e8:	4618      	mov	r0, r3
 80146ea:	f7f7 fed4 	bl	800c496 <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 80146ee:	f107 0314 	add.w	r3, r7, #20
 80146f2:	49c8      	ldr	r1, [pc, #800]	; (8014a14 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 80146f4:	4618      	mov	r0, r3
 80146f6:	f7f7 fece 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80146fa:	f107 0214 	add.w	r2, r7, #20
 80146fe:	f107 0308 	add.w	r3, r7, #8
 8014702:	4611      	mov	r1, r2
 8014704:	4618      	mov	r0, r3
 8014706:	f7f8 fa8a 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801470a:	4603      	mov	r3, r0
 801470c:	461d      	mov	r5, r3
 801470e:	f107 0314 	add.w	r3, r7, #20
 8014712:	4618      	mov	r0, r3
 8014714:	f7f8 fa77 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014718:	2d00      	cmp	r5, #0
 801471a:	d006      	beq.n	801472a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2201      	movs	r2, #1
 8014720:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8014722:	2300      	movs	r3, #0
 8014724:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014728:	e366      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 801472a:	f107 031c 	add.w	r3, r7, #28
 801472e:	49ba      	ldr	r1, [pc, #744]	; (8014a18 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8014730:	4618      	mov	r0, r3
 8014732:	f7f7 feb0 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014736:	f107 021c 	add.w	r2, r7, #28
 801473a:	f107 0308 	add.w	r3, r7, #8
 801473e:	4611      	mov	r1, r2
 8014740:	4618      	mov	r0, r3
 8014742:	f7f8 fa6c 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 8014746:	4603      	mov	r3, r0
 8014748:	461d      	mov	r5, r3
 801474a:	f107 031c 	add.w	r3, r7, #28
 801474e:	4618      	mov	r0, r3
 8014750:	f7f8 fa59 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014754:	2d00      	cmp	r5, #0
 8014756:	d003      	beq.n	8014760 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	2201      	movs	r2, #1
 801475c:	735a      	strb	r2, [r3, #13]
 801475e:	e34b      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8014760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014764:	49ad      	ldr	r1, [pc, #692]	; (8014a1c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 8014766:	4618      	mov	r0, r3
 8014768:	f7f7 fe95 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801476c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014770:	f107 0308 	add.w	r3, r7, #8
 8014774:	4611      	mov	r1, r2
 8014776:	4618      	mov	r0, r3
 8014778:	f7f8 fa51 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801477c:	4603      	mov	r3, r0
 801477e:	461d      	mov	r5, r3
 8014780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014784:	4618      	mov	r0, r3
 8014786:	f7f8 fa3e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801478a:	2d00      	cmp	r5, #0
 801478c:	d003      	beq.n	8014796 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	2201      	movs	r2, #1
 8014792:	739a      	strb	r2, [r3, #14]
 8014794:	e330      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 8014796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801479a:	49a1      	ldr	r1, [pc, #644]	; (8014a20 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 801479c:	4618      	mov	r0, r3
 801479e:	f7f7 fe7a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80147a2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80147a6:	f107 0308 	add.w	r3, r7, #8
 80147aa:	4611      	mov	r1, r2
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7f8 fa36 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 80147b2:	4603      	mov	r3, r0
 80147b4:	461d      	mov	r5, r3
 80147b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80147ba:	4618      	mov	r0, r3
 80147bc:	f7f8 fa23 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80147c0:	2d00      	cmp	r5, #0
 80147c2:	d003      	beq.n	80147cc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	2201      	movs	r2, #1
 80147c8:	73da      	strb	r2, [r3, #15]
 80147ca:	e315      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 80147cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80147d0:	4994      	ldr	r1, [pc, #592]	; (8014a24 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7f7 fe5f 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80147d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80147dc:	f107 0308 	add.w	r3, r7, #8
 80147e0:	4611      	mov	r1, r2
 80147e2:	4618      	mov	r0, r3
 80147e4:	f7f8 fa1b 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 80147e8:	4603      	mov	r3, r0
 80147ea:	461d      	mov	r5, r3
 80147ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80147f0:	4618      	mov	r0, r3
 80147f2:	f7f8 fa08 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80147f6:	2d00      	cmp	r5, #0
 80147f8:	d003      	beq.n	8014802 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	2201      	movs	r2, #1
 80147fe:	741a      	strb	r2, [r3, #16]
 8014800:	e2fa      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 8014802:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014806:	4988      	ldr	r1, [pc, #544]	; (8014a28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 8014808:	4618      	mov	r0, r3
 801480a:	f7f7 fe44 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801480e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8014812:	f107 0308 	add.w	r3, r7, #8
 8014816:	4611      	mov	r1, r2
 8014818:	4618      	mov	r0, r3
 801481a:	f7f8 fa00 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801481e:	4603      	mov	r3, r0
 8014820:	461d      	mov	r5, r3
 8014822:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014826:	4618      	mov	r0, r3
 8014828:	f7f8 f9ed 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801482c:	2d00      	cmp	r5, #0
 801482e:	d003      	beq.n	8014838 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2201      	movs	r2, #1
 8014834:	755a      	strb	r2, [r3, #21]
 8014836:	e2df      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8014838:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801483c:	497b      	ldr	r1, [pc, #492]	; (8014a2c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 801483e:	4618      	mov	r0, r3
 8014840:	f7f7 fe29 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014844:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8014848:	f107 0308 	add.w	r3, r7, #8
 801484c:	4611      	mov	r1, r2
 801484e:	4618      	mov	r0, r3
 8014850:	f7f8 f9e5 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 8014854:	4603      	mov	r3, r0
 8014856:	461d      	mov	r5, r3
 8014858:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801485c:	4618      	mov	r0, r3
 801485e:	f7f8 f9d2 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014862:	2d00      	cmp	r5, #0
 8014864:	d003      	beq.n	801486e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	2201      	movs	r2, #1
 801486a:	745a      	strb	r2, [r3, #17]
 801486c:	e2c4      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 801486e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014872:	496f      	ldr	r1, [pc, #444]	; (8014a30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8014874:	4618      	mov	r0, r3
 8014876:	f7f7 fe0e 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801487a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801487e:	f107 0308 	add.w	r3, r7, #8
 8014882:	4611      	mov	r1, r2
 8014884:	4618      	mov	r0, r3
 8014886:	f7f8 f9ca 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801488a:	4603      	mov	r3, r0
 801488c:	461d      	mov	r5, r3
 801488e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014892:	4618      	mov	r0, r3
 8014894:	f7f8 f9b7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014898:	2d00      	cmp	r5, #0
 801489a:	d003      	beq.n	80148a4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2201      	movs	r2, #1
 80148a0:	749a      	strb	r2, [r3, #18]
 80148a2:	e2a9      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 80148a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80148a8:	4962      	ldr	r1, [pc, #392]	; (8014a34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7f7 fdf3 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80148b0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80148b4:	f107 0308 	add.w	r3, r7, #8
 80148b8:	4611      	mov	r1, r2
 80148ba:	4618      	mov	r0, r3
 80148bc:	f7f8 f9af 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 80148c0:	4603      	mov	r3, r0
 80148c2:	461d      	mov	r5, r3
 80148c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80148c8:	4618      	mov	r0, r3
 80148ca:	f7f8 f99c 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80148ce:	2d00      	cmp	r5, #0
 80148d0:	d003      	beq.n	80148da <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	2201      	movs	r2, #1
 80148d6:	74da      	strb	r2, [r3, #19]
 80148d8:	e28e      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 80148da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80148de:	4956      	ldr	r1, [pc, #344]	; (8014a38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7f7 fdd8 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80148e6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80148ea:	f107 0308 	add.w	r3, r7, #8
 80148ee:	4611      	mov	r1, r2
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7f8 f994 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 80148f6:	4603      	mov	r3, r0
 80148f8:	461d      	mov	r5, r3
 80148fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80148fe:	4618      	mov	r0, r3
 8014900:	f7f8 f981 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014904:	2d00      	cmp	r5, #0
 8014906:	d003      	beq.n	8014910 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	2201      	movs	r2, #1
 801490c:	751a      	strb	r2, [r3, #20]
 801490e:	e273      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8014910:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014914:	4949      	ldr	r1, [pc, #292]	; (8014a3c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 8014916:	4618      	mov	r0, r3
 8014918:	f7f7 fdbd 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801491c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8014920:	f107 0308 	add.w	r3, r7, #8
 8014924:	4611      	mov	r1, r2
 8014926:	4618      	mov	r0, r3
 8014928:	f7f8 f979 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801492c:	4603      	mov	r3, r0
 801492e:	461d      	mov	r5, r3
 8014930:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014934:	4618      	mov	r0, r3
 8014936:	f7f8 f966 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801493a:	2d00      	cmp	r5, #0
 801493c:	d003      	beq.n	8014946 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	2201      	movs	r2, #1
 8014942:	759a      	strb	r2, [r3, #22]
 8014944:	e258      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 8014946:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801494a:	493d      	ldr	r1, [pc, #244]	; (8014a40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 801494c:	4618      	mov	r0, r3
 801494e:	f7f7 fda2 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014952:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8014956:	f107 0308 	add.w	r3, r7, #8
 801495a:	4611      	mov	r1, r2
 801495c:	4618      	mov	r0, r3
 801495e:	f7f7 fe5e 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 8014962:	4603      	mov	r3, r0
 8014964:	461d      	mov	r5, r3
 8014966:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801496a:	4618      	mov	r0, r3
 801496c:	f7f8 f94b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014970:	2d00      	cmp	r5, #0
 8014972:	d009      	beq.n	8014988 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	6859      	ldr	r1, [r3, #4]
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	689a      	ldr	r2, [r3, #8]
 801497c:	f107 0310 	add.w	r3, r7, #16
 8014980:	6878      	ldr	r0, [r7, #4]
 8014982:	f000 fb33 	bl	8014fec <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 8014986:	e237      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 8014988:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801498c:	492d      	ldr	r1, [pc, #180]	; (8014a44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 801498e:	4618      	mov	r0, r3
 8014990:	f7f7 fd81 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014994:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8014998:	f107 0308 	add.w	r3, r7, #8
 801499c:	4611      	mov	r1, r2
 801499e:	4618      	mov	r0, r3
 80149a0:	f7f7 fe3d 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 80149a4:	4603      	mov	r3, r0
 80149a6:	461d      	mov	r5, r3
 80149a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80149ac:	4618      	mov	r0, r3
 80149ae:	f7f8 f92a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80149b2:	2d00      	cmp	r5, #0
 80149b4:	d009      	beq.n	80149ca <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	6859      	ldr	r1, [r3, #4]
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	689a      	ldr	r2, [r3, #8]
 80149be:	f107 0310 	add.w	r3, r7, #16
 80149c2:	6878      	ldr	r0, [r7, #4]
 80149c4:	f000 fc40 	bl	8015248 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 80149c8:	e216      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 80149ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80149ce:	491e      	ldr	r1, [pc, #120]	; (8014a48 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7f7 fd60 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80149d6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80149da:	f107 0308 	add.w	r3, r7, #8
 80149de:	4611      	mov	r1, r2
 80149e0:	4618      	mov	r0, r3
 80149e2:	f7f7 fe1c 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 80149e6:	4603      	mov	r3, r0
 80149e8:	461d      	mov	r5, r3
 80149ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80149ee:	4618      	mov	r0, r3
 80149f0:	f7f8 f909 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80149f4:	2d00      	cmp	r5, #0
 80149f6:	d029      	beq.n	8014a4c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	6859      	ldr	r1, [r3, #4]
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	689a      	ldr	r2, [r3, #8]
 8014a00:	f107 0310 	add.w	r3, r7, #16
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f000 fc61 	bl	80152cc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014a10:	e1f2      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8014a12:	bf00      	nop
 8014a14:	08024a94 	.word	0x08024a94
 8014a18:	08024a98 	.word	0x08024a98
 8014a1c:	08024a9c 	.word	0x08024a9c
 8014a20:	08024aa0 	.word	0x08024aa0
 8014a24:	08024aa4 	.word	0x08024aa4
 8014a28:	08024aa8 	.word	0x08024aa8
 8014a2c:	08024aac 	.word	0x08024aac
 8014a30:	08024ab0 	.word	0x08024ab0
 8014a34:	08024ab4 	.word	0x08024ab4
 8014a38:	08024ab8 	.word	0x08024ab8
 8014a3c:	08024abc 	.word	0x08024abc
 8014a40:	08024ac0 	.word	0x08024ac0
 8014a44:	08024ac4 	.word	0x08024ac4
 8014a48:	08024ac8 	.word	0x08024ac8
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8014a4c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014a50:	49b9      	ldr	r1, [pc, #740]	; (8014d38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7f7 fd1f 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014a58:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8014a5c:	f107 0308 	add.w	r3, r7, #8
 8014a60:	4611      	mov	r1, r2
 8014a62:	4618      	mov	r0, r3
 8014a64:	f7f7 fddb 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 8014a68:	4603      	mov	r3, r0
 8014a6a:	461d      	mov	r5, r3
 8014a6c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7f8 f8c8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014a76:	2d00      	cmp	r5, #0
 8014a78:	d009      	beq.n	8014a8e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	6859      	ldr	r1, [r3, #4]
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	689a      	ldr	r2, [r3, #8]
 8014a82:	f107 0310 	add.w	r3, r7, #16
 8014a86:	6878      	ldr	r0, [r7, #4]
 8014a88:	f000 fccc 	bl	8015424 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8014a8c:	e1b4      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8014a8e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014a92:	49aa      	ldr	r1, [pc, #680]	; (8014d3c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 8014a94:	4618      	mov	r0, r3
 8014a96:	f7f7 fcfe 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014a9a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8014a9e:	f107 0308 	add.w	r3, r7, #8
 8014aa2:	4611      	mov	r1, r2
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	f7f7 fdba 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 8014aaa:	4603      	mov	r3, r0
 8014aac:	461d      	mov	r5, r3
 8014aae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f7f8 f8a7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014ab8:	2d00      	cmp	r5, #0
 8014aba:	d009      	beq.n	8014ad0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	6859      	ldr	r1, [r3, #4]
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	689a      	ldr	r2, [r3, #8]
 8014ac4:	f107 0310 	add.w	r3, r7, #16
 8014ac8:	6878      	ldr	r0, [r7, #4]
 8014aca:	f000 fcf1 	bl	80154b0 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 8014ace:	e193      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 8014ad0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014ad4:	499a      	ldr	r1, [pc, #616]	; (8014d40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f7f7 fcdd 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014adc:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8014ae0:	f107 0308 	add.w	r3, r7, #8
 8014ae4:	4611      	mov	r1, r2
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f7f7 fd99 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 8014aec:	4603      	mov	r3, r0
 8014aee:	461d      	mov	r5, r3
 8014af0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014af4:	4618      	mov	r0, r3
 8014af6:	f7f8 f886 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014afa:	2d00      	cmp	r5, #0
 8014afc:	d009      	beq.n	8014b12 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	6859      	ldr	r1, [r3, #4]
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	689a      	ldr	r2, [r3, #8]
 8014b06:	f107 0310 	add.w	r3, r7, #16
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f000 fd16 	bl	801553c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8014b10:	e172      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8014b12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014b16:	498b      	ldr	r1, [pc, #556]	; (8014d44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f7f7 fcbc 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014b1e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8014b22:	f107 0308 	add.w	r3, r7, #8
 8014b26:	4611      	mov	r1, r2
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f7f7 fd78 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	461d      	mov	r5, r3
 8014b32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014b36:	4618      	mov	r0, r3
 8014b38:	f7f8 f865 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014b3c:	2d00      	cmp	r5, #0
 8014b3e:	d009      	beq.n	8014b54 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	6859      	ldr	r1, [r3, #4]
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	689a      	ldr	r2, [r3, #8]
 8014b48:	f107 0310 	add.w	r3, r7, #16
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f000 fd3d 	bl	80155cc <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8014b52:	e151      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8014b54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014b58:	497b      	ldr	r1, [pc, #492]	; (8014d48 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7f7 fc9b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014b60:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8014b64:	f107 0308 	add.w	r3, r7, #8
 8014b68:	4611      	mov	r1, r2
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f7f7 fd57 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 8014b70:	4603      	mov	r3, r0
 8014b72:	461d      	mov	r5, r3
 8014b74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7f8 f844 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014b7e:	2d00      	cmp	r5, #0
 8014b80:	d009      	beq.n	8014b96 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	6859      	ldr	r1, [r3, #4]
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	689a      	ldr	r2, [r3, #8]
 8014b8a:	f107 0310 	add.w	r3, r7, #16
 8014b8e:	6878      	ldr	r0, [r7, #4]
 8014b90:	f000 fd5e 	bl	8015650 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8014b94:	e130      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 8014b96:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014b9a:	496c      	ldr	r1, [pc, #432]	; (8014d4c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f7f7 fc7a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014ba2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8014ba6:	f107 0308 	add.w	r3, r7, #8
 8014baa:	4611      	mov	r1, r2
 8014bac:	4618      	mov	r0, r3
 8014bae:	f7f7 fd36 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	461d      	mov	r5, r3
 8014bb6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7f8 f823 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014bc0:	2d00      	cmp	r5, #0
 8014bc2:	d009      	beq.n	8014bd8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	6859      	ldr	r1, [r3, #4]
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	689a      	ldr	r2, [r3, #8]
 8014bcc:	f107 0310 	add.w	r3, r7, #16
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f000 fd83 	bl	80156dc <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 8014bd6:	e10f      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8014bd8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8014bdc:	495c      	ldr	r1, [pc, #368]	; (8014d50 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7f7 fc59 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014be4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8014be8:	f107 0308 	add.w	r3, r7, #8
 8014bec:	4611      	mov	r1, r2
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f7f7 fd15 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	461d      	mov	r5, r3
 8014bf8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f7f8 f802 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014c02:	2d00      	cmp	r5, #0
 8014c04:	d009      	beq.n	8014c1a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	6859      	ldr	r1, [r3, #4]
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	689a      	ldr	r2, [r3, #8]
 8014c0e:	f107 0310 	add.w	r3, r7, #16
 8014c12:	6878      	ldr	r0, [r7, #4]
 8014c14:	f000 fda8 	bl	8015768 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8014c18:	e0ee      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8014c1a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014c1e:	494d      	ldr	r1, [pc, #308]	; (8014d54 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8014c20:	4618      	mov	r0, r3
 8014c22:	f7f7 fc38 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014c26:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8014c2a:	f107 0308 	add.w	r3, r7, #8
 8014c2e:	4611      	mov	r1, r2
 8014c30:	4618      	mov	r0, r3
 8014c32:	f7f7 fcf4 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 8014c36:	4603      	mov	r3, r0
 8014c38:	461d      	mov	r5, r3
 8014c3a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7f7 ffe1 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014c44:	2d00      	cmp	r5, #0
 8014c46:	d00c      	beq.n	8014c62 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	6859      	ldr	r1, [r3, #4]
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	689a      	ldr	r2, [r3, #8]
 8014c50:	f107 0310 	add.w	r3, r7, #16
 8014c54:	6878      	ldr	r0, [r7, #4]
 8014c56:	f000 fa29 	bl	80150ac <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014c60:	e0ca      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8014c62:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8014c66:	493c      	ldr	r1, [pc, #240]	; (8014d58 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8014c68:	4618      	mov	r0, r3
 8014c6a:	f7f7 fc14 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014c6e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8014c72:	f107 0308 	add.w	r3, r7, #8
 8014c76:	4611      	mov	r1, r2
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f7f7 fcd0 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	461d      	mov	r5, r3
 8014c82:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8014c86:	4618      	mov	r0, r3
 8014c88:	f7f7 ffbd 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014c8c:	2d00      	cmp	r5, #0
 8014c8e:	d00b      	beq.n	8014ca8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6859      	ldr	r1, [r3, #4]
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	689a      	ldr	r2, [r3, #8]
 8014c98:	f107 0310 	add.w	r3, r7, #16
 8014c9c:	482e      	ldr	r0, [pc, #184]	; (8014d58 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8014c9e:	9000      	str	r0, [sp, #0]
 8014ca0:	6878      	ldr	r0, [r7, #4]
 8014ca2:	f000 fda9 	bl	80157f8 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8014ca6:	e0a7      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8014ca8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014cac:	492b      	ldr	r1, [pc, #172]	; (8014d5c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7f7 fbf1 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014cb4:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8014cb8:	f107 0308 	add.w	r3, r7, #8
 8014cbc:	4611      	mov	r1, r2
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	f7f7 fcad 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	461d      	mov	r5, r3
 8014cc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7f7 ff9a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014cd2:	2d00      	cmp	r5, #0
 8014cd4:	d00b      	beq.n	8014cee <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6859      	ldr	r1, [r3, #4]
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	689a      	ldr	r2, [r3, #8]
 8014cde:	f107 0310 	add.w	r3, r7, #16
 8014ce2:	481e      	ldr	r0, [pc, #120]	; (8014d5c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8014ce4:	9000      	str	r0, [sp, #0]
 8014ce6:	6878      	ldr	r0, [r7, #4]
 8014ce8:	f000 fd86 	bl	80157f8 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8014cec:	e084      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 8014cee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8014cf2:	491b      	ldr	r1, [pc, #108]	; (8014d60 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f7f7 fbce 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014cfa:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8014cfe:	f107 0308 	add.w	r3, r7, #8
 8014d02:	4611      	mov	r1, r2
 8014d04:	4618      	mov	r0, r3
 8014d06:	f7f7 fc8a 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	461d      	mov	r5, r3
 8014d0e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8014d12:	4618      	mov	r0, r3
 8014d14:	f7f7 ff77 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014d18:	2d00      	cmp	r5, #0
 8014d1a:	d023      	beq.n	8014d64 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	6859      	ldr	r1, [r3, #4]
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	689a      	ldr	r2, [r3, #8]
 8014d24:	f107 0310 	add.w	r3, r7, #16
 8014d28:	6878      	ldr	r0, [r7, #4]
 8014d2a:	f000 fe3b 	bl	80159a4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014d34:	e060      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8014d36:	bf00      	nop
 8014d38:	08024acc 	.word	0x08024acc
 8014d3c:	08024ad0 	.word	0x08024ad0
 8014d40:	08024ad4 	.word	0x08024ad4
 8014d44:	08024adc 	.word	0x08024adc
 8014d48:	08024ae0 	.word	0x08024ae0
 8014d4c:	08024ae4 	.word	0x08024ae4
 8014d50:	08024ae8 	.word	0x08024ae8
 8014d54:	08024af0 	.word	0x08024af0
 8014d58:	08024af4 	.word	0x08024af4
 8014d5c:	08024afc 	.word	0x08024afc
 8014d60:	08024b0c 	.word	0x08024b0c
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8014d64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8014d68:	4930      	ldr	r1, [pc, #192]	; (8014e2c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f7f7 fb93 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014d70:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8014d74:	f107 0308 	add.w	r3, r7, #8
 8014d78:	4611      	mov	r1, r2
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	f7f7 fc4f 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 8014d80:	4603      	mov	r3, r0
 8014d82:	461d      	mov	r5, r3
 8014d84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f7f7 ff3c 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014d8e:	2d00      	cmp	r5, #0
 8014d90:	d00e      	beq.n	8014db0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 8014d92:	683b      	ldr	r3, [r7, #0]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	331c      	adds	r3, #28
 8014d98:	681d      	ldr	r5, [r3, #0]
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	6859      	ldr	r1, [r3, #4]
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	689a      	ldr	r2, [r3, #8]
 8014da2:	693b      	ldr	r3, [r7, #16]
 8014da4:	6838      	ldr	r0, [r7, #0]
 8014da6:	47a8      	blx	r5
 8014da8:	4603      	mov	r3, r0
 8014daa:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014dae:	e023      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8014db0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8014db4:	491e      	ldr	r1, [pc, #120]	; (8014e30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 8014db6:	4618      	mov	r0, r3
 8014db8:	f7f7 fb6d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8014dbc:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8014dc0:	f107 0308 	add.w	r3, r7, #8
 8014dc4:	4611      	mov	r1, r2
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f7f7 fc29 	bl	800c61e <_ZNK12SimpleString10startsWithERKS_>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	461d      	mov	r5, r3
 8014dd0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	f7f7 ff16 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014dda:	2d00      	cmp	r5, #0
 8014ddc:	d009      	beq.n	8014df2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	6859      	ldr	r1, [r3, #4]
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	689a      	ldr	r2, [r3, #8]
 8014de6:	f107 0310 	add.w	r3, r7, #16
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	f000 fd98 	bl	8015920 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8014df0:	e002      	b.n	8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8014df2:	2300      	movs	r3, #0
 8014df4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8014df8:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d102      	bne.n	8014e06 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8014e00:	2400      	movs	r4, #0
 8014e02:	2500      	movs	r5, #0
 8014e04:	e000      	b.n	8014e08 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 8014e06:	2501      	movs	r5, #1
 8014e08:	f107 0308 	add.w	r3, r7, #8
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f7f7 fefa 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8014e12:	2d01      	cmp	r5, #1
 8014e14:	d104      	bne.n	8014e20 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 8014e16:	693b      	ldr	r3, [r7, #16]
 8014e18:	3301      	adds	r3, #1
 8014e1a:	613b      	str	r3, [r7, #16]
 8014e1c:	e455      	b.n	80146ca <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8014e1e:	2401      	movs	r4, #1
 8014e20:	4623      	mov	r3, r4
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	37f0      	adds	r7, #240	; 0xf0
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bdb0      	pop	{r4, r5, r7, pc}
 8014e2a:	bf00      	nop
 8014e2c:	08024aa4 	.word	0x08024aa4
 8014e30:	08024b10 	.word	0x08024b10

08014e34 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8014e34:	b480      	push	{r7}
 8014e36:	b083      	sub	sp, #12
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8014e3c:	4b03      	ldr	r3, [pc, #12]	; (8014e4c <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	370c      	adds	r7, #12
 8014e42:	46bd      	mov	sp, r7
 8014e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e48:	4770      	bx	lr
 8014e4a:	bf00      	nop
 8014e4c:	08024b14 	.word	0x08024b14

08014e50 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8014e50:	b480      	push	{r7}
 8014e52:	b083      	sub	sp, #12
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8014e58:	4b03      	ldr	r3, [pc, #12]	; (8014e68 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	370c      	adds	r7, #12
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e64:	4770      	bx	lr
 8014e66:	bf00      	nop
 8014e68:	08024c44 	.word	0x08024c44

08014e6c <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8014e6c:	b480      	push	{r7}
 8014e6e:	b083      	sub	sp, #12
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	7b1b      	ldrb	r3, [r3, #12]
}
 8014e78:	4618      	mov	r0, r3
 8014e7a:	370c      	adds	r7, #12
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e82:	4770      	bx	lr

08014e84 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8014e84:	b480      	push	{r7}
 8014e86:	b083      	sub	sp, #12
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
    return verbose_;
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	7b5b      	ldrb	r3, [r3, #13]
}
 8014e90:	4618      	mov	r0, r3
 8014e92:	370c      	adds	r7, #12
 8014e94:	46bd      	mov	sp, r7
 8014e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9a:	4770      	bx	lr

08014e9c <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8014e9c:	b480      	push	{r7}
 8014e9e:	b083      	sub	sp, #12
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	7b9b      	ldrb	r3, [r3, #14]
}
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	370c      	adds	r7, #12
 8014eac:	46bd      	mov	sp, r7
 8014eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb2:	4770      	bx	lr

08014eb4 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8014eb4:	b480      	push	{r7}
 8014eb6:	b083      	sub	sp, #12
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
    return color_;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	7bdb      	ldrb	r3, [r3, #15]
}
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	370c      	adds	r7, #12
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eca:	4770      	bx	lr

08014ecc <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 8014ecc:	b480      	push	{r7}
 8014ece:	b083      	sub	sp, #12
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	7c5b      	ldrb	r3, [r3, #17]
}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	370c      	adds	r7, #12
 8014edc:	46bd      	mov	sp, r7
 8014ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee2:	4770      	bx	lr

08014ee4 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8014ee4:	b480      	push	{r7}
 8014ee6:	b083      	sub	sp, #12
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	7c9b      	ldrb	r3, [r3, #18]
}
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	370c      	adds	r7, #12
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efa:	4770      	bx	lr

08014efc <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8014efc:	b480      	push	{r7}
 8014efe:	b083      	sub	sp, #12
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	7cdb      	ldrb	r3, [r3, #19]
}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	370c      	adds	r7, #12
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f12:	4770      	bx	lr

08014f14 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8014f14:	b480      	push	{r7}
 8014f16:	b083      	sub	sp, #12
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	7d1b      	ldrb	r3, [r3, #20]
}
 8014f20:	4618      	mov	r0, r3
 8014f22:	370c      	adds	r7, #12
 8014f24:	46bd      	mov	sp, r7
 8014f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2a:	4770      	bx	lr

08014f2c <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	b083      	sub	sp, #12
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	7c1b      	ldrb	r3, [r3, #16]
}
 8014f38:	4618      	mov	r0, r3
 8014f3a:	370c      	adds	r7, #12
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f42:	4770      	bx	lr

08014f44 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8014f44:	b480      	push	{r7}
 8014f46:	b083      	sub	sp, #12
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
    return repeat_;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	69db      	ldr	r3, [r3, #28]
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	370c      	adds	r7, #12
 8014f54:	46bd      	mov	sp, r7
 8014f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5a:	4770      	bx	lr

08014f5c <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8014f5c:	b480      	push	{r7}
 8014f5e:	b083      	sub	sp, #12
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
    return reversing_;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	7d5b      	ldrb	r3, [r3, #21]
}
 8014f68:	4618      	mov	r0, r3
 8014f6a:	370c      	adds	r7, #12
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f72:	4770      	bx	lr

08014f74 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8014f74:	b480      	push	{r7}
 8014f76:	b083      	sub	sp, #12
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	7d9b      	ldrb	r3, [r3, #22]
}
 8014f80:	4618      	mov	r0, r3
 8014f82:	370c      	adds	r7, #12
 8014f84:	46bd      	mov	sp, r7
 8014f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8a:	4770      	bx	lr

08014f8c <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 8014f8c:	b480      	push	{r7}
 8014f8e:	b083      	sub	sp, #12
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	7ddb      	ldrb	r3, [r3, #23]
}
 8014f98:	4618      	mov	r0, r3
 8014f9a:	370c      	adds	r7, #12
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa2:	4770      	bx	lr

08014fa4 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8014fa4:	b480      	push	{r7}
 8014fa6:	b083      	sub	sp, #12
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	6a1b      	ldr	r3, [r3, #32]
}
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	370c      	adds	r7, #12
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fba:	4770      	bx	lr

08014fbc <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8014fbc:	b480      	push	{r7}
 8014fbe:	b083      	sub	sp, #12
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8014fc8:	4618      	mov	r0, r3
 8014fca:	370c      	adds	r7, #12
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd2:	4770      	bx	lr

08014fd4 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8014fd4:	b480      	push	{r7}
 8014fd6:	b083      	sub	sp, #12
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	370c      	adds	r7, #12
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fea:	4770      	bx	lr

08014fec <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b086      	sub	sp, #24
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	60f8      	str	r0, [r7, #12]
 8014ff4:	60b9      	str	r1, [r7, #8]
 8014ff6:	607a      	str	r2, [r7, #4]
 8014ff8:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8015000:	683b      	ldr	r3, [r7, #0]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	009b      	lsls	r3, r3, #2
 8015006:	687a      	ldr	r2, [r7, #4]
 8015008:	4413      	add	r3, r2
 801500a:	681a      	ldr	r2, [r3, #0]
 801500c:	f107 0310 	add.w	r3, r7, #16
 8015010:	4611      	mov	r1, r2
 8015012:	4618      	mov	r0, r3
 8015014:	f7f7 fa3f 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8015018:	f107 0310 	add.w	r3, r7, #16
 801501c:	4618      	mov	r0, r3
 801501e:	f7f7 fdd1 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 8015022:	4603      	mov	r3, r0
 8015024:	2b02      	cmp	r3, #2
 8015026:	bf8c      	ite	hi
 8015028:	2301      	movhi	r3, #1
 801502a:	2300      	movls	r3, #0
 801502c:	b2db      	uxtb	r3, r3
 801502e:	2b00      	cmp	r3, #0
 8015030:	d00e      	beq.n	8015050 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 8015032:	683b      	ldr	r3, [r7, #0]
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	009b      	lsls	r3, r3, #2
 8015038:	687a      	ldr	r2, [r7, #4]
 801503a:	4413      	add	r3, r2
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	3302      	adds	r3, #2
 8015040:	4618      	mov	r0, r3
 8015042:	f7f7 f824 	bl	800c08e <_ZN12SimpleString4AtoIEPKc>
 8015046:	4603      	mov	r3, r0
 8015048:	461a      	mov	r2, r3
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	61da      	str	r2, [r3, #28]
 801504e:	e01c      	b.n	801508a <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8015050:	683b      	ldr	r3, [r7, #0]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	3301      	adds	r3, #1
 8015056:	68ba      	ldr	r2, [r7, #8]
 8015058:	429a      	cmp	r2, r3
 801505a:	dd16      	ble.n	801508a <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	3301      	adds	r3, #1
 8015062:	009b      	lsls	r3, r3, #2
 8015064:	687a      	ldr	r2, [r7, #4]
 8015066:	4413      	add	r3, r2
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	4618      	mov	r0, r3
 801506c:	f7f7 f80f 	bl	800c08e <_ZN12SimpleString4AtoIEPKc>
 8015070:	4603      	mov	r3, r0
 8015072:	461a      	mov	r2, r3
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	69db      	ldr	r3, [r3, #28]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d004      	beq.n	801508a <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	1c5a      	adds	r2, r3, #1
 8015086:	683b      	ldr	r3, [r7, #0]
 8015088:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	69db      	ldr	r3, [r3, #28]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d102      	bne.n	8015098 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	2202      	movs	r2, #2
 8015096:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8015098:	f107 0310 	add.w	r3, r7, #16
 801509c:	4618      	mov	r0, r3
 801509e:	f7f7 fdb2 	bl	800cc06 <_ZN12SimpleStringD1Ev>

}
 80150a2:	bf00      	nop
 80150a4:	3718      	adds	r7, #24
 80150a6:	46bd      	mov	sp, r7
 80150a8:	bd80      	pop	{r7, pc}
	...

080150ac <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 80150ac:	b590      	push	{r4, r7, lr}
 80150ae:	b089      	sub	sp, #36	; 0x24
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	60f8      	str	r0, [r7, #12]
 80150b4:	60b9      	str	r1, [r7, #8]
 80150b6:	607a      	str	r2, [r7, #4]
 80150b8:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	2201      	movs	r2, #1
 80150be:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 80150c0:	4b34      	ldr	r3, [pc, #208]	; (8015194 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	4798      	blx	r3
 80150c6:	4603      	mov	r3, r0
 80150c8:	461a      	mov	r2, r3
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	6a1b      	ldr	r3, [r3, #32]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d104      	bne.n	80150e0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	6a1b      	ldr	r3, [r3, #32]
 80150da:	1c5a      	adds	r2, r3, #1
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 80150e0:	683b      	ldr	r3, [r7, #0]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	009b      	lsls	r3, r3, #2
 80150e6:	687a      	ldr	r2, [r7, #4]
 80150e8:	4413      	add	r3, r2
 80150ea:	681a      	ldr	r2, [r3, #0]
 80150ec:	f107 0314 	add.w	r3, r7, #20
 80150f0:	4611      	mov	r1, r2
 80150f2:	4618      	mov	r0, r3
 80150f4:	f7f7 f9cf 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 80150f8:	f107 0314 	add.w	r3, r7, #20
 80150fc:	4618      	mov	r0, r3
 80150fe:	f7f7 fd61 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 8015102:	4603      	mov	r3, r0
 8015104:	2b02      	cmp	r3, #2
 8015106:	bf8c      	ite	hi
 8015108:	2301      	movhi	r3, #1
 801510a:	2300      	movls	r3, #0
 801510c:	b2db      	uxtb	r3, r3
 801510e:	2b00      	cmp	r3, #0
 8015110:	d010      	beq.n	8015134 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	2201      	movs	r2, #1
 8015116:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8015118:	683b      	ldr	r3, [r7, #0]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	009b      	lsls	r3, r3, #2
 801511e:	687a      	ldr	r2, [r7, #4]
 8015120:	4413      	add	r3, r2
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	3302      	adds	r3, #2
 8015126:	4618      	mov	r0, r3
 8015128:	f7f6 ff78 	bl	800c01c <_ZN12SimpleString4AtoUEPKc>
 801512c:	4602      	mov	r2, r0
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	621a      	str	r2, [r3, #32]
 8015132:	e01e      	b.n	8015172 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8015134:	683b      	ldr	r3, [r7, #0]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	3301      	adds	r3, #1
 801513a:	68ba      	ldr	r2, [r7, #8]
 801513c:	429a      	cmp	r2, r3
 801513e:	dd18      	ble.n	8015172 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8015140:	683b      	ldr	r3, [r7, #0]
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	3301      	adds	r3, #1
 8015146:	009b      	lsls	r3, r3, #2
 8015148:	687a      	ldr	r2, [r7, #4]
 801514a:	4413      	add	r3, r2
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	4618      	mov	r0, r3
 8015150:	f7f6 ff64 	bl	800c01c <_ZN12SimpleString4AtoUEPKc>
 8015154:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 8015156:	69fb      	ldr	r3, [r7, #28]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d00a      	beq.n	8015172 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	2201      	movs	r2, #1
 8015160:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	69fa      	ldr	r2, [r7, #28]
 8015166:	621a      	str	r2, [r3, #32]
            i++;
 8015168:	683b      	ldr	r3, [r7, #0]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	1c5a      	adds	r2, r3, #1
 801516e:	683b      	ldr	r3, [r7, #0]
 8015170:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	6a1b      	ldr	r3, [r3, #32]
 8015176:	2b00      	cmp	r3, #0
 8015178:	bf14      	ite	ne
 801517a:	2301      	movne	r3, #1
 801517c:	2300      	moveq	r3, #0
 801517e:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8015180:	f107 0314 	add.w	r3, r7, #20
 8015184:	4618      	mov	r0, r3
 8015186:	f7f7 fd3e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 801518a:	4623      	mov	r3, r4
}
 801518c:	4618      	mov	r0, r3
 801518e:	3724      	adds	r7, #36	; 0x24
 8015190:	46bd      	mov	sp, r7
 8015192:	bd90      	pop	{r4, r7, pc}
 8015194:	200000a8 	.word	0x200000a8

08015198 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b088      	sub	sp, #32
 801519c:	af00      	add	r7, sp, #0
 801519e:	60f8      	str	r0, [r7, #12]
 80151a0:	60b9      	str	r1, [r7, #8]
 80151a2:	607a      	str	r2, [r7, #4]
 80151a4:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 80151a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80151a8:	f7f7 fd0c 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 80151ac:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 80151ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	009b      	lsls	r3, r3, #2
 80151b4:	683a      	ldr	r2, [r7, #0]
 80151b6:	4413      	add	r3, r2
 80151b8:	681a      	ldr	r2, [r3, #0]
 80151ba:	f107 0314 	add.w	r3, r7, #20
 80151be:	4611      	mov	r1, r2
 80151c0:	4618      	mov	r0, r3
 80151c2:	f7f7 f968 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 80151c6:	f107 0314 	add.w	r3, r7, #20
 80151ca:	4618      	mov	r0, r3
 80151cc:	f7f7 fcfa 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 80151d0:	4602      	mov	r2, r0
 80151d2:	69fb      	ldr	r3, [r7, #28]
 80151d4:	4293      	cmp	r3, r2
 80151d6:	bf34      	ite	cc
 80151d8:	2301      	movcc	r3, #1
 80151da:	2300      	movcs	r3, #0
 80151dc:	b2db      	uxtb	r3, r3
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d00c      	beq.n	80151fc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 80151e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	009b      	lsls	r3, r3, #2
 80151e8:	683a      	ldr	r2, [r7, #0]
 80151ea:	4413      	add	r3, r2
 80151ec:	681a      	ldr	r2, [r3, #0]
 80151ee:	69fb      	ldr	r3, [r7, #28]
 80151f0:	4413      	add	r3, r2
 80151f2:	4619      	mov	r1, r3
 80151f4:	68f8      	ldr	r0, [r7, #12]
 80151f6:	f7f7 f94e 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80151fa:	e019      	b.n	8015230 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 80151fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	3301      	adds	r3, #1
 8015202:	687a      	ldr	r2, [r7, #4]
 8015204:	429a      	cmp	r2, r3
 8015206:	dd0f      	ble.n	8015228 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8015208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	1c5a      	adds	r2, r3, #1
 801520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015210:	601a      	str	r2, [r3, #0]
 8015212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	009b      	lsls	r3, r3, #2
 8015218:	683a      	ldr	r2, [r7, #0]
 801521a:	4413      	add	r3, r2
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	4619      	mov	r1, r3
 8015220:	68f8      	ldr	r0, [r7, #12]
 8015222:	f7f7 f938 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8015226:	e003      	b.n	8015230 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8015228:	4906      	ldr	r1, [pc, #24]	; (8015244 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 801522a:	68f8      	ldr	r0, [r7, #12]
 801522c:	f7f7 f933 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8015230:	f107 0314 	add.w	r3, r7, #20
 8015234:	4618      	mov	r0, r3
 8015236:	f7f7 fce6 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 801523a:	68f8      	ldr	r0, [r7, #12]
 801523c:	3720      	adds	r7, #32
 801523e:	46bd      	mov	sp, r7
 8015240:	bd80      	pop	{r7, pc}
 8015242:	bf00      	nop
 8015244:	08024a90 	.word	0x08024a90

08015248 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8015248:	b5b0      	push	{r4, r5, r7, lr}
 801524a:	b08c      	sub	sp, #48	; 0x30
 801524c:	af02      	add	r7, sp, #8
 801524e:	60f8      	str	r0, [r7, #12]
 8015250:	60b9      	str	r1, [r7, #8]
 8015252:	607a      	str	r2, [r7, #4]
 8015254:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8015256:	f107 031c 	add.w	r3, r7, #28
 801525a:	491a      	ldr	r1, [pc, #104]	; (80152c4 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 801525c:	4618      	mov	r0, r3
 801525e:	f7f7 f91a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8015262:	f107 0014 	add.w	r0, r7, #20
 8015266:	f107 031c 	add.w	r3, r7, #28
 801526a:	9301      	str	r3, [sp, #4]
 801526c:	683b      	ldr	r3, [r7, #0]
 801526e:	9300      	str	r3, [sp, #0]
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	68ba      	ldr	r2, [r7, #8]
 8015274:	68f9      	ldr	r1, [r7, #12]
 8015276:	f7ff ff8f 	bl	8015198 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801527a:	f107 0514 	add.w	r5, r7, #20
 801527e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8015282:	4911      	ldr	r1, [pc, #68]	; (80152c8 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8015284:	2010      	movs	r0, #16
 8015286:	f7f4 fd43 	bl	8009d10 <_ZnwjPKci>
 801528a:	4604      	mov	r4, r0
 801528c:	4629      	mov	r1, r5
 801528e:	4620      	mov	r0, r4
 8015290:	f009 ff40 	bl	801f114 <_ZN10TestFilterC1ERK12SimpleString>
 8015294:	627c      	str	r4, [r7, #36]	; 0x24
 8015296:	f107 0314 	add.w	r3, r7, #20
 801529a:	4618      	mov	r0, r3
 801529c:	f7f7 fcb3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80152a0:	f107 031c 	add.w	r3, r7, #28
 80152a4:	4618      	mov	r0, r3
 80152a6:	f7f7 fcae 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152ae:	4619      	mov	r1, r3
 80152b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80152b2:	f009 ff4f 	bl	801f154 <_ZN10TestFilter3addEPS_>
 80152b6:	4602      	mov	r2, r0
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80152bc:	bf00      	nop
 80152be:	3728      	adds	r7, #40	; 0x28
 80152c0:	46bd      	mov	sp, r7
 80152c2:	bdb0      	pop	{r4, r5, r7, pc}
 80152c4:	08024ac4 	.word	0x08024ac4
 80152c8:	08025458 	.word	0x08025458

080152cc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 80152cc:	b5b0      	push	{r4, r5, r7, lr}
 80152ce:	b092      	sub	sp, #72	; 0x48
 80152d0:	af02      	add	r7, sp, #8
 80152d2:	60f8      	str	r0, [r7, #12]
 80152d4:	60b9      	str	r1, [r7, #8]
 80152d6:	607a      	str	r2, [r7, #4]
 80152d8:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80152da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80152de:	494e      	ldr	r1, [pc, #312]	; (8015418 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 80152e0:	4618      	mov	r0, r3
 80152e2:	f7f7 f8d8 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80152e6:	f107 0020 	add.w	r0, r7, #32
 80152ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80152ee:	9301      	str	r3, [sp, #4]
 80152f0:	683b      	ldr	r3, [r7, #0]
 80152f2:	9300      	str	r3, [sp, #0]
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	68ba      	ldr	r2, [r7, #8]
 80152f8:	68f9      	ldr	r1, [r7, #12]
 80152fa:	f7ff ff4d 	bl	8015198 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80152fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015302:	4618      	mov	r0, r3
 8015304:	f7f7 fc7f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8015308:	f107 0310 	add.w	r3, r7, #16
 801530c:	4618      	mov	r0, r3
 801530e:	f7f8 fb8f 	bl	800da30 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8015312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015316:	4941      	ldr	r1, [pc, #260]	; (801541c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8015318:	4618      	mov	r0, r3
 801531a:	f7f7 f8bc 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801531e:	f107 0210 	add.w	r2, r7, #16
 8015322:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015326:	f107 0320 	add.w	r3, r7, #32
 801532a:	4618      	mov	r0, r3
 801532c:	f7f7 fa1f 	bl	800c76e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8015330:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015334:	4618      	mov	r0, r3
 8015336:	f7f7 fc66 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 801533a:	f107 0310 	add.w	r3, r7, #16
 801533e:	4618      	mov	r0, r3
 8015340:	f7f8 fc1b 	bl	800db7a <_ZNK22SimpleStringCollection4sizeEv>
 8015344:	4603      	mov	r3, r0
 8015346:	2b02      	cmp	r3, #2
 8015348:	bf14      	ite	ne
 801534a:	2301      	movne	r3, #1
 801534c:	2300      	moveq	r3, #0
 801534e:	b2db      	uxtb	r3, r3
 8015350:	2b00      	cmp	r3, #0
 8015352:	d001      	beq.n	8015358 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8015354:	2400      	movs	r4, #0
 8015356:	e04f      	b.n	80153f8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8015358:	f107 0310 	add.w	r3, r7, #16
 801535c:	2100      	movs	r1, #0
 801535e:	4618      	mov	r0, r3
 8015360:	f7f8 fc18 	bl	800db94 <_ZN22SimpleStringCollectionixEj>
 8015364:	4604      	mov	r4, r0
 8015366:	f107 0310 	add.w	r3, r7, #16
 801536a:	2100      	movs	r1, #0
 801536c:	4618      	mov	r0, r3
 801536e:	f7f8 fc11 	bl	800db94 <_ZN22SimpleStringCollectionixEj>
 8015372:	4603      	mov	r3, r0
 8015374:	4618      	mov	r0, r3
 8015376:	f7f7 fc25 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 801537a:	4603      	mov	r3, r0
 801537c:	3b01      	subs	r3, #1
 801537e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8015382:	2200      	movs	r2, #0
 8015384:	4621      	mov	r1, r4
 8015386:	f7f7 fd47 	bl	800ce18 <_ZNK12SimpleString9subStringEjj>
 801538a:	f107 0538 	add.w	r5, r7, #56	; 0x38
 801538e:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8015392:	4923      	ldr	r1, [pc, #140]	; (8015420 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8015394:	2010      	movs	r0, #16
 8015396:	f7f4 fcbb 	bl	8009d10 <_ZnwjPKci>
 801539a:	4604      	mov	r4, r0
 801539c:	4629      	mov	r1, r5
 801539e:	4620      	mov	r0, r4
 80153a0:	f009 feb8 	bl	801f114 <_ZN10TestFilterC1ERK12SimpleString>
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153a8:	4619      	mov	r1, r3
 80153aa:	4620      	mov	r0, r4
 80153ac:	f009 fed2 	bl	801f154 <_ZN10TestFilter3addEPS_>
 80153b0:	4602      	mov	r2, r0
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	625a      	str	r2, [r3, #36]	; 0x24
 80153b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80153ba:	4618      	mov	r0, r3
 80153bc:	f7f7 fc23 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 80153c0:	f107 0310 	add.w	r3, r7, #16
 80153c4:	2101      	movs	r1, #1
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7f8 fbe4 	bl	800db94 <_ZN22SimpleStringCollectionixEj>
 80153cc:	4605      	mov	r5, r0
 80153ce:	f240 121f 	movw	r2, #287	; 0x11f
 80153d2:	4913      	ldr	r1, [pc, #76]	; (8015420 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80153d4:	2010      	movs	r0, #16
 80153d6:	f7f4 fc9b 	bl	8009d10 <_ZnwjPKci>
 80153da:	4604      	mov	r4, r0
 80153dc:	4629      	mov	r1, r5
 80153de:	4620      	mov	r0, r4
 80153e0:	f009 fe98 	bl	801f114 <_ZN10TestFilterC1ERK12SimpleString>
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153e8:	4619      	mov	r1, r3
 80153ea:	4620      	mov	r0, r4
 80153ec:	f009 feb2 	bl	801f154 <_ZN10TestFilter3addEPS_>
 80153f0:	4602      	mov	r2, r0
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 80153f6:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 80153f8:	f107 0310 	add.w	r3, r7, #16
 80153fc:	4618      	mov	r0, r3
 80153fe:	f7f8 fb8b 	bl	800db18 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8015402:	f107 0320 	add.w	r3, r7, #32
 8015406:	4618      	mov	r0, r3
 8015408:	f7f7 fbfd 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801540c:	4623      	mov	r3, r4
}
 801540e:	4618      	mov	r0, r3
 8015410:	3740      	adds	r7, #64	; 0x40
 8015412:	46bd      	mov	sp, r7
 8015414:	bdb0      	pop	{r4, r5, r7, pc}
 8015416:	bf00      	nop
 8015418:	08024ac8 	.word	0x08024ac8
 801541c:	08025478 	.word	0x08025478
 8015420:	08025458 	.word	0x08025458

08015424 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8015424:	b5b0      	push	{r4, r5, r7, lr}
 8015426:	b08c      	sub	sp, #48	; 0x30
 8015428:	af02      	add	r7, sp, #8
 801542a:	60f8      	str	r0, [r7, #12]
 801542c:	60b9      	str	r1, [r7, #8]
 801542e:	607a      	str	r2, [r7, #4]
 8015430:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8015432:	f107 031c 	add.w	r3, r7, #28
 8015436:	491c      	ldr	r1, [pc, #112]	; (80154a8 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8015438:	4618      	mov	r0, r3
 801543a:	f7f7 f82c 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801543e:	f107 0014 	add.w	r0, r7, #20
 8015442:	f107 031c 	add.w	r3, r7, #28
 8015446:	9301      	str	r3, [sp, #4]
 8015448:	683b      	ldr	r3, [r7, #0]
 801544a:	9300      	str	r3, [sp, #0]
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	68ba      	ldr	r2, [r7, #8]
 8015450:	68f9      	ldr	r1, [r7, #12]
 8015452:	f7ff fea1 	bl	8015198 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015456:	f107 0514 	add.w	r5, r7, #20
 801545a:	f240 1225 	movw	r2, #293	; 0x125
 801545e:	4913      	ldr	r1, [pc, #76]	; (80154ac <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8015460:	2010      	movs	r0, #16
 8015462:	f7f4 fc55 	bl	8009d10 <_ZnwjPKci>
 8015466:	4604      	mov	r4, r0
 8015468:	4629      	mov	r1, r5
 801546a:	4620      	mov	r0, r4
 801546c:	f009 fe52 	bl	801f114 <_ZN10TestFilterC1ERK12SimpleString>
 8015470:	627c      	str	r4, [r7, #36]	; 0x24
 8015472:	f107 0314 	add.w	r3, r7, #20
 8015476:	4618      	mov	r0, r3
 8015478:	f7f7 fbc5 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801547c:	f107 031c 	add.w	r3, r7, #28
 8015480:	4618      	mov	r0, r3
 8015482:	f7f7 fbc0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8015486:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015488:	f009 fe7f 	bl	801f18a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015490:	4619      	mov	r1, r3
 8015492:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015494:	f009 fe5e 	bl	801f154 <_ZN10TestFilter3addEPS_>
 8015498:	4602      	mov	r2, r0
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	625a      	str	r2, [r3, #36]	; 0x24
}
 801549e:	bf00      	nop
 80154a0:	3728      	adds	r7, #40	; 0x28
 80154a2:	46bd      	mov	sp, r7
 80154a4:	bdb0      	pop	{r4, r5, r7, pc}
 80154a6:	bf00      	nop
 80154a8:	08024acc 	.word	0x08024acc
 80154ac:	08025458 	.word	0x08025458

080154b0 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 80154b0:	b5b0      	push	{r4, r5, r7, lr}
 80154b2:	b08c      	sub	sp, #48	; 0x30
 80154b4:	af02      	add	r7, sp, #8
 80154b6:	60f8      	str	r0, [r7, #12]
 80154b8:	60b9      	str	r1, [r7, #8]
 80154ba:	607a      	str	r2, [r7, #4]
 80154bc:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 80154be:	f107 031c 	add.w	r3, r7, #28
 80154c2:	491c      	ldr	r1, [pc, #112]	; (8015534 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 80154c4:	4618      	mov	r0, r3
 80154c6:	f7f6 ffe6 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80154ca:	f107 0014 	add.w	r0, r7, #20
 80154ce:	f107 031c 	add.w	r3, r7, #28
 80154d2:	9301      	str	r3, [sp, #4]
 80154d4:	683b      	ldr	r3, [r7, #0]
 80154d6:	9300      	str	r3, [sp, #0]
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	68ba      	ldr	r2, [r7, #8]
 80154dc:	68f9      	ldr	r1, [r7, #12]
 80154de:	f7ff fe5b 	bl	8015198 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80154e2:	f107 0514 	add.w	r5, r7, #20
 80154e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80154ea:	4913      	ldr	r1, [pc, #76]	; (8015538 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 80154ec:	2010      	movs	r0, #16
 80154ee:	f7f4 fc0f 	bl	8009d10 <_ZnwjPKci>
 80154f2:	4604      	mov	r4, r0
 80154f4:	4629      	mov	r1, r5
 80154f6:	4620      	mov	r0, r4
 80154f8:	f009 fe0c 	bl	801f114 <_ZN10TestFilterC1ERK12SimpleString>
 80154fc:	627c      	str	r4, [r7, #36]	; 0x24
 80154fe:	f107 0314 	add.w	r3, r7, #20
 8015502:	4618      	mov	r0, r3
 8015504:	f7f7 fb7f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8015508:	f107 031c 	add.w	r3, r7, #28
 801550c:	4618      	mov	r0, r3
 801550e:	f7f7 fb7a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8015512:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015514:	f009 fe46 	bl	801f1a4 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801551c:	4619      	mov	r1, r3
 801551e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015520:	f009 fe18 	bl	801f154 <_ZN10TestFilter3addEPS_>
 8015524:	4602      	mov	r2, r0
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	625a      	str	r2, [r3, #36]	; 0x24
}
 801552a:	bf00      	nop
 801552c:	3728      	adds	r7, #40	; 0x28
 801552e:	46bd      	mov	sp, r7
 8015530:	bdb0      	pop	{r4, r5, r7, pc}
 8015532:	bf00      	nop
 8015534:	08024ad0 	.word	0x08024ad0
 8015538:	08025458 	.word	0x08025458

0801553c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 801553c:	b5b0      	push	{r4, r5, r7, lr}
 801553e:	b08c      	sub	sp, #48	; 0x30
 8015540:	af02      	add	r7, sp, #8
 8015542:	60f8      	str	r0, [r7, #12]
 8015544:	60b9      	str	r1, [r7, #8]
 8015546:	607a      	str	r2, [r7, #4]
 8015548:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 801554a:	f107 031c 	add.w	r3, r7, #28
 801554e:	491d      	ldr	r1, [pc, #116]	; (80155c4 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8015550:	4618      	mov	r0, r3
 8015552:	f7f6 ffa0 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8015556:	f107 0014 	add.w	r0, r7, #20
 801555a:	f107 031c 	add.w	r3, r7, #28
 801555e:	9301      	str	r3, [sp, #4]
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	9300      	str	r3, [sp, #0]
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	68ba      	ldr	r2, [r7, #8]
 8015568:	68f9      	ldr	r1, [r7, #12]
 801556a:	f7ff fe15 	bl	8015198 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801556e:	f107 0514 	add.w	r5, r7, #20
 8015572:	f240 1233 	movw	r2, #307	; 0x133
 8015576:	4914      	ldr	r1, [pc, #80]	; (80155c8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8015578:	2010      	movs	r0, #16
 801557a:	f7f4 fbc9 	bl	8009d10 <_ZnwjPKci>
 801557e:	4604      	mov	r4, r0
 8015580:	4629      	mov	r1, r5
 8015582:	4620      	mov	r0, r4
 8015584:	f009 fdc6 	bl	801f114 <_ZN10TestFilterC1ERK12SimpleString>
 8015588:	627c      	str	r4, [r7, #36]	; 0x24
 801558a:	f107 0314 	add.w	r3, r7, #20
 801558e:	4618      	mov	r0, r3
 8015590:	f7f7 fb39 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8015594:	f107 031c 	add.w	r3, r7, #28
 8015598:	4618      	mov	r0, r3
 801559a:	f7f7 fb34 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 801559e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155a0:	f009 fdf3 	bl	801f18a <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 80155a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155a6:	f009 fdfd 	bl	801f1a4 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155ae:	4619      	mov	r1, r3
 80155b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155b2:	f009 fdcf 	bl	801f154 <_ZN10TestFilter3addEPS_>
 80155b6:	4602      	mov	r2, r0
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80155bc:	bf00      	nop
 80155be:	3728      	adds	r7, #40	; 0x28
 80155c0:	46bd      	mov	sp, r7
 80155c2:	bdb0      	pop	{r4, r5, r7, pc}
 80155c4:	08024ad4 	.word	0x08024ad4
 80155c8:	08025458 	.word	0x08025458

080155cc <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 80155cc:	b5b0      	push	{r4, r5, r7, lr}
 80155ce:	b08c      	sub	sp, #48	; 0x30
 80155d0:	af02      	add	r7, sp, #8
 80155d2:	60f8      	str	r0, [r7, #12]
 80155d4:	60b9      	str	r1, [r7, #8]
 80155d6:	607a      	str	r2, [r7, #4]
 80155d8:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 80155da:	f107 031c 	add.w	r3, r7, #28
 80155de:	491a      	ldr	r1, [pc, #104]	; (8015648 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 80155e0:	4618      	mov	r0, r3
 80155e2:	f7f6 ff58 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80155e6:	f107 0014 	add.w	r0, r7, #20
 80155ea:	f107 031c 	add.w	r3, r7, #28
 80155ee:	9301      	str	r3, [sp, #4]
 80155f0:	683b      	ldr	r3, [r7, #0]
 80155f2:	9300      	str	r3, [sp, #0]
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	68ba      	ldr	r2, [r7, #8]
 80155f8:	68f9      	ldr	r1, [r7, #12]
 80155fa:	f7ff fdcd 	bl	8015198 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80155fe:	f107 0514 	add.w	r5, r7, #20
 8015602:	f240 123b 	movw	r2, #315	; 0x13b
 8015606:	4911      	ldr	r1, [pc, #68]	; (801564c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 8015608:	2010      	movs	r0, #16
 801560a:	f7f4 fb81 	bl	8009d10 <_ZnwjPKci>
 801560e:	4604      	mov	r4, r0
 8015610:	4629      	mov	r1, r5
 8015612:	4620      	mov	r0, r4
 8015614:	f009 fd7e 	bl	801f114 <_ZN10TestFilterC1ERK12SimpleString>
 8015618:	627c      	str	r4, [r7, #36]	; 0x24
 801561a:	f107 0314 	add.w	r3, r7, #20
 801561e:	4618      	mov	r0, r3
 8015620:	f7f7 faf1 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8015624:	f107 031c 	add.w	r3, r7, #28
 8015628:	4618      	mov	r0, r3
 801562a:	f7f7 faec 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015632:	4619      	mov	r1, r3
 8015634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015636:	f009 fd8d 	bl	801f154 <_ZN10TestFilter3addEPS_>
 801563a:	4602      	mov	r2, r0
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015640:	bf00      	nop
 8015642:	3728      	adds	r7, #40	; 0x28
 8015644:	46bd      	mov	sp, r7
 8015646:	bdb0      	pop	{r4, r5, r7, pc}
 8015648:	08024adc 	.word	0x08024adc
 801564c:	08025458 	.word	0x08025458

08015650 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8015650:	b5b0      	push	{r4, r5, r7, lr}
 8015652:	b08c      	sub	sp, #48	; 0x30
 8015654:	af02      	add	r7, sp, #8
 8015656:	60f8      	str	r0, [r7, #12]
 8015658:	60b9      	str	r1, [r7, #8]
 801565a:	607a      	str	r2, [r7, #4]
 801565c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 801565e:	f107 031c 	add.w	r3, r7, #28
 8015662:	491c      	ldr	r1, [pc, #112]	; (80156d4 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8015664:	4618      	mov	r0, r3
 8015666:	f7f6 ff16 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801566a:	f107 0014 	add.w	r0, r7, #20
 801566e:	f107 031c 	add.w	r3, r7, #28
 8015672:	9301      	str	r3, [sp, #4]
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	9300      	str	r3, [sp, #0]
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	68ba      	ldr	r2, [r7, #8]
 801567c:	68f9      	ldr	r1, [r7, #12]
 801567e:	f7ff fd8b 	bl	8015198 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015682:	f107 0514 	add.w	r5, r7, #20
 8015686:	f240 1241 	movw	r2, #321	; 0x141
 801568a:	4913      	ldr	r1, [pc, #76]	; (80156d8 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 801568c:	2010      	movs	r0, #16
 801568e:	f7f4 fb3f 	bl	8009d10 <_ZnwjPKci>
 8015692:	4604      	mov	r4, r0
 8015694:	4629      	mov	r1, r5
 8015696:	4620      	mov	r0, r4
 8015698:	f009 fd3c 	bl	801f114 <_ZN10TestFilterC1ERK12SimpleString>
 801569c:	627c      	str	r4, [r7, #36]	; 0x24
 801569e:	f107 0314 	add.w	r3, r7, #20
 80156a2:	4618      	mov	r0, r3
 80156a4:	f7f7 faaf 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80156a8:	f107 031c 	add.w	r3, r7, #28
 80156ac:	4618      	mov	r0, r3
 80156ae:	f7f7 faaa 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 80156b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80156b4:	f009 fd69 	bl	801f18a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156bc:	4619      	mov	r1, r3
 80156be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80156c0:	f009 fd48 	bl	801f154 <_ZN10TestFilter3addEPS_>
 80156c4:	4602      	mov	r2, r0
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80156ca:	bf00      	nop
 80156cc:	3728      	adds	r7, #40	; 0x28
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bdb0      	pop	{r4, r5, r7, pc}
 80156d2:	bf00      	nop
 80156d4:	08024ae0 	.word	0x08024ae0
 80156d8:	08025458 	.word	0x08025458

080156dc <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 80156dc:	b5b0      	push	{r4, r5, r7, lr}
 80156de:	b08c      	sub	sp, #48	; 0x30
 80156e0:	af02      	add	r7, sp, #8
 80156e2:	60f8      	str	r0, [r7, #12]
 80156e4:	60b9      	str	r1, [r7, #8]
 80156e6:	607a      	str	r2, [r7, #4]
 80156e8:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 80156ea:	f107 031c 	add.w	r3, r7, #28
 80156ee:	491c      	ldr	r1, [pc, #112]	; (8015760 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 80156f0:	4618      	mov	r0, r3
 80156f2:	f7f6 fed0 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80156f6:	f107 0014 	add.w	r0, r7, #20
 80156fa:	f107 031c 	add.w	r3, r7, #28
 80156fe:	9301      	str	r3, [sp, #4]
 8015700:	683b      	ldr	r3, [r7, #0]
 8015702:	9300      	str	r3, [sp, #0]
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	68ba      	ldr	r2, [r7, #8]
 8015708:	68f9      	ldr	r1, [r7, #12]
 801570a:	f7ff fd45 	bl	8015198 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801570e:	f107 0514 	add.w	r5, r7, #20
 8015712:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015716:	4913      	ldr	r1, [pc, #76]	; (8015764 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8015718:	2010      	movs	r0, #16
 801571a:	f7f4 faf9 	bl	8009d10 <_ZnwjPKci>
 801571e:	4604      	mov	r4, r0
 8015720:	4629      	mov	r1, r5
 8015722:	4620      	mov	r0, r4
 8015724:	f009 fcf6 	bl	801f114 <_ZN10TestFilterC1ERK12SimpleString>
 8015728:	627c      	str	r4, [r7, #36]	; 0x24
 801572a:	f107 0314 	add.w	r3, r7, #20
 801572e:	4618      	mov	r0, r3
 8015730:	f7f7 fa69 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8015734:	f107 031c 	add.w	r3, r7, #28
 8015738:	4618      	mov	r0, r3
 801573a:	f7f7 fa64 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 801573e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015740:	f009 fd30 	bl	801f1a4 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015748:	4619      	mov	r1, r3
 801574a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801574c:	f009 fd02 	bl	801f154 <_ZN10TestFilter3addEPS_>
 8015750:	4602      	mov	r2, r0
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015756:	bf00      	nop
 8015758:	3728      	adds	r7, #40	; 0x28
 801575a:	46bd      	mov	sp, r7
 801575c:	bdb0      	pop	{r4, r5, r7, pc}
 801575e:	bf00      	nop
 8015760:	08024ae4 	.word	0x08024ae4
 8015764:	08025458 	.word	0x08025458

08015768 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8015768:	b5b0      	push	{r4, r5, r7, lr}
 801576a:	b08c      	sub	sp, #48	; 0x30
 801576c:	af02      	add	r7, sp, #8
 801576e:	60f8      	str	r0, [r7, #12]
 8015770:	60b9      	str	r1, [r7, #8]
 8015772:	607a      	str	r2, [r7, #4]
 8015774:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 8015776:	f107 031c 	add.w	r3, r7, #28
 801577a:	491d      	ldr	r1, [pc, #116]	; (80157f0 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 801577c:	4618      	mov	r0, r3
 801577e:	f7f6 fe8a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8015782:	f107 0014 	add.w	r0, r7, #20
 8015786:	f107 031c 	add.w	r3, r7, #28
 801578a:	9301      	str	r3, [sp, #4]
 801578c:	683b      	ldr	r3, [r7, #0]
 801578e:	9300      	str	r3, [sp, #0]
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	68ba      	ldr	r2, [r7, #8]
 8015794:	68f9      	ldr	r1, [r7, #12]
 8015796:	f7ff fcff 	bl	8015198 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801579a:	f107 0514 	add.w	r5, r7, #20
 801579e:	f240 124f 	movw	r2, #335	; 0x14f
 80157a2:	4914      	ldr	r1, [pc, #80]	; (80157f4 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 80157a4:	2010      	movs	r0, #16
 80157a6:	f7f4 fab3 	bl	8009d10 <_ZnwjPKci>
 80157aa:	4604      	mov	r4, r0
 80157ac:	4629      	mov	r1, r5
 80157ae:	4620      	mov	r0, r4
 80157b0:	f009 fcb0 	bl	801f114 <_ZN10TestFilterC1ERK12SimpleString>
 80157b4:	627c      	str	r4, [r7, #36]	; 0x24
 80157b6:	f107 0314 	add.w	r3, r7, #20
 80157ba:	4618      	mov	r0, r3
 80157bc:	f7f7 fa23 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80157c0:	f107 031c 	add.w	r3, r7, #28
 80157c4:	4618      	mov	r0, r3
 80157c6:	f7f7 fa1e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80157ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80157cc:	f009 fcea 	bl	801f1a4 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 80157d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80157d2:	f009 fcda 	bl	801f18a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157da:	4619      	mov	r1, r3
 80157dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80157de:	f009 fcb9 	bl	801f154 <_ZN10TestFilter3addEPS_>
 80157e2:	4602      	mov	r2, r0
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80157e8:	bf00      	nop
 80157ea:	3728      	adds	r7, #40	; 0x28
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bdb0      	pop	{r4, r5, r7, pc}
 80157f0:	08024ae8 	.word	0x08024ae8
 80157f4:	08025458 	.word	0x08025458

080157f8 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 80157f8:	b5b0      	push	{r4, r5, r7, lr}
 80157fa:	b092      	sub	sp, #72	; 0x48
 80157fc:	af02      	add	r7, sp, #8
 80157fe:	60f8      	str	r0, [r7, #12]
 8015800:	60b9      	str	r1, [r7, #8]
 8015802:	607a      	str	r2, [r7, #4]
 8015804:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8015806:	f107 0320 	add.w	r3, r7, #32
 801580a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801580c:	4618      	mov	r0, r3
 801580e:	f7f6 fe42 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8015812:	f107 0018 	add.w	r0, r7, #24
 8015816:	f107 0320 	add.w	r3, r7, #32
 801581a:	9301      	str	r3, [sp, #4]
 801581c:	683b      	ldr	r3, [r7, #0]
 801581e:	9300      	str	r3, [sp, #0]
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	68ba      	ldr	r2, [r7, #8]
 8015824:	68f9      	ldr	r1, [r7, #12]
 8015826:	f7ff fcb7 	bl	8015198 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801582a:	f107 0320 	add.w	r3, r7, #32
 801582e:	4618      	mov	r0, r3
 8015830:	f7f7 f9e9 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8015834:	f107 0010 	add.w	r0, r7, #16
 8015838:	f107 0118 	add.w	r1, r7, #24
 801583c:	2329      	movs	r3, #41	; 0x29
 801583e:	222c      	movs	r2, #44	; 0x2c
 8015840:	f7f7 fb92 	bl	800cf68 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8015844:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015848:	f107 0110 	add.w	r1, r7, #16
 801584c:	2202      	movs	r2, #2
 801584e:	4618      	mov	r0, r3
 8015850:	f7f7 fb2c 	bl	800ceac <_ZNK12SimpleString9subStringEj>
 8015854:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015858:	f107 0310 	add.w	r3, r7, #16
 801585c:	4611      	mov	r1, r2
 801585e:	4618      	mov	r0, r3
 8015860:	f7f6 fe85 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 8015864:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015868:	4618      	mov	r0, r3
 801586a:	f7f7 f9cc 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 801586e:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8015872:	492a      	ldr	r1, [pc, #168]	; (801591c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8015874:	2010      	movs	r0, #16
 8015876:	f7f4 fa4b 	bl	8009d10 <_ZnwjPKci>
 801587a:	4604      	mov	r4, r0
 801587c:	f107 0310 	add.w	r3, r7, #16
 8015880:	4619      	mov	r1, r3
 8015882:	4620      	mov	r0, r4
 8015884:	f009 fc46 	bl	801f114 <_ZN10TestFilterC1ERK12SimpleString>
 8015888:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 801588a:	f107 0318 	add.w	r3, r7, #24
 801588e:	2100      	movs	r1, #0
 8015890:	4618      	mov	r0, r3
 8015892:	f7f7 fb1c 	bl	800cece <_ZNK12SimpleString2atEj>
 8015896:	4603      	mov	r3, r0
 8015898:	461a      	mov	r2, r3
 801589a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801589e:	f107 0118 	add.w	r1, r7, #24
 80158a2:	232c      	movs	r3, #44	; 0x2c
 80158a4:	f7f7 fb60 	bl	800cf68 <_ZNK12SimpleString17subStringFromTillEcc>
 80158a8:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80158ac:	f240 125b 	movw	r2, #347	; 0x15b
 80158b0:	491a      	ldr	r1, [pc, #104]	; (801591c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 80158b2:	2010      	movs	r0, #16
 80158b4:	f7f4 fa2c 	bl	8009d10 <_ZnwjPKci>
 80158b8:	4604      	mov	r4, r0
 80158ba:	4629      	mov	r1, r5
 80158bc:	4620      	mov	r0, r4
 80158be:	f009 fc29 	bl	801f114 <_ZN10TestFilterC1ERK12SimpleString>
 80158c2:	63bc      	str	r4, [r7, #56]	; 0x38
 80158c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7f7 f99c 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 80158ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80158d0:	f009 fc5b 	bl	801f18a <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 80158d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80158d6:	f009 fc58 	bl	801f18a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158de:	4619      	mov	r1, r3
 80158e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80158e2:	f009 fc37 	bl	801f154 <_ZN10TestFilter3addEPS_>
 80158e6:	4602      	mov	r2, r0
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158f0:	4619      	mov	r1, r3
 80158f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80158f4:	f009 fc2e 	bl	801f154 <_ZN10TestFilter3addEPS_>
 80158f8:	4602      	mov	r2, r0
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 80158fe:	f107 0310 	add.w	r3, r7, #16
 8015902:	4618      	mov	r0, r3
 8015904:	f7f7 f97f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8015908:	f107 0318 	add.w	r3, r7, #24
 801590c:	4618      	mov	r0, r3
 801590e:	f7f7 f97a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 8015912:	bf00      	nop
 8015914:	3740      	adds	r7, #64	; 0x40
 8015916:	46bd      	mov	sp, r7
 8015918:	bdb0      	pop	{r4, r5, r7, pc}
 801591a:	bf00      	nop
 801591c:	08025458 	.word	0x08025458

08015920 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8015920:	b590      	push	{r4, r7, lr}
 8015922:	b08b      	sub	sp, #44	; 0x2c
 8015924:	af02      	add	r7, sp, #8
 8015926:	60f8      	str	r0, [r7, #12]
 8015928:	60b9      	str	r1, [r7, #8]
 801592a:	607a      	str	r2, [r7, #4]
 801592c:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 801592e:	f107 0318 	add.w	r3, r7, #24
 8015932:	491b      	ldr	r1, [pc, #108]	; (80159a0 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8015934:	4618      	mov	r0, r3
 8015936:	f7f6 fdae 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801593a:	f107 0010 	add.w	r0, r7, #16
 801593e:	f107 0318 	add.w	r3, r7, #24
 8015942:	9301      	str	r3, [sp, #4]
 8015944:	683b      	ldr	r3, [r7, #0]
 8015946:	9300      	str	r3, [sp, #0]
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	68ba      	ldr	r2, [r7, #8]
 801594c:	68f9      	ldr	r1, [r7, #12]
 801594e:	f7ff fc23 	bl	8015198 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015952:	f107 0318 	add.w	r3, r7, #24
 8015956:	4618      	mov	r0, r3
 8015958:	f7f7 f955 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 801595c:	f107 0310 	add.w	r3, r7, #16
 8015960:	4618      	mov	r0, r3
 8015962:	f7f7 f92f 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 8015966:	4603      	mov	r3, r0
 8015968:	2b00      	cmp	r3, #0
 801596a:	bf0c      	ite	eq
 801596c:	2301      	moveq	r3, #1
 801596e:	2300      	movne	r3, #0
 8015970:	b2db      	uxtb	r3, r3
 8015972:	2b00      	cmp	r3, #0
 8015974:	d001      	beq.n	801597a <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 8015976:	2400      	movs	r4, #0
 8015978:	e008      	b.n	801598c <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	3330      	adds	r3, #48	; 0x30
 801597e:	f107 0210 	add.w	r2, r7, #16
 8015982:	4611      	mov	r1, r2
 8015984:	4618      	mov	r0, r3
 8015986:	f7f6 fdf2 	bl	800c56e <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 801598a:	2401      	movs	r4, #1
 801598c:	f107 0310 	add.w	r3, r7, #16
 8015990:	4618      	mov	r0, r3
 8015992:	f7f7 f938 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8015996:	2c01      	cmp	r4, #1
}
 8015998:	3724      	adds	r7, #36	; 0x24
 801599a:	46bd      	mov	sp, r7
 801599c:	bd90      	pop	{r4, r7, pc}
 801599e:	bf00      	nop
 80159a0:	08024b10 	.word	0x08024b10

080159a4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 80159a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159a6:	b093      	sub	sp, #76	; 0x4c
 80159a8:	af02      	add	r7, sp, #8
 80159aa:	60f8      	str	r0, [r7, #12]
 80159ac:	60b9      	str	r1, [r7, #8]
 80159ae:	607a      	str	r2, [r7, #4]
 80159b0:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 80159b2:	f107 0318 	add.w	r3, r7, #24
 80159b6:	4953      	ldr	r1, [pc, #332]	; (8015b04 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 80159b8:	4618      	mov	r0, r3
 80159ba:	f7f6 fd6c 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80159be:	f107 0010 	add.w	r0, r7, #16
 80159c2:	f107 0318 	add.w	r3, r7, #24
 80159c6:	9301      	str	r3, [sp, #4]
 80159c8:	683b      	ldr	r3, [r7, #0]
 80159ca:	9300      	str	r3, [sp, #0]
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	68ba      	ldr	r2, [r7, #8]
 80159d0:	68f9      	ldr	r1, [r7, #12]
 80159d2:	f7ff fbe1 	bl	8015198 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80159d6:	f107 0318 	add.w	r3, r7, #24
 80159da:	4618      	mov	r0, r3
 80159dc:	f7f7 f913 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 80159e0:	f107 0310 	add.w	r3, r7, #16
 80159e4:	4618      	mov	r0, r3
 80159e6:	f7f7 f8ed 	bl	800cbc4 <_ZNK12SimpleString4sizeEv>
 80159ea:	4603      	mov	r3, r0
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	bf0c      	ite	eq
 80159f0:	2301      	moveq	r3, #1
 80159f2:	2300      	movne	r3, #0
 80159f4:	b2db      	uxtb	r3, r3
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d001      	beq.n	80159fe <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 80159fa:	2400      	movs	r4, #0
 80159fc:	e078      	b.n	8015af0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 80159fe:	2500      	movs	r5, #0
 8015a00:	f107 0320 	add.w	r3, r7, #32
 8015a04:	4940      	ldr	r1, [pc, #256]	; (8015b08 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 8015a06:	4618      	mov	r0, r3
 8015a08:	f7f6 fd45 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8015a0c:	2601      	movs	r6, #1
 8015a0e:	f107 0220 	add.w	r2, r7, #32
 8015a12:	f107 0310 	add.w	r3, r7, #16
 8015a16:	4611      	mov	r1, r2
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f7f7 f900 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d111      	bne.n	8015a48 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8015a24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015a28:	4938      	ldr	r1, [pc, #224]	; (8015b0c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7f6 fd33 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8015a30:	2501      	movs	r5, #1
 8015a32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015a36:	f107 0310 	add.w	r3, r7, #16
 8015a3a:	4611      	mov	r1, r2
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	f7f7 f8ee 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 8015a42:	4603      	mov	r3, r0
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d001      	beq.n	8015a4c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8015a48:	2401      	movs	r4, #1
 8015a4a:	e000      	b.n	8015a4e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8015a4c:	2400      	movs	r4, #0
 8015a4e:	2d00      	cmp	r5, #0
 8015a50:	d004      	beq.n	8015a5c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8015a52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015a56:	4618      	mov	r0, r3
 8015a58:	f7f7 f8d5 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8015a5c:	2e00      	cmp	r6, #0
 8015a5e:	d004      	beq.n	8015a6a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8015a60:	f107 0320 	add.w	r3, r7, #32
 8015a64:	4618      	mov	r0, r3
 8015a66:	f7f7 f8ce 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8015a6a:	2c00      	cmp	r4, #0
 8015a6c:	d005      	beq.n	8015a7a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	2200      	movs	r2, #0
 8015a72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8015a76:	2401      	movs	r4, #1
 8015a78:	e03a      	b.n	8015af0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8015a7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015a7e:	4924      	ldr	r1, [pc, #144]	; (8015b10 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8015a80:	4618      	mov	r0, r3
 8015a82:	f7f6 fd08 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8015a86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015a8a:	f107 0310 	add.w	r3, r7, #16
 8015a8e:	4611      	mov	r1, r2
 8015a90:	4618      	mov	r0, r3
 8015a92:	f7f7 f8c4 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 8015a96:	4603      	mov	r3, r0
 8015a98:	461c      	mov	r4, r3
 8015a9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f7f7 f8b1 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8015aa4:	2c00      	cmp	r4, #0
 8015aa6:	d005      	beq.n	8015ab4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	2201      	movs	r2, #1
 8015aac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8015ab0:	2401      	movs	r4, #1
 8015ab2:	e01d      	b.n	8015af0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8015ab4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015ab8:	4916      	ldr	r1, [pc, #88]	; (8015b14 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8015aba:	4618      	mov	r0, r3
 8015abc:	f7f6 fceb 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8015ac0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8015ac4:	f107 0310 	add.w	r3, r7, #16
 8015ac8:	4611      	mov	r1, r2
 8015aca:	4618      	mov	r0, r3
 8015acc:	f7f7 f8a7 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 8015ad0:	4603      	mov	r3, r0
 8015ad2:	461c      	mov	r4, r3
 8015ad4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015ad8:	4618      	mov	r0, r3
 8015ada:	f7f7 f894 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8015ade:	2c00      	cmp	r4, #0
 8015ae0:	d005      	beq.n	8015aee <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	2202      	movs	r2, #2
 8015ae6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8015aea:	2401      	movs	r4, #1
 8015aec:	e000      	b.n	8015af0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8015aee:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8015af0:	f107 0310 	add.w	r3, r7, #16
 8015af4:	4618      	mov	r0, r3
 8015af6:	f7f7 f886 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8015afa:	4623      	mov	r3, r4
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	3744      	adds	r7, #68	; 0x44
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b04:	08024b0c 	.word	0x08024b0c
 8015b08:	0802547c 	.word	0x0802547c
 8015b0c:	08025484 	.word	0x08025484
 8015b10:	0802548c 	.word	0x0802548c
 8015b14:	08025494 	.word	0x08025494

08015b18 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8015b18:	b480      	push	{r7}
 8015b1a:	b083      	sub	sp, #12
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015b26:	2b01      	cmp	r3, #1
 8015b28:	bf0c      	ite	eq
 8015b2a:	2301      	moveq	r3, #1
 8015b2c:	2300      	movne	r3, #0
 8015b2e:	b2db      	uxtb	r3, r3
}
 8015b30:	4618      	mov	r0, r3
 8015b32:	370c      	adds	r7, #12
 8015b34:	46bd      	mov	sp, r7
 8015b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3a:	4770      	bx	lr

08015b3c <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8015b3c:	b480      	push	{r7}
 8015b3e:	b083      	sub	sp, #12
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015b4a:	2b02      	cmp	r3, #2
 8015b4c:	bf0c      	ite	eq
 8015b4e:	2301      	moveq	r3, #1
 8015b50:	2300      	movne	r3, #0
 8015b52:	b2db      	uxtb	r3, r3
}
 8015b54:	4618      	mov	r0, r3
 8015b56:	370c      	adds	r7, #12
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5e:	4770      	bx	lr

08015b60 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8015b60:	b480      	push	{r7}
 8015b62:	b083      	sub	sp, #12
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
    return packageName_;
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	3330      	adds	r3, #48	; 0x30
}
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	370c      	adds	r7, #12
 8015b70:	46bd      	mov	sp, r7
 8015b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b76:	4770      	bx	lr

08015b78 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8015b78:	b480      	push	{r7}
 8015b7a:	b083      	sub	sp, #12
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	2200      	movs	r2, #0
 8015b84:	601a      	str	r2, [r3, #0]
    {}
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	4618      	mov	r0, r3
 8015b8a:	370c      	adds	r7, #12
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b92:	4770      	bx	lr

08015b94 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8015b94:	b480      	push	{r7}
 8015b96:	b083      	sub	sp, #12
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	601a      	str	r2, [r3, #0]
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015bac:	3304      	adds	r3, #4
 8015bae:	f640 72ff 	movw	r2, #4095	; 0xfff
 8015bb2:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	701a      	strb	r2, [r3, #0]
}
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	370c      	adds	r7, #12
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc6:	4770      	bx	lr

08015bc8 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8015bc8:	b480      	push	{r7}
 8015bca:	b083      	sub	sp, #12
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	2200      	movs	r2, #0
 8015bde:	701a      	strb	r2, [r3, #0]
}
 8015be0:	bf00      	nop
 8015be2:	370c      	adds	r7, #12
 8015be4:	46bd      	mov	sp, r7
 8015be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bea:	4770      	bx	lr

08015bec <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8015bec:	b40e      	push	{r1, r2, r3}
 8015bee:	b590      	push	{r4, r7, lr}
 8015bf0:	b086      	sub	sp, #24
 8015bf2:	af00      	add	r7, sp, #0
 8015bf4:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015bfc:	3304      	adds	r3, #4
 8015bfe:	681a      	ldr	r2, [r3, #0]
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	1ad3      	subs	r3, r2, r3
 8015c0a:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8015c0c:	697b      	ldr	r3, [r7, #20]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d032      	beq.n	8015c78 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8015c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015c16:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8015c18:	4b1b      	ldr	r3, [pc, #108]	; (8015c88 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8015c1a:	681c      	ldr	r4, [r3, #0]
 8015c1c:	687a      	ldr	r2, [r7, #4]
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	18d0      	adds	r0, r2, r3
 8015c28:	697b      	ldr	r3, [r7, #20]
 8015c2a:	1c59      	adds	r1, r3, #1
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c30:	47a0      	blx	r4
 8015c32:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8015c34:	693b      	ldr	r3, [r7, #16]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	dd09      	ble.n	8015c4e <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c40:	681a      	ldr	r2, [r3, #0]
 8015c42:	693b      	ldr	r3, [r7, #16]
 8015c44:	441a      	add	r2, r3
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c4c:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c54:	681a      	ldr	r2, [r3, #0]
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c5c:	3304      	adds	r3, #4
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	429a      	cmp	r2, r3
 8015c62:	d90a      	bls.n	8015c7a <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c6a:	3304      	adds	r3, #4
 8015c6c:	681a      	ldr	r2, [r3, #0]
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c74:	601a      	str	r2, [r3, #0]
 8015c76:	e000      	b.n	8015c7a <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8015c78:	bf00      	nop
    va_end(arguments);
}
 8015c7a:	3718      	adds	r7, #24
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8015c82:	b003      	add	sp, #12
 8015c84:	4770      	bx	lr
 8015c86:	bf00      	nop
 8015c88:	200000b0 	.word	0x200000b0

08015c8c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b08c      	sub	sp, #48	; 0x30
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	60f8      	str	r0, [r7, #12]
 8015c94:	60b9      	str	r1, [r7, #8]
 8015c96:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8015c98:	68bb      	ldr	r3, [r7, #8]
 8015c9a:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8015c9c:	2310      	movs	r3, #16
 8015c9e:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8015ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	429a      	cmp	r2, r3
 8015caa:	d273      	bcs.n	8015d94 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8015cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cae:	493b      	ldr	r1, [pc, #236]	; (8015d9c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8015cb0:	68f8      	ldr	r0, [r7, #12]
 8015cb2:	f7ff ff9b 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8015cb6:	687a      	ldr	r2, [r7, #4]
 8015cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cba:	1ad3      	subs	r3, r2, r3
 8015cbc:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8015cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc0:	2b10      	cmp	r3, #16
 8015cc2:	d901      	bls.n	8015cc8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8015cc4:	2310      	movs	r3, #16
 8015cc6:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8015cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cca:	f1c3 0310 	rsb	r3, r3, #16
 8015cce:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8015cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd8:	429a      	cmp	r2, r3
 8015cda:	d215      	bcs.n	8015d08 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8015cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce0:	4413      	add	r3, r2
 8015ce2:	69fa      	ldr	r2, [r7, #28]
 8015ce4:	4413      	add	r3, r2
 8015ce6:	781b      	ldrb	r3, [r3, #0]
 8015ce8:	461a      	mov	r2, r3
 8015cea:	492d      	ldr	r1, [pc, #180]	; (8015da0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8015cec:	68f8      	ldr	r0, [r7, #12]
 8015cee:	f7ff ff7d 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8015cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cf4:	2b07      	cmp	r3, #7
 8015cf6:	d103      	bne.n	8015d00 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8015cf8:	492a      	ldr	r1, [pc, #168]	; (8015da4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8015cfa:	68f8      	ldr	r0, [r7, #12]
 8015cfc:	f7ff ff76 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8015d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d02:	3301      	adds	r3, #1
 8015d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d06:	e7e5      	b.n	8015cd4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8015d08:	2300      	movs	r3, #0
 8015d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d0e:	697b      	ldr	r3, [r7, #20]
 8015d10:	429a      	cmp	r2, r3
 8015d12:	d207      	bcs.n	8015d24 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8015d14:	4924      	ldr	r1, [pc, #144]	; (8015da8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8015d16:	68f8      	ldr	r0, [r7, #12]
 8015d18:	f7ff ff68 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8015d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d1e:	3301      	adds	r3, #1
 8015d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d22:	e7f3      	b.n	8015d0c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8015d24:	697b      	ldr	r3, [r7, #20]
 8015d26:	2b08      	cmp	r3, #8
 8015d28:	d903      	bls.n	8015d32 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8015d2a:	491e      	ldr	r1, [pc, #120]	; (8015da4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8015d2c:	68f8      	ldr	r0, [r7, #12]
 8015d2e:	f7ff ff5d 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8015d32:	491e      	ldr	r1, [pc, #120]	; (8015dac <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8015d34:	68f8      	ldr	r0, [r7, #12]
 8015d36:	f7ff ff59 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d42:	429a      	cmp	r2, r3
 8015d44:	d21d      	bcs.n	8015d82 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8015d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d4a:	4413      	add	r3, r2
 8015d4c:	69fa      	ldr	r2, [r7, #28]
 8015d4e:	4413      	add	r3, r2
 8015d50:	781b      	ldrb	r3, [r3, #0]
 8015d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8015d56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d5a:	2b1f      	cmp	r3, #31
 8015d5c:	d903      	bls.n	8015d66 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8015d5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d62:	2b7e      	cmp	r3, #126	; 0x7e
 8015d64:	d902      	bls.n	8015d6c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8015d66:	232e      	movs	r3, #46	; 0x2e
 8015d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8015d6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d70:	461a      	mov	r2, r3
 8015d72:	490f      	ldr	r1, [pc, #60]	; (8015db0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8015d74:	68f8      	ldr	r0, [r7, #12]
 8015d76:	f7ff ff39 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8015d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d7c:	3301      	adds	r3, #1
 8015d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d80:	e7dd      	b.n	8015d3e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8015d82:	490c      	ldr	r1, [pc, #48]	; (8015db4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8015d84:	68f8      	ldr	r0, [r7, #12]
 8015d86:	f7ff ff31 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8015d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d8e:	4413      	add	r3, r2
 8015d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 8015d92:	e787      	b.n	8015ca4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8015d94:	bf00      	nop
 8015d96:	3730      	adds	r7, #48	; 0x30
 8015d98:	46bd      	mov	sp, r7
 8015d9a:	bd80      	pop	{r7, pc}
 8015d9c:	080254ac 	.word	0x080254ac
 8015da0:	080254b8 	.word	0x080254b8
 8015da4:	080254c0 	.word	0x080254c0
 8015da8:	080254c4 	.word	0x080254c4
 8015dac:	080254c8 	.word	0x080254c8
 8015db0:	080254cc 	.word	0x080254cc
 8015db4:	080254d0 	.word	0x080254d0

08015db8 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8015db8:	b480      	push	{r7}
 8015dba:	b083      	sub	sp, #12
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
    return buffer_;
 8015dc0:	687b      	ldr	r3, [r7, #4]
}
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	370c      	adds	r7, #12
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dcc:	4770      	bx	lr

08015dce <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 8015dce:	b480      	push	{r7}
 8015dd0:	b083      	sub	sp, #12
 8015dd2:	af00      	add	r7, sp, #0
 8015dd4:	6078      	str	r0, [r7, #4]
 8015dd6:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015dde:	3304      	adds	r3, #4
 8015de0:	683a      	ldr	r2, [r7, #0]
 8015de2:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015dea:	3304      	adds	r3, #4
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015df2:	d306      	bcc.n	8015e02 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015dfa:	3304      	adds	r3, #4
 8015dfc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8015e00:	601a      	str	r2, [r3, #0]
}
 8015e02:	bf00      	nop
 8015e04:	370c      	adds	r7, #12
 8015e06:	46bd      	mov	sp, r7
 8015e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0c:	4770      	bx	lr

08015e0e <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8015e0e:	b480      	push	{r7}
 8015e10:	b083      	sub	sp, #12
 8015e12:	af00      	add	r7, sp, #0
 8015e14:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e1c:	3304      	adds	r3, #4
 8015e1e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8015e22:	601a      	str	r2, [r3, #0]
}
 8015e24:	bf00      	nop
 8015e26:	370c      	adds	r7, #12
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2e:	4770      	bx	lr

08015e30 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8015e30:	b480      	push	{r7}
 8015e32:	b083      	sub	sp, #12
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e3e:	681a      	ldr	r2, [r3, #0]
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e46:	3304      	adds	r3, #4
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	429a      	cmp	r2, r3
 8015e4c:	bf2c      	ite	cs
 8015e4e:	2301      	movcs	r3, #1
 8015e50:	2300      	movcc	r3, #0
 8015e52:	b2db      	uxtb	r3, r3
}
 8015e54:	4618      	mov	r0, r3
 8015e56:	370c      	adds	r7, #12
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e5e:	4770      	bx	lr

08015e60 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b082      	sub	sp, #8
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	601a      	str	r2, [r3, #0]
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	2200      	movs	r2, #0
 8015e72:	711a      	strb	r2, [r3, #4]
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	3308      	adds	r3, #8
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f7ff fe8b 	bl	8015b94 <_ZN18SimpleStringBufferC1Ev>
{
}
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	4618      	mov	r0, r3
 8015e82:	3708      	adds	r7, #8
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bd80      	pop	{r7, pc}

08015e88 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8015e88:	b5b0      	push	{r4, r5, r7, lr}
 8015e8a:	b086      	sub	sp, #24
 8015e8c:	af02      	add	r7, sp, #8
 8015e8e:	60f8      	str	r0, [r7, #12]
 8015e90:	60b9      	str	r1, [r7, #8]
 8015e92:	607a      	str	r2, [r7, #4]
 8015e94:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	f103 0408 	add.w	r4, r3, #8
 8015e9c:	687d      	ldr	r5, [r7, #4]
 8015e9e:	6a3b      	ldr	r3, [r7, #32]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	3314      	adds	r3, #20
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	6a38      	ldr	r0, [r7, #32]
 8015ea8:	4798      	blx	r3
 8015eaa:	4603      	mov	r3, r0
 8015eac:	9301      	str	r3, [sp, #4]
 8015eae:	683b      	ldr	r3, [r7, #0]
 8015eb0:	9300      	str	r3, [sp, #0]
 8015eb2:	462b      	mov	r3, r5
 8015eb4:	68ba      	ldr	r2, [r7, #8]
 8015eb6:	4904      	ldr	r1, [pc, #16]	; (8015ec8 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8015eb8:	4620      	mov	r0, r4
 8015eba:	f7ff fe97 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
}
 8015ebe:	bf00      	nop
 8015ec0:	3710      	adds	r7, #16
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8015ec6:	bf00      	nop
 8015ec8:	080254d4 	.word	0x080254d4

08015ecc <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8015ecc:	b5b0      	push	{r4, r5, r7, lr}
 8015ece:	b086      	sub	sp, #24
 8015ed0:	af02      	add	r7, sp, #8
 8015ed2:	60f8      	str	r0, [r7, #12]
 8015ed4:	60b9      	str	r1, [r7, #8]
 8015ed6:	607a      	str	r2, [r7, #4]
 8015ed8:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	f103 0408 	add.w	r4, r3, #8
 8015ee0:	687d      	ldr	r5, [r7, #4]
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	3318      	adds	r3, #24
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	6838      	ldr	r0, [r7, #0]
 8015eec:	4798      	blx	r3
 8015eee:	4603      	mov	r3, r0
 8015ef0:	9300      	str	r3, [sp, #0]
 8015ef2:	462b      	mov	r3, r5
 8015ef4:	68ba      	ldr	r2, [r7, #8]
 8015ef6:	4904      	ldr	r1, [pc, #16]	; (8015f08 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8015ef8:	4620      	mov	r0, r4
 8015efa:	f7ff fe77 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
}
 8015efe:	bf00      	nop
 8015f00:	3710      	adds	r7, #16
 8015f02:	46bd      	mov	sp, r7
 8015f04:	bdb0      	pop	{r4, r5, r7, pc}
 8015f06:	bf00      	nop
 8015f08:	0802550c 	.word	0x0802550c

08015f0c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b082      	sub	sp, #8
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	3308      	adds	r3, #8
 8015f18:	4903      	ldr	r1, [pc, #12]	; (8015f28 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f7ff fe66 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
}
 8015f20:	bf00      	nop
 8015f22:	3708      	adds	r7, #8
 8015f24:	46bd      	mov	sp, r7
 8015f26:	bd80      	pop	{r7, pc}
 8015f28:	0802553c 	.word	0x0802553c

08015f2c <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b084      	sub	sp, #16
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	2200      	movs	r2, #0
 8015f38:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8015f40:	2367      	movs	r3, #103	; 0x67
 8015f42:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	f203 1311 	addw	r3, r3, #273	; 0x111
 8015f4a:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	f103 0208 	add.w	r2, r3, #8
 8015f52:	68bb      	ldr	r3, [r7, #8]
 8015f54:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8015f58:	4619      	mov	r1, r3
 8015f5a:	4610      	mov	r0, r2
 8015f5c:	f7ff ff37 	bl	8015dce <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8015f60:	bf00      	nop
 8015f62:	3710      	adds	r7, #16
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}

08015f68 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8015f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f6a:	b089      	sub	sp, #36	; 0x24
 8015f6c:	af04      	add	r7, sp, #16
 8015f6e:	60f8      	str	r0, [r7, #12]
 8015f70:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d102      	bne.n	8015f80 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 8015f7a:	68f8      	ldr	r0, [r7, #12]
 8015f7c:	f000 f882 	bl	8016084 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	1c5a      	adds	r2, r3, #1
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	f103 0508 	add.w	r5, r3, #8
 8015f90:	68bb      	ldr	r3, [r7, #8]
 8015f92:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8015f94:	68bb      	ldr	r3, [r7, #8]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8015f9a:	68bb      	ldr	r3, [r7, #8]
 8015f9c:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8015f9e:	68bb      	ldr	r3, [r7, #8]
 8015fa0:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8015fa2:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8015fa4:	68bb      	ldr	r3, [r7, #8]
 8015fa6:	695a      	ldr	r2, [r3, #20]
 8015fa8:	68bb      	ldr	r3, [r7, #8]
 8015faa:	695b      	ldr	r3, [r3, #20]
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	3314      	adds	r3, #20
 8015fb0:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8015fb2:	4610      	mov	r0, r2
 8015fb4:	4798      	blx	r3
 8015fb6:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8015fb8:	68bb      	ldr	r3, [r7, #8]
 8015fba:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8015fbc:	9303      	str	r3, [sp, #12]
 8015fbe:	9202      	str	r2, [sp, #8]
 8015fc0:	683a      	ldr	r2, [r7, #0]
 8015fc2:	9201      	str	r2, [sp, #4]
 8015fc4:	9400      	str	r4, [sp, #0]
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	4632      	mov	r2, r6
 8015fca:	4915      	ldr	r1, [pc, #84]	; (8016020 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8015fcc:	4628      	mov	r0, r5
 8015fce:	f7ff fe0d 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	f103 0008 	add.w	r0, r3, #8
 8015fd8:	68bb      	ldr	r3, [r7, #8]
 8015fda:	6899      	ldr	r1, [r3, #8]
 8015fdc:	68bb      	ldr	r3, [r7, #8]
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	461a      	mov	r2, r3
 8015fe2:	f7ff fe53 	bl	8015c8c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8015fe6:	68bb      	ldr	r3, [r7, #8]
 8015fe8:	695a      	ldr	r2, [r3, #20]
 8015fea:	68bb      	ldr	r3, [r7, #8]
 8015fec:	695b      	ldr	r3, [r3, #20]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	3314      	adds	r3, #20
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	4610      	mov	r0, r2
 8015ff6:	4798      	blx	r3
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	490a      	ldr	r1, [pc, #40]	; (8016024 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	f7f6 f887 	bl	800c110 <_ZN12SimpleString6StrCmpEPKcS1_>
 8016002:	4603      	mov	r3, r0
 8016004:	2b00      	cmp	r3, #0
 8016006:	bf0c      	ite	eq
 8016008:	2301      	moveq	r3, #1
 801600a:	2300      	movne	r3, #0
 801600c:	b2db      	uxtb	r3, r3
 801600e:	2b00      	cmp	r3, #0
 8016010:	d002      	beq.n	8016018 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	2201      	movs	r2, #1
 8016016:	711a      	strb	r2, [r3, #4]
}
 8016018:	bf00      	nop
 801601a:	3714      	adds	r7, #20
 801601c:	46bd      	mov	sp, r7
 801601e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016020:	0802555c 	.word	0x0802555c
 8016024:	080255bc 	.word	0x080255bc

08016028 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b084      	sub	sp, #16
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d103      	bne.n	8016040 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f7ff ff67 	bl	8015f0c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 801603e:	e01e      	b.n	801607e <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	3308      	adds	r3, #8
 8016044:	4618      	mov	r0, r3
 8016046:	f7ff fef3 	bl	8015e30 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 801604a:	4603      	mov	r3, r0
 801604c:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	3308      	adds	r3, #8
 8016052:	4618      	mov	r0, r3
 8016054:	f7ff fedb 	bl	8015e0e <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8016058:	7bfb      	ldrb	r3, [r7, #15]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d002      	beq.n	8016064 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 801605e:	6878      	ldr	r0, [r7, #4]
 8016060:	f000 f820 	bl	80160a4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	4619      	mov	r1, r3
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f000 f82a 	bl	80160c4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	791b      	ldrb	r3, [r3, #4]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d002      	beq.n	801607e <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f000 f839 	bl	80160f0 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 801607e:	3710      	adds	r7, #16
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}

08016084 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b082      	sub	sp, #8
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	3308      	adds	r3, #8
 8016090:	4903      	ldr	r1, [pc, #12]	; (80160a0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8016092:	4618      	mov	r0, r3
 8016094:	f7ff fdaa 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016098:	bf00      	nop
 801609a:	3708      	adds	r7, #8
 801609c:	46bd      	mov	sp, r7
 801609e:	bd80      	pop	{r7, pc}
 80160a0:	080255c4 	.word	0x080255c4

080160a4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b082      	sub	sp, #8
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	3308      	adds	r3, #8
 80160b0:	4903      	ldr	r1, [pc, #12]	; (80160c0 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 80160b2:	4618      	mov	r0, r3
 80160b4:	f7ff fd9a 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
}
 80160b8:	bf00      	nop
 80160ba:	3708      	adds	r7, #8
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}
 80160c0:	080255dc 	.word	0x080255dc

080160c4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b082      	sub	sp, #8
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
 80160cc:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	f103 0008 	add.w	r0, r3, #8
 80160d4:	683b      	ldr	r3, [r7, #0]
 80160d6:	4a04      	ldr	r2, [pc, #16]	; (80160e8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 80160d8:	4904      	ldr	r1, [pc, #16]	; (80160ec <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 80160da:	f7ff fd87 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
}
 80160de:	bf00      	nop
 80160e0:	3708      	adds	r7, #8
 80160e2:	46bd      	mov	sp, r7
 80160e4:	bd80      	pop	{r7, pc}
 80160e6:	bf00      	nop
 80160e8:	08025624 	.word	0x08025624
 80160ec:	0802563c 	.word	0x0802563c

080160f0 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b082      	sub	sp, #8
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	3308      	adds	r3, #8
 80160fc:	4903      	ldr	r1, [pc, #12]	; (801610c <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 80160fe:	4618      	mov	r0, r3
 8016100:	f7ff fd74 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016104:	bf00      	nop
 8016106:	3708      	adds	r7, #8
 8016108:	46bd      	mov	sp, r7
 801610a:	bd80      	pop	{r7, pc}
 801610c:	08025644 	.word	0x08025644

08016110 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b08a      	sub	sp, #40	; 0x28
 8016114:	af06      	add	r7, sp, #24
 8016116:	60f8      	str	r0, [r7, #12]
 8016118:	60b9      	str	r1, [r7, #8]
 801611a:	607a      	str	r2, [r7, #4]
 801611c:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 801611e:	f7f9 fe8d 	bl	800fe3c <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8016122:	4602      	mov	r2, r0
 8016124:	69bb      	ldr	r3, [r7, #24]
 8016126:	9305      	str	r3, [sp, #20]
 8016128:	683b      	ldr	r3, [r7, #0]
 801612a:	9304      	str	r3, [sp, #16]
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	9303      	str	r3, [sp, #12]
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	9302      	str	r3, [sp, #8]
 8016134:	9201      	str	r2, [sp, #4]
 8016136:	2300      	movs	r3, #0
 8016138:	9300      	str	r3, [sp, #0]
 801613a:	2300      	movs	r3, #0
 801613c:	4a04      	ldr	r2, [pc, #16]	; (8016150 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 801613e:	4905      	ldr	r1, [pc, #20]	; (8016154 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8016140:	68f8      	ldr	r0, [r7, #12]
 8016142:	f000 f855 	bl	80161f0 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016146:	bf00      	nop
 8016148:	3710      	adds	r7, #16
 801614a:	46bd      	mov	sp, r7
 801614c:	bd80      	pop	{r7, pc}
 801614e:	bf00      	nop
 8016150:	080254a0 	.word	0x080254a0
 8016154:	08025758 	.word	0x08025758

08016158 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016158:	b590      	push	{r4, r7, lr}
 801615a:	b08b      	sub	sp, #44	; 0x2c
 801615c:	af06      	add	r7, sp, #24
 801615e:	60f8      	str	r0, [r7, #12]
 8016160:	60b9      	str	r1, [r7, #8]
 8016162:	607a      	str	r2, [r7, #4]
 8016164:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8016166:	68bb      	ldr	r3, [r7, #8]
 8016168:	68d8      	ldr	r0, [r3, #12]
 801616a:	68bb      	ldr	r3, [r7, #8]
 801616c:	691c      	ldr	r4, [r3, #16]
 801616e:	68bb      	ldr	r3, [r7, #8]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	68ba      	ldr	r2, [r7, #8]
 8016174:	6952      	ldr	r2, [r2, #20]
 8016176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016178:	9105      	str	r1, [sp, #20]
 801617a:	6a39      	ldr	r1, [r7, #32]
 801617c:	9104      	str	r1, [sp, #16]
 801617e:	6839      	ldr	r1, [r7, #0]
 8016180:	9103      	str	r1, [sp, #12]
 8016182:	6879      	ldr	r1, [r7, #4]
 8016184:	9102      	str	r1, [sp, #8]
 8016186:	9201      	str	r2, [sp, #4]
 8016188:	9300      	str	r3, [sp, #0]
 801618a:	4623      	mov	r3, r4
 801618c:	4602      	mov	r2, r0
 801618e:	4904      	ldr	r1, [pc, #16]	; (80161a0 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8016190:	68f8      	ldr	r0, [r7, #12]
 8016192:	f000 f82d 	bl	80161f0 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016196:	bf00      	nop
 8016198:	3714      	adds	r7, #20
 801619a:	46bd      	mov	sp, r7
 801619c:	bd90      	pop	{r4, r7, pc}
 801619e:	bf00      	nop
 80161a0:	0802577c 	.word	0x0802577c

080161a4 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80161a4:	b590      	push	{r4, r7, lr}
 80161a6:	b08b      	sub	sp, #44	; 0x2c
 80161a8:	af06      	add	r7, sp, #24
 80161aa:	60f8      	str	r0, [r7, #12]
 80161ac:	60b9      	str	r1, [r7, #8]
 80161ae:	607a      	str	r2, [r7, #4]
 80161b0:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 80161b2:	68bb      	ldr	r3, [r7, #8]
 80161b4:	68d8      	ldr	r0, [r3, #12]
 80161b6:	68bb      	ldr	r3, [r7, #8]
 80161b8:	691c      	ldr	r4, [r3, #16]
 80161ba:	68bb      	ldr	r3, [r7, #8]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	68ba      	ldr	r2, [r7, #8]
 80161c0:	6952      	ldr	r2, [r2, #20]
 80161c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80161c4:	9105      	str	r1, [sp, #20]
 80161c6:	6a39      	ldr	r1, [r7, #32]
 80161c8:	9104      	str	r1, [sp, #16]
 80161ca:	6839      	ldr	r1, [r7, #0]
 80161cc:	9103      	str	r1, [sp, #12]
 80161ce:	6879      	ldr	r1, [r7, #4]
 80161d0:	9102      	str	r1, [sp, #8]
 80161d2:	9201      	str	r2, [sp, #4]
 80161d4:	9300      	str	r3, [sp, #0]
 80161d6:	4623      	mov	r3, r4
 80161d8:	4602      	mov	r2, r0
 80161da:	4904      	ldr	r1, [pc, #16]	; (80161ec <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80161dc:	68f8      	ldr	r0, [r7, #12]
 80161de:	f000 f807 	bl	80161f0 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80161e2:	bf00      	nop
 80161e4:	3714      	adds	r7, #20
 80161e6:	46bd      	mov	sp, r7
 80161e8:	bd90      	pop	{r4, r7, pc}
 80161ea:	bf00      	nop
 80161ec:	080257a4 	.word	0x080257a4

080161f0 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80161f0:	b590      	push	{r4, r7, lr}
 80161f2:	b087      	sub	sp, #28
 80161f4:	af02      	add	r7, sp, #8
 80161f6:	60f8      	str	r0, [r7, #12]
 80161f8:	60b9      	str	r1, [r7, #8]
 80161fa:	607a      	str	r2, [r7, #4]
 80161fc:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	3308      	adds	r3, #8
 8016202:	68ba      	ldr	r2, [r7, #8]
 8016204:	4910      	ldr	r1, [pc, #64]	; (8016248 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8016206:	4618      	mov	r0, r3
 8016208:	f7ff fcf0 	bl	8015bec <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 801620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801620e:	9300      	str	r3, [sp, #0]
 8016210:	6a3b      	ldr	r3, [r7, #32]
 8016212:	683a      	ldr	r2, [r7, #0]
 8016214:	6879      	ldr	r1, [r7, #4]
 8016216:	68f8      	ldr	r0, [r7, #12]
 8016218:	f7ff fe36 	bl	8015e88 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 801621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801621e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016222:	68f8      	ldr	r0, [r7, #12]
 8016224:	f7ff fe52 	bl	8015ecc <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8016228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	3308      	adds	r3, #8
 801622e:	681c      	ldr	r4, [r3, #0]
 8016230:	68f8      	ldr	r0, [r7, #12]
 8016232:	f000 f80b 	bl	801624c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8016236:	4603      	mov	r3, r0
 8016238:	4619      	mov	r1, r3
 801623a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801623c:	47a0      	blx	r4
}
 801623e:	bf00      	nop
 8016240:	3714      	adds	r7, #20
 8016242:	46bd      	mov	sp, r7
 8016244:	bd90      	pop	{r4, r7, pc}
 8016246:	bf00      	nop
 8016248:	080257d0 	.word	0x080257d0

0801624c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b082      	sub	sp, #8
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	3308      	adds	r3, #8
 8016258:	4618      	mov	r0, r3
 801625a:	f7ff fdad 	bl	8015db8 <_ZN18SimpleStringBuffer8toStringEv>
 801625e:	4603      	mov	r3, r0
}
 8016260:	4618      	mov	r0, r3
 8016262:	3708      	adds	r7, #8
 8016264:	46bd      	mov	sp, r7
 8016266:	bd80      	pop	{r7, pc}

08016268 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b082      	sub	sp, #8
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	3308      	adds	r3, #8
 8016274:	4618      	mov	r0, r3
 8016276:	f7ff fca7 	bl	8015bc8 <_ZN18SimpleStringBuffer5clearEv>
}
 801627a:	bf00      	nop
 801627c:	3708      	adds	r7, #8
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}

08016282 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8016282:	b480      	push	{r7}
 8016284:	b085      	sub	sp, #20
 8016286:	af00      	add	r7, sp, #0
 8016288:	60f8      	str	r0, [r7, #12]
 801628a:	60b9      	str	r1, [r7, #8]
 801628c:	607a      	str	r2, [r7, #4]
 801628e:	603b      	str	r3, [r7, #0]
    number_ = number;
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	687a      	ldr	r2, [r7, #4]
 8016294:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	68ba      	ldr	r2, [r7, #8]
 801629a:	609a      	str	r2, [r3, #8]
    size_ = size;
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	683a      	ldr	r2, [r7, #0]
 80162a0:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	69ba      	ldr	r2, [r7, #24]
 80162a6:	615a      	str	r2, [r3, #20]
    period_ = period;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	7f3a      	ldrb	r2, [r7, #28]
 80162ac:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80162b4:	765a      	strb	r2, [r3, #25]
    file_ = file;
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162ba:	60da      	str	r2, [r3, #12]
    line_ = line;
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80162c0:	611a      	str	r2, [r3, #16]
}
 80162c2:	bf00      	nop
 80162c4:	3714      	adds	r7, #20
 80162c6:	46bd      	mov	sp, r7
 80162c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162cc:	4770      	bx	lr

080162ce <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80162ce:	b480      	push	{r7}
 80162d0:	b085      	sub	sp, #20
 80162d2:	af00      	add	r7, sp, #0
 80162d4:	60f8      	str	r0, [r7, #12]
 80162d6:	60b9      	str	r1, [r7, #8]
 80162d8:	4613      	mov	r3, r2
 80162da:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 80162dc:	79fb      	ldrb	r3, [r7, #7]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d00b      	beq.n	80162fa <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80162e2:	68bb      	ldr	r3, [r7, #8]
 80162e4:	7e1b      	ldrb	r3, [r3, #24]
 80162e6:	79fa      	ldrb	r2, [r7, #7]
 80162e8:	429a      	cmp	r2, r3
 80162ea:	d006      	beq.n	80162fa <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80162ec:	68bb      	ldr	r3, [r7, #8]
 80162ee:	7e1b      	ldrb	r3, [r3, #24]
 80162f0:	2b01      	cmp	r3, #1
 80162f2:	d004      	beq.n	80162fe <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80162f4:	79fb      	ldrb	r3, [r7, #7]
 80162f6:	2b02      	cmp	r3, #2
 80162f8:	d101      	bne.n	80162fe <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80162fa:	2301      	movs	r3, #1
 80162fc:	e000      	b.n	8016300 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 80162fe:	2300      	movs	r3, #0
}
 8016300:	4618      	mov	r0, r3
 8016302:	3714      	adds	r7, #20
 8016304:	46bd      	mov	sp, r7
 8016306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630a:	4770      	bx	lr

0801630c <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 801630c:	b480      	push	{r7}
 801630e:	b083      	sub	sp, #12
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
 8016314:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	681a      	ldr	r2, [r3, #0]
 801631a:	683b      	ldr	r3, [r7, #0]
 801631c:	61da      	str	r2, [r3, #28]
    head_ = node;
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	683a      	ldr	r2, [r7, #0]
 8016322:	601a      	str	r2, [r3, #0]
}
 8016324:	bf00      	nop
 8016326:	370c      	adds	r7, #12
 8016328:	46bd      	mov	sp, r7
 801632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632e:	4770      	bx	lr

08016330 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8016330:	b480      	push	{r7}
 8016332:	b085      	sub	sp, #20
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
 8016338:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8016340:	2300      	movs	r3, #0
 8016342:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d019      	beq.n	801637e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	689b      	ldr	r3, [r3, #8]
 801634e:	683a      	ldr	r2, [r7, #0]
 8016350:	429a      	cmp	r2, r3
 8016352:	d10e      	bne.n	8016372 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8016354:	68bb      	ldr	r3, [r7, #8]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d005      	beq.n	8016366 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	69da      	ldr	r2, [r3, #28]
 801635e:	68bb      	ldr	r3, [r7, #8]
 8016360:	61da      	str	r2, [r3, #28]
                return cur;
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	e00c      	b.n	8016380 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	69da      	ldr	r2, [r3, #28]
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	601a      	str	r2, [r3, #0]
                return cur;
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	e006      	b.n	8016380 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	69db      	ldr	r3, [r3, #28]
 801637a:	60fb      	str	r3, [r7, #12]
    while (cur) {
 801637c:	e7e2      	b.n	8016344 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 801637e:	2300      	movs	r3, #0
}
 8016380:	4618      	mov	r0, r3
 8016382:	3714      	adds	r7, #20
 8016384:	46bd      	mov	sp, r7
 8016386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638a:	4770      	bx	lr

0801638c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 801638c:	b480      	push	{r7}
 801638e:	b085      	sub	sp, #20
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
 8016394:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	60fb      	str	r3, [r7, #12]
  while (cur) {
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d00a      	beq.n	80163b8 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	689b      	ldr	r3, [r3, #8]
 80163a6:	683a      	ldr	r2, [r7, #0]
 80163a8:	429a      	cmp	r2, r3
 80163aa:	d101      	bne.n	80163b0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	e004      	b.n	80163ba <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	69db      	ldr	r3, [r3, #28]
 80163b4:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80163b6:	e7f1      	b.n	801639c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 80163b8:	2300      	movs	r3, #0
}
 80163ba:	4618      	mov	r0, r3
 80163bc:	3714      	adds	r7, #20
 80163be:	46bd      	mov	sp, r7
 80163c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c4:	4770      	bx	lr

080163c6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80163c6:	b580      	push	{r7, lr}
 80163c8:	b086      	sub	sp, #24
 80163ca:	af00      	add	r7, sp, #0
 80163cc:	60f8      	str	r0, [r7, #12]
 80163ce:	60b9      	str	r1, [r7, #8]
 80163d0:	4613      	mov	r3, r2
 80163d2:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80163d4:	68bb      	ldr	r3, [r7, #8]
 80163d6:	617b      	str	r3, [r7, #20]
 80163d8:	697b      	ldr	r3, [r7, #20]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d00e      	beq.n	80163fc <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 80163de:	79fb      	ldrb	r3, [r7, #7]
 80163e0:	461a      	mov	r2, r3
 80163e2:	6979      	ldr	r1, [r7, #20]
 80163e4:	68f8      	ldr	r0, [r7, #12]
 80163e6:	f7ff ff72 	bl	80162ce <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80163ea:	4603      	mov	r3, r0
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d001      	beq.n	80163f4 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 80163f0:	697b      	ldr	r3, [r7, #20]
 80163f2:	e004      	b.n	80163fe <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80163f4:	697b      	ldr	r3, [r7, #20]
 80163f6:	69db      	ldr	r3, [r3, #28]
 80163f8:	617b      	str	r3, [r7, #20]
 80163fa:	e7ed      	b.n	80163d8 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 80163fc:	2300      	movs	r3, #0
}
 80163fe:	4618      	mov	r0, r3
 8016400:	3718      	adds	r7, #24
 8016402:	46bd      	mov	sp, r7
 8016404:	bd80      	pop	{r7, pc}

08016406 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8016406:	b580      	push	{r7, lr}
 8016408:	b082      	sub	sp, #8
 801640a:	af00      	add	r7, sp, #0
 801640c:	6078      	str	r0, [r7, #4]
 801640e:	460b      	mov	r3, r1
 8016410:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	78fa      	ldrb	r2, [r7, #3]
 8016418:	4619      	mov	r1, r3
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	f7ff ffd3 	bl	80163c6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016420:	4603      	mov	r3, r0
}
 8016422:	4618      	mov	r0, r3
 8016424:	3708      	adds	r7, #8
 8016426:	46bd      	mov	sp, r7
 8016428:	bd80      	pop	{r7, pc}

0801642a <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 801642a:	b580      	push	{r7, lr}
 801642c:	b084      	sub	sp, #16
 801642e:	af00      	add	r7, sp, #0
 8016430:	60f8      	str	r0, [r7, #12]
 8016432:	60b9      	str	r1, [r7, #8]
 8016434:	4613      	mov	r3, r2
 8016436:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8016438:	68bb      	ldr	r3, [r7, #8]
 801643a:	69db      	ldr	r3, [r3, #28]
 801643c:	79fa      	ldrb	r2, [r7, #7]
 801643e:	4619      	mov	r1, r3
 8016440:	68f8      	ldr	r0, [r7, #12]
 8016442:	f7ff ffc0 	bl	80163c6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016446:	4603      	mov	r3, r0
}
 8016448:	4618      	mov	r0, r3
 801644a:	3710      	adds	r7, #16
 801644c:	46bd      	mov	sp, r7
 801644e:	bd80      	pop	{r7, pc}

08016450 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b084      	sub	sp, #16
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
 8016458:	460b      	mov	r3, r1
 801645a:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 801645c:	2300      	movs	r3, #0
 801645e:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	60bb      	str	r3, [r7, #8]
 8016466:	68bb      	ldr	r3, [r7, #8]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d00f      	beq.n	801648c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 801646c:	78fb      	ldrb	r3, [r7, #3]
 801646e:	461a      	mov	r2, r3
 8016470:	68b9      	ldr	r1, [r7, #8]
 8016472:	6878      	ldr	r0, [r7, #4]
 8016474:	f7ff ff2b 	bl	80162ce <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016478:	4603      	mov	r3, r0
 801647a:	2b00      	cmp	r3, #0
 801647c:	d002      	beq.n	8016484 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	3301      	adds	r3, #1
 8016482:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	69db      	ldr	r3, [r3, #28]
 8016488:	60bb      	str	r3, [r7, #8]
 801648a:	e7ec      	b.n	8016466 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 801648c:	68fb      	ldr	r3, [r7, #12]
}
 801648e:	4618      	mov	r0, r3
 8016490:	3710      	adds	r7, #16
 8016492:	46bd      	mov	sp, r7
 8016494:	bd80      	pop	{r7, pc}
	...

08016498 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8016498:	b480      	push	{r7}
 801649a:	b083      	sub	sp, #12
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
 80164a0:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 80164a2:	6839      	ldr	r1, [r7, #0]
 80164a4:	4b09      	ldr	r3, [pc, #36]	; (80164cc <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 80164a6:	fba3 2301 	umull	r2, r3, r3, r1
 80164aa:	1aca      	subs	r2, r1, r3
 80164ac:	0852      	lsrs	r2, r2, #1
 80164ae:	4413      	add	r3, r2
 80164b0:	099a      	lsrs	r2, r3, #6
 80164b2:	4613      	mov	r3, r2
 80164b4:	00db      	lsls	r3, r3, #3
 80164b6:	4413      	add	r3, r2
 80164b8:	00db      	lsls	r3, r3, #3
 80164ba:	4413      	add	r3, r2
 80164bc:	1aca      	subs	r2, r1, r3
 80164be:	4613      	mov	r3, r2
}
 80164c0:	4618      	mov	r0, r3
 80164c2:	370c      	adds	r7, #12
 80164c4:	46bd      	mov	sp, r7
 80164c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ca:	4770      	bx	lr
 80164cc:	c0e07039 	.word	0xc0e07039

080164d0 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b082      	sub	sp, #8
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]
 80164d8:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 80164da:	683b      	ldr	r3, [r7, #0]
 80164dc:	689b      	ldr	r3, [r3, #8]
 80164de:	4619      	mov	r1, r3
 80164e0:	6878      	ldr	r0, [r7, #4]
 80164e2:	f7ff ffd9 	bl	8016498 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80164e6:	4603      	mov	r3, r0
 80164e8:	009b      	lsls	r3, r3, #2
 80164ea:	687a      	ldr	r2, [r7, #4]
 80164ec:	4413      	add	r3, r2
 80164ee:	6839      	ldr	r1, [r7, #0]
 80164f0:	4618      	mov	r0, r3
 80164f2:	f7ff ff0b 	bl	801630c <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 80164f6:	bf00      	nop
 80164f8:	3708      	adds	r7, #8
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}

080164fe <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 80164fe:	b580      	push	{r7, lr}
 8016500:	b082      	sub	sp, #8
 8016502:	af00      	add	r7, sp, #0
 8016504:	6078      	str	r0, [r7, #4]
 8016506:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8016508:	6839      	ldr	r1, [r7, #0]
 801650a:	6878      	ldr	r0, [r7, #4]
 801650c:	f7ff ffc4 	bl	8016498 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016510:	4603      	mov	r3, r0
 8016512:	009b      	lsls	r3, r3, #2
 8016514:	687a      	ldr	r2, [r7, #4]
 8016516:	4413      	add	r3, r2
 8016518:	6839      	ldr	r1, [r7, #0]
 801651a:	4618      	mov	r0, r3
 801651c:	f7ff ff08 	bl	8016330 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8016520:	4603      	mov	r3, r0
}
 8016522:	4618      	mov	r0, r3
 8016524:	3708      	adds	r7, #8
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}

0801652a <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 801652a:	b580      	push	{r7, lr}
 801652c:	b082      	sub	sp, #8
 801652e:	af00      	add	r7, sp, #0
 8016530:	6078      	str	r0, [r7, #4]
 8016532:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8016534:	6839      	ldr	r1, [r7, #0]
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f7ff ffae 	bl	8016498 <_ZN23MemoryLeakDetectorTable4hashEPc>
 801653c:	4603      	mov	r3, r0
 801653e:	009b      	lsls	r3, r3, #2
 8016540:	687a      	ldr	r2, [r7, #4]
 8016542:	4413      	add	r3, r2
 8016544:	6839      	ldr	r1, [r7, #0]
 8016546:	4618      	mov	r0, r3
 8016548:	f7ff ff20 	bl	801638c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 801654c:	4603      	mov	r3, r0
}
 801654e:	4618      	mov	r0, r3
 8016550:	3708      	adds	r7, #8
 8016552:	46bd      	mov	sp, r7
 8016554:	bd80      	pop	{r7, pc}

08016556 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8016556:	b580      	push	{r7, lr}
 8016558:	b084      	sub	sp, #16
 801655a:	af00      	add	r7, sp, #0
 801655c:	6078      	str	r0, [r7, #4]
 801655e:	460b      	mov	r3, r1
 8016560:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8016562:	2300      	movs	r3, #0
 8016564:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8016566:	2300      	movs	r3, #0
 8016568:	60bb      	str	r3, [r7, #8]
 801656a:	68bb      	ldr	r3, [r7, #8]
 801656c:	2b48      	cmp	r3, #72	; 0x48
 801656e:	dc10      	bgt.n	8016592 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8016570:	68bb      	ldr	r3, [r7, #8]
 8016572:	009b      	lsls	r3, r3, #2
 8016574:	687a      	ldr	r2, [r7, #4]
 8016576:	4413      	add	r3, r2
 8016578:	78fa      	ldrb	r2, [r7, #3]
 801657a:	4611      	mov	r1, r2
 801657c:	4618      	mov	r0, r3
 801657e:	f7ff ff67 	bl	8016450 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8016582:	4602      	mov	r2, r0
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	4413      	add	r3, r2
 8016588:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801658a:	68bb      	ldr	r3, [r7, #8]
 801658c:	3301      	adds	r3, #1
 801658e:	60bb      	str	r3, [r7, #8]
 8016590:	e7eb      	b.n	801656a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8016592:	68fb      	ldr	r3, [r7, #12]
}
 8016594:	4618      	mov	r0, r3
 8016596:	3710      	adds	r7, #16
 8016598:	46bd      	mov	sp, r7
 801659a:	bd80      	pop	{r7, pc}

0801659c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 801659c:	b580      	push	{r7, lr}
 801659e:	b084      	sub	sp, #16
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	6078      	str	r0, [r7, #4]
 80165a4:	460b      	mov	r3, r1
 80165a6:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 80165a8:	2300      	movs	r3, #0
 80165aa:	60fb      	str	r3, [r7, #12]
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	2b48      	cmp	r3, #72	; 0x48
 80165b0:	dc12      	bgt.n	80165d8 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	009b      	lsls	r3, r3, #2
 80165b6:	687a      	ldr	r2, [r7, #4]
 80165b8:	4413      	add	r3, r2
 80165ba:	78fa      	ldrb	r2, [r7, #3]
 80165bc:	4611      	mov	r1, r2
 80165be:	4618      	mov	r0, r3
 80165c0:	f7ff ff21 	bl	8016406 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80165c4:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 80165c6:	68bb      	ldr	r3, [r7, #8]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d001      	beq.n	80165d0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 80165cc:	68bb      	ldr	r3, [r7, #8]
 80165ce:	e004      	b.n	80165da <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	3301      	adds	r3, #1
 80165d4:	60fb      	str	r3, [r7, #12]
 80165d6:	e7e9      	b.n	80165ac <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 80165d8:	2300      	movs	r3, #0
}
 80165da:	4618      	mov	r0, r3
 80165dc:	3710      	adds	r7, #16
 80165de:	46bd      	mov	sp, r7
 80165e0:	bd80      	pop	{r7, pc}

080165e2 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 80165e2:	b580      	push	{r7, lr}
 80165e4:	b086      	sub	sp, #24
 80165e6:	af00      	add	r7, sp, #0
 80165e8:	60f8      	str	r0, [r7, #12]
 80165ea:	60b9      	str	r1, [r7, #8]
 80165ec:	4613      	mov	r3, r2
 80165ee:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 80165f0:	68bb      	ldr	r3, [r7, #8]
 80165f2:	689b      	ldr	r3, [r3, #8]
 80165f4:	4619      	mov	r1, r3
 80165f6:	68f8      	ldr	r0, [r7, #12]
 80165f8:	f7ff ff4e 	bl	8016498 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80165fc:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 80165fe:	697b      	ldr	r3, [r7, #20]
 8016600:	009b      	lsls	r3, r3, #2
 8016602:	68fa      	ldr	r2, [r7, #12]
 8016604:	4413      	add	r3, r2
 8016606:	79fa      	ldrb	r2, [r7, #7]
 8016608:	68b9      	ldr	r1, [r7, #8]
 801660a:	4618      	mov	r0, r3
 801660c:	f7ff ff0d 	bl	801642a <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016610:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8016612:	693b      	ldr	r3, [r7, #16]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d001      	beq.n	801661c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8016618:	693b      	ldr	r3, [r7, #16]
 801661a:	e019      	b.n	8016650 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 801661c:	697b      	ldr	r3, [r7, #20]
 801661e:	3301      	adds	r3, #1
 8016620:	617b      	str	r3, [r7, #20]
 8016622:	697b      	ldr	r3, [r7, #20]
 8016624:	2b48      	cmp	r3, #72	; 0x48
 8016626:	d812      	bhi.n	801664e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8016628:	697b      	ldr	r3, [r7, #20]
 801662a:	009b      	lsls	r3, r3, #2
 801662c:	68fa      	ldr	r2, [r7, #12]
 801662e:	4413      	add	r3, r2
 8016630:	79fa      	ldrb	r2, [r7, #7]
 8016632:	4611      	mov	r1, r2
 8016634:	4618      	mov	r0, r3
 8016636:	f7ff fee6 	bl	8016406 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 801663a:	6138      	str	r0, [r7, #16]
        if (node) return node;
 801663c:	693b      	ldr	r3, [r7, #16]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d001      	beq.n	8016646 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8016642:	693b      	ldr	r3, [r7, #16]
 8016644:	e004      	b.n	8016650 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8016646:	697b      	ldr	r3, [r7, #20]
 8016648:	3301      	adds	r3, #1
 801664a:	617b      	str	r3, [r7, #20]
 801664c:	e7e9      	b.n	8016622 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 801664e:	2300      	movs	r3, #0
}
 8016650:	4618      	mov	r0, r3
 8016652:	3718      	adds	r7, #24
 8016654:	46bd      	mov	sp, r7
 8016656:	bd80      	pop	{r7, pc}

08016658 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8016658:	b5b0      	push	{r4, r5, r7, lr}
 801665a:	b082      	sub	sp, #8
 801665c:	af00      	add	r7, sp, #0
 801665e:	6078      	str	r0, [r7, #4]
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2448      	movs	r4, #72	; 0x48
 8016664:	461d      	mov	r5, r3
 8016666:	2c00      	cmp	r4, #0
 8016668:	db05      	blt.n	8016676 <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 801666a:	4628      	mov	r0, r5
 801666c:	f7ff fa84 	bl	8015b78 <_ZN22MemoryLeakDetectorListC1Ev>
 8016670:	3504      	adds	r5, #4
 8016672:	3c01      	subs	r4, #1
 8016674:	e7f7      	b.n	8016666 <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	4618      	mov	r0, r3
 801667a:	3708      	adds	r7, #8
 801667c:	46bd      	mov	sp, r7
 801667e:	bdb0      	pop	{r4, r5, r7, pc}

08016680 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8016680:	b590      	push	{r4, r7, lr}
 8016682:	b083      	sub	sp, #12
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
 8016688:	6039      	str	r1, [r7, #0]
 801668a:	4a1d      	ldr	r2, [pc, #116]	; (8016700 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	601a      	str	r2, [r3, #0]
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	330c      	adds	r3, #12
 8016694:	4618      	mov	r0, r3
 8016696:	f7ff fbe3 	bl	8015e60 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80166a0:	331c      	adds	r3, #28
 80166a2:	4618      	mov	r0, r3
 80166a4:	f7ff ffd8 	bl	8016658 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80166ae:	2201      	movs	r2, #1
 80166b0:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80166b8:	3304      	adds	r3, #4
 80166ba:	2201      	movs	r2, #1
 80166bc:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	2201      	movs	r2, #1
 80166c2:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80166ca:	3308      	adds	r3, #8
 80166cc:	2200      	movs	r2, #0
 80166ce:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	683a      	ldr	r2, [r7, #0]
 80166d4:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 80166d6:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 80166da:	490a      	ldr	r1, [pc, #40]	; (8016704 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 80166dc:	2004      	movs	r0, #4
 80166de:	f7f3 fb17 	bl	8009d10 <_ZnwjPKci>
 80166e2:	4604      	mov	r4, r0
 80166e4:	4620      	mov	r0, r4
 80166e6:	f7f5 fbe7 	bl	800beb8 <_ZN11SimpleMutexC1Ev>
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80166f0:	330c      	adds	r3, #12
 80166f2:	601c      	str	r4, [r3, #0]
}
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	4618      	mov	r0, r3
 80166f8:	370c      	adds	r7, #12
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd90      	pop	{r4, r7, pc}
 80166fe:	bf00      	nop
 8016700:	08028404 	.word	0x08028404
 8016704:	080257d4 	.word	0x080257d4

08016708 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8016708:	b590      	push	{r4, r7, lr}
 801670a:	b083      	sub	sp, #12
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
 8016710:	4a0e      	ldr	r2, [pc, #56]	; (801674c <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801671c:	330c      	adds	r3, #12
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d00d      	beq.n	8016740 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801672a:	330c      	adds	r3, #12
 801672c:	681c      	ldr	r4, [r3, #0]
 801672e:	2c00      	cmp	r4, #0
 8016730:	d006      	beq.n	8016740 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8016732:	4620      	mov	r0, r4
 8016734:	f7f5 fbd2 	bl	800bedc <_ZN11SimpleMutexD1Ev>
 8016738:	2104      	movs	r1, #4
 801673a:	4620      	mov	r0, r4
 801673c:	f7f3 fafc 	bl	8009d38 <_ZdlPvj>
    }
}
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	4618      	mov	r0, r3
 8016744:	370c      	adds	r7, #12
 8016746:	46bd      	mov	sp, r7
 8016748:	bd90      	pop	{r4, r7, pc}
 801674a:	bf00      	nop
 801674c:	08028404 	.word	0x08028404

08016750 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8016750:	b580      	push	{r7, lr}
 8016752:	b082      	sub	sp, #8
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
}
 8016758:	6878      	ldr	r0, [r7, #4]
 801675a:	f7ff ffd5 	bl	8016708 <_ZN18MemoryLeakDetectorD1Ev>
 801675e:	f241 1150 	movw	r1, #4432	; 0x1150
 8016762:	6878      	ldr	r0, [r7, #4]
 8016764:	f7f3 fae8 	bl	8009d38 <_ZdlPvj>
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	4618      	mov	r0, r3
 801676c:	3708      	adds	r7, #8
 801676e:	46bd      	mov	sp, r7
 8016770:	bd80      	pop	{r7, pc}

08016772 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8016772:	b580      	push	{r7, lr}
 8016774:	b082      	sub	sp, #8
 8016776:	af00      	add	r7, sp, #0
 8016778:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	330c      	adds	r3, #12
 801677e:	4618      	mov	r0, r3
 8016780:	f7ff fd72 	bl	8016268 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2203      	movs	r2, #3
 8016788:	721a      	strb	r2, [r3, #8]
}
 801678a:	bf00      	nop
 801678c:	3708      	adds	r7, #8
 801678e:	46bd      	mov	sp, r7
 8016790:	bd80      	pop	{r7, pc}

08016792 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8016792:	b480      	push	{r7}
 8016794:	b083      	sub	sp, #12
 8016796:	af00      	add	r7, sp, #0
 8016798:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	2202      	movs	r2, #2
 801679e:	721a      	strb	r2, [r3, #8]
}
 80167a0:	bf00      	nop
 80167a2:	370c      	adds	r7, #12
 80167a4:	46bd      	mov	sp, r7
 80167a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167aa:	4770      	bx	lr

080167ac <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 80167ac:	b480      	push	{r7}
 80167ae:	b083      	sub	sp, #12
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	2202      	movs	r2, #2
 80167b8:	721a      	strb	r2, [r3, #8]
}
 80167ba:	bf00      	nop
 80167bc:	370c      	adds	r7, #12
 80167be:	46bd      	mov	sp, r7
 80167c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c4:	4770      	bx	lr

080167c6 <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 80167c6:	b480      	push	{r7}
 80167c8:	b083      	sub	sp, #12
 80167ca:	af00      	add	r7, sp, #0
 80167cc:	6078      	str	r0, [r7, #4]
    return mutex_;
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80167d4:	330c      	adds	r3, #12
 80167d6:	681b      	ldr	r3, [r3, #0]
}
 80167d8:	4618      	mov	r0, r3
 80167da:	370c      	adds	r7, #12
 80167dc:	46bd      	mov	sp, r7
 80167de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e2:	4770      	bx	lr

080167e4 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 80167e4:	b480      	push	{r7}
 80167e6:	b083      	sub	sp, #12
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	f023 0303 	bic.w	r3, r3, #3
 80167f2:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 80167f4:	4618      	mov	r0, r3
 80167f6:	370c      	adds	r7, #12
 80167f8:	46bd      	mov	sp, r7
 80167fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fe:	4770      	bx	lr

08016800 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8016800:	b580      	push	{r7, lr}
 8016802:	b082      	sub	sp, #8
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
 8016808:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 801680a:	683b      	ldr	r3, [r7, #0]
 801680c:	3303      	adds	r3, #3
 801680e:	4618      	mov	r0, r3
 8016810:	f7ff ffe8 	bl	80167e4 <_ZL31calculateVoidPointerAlignedSizej>
 8016814:	4603      	mov	r3, r0
}
 8016816:	4618      	mov	r0, r3
 8016818:	3708      	adds	r7, #8
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}

0801681e <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 801681e:	b580      	push	{r7, lr}
 8016820:	b084      	sub	sp, #16
 8016822:	af00      	add	r7, sp, #0
 8016824:	60f8      	str	r0, [r7, #12]
 8016826:	60b9      	str	r1, [r7, #8]
 8016828:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 801682a:	6879      	ldr	r1, [r7, #4]
 801682c:	68f8      	ldr	r0, [r7, #12]
 801682e:	f7ff ffe7 	bl	8016800 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016832:	4602      	mov	r2, r0
 8016834:	68bb      	ldr	r3, [r7, #8]
 8016836:	4413      	add	r3, r2
}
 8016838:	4618      	mov	r0, r3
 801683a:	3710      	adds	r7, #16
 801683c:	46bd      	mov	sp, r7
 801683e:	bd80      	pop	{r7, pc}

08016840 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8016840:	b580      	push	{r7, lr}
 8016842:	b08a      	sub	sp, #40	; 0x28
 8016844:	af06      	add	r7, sp, #24
 8016846:	60f8      	str	r0, [r7, #12]
 8016848:	60b9      	str	r1, [r7, #8]
 801684a:	607a      	str	r2, [r7, #4]
 801684c:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016854:	3304      	adds	r3, #4
 8016856:	681a      	ldr	r2, [r3, #0]
 8016858:	1c51      	adds	r1, r2, #1
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016860:	3304      	adds	r3, #4
 8016862:	6019      	str	r1, [r3, #0]
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	7a19      	ldrb	r1, [r3, #8]
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801686e:	3308      	adds	r3, #8
 8016870:	781b      	ldrb	r3, [r3, #0]
 8016872:	6a38      	ldr	r0, [r7, #32]
 8016874:	9004      	str	r0, [sp, #16]
 8016876:	69f8      	ldr	r0, [r7, #28]
 8016878:	9003      	str	r0, [sp, #12]
 801687a:	9302      	str	r3, [sp, #8]
 801687c:	9101      	str	r1, [sp, #4]
 801687e:	69bb      	ldr	r3, [r7, #24]
 8016880:	9300      	str	r3, [sp, #0]
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	6879      	ldr	r1, [r7, #4]
 8016886:	68b8      	ldr	r0, [r7, #8]
 8016888:	f7ff fcfb 	bl	8016282 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 801688c:	68bb      	ldr	r3, [r7, #8]
 801688e:	689a      	ldr	r2, [r3, #8]
 8016890:	68bb      	ldr	r3, [r7, #8]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	4413      	add	r3, r2
 8016896:	4619      	mov	r1, r3
 8016898:	68f8      	ldr	r0, [r7, #12]
 801689a:	f000 f861 	bl	8016960 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80168a4:	331c      	adds	r3, #28
 80168a6:	68b9      	ldr	r1, [r7, #8]
 80168a8:	4618      	mov	r0, r3
 80168aa:	f7ff fe11 	bl	80164d0 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 80168ae:	bf00      	nop
 80168b0:	3710      	adds	r7, #16
 80168b2:	46bd      	mov	sp, r7
 80168b4:	bd80      	pop	{r7, pc}

080168b6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80168b6:	b580      	push	{r7, lr}
 80168b8:	b08a      	sub	sp, #40	; 0x28
 80168ba:	af04      	add	r7, sp, #16
 80168bc:	60f8      	str	r0, [r7, #12]
 80168be:	60b9      	str	r1, [r7, #8]
 80168c0:	607a      	str	r2, [r7, #4]
 80168c2:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80168c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80168c8:	9302      	str	r3, [sp, #8]
 80168ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168cc:	9301      	str	r3, [sp, #4]
 80168ce:	6a3b      	ldr	r3, [r7, #32]
 80168d0:	9300      	str	r3, [sp, #0]
 80168d2:	683b      	ldr	r3, [r7, #0]
 80168d4:	687a      	ldr	r2, [r7, #4]
 80168d6:	68b9      	ldr	r1, [r7, #8]
 80168d8:	68f8      	ldr	r0, [r7, #12]
 80168da:	f000 f96f 	bl	8016bbc <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 80168de:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 80168e0:	697b      	ldr	r3, [r7, #20]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d101      	bne.n	80168ea <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 80168e6:	2300      	movs	r3, #0
 80168e8:	e017      	b.n	801691a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 80168ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80168ee:	9300      	str	r3, [sp, #0]
 80168f0:	697b      	ldr	r3, [r7, #20]
 80168f2:	683a      	ldr	r2, [r7, #0]
 80168f4:	68b9      	ldr	r1, [r7, #8]
 80168f6:	68f8      	ldr	r0, [r7, #12]
 80168f8:	f000 f98a 	bl	8016c10 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80168fc:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 80168fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016900:	9302      	str	r3, [sp, #8]
 8016902:	6a3b      	ldr	r3, [r7, #32]
 8016904:	9301      	str	r3, [sp, #4]
 8016906:	68bb      	ldr	r3, [r7, #8]
 8016908:	9300      	str	r3, [sp, #0]
 801690a:	683b      	ldr	r3, [r7, #0]
 801690c:	697a      	ldr	r2, [r7, #20]
 801690e:	6939      	ldr	r1, [r7, #16]
 8016910:	68f8      	ldr	r0, [r7, #12]
 8016912:	f7ff ff95 	bl	8016840 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8016916:	693b      	ldr	r3, [r7, #16]
 8016918:	689b      	ldr	r3, [r3, #8]
}
 801691a:	4618      	mov	r0, r3
 801691c:	3718      	adds	r7, #24
 801691e:	46bd      	mov	sp, r7
 8016920:	bd80      	pop	{r7, pc}
	...

08016924 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b084      	sub	sp, #16
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
 801692c:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016934:	331c      	adds	r3, #28
 8016936:	6839      	ldr	r1, [r7, #0]
 8016938:	4618      	mov	r0, r3
 801693a:	f7ff fdf6 	bl	801652a <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 801693e:	60f8      	str	r0, [r7, #12]
  if (node)
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d006      	beq.n	8016954 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 8016946:	4b05      	ldr	r3, [pc, #20]	; (801695c <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	68fa      	ldr	r2, [r7, #12]
 801694c:	6812      	ldr	r2, [r2, #0]
 801694e:	21cd      	movs	r1, #205	; 0xcd
 8016950:	6838      	ldr	r0, [r7, #0]
 8016952:	4798      	blx	r3
#endif
}
 8016954:	bf00      	nop
 8016956:	3710      	adds	r7, #16
 8016958:	46bd      	mov	sp, r7
 801695a:	bd80      	pop	{r7, pc}
 801695c:	200000d8 	.word	0x200000d8

08016960 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8016960:	b480      	push	{r7}
 8016962:	b085      	sub	sp, #20
 8016964:	af00      	add	r7, sp, #0
 8016966:	6078      	str	r0, [r7, #4]
 8016968:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801696a:	2300      	movs	r3, #0
 801696c:	60fb      	str	r3, [r7, #12]
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	2b02      	cmp	r3, #2
 8016972:	d812      	bhi.n	801699a <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8016974:	68f9      	ldr	r1, [r7, #12]
 8016976:	4b0c      	ldr	r3, [pc, #48]	; (80169a8 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8016978:	fba3 2301 	umull	r2, r3, r3, r1
 801697c:	085a      	lsrs	r2, r3, #1
 801697e:	4613      	mov	r3, r2
 8016980:	005b      	lsls	r3, r3, #1
 8016982:	4413      	add	r3, r2
 8016984:	1aca      	subs	r2, r1, r3
 8016986:	6839      	ldr	r1, [r7, #0]
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	440b      	add	r3, r1
 801698c:	4907      	ldr	r1, [pc, #28]	; (80169ac <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 801698e:	5c8a      	ldrb	r2, [r1, r2]
 8016990:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	3301      	adds	r3, #1
 8016996:	60fb      	str	r3, [r7, #12]
 8016998:	e7e9      	b.n	801696e <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 801699a:	bf00      	nop
 801699c:	3714      	adds	r7, #20
 801699e:	46bd      	mov	sp, r7
 80169a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a4:	4770      	bx	lr
 80169a6:	bf00      	nop
 80169a8:	aaaaaaab 	.word	0xaaaaaaab
 80169ac:	080283f8 	.word	0x080283f8

080169b0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 80169b0:	b480      	push	{r7}
 80169b2:	b085      	sub	sp, #20
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	6078      	str	r0, [r7, #4]
 80169b8:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80169ba:	2300      	movs	r3, #0
 80169bc:	60fb      	str	r3, [r7, #12]
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	2b02      	cmp	r3, #2
 80169c2:	d816      	bhi.n	80169f2 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 80169c4:	683a      	ldr	r2, [r7, #0]
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	4413      	add	r3, r2
 80169ca:	7818      	ldrb	r0, [r3, #0]
 80169cc:	68f9      	ldr	r1, [r7, #12]
 80169ce:	4b0c      	ldr	r3, [pc, #48]	; (8016a00 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 80169d0:	fba3 2301 	umull	r2, r3, r3, r1
 80169d4:	085a      	lsrs	r2, r3, #1
 80169d6:	4613      	mov	r3, r2
 80169d8:	005b      	lsls	r3, r3, #1
 80169da:	4413      	add	r3, r2
 80169dc:	1aca      	subs	r2, r1, r3
 80169de:	4b09      	ldr	r3, [pc, #36]	; (8016a04 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 80169e0:	5c9b      	ldrb	r3, [r3, r2]
 80169e2:	4298      	cmp	r0, r3
 80169e4:	d001      	beq.n	80169ea <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 80169e6:	2300      	movs	r3, #0
 80169e8:	e004      	b.n	80169f4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	3301      	adds	r3, #1
 80169ee:	60fb      	str	r3, [r7, #12]
 80169f0:	e7e5      	b.n	80169be <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 80169f2:	2301      	movs	r3, #1
}
 80169f4:	4618      	mov	r0, r3
 80169f6:	3714      	adds	r7, #20
 80169f8:	46bd      	mov	sp, r7
 80169fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fe:	4770      	bx	lr
 8016a00:	aaaaaaab 	.word	0xaaaaaaab
 8016a04:	080283f8 	.word	0x080283f8

08016a08 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b084      	sub	sp, #16
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	60f8      	str	r0, [r7, #12]
 8016a10:	60b9      	str	r1, [r7, #8]
 8016a12:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8016a14:	68ba      	ldr	r2, [r7, #8]
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	429a      	cmp	r2, r3
 8016a1a:	d101      	bne.n	8016a20 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8016a1c:	2301      	movs	r3, #1
 8016a1e:	e013      	b.n	8016a48 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	f083 0301 	eor.w	r3, r3, #1
 8016a2c:	b2db      	uxtb	r3, r3
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d001      	beq.n	8016a36 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8016a32:	2301      	movs	r3, #1
 8016a34:	e008      	b.n	8016a48 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	331c      	adds	r3, #28
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	68b9      	ldr	r1, [r7, #8]
 8016a40:	6878      	ldr	r0, [r7, #4]
 8016a42:	4798      	blx	r3
 8016a44:	4603      	mov	r3, r0
 8016a46:	bf00      	nop
}
 8016a48:	4618      	mov	r0, r3
 8016a4a:	3710      	adds	r7, #16
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}

08016a50 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8016a50:	b590      	push	{r4, r7, lr}
 8016a52:	b087      	sub	sp, #28
 8016a54:	af02      	add	r7, sp, #8
 8016a56:	60f8      	str	r0, [r7, #12]
 8016a58:	60b9      	str	r1, [r7, #8]
 8016a5a:	607a      	str	r2, [r7, #4]
 8016a5c:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8016a5e:	68bb      	ldr	r3, [r7, #8]
 8016a60:	695a      	ldr	r2, [r3, #20]
 8016a62:	68bb      	ldr	r3, [r7, #8]
 8016a64:	695b      	ldr	r3, [r3, #20]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	3328      	adds	r3, #40	; 0x28
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	4610      	mov	r0, r2
 8016a6e:	4798      	blx	r3
 8016a70:	4604      	mov	r4, r0
 8016a72:	6a3b      	ldr	r3, [r7, #32]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	3328      	adds	r3, #40	; 0x28
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	6a38      	ldr	r0, [r7, #32]
 8016a7c:	4798      	blx	r3
 8016a7e:	4603      	mov	r3, r0
 8016a80:	461a      	mov	r2, r3
 8016a82:	4621      	mov	r1, r4
 8016a84:	68f8      	ldr	r0, [r7, #12]
 8016a86:	f7ff ffbf 	bl	8016a08 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	f083 0301 	eor.w	r3, r3, #1
 8016a90:	b2db      	uxtb	r3, r3
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d014      	beq.n	8016ac0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	f103 040c 	add.w	r4, r3, #12
 8016a9c:	6a3b      	ldr	r3, [r7, #32]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	3328      	adds	r3, #40	; 0x28
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	6a38      	ldr	r0, [r7, #32]
 8016aa6:	4798      	blx	r3
 8016aa8:	4602      	mov	r2, r0
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	685b      	ldr	r3, [r3, #4]
 8016aae:	9301      	str	r3, [sp, #4]
 8016ab0:	9200      	str	r2, [sp, #0]
 8016ab2:	683b      	ldr	r3, [r7, #0]
 8016ab4:	687a      	ldr	r2, [r7, #4]
 8016ab6:	68b9      	ldr	r1, [r7, #8]
 8016ab8:	4620      	mov	r0, r4
 8016aba:	f7ff fb4d 	bl	8016158 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8016abe:	e02e      	b.n	8016b1e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8016ac0:	68bb      	ldr	r3, [r7, #8]
 8016ac2:	689a      	ldr	r2, [r3, #8]
 8016ac4:	68bb      	ldr	r3, [r7, #8]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	4413      	add	r3, r2
 8016aca:	4619      	mov	r1, r3
 8016acc:	68f8      	ldr	r0, [r7, #12]
 8016ace:	f7ff ff6f 	bl	80169b0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	f083 0301 	eor.w	r3, r3, #1
 8016ad8:	b2db      	uxtb	r3, r3
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d014      	beq.n	8016b08 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	f103 040c 	add.w	r4, r3, #12
 8016ae4:	6a3b      	ldr	r3, [r7, #32]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	3328      	adds	r3, #40	; 0x28
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	6a38      	ldr	r0, [r7, #32]
 8016aee:	4798      	blx	r3
 8016af0:	4602      	mov	r2, r0
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	685b      	ldr	r3, [r3, #4]
 8016af6:	9301      	str	r3, [sp, #4]
 8016af8:	9200      	str	r2, [sp, #0]
 8016afa:	683b      	ldr	r3, [r7, #0]
 8016afc:	687a      	ldr	r2, [r7, #4]
 8016afe:	68b9      	ldr	r1, [r7, #8]
 8016b00:	4620      	mov	r0, r4
 8016b02:	f7ff fb4f 	bl	80161a4 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8016b06:	e00a      	b.n	8016b1e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8016b08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d006      	beq.n	8016b1e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8016b10:	6a3b      	ldr	r3, [r7, #32]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	3324      	adds	r3, #36	; 0x24
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	68b9      	ldr	r1, [r7, #8]
 8016b1a:	6a38      	ldr	r0, [r7, #32]
 8016b1c:	4798      	blx	r3
}
 8016b1e:	bf00      	nop
 8016b20:	3714      	adds	r7, #20
 8016b22:	46bd      	mov	sp, r7
 8016b24:	bd90      	pop	{r4, r7, pc}
	...

08016b28 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b086      	sub	sp, #24
 8016b2c:	af02      	add	r7, sp, #8
 8016b2e:	60f8      	str	r0, [r7, #12]
 8016b30:	60b9      	str	r1, [r7, #8]
 8016b32:	607a      	str	r2, [r7, #4]
 8016b34:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8016b36:	4b08      	ldr	r3, [pc, #32]	; (8016b58 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8016b38:	681a      	ldr	r2, [r3, #0]
 8016b3a:	78fb      	ldrb	r3, [r7, #3]
 8016b3c:	9301      	str	r3, [sp, #4]
 8016b3e:	2300      	movs	r3, #0
 8016b40:	9300      	str	r3, [sp, #0]
 8016b42:	4613      	mov	r3, r2
 8016b44:	687a      	ldr	r2, [r7, #4]
 8016b46:	68b9      	ldr	r1, [r7, #8]
 8016b48:	68f8      	ldr	r0, [r7, #12]
 8016b4a:	f000 f87f 	bl	8016c4c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8016b4e:	4603      	mov	r3, r0
}
 8016b50:	4618      	mov	r0, r3
 8016b52:	3710      	adds	r7, #16
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd80      	pop	{r7, pc}
 8016b58:	20000100 	.word	0x20000100

08016b5c <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8016b5c:	b590      	push	{r4, r7, lr}
 8016b5e:	b085      	sub	sp, #20
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	60f8      	str	r0, [r7, #12]
 8016b64:	60b9      	str	r1, [r7, #8]
 8016b66:	607a      	str	r2, [r7, #4]
 8016b68:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8016b6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d00e      	beq.n	8016b90 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8016b72:	68bb      	ldr	r3, [r7, #8]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	3308      	adds	r3, #8
 8016b78:	681c      	ldr	r4, [r3, #0]
 8016b7a:	6879      	ldr	r1, [r7, #4]
 8016b7c:	68f8      	ldr	r0, [r7, #12]
 8016b7e:	f7ff fe3f 	bl	8016800 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016b82:	4601      	mov	r1, r0
 8016b84:	6a3b      	ldr	r3, [r7, #32]
 8016b86:	683a      	ldr	r2, [r7, #0]
 8016b88:	68b8      	ldr	r0, [r7, #8]
 8016b8a:	47a0      	blx	r4
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	e010      	b.n	8016bb2 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8016b90:	68bb      	ldr	r3, [r7, #8]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	3308      	adds	r3, #8
 8016b96:	681c      	ldr	r4, [r3, #0]
 8016b98:	6879      	ldr	r1, [r7, #4]
 8016b9a:	68f8      	ldr	r0, [r7, #12]
 8016b9c:	f7ff fe30 	bl	8016800 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016ba0:	4603      	mov	r3, r0
 8016ba2:	f103 0120 	add.w	r1, r3, #32
 8016ba6:	6a3b      	ldr	r3, [r7, #32]
 8016ba8:	683a      	ldr	r2, [r7, #0]
 8016baa:	68b8      	ldr	r0, [r7, #8]
 8016bac:	47a0      	blx	r4
 8016bae:	4603      	mov	r3, r0
 8016bb0:	bf00      	nop
}
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	3714      	adds	r7, #20
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd90      	pop	{r4, r7, pc}
	...

08016bbc <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8016bbc:	b590      	push	{r4, r7, lr}
 8016bbe:	b085      	sub	sp, #20
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	60f8      	str	r0, [r7, #12]
 8016bc4:	60b9      	str	r1, [r7, #8]
 8016bc6:	607a      	str	r2, [r7, #4]
 8016bc8:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8016bca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d00b      	beq.n	8016bea <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8016bd2:	4b0e      	ldr	r3, [pc, #56]	; (8016c0c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8016bd4:	681c      	ldr	r4, [r3, #0]
 8016bd6:	6839      	ldr	r1, [r7, #0]
 8016bd8:	68f8      	ldr	r0, [r7, #12]
 8016bda:	f7ff fe11 	bl	8016800 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016bde:	4603      	mov	r3, r0
 8016be0:	4619      	mov	r1, r3
 8016be2:	6878      	ldr	r0, [r7, #4]
 8016be4:	47a0      	blx	r4
 8016be6:	4603      	mov	r3, r0
 8016be8:	e00c      	b.n	8016c04 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8016bea:	4b08      	ldr	r3, [pc, #32]	; (8016c0c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8016bec:	681c      	ldr	r4, [r3, #0]
 8016bee:	6839      	ldr	r1, [r7, #0]
 8016bf0:	68f8      	ldr	r0, [r7, #12]
 8016bf2:	f7ff fe05 	bl	8016800 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	3320      	adds	r3, #32
 8016bfa:	4619      	mov	r1, r3
 8016bfc:	6878      	ldr	r0, [r7, #4]
 8016bfe:	47a0      	blx	r4
 8016c00:	4603      	mov	r3, r0
 8016c02:	bf00      	nop
}
 8016c04:	4618      	mov	r0, r3
 8016c06:	3714      	adds	r7, #20
 8016c08:	46bd      	mov	sp, r7
 8016c0a:	bd90      	pop	{r4, r7, pc}
 8016c0c:	200000cc 	.word	0x200000cc

08016c10 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b084      	sub	sp, #16
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	60f8      	str	r0, [r7, #12]
 8016c18:	60b9      	str	r1, [r7, #8]
 8016c1a:	607a      	str	r2, [r7, #4]
 8016c1c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8016c1e:	7e3b      	ldrb	r3, [r7, #24]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d008      	beq.n	8016c36 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8016c24:	68bb      	ldr	r3, [r7, #8]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	3320      	adds	r3, #32
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	2120      	movs	r1, #32
 8016c2e:	68b8      	ldr	r0, [r7, #8]
 8016c30:	4798      	blx	r3
 8016c32:	4603      	mov	r3, r0
 8016c34:	e006      	b.n	8016c44 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8016c36:	687a      	ldr	r2, [r7, #4]
 8016c38:	6839      	ldr	r1, [r7, #0]
 8016c3a:	68f8      	ldr	r0, [r7, #12]
 8016c3c:	f7ff fdef 	bl	801681e <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8016c40:	4603      	mov	r3, r0
 8016c42:	bf00      	nop
}
 8016c44:	4618      	mov	r0, r3
 8016c46:	3710      	adds	r7, #16
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	bd80      	pop	{r7, pc}

08016c4c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b08a      	sub	sp, #40	; 0x28
 8016c50:	af04      	add	r7, sp, #16
 8016c52:	60f8      	str	r0, [r7, #12]
 8016c54:	60b9      	str	r1, [r7, #8]
 8016c56:	607a      	str	r2, [r7, #4]
 8016c58:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8016c5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016c5e:	9301      	str	r3, [sp, #4]
 8016c60:	6a3b      	ldr	r3, [r7, #32]
 8016c62:	9300      	str	r3, [sp, #0]
 8016c64:	683b      	ldr	r3, [r7, #0]
 8016c66:	687a      	ldr	r2, [r7, #4]
 8016c68:	68b9      	ldr	r1, [r7, #8]
 8016c6a:	68f8      	ldr	r0, [r7, #12]
 8016c6c:	f7ff ff76 	bl	8016b5c <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8016c70:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8016c72:	697b      	ldr	r3, [r7, #20]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d101      	bne.n	8016c7c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8016c78:	2300      	movs	r3, #0
 8016c7a:	e017      	b.n	8016cac <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8016c7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016c80:	9300      	str	r3, [sp, #0]
 8016c82:	697b      	ldr	r3, [r7, #20]
 8016c84:	687a      	ldr	r2, [r7, #4]
 8016c86:	68b9      	ldr	r1, [r7, #8]
 8016c88:	68f8      	ldr	r0, [r7, #12]
 8016c8a:	f7ff ffc1 	bl	8016c10 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8016c8e:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8016c90:	6a3b      	ldr	r3, [r7, #32]
 8016c92:	9302      	str	r3, [sp, #8]
 8016c94:	683b      	ldr	r3, [r7, #0]
 8016c96:	9301      	str	r3, [sp, #4]
 8016c98:	68bb      	ldr	r3, [r7, #8]
 8016c9a:	9300      	str	r3, [sp, #0]
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	697a      	ldr	r2, [r7, #20]
 8016ca0:	6939      	ldr	r1, [r7, #16]
 8016ca2:	68f8      	ldr	r0, [r7, #12]
 8016ca4:	f7ff fdcc 	bl	8016840 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8016ca8:	693b      	ldr	r3, [r7, #16]
 8016caa:	689b      	ldr	r3, [r3, #8]
}
 8016cac:	4618      	mov	r0, r3
 8016cae:	3718      	adds	r7, #24
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	bd80      	pop	{r7, pc}

08016cb4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8016cb4:	b590      	push	{r4, r7, lr}
 8016cb6:	b089      	sub	sp, #36	; 0x24
 8016cb8:	af02      	add	r7, sp, #8
 8016cba:	60f8      	str	r0, [r7, #12]
 8016cbc:	60b9      	str	r1, [r7, #8]
 8016cbe:	607a      	str	r2, [r7, #4]
 8016cc0:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d03a      	beq.n	8016d3e <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016cce:	331c      	adds	r3, #28
 8016cd0:	6879      	ldr	r1, [r7, #4]
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f7ff fc13 	bl	80164fe <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8016cd8:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8016cda:	697b      	ldr	r3, [r7, #20]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d10b      	bne.n	8016cf8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	f103 000c 	add.w	r0, r3, #12
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	685b      	ldr	r3, [r3, #4]
 8016cea:	9300      	str	r3, [sp, #0]
 8016cec:	68bb      	ldr	r3, [r7, #8]
 8016cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016cf0:	6839      	ldr	r1, [r7, #0]
 8016cf2:	f7ff fa0d 	bl	8016110 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8016cf6:	e023      	b.n	8016d40 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8016cf8:	68b8      	ldr	r0, [r7, #8]
 8016cfa:	f7f8 ff95 	bl	800fc28 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	f083 0301 	eor.w	r3, r3, #1
 8016d04:	b2db      	uxtb	r3, r3
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d01a      	beq.n	8016d40 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8016d0a:	697b      	ldr	r3, [r7, #20]
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8016d10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016d14:	9301      	str	r3, [sp, #4]
 8016d16:	68bb      	ldr	r3, [r7, #8]
 8016d18:	9300      	str	r3, [sp, #0]
 8016d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d1c:	683a      	ldr	r2, [r7, #0]
 8016d1e:	6979      	ldr	r1, [r7, #20]
 8016d20:	68f8      	ldr	r0, [r7, #12]
 8016d22:	f7ff fe95 	bl	8016a50 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8016d26:	68bb      	ldr	r3, [r7, #8]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	330c      	adds	r3, #12
 8016d2c:	681c      	ldr	r4, [r3, #0]
 8016d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d30:	9300      	str	r3, [sp, #0]
 8016d32:	683b      	ldr	r3, [r7, #0]
 8016d34:	693a      	ldr	r2, [r7, #16]
 8016d36:	6879      	ldr	r1, [r7, #4]
 8016d38:	68b8      	ldr	r0, [r7, #8]
 8016d3a:	47a0      	blx	r4
 8016d3c:	e000      	b.n	8016d40 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8016d3e:	bf00      	nop
    }
}
 8016d40:	371c      	adds	r7, #28
 8016d42:	46bd      	mov	sp, r7
 8016d44:	bd90      	pop	{r4, r7, pc}
	...

08016d48 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b086      	sub	sp, #24
 8016d4c:	af02      	add	r7, sp, #8
 8016d4e:	60f8      	str	r0, [r7, #12]
 8016d50:	60b9      	str	r1, [r7, #8]
 8016d52:	607a      	str	r2, [r7, #4]
 8016d54:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8016d56:	4b08      	ldr	r3, [pc, #32]	; (8016d78 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8016d58:	681a      	ldr	r2, [r3, #0]
 8016d5a:	78fb      	ldrb	r3, [r7, #3]
 8016d5c:	9301      	str	r3, [sp, #4]
 8016d5e:	2300      	movs	r3, #0
 8016d60:	9300      	str	r3, [sp, #0]
 8016d62:	4613      	mov	r3, r2
 8016d64:	687a      	ldr	r2, [r7, #4]
 8016d66:	68b9      	ldr	r1, [r7, #8]
 8016d68:	68f8      	ldr	r0, [r7, #12]
 8016d6a:	f7ff ffa3 	bl	8016cb4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8016d6e:	bf00      	nop
 8016d70:	3710      	adds	r7, #16
 8016d72:	46bd      	mov	sp, r7
 8016d74:	bd80      	pop	{r7, pc}
 8016d76:	bf00      	nop
 8016d78:	20000100 	.word	0x20000100

08016d7c <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b08a      	sub	sp, #40	; 0x28
 8016d80:	af04      	add	r7, sp, #16
 8016d82:	60f8      	str	r0, [r7, #12]
 8016d84:	60b9      	str	r1, [r7, #8]
 8016d86:	607a      	str	r2, [r7, #4]
 8016d88:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d023      	beq.n	8016dd8 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016d96:	331c      	adds	r3, #28
 8016d98:	6879      	ldr	r1, [r7, #4]
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f7ff fbaf 	bl	80164fe <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8016da0:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8016da2:	697b      	ldr	r3, [r7, #20]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d10c      	bne.n	8016dc2 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	f103 000c 	add.w	r0, r3, #12
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	685b      	ldr	r3, [r3, #4]
 8016db2:	9300      	str	r3, [sp, #0]
 8016db4:	68bb      	ldr	r3, [r7, #8]
 8016db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016db8:	6a39      	ldr	r1, [r7, #32]
 8016dba:	f7ff f9a9 	bl	8016110 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	e019      	b.n	8016df6 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8016dc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016dc6:	9301      	str	r3, [sp, #4]
 8016dc8:	68bb      	ldr	r3, [r7, #8]
 8016dca:	9300      	str	r3, [sp, #0]
 8016dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dce:	6a3a      	ldr	r2, [r7, #32]
 8016dd0:	6979      	ldr	r1, [r7, #20]
 8016dd2:	68f8      	ldr	r0, [r7, #12]
 8016dd4:	f7ff fe3c 	bl	8016a50 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8016dd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016ddc:	9302      	str	r3, [sp, #8]
 8016dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016de0:	9301      	str	r3, [sp, #4]
 8016de2:	6a3b      	ldr	r3, [r7, #32]
 8016de4:	9300      	str	r3, [sp, #0]
 8016de6:	683b      	ldr	r3, [r7, #0]
 8016de8:	687a      	ldr	r2, [r7, #4]
 8016dea:	68b9      	ldr	r1, [r7, #8]
 8016dec:	68f8      	ldr	r0, [r7, #12]
 8016dee:	f7ff fd62 	bl	80168b6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8016df2:	4603      	mov	r3, r0
 8016df4:	bf00      	nop
}
 8016df6:	4618      	mov	r0, r3
 8016df8:	3718      	adds	r7, #24
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	bd80      	pop	{r7, pc}

08016dfe <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8016dfe:	b580      	push	{r7, lr}
 8016e00:	b084      	sub	sp, #16
 8016e02:	af00      	add	r7, sp, #0
 8016e04:	6078      	str	r0, [r7, #4]
 8016e06:	460b      	mov	r3, r1
 8016e08:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e10:	331c      	adds	r3, #28
 8016e12:	78fa      	ldrb	r2, [r7, #3]
 8016e14:	4611      	mov	r1, r2
 8016e16:	4618      	mov	r0, r3
 8016e18:	f7ff fbc0 	bl	801659c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8016e1c:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	330c      	adds	r3, #12
 8016e22:	4618      	mov	r0, r3
 8016e24:	f7ff f882 	bl	8015f2c <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d010      	beq.n	8016e50 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	330c      	adds	r3, #12
 8016e32:	68f9      	ldr	r1, [r7, #12]
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7ff f897 	bl	8015f68 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e40:	331c      	adds	r3, #28
 8016e42:	78fa      	ldrb	r2, [r7, #3]
 8016e44:	68f9      	ldr	r1, [r7, #12]
 8016e46:	4618      	mov	r0, r3
 8016e48:	f7ff fbcb 	bl	80165e2 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016e4c:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8016e4e:	e7eb      	b.n	8016e28 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	330c      	adds	r3, #12
 8016e54:	4618      	mov	r0, r3
 8016e56:	f7ff f8e7 	bl	8016028 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8016e5a:	bf00      	nop
 8016e5c:	3710      	adds	r7, #16
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	bd80      	pop	{r7, pc}

08016e62 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8016e62:	b580      	push	{r7, lr}
 8016e64:	b082      	sub	sp, #8
 8016e66:	af00      	add	r7, sp, #0
 8016e68:	6078      	str	r0, [r7, #4]
 8016e6a:	460b      	mov	r3, r1
 8016e6c:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8016e6e:	78fb      	ldrb	r3, [r7, #3]
 8016e70:	4619      	mov	r1, r3
 8016e72:	6878      	ldr	r0, [r7, #4]
 8016e74:	f7ff ffc3 	bl	8016dfe <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	330c      	adds	r3, #12
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f7ff f9e5 	bl	801624c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8016e82:	4603      	mov	r3, r0
}
 8016e84:	4618      	mov	r0, r3
 8016e86:	3708      	adds	r7, #8
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	bd80      	pop	{r7, pc}

08016e8c <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b084      	sub	sp, #16
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e9a:	331c      	adds	r3, #28
 8016e9c:	2103      	movs	r1, #3
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f7ff fb7c 	bl	801659c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8016ea4:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d011      	beq.n	8016ed0 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	7e1b      	ldrb	r3, [r3, #24]
 8016eb0:	2b03      	cmp	r3, #3
 8016eb2:	d102      	bne.n	8016eba <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	2202      	movs	r2, #2
 8016eb8:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ec0:	331c      	adds	r3, #28
 8016ec2:	2203      	movs	r2, #3
 8016ec4:	68f9      	ldr	r1, [r7, #12]
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	f7ff fb8b 	bl	80165e2 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016ecc:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8016ece:	e7ea      	b.n	8016ea6 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8016ed0:	bf00      	nop
 8016ed2:	3710      	adds	r7, #16
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	bd80      	pop	{r7, pc}

08016ed8 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8016ed8:	b580      	push	{r7, lr}
 8016eda:	b082      	sub	sp, #8
 8016edc:	af00      	add	r7, sp, #0
 8016ede:	6078      	str	r0, [r7, #4]
 8016ee0:	460b      	mov	r3, r1
 8016ee2:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016eea:	331c      	adds	r3, #28
 8016eec:	78fa      	ldrb	r2, [r7, #3]
 8016eee:	4611      	mov	r1, r2
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	f7ff fb30 	bl	8016556 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8016ef6:	4603      	mov	r3, r0
}
 8016ef8:	4618      	mov	r0, r3
 8016efa:	3708      	adds	r7, #8
 8016efc:	46bd      	mov	sp, r7
 8016efe:	bd80      	pop	{r7, pc}

08016f00 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b084      	sub	sp, #16
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	60f8      	str	r0, [r7, #12]
 8016f08:	60b9      	str	r1, [r7, #8]
 8016f0a:	607a      	str	r2, [r7, #4]
 8016f0c:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	68b9      	ldr	r1, [r7, #8]
 8016f12:	4618      	mov	r0, r3
 8016f14:	f7f5 fb13 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	3308      	adds	r3, #8
 8016f1c:	6879      	ldr	r1, [r7, #4]
 8016f1e:	4618      	mov	r0, r3
 8016f20:	f7f5 fb0d 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	683a      	ldr	r2, [r7, #0]
 8016f28:	611a      	str	r2, [r3, #16]
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	615a      	str	r2, [r3, #20]
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	4618      	mov	r0, r3
 8016f34:	3710      	adds	r7, #16
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}

08016f3a <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 8016f3a:	b480      	push	{r7}
 8016f3c:	b083      	sub	sp, #12
 8016f3e:	af00      	add	r7, sp, #0
 8016f40:	6078      	str	r0, [r7, #4]
 8016f42:	6039      	str	r1, [r7, #0]
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	4618      	mov	r0, r3
 8016f48:	370c      	adds	r7, #12
 8016f4a:	46bd      	mov	sp, r7
 8016f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f50:	4770      	bx	lr

08016f52 <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 8016f52:	b480      	push	{r7}
 8016f54:	b083      	sub	sp, #12
 8016f56:	af00      	add	r7, sp, #0
 8016f58:	6078      	str	r0, [r7, #4]
 8016f5a:	6039      	str	r1, [r7, #0]
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	4618      	mov	r0, r3
 8016f60:	370c      	adds	r7, #12
 8016f62:	46bd      	mov	sp, r7
 8016f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f68:	4770      	bx	lr

08016f6a <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8016f6a:	b480      	push	{r7}
 8016f6c:	b085      	sub	sp, #20
 8016f6e:	af00      	add	r7, sp, #0
 8016f70:	60f8      	str	r0, [r7, #12]
 8016f72:	60b9      	str	r1, [r7, #8]
 8016f74:	4613      	mov	r3, r2
 8016f76:	71fb      	strb	r3, [r7, #7]
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	3714      	adds	r7, #20
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f84:	4770      	bx	lr

08016f86 <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8016f86:	b480      	push	{r7}
 8016f88:	b085      	sub	sp, #20
 8016f8a:	af00      	add	r7, sp, #0
 8016f8c:	60f8      	str	r0, [r7, #12]
 8016f8e:	60b9      	str	r1, [r7, #8]
 8016f90:	607a      	str	r2, [r7, #4]
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	4618      	mov	r0, r3
 8016f96:	3714      	adds	r7, #20
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9e:	4770      	bx	lr

08016fa0 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 8016fa0:	b480      	push	{r7}
 8016fa2:	b085      	sub	sp, #20
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	60f8      	str	r0, [r7, #12]
 8016fa8:	60b9      	str	r1, [r7, #8]
 8016faa:	607a      	str	r2, [r7, #4]
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	4618      	mov	r0, r3
 8016fb0:	3714      	adds	r7, #20
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb8:	4770      	bx	lr

08016fba <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8016fba:	b480      	push	{r7}
 8016fbc:	b085      	sub	sp, #20
 8016fbe:	af00      	add	r7, sp, #0
 8016fc0:	60f8      	str	r0, [r7, #12]
 8016fc2:	60b9      	str	r1, [r7, #8]
 8016fc4:	607a      	str	r2, [r7, #4]
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	4618      	mov	r0, r3
 8016fca:	3714      	adds	r7, #20
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd2:	4770      	bx	lr

08016fd4 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8016fd4:	b480      	push	{r7}
 8016fd6:	b085      	sub	sp, #20
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	60f8      	str	r0, [r7, #12]
 8016fdc:	60b9      	str	r1, [r7, #8]
 8016fde:	607a      	str	r2, [r7, #4]
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	3714      	adds	r7, #20
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fec:	4770      	bx	lr

08016fee <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8016fee:	b480      	push	{r7}
 8016ff0:	b085      	sub	sp, #20
 8016ff2:	af00      	add	r7, sp, #0
 8016ff4:	60f8      	str	r0, [r7, #12]
 8016ff6:	60b9      	str	r1, [r7, #8]
 8016ff8:	4639      	mov	r1, r7
 8016ffa:	e881 000c 	stmia.w	r1, {r2, r3}
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	4618      	mov	r0, r3
 8017002:	3714      	adds	r7, #20
 8017004:	46bd      	mov	sp, r7
 8017006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801700a:	4770      	bx	lr

0801700c <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 801700c:	b480      	push	{r7}
 801700e:	b085      	sub	sp, #20
 8017010:	af00      	add	r7, sp, #0
 8017012:	60f8      	str	r0, [r7, #12]
 8017014:	60b9      	str	r1, [r7, #8]
 8017016:	4639      	mov	r1, r7
 8017018:	e881 000c 	stmia.w	r1, {r2, r3}
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	4618      	mov	r0, r3
 8017020:	3714      	adds	r7, #20
 8017022:	46bd      	mov	sp, r7
 8017024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017028:	4770      	bx	lr

0801702a <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801702a:	b480      	push	{r7}
 801702c:	b085      	sub	sp, #20
 801702e:	af00      	add	r7, sp, #0
 8017030:	60f8      	str	r0, [r7, #12]
 8017032:	60b9      	str	r1, [r7, #8]
 8017034:	ed87 0b00 	vstr	d0, [r7]
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	4618      	mov	r0, r3
 801703c:	3714      	adds	r7, #20
 801703e:	46bd      	mov	sp, r7
 8017040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017044:	4770      	bx	lr

08017046 <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8017046:	b480      	push	{r7}
 8017048:	b085      	sub	sp, #20
 801704a:	af00      	add	r7, sp, #0
 801704c:	60f8      	str	r0, [r7, #12]
 801704e:	60b9      	str	r1, [r7, #8]
 8017050:	607a      	str	r2, [r7, #4]
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	4618      	mov	r0, r3
 8017056:	3714      	adds	r7, #20
 8017058:	46bd      	mov	sp, r7
 801705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705e:	4770      	bx	lr

08017060 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8017060:	b480      	push	{r7}
 8017062:	b085      	sub	sp, #20
 8017064:	af00      	add	r7, sp, #0
 8017066:	60f8      	str	r0, [r7, #12]
 8017068:	60b9      	str	r1, [r7, #8]
 801706a:	607a      	str	r2, [r7, #4]
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	4618      	mov	r0, r3
 8017070:	3714      	adds	r7, #20
 8017072:	46bd      	mov	sp, r7
 8017074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017078:	4770      	bx	lr

0801707a <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801707a:	b480      	push	{r7}
 801707c:	b085      	sub	sp, #20
 801707e:	af00      	add	r7, sp, #0
 8017080:	60f8      	str	r0, [r7, #12]
 8017082:	60b9      	str	r1, [r7, #8]
 8017084:	607a      	str	r2, [r7, #4]
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	4618      	mov	r0, r3
 801708a:	3714      	adds	r7, #20
 801708c:	46bd      	mov	sp, r7
 801708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017092:	4770      	bx	lr

08017094 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8017094:	b480      	push	{r7}
 8017096:	b085      	sub	sp, #20
 8017098:	af00      	add	r7, sp, #0
 801709a:	60f8      	str	r0, [r7, #12]
 801709c:	60b9      	str	r1, [r7, #8]
 801709e:	607a      	str	r2, [r7, #4]
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	4618      	mov	r0, r3
 80170a4:	3714      	adds	r7, #20
 80170a6:	46bd      	mov	sp, r7
 80170a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ac:	4770      	bx	lr

080170ae <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 80170ae:	b480      	push	{r7}
 80170b0:	b085      	sub	sp, #20
 80170b2:	af00      	add	r7, sp, #0
 80170b4:	60f8      	str	r0, [r7, #12]
 80170b6:	60b9      	str	r1, [r7, #8]
 80170b8:	607a      	str	r2, [r7, #4]
 80170ba:	603b      	str	r3, [r7, #0]
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	4618      	mov	r0, r3
 80170c0:	3714      	adds	r7, #20
 80170c2:	46bd      	mov	sp, r7
 80170c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c8:	4770      	bx	lr

080170ca <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 80170ca:	b480      	push	{r7}
 80170cc:	b085      	sub	sp, #20
 80170ce:	af00      	add	r7, sp, #0
 80170d0:	60f8      	str	r0, [r7, #12]
 80170d2:	60b9      	str	r1, [r7, #8]
 80170d4:	607a      	str	r2, [r7, #4]
 80170d6:	603b      	str	r3, [r7, #0]
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	4618      	mov	r0, r3
 80170dc:	3714      	adds	r7, #20
 80170de:	46bd      	mov	sp, r7
 80170e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e4:	4770      	bx	lr

080170e6 <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 80170e6:	b480      	push	{r7}
 80170e8:	b085      	sub	sp, #20
 80170ea:	af00      	add	r7, sp, #0
 80170ec:	60f8      	str	r0, [r7, #12]
 80170ee:	60b9      	str	r1, [r7, #8]
 80170f0:	607a      	str	r2, [r7, #4]
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	4618      	mov	r0, r3
 80170f6:	3714      	adds	r7, #20
 80170f8:	46bd      	mov	sp, r7
 80170fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fe:	4770      	bx	lr

08017100 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8017100:	b480      	push	{r7}
 8017102:	b085      	sub	sp, #20
 8017104:	af00      	add	r7, sp, #0
 8017106:	60f8      	str	r0, [r7, #12]
 8017108:	60b9      	str	r1, [r7, #8]
 801710a:	607a      	str	r2, [r7, #4]
 801710c:	603b      	str	r3, [r7, #0]
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	4618      	mov	r0, r3
 8017112:	3714      	adds	r7, #20
 8017114:	46bd      	mov	sp, r7
 8017116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801711a:	4770      	bx	lr

0801711c <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 801711c:	b480      	push	{r7}
 801711e:	b083      	sub	sp, #12
 8017120:	af00      	add	r7, sp, #0
 8017122:	6078      	str	r0, [r7, #4]
 8017124:	2300      	movs	r3, #0
 8017126:	4618      	mov	r0, r3
 8017128:	370c      	adds	r7, #12
 801712a:	46bd      	mov	sp, r7
 801712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017130:	4770      	bx	lr
	...

08017134 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8017134:	b580      	push	{r7, lr}
 8017136:	b084      	sub	sp, #16
 8017138:	af00      	add	r7, sp, #0
 801713a:	6078      	str	r0, [r7, #4]
 801713c:	6039      	str	r1, [r7, #0]
 801713e:	f107 0308 	add.w	r3, r7, #8
 8017142:	4909      	ldr	r1, [pc, #36]	; (8017168 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8017144:	4618      	mov	r0, r3
 8017146:	f7f5 f9a6 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801714a:	f107 0308 	add.w	r3, r7, #8
 801714e:	4619      	mov	r1, r3
 8017150:	6878      	ldr	r0, [r7, #4]
 8017152:	f005 fec5 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
 8017156:	f107 0308 	add.w	r3, r7, #8
 801715a:	4618      	mov	r0, r3
 801715c:	f7f5 fd53 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8017160:	6878      	ldr	r0, [r7, #4]
 8017162:	3710      	adds	r7, #16
 8017164:	46bd      	mov	sp, r7
 8017166:	bd80      	pop	{r7, pc}
 8017168:	080257f4 	.word	0x080257f4

0801716c <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 801716c:	b480      	push	{r7}
 801716e:	b083      	sub	sp, #12
 8017170:	af00      	add	r7, sp, #0
 8017172:	6078      	str	r0, [r7, #4]
 8017174:	460b      	mov	r3, r1
 8017176:	70fb      	strb	r3, [r7, #3]
 8017178:	78fb      	ldrb	r3, [r7, #3]
 801717a:	4618      	mov	r0, r3
 801717c:	370c      	adds	r7, #12
 801717e:	46bd      	mov	sp, r7
 8017180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017184:	4770      	bx	lr

08017186 <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 8017186:	b480      	push	{r7}
 8017188:	b083      	sub	sp, #12
 801718a:	af00      	add	r7, sp, #0
 801718c:	6078      	str	r0, [r7, #4]
 801718e:	2300      	movs	r3, #0
 8017190:	4618      	mov	r0, r3
 8017192:	370c      	adds	r7, #12
 8017194:	46bd      	mov	sp, r7
 8017196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801719a:	4770      	bx	lr

0801719c <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 801719c:	b480      	push	{r7}
 801719e:	b083      	sub	sp, #12
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]
 80171a4:	2300      	movs	r3, #0
 80171a6:	4618      	mov	r0, r3
 80171a8:	370c      	adds	r7, #12
 80171aa:	46bd      	mov	sp, r7
 80171ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b0:	4770      	bx	lr

080171b2 <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 80171b2:	b480      	push	{r7}
 80171b4:	b083      	sub	sp, #12
 80171b6:	af00      	add	r7, sp, #0
 80171b8:	6078      	str	r0, [r7, #4]
 80171ba:	6039      	str	r1, [r7, #0]
 80171bc:	683b      	ldr	r3, [r7, #0]
 80171be:	4618      	mov	r0, r3
 80171c0:	370c      	adds	r7, #12
 80171c2:	46bd      	mov	sp, r7
 80171c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c8:	4770      	bx	lr

080171ca <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 80171ca:	b480      	push	{r7}
 80171cc:	b083      	sub	sp, #12
 80171ce:	af00      	add	r7, sp, #0
 80171d0:	6078      	str	r0, [r7, #4]
 80171d2:	2300      	movs	r3, #0
 80171d4:	4618      	mov	r0, r3
 80171d6:	370c      	adds	r7, #12
 80171d8:	46bd      	mov	sp, r7
 80171da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171de:	4770      	bx	lr

080171e0 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 80171e0:	b480      	push	{r7}
 80171e2:	b083      	sub	sp, #12
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	6078      	str	r0, [r7, #4]
 80171e8:	6039      	str	r1, [r7, #0]
 80171ea:	683b      	ldr	r3, [r7, #0]
 80171ec:	4618      	mov	r0, r3
 80171ee:	370c      	adds	r7, #12
 80171f0:	46bd      	mov	sp, r7
 80171f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f6:	4770      	bx	lr

080171f8 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 80171f8:	b480      	push	{r7}
 80171fa:	b083      	sub	sp, #12
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
 8017200:	2300      	movs	r3, #0
 8017202:	4618      	mov	r0, r3
 8017204:	370c      	adds	r7, #12
 8017206:	46bd      	mov	sp, r7
 8017208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801720c:	4770      	bx	lr

0801720e <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 801720e:	b480      	push	{r7}
 8017210:	b083      	sub	sp, #12
 8017212:	af00      	add	r7, sp, #0
 8017214:	6078      	str	r0, [r7, #4]
 8017216:	6039      	str	r1, [r7, #0]
 8017218:	683b      	ldr	r3, [r7, #0]
 801721a:	4618      	mov	r0, r3
 801721c:	370c      	adds	r7, #12
 801721e:	46bd      	mov	sp, r7
 8017220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017224:	4770      	bx	lr

08017226 <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 8017226:	b580      	push	{r7, lr}
 8017228:	b082      	sub	sp, #8
 801722a:	af00      	add	r7, sp, #0
 801722c:	6078      	str	r0, [r7, #4]
 801722e:	6039      	str	r1, [r7, #0]
 8017230:	2100      	movs	r1, #0
 8017232:	6878      	ldr	r0, [r7, #4]
 8017234:	f7f3 f972 	bl	800a51c <_ZN18cpputest_ulonglongC1Ei>
 8017238:	6878      	ldr	r0, [r7, #4]
 801723a:	3708      	adds	r7, #8
 801723c:	46bd      	mov	sp, r7
 801723e:	bd80      	pop	{r7, pc}

08017240 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8017240:	b480      	push	{r7}
 8017242:	b085      	sub	sp, #20
 8017244:	af00      	add	r7, sp, #0
 8017246:	60f8      	str	r0, [r7, #12]
 8017248:	60b9      	str	r1, [r7, #8]
 801724a:	4639      	mov	r1, r7
 801724c:	e881 000c 	stmia.w	r1, {r2, r3}
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	461a      	mov	r2, r3
 8017254:	463b      	mov	r3, r7
 8017256:	cb03      	ldmia	r3!, {r0, r1}
 8017258:	6010      	str	r0, [r2, #0]
 801725a:	6051      	str	r1, [r2, #4]
 801725c:	68f8      	ldr	r0, [r7, #12]
 801725e:	3714      	adds	r7, #20
 8017260:	46bd      	mov	sp, r7
 8017262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017266:	4770      	bx	lr

08017268 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8017268:	b580      	push	{r7, lr}
 801726a:	b082      	sub	sp, #8
 801726c:	af00      	add	r7, sp, #0
 801726e:	6078      	str	r0, [r7, #4]
 8017270:	6039      	str	r1, [r7, #0]
 8017272:	2100      	movs	r1, #0
 8017274:	6878      	ldr	r0, [r7, #4]
 8017276:	f7f3 f945 	bl	800a504 <_ZN17cpputest_longlongC1Ei>
 801727a:	6878      	ldr	r0, [r7, #4]
 801727c:	3708      	adds	r7, #8
 801727e:	46bd      	mov	sp, r7
 8017280:	bd80      	pop	{r7, pc}

08017282 <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 8017282:	b480      	push	{r7}
 8017284:	b085      	sub	sp, #20
 8017286:	af00      	add	r7, sp, #0
 8017288:	60f8      	str	r0, [r7, #12]
 801728a:	60b9      	str	r1, [r7, #8]
 801728c:	4639      	mov	r1, r7
 801728e:	e881 000c 	stmia.w	r1, {r2, r3}
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	461a      	mov	r2, r3
 8017296:	463b      	mov	r3, r7
 8017298:	cb03      	ldmia	r3!, {r0, r1}
 801729a:	6010      	str	r0, [r2, #0]
 801729c:	6051      	str	r1, [r2, #4]
 801729e:	68f8      	ldr	r0, [r7, #12]
 80172a0:	3714      	adds	r7, #20
 80172a2:	46bd      	mov	sp, r7
 80172a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a8:	4770      	bx	lr

080172aa <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 80172aa:	b480      	push	{r7}
 80172ac:	b083      	sub	sp, #12
 80172ae:	af00      	add	r7, sp, #0
 80172b0:	6078      	str	r0, [r7, #4]
 80172b2:	2300      	movs	r3, #0
 80172b4:	4618      	mov	r0, r3
 80172b6:	370c      	adds	r7, #12
 80172b8:	46bd      	mov	sp, r7
 80172ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172be:	4770      	bx	lr

080172c0 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 80172c0:	b480      	push	{r7}
 80172c2:	b083      	sub	sp, #12
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	6078      	str	r0, [r7, #4]
 80172c8:	6039      	str	r1, [r7, #0]
 80172ca:	683b      	ldr	r3, [r7, #0]
 80172cc:	4618      	mov	r0, r3
 80172ce:	370c      	adds	r7, #12
 80172d0:	46bd      	mov	sp, r7
 80172d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d6:	4770      	bx	lr

080172d8 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 80172d8:	b480      	push	{r7}
 80172da:	b083      	sub	sp, #12
 80172dc:	af00      	add	r7, sp, #0
 80172de:	6078      	str	r0, [r7, #4]
 80172e0:	f04f 0200 	mov.w	r2, #0
 80172e4:	f04f 0300 	mov.w	r3, #0
 80172e8:	ec43 2b17 	vmov	d7, r2, r3
 80172ec:	eeb0 0a47 	vmov.f32	s0, s14
 80172f0:	eef0 0a67 	vmov.f32	s1, s15
 80172f4:	370c      	adds	r7, #12
 80172f6:	46bd      	mov	sp, r7
 80172f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fc:	4770      	bx	lr

080172fe <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 80172fe:	b480      	push	{r7}
 8017300:	b085      	sub	sp, #20
 8017302:	af00      	add	r7, sp, #0
 8017304:	60f8      	str	r0, [r7, #12]
 8017306:	ed87 0b00 	vstr	d0, [r7]
 801730a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801730e:	ec43 2b17 	vmov	d7, r2, r3
 8017312:	eeb0 0a47 	vmov.f32	s0, s14
 8017316:	eef0 0a67 	vmov.f32	s1, s15
 801731a:	3714      	adds	r7, #20
 801731c:	46bd      	mov	sp, r7
 801731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017322:	4770      	bx	lr

08017324 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8017324:	b480      	push	{r7}
 8017326:	b083      	sub	sp, #12
 8017328:	af00      	add	r7, sp, #0
 801732a:	6078      	str	r0, [r7, #4]
 801732c:	4b03      	ldr	r3, [pc, #12]	; (801733c <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 801732e:	4618      	mov	r0, r3
 8017330:	370c      	adds	r7, #12
 8017332:	46bd      	mov	sp, r7
 8017334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017338:	4770      	bx	lr
 801733a:	bf00      	nop
 801733c:	080257f4 	.word	0x080257f4

08017340 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8017340:	b480      	push	{r7}
 8017342:	b083      	sub	sp, #12
 8017344:	af00      	add	r7, sp, #0
 8017346:	6078      	str	r0, [r7, #4]
 8017348:	6039      	str	r1, [r7, #0]
 801734a:	683b      	ldr	r3, [r7, #0]
 801734c:	4618      	mov	r0, r3
 801734e:	370c      	adds	r7, #12
 8017350:	46bd      	mov	sp, r7
 8017352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017356:	4770      	bx	lr

08017358 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8017358:	b480      	push	{r7}
 801735a:	b083      	sub	sp, #12
 801735c:	af00      	add	r7, sp, #0
 801735e:	6078      	str	r0, [r7, #4]
 8017360:	2300      	movs	r3, #0
 8017362:	4618      	mov	r0, r3
 8017364:	370c      	adds	r7, #12
 8017366:	46bd      	mov	sp, r7
 8017368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801736c:	4770      	bx	lr

0801736e <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 801736e:	b480      	push	{r7}
 8017370:	b083      	sub	sp, #12
 8017372:	af00      	add	r7, sp, #0
 8017374:	6078      	str	r0, [r7, #4]
 8017376:	6039      	str	r1, [r7, #0]
 8017378:	683b      	ldr	r3, [r7, #0]
 801737a:	4618      	mov	r0, r3
 801737c:	370c      	adds	r7, #12
 801737e:	46bd      	mov	sp, r7
 8017380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017384:	4770      	bx	lr

08017386 <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 8017386:	b480      	push	{r7}
 8017388:	b083      	sub	sp, #12
 801738a:	af00      	add	r7, sp, #0
 801738c:	6078      	str	r0, [r7, #4]
 801738e:	2300      	movs	r3, #0
 8017390:	4618      	mov	r0, r3
 8017392:	370c      	adds	r7, #12
 8017394:	46bd      	mov	sp, r7
 8017396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801739a:	4770      	bx	lr

0801739c <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 801739c:	b480      	push	{r7}
 801739e:	b083      	sub	sp, #12
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	6078      	str	r0, [r7, #4]
 80173a4:	6039      	str	r1, [r7, #0]
 80173a6:	683b      	ldr	r3, [r7, #0]
 80173a8:	4618      	mov	r0, r3
 80173aa:	370c      	adds	r7, #12
 80173ac:	46bd      	mov	sp, r7
 80173ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b2:	4770      	bx	lr

080173b4 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 80173b4:	b480      	push	{r7}
 80173b6:	b083      	sub	sp, #12
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
 80173bc:	2300      	movs	r3, #0
 80173be:	4618      	mov	r0, r3
 80173c0:	370c      	adds	r7, #12
 80173c2:	46bd      	mov	sp, r7
 80173c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c8:	4770      	bx	lr

080173ca <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 80173ca:	b480      	push	{r7}
 80173cc:	b083      	sub	sp, #12
 80173ce:	af00      	add	r7, sp, #0
 80173d0:	6078      	str	r0, [r7, #4]
 80173d2:	6039      	str	r1, [r7, #0]
 80173d4:	683b      	ldr	r3, [r7, #0]
 80173d6:	4618      	mov	r0, r3
 80173d8:	370c      	adds	r7, #12
 80173da:	46bd      	mov	sp, r7
 80173dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e0:	4770      	bx	lr

080173e2 <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 80173e2:	b480      	push	{r7}
 80173e4:	b083      	sub	sp, #12
 80173e6:	af00      	add	r7, sp, #0
 80173e8:	6078      	str	r0, [r7, #4]
 80173ea:	6039      	str	r1, [r7, #0]
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	4618      	mov	r0, r3
 80173f0:	370c      	adds	r7, #12
 80173f2:	46bd      	mov	sp, r7
 80173f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173f8:	4770      	bx	lr
	...

080173fc <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 80173fc:	b480      	push	{r7}
 80173fe:	b083      	sub	sp, #12
 8017400:	af00      	add	r7, sp, #0
 8017402:	6078      	str	r0, [r7, #4]
 8017404:	4a04      	ldr	r2, [pc, #16]	; (8017418 <_ZN14MockActualCallC1Ev+0x1c>)
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	601a      	str	r2, [r3, #0]
{
}
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	4618      	mov	r0, r3
 801740e:	370c      	adds	r7, #12
 8017410:	46bd      	mov	sp, r7
 8017412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017416:	4770      	bx	lr
 8017418:	080287fc 	.word	0x080287fc

0801741c <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 801741c:	b480      	push	{r7}
 801741e:	b083      	sub	sp, #12
 8017420:	af00      	add	r7, sp, #0
 8017422:	6078      	str	r0, [r7, #4]
 8017424:	4a04      	ldr	r2, [pc, #16]	; (8017438 <_ZN14MockActualCallD1Ev+0x1c>)
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	601a      	str	r2, [r3, #0]
{
}
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	4618      	mov	r0, r3
 801742e:	370c      	adds	r7, #12
 8017430:	46bd      	mov	sp, r7
 8017432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017436:	4770      	bx	lr
 8017438:	080287fc 	.word	0x080287fc

0801743c <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 801743c:	b580      	push	{r7, lr}
 801743e:	b082      	sub	sp, #8
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
 8017444:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	3304      	adds	r3, #4
 801744a:	6839      	ldr	r1, [r7, #0]
 801744c:	4618      	mov	r0, r3
 801744e:	f7f5 f88e 	bl	800c56e <_ZN12SimpleStringaSERKS_>
}
 8017452:	bf00      	nop
 8017454:	3708      	adds	r7, #8
 8017456:	46bd      	mov	sp, r7
 8017458:	bd80      	pop	{r7, pc}

0801745a <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 801745a:	b580      	push	{r7, lr}
 801745c:	b082      	sub	sp, #8
 801745e:	af00      	add	r7, sp, #0
 8017460:	6078      	str	r0, [r7, #4]
 8017462:	6039      	str	r1, [r7, #0]
    return functionName_;
 8017464:	683b      	ldr	r3, [r7, #0]
 8017466:	3304      	adds	r3, #4
 8017468:	4619      	mov	r1, r3
 801746a:	6878      	ldr	r0, [r7, #4]
 801746c:	f7f5 f867 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
}
 8017470:	6878      	ldr	r0, [r7, #4]
 8017472:	3708      	adds	r7, #8
 8017474:	46bd      	mov	sp, r7
 8017476:	bd80      	pop	{r7, pc}

08017478 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8017478:	b580      	push	{r7, lr}
 801747a:	b084      	sub	sp, #16
 801747c:	af00      	add	r7, sp, #0
 801747e:	60f8      	str	r0, [r7, #12]
 8017480:	60b9      	str	r1, [r7, #8]
 8017482:	607a      	str	r2, [r7, #4]
 8017484:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	4618      	mov	r0, r3
 801748a:	f7ff ffb7 	bl	80173fc <_ZN14MockActualCallC1Ev>
 801748e:	4a17      	ldr	r2, [pc, #92]	; (80174ec <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	601a      	str	r2, [r3, #0]
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	3304      	adds	r3, #4
 8017498:	4915      	ldr	r1, [pc, #84]	; (80174f0 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 801749a:	4618      	mov	r0, r3
 801749c:	f7f4 fffb 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	68ba      	ldr	r2, [r7, #8]
 80174a4:	60da      	str	r2, [r3, #12]
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	687a      	ldr	r2, [r7, #4]
 80174aa:	611a      	str	r2, [r3, #16]
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	2202      	movs	r2, #2
 80174b0:	751a      	strb	r2, [r3, #20]
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	2200      	movs	r2, #0
 80174b6:	755a      	strb	r2, [r3, #21]
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	2200      	movs	r2, #0
 80174bc:	619a      	str	r2, [r3, #24]
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	331c      	adds	r3, #28
 80174c2:	4618      	mov	r0, r3
 80174c4:	f004 f814 	bl	801b4f0 <_ZN21MockExpectedCallsListC1Ev>
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	683a      	ldr	r2, [r7, #0]
 80174cc:	625a      	str	r2, [r3, #36]	; 0x24
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	2200      	movs	r2, #0
 80174d2:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	331c      	adds	r3, #28
 80174d8:	6839      	ldr	r1, [r7, #0]
 80174da:	4618      	mov	r0, r3
 80174dc:	f004 f986 	bl	801b7ec <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	4618      	mov	r0, r3
 80174e4:	3710      	adds	r7, #16
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd80      	pop	{r7, pc}
 80174ea:	bf00      	nop
 80174ec:	080286fc 	.word	0x080286fc
 80174f0:	080257f4 	.word	0x080257f4

080174f4 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b082      	sub	sp, #8
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	6078      	str	r0, [r7, #4]
 80174fc:	4a0c      	ldr	r2, [pc, #48]	; (8017530 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8017502:	6878      	ldr	r0, [r7, #4]
 8017504:	f001 fae4 	bl	8018ad0 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	331c      	adds	r3, #28
 801750c:	4618      	mov	r0, r3
 801750e:	f004 f803 	bl	801b518 <_ZN21MockExpectedCallsListD1Ev>
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	3304      	adds	r3, #4
 8017516:	4618      	mov	r0, r3
 8017518:	f7f5 fb75 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	4618      	mov	r0, r3
 8017520:	f7ff ff7c 	bl	801741c <_ZN14MockActualCallD1Ev>
}
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	4618      	mov	r0, r3
 8017528:	3708      	adds	r7, #8
 801752a:	46bd      	mov	sp, r7
 801752c:	bd80      	pop	{r7, pc}
 801752e:	bf00      	nop
 8017530:	080286fc 	.word	0x080286fc

08017534 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8017534:	b580      	push	{r7, lr}
 8017536:	b082      	sub	sp, #8
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
}
 801753c:	6878      	ldr	r0, [r7, #4]
 801753e:	f7ff ffd9 	bl	80174f4 <_ZN21MockCheckedActualCallD1Ev>
 8017542:	212c      	movs	r1, #44	; 0x2c
 8017544:	6878      	ldr	r0, [r7, #4]
 8017546:	f7f2 fbf7 	bl	8009d38 <_ZdlPvj>
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	4618      	mov	r0, r3
 801754e:	3708      	adds	r7, #8
 8017550:	46bd      	mov	sp, r7
 8017552:	bd80      	pop	{r7, pc}

08017554 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8017554:	b480      	push	{r7}
 8017556:	b083      	sub	sp, #12
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
 801755c:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	683a      	ldr	r2, [r7, #0]
 8017562:	611a      	str	r2, [r3, #16]
}
 8017564:	bf00      	nop
 8017566:	370c      	adds	r7, #12
 8017568:	46bd      	mov	sp, r7
 801756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756e:	4770      	bx	lr

08017570 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b082      	sub	sp, #8
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	691a      	ldr	r2, [r3, #16]
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	691b      	ldr	r3, [r3, #16]
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	330c      	adds	r3, #12
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	4610      	mov	r0, r2
 8017588:	4798      	blx	r3
 801758a:	4603      	mov	r3, r0
}
 801758c:	4618      	mov	r0, r3
 801758e:	3708      	adds	r7, #8
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}

08017594 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8017594:	b580      	push	{r7, lr}
 8017596:	b082      	sub	sp, #8
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
 801759c:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	33c0      	adds	r3, #192	; 0xc0
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	6878      	ldr	r0, [r7, #4]
 80175a8:	4798      	blx	r3
 80175aa:	4603      	mov	r3, r0
 80175ac:	f083 0301 	eor.w	r3, r3, #1
 80175b0:	b2db      	uxtb	r3, r3
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d010      	beq.n	80175d8 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	33ec      	adds	r3, #236	; 0xec
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	2101      	movs	r1, #1
 80175c0:	6878      	ldr	r0, [r7, #4]
 80175c2:	4798      	blx	r3
        reporter_->failTest(failure);
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	691a      	ldr	r2, [r3, #16]
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	691b      	ldr	r3, [r3, #16]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	3308      	adds	r3, #8
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	6839      	ldr	r1, [r7, #0]
 80175d4:	4610      	mov	r0, r2
 80175d6:	4798      	blx	r3
    }
}
 80175d8:	bf00      	nop
 80175da:	3708      	adds	r7, #8
 80175dc:	46bd      	mov	sp, r7
 80175de:	bd80      	pop	{r7, pc}

080175e0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 80175e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175e4:	b0bc      	sub	sp, #240	; 0xf0
 80175e6:	af00      	add	r7, sp, #0
 80175e8:	6078      	str	r0, [r7, #4]
 80175ea:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80175f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	f000 80f5 	beq.w	80177e8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80175fe:	683b      	ldr	r3, [r7, #0]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	339c      	adds	r3, #156	; 0x9c
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801760a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801760e:	6839      	ldr	r1, [r7, #0]
 8017610:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 8017612:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017616:	4618      	mov	r0, r3
 8017618:	f006 fa6e 	bl	801daf8 <_ZNK14MockNamedValue9getCopierEv>
 801761c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8017620:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017624:	2b00      	cmp	r3, #0
 8017626:	d013      	beq.n	8017650 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8017628:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	3308      	adds	r3, #8
 8017630:	681c      	ldr	r4, [r3, #0]
 8017632:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017636:	691d      	ldr	r5, [r3, #16]
 8017638:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801763c:	4618      	mov	r0, r3
 801763e:	f006 fa2b 	bl	801da98 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 8017642:	4603      	mov	r3, r0
 8017644:	461a      	mov	r2, r3
 8017646:	4629      	mov	r1, r5
 8017648:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801764c:	47a0      	blx	r4
 801764e:	e0c0      	b.n	80177d2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8017650:	2500      	movs	r5, #0
 8017652:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017656:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801765a:	4611      	mov	r1, r2
 801765c:	4618      	mov	r0, r3
 801765e:	f005 ff0e 	bl	801d47e <_ZNK14MockNamedValue7getTypeEv>
 8017662:	2601      	movs	r6, #1
 8017664:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8017668:	4962      	ldr	r1, [pc, #392]	; (80177f4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 801766a:	4618      	mov	r0, r3
 801766c:	f7f4 ff13 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8017670:	f04f 0801 	mov.w	r8, #1
 8017674:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8017678:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801767c:	4611      	mov	r1, r2
 801767e:	4618      	mov	r0, r3
 8017680:	f7f5 facd 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 8017684:	4603      	mov	r3, r0
 8017686:	2b00      	cmp	r3, #0
 8017688:	d015      	beq.n	80176b6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 801768a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801768e:	f103 0408 	add.w	r4, r3, #8
 8017692:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017696:	4958      	ldr	r1, [pc, #352]	; (80177f8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 8017698:	4618      	mov	r0, r3
 801769a:	f7f4 fefc 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801769e:	2501      	movs	r5, #1
 80176a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80176a4:	4619      	mov	r1, r3
 80176a6:	4620      	mov	r0, r4
 80176a8:	f7f5 fab9 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 80176ac:	4603      	mov	r3, r0
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d001      	beq.n	80176b6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 80176b2:	2401      	movs	r4, #1
 80176b4:	e000      	b.n	80176b8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 80176b6:	2400      	movs	r4, #0
 80176b8:	2d00      	cmp	r5, #0
 80176ba:	d004      	beq.n	80176c6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 80176bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80176c0:	4618      	mov	r0, r3
 80176c2:	f7f5 faa0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80176c6:	f1b8 0f00 	cmp.w	r8, #0
 80176ca:	d004      	beq.n	80176d6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 80176cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80176d0:	4618      	mov	r0, r3
 80176d2:	f7f5 fa98 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80176d6:	2e00      	cmp	r6, #0
 80176d8:	d004      	beq.n	80176e4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 80176da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80176de:	4618      	mov	r0, r3
 80176e0:	f7f5 fa91 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 80176e4:	2c00      	cmp	r4, #0
 80176e6:	d018      	beq.n	801771a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 80176e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80176ec:	4618      	mov	r0, r3
 80176ee:	f006 f95b 	bl	801d9a8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80176f2:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 80176f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80176fa:	4618      	mov	r0, r3
 80176fc:	f006 f9e4 	bl	801dac8 <_ZNK14MockNamedValue7getSizeEv>
 8017700:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8017704:	4b3d      	ldr	r3, [pc, #244]	; (80177fc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801770c:	6910      	ldr	r0, [r2, #16]
 801770e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8017712:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8017716:	4798      	blx	r3
 8017718:	e05b      	b.n	80177d2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 801771a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801771e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017722:	4611      	mov	r1, r2
 8017724:	4618      	mov	r0, r3
 8017726:	f005 fe9b 	bl	801d460 <_ZNK14MockNamedValue7getNameEv>
 801772a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801772e:	4934      	ldr	r1, [pc, #208]	; (8017800 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8017730:	4618      	mov	r0, r3
 8017732:	f7f4 feb0 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8017736:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801773a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801773e:	4611      	mov	r1, r2
 8017740:	4618      	mov	r0, r3
 8017742:	f7f5 fab1 	bl	800cca8 <_ZneRK12SimpleStringS1_>
 8017746:	4603      	mov	r3, r0
 8017748:	461c      	mov	r4, r3
 801774a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801774e:	4618      	mov	r0, r3
 8017750:	f7f5 fa59 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8017754:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8017758:	4618      	mov	r0, r3
 801775a:	f7f5 fa54 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801775e:	2c00      	cmp	r4, #0
 8017760:	d037      	beq.n	80177d2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8017762:	683b      	ldr	r3, [r7, #0]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	339c      	adds	r3, #156	; 0x9c
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801776e:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8017772:	6839      	ldr	r1, [r7, #0]
 8017774:	4798      	blx	r3
 8017776:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801777a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801777e:	4611      	mov	r1, r2
 8017780:	4618      	mov	r0, r3
 8017782:	f005 fe7c 	bl	801d47e <_ZNK14MockNamedValue7getTypeEv>
 8017786:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801778a:	4618      	mov	r0, r3
 801778c:	f005 fbd2 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	33cc      	adds	r3, #204	; 0xcc
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	6878      	ldr	r0, [r7, #4]
 801779a:	4798      	blx	r3
 801779c:	4601      	mov	r1, r0
 801779e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80177a2:	f107 030c 	add.w	r3, r7, #12
 80177a6:	4618      	mov	r0, r3
 80177a8:	f005 faee 	bl	801cd88 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	33dc      	adds	r3, #220	; 0xdc
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	f107 020c 	add.w	r2, r7, #12
 80177b8:	4611      	mov	r1, r2
 80177ba:	6878      	ldr	r0, [r7, #4]
 80177bc:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 80177be:	f107 030c 	add.w	r3, r7, #12
 80177c2:	4618      	mov	r0, r3
 80177c4:	f001 ffe2 	bl	801978c <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 80177c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80177cc:	4618      	mov	r0, r3
 80177ce:	f7f5 fa1a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80177d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80177d6:	4618      	mov	r0, r3
 80177d8:	f005 fbac 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80177dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80177e0:	695b      	ldr	r3, [r3, #20]
 80177e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80177e6:	e705      	b.n	80175f4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 80177e8:	bf00      	nop
 80177ea:	37f0      	adds	r7, #240	; 0xf0
 80177ec:	46bd      	mov	sp, r7
 80177ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177f2:	bf00      	nop
 80177f4:	080257f8 	.word	0x080257f8
 80177f8:	08025804 	.word	0x08025804
 80177fc:	200000d4 	.word	0x200000d4
 8017800:	080257f4 	.word	0x080257f4

08017804 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b084      	sub	sp, #16
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	331c      	adds	r3, #28
 8017810:	4618      	mov	r0, r3
 8017812:	f004 f9bb 	bl	801bb8c <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 8017816:	4602      	mov	r2, r0
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	699b      	ldr	r3, [r3, #24]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d00f      	beq.n	8017844 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	33d4      	adds	r3, #212	; 0xd4
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	687a      	ldr	r2, [r7, #4]
 801782e:	6992      	ldr	r2, [r2, #24]
 8017830:	4611      	mov	r1, r2
 8017832:	6878      	ldr	r0, [r7, #4]
 8017834:	4798      	blx	r3
        callHasSucceeded();
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	33d0      	adds	r3, #208	; 0xd0
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	6878      	ldr	r0, [r7, #4]
 8017840:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 8017842:	e00f      	b.n	8017864 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	331c      	adds	r3, #28
 8017848:	4618      	mov	r0, r3
 801784a:	f004 f9cc 	bl	801bbe6 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 801784e:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d006      	beq.n	8017864 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	33d4      	adds	r3, #212	; 0xd4
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	68f9      	ldr	r1, [r7, #12]
 8017860:	6878      	ldr	r0, [r7, #4]
 8017862:	4798      	blx	r3
}
 8017864:	bf00      	nop
 8017866:	3710      	adds	r7, #16
 8017868:	46bd      	mov	sp, r7
 801786a:	bd80      	pop	{r7, pc}

0801786c <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b082      	sub	sp, #8
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	33ec      	adds	r3, #236	; 0xec
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	2102      	movs	r1, #2
 801787e:	6878      	ldr	r0, [r7, #4]
 8017880:	4798      	blx	r3
}
 8017882:	bf00      	nop
 8017884:	3708      	adds	r7, #8
 8017886:	46bd      	mov	sp, r7
 8017888:	bd80      	pop	{r7, pc}

0801788a <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 801788a:	b580      	push	{r7, lr}
 801788c:	b082      	sub	sp, #8
 801788e:	af00      	add	r7, sp, #0
 8017890:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	699b      	ldr	r3, [r3, #24]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d00b      	beq.n	80178b2 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	699a      	ldr	r2, [r3, #24]
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	699b      	ldr	r3, [r3, #24]
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	33ec      	adds	r3, #236	; 0xec
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	4610      	mov	r0, r2
 80178aa:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	2200      	movs	r2, #0
 80178b0:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	331c      	adds	r3, #28
 80178b6:	4618      	mov	r0, r3
 80178b8:	f004 f85c 	bl	801b974 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 80178bc:	bf00      	nop
 80178be:	3708      	adds	r7, #8
 80178c0:	46bd      	mov	sp, r7
 80178c2:	bd80      	pop	{r7, pc}

080178c4 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 80178c4:	b590      	push	{r4, r7, lr}
 80178c6:	b091      	sub	sp, #68	; 0x44
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]
 80178cc:	6039      	str	r1, [r7, #0]
    setName(name);
 80178ce:	6839      	ldr	r1, [r7, #0]
 80178d0:	6878      	ldr	r0, [r7, #4]
 80178d2:	f7ff fdb3 	bl	801743c <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	33ec      	adds	r3, #236	; 0xec
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	2100      	movs	r1, #0
 80178e0:	6878      	ldr	r0, [r7, #4]
 80178e2:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	331c      	adds	r3, #28
 80178e8:	6839      	ldr	r1, [r7, #0]
 80178ea:	4618      	mov	r0, r3
 80178ec:	f003 ffec 	bl	801b8c8 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	331c      	adds	r3, #28
 80178f4:	4618      	mov	r0, r3
 80178f6:	f003 fe7c 	bl	801b5f2 <_ZNK21MockExpectedCallsList7isEmptyEv>
 80178fa:	4603      	mov	r3, r0
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d01d      	beq.n	801793c <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	33cc      	adds	r3, #204	; 0xcc
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	6878      	ldr	r0, [r7, #4]
 801790a:	4798      	blx	r3
 801790c:	4601      	mov	r1, r0
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017912:	f107 000c 	add.w	r0, r7, #12
 8017916:	683a      	ldr	r2, [r7, #0]
 8017918:	f004 fe24 	bl	801c564 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	33dc      	adds	r3, #220	; 0xdc
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	f107 020c 	add.w	r2, r7, #12
 8017928:	4611      	mov	r1, r2
 801792a:	6878      	ldr	r0, [r7, #4]
 801792c:	4798      	blx	r3
        return *this;
 801792e:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8017930:	f107 030c 	add.w	r3, r7, #12
 8017934:	4618      	mov	r0, r3
 8017936:	f001 ff4b 	bl	80197d0 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801793a:	e006      	b.n	801794a <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	33d8      	adds	r3, #216	; 0xd8
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	6878      	ldr	r0, [r7, #4]
 8017946:	4798      	blx	r3

    return *this;
 8017948:	687c      	ldr	r4, [r7, #4]
 801794a:	4623      	mov	r3, r4
}
 801794c:	4618      	mov	r0, r3
 801794e:	3744      	adds	r7, #68	; 0x44
 8017950:	46bd      	mov	sp, r7
 8017952:	bd90      	pop	{r4, r7, pc}

08017954 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 8017954:	b480      	push	{r7}
 8017956:	b083      	sub	sp, #12
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	6039      	str	r1, [r7, #0]
    return *this;
 801795e:	687b      	ldr	r3, [r7, #4]
}
 8017960:	4618      	mov	r0, r3
 8017962:	370c      	adds	r7, #12
 8017964:	46bd      	mov	sp, r7
 8017966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801796a:	4770      	bx	lr

0801796c <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 801796c:	b590      	push	{r4, r7, lr}
 801796e:	b097      	sub	sp, #92	; 0x5c
 8017970:	af02      	add	r7, sp, #8
 8017972:	6078      	str	r0, [r7, #4]
 8017974:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	33c0      	adds	r3, #192	; 0xc0
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	6878      	ldr	r0, [r7, #4]
 8017980:	4798      	blx	r3
 8017982:	4603      	mov	r3, r0
 8017984:	2b00      	cmp	r3, #0
 8017986:	d164      	bne.n	8017a52 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	33ec      	adds	r3, #236	; 0xec
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	2100      	movs	r1, #0
 8017992:	6878      	ldr	r0, [r7, #4]
 8017994:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	33e8      	adds	r3, #232	; 0xe8
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	6878      	ldr	r0, [r7, #4]
 80179a0:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	331c      	adds	r3, #28
 80179a6:	6839      	ldr	r1, [r7, #0]
 80179a8:	4618      	mov	r0, r3
 80179aa:	f004 f86b 	bl	801ba84 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	331c      	adds	r3, #28
 80179b2:	4618      	mov	r0, r3
 80179b4:	f003 fe1d 	bl	801b5f2 <_ZNK21MockExpectedCallsList7isEmptyEv>
 80179b8:	4603      	mov	r3, r0
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d02b      	beq.n	8017a16 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	33cc      	adds	r3, #204	; 0xcc
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	6878      	ldr	r0, [r7, #4]
 80179c8:	4798      	blx	r3
 80179ca:	4604      	mov	r4, r0
 80179cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80179d0:	6879      	ldr	r1, [r7, #4]
 80179d2:	4618      	mov	r0, r3
 80179d4:	f7ff fd41 	bl	801745a <_ZNK21MockCheckedActualCall7getNameEv>
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80179e0:	f107 000c 	add.w	r0, r7, #12
 80179e4:	9300      	str	r3, [sp, #0]
 80179e6:	683b      	ldr	r3, [r7, #0]
 80179e8:	4621      	mov	r1, r4
 80179ea:	f004 fe7f 	bl	801c6ec <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 80179ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80179f2:	4618      	mov	r0, r3
 80179f4:	f7f5 f907 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	33dc      	adds	r3, #220	; 0xdc
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	f107 020c 	add.w	r2, r7, #12
 8017a04:	4611      	mov	r1, r2
 8017a06:	6878      	ldr	r0, [r7, #4]
 8017a08:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8017a0a:	f107 030c 	add.w	r3, r7, #12
 8017a0e:	4618      	mov	r0, r3
 8017a10:	f001 ff00 	bl	8019814 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8017a14:	e01e      	b.n	8017a54 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	f103 041c 	add.w	r4, r3, #28
 8017a1c:	683b      	ldr	r3, [r7, #0]
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	335c      	adds	r3, #92	; 0x5c
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017a28:	6839      	ldr	r1, [r7, #0]
 8017a2a:	4610      	mov	r0, r2
 8017a2c:	4798      	blx	r3
 8017a2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017a32:	4619      	mov	r1, r3
 8017a34:	4620      	mov	r0, r4
 8017a36:	f004 f9b8 	bl	801bdaa <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 8017a3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017a3e:	4618      	mov	r0, r3
 8017a40:	f7f5 f8e1 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	33d8      	adds	r3, #216	; 0xd8
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	6878      	ldr	r0, [r7, #4]
 8017a4e:	4798      	blx	r3
 8017a50:	e000      	b.n	8017a54 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 8017a52:	bf00      	nop
}
 8017a54:	3754      	adds	r7, #84	; 0x54
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd90      	pop	{r4, r7, pc}

08017a5a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 8017a5a:	b590      	push	{r4, r7, lr}
 8017a5c:	b097      	sub	sp, #92	; 0x5c
 8017a5e:	af02      	add	r7, sp, #8
 8017a60:	6078      	str	r0, [r7, #4]
 8017a62:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	33c0      	adds	r3, #192	; 0xc0
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	6878      	ldr	r0, [r7, #4]
 8017a6e:	4798      	blx	r3
 8017a70:	4603      	mov	r3, r0
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d164      	bne.n	8017b40 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	33ec      	adds	r3, #236	; 0xec
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	2100      	movs	r1, #0
 8017a80:	6878      	ldr	r0, [r7, #4]
 8017a82:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	33e8      	adds	r3, #232	; 0xe8
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	6878      	ldr	r0, [r7, #4]
 8017a8e:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	331c      	adds	r3, #28
 8017a94:	6839      	ldr	r1, [r7, #0]
 8017a96:	4618      	mov	r0, r3
 8017a98:	f004 f820 	bl	801badc <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	331c      	adds	r3, #28
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	f003 fda6 	bl	801b5f2 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8017aa6:	4603      	mov	r3, r0
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d02b      	beq.n	8017b04 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	33cc      	adds	r3, #204	; 0xcc
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	6878      	ldr	r0, [r7, #4]
 8017ab6:	4798      	blx	r3
 8017ab8:	4604      	mov	r4, r0
 8017aba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017abe:	6879      	ldr	r1, [r7, #4]
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	f7ff fcca 	bl	801745a <_ZNK21MockCheckedActualCall7getNameEv>
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017aca:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017ace:	f107 000c 	add.w	r0, r7, #12
 8017ad2:	9300      	str	r3, [sp, #0]
 8017ad4:	683b      	ldr	r3, [r7, #0]
 8017ad6:	4621      	mov	r1, r4
 8017ad8:	f004 ff6a 	bl	801c9b0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8017adc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	f7f5 f890 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	33dc      	adds	r3, #220	; 0xdc
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	f107 020c 	add.w	r2, r7, #12
 8017af2:	4611      	mov	r1, r2
 8017af4:	6878      	ldr	r0, [r7, #4]
 8017af6:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8017af8:	f107 030c 	add.w	r3, r7, #12
 8017afc:	4618      	mov	r0, r3
 8017afe:	f001 feab 	bl	8019858 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8017b02:	e01e      	b.n	8017b42 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	f103 041c 	add.w	r4, r3, #28
 8017b0a:	683b      	ldr	r3, [r7, #0]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	335c      	adds	r3, #92	; 0x5c
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017b16:	6839      	ldr	r1, [r7, #0]
 8017b18:	4610      	mov	r0, r2
 8017b1a:	4798      	blx	r3
 8017b1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017b20:	4619      	mov	r1, r3
 8017b22:	4620      	mov	r0, r4
 8017b24:	f004 f95e 	bl	801bde4 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8017b28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	f7f5 f86a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	33d8      	adds	r3, #216	; 0xd8
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	6878      	ldr	r0, [r7, #4]
 8017b3c:	4798      	blx	r3
 8017b3e:	e000      	b.n	8017b42 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8017b40:	bf00      	nop
}
 8017b42:	3754      	adds	r7, #84	; 0x54
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd90      	pop	{r4, r7, pc}

08017b48 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8017b48:	b590      	push	{r4, r7, lr}
 8017b4a:	b093      	sub	sp, #76	; 0x4c
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	60f8      	str	r0, [r7, #12]
 8017b50:	60b9      	str	r1, [r7, #8]
 8017b52:	4613      	mov	r3, r2
 8017b54:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 8017b56:	f107 0310 	add.w	r3, r7, #16
 8017b5a:	68b9      	ldr	r1, [r7, #8]
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	f005 f9bf 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017b62:	79fa      	ldrb	r2, [r7, #7]
 8017b64:	f107 0310 	add.w	r3, r7, #16
 8017b68:	4611      	mov	r1, r2
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	f005 fa0a 	bl	801cf84 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	33e0      	adds	r3, #224	; 0xe0
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	f107 0210 	add.w	r2, r7, #16
 8017b7c:	4611      	mov	r1, r2
 8017b7e:	68f8      	ldr	r0, [r7, #12]
 8017b80:	4798      	blx	r3
    return *this;
 8017b82:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017b84:	f107 0310 	add.w	r3, r7, #16
 8017b88:	4618      	mov	r0, r3
 8017b8a:	f005 f9d3 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017b8e:	4623      	mov	r3, r4
}
 8017b90:	4618      	mov	r0, r3
 8017b92:	374c      	adds	r7, #76	; 0x4c
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd90      	pop	{r4, r7, pc}

08017b98 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8017b98:	b590      	push	{r4, r7, lr}
 8017b9a:	b093      	sub	sp, #76	; 0x4c
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	60f8      	str	r0, [r7, #12]
 8017ba0:	60b9      	str	r1, [r7, #8]
 8017ba2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017ba4:	f107 0310 	add.w	r3, r7, #16
 8017ba8:	68b9      	ldr	r1, [r7, #8]
 8017baa:	4618      	mov	r0, r3
 8017bac:	f005 f998 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017bb0:	f107 0310 	add.w	r3, r7, #16
 8017bb4:	6879      	ldr	r1, [r7, #4]
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	f005 fa08 	bl	801cfcc <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	33e0      	adds	r3, #224	; 0xe0
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	f107 0210 	add.w	r2, r7, #16
 8017bc8:	4611      	mov	r1, r2
 8017bca:	68f8      	ldr	r0, [r7, #12]
 8017bcc:	4798      	blx	r3
    return *this;
 8017bce:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017bd0:	f107 0310 	add.w	r3, r7, #16
 8017bd4:	4618      	mov	r0, r3
 8017bd6:	f005 f9ad 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017bda:	4623      	mov	r3, r4
}
 8017bdc:	4618      	mov	r0, r3
 8017bde:	374c      	adds	r7, #76	; 0x4c
 8017be0:	46bd      	mov	sp, r7
 8017be2:	bd90      	pop	{r4, r7, pc}

08017be4 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 8017be4:	b590      	push	{r4, r7, lr}
 8017be6:	b093      	sub	sp, #76	; 0x4c
 8017be8:	af00      	add	r7, sp, #0
 8017bea:	60f8      	str	r0, [r7, #12]
 8017bec:	60b9      	str	r1, [r7, #8]
 8017bee:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017bf0:	f107 0310 	add.w	r3, r7, #16
 8017bf4:	68b9      	ldr	r1, [r7, #8]
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	f005 f972 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017bfc:	f107 0310 	add.w	r3, r7, #16
 8017c00:	6879      	ldr	r1, [r7, #4]
 8017c02:	4618      	mov	r0, r3
 8017c04:	f005 fa04 	bl	801d010 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	33e0      	adds	r3, #224	; 0xe0
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	f107 0210 	add.w	r2, r7, #16
 8017c14:	4611      	mov	r1, r2
 8017c16:	68f8      	ldr	r0, [r7, #12]
 8017c18:	4798      	blx	r3
    return *this;
 8017c1a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017c1c:	f107 0310 	add.w	r3, r7, #16
 8017c20:	4618      	mov	r0, r3
 8017c22:	f005 f987 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017c26:	4623      	mov	r3, r4
}
 8017c28:	4618      	mov	r0, r3
 8017c2a:	374c      	adds	r7, #76	; 0x4c
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	bd90      	pop	{r4, r7, pc}

08017c30 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8017c30:	b590      	push	{r4, r7, lr}
 8017c32:	b093      	sub	sp, #76	; 0x4c
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	60f8      	str	r0, [r7, #12]
 8017c38:	60b9      	str	r1, [r7, #8]
 8017c3a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017c3c:	f107 0310 	add.w	r3, r7, #16
 8017c40:	68b9      	ldr	r1, [r7, #8]
 8017c42:	4618      	mov	r0, r3
 8017c44:	f005 f94c 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017c48:	f107 0310 	add.w	r3, r7, #16
 8017c4c:	6879      	ldr	r1, [r7, #4]
 8017c4e:	4618      	mov	r0, r3
 8017c50:	f005 fa22 	bl	801d098 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	33e0      	adds	r3, #224	; 0xe0
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	f107 0210 	add.w	r2, r7, #16
 8017c60:	4611      	mov	r1, r2
 8017c62:	68f8      	ldr	r0, [r7, #12]
 8017c64:	4798      	blx	r3
    return *this;
 8017c66:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017c68:	f107 0310 	add.w	r3, r7, #16
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f005 f961 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017c72:	4623      	mov	r3, r4
}
 8017c74:	4618      	mov	r0, r3
 8017c76:	374c      	adds	r7, #76	; 0x4c
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	bd90      	pop	{r4, r7, pc}

08017c7c <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8017c7c:	b590      	push	{r4, r7, lr}
 8017c7e:	b093      	sub	sp, #76	; 0x4c
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	60f8      	str	r0, [r7, #12]
 8017c84:	60b9      	str	r1, [r7, #8]
 8017c86:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017c88:	f107 0310 	add.w	r3, r7, #16
 8017c8c:	68b9      	ldr	r1, [r7, #8]
 8017c8e:	4618      	mov	r0, r3
 8017c90:	f005 f926 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017c94:	f107 0310 	add.w	r3, r7, #16
 8017c98:	6879      	ldr	r1, [r7, #4]
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f005 f9da 	bl	801d054 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	33e0      	adds	r3, #224	; 0xe0
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	f107 0210 	add.w	r2, r7, #16
 8017cac:	4611      	mov	r1, r2
 8017cae:	68f8      	ldr	r0, [r7, #12]
 8017cb0:	4798      	blx	r3
    return *this;
 8017cb2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017cb4:	f107 0310 	add.w	r3, r7, #16
 8017cb8:	4618      	mov	r0, r3
 8017cba:	f005 f93b 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017cbe:	4623      	mov	r3, r4
}
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	374c      	adds	r7, #76	; 0x4c
 8017cc4:	46bd      	mov	sp, r7
 8017cc6:	bd90      	pop	{r4, r7, pc}

08017cc8 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8017cc8:	b5b0      	push	{r4, r5, r7, lr}
 8017cca:	b086      	sub	sp, #24
 8017ccc:	af02      	add	r7, sp, #8
 8017cce:	60f8      	str	r0, [r7, #12]
 8017cd0:	60b9      	str	r1, [r7, #8]
 8017cd2:	4639      	mov	r1, r7
 8017cd4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8017cd8:	f7fb ffc0 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8017cdc:	4604      	mov	r4, r0
 8017cde:	6823      	ldr	r3, [r4, #0]
 8017ce0:	3368      	adds	r3, #104	; 0x68
 8017ce2:	681d      	ldr	r5, [r3, #0]
 8017ce4:	f7fb ffca 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017ce8:	4603      	mov	r3, r0
 8017cea:	9300      	str	r3, [sp, #0]
 8017cec:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8017cf0:	4a04      	ldr	r2, [pc, #16]	; (8017d04 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8017cf2:	4905      	ldr	r1, [pc, #20]	; (8017d08 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8017cf4:	4620      	mov	r0, r4
 8017cf6:	47a8      	blx	r5
    return *this;
 8017cf8:	68fb      	ldr	r3, [r7, #12]
}
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	3710      	adds	r7, #16
 8017cfe:	46bd      	mov	sp, r7
 8017d00:	bdb0      	pop	{r4, r5, r7, pc}
 8017d02:	bf00      	nop
 8017d04:	0802580c 	.word	0x0802580c
 8017d08:	08025828 	.word	0x08025828

08017d0c <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8017d0c:	b5b0      	push	{r4, r5, r7, lr}
 8017d0e:	b086      	sub	sp, #24
 8017d10:	af02      	add	r7, sp, #8
 8017d12:	60f8      	str	r0, [r7, #12]
 8017d14:	60b9      	str	r1, [r7, #8]
 8017d16:	4639      	mov	r1, r7
 8017d18:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8017d1c:	f7fb ff9e 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8017d20:	4604      	mov	r4, r0
 8017d22:	6823      	ldr	r3, [r4, #0]
 8017d24:	3368      	adds	r3, #104	; 0x68
 8017d26:	681d      	ldr	r5, [r3, #0]
 8017d28:	f7fb ffa8 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	9300      	str	r3, [sp, #0]
 8017d30:	f44f 7388 	mov.w	r3, #272	; 0x110
 8017d34:	4a04      	ldr	r2, [pc, #16]	; (8017d48 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8017d36:	4905      	ldr	r1, [pc, #20]	; (8017d4c <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8017d38:	4620      	mov	r0, r4
 8017d3a:	47a8      	blx	r5
    return *this;
 8017d3c:	68fb      	ldr	r3, [r7, #12]
}
 8017d3e:	4618      	mov	r0, r3
 8017d40:	3710      	adds	r7, #16
 8017d42:	46bd      	mov	sp, r7
 8017d44:	bdb0      	pop	{r4, r5, r7, pc}
 8017d46:	bf00      	nop
 8017d48:	0802580c 	.word	0x0802580c
 8017d4c:	08025854 	.word	0x08025854

08017d50 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8017d50:	b590      	push	{r4, r7, lr}
 8017d52:	b093      	sub	sp, #76	; 0x4c
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	60f8      	str	r0, [r7, #12]
 8017d58:	60b9      	str	r1, [r7, #8]
 8017d5a:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 8017d5e:	f107 0310 	add.w	r3, r7, #16
 8017d62:	68b9      	ldr	r1, [r7, #8]
 8017d64:	4618      	mov	r0, r3
 8017d66:	f005 f8bb 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017d6a:	f107 0310 	add.w	r3, r7, #16
 8017d6e:	ed97 0b00 	vldr	d0, [r7]
 8017d72:	4618      	mov	r0, r3
 8017d74:	f005 f9f0 	bl	801d158 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	33e0      	adds	r3, #224	; 0xe0
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	f107 0210 	add.w	r2, r7, #16
 8017d84:	4611      	mov	r1, r2
 8017d86:	68f8      	ldr	r0, [r7, #12]
 8017d88:	4798      	blx	r3
    return *this;
 8017d8a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017d8c:	f107 0310 	add.w	r3, r7, #16
 8017d90:	4618      	mov	r0, r3
 8017d92:	f005 f8cf 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017d96:	4623      	mov	r3, r4
}
 8017d98:	4618      	mov	r0, r3
 8017d9a:	374c      	adds	r7, #76	; 0x4c
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	bd90      	pop	{r4, r7, pc}

08017da0 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 8017da0:	b590      	push	{r4, r7, lr}
 8017da2:	b093      	sub	sp, #76	; 0x4c
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	60f8      	str	r0, [r7, #12]
 8017da8:	60b9      	str	r1, [r7, #8]
 8017daa:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017dac:	f107 0310 	add.w	r3, r7, #16
 8017db0:	68b9      	ldr	r1, [r7, #8]
 8017db2:	4618      	mov	r0, r3
 8017db4:	f005 f894 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017db8:	f107 0310 	add.w	r3, r7, #16
 8017dbc:	6879      	ldr	r1, [r7, #4]
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	f005 fa74 	bl	801d2ac <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	33e0      	adds	r3, #224	; 0xe0
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	f107 0210 	add.w	r2, r7, #16
 8017dd0:	4611      	mov	r1, r2
 8017dd2:	68f8      	ldr	r0, [r7, #12]
 8017dd4:	4798      	blx	r3
    return *this;
 8017dd6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017dd8:	f107 0310 	add.w	r3, r7, #16
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f005 f8a9 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017de2:	4623      	mov	r3, r4
}
 8017de4:	4618      	mov	r0, r3
 8017de6:	374c      	adds	r7, #76	; 0x4c
 8017de8:	46bd      	mov	sp, r7
 8017dea:	bd90      	pop	{r4, r7, pc}

08017dec <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 8017dec:	b590      	push	{r4, r7, lr}
 8017dee:	b093      	sub	sp, #76	; 0x4c
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	60f8      	str	r0, [r7, #12]
 8017df4:	60b9      	str	r1, [r7, #8]
 8017df6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017df8:	f107 0310 	add.w	r3, r7, #16
 8017dfc:	68b9      	ldr	r1, [r7, #8]
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f005 f86e 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017e04:	f107 0310 	add.w	r3, r7, #16
 8017e08:	6879      	ldr	r1, [r7, #4]
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	f005 f9e8 	bl	801d1e0 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	33e0      	adds	r3, #224	; 0xe0
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	f107 0210 	add.w	r2, r7, #16
 8017e1c:	4611      	mov	r1, r2
 8017e1e:	68f8      	ldr	r0, [r7, #12]
 8017e20:	4798      	blx	r3
    return *this;
 8017e22:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017e24:	f107 0310 	add.w	r3, r7, #16
 8017e28:	4618      	mov	r0, r3
 8017e2a:	f005 f883 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017e2e:	4623      	mov	r3, r4
}
 8017e30:	4618      	mov	r0, r3
 8017e32:	374c      	adds	r7, #76	; 0x4c
 8017e34:	46bd      	mov	sp, r7
 8017e36:	bd90      	pop	{r4, r7, pc}

08017e38 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8017e38:	b590      	push	{r4, r7, lr}
 8017e3a:	b093      	sub	sp, #76	; 0x4c
 8017e3c:	af00      	add	r7, sp, #0
 8017e3e:	60f8      	str	r0, [r7, #12]
 8017e40:	60b9      	str	r1, [r7, #8]
 8017e42:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017e44:	f107 0310 	add.w	r3, r7, #16
 8017e48:	68b9      	ldr	r1, [r7, #8]
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f005 f848 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017e50:	f107 0310 	add.w	r3, r7, #16
 8017e54:	6879      	ldr	r1, [r7, #4]
 8017e56:	4618      	mov	r0, r3
 8017e58:	f005 f9e4 	bl	801d224 <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	33e0      	adds	r3, #224	; 0xe0
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	f107 0210 	add.w	r2, r7, #16
 8017e68:	4611      	mov	r1, r2
 8017e6a:	68f8      	ldr	r0, [r7, #12]
 8017e6c:	4798      	blx	r3
    return *this;
 8017e6e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017e70:	f107 0310 	add.w	r3, r7, #16
 8017e74:	4618      	mov	r0, r3
 8017e76:	f005 f85d 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017e7a:	4623      	mov	r3, r4
}
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	374c      	adds	r7, #76	; 0x4c
 8017e80:	46bd      	mov	sp, r7
 8017e82:	bd90      	pop	{r4, r7, pc}

08017e84 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8017e84:	b590      	push	{r4, r7, lr}
 8017e86:	b093      	sub	sp, #76	; 0x4c
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	60f8      	str	r0, [r7, #12]
 8017e8c:	60b9      	str	r1, [r7, #8]
 8017e8e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017e90:	f107 0310 	add.w	r3, r7, #16
 8017e94:	68b9      	ldr	r1, [r7, #8]
 8017e96:	4618      	mov	r0, r3
 8017e98:	f005 f822 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017e9c:	f107 0310 	add.w	r3, r7, #16
 8017ea0:	6879      	ldr	r1, [r7, #4]
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	f005 f9e0 	bl	801d268 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	33e0      	adds	r3, #224	; 0xe0
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	f107 0210 	add.w	r2, r7, #16
 8017eb4:	4611      	mov	r1, r2
 8017eb6:	68f8      	ldr	r0, [r7, #12]
 8017eb8:	4798      	blx	r3
    return *this;
 8017eba:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017ebc:	f107 0310 	add.w	r3, r7, #16
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f005 f837 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017ec6:	4623      	mov	r3, r4
}
 8017ec8:	4618      	mov	r0, r3
 8017eca:	374c      	adds	r7, #76	; 0x4c
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	bd90      	pop	{r4, r7, pc}

08017ed0 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8017ed0:	b590      	push	{r4, r7, lr}
 8017ed2:	b093      	sub	sp, #76	; 0x4c
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	60f8      	str	r0, [r7, #12]
 8017ed8:	60b9      	str	r1, [r7, #8]
 8017eda:	607a      	str	r2, [r7, #4]
 8017edc:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8017ede:	f107 0310 	add.w	r3, r7, #16
 8017ee2:	68b9      	ldr	r1, [r7, #8]
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f004 fffb 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 8017eea:	f107 0310 	add.w	r3, r7, #16
 8017eee:	683a      	ldr	r2, [r7, #0]
 8017ef0:	6879      	ldr	r1, [r7, #4]
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	f005 f9fc 	bl	801d2f0 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	33e0      	adds	r3, #224	; 0xe0
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	f107 0210 	add.w	r2, r7, #16
 8017f04:	4611      	mov	r1, r2
 8017f06:	68f8      	ldr	r0, [r7, #12]
 8017f08:	4798      	blx	r3
    return *this;
 8017f0a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017f0c:	f107 0310 	add.w	r3, r7, #16
 8017f10:	4618      	mov	r0, r3
 8017f12:	f005 f80f 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017f16:	4623      	mov	r3, r4
}
 8017f18:	4618      	mov	r0, r3
 8017f1a:	374c      	adds	r7, #76	; 0x4c
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	bd90      	pop	{r4, r7, pc}

08017f20 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8017f20:	b590      	push	{r4, r7, lr}
 8017f22:	b0a1      	sub	sp, #132	; 0x84
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	60f8      	str	r0, [r7, #12]
 8017f28:	60b9      	str	r1, [r7, #8]
 8017f2a:	607a      	str	r2, [r7, #4]
 8017f2c:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8017f2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017f32:	6879      	ldr	r1, [r7, #4]
 8017f34:	4618      	mov	r0, r3
 8017f36:	f004 ffd3 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 8017f3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017f3e:	683a      	ldr	r2, [r7, #0]
 8017f40:	68b9      	ldr	r1, [r7, #8]
 8017f42:	4618      	mov	r0, r3
 8017f44:	f005 f9fa 	bl	801d33c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 8017f48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	f005 fdc7 	bl	801dae0 <_ZNK14MockNamedValue13getComparatorEv>
 8017f52:	4603      	mov	r3, r0
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	bf0c      	ite	eq
 8017f58:	2301      	moveq	r3, #1
 8017f5a:	2300      	movne	r3, #0
 8017f5c:	b2db      	uxtb	r3, r3
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d01c      	beq.n	8017f9c <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	33cc      	adds	r3, #204	; 0xcc
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	68f8      	ldr	r0, [r7, #12]
 8017f6c:	4798      	blx	r3
 8017f6e:	4601      	mov	r1, r0
 8017f70:	f107 0314 	add.w	r3, r7, #20
 8017f74:	68ba      	ldr	r2, [r7, #8]
 8017f76:	4618      	mov	r0, r3
 8017f78:	f004 fed6 	bl	801cd28 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	33dc      	adds	r3, #220	; 0xdc
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	f107 0214 	add.w	r2, r7, #20
 8017f88:	4611      	mov	r1, r2
 8017f8a:	68f8      	ldr	r0, [r7, #12]
 8017f8c:	4798      	blx	r3
        return *this;
 8017f8e:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8017f90:	f107 0314 	add.w	r3, r7, #20
 8017f94:	4618      	mov	r0, r3
 8017f96:	f001 fc81 	bl	801989c <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8017f9a:	e009      	b.n	8017fb0 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	33e0      	adds	r3, #224	; 0xe0
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017fa8:	4611      	mov	r1, r2
 8017faa:	68f8      	ldr	r0, [r7, #12]
 8017fac:	4798      	blx	r3
    return *this;
 8017fae:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017fb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	f004 ffbd 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 8017fba:	4623      	mov	r3, r4
}
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	3784      	adds	r7, #132	; 0x84
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bd90      	pop	{r4, r7, pc}

08017fc4 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 8017fc4:	b590      	push	{r4, r7, lr}
 8017fc6:	b095      	sub	sp, #84	; 0x54
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	60f8      	str	r0, [r7, #12]
 8017fcc:	60b9      	str	r1, [r7, #8]
 8017fce:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	33f0      	adds	r3, #240	; 0xf0
 8017fd6:	681c      	ldr	r4, [r3, #0]
 8017fd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017fdc:	4917      	ldr	r1, [pc, #92]	; (801803c <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 8017fde:	4618      	mov	r0, r3
 8017fe0:	f7f4 fa59 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8017fe4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	68b9      	ldr	r1, [r7, #8]
 8017fec:	68f8      	ldr	r0, [r7, #12]
 8017fee:	47a0      	blx	r4
 8017ff0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	f7f4 fe06 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 8017ffa:	f107 0310 	add.w	r3, r7, #16
 8017ffe:	68b9      	ldr	r1, [r7, #8]
 8018000:	4618      	mov	r0, r3
 8018002:	f004 ff6d 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 8018006:	f107 0310 	add.w	r3, r7, #16
 801800a:	6879      	ldr	r1, [r7, #4]
 801800c:	4618      	mov	r0, r3
 801800e:	f005 f8e7 	bl	801d1e0 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	33e4      	adds	r3, #228	; 0xe4
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	f107 0210 	add.w	r2, r7, #16
 801801e:	4611      	mov	r1, r2
 8018020:	68f8      	ldr	r0, [r7, #12]
 8018022:	4798      	blx	r3

    return *this;
 8018024:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8018026:	f107 0310 	add.w	r3, r7, #16
 801802a:	4618      	mov	r0, r3
 801802c:	f004 ff82 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018030:	4623      	mov	r3, r4
}
 8018032:	4618      	mov	r0, r3
 8018034:	3754      	adds	r7, #84	; 0x54
 8018036:	46bd      	mov	sp, r7
 8018038:	bd90      	pop	{r4, r7, pc}
 801803a:	bf00      	nop
 801803c:	08025804 	.word	0x08025804

08018040 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 8018040:	b590      	push	{r4, r7, lr}
 8018042:	b093      	sub	sp, #76	; 0x4c
 8018044:	af00      	add	r7, sp, #0
 8018046:	60f8      	str	r0, [r7, #12]
 8018048:	60b9      	str	r1, [r7, #8]
 801804a:	607a      	str	r2, [r7, #4]
 801804c:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	33f0      	adds	r3, #240	; 0xf0
 8018054:	681c      	ldr	r4, [r3, #0]
 8018056:	683b      	ldr	r3, [r7, #0]
 8018058:	68ba      	ldr	r2, [r7, #8]
 801805a:	6879      	ldr	r1, [r7, #4]
 801805c:	68f8      	ldr	r0, [r7, #12]
 801805e:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 8018060:	f107 0310 	add.w	r3, r7, #16
 8018064:	6879      	ldr	r1, [r7, #4]
 8018066:	4618      	mov	r0, r3
 8018068:	f004 ff3a 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 801806c:	f107 0310 	add.w	r3, r7, #16
 8018070:	683a      	ldr	r2, [r7, #0]
 8018072:	68b9      	ldr	r1, [r7, #8]
 8018074:	4618      	mov	r0, r3
 8018076:	f005 f961 	bl	801d33c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	33e4      	adds	r3, #228	; 0xe4
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	f107 0210 	add.w	r2, r7, #16
 8018086:	4611      	mov	r1, r2
 8018088:	68f8      	ldr	r0, [r7, #12]
 801808a:	4798      	blx	r3

    return *this;
 801808c:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 801808e:	f107 0310 	add.w	r3, r7, #16
 8018092:	4618      	mov	r0, r3
 8018094:	f004 ff4e 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018098:	4623      	mov	r3, r4
}
 801809a:	4618      	mov	r0, r3
 801809c:	374c      	adds	r7, #76	; 0x4c
 801809e:	46bd      	mov	sp, r7
 80180a0:	bd90      	pop	{r4, r7, pc}

080180a2 <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 80180a2:	b480      	push	{r7}
 80180a4:	b083      	sub	sp, #12
 80180a6:	af00      	add	r7, sp, #0
 80180a8:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	7d1b      	ldrb	r3, [r3, #20]
 80180ae:	2b02      	cmp	r3, #2
 80180b0:	bf0c      	ite	eq
 80180b2:	2301      	moveq	r3, #1
 80180b4:	2300      	movne	r3, #0
 80180b6:	b2db      	uxtb	r3, r3
}
 80180b8:	4618      	mov	r0, r3
 80180ba:	370c      	adds	r7, #12
 80180bc:	46bd      	mov	sp, r7
 80180be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c2:	4770      	bx	lr

080180c4 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 80180c4:	b480      	push	{r7}
 80180c6:	b083      	sub	sp, #12
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	7d1b      	ldrb	r3, [r3, #20]
 80180d0:	2b01      	cmp	r3, #1
 80180d2:	bf0c      	ite	eq
 80180d4:	2301      	moveq	r3, #1
 80180d6:	2300      	movne	r3, #0
 80180d8:	b2db      	uxtb	r3, r3
}
 80180da:	4618      	mov	r0, r3
 80180dc:	370c      	adds	r7, #12
 80180de:	46bd      	mov	sp, r7
 80180e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e4:	4770      	bx	lr
	...

080180e8 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 80180e8:	b5b0      	push	{r4, r5, r7, lr}
 80180ea:	b096      	sub	sp, #88	; 0x58
 80180ec:	af02      	add	r7, sp, #8
 80180ee:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	7d5b      	ldrb	r3, [r3, #21]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	f040 80bc 	bne.w	8018272 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	2201      	movs	r2, #1
 80180fe:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	7d1b      	ldrb	r3, [r3, #20]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d014      	beq.n	8018132 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	7d1b      	ldrb	r3, [r3, #20]
 801810c:	2b02      	cmp	r3, #2
 801810e:	d10a      	bne.n	8018126 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	6998      	ldr	r0, [r3, #24]
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	699b      	ldr	r3, [r3, #24]
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	33d8      	adds	r3, #216	; 0xd8
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	687a      	ldr	r2, [r7, #4]
 8018120:	68d2      	ldr	r2, [r2, #12]
 8018122:	4611      	mov	r1, r2
 8018124:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	331c      	adds	r3, #28
 801812a:	4618      	mov	r0, r3
 801812c:	f003 fe07 	bl	801bd3e <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8018130:	e0a0      	b.n	8018274 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	331c      	adds	r3, #28
 8018136:	4618      	mov	r0, r3
 8018138:	f003 fac3 	bl	801b6c2 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 801813c:	4603      	mov	r3, r0
 801813e:	2b00      	cmp	r3, #0
 8018140:	d00f      	beq.n	8018162 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 8018142:	f7fb fd8b 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8018146:	4604      	mov	r4, r0
 8018148:	6823      	ldr	r3, [r4, #0]
 801814a:	3368      	adds	r3, #104	; 0x68
 801814c:	681d      	ldr	r5, [r3, #0]
 801814e:	f7fb fd95 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018152:	4603      	mov	r3, r0
 8018154:	9300      	str	r3, [sp, #0]
 8018156:	f240 1385 	movw	r3, #389	; 0x185
 801815a:	4a48      	ldr	r2, [pc, #288]	; (801827c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 801815c:	4948      	ldr	r1, [pc, #288]	; (8018280 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 801815e:	4620      	mov	r0, r4
 8018160:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	331c      	adds	r3, #28
 8018166:	4618      	mov	r0, r3
 8018168:	f003 fd5f 	bl	801bc2a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 801816c:	4602      	mov	r2, r0
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	699b      	ldr	r3, [r3, #24]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d01f      	beq.n	80181ba <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	699a      	ldr	r2, [r3, #24]
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	699b      	ldr	r3, [r3, #24]
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	33e4      	adds	r3, #228	; 0xe4
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	4610      	mov	r0, r2
 801818a:	4798      	blx	r3
        callHasSucceeded();
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	33d0      	adds	r3, #208	; 0xd0
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	6878      	ldr	r0, [r7, #4]
 8018196:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	6998      	ldr	r0, [r3, #24]
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	699b      	ldr	r3, [r3, #24]
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	33d8      	adds	r3, #216	; 0xd8
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	687a      	ldr	r2, [r7, #4]
 80181a8:	68d2      	ldr	r2, [r2, #12]
 80181aa:	4611      	mov	r1, r2
 80181ac:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	331c      	adds	r3, #28
 80181b2:	4618      	mov	r0, r3
 80181b4:	f003 fdc3 	bl	801bd3e <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 80181b8:	e05c      	b.n	8018274 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	331c      	adds	r3, #28
 80181be:	4618      	mov	r0, r3
 80181c0:	f003 ffc4 	bl	801c14c <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 80181c4:	4603      	mov	r3, r0
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d029      	beq.n	801821e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	33cc      	adds	r3, #204	; 0xcc
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	6878      	ldr	r0, [r7, #4]
 80181d4:	4798      	blx	r3
 80181d6:	4604      	mov	r4, r0
 80181d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80181dc:	6879      	ldr	r1, [r7, #4]
 80181de:	4618      	mov	r0, r3
 80181e0:	f7ff f93b 	bl	801745a <_ZNK21MockCheckedActualCall7getNameEv>
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181e8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80181ec:	f107 000c 	add.w	r0, r7, #12
 80181f0:	4621      	mov	r1, r4
 80181f2:	f004 fd21 	bl	801cc38 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 80181f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80181fa:	4618      	mov	r0, r3
 80181fc:	f7f4 fd03 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	33dc      	adds	r3, #220	; 0xdc
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	f107 020c 	add.w	r2, r7, #12
 801820c:	4611      	mov	r1, r2
 801820e:	6878      	ldr	r0, [r7, #4]
 8018210:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018212:	f107 030c 	add.w	r3, r7, #12
 8018216:	4618      	mov	r0, r3
 8018218:	f001 fb62 	bl	80198e0 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801821c:	e02a      	b.n	8018274 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	33cc      	adds	r3, #204	; 0xcc
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	6878      	ldr	r0, [r7, #4]
 8018228:	4798      	blx	r3
 801822a:	4604      	mov	r4, r0
 801822c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018230:	6879      	ldr	r1, [r7, #4]
 8018232:	4618      	mov	r0, r3
 8018234:	f7ff f911 	bl	801745a <_ZNK21MockCheckedActualCall7getNameEv>
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801823c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018240:	f107 000c 	add.w	r0, r7, #12
 8018244:	4621      	mov	r1, r4
 8018246:	f004 fe05 	bl	801ce54 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 801824a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801824e:	4618      	mov	r0, r3
 8018250:	f7f4 fcd9 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	33dc      	adds	r3, #220	; 0xdc
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	f107 020c 	add.w	r2, r7, #12
 8018260:	4611      	mov	r1, r2
 8018262:	6878      	ldr	r0, [r7, #4]
 8018264:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018266:	f107 030c 	add.w	r3, r7, #12
 801826a:	4618      	mov	r0, r3
 801826c:	f001 fb5a 	bl	8019924 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8018270:	e000      	b.n	8018274 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 8018272:	bf00      	nop
    }
}
 8018274:	3750      	adds	r7, #80	; 0x50
 8018276:	46bd      	mov	sp, r7
 8018278:	bdb0      	pop	{r4, r5, r7, pc}
 801827a:	bf00      	nop
 801827c:	0802580c 	.word	0x0802580c
 8018280:	08025874 	.word	0x08025874

08018284 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8018284:	b480      	push	{r7}
 8018286:	b083      	sub	sp, #12
 8018288:	af00      	add	r7, sp, #0
 801828a:	6078      	str	r0, [r7, #4]
 801828c:	460b      	mov	r3, r1
 801828e:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	78fa      	ldrb	r2, [r7, #3]
 8018294:	751a      	strb	r2, [r3, #20]
}
 8018296:	bf00      	nop
 8018298:	370c      	adds	r7, #12
 801829a:	46bd      	mov	sp, r7
 801829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a0:	4770      	bx	lr
	...

080182a4 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b084      	sub	sp, #16
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
 80182ac:	6039      	str	r1, [r7, #0]
    checkExpectations();
 80182ae:	683b      	ldr	r3, [r7, #0]
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	33c4      	adds	r3, #196	; 0xc4
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	6838      	ldr	r0, [r7, #0]
 80182b8:	4798      	blx	r3
    if (matchingExpectation_)
 80182ba:	683b      	ldr	r3, [r7, #0]
 80182bc:	699b      	ldr	r3, [r3, #24]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d00a      	beq.n	80182d8 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 80182c2:	683b      	ldr	r3, [r7, #0]
 80182c4:	6999      	ldr	r1, [r3, #24]
 80182c6:	683b      	ldr	r3, [r7, #0]
 80182c8:	699b      	ldr	r3, [r3, #24]
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	3394      	adds	r3, #148	; 0x94
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	687a      	ldr	r2, [r7, #4]
 80182d2:	4610      	mov	r0, r2
 80182d4:	4798      	blx	r3
 80182d6:	e010      	b.n	80182fa <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 80182d8:	f107 0308 	add.w	r3, r7, #8
 80182dc:	4909      	ldr	r1, [pc, #36]	; (8018304 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 80182de:	4618      	mov	r0, r3
 80182e0:	f7f4 f8d9 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80182e4:	f107 0308 	add.w	r3, r7, #8
 80182e8:	4619      	mov	r1, r3
 80182ea:	6878      	ldr	r0, [r7, #4]
 80182ec:	f004 fdf8 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
 80182f0:	f107 0308 	add.w	r3, r7, #8
 80182f4:	4618      	mov	r0, r3
 80182f6:	f7f4 fc86 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 80182fa:	6878      	ldr	r0, [r7, #4]
 80182fc:	3710      	adds	r7, #16
 80182fe:	46bd      	mov	sp, r7
 8018300:	bd80      	pop	{r7, pc}
 8018302:	bf00      	nop
 8018304:	080258f0 	.word	0x080258f0

08018308 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8018308:	b580      	push	{r7, lr}
 801830a:	b082      	sub	sp, #8
 801830c:	af00      	add	r7, sp, #0
 801830e:	6078      	str	r0, [r7, #4]
 8018310:	460b      	mov	r3, r1
 8018312:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	3350      	adds	r3, #80	; 0x50
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	6878      	ldr	r0, [r7, #4]
 801831e:	4798      	blx	r3
 8018320:	4603      	mov	r3, r0
 8018322:	f083 0301 	eor.w	r3, r3, #1
 8018326:	b2db      	uxtb	r3, r3
 8018328:	2b00      	cmp	r3, #0
 801832a:	d001      	beq.n	8018330 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 801832c:	78fb      	ldrb	r3, [r7, #3]
 801832e:	e007      	b.n	8018340 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	335c      	adds	r3, #92	; 0x5c
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	6878      	ldr	r0, [r7, #4]
 801833a:	4798      	blx	r3
 801833c:	4603      	mov	r3, r0
 801833e:	bf00      	nop
}
 8018340:	4618      	mov	r0, r3
 8018342:	3708      	adds	r7, #8
 8018344:	46bd      	mov	sp, r7
 8018346:	bd80      	pop	{r7, pc}

08018348 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8018348:	b590      	push	{r4, r7, lr}
 801834a:	b091      	sub	sp, #68	; 0x44
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	3354      	adds	r3, #84	; 0x54
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	f107 0208 	add.w	r2, r7, #8
 801835c:	6879      	ldr	r1, [r7, #4]
 801835e:	4610      	mov	r0, r2
 8018360:	4798      	blx	r3
 8018362:	f107 0308 	add.w	r3, r7, #8
 8018366:	4618      	mov	r0, r3
 8018368:	f005 f898 	bl	801d49c <_ZNK14MockNamedValue12getBoolValueEv>
 801836c:	4603      	mov	r3, r0
 801836e:	461c      	mov	r4, r3
 8018370:	bf00      	nop
 8018372:	f107 0308 	add.w	r3, r7, #8
 8018376:	4618      	mov	r0, r3
 8018378:	f004 fddc 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 801837c:	4623      	mov	r3, r4
}
 801837e:	4618      	mov	r0, r3
 8018380:	3744      	adds	r7, #68	; 0x44
 8018382:	46bd      	mov	sp, r7
 8018384:	bd90      	pop	{r4, r7, pc}

08018386 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 8018386:	b580      	push	{r7, lr}
 8018388:	b082      	sub	sp, #8
 801838a:	af00      	add	r7, sp, #0
 801838c:	6078      	str	r0, [r7, #4]
 801838e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	3350      	adds	r3, #80	; 0x50
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	6878      	ldr	r0, [r7, #4]
 801839a:	4798      	blx	r3
 801839c:	4603      	mov	r3, r0
 801839e:	f083 0301 	eor.w	r3, r3, #1
 80183a2:	b2db      	uxtb	r3, r3
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d001      	beq.n	80183ac <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 80183a8:	683b      	ldr	r3, [r7, #0]
 80183aa:	e007      	b.n	80183bc <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	3364      	adds	r3, #100	; 0x64
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	6878      	ldr	r0, [r7, #4]
 80183b6:	4798      	blx	r3
 80183b8:	4603      	mov	r3, r0
 80183ba:	bf00      	nop
}
 80183bc:	4618      	mov	r0, r3
 80183be:	3708      	adds	r7, #8
 80183c0:	46bd      	mov	sp, r7
 80183c2:	bd80      	pop	{r7, pc}

080183c4 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 80183c4:	b590      	push	{r4, r7, lr}
 80183c6:	b091      	sub	sp, #68	; 0x44
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	3354      	adds	r3, #84	; 0x54
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	f107 0208 	add.w	r2, r7, #8
 80183d8:	6879      	ldr	r1, [r7, #4]
 80183da:	4610      	mov	r0, r2
 80183dc:	4798      	blx	r3
 80183de:	f107 0308 	add.w	r3, r7, #8
 80183e2:	4618      	mov	r0, r3
 80183e4:	f005 f8d2 	bl	801d58c <_ZNK14MockNamedValue11getIntValueEv>
 80183e8:	4604      	mov	r4, r0
 80183ea:	bf00      	nop
 80183ec:	f107 0308 	add.w	r3, r7, #8
 80183f0:	4618      	mov	r0, r3
 80183f2:	f004 fd9f 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 80183f6:	4623      	mov	r3, r4
}
 80183f8:	4618      	mov	r0, r3
 80183fa:	3744      	adds	r7, #68	; 0x44
 80183fc:	46bd      	mov	sp, r7
 80183fe:	bd90      	pop	{r4, r7, pc}

08018400 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8018400:	b590      	push	{r4, r7, lr}
 8018402:	b091      	sub	sp, #68	; 0x44
 8018404:	af00      	add	r7, sp, #0
 8018406:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	3354      	adds	r3, #84	; 0x54
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	f107 0208 	add.w	r2, r7, #8
 8018414:	6879      	ldr	r1, [r7, #4]
 8018416:	4610      	mov	r0, r2
 8018418:	4798      	blx	r3
 801841a:	f107 0308 	add.w	r3, r7, #8
 801841e:	4618      	mov	r0, r3
 8018420:	f005 f93e 	bl	801d6a0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8018424:	4604      	mov	r4, r0
 8018426:	bf00      	nop
 8018428:	f107 0308 	add.w	r3, r7, #8
 801842c:	4618      	mov	r0, r3
 801842e:	f004 fd81 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 8018432:	4623      	mov	r3, r4
}
 8018434:	4618      	mov	r0, r3
 8018436:	3744      	adds	r7, #68	; 0x44
 8018438:	46bd      	mov	sp, r7
 801843a:	bd90      	pop	{r4, r7, pc}

0801843c <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 801843c:	b580      	push	{r7, lr}
 801843e:	b082      	sub	sp, #8
 8018440:	af00      	add	r7, sp, #0
 8018442:	6078      	str	r0, [r7, #4]
 8018444:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	3350      	adds	r3, #80	; 0x50
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	6878      	ldr	r0, [r7, #4]
 8018450:	4798      	blx	r3
 8018452:	4603      	mov	r3, r0
 8018454:	f083 0301 	eor.w	r3, r3, #1
 8018458:	b2db      	uxtb	r3, r3
 801845a:	2b00      	cmp	r3, #0
 801845c:	d001      	beq.n	8018462 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 801845e:	683b      	ldr	r3, [r7, #0]
 8018460:	e007      	b.n	8018472 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	3368      	adds	r3, #104	; 0x68
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	6878      	ldr	r0, [r7, #4]
 801846c:	4798      	blx	r3
 801846e:	4603      	mov	r3, r0
 8018470:	bf00      	nop
}
 8018472:	4618      	mov	r0, r3
 8018474:	3708      	adds	r7, #8
 8018476:	46bd      	mov	sp, r7
 8018478:	bd80      	pop	{r7, pc}

0801847a <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 801847a:	b590      	push	{r4, r7, lr}
 801847c:	b091      	sub	sp, #68	; 0x44
 801847e:	af00      	add	r7, sp, #0
 8018480:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	3354      	adds	r3, #84	; 0x54
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	f107 0208 	add.w	r2, r7, #8
 801848e:	6879      	ldr	r1, [r7, #4]
 8018490:	4610      	mov	r0, r2
 8018492:	4798      	blx	r3
 8018494:	f107 0308 	add.w	r3, r7, #8
 8018498:	4618      	mov	r0, r3
 801849a:	f005 f89f 	bl	801d5dc <_ZNK14MockNamedValue15getLongIntValueEv>
 801849e:	4604      	mov	r4, r0
 80184a0:	bf00      	nop
 80184a2:	f107 0308 	add.w	r3, r7, #8
 80184a6:	4618      	mov	r0, r3
 80184a8:	f004 fd44 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 80184ac:	4623      	mov	r3, r4
}
 80184ae:	4618      	mov	r0, r3
 80184b0:	3744      	adds	r7, #68	; 0x44
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bd90      	pop	{r4, r7, pc}

080184b6 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 80184b6:	b580      	push	{r7, lr}
 80184b8:	b082      	sub	sp, #8
 80184ba:	af00      	add	r7, sp, #0
 80184bc:	6078      	str	r0, [r7, #4]
 80184be:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	3350      	adds	r3, #80	; 0x50
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	6878      	ldr	r0, [r7, #4]
 80184ca:	4798      	blx	r3
 80184cc:	4603      	mov	r3, r0
 80184ce:	f083 0301 	eor.w	r3, r3, #1
 80184d2:	b2db      	uxtb	r3, r3
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d001      	beq.n	80184dc <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 80184d8:	683b      	ldr	r3, [r7, #0]
 80184da:	e007      	b.n	80184ec <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	3370      	adds	r3, #112	; 0x70
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	6878      	ldr	r0, [r7, #4]
 80184e6:	4798      	blx	r3
 80184e8:	4603      	mov	r3, r0
 80184ea:	bf00      	nop
}
 80184ec:	4618      	mov	r0, r3
 80184ee:	3708      	adds	r7, #8
 80184f0:	46bd      	mov	sp, r7
 80184f2:	bd80      	pop	{r7, pc}

080184f4 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 80184f4:	b5b0      	push	{r4, r5, r7, lr}
 80184f6:	b084      	sub	sp, #16
 80184f8:	af02      	add	r7, sp, #8
 80184fa:	6078      	str	r0, [r7, #4]
 80184fc:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 80184fe:	f7fb fbad 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8018502:	4604      	mov	r4, r0
 8018504:	6823      	ldr	r3, [r4, #0]
 8018506:	3368      	adds	r3, #104	; 0x68
 8018508:	681d      	ldr	r5, [r3, #0]
 801850a:	f7fb fbb7 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801850e:	4603      	mov	r3, r0
 8018510:	9300      	str	r3, [sp, #0]
 8018512:	f240 13fb 	movw	r3, #507	; 0x1fb
 8018516:	4a06      	ldr	r2, [pc, #24]	; (8018530 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 8018518:	4906      	ldr	r1, [pc, #24]	; (8018534 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 801851a:	4620      	mov	r0, r4
 801851c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801851e:	2100      	movs	r1, #0
 8018520:	6878      	ldr	r0, [r7, #4]
 8018522:	f7f1 fffb 	bl	800a51c <_ZN18cpputest_ulonglongC1Ei>
}
 8018526:	6878      	ldr	r0, [r7, #4]
 8018528:	3708      	adds	r7, #8
 801852a:	46bd      	mov	sp, r7
 801852c:	bdb0      	pop	{r4, r5, r7, pc}
 801852e:	bf00      	nop
 8018530:	0802580c 	.word	0x0802580c
 8018534:	08025828 	.word	0x08025828

08018538 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8018538:	b5b0      	push	{r4, r5, r7, lr}
 801853a:	b086      	sub	sp, #24
 801853c:	af02      	add	r7, sp, #8
 801853e:	60f8      	str	r0, [r7, #12]
 8018540:	60b9      	str	r1, [r7, #8]
 8018542:	4639      	mov	r1, r7
 8018544:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018548:	f7fb fb88 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801854c:	4604      	mov	r4, r0
 801854e:	6823      	ldr	r3, [r4, #0]
 8018550:	3368      	adds	r3, #104	; 0x68
 8018552:	681d      	ldr	r5, [r3, #0]
 8018554:	f7fb fb92 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018558:	4603      	mov	r3, r0
 801855a:	9300      	str	r3, [sp, #0]
 801855c:	f240 2301 	movw	r3, #513	; 0x201
 8018560:	4a06      	ldr	r2, [pc, #24]	; (801857c <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8018562:	4907      	ldr	r1, [pc, #28]	; (8018580 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8018564:	4620      	mov	r0, r4
 8018566:	47a8      	blx	r5
    return default_value;
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	461a      	mov	r2, r3
 801856c:	463b      	mov	r3, r7
 801856e:	cb03      	ldmia	r3!, {r0, r1}
 8018570:	6010      	str	r0, [r2, #0]
 8018572:	6051      	str	r1, [r2, #4]
}
 8018574:	68f8      	ldr	r0, [r7, #12]
 8018576:	3710      	adds	r7, #16
 8018578:	46bd      	mov	sp, r7
 801857a:	bdb0      	pop	{r4, r5, r7, pc}
 801857c:	0802580c 	.word	0x0802580c
 8018580:	08025828 	.word	0x08025828

08018584 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8018584:	b5b0      	push	{r4, r5, r7, lr}
 8018586:	b084      	sub	sp, #16
 8018588:	af02      	add	r7, sp, #8
 801858a:	6078      	str	r0, [r7, #4]
 801858c:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801858e:	f7fb fb65 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8018592:	4604      	mov	r4, r0
 8018594:	6823      	ldr	r3, [r4, #0]
 8018596:	3368      	adds	r3, #104	; 0x68
 8018598:	681d      	ldr	r5, [r3, #0]
 801859a:	f7fb fb6f 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801859e:	4603      	mov	r3, r0
 80185a0:	9300      	str	r3, [sp, #0]
 80185a2:	f240 2307 	movw	r3, #519	; 0x207
 80185a6:	4a06      	ldr	r2, [pc, #24]	; (80185c0 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 80185a8:	4906      	ldr	r1, [pc, #24]	; (80185c4 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 80185aa:	4620      	mov	r0, r4
 80185ac:	47a8      	blx	r5
    return cpputest_longlong(0);
 80185ae:	2100      	movs	r1, #0
 80185b0:	6878      	ldr	r0, [r7, #4]
 80185b2:	f7f1 ffa7 	bl	800a504 <_ZN17cpputest_longlongC1Ei>
}
 80185b6:	6878      	ldr	r0, [r7, #4]
 80185b8:	3708      	adds	r7, #8
 80185ba:	46bd      	mov	sp, r7
 80185bc:	bdb0      	pop	{r4, r5, r7, pc}
 80185be:	bf00      	nop
 80185c0:	0802580c 	.word	0x0802580c
 80185c4:	08025854 	.word	0x08025854

080185c8 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 80185c8:	b5b0      	push	{r4, r5, r7, lr}
 80185ca:	b086      	sub	sp, #24
 80185cc:	af02      	add	r7, sp, #8
 80185ce:	60f8      	str	r0, [r7, #12]
 80185d0:	60b9      	str	r1, [r7, #8]
 80185d2:	4639      	mov	r1, r7
 80185d4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80185d8:	f7fb fb40 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 80185dc:	4604      	mov	r4, r0
 80185de:	6823      	ldr	r3, [r4, #0]
 80185e0:	3368      	adds	r3, #104	; 0x68
 80185e2:	681d      	ldr	r5, [r3, #0]
 80185e4:	f7fb fb4a 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80185e8:	4603      	mov	r3, r0
 80185ea:	9300      	str	r3, [sp, #0]
 80185ec:	f240 230d 	movw	r3, #525	; 0x20d
 80185f0:	4a06      	ldr	r2, [pc, #24]	; (801860c <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 80185f2:	4907      	ldr	r1, [pc, #28]	; (8018610 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 80185f4:	4620      	mov	r0, r4
 80185f6:	47a8      	blx	r5
    return default_value;
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	461a      	mov	r2, r3
 80185fc:	463b      	mov	r3, r7
 80185fe:	cb03      	ldmia	r3!, {r0, r1}
 8018600:	6010      	str	r0, [r2, #0]
 8018602:	6051      	str	r1, [r2, #4]
}
 8018604:	68f8      	ldr	r0, [r7, #12]
 8018606:	3710      	adds	r7, #16
 8018608:	46bd      	mov	sp, r7
 801860a:	bdb0      	pop	{r4, r5, r7, pc}
 801860c:	0802580c 	.word	0x0802580c
 8018610:	08025854 	.word	0x08025854

08018614 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 8018614:	b580      	push	{r7, lr}
 8018616:	ed2d 8b02 	vpush	{d8}
 801861a:	b090      	sub	sp, #64	; 0x40
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	3354      	adds	r3, #84	; 0x54
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	f107 0208 	add.w	r2, r7, #8
 801862c:	6879      	ldr	r1, [r7, #4]
 801862e:	4610      	mov	r0, r2
 8018630:	4798      	blx	r3
 8018632:	f107 0308 	add.w	r3, r7, #8
 8018636:	4618      	mov	r0, r3
 8018638:	f005 f90a 	bl	801d850 <_ZNK14MockNamedValue14getDoubleValueEv>
 801863c:	eeb0 8a40 	vmov.f32	s16, s0
 8018640:	eef0 8a60 	vmov.f32	s17, s1
 8018644:	bf00      	nop
 8018646:	f107 0308 	add.w	r3, r7, #8
 801864a:	4618      	mov	r0, r3
 801864c:	f004 fc72 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 8018650:	eeb0 7a48 	vmov.f32	s14, s16
 8018654:	eef0 7a68 	vmov.f32	s15, s17
}
 8018658:	eeb0 0a47 	vmov.f32	s0, s14
 801865c:	eef0 0a67 	vmov.f32	s1, s15
 8018660:	3740      	adds	r7, #64	; 0x40
 8018662:	46bd      	mov	sp, r7
 8018664:	ecbd 8b02 	vpop	{d8}
 8018668:	bd80      	pop	{r7, pc}

0801866a <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 801866a:	b580      	push	{r7, lr}
 801866c:	b084      	sub	sp, #16
 801866e:	af00      	add	r7, sp, #0
 8018670:	60f8      	str	r0, [r7, #12]
 8018672:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	3350      	adds	r3, #80	; 0x50
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	68f8      	ldr	r0, [r7, #12]
 8018680:	4798      	blx	r3
 8018682:	4603      	mov	r3, r0
 8018684:	f083 0301 	eor.w	r3, r3, #1
 8018688:	b2db      	uxtb	r3, r3
 801868a:	2b00      	cmp	r3, #0
 801868c:	d002      	beq.n	8018694 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 801868e:	ed97 7b00 	vldr	d7, [r7]
 8018692:	e00a      	b.n	80186aa <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	3398      	adds	r3, #152	; 0x98
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	68f8      	ldr	r0, [r7, #12]
 801869e:	4798      	blx	r3
 80186a0:	eeb0 7a40 	vmov.f32	s14, s0
 80186a4:	eef0 7a60 	vmov.f32	s15, s1
 80186a8:	bf00      	nop
}
 80186aa:	eeb0 0a47 	vmov.f32	s0, s14
 80186ae:	eef0 0a67 	vmov.f32	s1, s15
 80186b2:	3710      	adds	r7, #16
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}

080186b8 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 80186b8:	b590      	push	{r4, r7, lr}
 80186ba:	b091      	sub	sp, #68	; 0x44
 80186bc:	af00      	add	r7, sp, #0
 80186be:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	3354      	adds	r3, #84	; 0x54
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	f107 0208 	add.w	r2, r7, #8
 80186cc:	6879      	ldr	r1, [r7, #4]
 80186ce:	4610      	mov	r0, r2
 80186d0:	4798      	blx	r3
 80186d2:	f107 0308 	add.w	r3, r7, #8
 80186d6:	4618      	mov	r0, r3
 80186d8:	f004 ff08 	bl	801d4ec <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 80186dc:	4604      	mov	r4, r0
 80186de:	bf00      	nop
 80186e0:	f107 0308 	add.w	r3, r7, #8
 80186e4:	4618      	mov	r0, r3
 80186e6:	f004 fc25 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 80186ea:	4623      	mov	r3, r4
}
 80186ec:	4618      	mov	r0, r3
 80186ee:	3744      	adds	r7, #68	; 0x44
 80186f0:	46bd      	mov	sp, r7
 80186f2:	bd90      	pop	{r4, r7, pc}

080186f4 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 80186f4:	b580      	push	{r7, lr}
 80186f6:	b082      	sub	sp, #8
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	6078      	str	r0, [r7, #4]
 80186fc:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	3350      	adds	r3, #80	; 0x50
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	6878      	ldr	r0, [r7, #4]
 8018708:	4798      	blx	r3
 801870a:	4603      	mov	r3, r0
 801870c:	f083 0301 	eor.w	r3, r3, #1
 8018710:	b2db      	uxtb	r3, r3
 8018712:	2b00      	cmp	r3, #0
 8018714:	d001      	beq.n	801871a <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 8018716:	683b      	ldr	r3, [r7, #0]
 8018718:	e007      	b.n	801872a <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	3388      	adds	r3, #136	; 0x88
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	6878      	ldr	r0, [r7, #4]
 8018724:	4798      	blx	r3
 8018726:	4603      	mov	r3, r0
 8018728:	bf00      	nop
}
 801872a:	4618      	mov	r0, r3
 801872c:	3708      	adds	r7, #8
 801872e:	46bd      	mov	sp, r7
 8018730:	bd80      	pop	{r7, pc}

08018732 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 8018732:	b580      	push	{r7, lr}
 8018734:	b082      	sub	sp, #8
 8018736:	af00      	add	r7, sp, #0
 8018738:	6078      	str	r0, [r7, #4]
 801873a:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	3350      	adds	r3, #80	; 0x50
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	6878      	ldr	r0, [r7, #4]
 8018746:	4798      	blx	r3
 8018748:	4603      	mov	r3, r0
 801874a:	f083 0301 	eor.w	r3, r3, #1
 801874e:	b2db      	uxtb	r3, r3
 8018750:	2b00      	cmp	r3, #0
 8018752:	d001      	beq.n	8018758 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 8018754:	683b      	ldr	r3, [r7, #0]
 8018756:	e007      	b.n	8018768 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	33a0      	adds	r3, #160	; 0xa0
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	6878      	ldr	r0, [r7, #4]
 8018762:	4798      	blx	r3
 8018764:	4603      	mov	r3, r0
 8018766:	bf00      	nop
}
 8018768:	4618      	mov	r0, r3
 801876a:	3708      	adds	r7, #8
 801876c:	46bd      	mov	sp, r7
 801876e:	bd80      	pop	{r7, pc}

08018770 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 8018770:	b590      	push	{r4, r7, lr}
 8018772:	b091      	sub	sp, #68	; 0x44
 8018774:	af00      	add	r7, sp, #0
 8018776:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	3354      	adds	r3, #84	; 0x54
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	f107 0208 	add.w	r2, r7, #8
 8018784:	6879      	ldr	r1, [r7, #4]
 8018786:	4610      	mov	r0, r2
 8018788:	4798      	blx	r3
 801878a:	f107 0308 	add.w	r3, r7, #8
 801878e:	4618      	mov	r0, r3
 8018790:	f005 f8e2 	bl	801d958 <_ZNK14MockNamedValue15getPointerValueEv>
 8018794:	4604      	mov	r4, r0
 8018796:	bf00      	nop
 8018798:	f107 0308 	add.w	r3, r7, #8
 801879c:	4618      	mov	r0, r3
 801879e:	f004 fbc9 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 80187a2:	4623      	mov	r3, r4
}
 80187a4:	4618      	mov	r0, r3
 80187a6:	3744      	adds	r7, #68	; 0x44
 80187a8:	46bd      	mov	sp, r7
 80187aa:	bd90      	pop	{r4, r7, pc}

080187ac <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 80187ac:	b590      	push	{r4, r7, lr}
 80187ae:	b091      	sub	sp, #68	; 0x44
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	3354      	adds	r3, #84	; 0x54
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	f107 0208 	add.w	r2, r7, #8
 80187c0:	6879      	ldr	r1, [r7, #4]
 80187c2:	4610      	mov	r0, r2
 80187c4:	4798      	blx	r3
 80187c6:	f107 0308 	add.w	r3, r7, #8
 80187ca:	4618      	mov	r0, r3
 80187cc:	f005 f8ec 	bl	801d9a8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80187d0:	4604      	mov	r4, r0
 80187d2:	bf00      	nop
 80187d4:	f107 0308 	add.w	r3, r7, #8
 80187d8:	4618      	mov	r0, r3
 80187da:	f004 fbab 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 80187de:	4623      	mov	r3, r4
}
 80187e0:	4618      	mov	r0, r3
 80187e2:	3744      	adds	r7, #68	; 0x44
 80187e4:	46bd      	mov	sp, r7
 80187e6:	bd90      	pop	{r4, r7, pc}

080187e8 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 80187e8:	b580      	push	{r7, lr}
 80187ea:	b082      	sub	sp, #8
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	6078      	str	r0, [r7, #4]
 80187f0:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	3350      	adds	r3, #80	; 0x50
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	6878      	ldr	r0, [r7, #4]
 80187fc:	4798      	blx	r3
 80187fe:	4603      	mov	r3, r0
 8018800:	f083 0301 	eor.w	r3, r3, #1
 8018804:	b2db      	uxtb	r3, r3
 8018806:	2b00      	cmp	r3, #0
 8018808:	d001      	beq.n	801880e <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 801880a:	683b      	ldr	r3, [r7, #0]
 801880c:	e007      	b.n	801881e <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	33a8      	adds	r3, #168	; 0xa8
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	6878      	ldr	r0, [r7, #4]
 8018818:	4798      	blx	r3
 801881a:	4603      	mov	r3, r0
 801881c:	bf00      	nop
}
 801881e:	4618      	mov	r0, r3
 8018820:	3708      	adds	r7, #8
 8018822:	46bd      	mov	sp, r7
 8018824:	bd80      	pop	{r7, pc}

08018826 <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 8018826:	b590      	push	{r4, r7, lr}
 8018828:	b091      	sub	sp, #68	; 0x44
 801882a:	af00      	add	r7, sp, #0
 801882c:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	3354      	adds	r3, #84	; 0x54
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	f107 0208 	add.w	r2, r7, #8
 801883a:	6879      	ldr	r1, [r7, #4]
 801883c:	4610      	mov	r0, r2
 801883e:	4798      	blx	r3
 8018840:	f107 0308 	add.w	r3, r7, #8
 8018844:	4618      	mov	r0, r3
 8018846:	f005 f8d7 	bl	801d9f8 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 801884a:	4604      	mov	r4, r0
 801884c:	bf00      	nop
 801884e:	f107 0308 	add.w	r3, r7, #8
 8018852:	4618      	mov	r0, r3
 8018854:	f004 fb6e 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 8018858:	4623      	mov	r3, r4
}
 801885a:	4618      	mov	r0, r3
 801885c:	3744      	adds	r7, #68	; 0x44
 801885e:	46bd      	mov	sp, r7
 8018860:	bd90      	pop	{r4, r7, pc}

08018862 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 8018862:	b580      	push	{r7, lr}
 8018864:	b082      	sub	sp, #8
 8018866:	af00      	add	r7, sp, #0
 8018868:	6078      	str	r0, [r7, #4]
 801886a:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	3350      	adds	r3, #80	; 0x50
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	6878      	ldr	r0, [r7, #4]
 8018876:	4798      	blx	r3
 8018878:	4603      	mov	r3, r0
 801887a:	f083 0301 	eor.w	r3, r3, #1
 801887e:	b2db      	uxtb	r3, r3
 8018880:	2b00      	cmp	r3, #0
 8018882:	d001      	beq.n	8018888 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 8018884:	683b      	ldr	r3, [r7, #0]
 8018886:	e007      	b.n	8018898 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	33b0      	adds	r3, #176	; 0xb0
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	6878      	ldr	r0, [r7, #4]
 8018892:	4798      	blx	r3
 8018894:	4603      	mov	r3, r0
 8018896:	bf00      	nop
}
 8018898:	4618      	mov	r0, r3
 801889a:	3708      	adds	r7, #8
 801889c:	46bd      	mov	sp, r7
 801889e:	bd80      	pop	{r7, pc}

080188a0 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 80188a0:	b580      	push	{r7, lr}
 80188a2:	b082      	sub	sp, #8
 80188a4:	af00      	add	r7, sp, #0
 80188a6:	6078      	str	r0, [r7, #4]
 80188a8:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	3350      	adds	r3, #80	; 0x50
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	6878      	ldr	r0, [r7, #4]
 80188b4:	4798      	blx	r3
 80188b6:	4603      	mov	r3, r0
 80188b8:	f083 0301 	eor.w	r3, r3, #1
 80188bc:	b2db      	uxtb	r3, r3
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d001      	beq.n	80188c6 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 80188c2:	683b      	ldr	r3, [r7, #0]
 80188c4:	e007      	b.n	80188d6 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	3394      	adds	r3, #148	; 0x94
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	6878      	ldr	r0, [r7, #4]
 80188d0:	4798      	blx	r3
 80188d2:	4603      	mov	r3, r0
 80188d4:	bf00      	nop
}
 80188d6:	4618      	mov	r0, r3
 80188d8:	3708      	adds	r7, #8
 80188da:	46bd      	mov	sp, r7
 80188dc:	bd80      	pop	{r7, pc}

080188de <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 80188de:	b590      	push	{r4, r7, lr}
 80188e0:	b091      	sub	sp, #68	; 0x44
 80188e2:	af00      	add	r7, sp, #0
 80188e4:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	3354      	adds	r3, #84	; 0x54
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	f107 0208 	add.w	r2, r7, #8
 80188f2:	6879      	ldr	r1, [r7, #4]
 80188f4:	4610      	mov	r0, r2
 80188f6:	4798      	blx	r3
 80188f8:	f107 0308 	add.w	r3, r7, #8
 80188fc:	4618      	mov	r0, r3
 80188fe:	f005 f803 	bl	801d908 <_ZNK14MockNamedValue14getStringValueEv>
 8018902:	4604      	mov	r4, r0
 8018904:	bf00      	nop
 8018906:	f107 0308 	add.w	r3, r7, #8
 801890a:	4618      	mov	r0, r3
 801890c:	f004 fb12 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 8018910:	4623      	mov	r3, r4
}
 8018912:	4618      	mov	r0, r3
 8018914:	3744      	adds	r7, #68	; 0x44
 8018916:	46bd      	mov	sp, r7
 8018918:	bd90      	pop	{r4, r7, pc}

0801891a <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 801891a:	b590      	push	{r4, r7, lr}
 801891c:	b093      	sub	sp, #76	; 0x4c
 801891e:	af00      	add	r7, sp, #0
 8018920:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	3354      	adds	r3, #84	; 0x54
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	f107 0210 	add.w	r2, r7, #16
 801892e:	6879      	ldr	r1, [r7, #4]
 8018930:	4610      	mov	r0, r2
 8018932:	4798      	blx	r3
 8018934:	f107 0308 	add.w	r3, r7, #8
 8018938:	f107 0210 	add.w	r2, r7, #16
 801893c:	4611      	mov	r1, r2
 801893e:	4618      	mov	r0, r3
 8018940:	f004 fd8e 	bl	801d460 <_ZNK14MockNamedValue7getNameEv>
 8018944:	f107 0308 	add.w	r3, r7, #8
 8018948:	4618      	mov	r0, r3
 801894a:	f7f4 f94b 	bl	800cbe4 <_ZNK12SimpleString7isEmptyEv>
 801894e:	4603      	mov	r3, r0
 8018950:	f083 0301 	eor.w	r3, r3, #1
 8018954:	b2dc      	uxtb	r4, r3
 8018956:	f107 0308 	add.w	r3, r7, #8
 801895a:	4618      	mov	r0, r3
 801895c:	f7f4 f953 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018960:	f107 0310 	add.w	r3, r7, #16
 8018964:	4618      	mov	r0, r3
 8018966:	f004 fae5 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 801896a:	4623      	mov	r3, r4
}
 801896c:	4618      	mov	r0, r3
 801896e:	374c      	adds	r7, #76	; 0x4c
 8018970:	46bd      	mov	sp, r7
 8018972:	bd90      	pop	{r4, r7, pc}

08018974 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 8018974:	b590      	push	{r4, r7, lr}
 8018976:	b095      	sub	sp, #84	; 0x54
 8018978:	af02      	add	r7, sp, #8
 801897a:	6078      	str	r0, [r7, #4]
 801897c:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	33c0      	adds	r3, #192	; 0xc0
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	6878      	ldr	r0, [r7, #4]
 8018988:	4798      	blx	r3
 801898a:	4603      	mov	r3, r0
 801898c:	2b00      	cmp	r3, #0
 801898e:	d001      	beq.n	8018994 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 8018990:	687c      	ldr	r4, [r7, #4]
 8018992:	e053      	b.n	8018a3c <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	331c      	adds	r3, #28
 8018998:	6839      	ldr	r1, [r7, #0]
 801899a:	4618      	mov	r0, r3
 801899c:	f003 f8ca 	bl	801bb34 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	699b      	ldr	r3, [r3, #24]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d109      	bne.n	80189bc <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	331c      	adds	r3, #28
 80189ac:	4618      	mov	r0, r3
 80189ae:	f002 fe20 	bl	801b5f2 <_ZNK21MockExpectedCallsList7isEmptyEv>
 80189b2:	4603      	mov	r3, r0
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d001      	beq.n	80189bc <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 80189b8:	2301      	movs	r3, #1
 80189ba:	e000      	b.n	80189be <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 80189bc:	2300      	movs	r3, #0
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d02c      	beq.n	8018a1c <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	33cc      	adds	r3, #204	; 0xcc
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	6878      	ldr	r0, [r7, #4]
 80189cc:	4798      	blx	r3
 80189ce:	4604      	mov	r4, r0
 80189d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80189d4:	6879      	ldr	r1, [r7, #4]
 80189d6:	4618      	mov	r0, r3
 80189d8:	f7fe fd3f 	bl	801745a <_ZNK21MockCheckedActualCall7getNameEv>
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189e0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80189e4:	f107 000c 	add.w	r0, r7, #12
 80189e8:	9300      	str	r3, [sp, #0]
 80189ea:	683b      	ldr	r3, [r7, #0]
 80189ec:	4621      	mov	r1, r4
 80189ee:	f004 f9fb 	bl	801cde8 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 80189f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80189f6:	4618      	mov	r0, r3
 80189f8:	f7f4 f905 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	33dc      	adds	r3, #220	; 0xdc
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	f107 020c 	add.w	r2, r7, #12
 8018a08:	4611      	mov	r1, r2
 8018a0a:	6878      	ldr	r0, [r7, #4]
 8018a0c:	4798      	blx	r3
        return *this;
 8018a0e:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8018a10:	f107 030c 	add.w	r3, r7, #12
 8018a14:	4618      	mov	r0, r3
 8018a16:	f000 ffa7 	bl	8019968 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8018a1a:	e00f      	b.n	8018a3c <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	331c      	adds	r3, #28
 8018a20:	4618      	mov	r0, r3
 8018a22:	f003 f9a7 	bl	801bd74 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	699b      	ldr	r3, [r3, #24]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d105      	bne.n	8018a3a <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	33d8      	adds	r3, #216	; 0xd8
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	6878      	ldr	r0, [r7, #4]
 8018a38:	4798      	blx	r3
    }

    return *this;
 8018a3a:	687c      	ldr	r4, [r7, #4]
 8018a3c:	4623      	mov	r3, r4
}
 8018a3e:	4618      	mov	r0, r3
 8018a40:	374c      	adds	r7, #76	; 0x4c
 8018a42:	46bd      	mov	sp, r7
 8018a44:	bd90      	pop	{r4, r7, pc}
	...

08018a48 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 8018a48:	b590      	push	{r4, r7, lr}
 8018a4a:	b087      	sub	sp, #28
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	60f8      	str	r0, [r7, #12]
 8018a50:	60b9      	str	r1, [r7, #8]
 8018a52:	607a      	str	r2, [r7, #4]
 8018a54:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 8018a56:	f240 2282 	movw	r2, #642	; 0x282
 8018a5a:	4913      	ldr	r1, [pc, #76]	; (8018aa8 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8018a5c:	2018      	movs	r0, #24
 8018a5e:	f7f1 f957 	bl	8009d10 <_ZnwjPKci>
 8018a62:	4604      	mov	r4, r0
 8018a64:	683b      	ldr	r3, [r7, #0]
 8018a66:	687a      	ldr	r2, [r7, #4]
 8018a68:	68b9      	ldr	r1, [r7, #8]
 8018a6a:	4620      	mov	r0, r4
 8018a6c:	f7fe fa48 	bl	8016f00 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 8018a70:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d103      	bne.n	8018a82 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	693a      	ldr	r2, [r7, #16]
 8018a7e:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 8018a80:	e00d      	b.n	8018a9e <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 8018a82:	68fb      	ldr	r3, [r7, #12]
 8018a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a86:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	695b      	ldr	r3, [r3, #20]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d003      	beq.n	8018a98 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 8018a90:	697b      	ldr	r3, [r7, #20]
 8018a92:	695b      	ldr	r3, [r3, #20]
 8018a94:	617b      	str	r3, [r7, #20]
 8018a96:	e7f7      	b.n	8018a88 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 8018a98:	697b      	ldr	r3, [r7, #20]
 8018a9a:	693a      	ldr	r2, [r7, #16]
 8018a9c:	615a      	str	r2, [r3, #20]
}
 8018a9e:	bf00      	nop
 8018aa0:	371c      	adds	r7, #28
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	bd90      	pop	{r4, r7, pc}
 8018aa6:	bf00      	nop
 8018aa8:	0802580c 	.word	0x0802580c

08018aac <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8018aac:	b580      	push	{r7, lr}
 8018aae:	b082      	sub	sp, #8
 8018ab0:	af00      	add	r7, sp, #0
 8018ab2:	6078      	str	r0, [r7, #4]
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	3308      	adds	r3, #8
 8018ab8:	4618      	mov	r0, r3
 8018aba:	f7f4 f8a4 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	f7f4 f8a0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	4618      	mov	r0, r3
 8018aca:	3708      	adds	r7, #8
 8018acc:	46bd      	mov	sp, r7
 8018ace:	bd80      	pop	{r7, pc}

08018ad0 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 8018ad0:	b590      	push	{r4, r7, lr}
 8018ad2:	b085      	sub	sp, #20
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018adc:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 8018ade:	2300      	movs	r3, #0
 8018ae0:	60bb      	str	r3, [r7, #8]

    while (current) {
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d012      	beq.n	8018b0e <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	695b      	ldr	r3, [r3, #20]
 8018af0:	60fb      	str	r3, [r7, #12]
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	68fa      	ldr	r2, [r7, #12]
 8018af6:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 8018af8:	68bc      	ldr	r4, [r7, #8]
 8018afa:	2c00      	cmp	r4, #0
 8018afc:	d0f1      	beq.n	8018ae2 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 8018afe:	4620      	mov	r0, r4
 8018b00:	f7ff ffd4 	bl	8018aac <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 8018b04:	2118      	movs	r1, #24
 8018b06:	4620      	mov	r0, r4
 8018b08:	f7f1 f916 	bl	8009d38 <_ZdlPvj>
    while (current) {
 8018b0c:	e7e9      	b.n	8018ae2 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 8018b0e:	bf00      	nop
 8018b10:	3714      	adds	r7, #20
 8018b12:	46bd      	mov	sp, r7
 8018b14:	bd90      	pop	{r4, r7, pc}
	...

08018b18 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b082      	sub	sp, #8
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	6078      	str	r0, [r7, #4]
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	4618      	mov	r0, r3
 8018b24:	f7fe fc6a 	bl	80173fc <_ZN14MockActualCallC1Ev>
 8018b28:	4a06      	ldr	r2, [pc, #24]	; (8018b44 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	601a      	str	r2, [r3, #0]
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	3304      	adds	r3, #4
 8018b32:	4905      	ldr	r1, [pc, #20]	; (8018b48 <_ZN19MockActualCallTraceC1Ev+0x30>)
 8018b34:	4618      	mov	r0, r3
 8018b36:	f7f3 fcae 	bl	800c496 <_ZN12SimpleStringC1EPKc>
{
}
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	3708      	adds	r7, #8
 8018b40:	46bd      	mov	sp, r7
 8018b42:	bd80      	pop	{r7, pc}
 8018b44:	08028638 	.word	0x08028638
 8018b48:	080257f4 	.word	0x080257f4

08018b4c <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	b082      	sub	sp, #8
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	6078      	str	r0, [r7, #4]
 8018b54:	4a08      	ldr	r2, [pc, #32]	; (8018b78 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	601a      	str	r2, [r3, #0]
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	3304      	adds	r3, #4
 8018b5e:	4618      	mov	r0, r3
 8018b60:	f7f4 f851 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	4618      	mov	r0, r3
 8018b68:	f7fe fc58 	bl	801741c <_ZN14MockActualCallD1Ev>
{
}
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	4618      	mov	r0, r3
 8018b70:	3708      	adds	r7, #8
 8018b72:	46bd      	mov	sp, r7
 8018b74:	bd80      	pop	{r7, pc}
 8018b76:	bf00      	nop
 8018b78:	08028638 	.word	0x08028638

08018b7c <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 8018b7c:	b580      	push	{r7, lr}
 8018b7e:	b082      	sub	sp, #8
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	6078      	str	r0, [r7, #4]
}
 8018b84:	6878      	ldr	r0, [r7, #4]
 8018b86:	f7ff ffe1 	bl	8018b4c <_ZN19MockActualCallTraceD1Ev>
 8018b8a:	210c      	movs	r1, #12
 8018b8c:	6878      	ldr	r0, [r7, #4]
 8018b8e:	f7f1 f8d3 	bl	8009d38 <_ZdlPvj>
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	4618      	mov	r0, r3
 8018b96:	3708      	adds	r7, #8
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	bd80      	pop	{r7, pc}

08018b9c <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b082      	sub	sp, #8
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]
 8018ba4:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	3304      	adds	r3, #4
 8018baa:	4907      	ldr	r1, [pc, #28]	; (8018bc8 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8018bac:	4618      	mov	r0, r3
 8018bae:	f7f4 f8b9 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	3304      	adds	r3, #4
 8018bb6:	6839      	ldr	r1, [r7, #0]
 8018bb8:	4618      	mov	r0, r3
 8018bba:	f7f4 f8a1 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    return *this;
 8018bbe:	687b      	ldr	r3, [r7, #4]
}
 8018bc0:	4618      	mov	r0, r3
 8018bc2:	3708      	adds	r7, #8
 8018bc4:	46bd      	mov	sp, r7
 8018bc6:	bd80      	pop	{r7, pc}
 8018bc8:	08025900 	.word	0x08025900

08018bcc <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 8018bcc:	b590      	push	{r4, r7, lr}
 8018bce:	b085      	sub	sp, #20
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	6078      	str	r0, [r7, #4]
 8018bd4:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	3304      	adds	r3, #4
 8018bda:	490e      	ldr	r1, [pc, #56]	; (8018c14 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8018bdc:	4618      	mov	r0, r3
 8018bde:	f7f4 f8a1 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	1d1c      	adds	r4, r3, #4
 8018be6:	f107 0308 	add.w	r3, r7, #8
 8018bea:	6839      	ldr	r1, [r7, #0]
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7f4 fd39 	bl	800d664 <_Z10StringFromj>
 8018bf2:	f107 0308 	add.w	r3, r7, #8
 8018bf6:	4619      	mov	r1, r3
 8018bf8:	4620      	mov	r0, r4
 8018bfa:	f7f4 f881 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 8018bfe:	f107 0308 	add.w	r3, r7, #8
 8018c02:	4618      	mov	r0, r3
 8018c04:	f7f3 ffff 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return *this;
 8018c08:	687b      	ldr	r3, [r7, #4]
}
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	3714      	adds	r7, #20
 8018c0e:	46bd      	mov	sp, r7
 8018c10:	bd90      	pop	{r4, r7, pc}
 8018c12:	bf00      	nop
 8018c14:	08025910 	.word	0x08025910

08018c18 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8018c18:	b580      	push	{r7, lr}
 8018c1a:	b082      	sub	sp, #8
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	6078      	str	r0, [r7, #4]
 8018c20:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	3304      	adds	r3, #4
 8018c26:	490a      	ldr	r1, [pc, #40]	; (8018c50 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8018c28:	4618      	mov	r0, r3
 8018c2a:	f7f4 f87b 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	3304      	adds	r3, #4
 8018c32:	6839      	ldr	r1, [r7, #0]
 8018c34:	4618      	mov	r0, r3
 8018c36:	f7f4 f863 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	3304      	adds	r3, #4
 8018c3e:	4905      	ldr	r1, [pc, #20]	; (8018c54 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8018c40:	4618      	mov	r0, r3
 8018c42:	f7f4 f86f 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
}
 8018c46:	bf00      	nop
 8018c48:	3708      	adds	r7, #8
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	bd80      	pop	{r7, pc}
 8018c4e:	bf00      	nop
 8018c50:	08025920 	.word	0x08025920
 8018c54:	08025924 	.word	0x08025924

08018c58 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 8018c58:	b590      	push	{r4, r7, lr}
 8018c5a:	b087      	sub	sp, #28
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	60f8      	str	r0, [r7, #12]
 8018c60:	60b9      	str	r1, [r7, #8]
 8018c62:	4613      	mov	r3, r2
 8018c64:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 8018c66:	68b9      	ldr	r1, [r7, #8]
 8018c68:	68f8      	ldr	r0, [r7, #12]
 8018c6a:	f7ff ffd5 	bl	8018c18 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	1d1c      	adds	r4, r3, #4
 8018c72:	f107 0310 	add.w	r3, r7, #16
 8018c76:	79fa      	ldrb	r2, [r7, #7]
 8018c78:	4611      	mov	r1, r2
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	f7f4 fa34 	bl	800d0e8 <_Z10StringFromb>
 8018c80:	f107 0310 	add.w	r3, r7, #16
 8018c84:	4619      	mov	r1, r3
 8018c86:	4620      	mov	r0, r4
 8018c88:	f7f4 f83a 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 8018c8c:	f107 0310 	add.w	r3, r7, #16
 8018c90:	4618      	mov	r0, r3
 8018c92:	f7f3 ffb8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return *this;
 8018c96:	68fb      	ldr	r3, [r7, #12]
}
 8018c98:	4618      	mov	r0, r3
 8018c9a:	371c      	adds	r7, #28
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	bd90      	pop	{r4, r7, pc}

08018ca0 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8018ca0:	b590      	push	{r4, r7, lr}
 8018ca2:	b08f      	sub	sp, #60	; 0x3c
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	60f8      	str	r0, [r7, #12]
 8018ca8:	60b9      	str	r1, [r7, #8]
 8018caa:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018cac:	68b9      	ldr	r1, [r7, #8]
 8018cae:	68f8      	ldr	r0, [r7, #12]
 8018cb0:	f7ff ffb2 	bl	8018c18 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	1d1c      	adds	r4, r3, #4
 8018cb8:	f107 0320 	add.w	r3, r7, #32
 8018cbc:	6879      	ldr	r1, [r7, #4]
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	f7f4 fcd0 	bl	800d664 <_Z10StringFromj>
 8018cc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018cc8:	491f      	ldr	r1, [pc, #124]	; (8018d48 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 8018cca:	4618      	mov	r0, r3
 8018ccc:	f7f3 fbe3 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8018cd0:	f107 0318 	add.w	r3, r7, #24
 8018cd4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018cd8:	f107 0120 	add.w	r1, r7, #32
 8018cdc:	4618      	mov	r0, r3
 8018cde:	f7f3 fff4 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 8018ce2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018ce6:	6879      	ldr	r1, [r7, #4]
 8018ce8:	4618      	mov	r0, r3
 8018cea:	f7f4 fb5f 	bl	800d3ac <_Z30BracketsFormattedHexStringFromj>
 8018cee:	f107 0310 	add.w	r3, r7, #16
 8018cf2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018cf6:	f107 0118 	add.w	r1, r7, #24
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	f7f3 ffe5 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 8018d00:	f107 0310 	add.w	r3, r7, #16
 8018d04:	4619      	mov	r1, r3
 8018d06:	4620      	mov	r0, r4
 8018d08:	f7f3 fffa 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 8018d0c:	f107 0310 	add.w	r3, r7, #16
 8018d10:	4618      	mov	r0, r3
 8018d12:	f7f3 ff78 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018d16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	f7f3 ff73 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018d20:	f107 0318 	add.w	r3, r7, #24
 8018d24:	4618      	mov	r0, r3
 8018d26:	f7f3 ff6e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018d2e:	4618      	mov	r0, r3
 8018d30:	f7f3 ff69 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018d34:	f107 0320 	add.w	r3, r7, #32
 8018d38:	4618      	mov	r0, r3
 8018d3a:	f7f3 ff64 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return *this;
 8018d3e:	68fb      	ldr	r3, [r7, #12]
}
 8018d40:	4618      	mov	r0, r3
 8018d42:	373c      	adds	r7, #60	; 0x3c
 8018d44:	46bd      	mov	sp, r7
 8018d46:	bd90      	pop	{r4, r7, pc}
 8018d48:	08025920 	.word	0x08025920

08018d4c <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 8018d4c:	b590      	push	{r4, r7, lr}
 8018d4e:	b08f      	sub	sp, #60	; 0x3c
 8018d50:	af00      	add	r7, sp, #0
 8018d52:	60f8      	str	r0, [r7, #12]
 8018d54:	60b9      	str	r1, [r7, #8]
 8018d56:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018d58:	68b9      	ldr	r1, [r7, #8]
 8018d5a:	68f8      	ldr	r0, [r7, #12]
 8018d5c:	f7ff ff5c 	bl	8018c18 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	1d1c      	adds	r4, r3, #4
 8018d64:	f107 0320 	add.w	r3, r7, #32
 8018d68:	6879      	ldr	r1, [r7, #4]
 8018d6a:	4618      	mov	r0, r3
 8018d6c:	f7f4 fa12 	bl	800d194 <_Z10StringFromi>
 8018d70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018d74:	491f      	ldr	r1, [pc, #124]	; (8018df4 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 8018d76:	4618      	mov	r0, r3
 8018d78:	f7f3 fb8d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8018d7c:	f107 0318 	add.w	r3, r7, #24
 8018d80:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018d84:	f107 0120 	add.w	r1, r7, #32
 8018d88:	4618      	mov	r0, r3
 8018d8a:	f7f3 ff9e 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 8018d8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018d92:	6879      	ldr	r1, [r7, #4]
 8018d94:	4618      	mov	r0, r3
 8018d96:	f7f4 faed 	bl	800d374 <_Z30BracketsFormattedHexStringFromi>
 8018d9a:	f107 0310 	add.w	r3, r7, #16
 8018d9e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018da2:	f107 0118 	add.w	r1, r7, #24
 8018da6:	4618      	mov	r0, r3
 8018da8:	f7f3 ff8f 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 8018dac:	f107 0310 	add.w	r3, r7, #16
 8018db0:	4619      	mov	r1, r3
 8018db2:	4620      	mov	r0, r4
 8018db4:	f7f3 ffa4 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 8018db8:	f107 0310 	add.w	r3, r7, #16
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	f7f3 ff22 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018dc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7f3 ff1d 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018dcc:	f107 0318 	add.w	r3, r7, #24
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	f7f3 ff18 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018dda:	4618      	mov	r0, r3
 8018ddc:	f7f3 ff13 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018de0:	f107 0320 	add.w	r3, r7, #32
 8018de4:	4618      	mov	r0, r3
 8018de6:	f7f3 ff0e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return *this;
 8018dea:	68fb      	ldr	r3, [r7, #12]
}
 8018dec:	4618      	mov	r0, r3
 8018dee:	373c      	adds	r7, #60	; 0x3c
 8018df0:	46bd      	mov	sp, r7
 8018df2:	bd90      	pop	{r4, r7, pc}
 8018df4:	08025920 	.word	0x08025920

08018df8 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8018df8:	b590      	push	{r4, r7, lr}
 8018dfa:	b08f      	sub	sp, #60	; 0x3c
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	60f8      	str	r0, [r7, #12]
 8018e00:	60b9      	str	r1, [r7, #8]
 8018e02:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018e04:	68b9      	ldr	r1, [r7, #8]
 8018e06:	68f8      	ldr	r0, [r7, #12]
 8018e08:	f7ff ff06 	bl	8018c18 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	1d1c      	adds	r4, r3, #4
 8018e10:	f107 0320 	add.w	r3, r7, #32
 8018e14:	6879      	ldr	r1, [r7, #4]
 8018e16:	4618      	mov	r0, r3
 8018e18:	f7f4 fc36 	bl	800d688 <_Z10StringFromm>
 8018e1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018e20:	491f      	ldr	r1, [pc, #124]	; (8018ea0 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 8018e22:	4618      	mov	r0, r3
 8018e24:	f7f3 fb37 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8018e28:	f107 0318 	add.w	r3, r7, #24
 8018e2c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018e30:	f107 0120 	add.w	r1, r7, #32
 8018e34:	4618      	mov	r0, r3
 8018e36:	f7f3 ff48 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 8018e3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e3e:	6879      	ldr	r1, [r7, #4]
 8018e40:	4618      	mov	r0, r3
 8018e42:	f7f4 faeb 	bl	800d41c <_Z30BracketsFormattedHexStringFromm>
 8018e46:	f107 0310 	add.w	r3, r7, #16
 8018e4a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018e4e:	f107 0118 	add.w	r1, r7, #24
 8018e52:	4618      	mov	r0, r3
 8018e54:	f7f3 ff39 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 8018e58:	f107 0310 	add.w	r3, r7, #16
 8018e5c:	4619      	mov	r1, r3
 8018e5e:	4620      	mov	r0, r4
 8018e60:	f7f3 ff4e 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 8018e64:	f107 0310 	add.w	r3, r7, #16
 8018e68:	4618      	mov	r0, r3
 8018e6a:	f7f3 fecc 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018e6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e72:	4618      	mov	r0, r3
 8018e74:	f7f3 fec7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018e78:	f107 0318 	add.w	r3, r7, #24
 8018e7c:	4618      	mov	r0, r3
 8018e7e:	f7f3 fec2 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018e86:	4618      	mov	r0, r3
 8018e88:	f7f3 febd 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018e8c:	f107 0320 	add.w	r3, r7, #32
 8018e90:	4618      	mov	r0, r3
 8018e92:	f7f3 feb8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return *this;
 8018e96:	68fb      	ldr	r3, [r7, #12]
}
 8018e98:	4618      	mov	r0, r3
 8018e9a:	373c      	adds	r7, #60	; 0x3c
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	bd90      	pop	{r4, r7, pc}
 8018ea0:	08025920 	.word	0x08025920

08018ea4 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 8018ea4:	b590      	push	{r4, r7, lr}
 8018ea6:	b08f      	sub	sp, #60	; 0x3c
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	60f8      	str	r0, [r7, #12]
 8018eac:	60b9      	str	r1, [r7, #8]
 8018eae:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018eb0:	68b9      	ldr	r1, [r7, #8]
 8018eb2:	68f8      	ldr	r0, [r7, #12]
 8018eb4:	f7ff feb0 	bl	8018c18 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	1d1c      	adds	r4, r3, #4
 8018ebc:	f107 0320 	add.w	r3, r7, #32
 8018ec0:	6879      	ldr	r1, [r7, #4]
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	f7f4 f978 	bl	800d1b8 <_Z10StringFroml>
 8018ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018ecc:	491f      	ldr	r1, [pc, #124]	; (8018f4c <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 8018ece:	4618      	mov	r0, r3
 8018ed0:	f7f3 fae1 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8018ed4:	f107 0318 	add.w	r3, r7, #24
 8018ed8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018edc:	f107 0120 	add.w	r1, r7, #32
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	f7f3 fef2 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 8018ee6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018eea:	6879      	ldr	r1, [r7, #4]
 8018eec:	4618      	mov	r0, r3
 8018eee:	f7f4 fa79 	bl	800d3e4 <_Z30BracketsFormattedHexStringFroml>
 8018ef2:	f107 0310 	add.w	r3, r7, #16
 8018ef6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018efa:	f107 0118 	add.w	r1, r7, #24
 8018efe:	4618      	mov	r0, r3
 8018f00:	f7f3 fee3 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 8018f04:	f107 0310 	add.w	r3, r7, #16
 8018f08:	4619      	mov	r1, r3
 8018f0a:	4620      	mov	r0, r4
 8018f0c:	f7f3 fef8 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 8018f10:	f107 0310 	add.w	r3, r7, #16
 8018f14:	4618      	mov	r0, r3
 8018f16:	f7f3 fe76 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018f1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018f1e:	4618      	mov	r0, r3
 8018f20:	f7f3 fe71 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018f24:	f107 0318 	add.w	r3, r7, #24
 8018f28:	4618      	mov	r0, r3
 8018f2a:	f7f3 fe6c 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018f32:	4618      	mov	r0, r3
 8018f34:	f7f3 fe67 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8018f38:	f107 0320 	add.w	r3, r7, #32
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	f7f3 fe62 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return *this;
 8018f42:	68fb      	ldr	r3, [r7, #12]
}
 8018f44:	4618      	mov	r0, r3
 8018f46:	373c      	adds	r7, #60	; 0x3c
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	bd90      	pop	{r4, r7, pc}
 8018f4c:	08025920 	.word	0x08025920

08018f50 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8018f50:	b5b0      	push	{r4, r5, r7, lr}
 8018f52:	b086      	sub	sp, #24
 8018f54:	af02      	add	r7, sp, #8
 8018f56:	60f8      	str	r0, [r7, #12]
 8018f58:	60b9      	str	r1, [r7, #8]
 8018f5a:	4639      	mov	r1, r7
 8018f5c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018f60:	f7fa fe7c 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8018f64:	4604      	mov	r4, r0
 8018f66:	6823      	ldr	r3, [r4, #0]
 8018f68:	3368      	adds	r3, #104	; 0x68
 8018f6a:	681d      	ldr	r5, [r3, #0]
 8018f6c:	f7fa fe86 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018f70:	4603      	mov	r3, r0
 8018f72:	9300      	str	r3, [sp, #0]
 8018f74:	f240 23ee 	movw	r3, #750	; 0x2ee
 8018f78:	4a04      	ldr	r2, [pc, #16]	; (8018f8c <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8018f7a:	4905      	ldr	r1, [pc, #20]	; (8018f90 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8018f7c:	4620      	mov	r0, r4
 8018f7e:	47a8      	blx	r5
    return *this;
 8018f80:	68fb      	ldr	r3, [r7, #12]
}
 8018f82:	4618      	mov	r0, r3
 8018f84:	3710      	adds	r7, #16
 8018f86:	46bd      	mov	sp, r7
 8018f88:	bdb0      	pop	{r4, r5, r7, pc}
 8018f8a:	bf00      	nop
 8018f8c:	0802580c 	.word	0x0802580c
 8018f90:	08025828 	.word	0x08025828

08018f94 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8018f94:	b5b0      	push	{r4, r5, r7, lr}
 8018f96:	b086      	sub	sp, #24
 8018f98:	af02      	add	r7, sp, #8
 8018f9a:	60f8      	str	r0, [r7, #12]
 8018f9c:	60b9      	str	r1, [r7, #8]
 8018f9e:	4639      	mov	r1, r7
 8018fa0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018fa4:	f7fa fe5a 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8018fa8:	4604      	mov	r4, r0
 8018faa:	6823      	ldr	r3, [r4, #0]
 8018fac:	3368      	adds	r3, #104	; 0x68
 8018fae:	681d      	ldr	r5, [r3, #0]
 8018fb0:	f7fa fe64 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018fb4:	4603      	mov	r3, r0
 8018fb6:	9300      	str	r3, [sp, #0]
 8018fb8:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8018fbc:	4a04      	ldr	r2, [pc, #16]	; (8018fd0 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8018fbe:	4905      	ldr	r1, [pc, #20]	; (8018fd4 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8018fc0:	4620      	mov	r0, r4
 8018fc2:	47a8      	blx	r5
    return *this;
 8018fc4:	68fb      	ldr	r3, [r7, #12]
}
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	3710      	adds	r7, #16
 8018fca:	46bd      	mov	sp, r7
 8018fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8018fce:	bf00      	nop
 8018fd0:	0802580c 	.word	0x0802580c
 8018fd4:	08025854 	.word	0x08025854

08018fd8 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 8018fd8:	b590      	push	{r4, r7, lr}
 8018fda:	b087      	sub	sp, #28
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	60f8      	str	r0, [r7, #12]
 8018fe0:	60b9      	str	r1, [r7, #8]
 8018fe2:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 8018fe6:	68b9      	ldr	r1, [r7, #8]
 8018fe8:	68f8      	ldr	r0, [r7, #12]
 8018fea:	f7ff fe15 	bl	8018c18 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	1d1c      	adds	r4, r3, #4
 8018ff2:	f107 0310 	add.w	r3, r7, #16
 8018ff6:	2106      	movs	r1, #6
 8018ff8:	ed97 0b00 	vldr	d0, [r7]
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	f7f4 fac7 	bl	800d590 <_Z10StringFromdi>
 8019002:	f107 0310 	add.w	r3, r7, #16
 8019006:	4619      	mov	r1, r3
 8019008:	4620      	mov	r0, r4
 801900a:	f7f3 fe79 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801900e:	f107 0310 	add.w	r3, r7, #16
 8019012:	4618      	mov	r0, r3
 8019014:	f7f3 fdf7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return *this;
 8019018:	68fb      	ldr	r3, [r7, #12]
}
 801901a:	4618      	mov	r0, r3
 801901c:	371c      	adds	r7, #28
 801901e:	46bd      	mov	sp, r7
 8019020:	bd90      	pop	{r4, r7, pc}

08019022 <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 8019022:	b590      	push	{r4, r7, lr}
 8019024:	b087      	sub	sp, #28
 8019026:	af00      	add	r7, sp, #0
 8019028:	60f8      	str	r0, [r7, #12]
 801902a:	60b9      	str	r1, [r7, #8]
 801902c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801902e:	68b9      	ldr	r1, [r7, #8]
 8019030:	68f8      	ldr	r0, [r7, #12]
 8019032:	f7ff fdf1 	bl	8018c18 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	1d1c      	adds	r4, r3, #4
 801903a:	f107 0310 	add.w	r3, r7, #16
 801903e:	6879      	ldr	r1, [r7, #4]
 8019040:	4618      	mov	r0, r3
 8019042:	f7f4 f86d 	bl	800d120 <_Z10StringFromPKc>
 8019046:	f107 0310 	add.w	r3, r7, #16
 801904a:	4619      	mov	r1, r3
 801904c:	4620      	mov	r0, r4
 801904e:	f7f3 fe57 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 8019052:	f107 0310 	add.w	r3, r7, #16
 8019056:	4618      	mov	r0, r3
 8019058:	f7f3 fdd5 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return *this;
 801905c:	68fb      	ldr	r3, [r7, #12]
}
 801905e:	4618      	mov	r0, r3
 8019060:	371c      	adds	r7, #28
 8019062:	46bd      	mov	sp, r7
 8019064:	bd90      	pop	{r4, r7, pc}

08019066 <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 8019066:	b590      	push	{r4, r7, lr}
 8019068:	b087      	sub	sp, #28
 801906a:	af00      	add	r7, sp, #0
 801906c:	60f8      	str	r0, [r7, #12]
 801906e:	60b9      	str	r1, [r7, #8]
 8019070:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019072:	68b9      	ldr	r1, [r7, #8]
 8019074:	68f8      	ldr	r0, [r7, #12]
 8019076:	f7ff fdcf 	bl	8018c18 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	1d1c      	adds	r4, r3, #4
 801907e:	f107 0310 	add.w	r3, r7, #16
 8019082:	6879      	ldr	r1, [r7, #4]
 8019084:	4618      	mov	r0, r3
 8019086:	f7f4 f8a9 	bl	800d1dc <_Z10StringFromPKv>
 801908a:	f107 0310 	add.w	r3, r7, #16
 801908e:	4619      	mov	r1, r3
 8019090:	4620      	mov	r0, r4
 8019092:	f7f3 fe35 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 8019096:	f107 0310 	add.w	r3, r7, #16
 801909a:	4618      	mov	r0, r3
 801909c:	f7f3 fdb3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return *this;
 80190a0:	68fb      	ldr	r3, [r7, #12]
}
 80190a2:	4618      	mov	r0, r3
 80190a4:	371c      	adds	r7, #28
 80190a6:	46bd      	mov	sp, r7
 80190a8:	bd90      	pop	{r4, r7, pc}

080190aa <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 80190aa:	b590      	push	{r4, r7, lr}
 80190ac:	b087      	sub	sp, #28
 80190ae:	af00      	add	r7, sp, #0
 80190b0:	60f8      	str	r0, [r7, #12]
 80190b2:	60b9      	str	r1, [r7, #8]
 80190b4:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80190b6:	68b9      	ldr	r1, [r7, #8]
 80190b8:	68f8      	ldr	r0, [r7, #12]
 80190ba:	f7ff fdad 	bl	8018c18 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	1d1c      	adds	r4, r3, #4
 80190c2:	f107 0310 	add.w	r3, r7, #16
 80190c6:	6879      	ldr	r1, [r7, #4]
 80190c8:	4618      	mov	r0, r3
 80190ca:	f7f4 f887 	bl	800d1dc <_Z10StringFromPKv>
 80190ce:	f107 0310 	add.w	r3, r7, #16
 80190d2:	4619      	mov	r1, r3
 80190d4:	4620      	mov	r0, r4
 80190d6:	f7f3 fe13 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 80190da:	f107 0310 	add.w	r3, r7, #16
 80190de:	4618      	mov	r0, r3
 80190e0:	f7f3 fd91 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return *this;
 80190e4:	68fb      	ldr	r3, [r7, #12]
}
 80190e6:	4618      	mov	r0, r3
 80190e8:	371c      	adds	r7, #28
 80190ea:	46bd      	mov	sp, r7
 80190ec:	bd90      	pop	{r4, r7, pc}

080190ee <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 80190ee:	b590      	push	{r4, r7, lr}
 80190f0:	b087      	sub	sp, #28
 80190f2:	af00      	add	r7, sp, #0
 80190f4:	60f8      	str	r0, [r7, #12]
 80190f6:	60b9      	str	r1, [r7, #8]
 80190f8:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80190fa:	68b9      	ldr	r1, [r7, #8]
 80190fc:	68f8      	ldr	r0, [r7, #12]
 80190fe:	f7ff fd8b 	bl	8018c18 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	1d1c      	adds	r4, r3, #4
 8019106:	f107 0310 	add.w	r3, r7, #16
 801910a:	6879      	ldr	r1, [r7, #4]
 801910c:	4618      	mov	r0, r3
 801910e:	f7f4 f88f 	bl	800d230 <_Z10StringFromPFvvE>
 8019112:	f107 0310 	add.w	r3, r7, #16
 8019116:	4619      	mov	r1, r3
 8019118:	4620      	mov	r0, r4
 801911a:	f7f3 fdf1 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801911e:	f107 0310 	add.w	r3, r7, #16
 8019122:	4618      	mov	r0, r3
 8019124:	f7f3 fd6f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return *this;
 8019128:	68fb      	ldr	r3, [r7, #12]
}
 801912a:	4618      	mov	r0, r3
 801912c:	371c      	adds	r7, #28
 801912e:	46bd      	mov	sp, r7
 8019130:	bd90      	pop	{r4, r7, pc}

08019132 <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8019132:	b590      	push	{r4, r7, lr}
 8019134:	b087      	sub	sp, #28
 8019136:	af00      	add	r7, sp, #0
 8019138:	60f8      	str	r0, [r7, #12]
 801913a:	60b9      	str	r1, [r7, #8]
 801913c:	607a      	str	r2, [r7, #4]
 801913e:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 8019140:	68b9      	ldr	r1, [r7, #8]
 8019142:	68f8      	ldr	r0, [r7, #12]
 8019144:	f7ff fd68 	bl	8018c18 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	1d1c      	adds	r4, r3, #4
 801914c:	f107 0310 	add.w	r3, r7, #16
 8019150:	683a      	ldr	r2, [r7, #0]
 8019152:	6879      	ldr	r1, [r7, #4]
 8019154:	4618      	mov	r0, r3
 8019156:	f7f4 fbaf 	bl	800d8b8 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801915a:	f107 0310 	add.w	r3, r7, #16
 801915e:	4619      	mov	r1, r3
 8019160:	4620      	mov	r0, r4
 8019162:	f7f3 fdcd 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 8019166:	f107 0310 	add.w	r3, r7, #16
 801916a:	4618      	mov	r0, r3
 801916c:	f7f3 fd4b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return *this;
 8019170:	68fb      	ldr	r3, [r7, #12]
}
 8019172:	4618      	mov	r0, r3
 8019174:	371c      	adds	r7, #28
 8019176:	46bd      	mov	sp, r7
 8019178:	bd90      	pop	{r4, r7, pc}
	...

0801917c <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 801917c:	b590      	push	{r4, r7, lr}
 801917e:	b087      	sub	sp, #28
 8019180:	af00      	add	r7, sp, #0
 8019182:	60f8      	str	r0, [r7, #12]
 8019184:	60b9      	str	r1, [r7, #8]
 8019186:	607a      	str	r2, [r7, #4]
 8019188:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	3304      	adds	r3, #4
 801918e:	4913      	ldr	r1, [pc, #76]	; (80191dc <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 8019190:	4618      	mov	r0, r3
 8019192:	f7f3 fdc7 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	3304      	adds	r3, #4
 801919a:	68b9      	ldr	r1, [r7, #8]
 801919c:	4618      	mov	r0, r3
 801919e:	f7f3 fdaf 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 80191a2:	6879      	ldr	r1, [r7, #4]
 80191a4:	68f8      	ldr	r0, [r7, #12]
 80191a6:	f7ff fd37 	bl	8018c18 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	1d1c      	adds	r4, r3, #4
 80191ae:	f107 0310 	add.w	r3, r7, #16
 80191b2:	6839      	ldr	r1, [r7, #0]
 80191b4:	4618      	mov	r0, r3
 80191b6:	f7f4 f811 	bl	800d1dc <_Z10StringFromPKv>
 80191ba:	f107 0310 	add.w	r3, r7, #16
 80191be:	4619      	mov	r1, r3
 80191c0:	4620      	mov	r0, r4
 80191c2:	f7f3 fd9d 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 80191c6:	f107 0310 	add.w	r3, r7, #16
 80191ca:	4618      	mov	r0, r3
 80191cc:	f7f3 fd1b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return *this;
 80191d0:	68fb      	ldr	r3, [r7, #12]
}
 80191d2:	4618      	mov	r0, r3
 80191d4:	371c      	adds	r7, #28
 80191d6:	46bd      	mov	sp, r7
 80191d8:	bd90      	pop	{r4, r7, pc}
 80191da:	bf00      	nop
 80191dc:	08025920 	.word	0x08025920

080191e0 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 80191e0:	b590      	push	{r4, r7, lr}
 80191e2:	b087      	sub	sp, #28
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	60f8      	str	r0, [r7, #12]
 80191e8:	60b9      	str	r1, [r7, #8]
 80191ea:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80191ec:	68b9      	ldr	r1, [r7, #8]
 80191ee:	68f8      	ldr	r0, [r7, #12]
 80191f0:	f7ff fd12 	bl	8018c18 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	1d1c      	adds	r4, r3, #4
 80191f8:	f107 0310 	add.w	r3, r7, #16
 80191fc:	6879      	ldr	r1, [r7, #4]
 80191fe:	4618      	mov	r0, r3
 8019200:	f7f3 ffec 	bl	800d1dc <_Z10StringFromPKv>
 8019204:	f107 0310 	add.w	r3, r7, #16
 8019208:	4619      	mov	r1, r3
 801920a:	4620      	mov	r0, r4
 801920c:	f7f3 fd78 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 8019210:	f107 0310 	add.w	r3, r7, #16
 8019214:	4618      	mov	r0, r3
 8019216:	f7f3 fcf6 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return *this;
 801921a:	68fb      	ldr	r3, [r7, #12]
}
 801921c:	4618      	mov	r0, r3
 801921e:	371c      	adds	r7, #28
 8019220:	46bd      	mov	sp, r7
 8019222:	bd90      	pop	{r4, r7, pc}

08019224 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 8019224:	b590      	push	{r4, r7, lr}
 8019226:	b087      	sub	sp, #28
 8019228:	af00      	add	r7, sp, #0
 801922a:	60f8      	str	r0, [r7, #12]
 801922c:	60b9      	str	r1, [r7, #8]
 801922e:	607a      	str	r2, [r7, #4]
 8019230:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	3304      	adds	r3, #4
 8019236:	4913      	ldr	r1, [pc, #76]	; (8019284 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 8019238:	4618      	mov	r0, r3
 801923a:	f7f3 fd73 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	3304      	adds	r3, #4
 8019242:	68b9      	ldr	r1, [r7, #8]
 8019244:	4618      	mov	r0, r3
 8019246:	f7f3 fd5b 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801924a:	6879      	ldr	r1, [r7, #4]
 801924c:	68f8      	ldr	r0, [r7, #12]
 801924e:	f7ff fce3 	bl	8018c18 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	1d1c      	adds	r4, r3, #4
 8019256:	f107 0310 	add.w	r3, r7, #16
 801925a:	6839      	ldr	r1, [r7, #0]
 801925c:	4618      	mov	r0, r3
 801925e:	f7f3 ffbd 	bl	800d1dc <_Z10StringFromPKv>
 8019262:	f107 0310 	add.w	r3, r7, #16
 8019266:	4619      	mov	r1, r3
 8019268:	4620      	mov	r0, r4
 801926a:	f7f3 fd49 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801926e:	f107 0310 	add.w	r3, r7, #16
 8019272:	4618      	mov	r0, r3
 8019274:	f7f3 fcc7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return *this;
 8019278:	68fb      	ldr	r3, [r7, #12]
}
 801927a:	4618      	mov	r0, r3
 801927c:	371c      	adds	r7, #28
 801927e:	46bd      	mov	sp, r7
 8019280:	bd90      	pop	{r4, r7, pc}
 8019282:	bf00      	nop
 8019284:	08025920 	.word	0x08025920

08019288 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 8019288:	b480      	push	{r7}
 801928a:	b083      	sub	sp, #12
 801928c:	af00      	add	r7, sp, #0
 801928e:	6078      	str	r0, [r7, #4]
    return false;
 8019290:	2300      	movs	r3, #0
}
 8019292:	4618      	mov	r0, r3
 8019294:	370c      	adds	r7, #12
 8019296:	46bd      	mov	sp, r7
 8019298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801929c:	4770      	bx	lr
	...

080192a0 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b084      	sub	sp, #16
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	6078      	str	r0, [r7, #4]
 80192a8:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 80192aa:	f107 0308 	add.w	r3, r7, #8
 80192ae:	4909      	ldr	r1, [pc, #36]	; (80192d4 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 80192b0:	4618      	mov	r0, r3
 80192b2:	f7f3 f8f0 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 80192b6:	f107 0308 	add.w	r3, r7, #8
 80192ba:	4619      	mov	r1, r3
 80192bc:	6878      	ldr	r0, [r7, #4]
 80192be:	f003 fe0f 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
 80192c2:	f107 0308 	add.w	r3, r7, #8
 80192c6:	4618      	mov	r0, r3
 80192c8:	f7f3 fc9d 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 80192cc:	6878      	ldr	r0, [r7, #4]
 80192ce:	3710      	adds	r7, #16
 80192d0:	46bd      	mov	sp, r7
 80192d2:	bd80      	pop	{r7, pc}
 80192d4:	080257f4 	.word	0x080257f4

080192d8 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 80192d8:	b480      	push	{r7}
 80192da:	b083      	sub	sp, #12
 80192dc:	af00      	add	r7, sp, #0
 80192de:	6078      	str	r0, [r7, #4]
    return 0;
 80192e0:	2300      	movs	r3, #0
}
 80192e2:	4618      	mov	r0, r3
 80192e4:	370c      	adds	r7, #12
 80192e6:	46bd      	mov	sp, r7
 80192e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ec:	4770      	bx	lr

080192ee <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 80192ee:	b480      	push	{r7}
 80192f0:	b083      	sub	sp, #12
 80192f2:	af00      	add	r7, sp, #0
 80192f4:	6078      	str	r0, [r7, #4]
    return 0;
 80192f6:	2300      	movs	r3, #0
}
 80192f8:	4618      	mov	r0, r3
 80192fa:	370c      	adds	r7, #12
 80192fc:	46bd      	mov	sp, r7
 80192fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019302:	4770      	bx	lr

08019304 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 8019304:	b480      	push	{r7}
 8019306:	b083      	sub	sp, #12
 8019308:	af00      	add	r7, sp, #0
 801930a:	6078      	str	r0, [r7, #4]
 801930c:	6039      	str	r1, [r7, #0]
    return 0;
 801930e:	2300      	movs	r3, #0
}
 8019310:	4618      	mov	r0, r3
 8019312:	370c      	adds	r7, #12
 8019314:	46bd      	mov	sp, r7
 8019316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801931a:	4770      	bx	lr

0801931c <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 801931c:	b480      	push	{r7}
 801931e:	b083      	sub	sp, #12
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
 8019324:	6039      	str	r1, [r7, #0]
    return 0;
 8019326:	2300      	movs	r3, #0
}
 8019328:	4618      	mov	r0, r3
 801932a:	370c      	adds	r7, #12
 801932c:	46bd      	mov	sp, r7
 801932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019332:	4770      	bx	lr

08019334 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 8019334:	b5b0      	push	{r4, r5, r7, lr}
 8019336:	b084      	sub	sp, #16
 8019338:	af02      	add	r7, sp, #8
 801933a:	6078      	str	r0, [r7, #4]
 801933c:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801933e:	f7fa fc8d 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8019342:	4604      	mov	r4, r0
 8019344:	6823      	ldr	r3, [r4, #0]
 8019346:	3368      	adds	r3, #104	; 0x68
 8019348:	681d      	ldr	r5, [r3, #0]
 801934a:	f7fa fc97 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801934e:	4603      	mov	r3, r0
 8019350:	9300      	str	r3, [sp, #0]
 8019352:	f240 3375 	movw	r3, #885	; 0x375
 8019356:	4a06      	ldr	r2, [pc, #24]	; (8019370 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 8019358:	4906      	ldr	r1, [pc, #24]	; (8019374 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 801935a:	4620      	mov	r0, r4
 801935c:	47a8      	blx	r5
    return cpputest_longlong(0);
 801935e:	2100      	movs	r1, #0
 8019360:	6878      	ldr	r0, [r7, #4]
 8019362:	f7f1 f8cf 	bl	800a504 <_ZN17cpputest_longlongC1Ei>
}
 8019366:	6878      	ldr	r0, [r7, #4]
 8019368:	3708      	adds	r7, #8
 801936a:	46bd      	mov	sp, r7
 801936c:	bdb0      	pop	{r4, r5, r7, pc}
 801936e:	bf00      	nop
 8019370:	0802580c 	.word	0x0802580c
 8019374:	08025854 	.word	0x08025854

08019378 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 8019378:	b5b0      	push	{r4, r5, r7, lr}
 801937a:	b084      	sub	sp, #16
 801937c:	af02      	add	r7, sp, #8
 801937e:	6078      	str	r0, [r7, #4]
 8019380:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8019382:	f7fa fc6b 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8019386:	4604      	mov	r4, r0
 8019388:	6823      	ldr	r3, [r4, #0]
 801938a:	3368      	adds	r3, #104	; 0x68
 801938c:	681d      	ldr	r5, [r3, #0]
 801938e:	f7fa fc75 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019392:	4603      	mov	r3, r0
 8019394:	9300      	str	r3, [sp, #0]
 8019396:	f240 337b 	movw	r3, #891	; 0x37b
 801939a:	4a06      	ldr	r2, [pc, #24]	; (80193b4 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 801939c:	4906      	ldr	r1, [pc, #24]	; (80193b8 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 801939e:	4620      	mov	r0, r4
 80193a0:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 80193a2:	2100      	movs	r1, #0
 80193a4:	6878      	ldr	r0, [r7, #4]
 80193a6:	f7f1 f8b9 	bl	800a51c <_ZN18cpputest_ulonglongC1Ei>
}
 80193aa:	6878      	ldr	r0, [r7, #4]
 80193ac:	3708      	adds	r7, #8
 80193ae:	46bd      	mov	sp, r7
 80193b0:	bdb0      	pop	{r4, r5, r7, pc}
 80193b2:	bf00      	nop
 80193b4:	0802580c 	.word	0x0802580c
 80193b8:	08025828 	.word	0x08025828

080193bc <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 80193bc:	b5b0      	push	{r4, r5, r7, lr}
 80193be:	b086      	sub	sp, #24
 80193c0:	af02      	add	r7, sp, #8
 80193c2:	60f8      	str	r0, [r7, #12]
 80193c4:	60b9      	str	r1, [r7, #8]
 80193c6:	4639      	mov	r1, r7
 80193c8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80193cc:	f7fa fc46 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 80193d0:	4604      	mov	r4, r0
 80193d2:	6823      	ldr	r3, [r4, #0]
 80193d4:	3368      	adds	r3, #104	; 0x68
 80193d6:	681d      	ldr	r5, [r3, #0]
 80193d8:	f7fa fc50 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80193dc:	4603      	mov	r3, r0
 80193de:	9300      	str	r3, [sp, #0]
 80193e0:	f240 3381 	movw	r3, #897	; 0x381
 80193e4:	4a05      	ldr	r2, [pc, #20]	; (80193fc <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 80193e6:	4906      	ldr	r1, [pc, #24]	; (8019400 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 80193e8:	4620      	mov	r0, r4
 80193ea:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 80193ec:	2100      	movs	r1, #0
 80193ee:	68f8      	ldr	r0, [r7, #12]
 80193f0:	f7f1 f894 	bl	800a51c <_ZN18cpputest_ulonglongC1Ei>
}
 80193f4:	68f8      	ldr	r0, [r7, #12]
 80193f6:	3710      	adds	r7, #16
 80193f8:	46bd      	mov	sp, r7
 80193fa:	bdb0      	pop	{r4, r5, r7, pc}
 80193fc:	0802580c 	.word	0x0802580c
 8019400:	08025828 	.word	0x08025828

08019404 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 8019404:	b5b0      	push	{r4, r5, r7, lr}
 8019406:	b086      	sub	sp, #24
 8019408:	af02      	add	r7, sp, #8
 801940a:	60f8      	str	r0, [r7, #12]
 801940c:	60b9      	str	r1, [r7, #8]
 801940e:	4639      	mov	r1, r7
 8019410:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8019414:	f7fa fc22 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 8019418:	4604      	mov	r4, r0
 801941a:	6823      	ldr	r3, [r4, #0]
 801941c:	3368      	adds	r3, #104	; 0x68
 801941e:	681d      	ldr	r5, [r3, #0]
 8019420:	f7fa fc2c 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019424:	4603      	mov	r3, r0
 8019426:	9300      	str	r3, [sp, #0]
 8019428:	f240 3387 	movw	r3, #903	; 0x387
 801942c:	4a05      	ldr	r2, [pc, #20]	; (8019444 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 801942e:	4906      	ldr	r1, [pc, #24]	; (8019448 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8019430:	4620      	mov	r0, r4
 8019432:	47a8      	blx	r5
    return cpputest_longlong(0);
 8019434:	2100      	movs	r1, #0
 8019436:	68f8      	ldr	r0, [r7, #12]
 8019438:	f7f1 f864 	bl	800a504 <_ZN17cpputest_longlongC1Ei>
}
 801943c:	68f8      	ldr	r0, [r7, #12]
 801943e:	3710      	adds	r7, #16
 8019440:	46bd      	mov	sp, r7
 8019442:	bdb0      	pop	{r4, r5, r7, pc}
 8019444:	0802580c 	.word	0x0802580c
 8019448:	08025854 	.word	0x08025854

0801944c <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 801944c:	b480      	push	{r7}
 801944e:	b083      	sub	sp, #12
 8019450:	af00      	add	r7, sp, #0
 8019452:	6078      	str	r0, [r7, #4]
    return false;
 8019454:	2300      	movs	r3, #0
}
 8019456:	4618      	mov	r0, r3
 8019458:	370c      	adds	r7, #12
 801945a:	46bd      	mov	sp, r7
 801945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019460:	4770      	bx	lr

08019462 <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 8019462:	b480      	push	{r7}
 8019464:	b083      	sub	sp, #12
 8019466:	af00      	add	r7, sp, #0
 8019468:	6078      	str	r0, [r7, #4]
 801946a:	460b      	mov	r3, r1
 801946c:	70fb      	strb	r3, [r7, #3]
    return false;
 801946e:	2300      	movs	r3, #0
}
 8019470:	4618      	mov	r0, r3
 8019472:	370c      	adds	r7, #12
 8019474:	46bd      	mov	sp, r7
 8019476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801947a:	4770      	bx	lr

0801947c <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 801947c:	b480      	push	{r7}
 801947e:	b083      	sub	sp, #12
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
    return 0;
 8019484:	2300      	movs	r3, #0
}
 8019486:	4618      	mov	r0, r3
 8019488:	370c      	adds	r7, #12
 801948a:	46bd      	mov	sp, r7
 801948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019490:	4770      	bx	lr

08019492 <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 8019492:	b480      	push	{r7}
 8019494:	b083      	sub	sp, #12
 8019496:	af00      	add	r7, sp, #0
 8019498:	6078      	str	r0, [r7, #4]
    return 0.0;
 801949a:	f04f 0200 	mov.w	r2, #0
 801949e:	f04f 0300 	mov.w	r3, #0
 80194a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80194a6:	eeb0 0a47 	vmov.f32	s0, s14
 80194aa:	eef0 0a67 	vmov.f32	s1, s15
 80194ae:	370c      	adds	r7, #12
 80194b0:	46bd      	mov	sp, r7
 80194b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b6:	4770      	bx	lr

080194b8 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 80194b8:	b580      	push	{r7, lr}
 80194ba:	b084      	sub	sp, #16
 80194bc:	af00      	add	r7, sp, #0
 80194be:	60f8      	str	r0, [r7, #12]
 80194c0:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	3398      	adds	r3, #152	; 0x98
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	68f8      	ldr	r0, [r7, #12]
 80194ce:	4798      	blx	r3
 80194d0:	eeb0 7a40 	vmov.f32	s14, s0
 80194d4:	eef0 7a60 	vmov.f32	s15, s1
}
 80194d8:	eeb0 0a47 	vmov.f32	s0, s14
 80194dc:	eef0 0a67 	vmov.f32	s1, s15
 80194e0:	3710      	adds	r7, #16
 80194e2:	46bd      	mov	sp, r7
 80194e4:	bd80      	pop	{r7, pc}

080194e6 <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 80194e6:	b480      	push	{r7}
 80194e8:	b083      	sub	sp, #12
 80194ea:	af00      	add	r7, sp, #0
 80194ec:	6078      	str	r0, [r7, #4]
    return 0;
 80194ee:	2300      	movs	r3, #0
}
 80194f0:	4618      	mov	r0, r3
 80194f2:	370c      	adds	r7, #12
 80194f4:	46bd      	mov	sp, r7
 80194f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194fa:	4770      	bx	lr

080194fc <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 80194fc:	b480      	push	{r7}
 80194fe:	b083      	sub	sp, #12
 8019500:	af00      	add	r7, sp, #0
 8019502:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8019504:	2300      	movs	r3, #0
}
 8019506:	4618      	mov	r0, r3
 8019508:	370c      	adds	r7, #12
 801950a:	46bd      	mov	sp, r7
 801950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019510:	4770      	bx	lr

08019512 <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 8019512:	b480      	push	{r7}
 8019514:	b083      	sub	sp, #12
 8019516:	af00      	add	r7, sp, #0
 8019518:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801951a:	2300      	movs	r3, #0
}
 801951c:	4618      	mov	r0, r3
 801951e:	370c      	adds	r7, #12
 8019520:	46bd      	mov	sp, r7
 8019522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019526:	4770      	bx	lr

08019528 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 8019528:	b480      	push	{r7}
 801952a:	b083      	sub	sp, #12
 801952c:	af00      	add	r7, sp, #0
 801952e:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8019530:	2300      	movs	r3, #0
}
 8019532:	4618      	mov	r0, r3
 8019534:	370c      	adds	r7, #12
 8019536:	46bd      	mov	sp, r7
 8019538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801953c:	4770      	bx	lr

0801953e <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 801953e:	b580      	push	{r7, lr}
 8019540:	b082      	sub	sp, #8
 8019542:	af00      	add	r7, sp, #0
 8019544:	6078      	str	r0, [r7, #4]
 8019546:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	33a8      	adds	r3, #168	; 0xa8
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	6878      	ldr	r0, [r7, #4]
 8019552:	4798      	blx	r3
 8019554:	4603      	mov	r3, r0
}
 8019556:	4618      	mov	r0, r3
 8019558:	3708      	adds	r7, #8
 801955a:	46bd      	mov	sp, r7
 801955c:	bd80      	pop	{r7, pc}

0801955e <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 801955e:	b580      	push	{r7, lr}
 8019560:	b082      	sub	sp, #8
 8019562:	af00      	add	r7, sp, #0
 8019564:	6078      	str	r0, [r7, #4]
 8019566:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	33a0      	adds	r3, #160	; 0xa0
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	6878      	ldr	r0, [r7, #4]
 8019572:	4798      	blx	r3
 8019574:	4603      	mov	r3, r0
}
 8019576:	4618      	mov	r0, r3
 8019578:	3708      	adds	r7, #8
 801957a:	46bd      	mov	sp, r7
 801957c:	bd80      	pop	{r7, pc}

0801957e <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 801957e:	b580      	push	{r7, lr}
 8019580:	b082      	sub	sp, #8
 8019582:	af00      	add	r7, sp, #0
 8019584:	6078      	str	r0, [r7, #4]
 8019586:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	33b0      	adds	r3, #176	; 0xb0
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	6878      	ldr	r0, [r7, #4]
 8019592:	4798      	blx	r3
 8019594:	4603      	mov	r3, r0
}
 8019596:	4618      	mov	r0, r3
 8019598:	3708      	adds	r7, #8
 801959a:	46bd      	mov	sp, r7
 801959c:	bd80      	pop	{r7, pc}
	...

080195a0 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 80195a0:	b480      	push	{r7}
 80195a2:	b083      	sub	sp, #12
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	6078      	str	r0, [r7, #4]
    return "";
 80195a8:	4b03      	ldr	r3, [pc, #12]	; (80195b8 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 80195aa:	4618      	mov	r0, r3
 80195ac:	370c      	adds	r7, #12
 80195ae:	46bd      	mov	sp, r7
 80195b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b4:	4770      	bx	lr
 80195b6:	bf00      	nop
 80195b8:	080257f4 	.word	0x080257f4

080195bc <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 80195bc:	b580      	push	{r7, lr}
 80195be:	b082      	sub	sp, #8
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	6078      	str	r0, [r7, #4]
 80195c4:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	3394      	adds	r3, #148	; 0x94
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	6878      	ldr	r0, [r7, #4]
 80195d0:	4798      	blx	r3
 80195d2:	4603      	mov	r3, r0
}
 80195d4:	4618      	mov	r0, r3
 80195d6:	3708      	adds	r7, #8
 80195d8:	46bd      	mov	sp, r7
 80195da:	bd80      	pop	{r7, pc}

080195dc <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 80195dc:	b480      	push	{r7}
 80195de:	b083      	sub	sp, #12
 80195e0:	af00      	add	r7, sp, #0
 80195e2:	6078      	str	r0, [r7, #4]
 80195e4:	6039      	str	r1, [r7, #0]
    return 0;
 80195e6:	2300      	movs	r3, #0
}
 80195e8:	4618      	mov	r0, r3
 80195ea:	370c      	adds	r7, #12
 80195ec:	46bd      	mov	sp, r7
 80195ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f2:	4770      	bx	lr

080195f4 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 80195f4:	b580      	push	{r7, lr}
 80195f6:	b082      	sub	sp, #8
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	6078      	str	r0, [r7, #4]
 80195fc:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	3388      	adds	r3, #136	; 0x88
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	6878      	ldr	r0, [r7, #4]
 8019608:	4798      	blx	r3
 801960a:	4603      	mov	r3, r0
}
 801960c:	4618      	mov	r0, r3
 801960e:	3708      	adds	r7, #8
 8019610:	46bd      	mov	sp, r7
 8019612:	bd80      	pop	{r7, pc}

08019614 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 8019614:	b590      	push	{r4, r7, lr}
 8019616:	b085      	sub	sp, #20
 8019618:	af00      	add	r7, sp, #0
 801961a:	6078      	str	r0, [r7, #4]
 801961c:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	3304      	adds	r3, #4
 8019622:	490e      	ldr	r1, [pc, #56]	; (801965c <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 8019624:	4618      	mov	r0, r3
 8019626:	f7f3 fb7d 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	1d1c      	adds	r4, r3, #4
 801962e:	f107 0308 	add.w	r3, r7, #8
 8019632:	6839      	ldr	r1, [r7, #0]
 8019634:	4618      	mov	r0, r3
 8019636:	f7f3 fdd1 	bl	800d1dc <_Z10StringFromPKv>
 801963a:	f107 0308 	add.w	r3, r7, #8
 801963e:	4619      	mov	r1, r3
 8019640:	4620      	mov	r0, r4
 8019642:	f7f3 fb5d 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 8019646:	f107 0308 	add.w	r3, r7, #8
 801964a:	4618      	mov	r0, r3
 801964c:	f7f3 fadb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return *this;
 8019650:	687b      	ldr	r3, [r7, #4]
}
 8019652:	4618      	mov	r0, r3
 8019654:	3714      	adds	r7, #20
 8019656:	46bd      	mov	sp, r7
 8019658:	bd90      	pop	{r4, r7, pc}
 801965a:	bf00      	nop
 801965c:	08025928 	.word	0x08025928

08019660 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 8019660:	b598      	push	{r3, r4, r7, lr}
 8019662:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 8019664:	4b09      	ldr	r3, [pc, #36]	; (801968c <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d10b      	bne.n	8019684 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 801966c:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8019670:	4907      	ldr	r1, [pc, #28]	; (8019690 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 8019672:	200c      	movs	r0, #12
 8019674:	f7f0 fb4c 	bl	8009d10 <_ZnwjPKci>
 8019678:	4604      	mov	r4, r0
 801967a:	4620      	mov	r0, r4
 801967c:	f7ff fa4c 	bl	8018b18 <_ZN19MockActualCallTraceC1Ev>
 8019680:	4b02      	ldr	r3, [pc, #8]	; (801968c <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019682:	601c      	str	r4, [r3, #0]
    return *instance_;
 8019684:	4b01      	ldr	r3, [pc, #4]	; (801968c <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019686:	681b      	ldr	r3, [r3, #0]
}
 8019688:	4618      	mov	r0, r3
 801968a:	bd98      	pop	{r3, r4, r7, pc}
 801968c:	20000eb0 	.word	0x20000eb0
 8019690:	0802580c 	.word	0x0802580c

08019694 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 8019694:	b580      	push	{r7, lr}
 8019696:	af00      	add	r7, sp, #0
    delete instance_;
 8019698:	4b06      	ldr	r3, [pc, #24]	; (80196b4 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	2b00      	cmp	r3, #0
 801969e:	d004      	beq.n	80196aa <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 80196a0:	681a      	ldr	r2, [r3, #0]
 80196a2:	3204      	adds	r2, #4
 80196a4:	6812      	ldr	r2, [r2, #0]
 80196a6:	4618      	mov	r0, r3
 80196a8:	4790      	blx	r2
    instance_ = NULLPTR;
 80196aa:	4b02      	ldr	r3, [pc, #8]	; (80196b4 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 80196ac:	2200      	movs	r2, #0
 80196ae:	601a      	str	r2, [r3, #0]
}
 80196b0:	bf00      	nop
 80196b2:	bd80      	pop	{r7, pc}
 80196b4:	20000eb0 	.word	0x20000eb0

080196b8 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 80196b8:	b580      	push	{r7, lr}
 80196ba:	b082      	sub	sp, #8
 80196bc:	af00      	add	r7, sp, #0
 80196be:	6078      	str	r0, [r7, #4]
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	4618      	mov	r0, r3
 80196c4:	f7fd fe9a 	bl	80173fc <_ZN14MockActualCallC1Ev>
 80196c8:	4a03      	ldr	r2, [pc, #12]	; (80196d8 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	601a      	str	r2, [r3, #0]
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	4618      	mov	r0, r3
 80196d2:	3708      	adds	r7, #8
 80196d4:	46bd      	mov	sp, r7
 80196d6:	bd80      	pop	{r7, pc}
 80196d8:	08028574 	.word	0x08028574

080196dc <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 80196dc:	b580      	push	{r7, lr}
 80196de:	af00      	add	r7, sp, #0
 80196e0:	4801      	ldr	r0, [pc, #4]	; (80196e8 <__tcf_0+0xc>)
 80196e2:	f000 f831 	bl	8019748 <_ZN21MockIgnoredActualCallD1Ev>
 80196e6:	bd80      	pop	{r7, pc}
 80196e8:	20000eb4 	.word	0x20000eb4

080196ec <_ZN21MockIgnoredActualCall8instanceEv>:
{
 80196ec:	b580      	push	{r7, lr}
 80196ee:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 80196f0:	4b12      	ldr	r3, [pc, #72]	; (801973c <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 80196f2:	781b      	ldrb	r3, [r3, #0]
 80196f4:	f3bf 8f5b 	dmb	ish
 80196f8:	b2db      	uxtb	r3, r3
 80196fa:	f003 0301 	and.w	r3, r3, #1
 80196fe:	2b00      	cmp	r3, #0
 8019700:	bf0c      	ite	eq
 8019702:	2301      	moveq	r3, #1
 8019704:	2300      	movne	r3, #0
 8019706:	b2db      	uxtb	r3, r3
 8019708:	2b00      	cmp	r3, #0
 801970a:	d013      	beq.n	8019734 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801970c:	480b      	ldr	r0, [pc, #44]	; (801973c <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801970e:	f005 fd83 	bl	801f218 <__cxa_guard_acquire>
 8019712:	4603      	mov	r3, r0
 8019714:	2b00      	cmp	r3, #0
 8019716:	bf14      	ite	ne
 8019718:	2301      	movne	r3, #1
 801971a:	2300      	moveq	r3, #0
 801971c:	b2db      	uxtb	r3, r3
 801971e:	2b00      	cmp	r3, #0
 8019720:	d008      	beq.n	8019734 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8019722:	4807      	ldr	r0, [pc, #28]	; (8019740 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 8019724:	f7ff ffc8 	bl	80196b8 <_ZN21MockIgnoredActualCallC1Ev>
 8019728:	4804      	ldr	r0, [pc, #16]	; (801973c <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801972a:	f005 fd81 	bl	801f230 <__cxa_guard_release>
 801972e:	4805      	ldr	r0, [pc, #20]	; (8019744 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 8019730:	f005 fda5 	bl	801f27e <atexit>
    return call;
 8019734:	4b02      	ldr	r3, [pc, #8]	; (8019740 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 8019736:	4618      	mov	r0, r3
 8019738:	bd80      	pop	{r7, pc}
 801973a:	bf00      	nop
 801973c:	20000eb8 	.word	0x20000eb8
 8019740:	20000eb4 	.word	0x20000eb4
 8019744:	080196dd 	.word	0x080196dd

08019748 <_ZN21MockIgnoredActualCallD1Ev>:
 8019748:	b580      	push	{r7, lr}
 801974a:	b082      	sub	sp, #8
 801974c:	af00      	add	r7, sp, #0
 801974e:	6078      	str	r0, [r7, #4]
 8019750:	4a05      	ldr	r2, [pc, #20]	; (8019768 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	601a      	str	r2, [r3, #0]
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	4618      	mov	r0, r3
 801975a:	f7fd fe5f 	bl	801741c <_ZN14MockActualCallD1Ev>
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	4618      	mov	r0, r3
 8019762:	3708      	adds	r7, #8
 8019764:	46bd      	mov	sp, r7
 8019766:	bd80      	pop	{r7, pc}
 8019768:	08028574 	.word	0x08028574

0801976c <_ZN21MockIgnoredActualCallD0Ev>:
 801976c:	b580      	push	{r7, lr}
 801976e:	b082      	sub	sp, #8
 8019770:	af00      	add	r7, sp, #0
 8019772:	6078      	str	r0, [r7, #4]
 8019774:	6878      	ldr	r0, [r7, #4]
 8019776:	f7ff ffe7 	bl	8019748 <_ZN21MockIgnoredActualCallD1Ev>
 801977a:	2104      	movs	r1, #4
 801977c:	6878      	ldr	r0, [r7, #4]
 801977e:	f7f0 fadb 	bl	8009d38 <_ZdlPvj>
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	4618      	mov	r0, r3
 8019786:	3708      	adds	r7, #8
 8019788:	46bd      	mov	sp, r7
 801978a:	bd80      	pop	{r7, pc}

0801978c <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 801978c:	b580      	push	{r7, lr}
 801978e:	b082      	sub	sp, #8
 8019790:	af00      	add	r7, sp, #0
 8019792:	6078      	str	r0, [r7, #4]
 8019794:	4a05      	ldr	r2, [pc, #20]	; (80197ac <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	601a      	str	r2, [r3, #0]
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	4618      	mov	r0, r3
 801979e:	f7f0 fefd 	bl	800a59c <_ZN11MockFailureD1Ev>
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	4618      	mov	r0, r3
 80197a6:	3708      	adds	r7, #8
 80197a8:	46bd      	mov	sp, r7
 80197aa:	bd80      	pop	{r7, pc}
 80197ac:	0802846c 	.word	0x0802846c

080197b0 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 80197b0:	b580      	push	{r7, lr}
 80197b2:	b082      	sub	sp, #8
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	6078      	str	r0, [r7, #4]
 80197b8:	6878      	ldr	r0, [r7, #4]
 80197ba:	f7ff ffe7 	bl	801978c <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 80197be:	2134      	movs	r1, #52	; 0x34
 80197c0:	6878      	ldr	r0, [r7, #4]
 80197c2:	f7f0 fab9 	bl	8009d38 <_ZdlPvj>
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	4618      	mov	r0, r3
 80197ca:	3708      	adds	r7, #8
 80197cc:	46bd      	mov	sp, r7
 80197ce:	bd80      	pop	{r7, pc}

080197d0 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 80197d0:	b580      	push	{r7, lr}
 80197d2:	b082      	sub	sp, #8
 80197d4:	af00      	add	r7, sp, #0
 80197d6:	6078      	str	r0, [r7, #4]
 80197d8:	4a05      	ldr	r2, [pc, #20]	; (80197f0 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	601a      	str	r2, [r3, #0]
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	4618      	mov	r0, r3
 80197e2:	f7f0 fedb 	bl	800a59c <_ZN11MockFailureD1Ev>
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	4618      	mov	r0, r3
 80197ea:	3708      	adds	r7, #8
 80197ec:	46bd      	mov	sp, r7
 80197ee:	bd80      	pop	{r7, pc}
 80197f0:	08028548 	.word	0x08028548

080197f4 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 80197f4:	b580      	push	{r7, lr}
 80197f6:	b082      	sub	sp, #8
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
 80197fc:	6878      	ldr	r0, [r7, #4]
 80197fe:	f7ff ffe7 	bl	80197d0 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8019802:	2134      	movs	r1, #52	; 0x34
 8019804:	6878      	ldr	r0, [r7, #4]
 8019806:	f7f0 fa97 	bl	8009d38 <_ZdlPvj>
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	4618      	mov	r0, r3
 801980e:	3708      	adds	r7, #8
 8019810:	46bd      	mov	sp, r7
 8019812:	bd80      	pop	{r7, pc}

08019814 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 8019814:	b580      	push	{r7, lr}
 8019816:	b082      	sub	sp, #8
 8019818:	af00      	add	r7, sp, #0
 801981a:	6078      	str	r0, [r7, #4]
 801981c:	4a05      	ldr	r2, [pc, #20]	; (8019834 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	601a      	str	r2, [r3, #0]
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	4618      	mov	r0, r3
 8019826:	f7f0 feb9 	bl	800a59c <_ZN11MockFailureD1Ev>
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	4618      	mov	r0, r3
 801982e:	3708      	adds	r7, #8
 8019830:	46bd      	mov	sp, r7
 8019832:	bd80      	pop	{r7, pc}
 8019834:	0802851c 	.word	0x0802851c

08019838 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 8019838:	b580      	push	{r7, lr}
 801983a:	b082      	sub	sp, #8
 801983c:	af00      	add	r7, sp, #0
 801983e:	6078      	str	r0, [r7, #4]
 8019840:	6878      	ldr	r0, [r7, #4]
 8019842:	f7ff ffe7 	bl	8019814 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8019846:	2134      	movs	r1, #52	; 0x34
 8019848:	6878      	ldr	r0, [r7, #4]
 801984a:	f7f0 fa75 	bl	8009d38 <_ZdlPvj>
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	4618      	mov	r0, r3
 8019852:	3708      	adds	r7, #8
 8019854:	46bd      	mov	sp, r7
 8019856:	bd80      	pop	{r7, pc}

08019858 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 8019858:	b580      	push	{r7, lr}
 801985a:	b082      	sub	sp, #8
 801985c:	af00      	add	r7, sp, #0
 801985e:	6078      	str	r0, [r7, #4]
 8019860:	4a05      	ldr	r2, [pc, #20]	; (8019878 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	601a      	str	r2, [r3, #0]
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	4618      	mov	r0, r3
 801986a:	f7f0 fe97 	bl	800a59c <_ZN11MockFailureD1Ev>
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	4618      	mov	r0, r3
 8019872:	3708      	adds	r7, #8
 8019874:	46bd      	mov	sp, r7
 8019876:	bd80      	pop	{r7, pc}
 8019878:	080284f0 	.word	0x080284f0

0801987c <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 801987c:	b580      	push	{r7, lr}
 801987e:	b082      	sub	sp, #8
 8019880:	af00      	add	r7, sp, #0
 8019882:	6078      	str	r0, [r7, #4]
 8019884:	6878      	ldr	r0, [r7, #4]
 8019886:	f7ff ffe7 	bl	8019858 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801988a:	2134      	movs	r1, #52	; 0x34
 801988c:	6878      	ldr	r0, [r7, #4]
 801988e:	f7f0 fa53 	bl	8009d38 <_ZdlPvj>
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	4618      	mov	r0, r3
 8019896:	3708      	adds	r7, #8
 8019898:	46bd      	mov	sp, r7
 801989a:	bd80      	pop	{r7, pc}

0801989c <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 801989c:	b580      	push	{r7, lr}
 801989e:	b082      	sub	sp, #8
 80198a0:	af00      	add	r7, sp, #0
 80198a2:	6078      	str	r0, [r7, #4]
 80198a4:	4a05      	ldr	r2, [pc, #20]	; (80198bc <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	601a      	str	r2, [r3, #0]
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	4618      	mov	r0, r3
 80198ae:	f7f0 fe75 	bl	800a59c <_ZN11MockFailureD1Ev>
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	4618      	mov	r0, r3
 80198b6:	3708      	adds	r7, #8
 80198b8:	46bd      	mov	sp, r7
 80198ba:	bd80      	pop	{r7, pc}
 80198bc:	08028498 	.word	0x08028498

080198c0 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b082      	sub	sp, #8
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	6078      	str	r0, [r7, #4]
 80198c8:	6878      	ldr	r0, [r7, #4]
 80198ca:	f7ff ffe7 	bl	801989c <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 80198ce:	2134      	movs	r1, #52	; 0x34
 80198d0:	6878      	ldr	r0, [r7, #4]
 80198d2:	f7f0 fa31 	bl	8009d38 <_ZdlPvj>
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	4618      	mov	r0, r3
 80198da:	3708      	adds	r7, #8
 80198dc:	46bd      	mov	sp, r7
 80198de:	bd80      	pop	{r7, pc}

080198e0 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 80198e0:	b580      	push	{r7, lr}
 80198e2:	b082      	sub	sp, #8
 80198e4:	af00      	add	r7, sp, #0
 80198e6:	6078      	str	r0, [r7, #4]
 80198e8:	4a05      	ldr	r2, [pc, #20]	; (8019900 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	601a      	str	r2, [r3, #0]
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	4618      	mov	r0, r3
 80198f2:	f7f0 fe53 	bl	800a59c <_ZN11MockFailureD1Ev>
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	4618      	mov	r0, r3
 80198fa:	3708      	adds	r7, #8
 80198fc:	46bd      	mov	sp, r7
 80198fe:	bd80      	pop	{r7, pc}
 8019900:	080284c4 	.word	0x080284c4

08019904 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 8019904:	b580      	push	{r7, lr}
 8019906:	b082      	sub	sp, #8
 8019908:	af00      	add	r7, sp, #0
 801990a:	6078      	str	r0, [r7, #4]
 801990c:	6878      	ldr	r0, [r7, #4]
 801990e:	f7ff ffe7 	bl	80198e0 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8019912:	2134      	movs	r1, #52	; 0x34
 8019914:	6878      	ldr	r0, [r7, #4]
 8019916:	f7f0 fa0f 	bl	8009d38 <_ZdlPvj>
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	4618      	mov	r0, r3
 801991e:	3708      	adds	r7, #8
 8019920:	46bd      	mov	sp, r7
 8019922:	bd80      	pop	{r7, pc}

08019924 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 8019924:	b580      	push	{r7, lr}
 8019926:	b082      	sub	sp, #8
 8019928:	af00      	add	r7, sp, #0
 801992a:	6078      	str	r0, [r7, #4]
 801992c:	4a05      	ldr	r2, [pc, #20]	; (8019944 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	601a      	str	r2, [r3, #0]
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	4618      	mov	r0, r3
 8019936:	f7f0 fe31 	bl	800a59c <_ZN11MockFailureD1Ev>
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	4618      	mov	r0, r3
 801993e:	3708      	adds	r7, #8
 8019940:	46bd      	mov	sp, r7
 8019942:	bd80      	pop	{r7, pc}
 8019944:	08028414 	.word	0x08028414

08019948 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 8019948:	b580      	push	{r7, lr}
 801994a:	b082      	sub	sp, #8
 801994c:	af00      	add	r7, sp, #0
 801994e:	6078      	str	r0, [r7, #4]
 8019950:	6878      	ldr	r0, [r7, #4]
 8019952:	f7ff ffe7 	bl	8019924 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8019956:	2134      	movs	r1, #52	; 0x34
 8019958:	6878      	ldr	r0, [r7, #4]
 801995a:	f7f0 f9ed 	bl	8009d38 <_ZdlPvj>
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	4618      	mov	r0, r3
 8019962:	3708      	adds	r7, #8
 8019964:	46bd      	mov	sp, r7
 8019966:	bd80      	pop	{r7, pc}

08019968 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 8019968:	b580      	push	{r7, lr}
 801996a:	b082      	sub	sp, #8
 801996c:	af00      	add	r7, sp, #0
 801996e:	6078      	str	r0, [r7, #4]
 8019970:	4a05      	ldr	r2, [pc, #20]	; (8019988 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	601a      	str	r2, [r3, #0]
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	4618      	mov	r0, r3
 801997a:	f7f0 fe0f 	bl	800a59c <_ZN11MockFailureD1Ev>
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	4618      	mov	r0, r3
 8019982:	3708      	adds	r7, #8
 8019984:	46bd      	mov	sp, r7
 8019986:	bd80      	pop	{r7, pc}
 8019988:	08028440 	.word	0x08028440

0801998c <_ZN27MockUnexpectedObjectFailureD0Ev>:
 801998c:	b580      	push	{r7, lr}
 801998e:	b082      	sub	sp, #8
 8019990:	af00      	add	r7, sp, #0
 8019992:	6078      	str	r0, [r7, #4]
 8019994:	6878      	ldr	r0, [r7, #4]
 8019996:	f7ff ffe7 	bl	8019968 <_ZN27MockUnexpectedObjectFailureD1Ev>
 801999a:	2134      	movs	r1, #52	; 0x34
 801999c:	6878      	ldr	r0, [r7, #4]
 801999e:	f7f0 f9cb 	bl	8009d38 <_ZdlPvj>
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	4618      	mov	r0, r3
 80199a6:	3708      	adds	r7, #8
 80199a8:	46bd      	mov	sp, r7
 80199aa:	bd80      	pop	{r7, pc}

080199ac <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 80199ac:	b580      	push	{r7, lr}
 80199ae:	b082      	sub	sp, #8
 80199b0:	af00      	add	r7, sp, #0
 80199b2:	6078      	str	r0, [r7, #4]
 80199b4:	6039      	str	r1, [r7, #0]
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	3310      	adds	r3, #16
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	683a      	ldr	r2, [r7, #0]
 80199c0:	6839      	ldr	r1, [r7, #0]
 80199c2:	6878      	ldr	r0, [r7, #4]
 80199c4:	4798      	blx	r3
 80199c6:	4603      	mov	r3, r0
 80199c8:	4618      	mov	r0, r3
 80199ca:	3708      	adds	r7, #8
 80199cc:	46bd      	mov	sp, r7
 80199ce:	bd80      	pop	{r7, pc}

080199d0 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 80199d0:	b480      	push	{r7}
 80199d2:	b083      	sub	sp, #12
 80199d4:	af00      	add	r7, sp, #0
 80199d6:	6078      	str	r0, [r7, #4]
 80199d8:	6039      	str	r1, [r7, #0]
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	4618      	mov	r0, r3
 80199de:	370c      	adds	r7, #12
 80199e0:	46bd      	mov	sp, r7
 80199e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199e6:	4770      	bx	lr

080199e8 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 80199e8:	b480      	push	{r7}
 80199ea:	b083      	sub	sp, #12
 80199ec:	af00      	add	r7, sp, #0
 80199ee:	6078      	str	r0, [r7, #4]
 80199f0:	6039      	str	r1, [r7, #0]
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	4618      	mov	r0, r3
 80199f6:	370c      	adds	r7, #12
 80199f8:	46bd      	mov	sp, r7
 80199fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199fe:	4770      	bx	lr

08019a00 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 8019a00:	b480      	push	{r7}
 8019a02:	b085      	sub	sp, #20
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	60f8      	str	r0, [r7, #12]
 8019a08:	60b9      	str	r1, [r7, #8]
 8019a0a:	607a      	str	r2, [r7, #4]
 8019a0c:	68fb      	ldr	r3, [r7, #12]
 8019a0e:	4618      	mov	r0, r3
 8019a10:	3714      	adds	r7, #20
 8019a12:	46bd      	mov	sp, r7
 8019a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a18:	4770      	bx	lr

08019a1a <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8019a1a:	b480      	push	{r7}
 8019a1c:	b085      	sub	sp, #20
 8019a1e:	af00      	add	r7, sp, #0
 8019a20:	60f8      	str	r0, [r7, #12]
 8019a22:	60b9      	str	r1, [r7, #8]
 8019a24:	4613      	mov	r3, r2
 8019a26:	71fb      	strb	r3, [r7, #7]
 8019a28:	68fb      	ldr	r3, [r7, #12]
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	3714      	adds	r7, #20
 8019a2e:	46bd      	mov	sp, r7
 8019a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a34:	4770      	bx	lr

08019a36 <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8019a36:	b480      	push	{r7}
 8019a38:	b085      	sub	sp, #20
 8019a3a:	af00      	add	r7, sp, #0
 8019a3c:	60f8      	str	r0, [r7, #12]
 8019a3e:	60b9      	str	r1, [r7, #8]
 8019a40:	607a      	str	r2, [r7, #4]
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	4618      	mov	r0, r3
 8019a46:	3714      	adds	r7, #20
 8019a48:	46bd      	mov	sp, r7
 8019a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a4e:	4770      	bx	lr

08019a50 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 8019a50:	b480      	push	{r7}
 8019a52:	b085      	sub	sp, #20
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	60f8      	str	r0, [r7, #12]
 8019a58:	60b9      	str	r1, [r7, #8]
 8019a5a:	607a      	str	r2, [r7, #4]
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	4618      	mov	r0, r3
 8019a60:	3714      	adds	r7, #20
 8019a62:	46bd      	mov	sp, r7
 8019a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a68:	4770      	bx	lr

08019a6a <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8019a6a:	b480      	push	{r7}
 8019a6c:	b085      	sub	sp, #20
 8019a6e:	af00      	add	r7, sp, #0
 8019a70:	60f8      	str	r0, [r7, #12]
 8019a72:	60b9      	str	r1, [r7, #8]
 8019a74:	607a      	str	r2, [r7, #4]
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	4618      	mov	r0, r3
 8019a7a:	3714      	adds	r7, #20
 8019a7c:	46bd      	mov	sp, r7
 8019a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a82:	4770      	bx	lr

08019a84 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8019a84:	b480      	push	{r7}
 8019a86:	b085      	sub	sp, #20
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	60f8      	str	r0, [r7, #12]
 8019a8c:	60b9      	str	r1, [r7, #8]
 8019a8e:	607a      	str	r2, [r7, #4]
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	4618      	mov	r0, r3
 8019a94:	3714      	adds	r7, #20
 8019a96:	46bd      	mov	sp, r7
 8019a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a9c:	4770      	bx	lr

08019a9e <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8019a9e:	b480      	push	{r7}
 8019aa0:	b085      	sub	sp, #20
 8019aa2:	af00      	add	r7, sp, #0
 8019aa4:	60f8      	str	r0, [r7, #12]
 8019aa6:	60b9      	str	r1, [r7, #8]
 8019aa8:	4639      	mov	r1, r7
 8019aaa:	e881 000c 	stmia.w	r1, {r2, r3}
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	3714      	adds	r7, #20
 8019ab4:	46bd      	mov	sp, r7
 8019ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aba:	4770      	bx	lr

08019abc <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8019abc:	b480      	push	{r7}
 8019abe:	b085      	sub	sp, #20
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	60f8      	str	r0, [r7, #12]
 8019ac4:	60b9      	str	r1, [r7, #8]
 8019ac6:	4639      	mov	r1, r7
 8019ac8:	e881 000c 	stmia.w	r1, {r2, r3}
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	4618      	mov	r0, r3
 8019ad0:	3714      	adds	r7, #20
 8019ad2:	46bd      	mov	sp, r7
 8019ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ad8:	4770      	bx	lr

08019ada <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8019ada:	b480      	push	{r7}
 8019adc:	b085      	sub	sp, #20
 8019ade:	af00      	add	r7, sp, #0
 8019ae0:	60f8      	str	r0, [r7, #12]
 8019ae2:	60b9      	str	r1, [r7, #8]
 8019ae4:	ed87 0b00 	vstr	d0, [r7]
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	4618      	mov	r0, r3
 8019aec:	3714      	adds	r7, #20
 8019aee:	46bd      	mov	sp, r7
 8019af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019af4:	4770      	bx	lr

08019af6 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 8019af6:	b480      	push	{r7}
 8019af8:	b087      	sub	sp, #28
 8019afa:	af00      	add	r7, sp, #0
 8019afc:	6178      	str	r0, [r7, #20]
 8019afe:	6139      	str	r1, [r7, #16]
 8019b00:	ed87 0b02 	vstr	d0, [r7, #8]
 8019b04:	ed87 1b00 	vstr	d1, [r7]
 8019b08:	697b      	ldr	r3, [r7, #20]
 8019b0a:	4618      	mov	r0, r3
 8019b0c:	371c      	adds	r7, #28
 8019b0e:	46bd      	mov	sp, r7
 8019b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b14:	4770      	bx	lr

08019b16 <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8019b16:	b480      	push	{r7}
 8019b18:	b085      	sub	sp, #20
 8019b1a:	af00      	add	r7, sp, #0
 8019b1c:	60f8      	str	r0, [r7, #12]
 8019b1e:	60b9      	str	r1, [r7, #8]
 8019b20:	607a      	str	r2, [r7, #4]
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	4618      	mov	r0, r3
 8019b26:	3714      	adds	r7, #20
 8019b28:	46bd      	mov	sp, r7
 8019b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b2e:	4770      	bx	lr

08019b30 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8019b30:	b480      	push	{r7}
 8019b32:	b085      	sub	sp, #20
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	60f8      	str	r0, [r7, #12]
 8019b38:	60b9      	str	r1, [r7, #8]
 8019b3a:	607a      	str	r2, [r7, #4]
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	4618      	mov	r0, r3
 8019b40:	3714      	adds	r7, #20
 8019b42:	46bd      	mov	sp, r7
 8019b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b48:	4770      	bx	lr

08019b4a <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8019b4a:	b480      	push	{r7}
 8019b4c:	b085      	sub	sp, #20
 8019b4e:	af00      	add	r7, sp, #0
 8019b50:	60f8      	str	r0, [r7, #12]
 8019b52:	60b9      	str	r1, [r7, #8]
 8019b54:	607a      	str	r2, [r7, #4]
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	4618      	mov	r0, r3
 8019b5a:	3714      	adds	r7, #20
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b62:	4770      	bx	lr

08019b64 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 8019b64:	b480      	push	{r7}
 8019b66:	b085      	sub	sp, #20
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	60f8      	str	r0, [r7, #12]
 8019b6c:	60b9      	str	r1, [r7, #8]
 8019b6e:	607a      	str	r2, [r7, #4]
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	4618      	mov	r0, r3
 8019b74:	3714      	adds	r7, #20
 8019b76:	46bd      	mov	sp, r7
 8019b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b7c:	4770      	bx	lr

08019b7e <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 8019b7e:	b480      	push	{r7}
 8019b80:	b085      	sub	sp, #20
 8019b82:	af00      	add	r7, sp, #0
 8019b84:	60f8      	str	r0, [r7, #12]
 8019b86:	60b9      	str	r1, [r7, #8]
 8019b88:	607a      	str	r2, [r7, #4]
 8019b8a:	603b      	str	r3, [r7, #0]
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	4618      	mov	r0, r3
 8019b90:	3714      	adds	r7, #20
 8019b92:	46bd      	mov	sp, r7
 8019b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b98:	4770      	bx	lr

08019b9a <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8019b9a:	b480      	push	{r7}
 8019b9c:	b085      	sub	sp, #20
 8019b9e:	af00      	add	r7, sp, #0
 8019ba0:	60f8      	str	r0, [r7, #12]
 8019ba2:	60b9      	str	r1, [r7, #8]
 8019ba4:	607a      	str	r2, [r7, #4]
 8019ba6:	603b      	str	r3, [r7, #0]
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	4618      	mov	r0, r3
 8019bac:	3714      	adds	r7, #20
 8019bae:	46bd      	mov	sp, r7
 8019bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bb4:	4770      	bx	lr

08019bb6 <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 8019bb6:	b480      	push	{r7}
 8019bb8:	b085      	sub	sp, #20
 8019bba:	af00      	add	r7, sp, #0
 8019bbc:	60f8      	str	r0, [r7, #12]
 8019bbe:	60b9      	str	r1, [r7, #8]
 8019bc0:	607a      	str	r2, [r7, #4]
 8019bc2:	603b      	str	r3, [r7, #0]
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	3714      	adds	r7, #20
 8019bca:	46bd      	mov	sp, r7
 8019bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd0:	4770      	bx	lr

08019bd2 <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8019bd2:	b480      	push	{r7}
 8019bd4:	b085      	sub	sp, #20
 8019bd6:	af00      	add	r7, sp, #0
 8019bd8:	60f8      	str	r0, [r7, #12]
 8019bda:	60b9      	str	r1, [r7, #8]
 8019bdc:	607a      	str	r2, [r7, #4]
 8019bde:	603b      	str	r3, [r7, #0]
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	4618      	mov	r0, r3
 8019be4:	3714      	adds	r7, #20
 8019be6:	46bd      	mov	sp, r7
 8019be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bec:	4770      	bx	lr

08019bee <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 8019bee:	b480      	push	{r7}
 8019bf0:	b083      	sub	sp, #12
 8019bf2:	af00      	add	r7, sp, #0
 8019bf4:	6078      	str	r0, [r7, #4]
 8019bf6:	6039      	str	r1, [r7, #0]
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	4618      	mov	r0, r3
 8019bfc:	370c      	adds	r7, #12
 8019bfe:	46bd      	mov	sp, r7
 8019c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c04:	4770      	bx	lr

08019c06 <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 8019c06:	b480      	push	{r7}
 8019c08:	b083      	sub	sp, #12
 8019c0a:	af00      	add	r7, sp, #0
 8019c0c:	6078      	str	r0, [r7, #4]
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	4618      	mov	r0, r3
 8019c12:	370c      	adds	r7, #12
 8019c14:	46bd      	mov	sp, r7
 8019c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c1a:	4770      	bx	lr

08019c1c <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 8019c1c:	b480      	push	{r7}
 8019c1e:	b083      	sub	sp, #12
 8019c20:	af00      	add	r7, sp, #0
 8019c22:	6078      	str	r0, [r7, #4]
 8019c24:	460b      	mov	r3, r1
 8019c26:	70fb      	strb	r3, [r7, #3]
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	370c      	adds	r7, #12
 8019c2e:	46bd      	mov	sp, r7
 8019c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c34:	4770      	bx	lr

08019c36 <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 8019c36:	b480      	push	{r7}
 8019c38:	b083      	sub	sp, #12
 8019c3a:	af00      	add	r7, sp, #0
 8019c3c:	6078      	str	r0, [r7, #4]
 8019c3e:	6039      	str	r1, [r7, #0]
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	4618      	mov	r0, r3
 8019c44:	370c      	adds	r7, #12
 8019c46:	46bd      	mov	sp, r7
 8019c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c4c:	4770      	bx	lr

08019c4e <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 8019c4e:	b480      	push	{r7}
 8019c50:	b083      	sub	sp, #12
 8019c52:	af00      	add	r7, sp, #0
 8019c54:	6078      	str	r0, [r7, #4]
 8019c56:	6039      	str	r1, [r7, #0]
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	4618      	mov	r0, r3
 8019c5c:	370c      	adds	r7, #12
 8019c5e:	46bd      	mov	sp, r7
 8019c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c64:	4770      	bx	lr

08019c66 <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 8019c66:	b480      	push	{r7}
 8019c68:	b083      	sub	sp, #12
 8019c6a:	af00      	add	r7, sp, #0
 8019c6c:	6078      	str	r0, [r7, #4]
 8019c6e:	6039      	str	r1, [r7, #0]
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	4618      	mov	r0, r3
 8019c74:	370c      	adds	r7, #12
 8019c76:	46bd      	mov	sp, r7
 8019c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c7c:	4770      	bx	lr

08019c7e <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 8019c7e:	b480      	push	{r7}
 8019c80:	b083      	sub	sp, #12
 8019c82:	af00      	add	r7, sp, #0
 8019c84:	6078      	str	r0, [r7, #4]
 8019c86:	6039      	str	r1, [r7, #0]
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	370c      	adds	r7, #12
 8019c8e:	46bd      	mov	sp, r7
 8019c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c94:	4770      	bx	lr

08019c96 <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 8019c96:	b480      	push	{r7}
 8019c98:	b085      	sub	sp, #20
 8019c9a:	af00      	add	r7, sp, #0
 8019c9c:	60f8      	str	r0, [r7, #12]
 8019c9e:	1d3b      	adds	r3, r7, #4
 8019ca0:	e883 0006 	stmia.w	r3, {r1, r2}
 8019ca4:	68fb      	ldr	r3, [r7, #12]
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	3714      	adds	r7, #20
 8019caa:	46bd      	mov	sp, r7
 8019cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb0:	4770      	bx	lr

08019cb2 <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 8019cb2:	b480      	push	{r7}
 8019cb4:	b085      	sub	sp, #20
 8019cb6:	af00      	add	r7, sp, #0
 8019cb8:	60f8      	str	r0, [r7, #12]
 8019cba:	1d3b      	adds	r3, r7, #4
 8019cbc:	e883 0006 	stmia.w	r3, {r1, r2}
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	3714      	adds	r7, #20
 8019cc6:	46bd      	mov	sp, r7
 8019cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ccc:	4770      	bx	lr

08019cce <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 8019cce:	b480      	push	{r7}
 8019cd0:	b085      	sub	sp, #20
 8019cd2:	af00      	add	r7, sp, #0
 8019cd4:	60f8      	str	r0, [r7, #12]
 8019cd6:	ed87 0b00 	vstr	d0, [r7]
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	4618      	mov	r0, r3
 8019cde:	3714      	adds	r7, #20
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ce6:	4770      	bx	lr

08019ce8 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 8019ce8:	b480      	push	{r7}
 8019cea:	b083      	sub	sp, #12
 8019cec:	af00      	add	r7, sp, #0
 8019cee:	6078      	str	r0, [r7, #4]
 8019cf0:	6039      	str	r1, [r7, #0]
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	4618      	mov	r0, r3
 8019cf6:	370c      	adds	r7, #12
 8019cf8:	46bd      	mov	sp, r7
 8019cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cfe:	4770      	bx	lr

08019d00 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 8019d00:	b480      	push	{r7}
 8019d02:	b083      	sub	sp, #12
 8019d04:	af00      	add	r7, sp, #0
 8019d06:	6078      	str	r0, [r7, #4]
 8019d08:	6039      	str	r1, [r7, #0]
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	370c      	adds	r7, #12
 8019d10:	46bd      	mov	sp, r7
 8019d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d16:	4770      	bx	lr

08019d18 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 8019d18:	b480      	push	{r7}
 8019d1a:	b083      	sub	sp, #12
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	6078      	str	r0, [r7, #4]
 8019d20:	6039      	str	r1, [r7, #0]
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	4618      	mov	r0, r3
 8019d26:	370c      	adds	r7, #12
 8019d28:	46bd      	mov	sp, r7
 8019d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d2e:	4770      	bx	lr

08019d30 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 8019d30:	b480      	push	{r7}
 8019d32:	b083      	sub	sp, #12
 8019d34:	af00      	add	r7, sp, #0
 8019d36:	6078      	str	r0, [r7, #4]
 8019d38:	6039      	str	r1, [r7, #0]
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	4618      	mov	r0, r3
 8019d3e:	370c      	adds	r7, #12
 8019d40:	46bd      	mov	sp, r7
 8019d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d46:	4770      	bx	lr

08019d48 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 8019d48:	b480      	push	{r7}
 8019d4a:	b083      	sub	sp, #12
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	6078      	str	r0, [r7, #4]
 8019d50:	6039      	str	r1, [r7, #0]
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	4618      	mov	r0, r3
 8019d56:	370c      	adds	r7, #12
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d5e:	4770      	bx	lr

08019d60 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 8019d60:	b480      	push	{r7}
 8019d62:	b083      	sub	sp, #12
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	6078      	str	r0, [r7, #4]
 8019d68:	4a04      	ldr	r2, [pc, #16]	; (8019d7c <_ZN16MockExpectedCallC1Ev+0x1c>)
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	601a      	str	r2, [r3, #0]
{
}
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	4618      	mov	r0, r3
 8019d72:	370c      	adds	r7, #12
 8019d74:	46bd      	mov	sp, r7
 8019d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d7a:	4770      	bx	lr
 8019d7c:	08028b18 	.word	0x08028b18

08019d80 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 8019d80:	b480      	push	{r7}
 8019d82:	b083      	sub	sp, #12
 8019d84:	af00      	add	r7, sp, #0
 8019d86:	6078      	str	r0, [r7, #4]
 8019d88:	4a04      	ldr	r2, [pc, #16]	; (8019d9c <_ZN16MockExpectedCallD1Ev+0x1c>)
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	601a      	str	r2, [r3, #0]
{
}
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	4618      	mov	r0, r3
 8019d92:	370c      	adds	r7, #12
 8019d94:	46bd      	mov	sp, r7
 8019d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d9a:	4770      	bx	lr
 8019d9c:	08028b18 	.word	0x08028b18

08019da0 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b082      	sub	sp, #8
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	6078      	str	r0, [r7, #4]
 8019da8:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 8019daa:	683b      	ldr	r3, [r7, #0]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	3358      	adds	r3, #88	; 0x58
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	687a      	ldr	r2, [r7, #4]
 8019db4:	6839      	ldr	r1, [r7, #0]
 8019db6:	4610      	mov	r0, r2
 8019db8:	4798      	blx	r3
}
 8019dba:	6878      	ldr	r0, [r7, #4]
 8019dbc:	3708      	adds	r7, #8
 8019dbe:	46bd      	mov	sp, r7
 8019dc0:	bd80      	pop	{r7, pc}

08019dc2 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 8019dc2:	b580      	push	{r7, lr}
 8019dc4:	b082      	sub	sp, #8
 8019dc6:	af00      	add	r7, sp, #0
 8019dc8:	6078      	str	r0, [r7, #4]
 8019dca:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	3304      	adds	r3, #4
 8019dd0:	6839      	ldr	r1, [r7, #0]
 8019dd2:	4618      	mov	r0, r3
 8019dd4:	f7f2 fbcb 	bl	800c56e <_ZN12SimpleStringaSERKS_>
}
 8019dd8:	bf00      	nop
 8019dda:	3708      	adds	r7, #8
 8019ddc:	46bd      	mov	sp, r7
 8019dde:	bd80      	pop	{r7, pc}

08019de0 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 8019de0:	b580      	push	{r7, lr}
 8019de2:	b082      	sub	sp, #8
 8019de4:	af00      	add	r7, sp, #0
 8019de6:	6078      	str	r0, [r7, #4]
 8019de8:	6039      	str	r1, [r7, #0]
    return functionName_;
 8019dea:	683b      	ldr	r3, [r7, #0]
 8019dec:	3304      	adds	r3, #4
 8019dee:	4619      	mov	r1, r3
 8019df0:	6878      	ldr	r0, [r7, #4]
 8019df2:	f7f2 fba4 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
}
 8019df6:	6878      	ldr	r0, [r7, #4]
 8019df8:	3708      	adds	r7, #8
 8019dfa:	46bd      	mov	sp, r7
 8019dfc:	bd80      	pop	{r7, pc}
	...

08019e00 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 8019e00:	b590      	push	{r4, r7, lr}
 8019e02:	b085      	sub	sp, #20
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	6078      	str	r0, [r7, #4]
 8019e08:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	f7ff ffa7 	bl	8019d60 <_ZN16MockExpectedCallC1Ev>
 8019e12:	4a2c      	ldr	r2, [pc, #176]	; (8019ec4 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	601a      	str	r2, [r3, #0]
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	3304      	adds	r3, #4
 8019e1c:	492a      	ldr	r1, [pc, #168]	; (8019ec8 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8019e1e:	4618      	mov	r0, r3
 8019e20:	f7f2 fb39 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	2200      	movs	r2, #0
 8019e28:	731a      	strb	r2, [r3, #12]
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	2200      	movs	r2, #0
 8019e2e:	735a      	strb	r2, [r3, #13]
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	2200      	movs	r2, #0
 8019e34:	611a      	str	r2, [r3, #16]
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	2200      	movs	r2, #0
 8019e3a:	615a      	str	r2, [r3, #20]
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	2200      	movs	r2, #0
 8019e40:	761a      	strb	r2, [r3, #24]
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8019e48:	f107 0308 	add.w	r3, r7, #8
 8019e4c:	491e      	ldr	r1, [pc, #120]	; (8019ec8 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8019e4e:	4618      	mov	r0, r3
 8019e50:	f7f2 fb21 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 8019e54:	f107 0308 	add.w	r3, r7, #8
 8019e58:	4619      	mov	r1, r3
 8019e5a:	4620      	mov	r0, r4
 8019e5c:	f003 f840 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
 8019e60:	f107 0308 	add.w	r3, r7, #8
 8019e64:	4618      	mov	r0, r3
 8019e66:	f7f2 fece 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	2200      	movs	r2, #0
 8019e6e:	661a      	str	r2, [r3, #96]	; 0x60
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	2200      	movs	r2, #0
 8019e74:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	2201      	movs	r2, #1
 8019e7c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	2200      	movs	r2, #0
 8019e84:	669a      	str	r2, [r3, #104]	; 0x68
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	683a      	ldr	r2, [r7, #0]
 8019e8a:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 8019e8c:	2246      	movs	r2, #70	; 0x46
 8019e8e:	490f      	ldr	r1, [pc, #60]	; (8019ecc <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8019e90:	2004      	movs	r0, #4
 8019e92:	f7ef ff3d 	bl	8009d10 <_ZnwjPKci>
 8019e96:	4604      	mov	r4, r0
 8019e98:	4620      	mov	r0, r4
 8019e9a:	f004 ff36 	bl	801ed0a <_ZN18MockNamedValueListC1Ev>
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 8019ea2:	2247      	movs	r2, #71	; 0x47
 8019ea4:	4909      	ldr	r1, [pc, #36]	; (8019ecc <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8019ea6:	2004      	movs	r0, #4
 8019ea8:	f7ef ff32 	bl	8009d10 <_ZnwjPKci>
 8019eac:	4604      	mov	r4, r0
 8019eae:	4620      	mov	r0, r4
 8019eb0:	f004 ff2b 	bl	801ed0a <_ZN18MockNamedValueListC1Ev>
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	621c      	str	r4, [r3, #32]
}
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	4618      	mov	r0, r3
 8019ebc:	3714      	adds	r7, #20
 8019ebe:	46bd      	mov	sp, r7
 8019ec0:	bd90      	pop	{r4, r7, pc}
 8019ec2:	bf00      	nop
 8019ec4:	0802895c 	.word	0x0802895c
 8019ec8:	08025934 	.word	0x08025934
 8019ecc:	08025938 	.word	0x08025938

08019ed0 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8019ed0:	b580      	push	{r7, lr}
 8019ed2:	b082      	sub	sp, #8
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	6078      	str	r0, [r7, #4]
 8019ed8:	4a17      	ldr	r2, [pc, #92]	; (8019f38 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	69db      	ldr	r3, [r3, #28]
 8019ee2:	4618      	mov	r0, r3
 8019ee4:	f004 ff1f 	bl	801ed26 <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	69db      	ldr	r3, [r3, #28]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d003      	beq.n	8019ef8 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 8019ef0:	2104      	movs	r1, #4
 8019ef2:	4618      	mov	r0, r3
 8019ef4:	f7ef ff20 	bl	8009d38 <_ZdlPvj>
    outputParameters_->clear();
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	6a1b      	ldr	r3, [r3, #32]
 8019efc:	4618      	mov	r0, r3
 8019efe:	f004 ff12 	bl	801ed26 <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	6a1b      	ldr	r3, [r3, #32]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d003      	beq.n	8019f12 <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 8019f0a:	2104      	movs	r1, #4
 8019f0c:	4618      	mov	r0, r3
 8019f0e:	f7ef ff13 	bl	8009d38 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	3328      	adds	r3, #40	; 0x28
 8019f16:	4618      	mov	r0, r3
 8019f18:	f003 f80c 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	3304      	adds	r3, #4
 8019f20:	4618      	mov	r0, r3
 8019f22:	f7f2 fe70 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	4618      	mov	r0, r3
 8019f2a:	f7ff ff29 	bl	8019d80 <_ZN16MockExpectedCallD1Ev>
}
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	4618      	mov	r0, r3
 8019f32:	3708      	adds	r7, #8
 8019f34:	46bd      	mov	sp, r7
 8019f36:	bd80      	pop	{r7, pc}
 8019f38:	0802895c 	.word	0x0802895c

08019f3c <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8019f3c:	b580      	push	{r7, lr}
 8019f3e:	b082      	sub	sp, #8
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	6078      	str	r0, [r7, #4]
}
 8019f44:	6878      	ldr	r0, [r7, #4]
 8019f46:	f7ff ffc3 	bl	8019ed0 <_ZN23MockCheckedExpectedCallD1Ev>
 8019f4a:	2170      	movs	r1, #112	; 0x70
 8019f4c:	6878      	ldr	r0, [r7, #4]
 8019f4e:	f7ef fef3 	bl	8009d38 <_ZdlPvj>
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	4618      	mov	r0, r3
 8019f56:	3708      	adds	r7, #8
 8019f58:	46bd      	mov	sp, r7
 8019f5a:	bd80      	pop	{r7, pc}

08019f5c <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 8019f5c:	b580      	push	{r7, lr}
 8019f5e:	b082      	sub	sp, #8
 8019f60:	af00      	add	r7, sp, #0
 8019f62:	6078      	str	r0, [r7, #4]
 8019f64:	6039      	str	r1, [r7, #0]
    setName(name);
 8019f66:	6839      	ldr	r1, [r7, #0]
 8019f68:	6878      	ldr	r0, [r7, #4]
 8019f6a:	f7ff ff2a 	bl	8019dc2 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 8019f6e:	687b      	ldr	r3, [r7, #4]
}
 8019f70:	4618      	mov	r0, r3
 8019f72:	3708      	adds	r7, #8
 8019f74:	46bd      	mov	sp, r7
 8019f76:	bd80      	pop	{r7, pc}

08019f78 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 8019f78:	b590      	push	{r4, r7, lr}
 8019f7a:	b087      	sub	sp, #28
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	60f8      	str	r0, [r7, #12]
 8019f80:	60b9      	str	r1, [r7, #8]
 8019f82:	4613      	mov	r3, r2
 8019f84:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019f86:	225a      	movs	r2, #90	; 0x5a
 8019f88:	490e      	ldr	r1, [pc, #56]	; (8019fc4 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 8019f8a:	2038      	movs	r0, #56	; 0x38
 8019f8c:	f7ef fec0 	bl	8009d10 <_ZnwjPKci>
 8019f90:	4604      	mov	r4, r0
 8019f92:	68b9      	ldr	r1, [r7, #8]
 8019f94:	4620      	mov	r0, r4
 8019f96:	f001 f851 	bl	801b03c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019f9a:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	69db      	ldr	r3, [r3, #28]
 8019fa0:	6979      	ldr	r1, [r7, #20]
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	f004 fee2 	bl	801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8019fa8:	697b      	ldr	r3, [r7, #20]
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	3308      	adds	r3, #8
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	79fa      	ldrb	r2, [r7, #7]
 8019fb2:	4611      	mov	r1, r2
 8019fb4:	6978      	ldr	r0, [r7, #20]
 8019fb6:	4798      	blx	r3
    return *this;
 8019fb8:	68fb      	ldr	r3, [r7, #12]
}
 8019fba:	4618      	mov	r0, r3
 8019fbc:	371c      	adds	r7, #28
 8019fbe:	46bd      	mov	sp, r7
 8019fc0:	bd90      	pop	{r4, r7, pc}
 8019fc2:	bf00      	nop
 8019fc4:	08025938 	.word	0x08025938

08019fc8 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8019fc8:	b590      	push	{r4, r7, lr}
 8019fca:	b087      	sub	sp, #28
 8019fcc:	af00      	add	r7, sp, #0
 8019fce:	60f8      	str	r0, [r7, #12]
 8019fd0:	60b9      	str	r1, [r7, #8]
 8019fd2:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019fd4:	2262      	movs	r2, #98	; 0x62
 8019fd6:	490e      	ldr	r1, [pc, #56]	; (801a010 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 8019fd8:	2038      	movs	r0, #56	; 0x38
 8019fda:	f7ef fe99 	bl	8009d10 <_ZnwjPKci>
 8019fde:	4604      	mov	r4, r0
 8019fe0:	68b9      	ldr	r1, [r7, #8]
 8019fe2:	4620      	mov	r0, r4
 8019fe4:	f001 f82a 	bl	801b03c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019fe8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	69db      	ldr	r3, [r3, #28]
 8019fee:	6979      	ldr	r1, [r7, #20]
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	f004 febb 	bl	801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8019ff6:	697b      	ldr	r3, [r7, #20]
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	3310      	adds	r3, #16
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	6879      	ldr	r1, [r7, #4]
 801a000:	6978      	ldr	r0, [r7, #20]
 801a002:	4798      	blx	r3
    return *this;
 801a004:	68fb      	ldr	r3, [r7, #12]
}
 801a006:	4618      	mov	r0, r3
 801a008:	371c      	adds	r7, #28
 801a00a:	46bd      	mov	sp, r7
 801a00c:	bd90      	pop	{r4, r7, pc}
 801a00e:	bf00      	nop
 801a010:	08025938 	.word	0x08025938

0801a014 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 801a014:	b590      	push	{r4, r7, lr}
 801a016:	b087      	sub	sp, #28
 801a018:	af00      	add	r7, sp, #0
 801a01a:	60f8      	str	r0, [r7, #12]
 801a01c:	60b9      	str	r1, [r7, #8]
 801a01e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a020:	226a      	movs	r2, #106	; 0x6a
 801a022:	490e      	ldr	r1, [pc, #56]	; (801a05c <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 801a024:	2038      	movs	r0, #56	; 0x38
 801a026:	f7ef fe73 	bl	8009d10 <_ZnwjPKci>
 801a02a:	4604      	mov	r4, r0
 801a02c:	68b9      	ldr	r1, [r7, #8]
 801a02e:	4620      	mov	r0, r4
 801a030:	f001 f804 	bl	801b03c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a034:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a036:	68fb      	ldr	r3, [r7, #12]
 801a038:	69db      	ldr	r3, [r3, #28]
 801a03a:	6979      	ldr	r1, [r7, #20]
 801a03c:	4618      	mov	r0, r3
 801a03e:	f004 fe95 	bl	801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a042:	697b      	ldr	r3, [r7, #20]
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	330c      	adds	r3, #12
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	6879      	ldr	r1, [r7, #4]
 801a04c:	6978      	ldr	r0, [r7, #20]
 801a04e:	4798      	blx	r3
    return *this;
 801a050:	68fb      	ldr	r3, [r7, #12]
}
 801a052:	4618      	mov	r0, r3
 801a054:	371c      	adds	r7, #28
 801a056:	46bd      	mov	sp, r7
 801a058:	bd90      	pop	{r4, r7, pc}
 801a05a:	bf00      	nop
 801a05c:	08025938 	.word	0x08025938

0801a060 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801a060:	b590      	push	{r4, r7, lr}
 801a062:	b087      	sub	sp, #28
 801a064:	af00      	add	r7, sp, #0
 801a066:	60f8      	str	r0, [r7, #12]
 801a068:	60b9      	str	r1, [r7, #8]
 801a06a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a06c:	2272      	movs	r2, #114	; 0x72
 801a06e:	490e      	ldr	r1, [pc, #56]	; (801a0a8 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 801a070:	2038      	movs	r0, #56	; 0x38
 801a072:	f7ef fe4d 	bl	8009d10 <_ZnwjPKci>
 801a076:	4604      	mov	r4, r0
 801a078:	68b9      	ldr	r1, [r7, #8]
 801a07a:	4620      	mov	r0, r4
 801a07c:	f000 ffde 	bl	801b03c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a080:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a082:	68fb      	ldr	r3, [r7, #12]
 801a084:	69db      	ldr	r3, [r3, #28]
 801a086:	6979      	ldr	r1, [r7, #20]
 801a088:	4618      	mov	r0, r3
 801a08a:	f004 fe6f 	bl	801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a08e:	697b      	ldr	r3, [r7, #20]
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	3314      	adds	r3, #20
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	6879      	ldr	r1, [r7, #4]
 801a098:	6978      	ldr	r0, [r7, #20]
 801a09a:	4798      	blx	r3
    return *this;
 801a09c:	68fb      	ldr	r3, [r7, #12]
}
 801a09e:	4618      	mov	r0, r3
 801a0a0:	371c      	adds	r7, #28
 801a0a2:	46bd      	mov	sp, r7
 801a0a4:	bd90      	pop	{r4, r7, pc}
 801a0a6:	bf00      	nop
 801a0a8:	08025938 	.word	0x08025938

0801a0ac <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801a0ac:	b590      	push	{r4, r7, lr}
 801a0ae:	b087      	sub	sp, #28
 801a0b0:	af00      	add	r7, sp, #0
 801a0b2:	60f8      	str	r0, [r7, #12]
 801a0b4:	60b9      	str	r1, [r7, #8]
 801a0b6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a0b8:	227a      	movs	r2, #122	; 0x7a
 801a0ba:	490e      	ldr	r1, [pc, #56]	; (801a0f4 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 801a0bc:	2038      	movs	r0, #56	; 0x38
 801a0be:	f7ef fe27 	bl	8009d10 <_ZnwjPKci>
 801a0c2:	4604      	mov	r4, r0
 801a0c4:	68b9      	ldr	r1, [r7, #8]
 801a0c6:	4620      	mov	r0, r4
 801a0c8:	f000 ffb8 	bl	801b03c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a0cc:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	69db      	ldr	r3, [r3, #28]
 801a0d2:	6979      	ldr	r1, [r7, #20]
 801a0d4:	4618      	mov	r0, r3
 801a0d6:	f004 fe49 	bl	801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a0da:	697b      	ldr	r3, [r7, #20]
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	3318      	adds	r3, #24
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	6879      	ldr	r1, [r7, #4]
 801a0e4:	6978      	ldr	r0, [r7, #20]
 801a0e6:	4798      	blx	r3
    return *this;
 801a0e8:	68fb      	ldr	r3, [r7, #12]
}
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	371c      	adds	r7, #28
 801a0ee:	46bd      	mov	sp, r7
 801a0f0:	bd90      	pop	{r4, r7, pc}
 801a0f2:	bf00      	nop
 801a0f4:	08025938 	.word	0x08025938

0801a0f8 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801a0f8:	b5b0      	push	{r4, r5, r7, lr}
 801a0fa:	b086      	sub	sp, #24
 801a0fc:	af02      	add	r7, sp, #8
 801a0fe:	60f8      	str	r0, [r7, #12]
 801a100:	60b9      	str	r1, [r7, #8]
 801a102:	4639      	mov	r1, r7
 801a104:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801a108:	f7f9 fda8 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801a10c:	4604      	mov	r4, r0
 801a10e:	6823      	ldr	r3, [r4, #0]
 801a110:	3368      	adds	r3, #104	; 0x68
 801a112:	681d      	ldr	r5, [r3, #0]
 801a114:	f7f9 fdb2 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a118:	4603      	mov	r3, r0
 801a11a:	9300      	str	r3, [sp, #0]
 801a11c:	2396      	movs	r3, #150	; 0x96
 801a11e:	4a04      	ldr	r2, [pc, #16]	; (801a130 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 801a120:	4904      	ldr	r1, [pc, #16]	; (801a134 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801a122:	4620      	mov	r0, r4
 801a124:	47a8      	blx	r5
    return *this;
 801a126:	68fb      	ldr	r3, [r7, #12]
}
 801a128:	4618      	mov	r0, r3
 801a12a:	3710      	adds	r7, #16
 801a12c:	46bd      	mov	sp, r7
 801a12e:	bdb0      	pop	{r4, r5, r7, pc}
 801a130:	08025938 	.word	0x08025938
 801a134:	08025954 	.word	0x08025954

0801a138 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801a138:	b5b0      	push	{r4, r5, r7, lr}
 801a13a:	b086      	sub	sp, #24
 801a13c:	af02      	add	r7, sp, #8
 801a13e:	60f8      	str	r0, [r7, #12]
 801a140:	60b9      	str	r1, [r7, #8]
 801a142:	4639      	mov	r1, r7
 801a144:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801a148:	f7f9 fd88 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801a14c:	4604      	mov	r4, r0
 801a14e:	6823      	ldr	r3, [r4, #0]
 801a150:	3368      	adds	r3, #104	; 0x68
 801a152:	681d      	ldr	r5, [r3, #0]
 801a154:	f7f9 fd92 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a158:	4603      	mov	r3, r0
 801a15a:	9300      	str	r3, [sp, #0]
 801a15c:	239c      	movs	r3, #156	; 0x9c
 801a15e:	4a04      	ldr	r2, [pc, #16]	; (801a170 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 801a160:	4904      	ldr	r1, [pc, #16]	; (801a174 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801a162:	4620      	mov	r0, r4
 801a164:	47a8      	blx	r5
    return *this;
 801a166:	68fb      	ldr	r3, [r7, #12]
}
 801a168:	4618      	mov	r0, r3
 801a16a:	3710      	adds	r7, #16
 801a16c:	46bd      	mov	sp, r7
 801a16e:	bdb0      	pop	{r4, r5, r7, pc}
 801a170:	08025938 	.word	0x08025938
 801a174:	08025974 	.word	0x08025974

0801a178 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801a178:	b590      	push	{r4, r7, lr}
 801a17a:	b087      	sub	sp, #28
 801a17c:	af00      	add	r7, sp, #0
 801a17e:	60f8      	str	r0, [r7, #12]
 801a180:	60b9      	str	r1, [r7, #8]
 801a182:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a186:	22a4      	movs	r2, #164	; 0xa4
 801a188:	490e      	ldr	r1, [pc, #56]	; (801a1c4 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801a18a:	2038      	movs	r0, #56	; 0x38
 801a18c:	f7ef fdc0 	bl	8009d10 <_ZnwjPKci>
 801a190:	4604      	mov	r4, r0
 801a192:	68b9      	ldr	r1, [r7, #8]
 801a194:	4620      	mov	r0, r4
 801a196:	f000 ff51 	bl	801b03c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a19a:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a19c:	68fb      	ldr	r3, [r7, #12]
 801a19e:	69db      	ldr	r3, [r3, #28]
 801a1a0:	6979      	ldr	r1, [r7, #20]
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	f004 fde2 	bl	801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a1a8:	697b      	ldr	r3, [r7, #20]
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	3324      	adds	r3, #36	; 0x24
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	ed97 0b00 	vldr	d0, [r7]
 801a1b4:	6978      	ldr	r0, [r7, #20]
 801a1b6:	4798      	blx	r3
    return *this;
 801a1b8:	68fb      	ldr	r3, [r7, #12]
}
 801a1ba:	4618      	mov	r0, r3
 801a1bc:	371c      	adds	r7, #28
 801a1be:	46bd      	mov	sp, r7
 801a1c0:	bd90      	pop	{r4, r7, pc}
 801a1c2:	bf00      	nop
 801a1c4:	08025938 	.word	0x08025938

0801a1c8 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801a1c8:	b590      	push	{r4, r7, lr}
 801a1ca:	b089      	sub	sp, #36	; 0x24
 801a1cc:	af00      	add	r7, sp, #0
 801a1ce:	6178      	str	r0, [r7, #20]
 801a1d0:	6139      	str	r1, [r7, #16]
 801a1d2:	ed87 0b02 	vstr	d0, [r7, #8]
 801a1d6:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a1da:	22ac      	movs	r2, #172	; 0xac
 801a1dc:	490f      	ldr	r1, [pc, #60]	; (801a21c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 801a1de:	2038      	movs	r0, #56	; 0x38
 801a1e0:	f7ef fd96 	bl	8009d10 <_ZnwjPKci>
 801a1e4:	4604      	mov	r4, r0
 801a1e6:	6939      	ldr	r1, [r7, #16]
 801a1e8:	4620      	mov	r0, r4
 801a1ea:	f000 ff27 	bl	801b03c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a1ee:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 801a1f0:	697b      	ldr	r3, [r7, #20]
 801a1f2:	69db      	ldr	r3, [r3, #28]
 801a1f4:	69f9      	ldr	r1, [r7, #28]
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	f004 fdb8 	bl	801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 801a1fc:	69fb      	ldr	r3, [r7, #28]
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	3328      	adds	r3, #40	; 0x28
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	ed97 1b00 	vldr	d1, [r7]
 801a208:	ed97 0b02 	vldr	d0, [r7, #8]
 801a20c:	69f8      	ldr	r0, [r7, #28]
 801a20e:	4798      	blx	r3
    return *this;
 801a210:	697b      	ldr	r3, [r7, #20]
}
 801a212:	4618      	mov	r0, r3
 801a214:	3724      	adds	r7, #36	; 0x24
 801a216:	46bd      	mov	sp, r7
 801a218:	bd90      	pop	{r4, r7, pc}
 801a21a:	bf00      	nop
 801a21c:	08025938 	.word	0x08025938

0801a220 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 801a220:	b590      	push	{r4, r7, lr}
 801a222:	b087      	sub	sp, #28
 801a224:	af00      	add	r7, sp, #0
 801a226:	60f8      	str	r0, [r7, #12]
 801a228:	60b9      	str	r1, [r7, #8]
 801a22a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a22c:	22b4      	movs	r2, #180	; 0xb4
 801a22e:	490e      	ldr	r1, [pc, #56]	; (801a268 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 801a230:	2038      	movs	r0, #56	; 0x38
 801a232:	f7ef fd6d 	bl	8009d10 <_ZnwjPKci>
 801a236:	4604      	mov	r4, r0
 801a238:	68b9      	ldr	r1, [r7, #8]
 801a23a:	4620      	mov	r0, r4
 801a23c:	f000 fefe 	bl	801b03c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a240:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	69db      	ldr	r3, [r3, #28]
 801a246:	6979      	ldr	r1, [r7, #20]
 801a248:	4618      	mov	r0, r3
 801a24a:	f004 fd8f 	bl	801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a24e:	697b      	ldr	r3, [r7, #20]
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	3338      	adds	r3, #56	; 0x38
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	6879      	ldr	r1, [r7, #4]
 801a258:	6978      	ldr	r0, [r7, #20]
 801a25a:	4798      	blx	r3
    return *this;
 801a25c:	68fb      	ldr	r3, [r7, #12]
}
 801a25e:	4618      	mov	r0, r3
 801a260:	371c      	adds	r7, #28
 801a262:	46bd      	mov	sp, r7
 801a264:	bd90      	pop	{r4, r7, pc}
 801a266:	bf00      	nop
 801a268:	08025938 	.word	0x08025938

0801a26c <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 801a26c:	b590      	push	{r4, r7, lr}
 801a26e:	b087      	sub	sp, #28
 801a270:	af00      	add	r7, sp, #0
 801a272:	60f8      	str	r0, [r7, #12]
 801a274:	60b9      	str	r1, [r7, #8]
 801a276:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a278:	22bc      	movs	r2, #188	; 0xbc
 801a27a:	490e      	ldr	r1, [pc, #56]	; (801a2b4 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 801a27c:	2038      	movs	r0, #56	; 0x38
 801a27e:	f7ef fd47 	bl	8009d10 <_ZnwjPKci>
 801a282:	4604      	mov	r4, r0
 801a284:	68b9      	ldr	r1, [r7, #8]
 801a286:	4620      	mov	r0, r4
 801a288:	f000 fed8 	bl	801b03c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a28c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	69db      	ldr	r3, [r3, #28]
 801a292:	6979      	ldr	r1, [r7, #20]
 801a294:	4618      	mov	r0, r3
 801a296:	f004 fd69 	bl	801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a29a:	697b      	ldr	r3, [r7, #20]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	332c      	adds	r3, #44	; 0x2c
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	6879      	ldr	r1, [r7, #4]
 801a2a4:	6978      	ldr	r0, [r7, #20]
 801a2a6:	4798      	blx	r3
    return *this;
 801a2a8:	68fb      	ldr	r3, [r7, #12]
}
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	371c      	adds	r7, #28
 801a2ae:	46bd      	mov	sp, r7
 801a2b0:	bd90      	pop	{r4, r7, pc}
 801a2b2:	bf00      	nop
 801a2b4:	08025938 	.word	0x08025938

0801a2b8 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801a2b8:	b590      	push	{r4, r7, lr}
 801a2ba:	b087      	sub	sp, #28
 801a2bc:	af00      	add	r7, sp, #0
 801a2be:	60f8      	str	r0, [r7, #12]
 801a2c0:	60b9      	str	r1, [r7, #8]
 801a2c2:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a2c4:	22c4      	movs	r2, #196	; 0xc4
 801a2c6:	490e      	ldr	r1, [pc, #56]	; (801a300 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801a2c8:	2038      	movs	r0, #56	; 0x38
 801a2ca:	f7ef fd21 	bl	8009d10 <_ZnwjPKci>
 801a2ce:	4604      	mov	r4, r0
 801a2d0:	68b9      	ldr	r1, [r7, #8]
 801a2d2:	4620      	mov	r0, r4
 801a2d4:	f000 feb2 	bl	801b03c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a2d8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a2da:	68fb      	ldr	r3, [r7, #12]
 801a2dc:	69db      	ldr	r3, [r3, #28]
 801a2de:	6979      	ldr	r1, [r7, #20]
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	f004 fd43 	bl	801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a2e6:	697b      	ldr	r3, [r7, #20]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	3330      	adds	r3, #48	; 0x30
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	6879      	ldr	r1, [r7, #4]
 801a2f0:	6978      	ldr	r0, [r7, #20]
 801a2f2:	4798      	blx	r3
    return *this;
 801a2f4:	68fb      	ldr	r3, [r7, #12]
}
 801a2f6:	4618      	mov	r0, r3
 801a2f8:	371c      	adds	r7, #28
 801a2fa:	46bd      	mov	sp, r7
 801a2fc:	bd90      	pop	{r4, r7, pc}
 801a2fe:	bf00      	nop
 801a300:	08025938 	.word	0x08025938

0801a304 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801a304:	b590      	push	{r4, r7, lr}
 801a306:	b087      	sub	sp, #28
 801a308:	af00      	add	r7, sp, #0
 801a30a:	60f8      	str	r0, [r7, #12]
 801a30c:	60b9      	str	r1, [r7, #8]
 801a30e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a310:	22cc      	movs	r2, #204	; 0xcc
 801a312:	490e      	ldr	r1, [pc, #56]	; (801a34c <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801a314:	2038      	movs	r0, #56	; 0x38
 801a316:	f7ef fcfb 	bl	8009d10 <_ZnwjPKci>
 801a31a:	4604      	mov	r4, r0
 801a31c:	68b9      	ldr	r1, [r7, #8]
 801a31e:	4620      	mov	r0, r4
 801a320:	f000 fe8c 	bl	801b03c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a324:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	69db      	ldr	r3, [r3, #28]
 801a32a:	6979      	ldr	r1, [r7, #20]
 801a32c:	4618      	mov	r0, r3
 801a32e:	f004 fd1d 	bl	801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a332:	697b      	ldr	r3, [r7, #20]
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	3334      	adds	r3, #52	; 0x34
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	6879      	ldr	r1, [r7, #4]
 801a33c:	6978      	ldr	r0, [r7, #20]
 801a33e:	4798      	blx	r3
    return *this;
 801a340:	68fb      	ldr	r3, [r7, #12]
}
 801a342:	4618      	mov	r0, r3
 801a344:	371c      	adds	r7, #28
 801a346:	46bd      	mov	sp, r7
 801a348:	bd90      	pop	{r4, r7, pc}
 801a34a:	bf00      	nop
 801a34c:	08025938 	.word	0x08025938

0801a350 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801a350:	b590      	push	{r4, r7, lr}
 801a352:	b087      	sub	sp, #28
 801a354:	af00      	add	r7, sp, #0
 801a356:	60f8      	str	r0, [r7, #12]
 801a358:	60b9      	str	r1, [r7, #8]
 801a35a:	607a      	str	r2, [r7, #4]
 801a35c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a35e:	22d4      	movs	r2, #212	; 0xd4
 801a360:	490e      	ldr	r1, [pc, #56]	; (801a39c <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801a362:	2038      	movs	r0, #56	; 0x38
 801a364:	f7ef fcd4 	bl	8009d10 <_ZnwjPKci>
 801a368:	4604      	mov	r4, r0
 801a36a:	68b9      	ldr	r1, [r7, #8]
 801a36c:	4620      	mov	r0, r4
 801a36e:	f000 fe65 	bl	801b03c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a372:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a374:	68fb      	ldr	r3, [r7, #12]
 801a376:	69db      	ldr	r3, [r3, #28]
 801a378:	6979      	ldr	r1, [r7, #20]
 801a37a:	4618      	mov	r0, r3
 801a37c:	f004 fcf6 	bl	801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 801a380:	697b      	ldr	r3, [r7, #20]
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	333c      	adds	r3, #60	; 0x3c
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	683a      	ldr	r2, [r7, #0]
 801a38a:	6879      	ldr	r1, [r7, #4]
 801a38c:	6978      	ldr	r0, [r7, #20]
 801a38e:	4798      	blx	r3
    return *this;
 801a390:	68fb      	ldr	r3, [r7, #12]
}
 801a392:	4618      	mov	r0, r3
 801a394:	371c      	adds	r7, #28
 801a396:	46bd      	mov	sp, r7
 801a398:	bd90      	pop	{r4, r7, pc}
 801a39a:	bf00      	nop
 801a39c:	08025938 	.word	0x08025938

0801a3a0 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801a3a0:	b590      	push	{r4, r7, lr}
 801a3a2:	b087      	sub	sp, #28
 801a3a4:	af00      	add	r7, sp, #0
 801a3a6:	60f8      	str	r0, [r7, #12]
 801a3a8:	60b9      	str	r1, [r7, #8]
 801a3aa:	607a      	str	r2, [r7, #4]
 801a3ac:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a3ae:	22dc      	movs	r2, #220	; 0xdc
 801a3b0:	490e      	ldr	r1, [pc, #56]	; (801a3ec <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 801a3b2:	2038      	movs	r0, #56	; 0x38
 801a3b4:	f7ef fcac 	bl	8009d10 <_ZnwjPKci>
 801a3b8:	4604      	mov	r4, r0
 801a3ba:	6879      	ldr	r1, [r7, #4]
 801a3bc:	4620      	mov	r0, r4
 801a3be:	f000 fe3d 	bl	801b03c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a3c2:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	69db      	ldr	r3, [r3, #28]
 801a3c8:	6979      	ldr	r1, [r7, #20]
 801a3ca:	4618      	mov	r0, r3
 801a3cc:	f004 fcce 	bl	801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801a3d0:	697b      	ldr	r3, [r7, #20]
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	3340      	adds	r3, #64	; 0x40
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	683a      	ldr	r2, [r7, #0]
 801a3da:	68b9      	ldr	r1, [r7, #8]
 801a3dc:	6978      	ldr	r0, [r7, #20]
 801a3de:	4798      	blx	r3
    return *this;
 801a3e0:	68fb      	ldr	r3, [r7, #12]
}
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	371c      	adds	r7, #28
 801a3e6:	46bd      	mov	sp, r7
 801a3e8:	bd90      	pop	{r4, r7, pc}
 801a3ea:	bf00      	nop
 801a3ec:	08025938 	.word	0x08025938

0801a3f0 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 801a3f0:	b590      	push	{r4, r7, lr}
 801a3f2:	b087      	sub	sp, #28
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	60f8      	str	r0, [r7, #12]
 801a3f8:	60b9      	str	r1, [r7, #8]
 801a3fa:	607a      	str	r2, [r7, #4]
 801a3fc:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a3fe:	22e4      	movs	r2, #228	; 0xe4
 801a400:	4911      	ldr	r1, [pc, #68]	; (801a448 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801a402:	2038      	movs	r0, #56	; 0x38
 801a404:	f7ef fc84 	bl	8009d10 <_ZnwjPKci>
 801a408:	4604      	mov	r4, r0
 801a40a:	68b9      	ldr	r1, [r7, #8]
 801a40c:	4620      	mov	r0, r4
 801a40e:	f000 fe15 	bl	801b03c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a412:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801a414:	68fb      	ldr	r3, [r7, #12]
 801a416:	6a1b      	ldr	r3, [r3, #32]
 801a418:	6979      	ldr	r1, [r7, #20]
 801a41a:	4618      	mov	r0, r3
 801a41c:	f004 fca6 	bl	801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a420:	697b      	ldr	r3, [r7, #20]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	3330      	adds	r3, #48	; 0x30
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	6879      	ldr	r1, [r7, #4]
 801a42a:	6978      	ldr	r0, [r7, #20]
 801a42c:	4798      	blx	r3
    newParameter->setSize(size);
 801a42e:	697b      	ldr	r3, [r7, #20]
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	3348      	adds	r3, #72	; 0x48
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	6839      	ldr	r1, [r7, #0]
 801a438:	6978      	ldr	r0, [r7, #20]
 801a43a:	4798      	blx	r3
    return *this;
 801a43c:	68fb      	ldr	r3, [r7, #12]
}
 801a43e:	4618      	mov	r0, r3
 801a440:	371c      	adds	r7, #28
 801a442:	46bd      	mov	sp, r7
 801a444:	bd90      	pop	{r4, r7, pc}
 801a446:	bf00      	nop
 801a448:	08025938 	.word	0x08025938

0801a44c <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 801a44c:	b590      	push	{r4, r7, lr}
 801a44e:	b087      	sub	sp, #28
 801a450:	af00      	add	r7, sp, #0
 801a452:	60f8      	str	r0, [r7, #12]
 801a454:	60b9      	str	r1, [r7, #8]
 801a456:	607a      	str	r2, [r7, #4]
 801a458:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a45a:	22ed      	movs	r2, #237	; 0xed
 801a45c:	490e      	ldr	r1, [pc, #56]	; (801a498 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801a45e:	2038      	movs	r0, #56	; 0x38
 801a460:	f7ef fc56 	bl	8009d10 <_ZnwjPKci>
 801a464:	4604      	mov	r4, r0
 801a466:	6879      	ldr	r1, [r7, #4]
 801a468:	4620      	mov	r0, r4
 801a46a:	f000 fde7 	bl	801b03c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a46e:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801a470:	68fb      	ldr	r3, [r7, #12]
 801a472:	6a1b      	ldr	r3, [r3, #32]
 801a474:	6979      	ldr	r1, [r7, #20]
 801a476:	4618      	mov	r0, r3
 801a478:	f004 fc78 	bl	801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801a47c:	697b      	ldr	r3, [r7, #20]
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	3340      	adds	r3, #64	; 0x40
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	683a      	ldr	r2, [r7, #0]
 801a486:	68b9      	ldr	r1, [r7, #8]
 801a488:	6978      	ldr	r0, [r7, #20]
 801a48a:	4798      	blx	r3
    return *this;
 801a48c:	68fb      	ldr	r3, [r7, #12]
}
 801a48e:	4618      	mov	r0, r3
 801a490:	371c      	adds	r7, #28
 801a492:	46bd      	mov	sp, r7
 801a494:	bd90      	pop	{r4, r7, pc}
 801a496:	bf00      	nop
 801a498:	08025938 	.word	0x08025938

0801a49c <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 801a49c:	b590      	push	{r4, r7, lr}
 801a49e:	b083      	sub	sp, #12
 801a4a0:	af00      	add	r7, sp, #0
 801a4a2:	6078      	str	r0, [r7, #4]
 801a4a4:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	3318      	adds	r3, #24
 801a4ac:	681c      	ldr	r4, [r3, #0]
 801a4ae:	2300      	movs	r3, #0
 801a4b0:	2200      	movs	r2, #0
 801a4b2:	6839      	ldr	r1, [r7, #0]
 801a4b4:	6878      	ldr	r0, [r7, #4]
 801a4b6:	47a0      	blx	r4
 801a4b8:	4603      	mov	r3, r0
}
 801a4ba:	4618      	mov	r0, r3
 801a4bc:	370c      	adds	r7, #12
 801a4be:	46bd      	mov	sp, r7
 801a4c0:	bd90      	pop	{r4, r7, pc}
	...

0801a4c4 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 801a4c4:	b580      	push	{r7, lr}
 801a4c6:	b086      	sub	sp, #24
 801a4c8:	af00      	add	r7, sp, #0
 801a4ca:	60f8      	str	r0, [r7, #12]
 801a4cc:	60b9      	str	r1, [r7, #8]
 801a4ce:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801a4d0:	68bb      	ldr	r3, [r7, #8]
 801a4d2:	69db      	ldr	r3, [r3, #28]
 801a4d4:	6879      	ldr	r1, [r7, #4]
 801a4d6:	4618      	mov	r0, r3
 801a4d8:	f004 fc7e 	bl	801edd8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a4dc:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 801a4de:	697b      	ldr	r3, [r7, #20]
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d008      	beq.n	801a4f6 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 801a4e4:	697b      	ldr	r3, [r7, #20]
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	3360      	adds	r3, #96	; 0x60
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	68fa      	ldr	r2, [r7, #12]
 801a4ee:	6979      	ldr	r1, [r7, #20]
 801a4f0:	4610      	mov	r0, r2
 801a4f2:	4798      	blx	r3
 801a4f4:	e004      	b.n	801a500 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801a4f6:	68fb      	ldr	r3, [r7, #12]
 801a4f8:	4903      	ldr	r1, [pc, #12]	; (801a508 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801a4fa:	4618      	mov	r0, r3
 801a4fc:	f7f2 fe10 	bl	800d120 <_Z10StringFromPKc>
}
 801a500:	68f8      	ldr	r0, [r7, #12]
 801a502:	3718      	adds	r7, #24
 801a504:	46bd      	mov	sp, r7
 801a506:	bd80      	pop	{r7, pc}
 801a508:	08025934 	.word	0x08025934

0801a50c <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 801a50c:	b580      	push	{r7, lr}
 801a50e:	b084      	sub	sp, #16
 801a510:	af00      	add	r7, sp, #0
 801a512:	6078      	str	r0, [r7, #4]
 801a514:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	69db      	ldr	r3, [r3, #28]
 801a51a:	6839      	ldr	r1, [r7, #0]
 801a51c:	4618      	mov	r0, r3
 801a51e:	f004 fc5b 	bl	801edd8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a522:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	2b00      	cmp	r3, #0
 801a528:	bf14      	ite	ne
 801a52a:	2301      	movne	r3, #1
 801a52c:	2300      	moveq	r3, #0
 801a52e:	b2db      	uxtb	r3, r3
}
 801a530:	4618      	mov	r0, r3
 801a532:	3710      	adds	r7, #16
 801a534:	46bd      	mov	sp, r7
 801a536:	bd80      	pop	{r7, pc}

0801a538 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801a538:	b580      	push	{r7, lr}
 801a53a:	b084      	sub	sp, #16
 801a53c:	af00      	add	r7, sp, #0
 801a53e:	6078      	str	r0, [r7, #4]
 801a540:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	6a1b      	ldr	r3, [r3, #32]
 801a546:	6839      	ldr	r1, [r7, #0]
 801a548:	4618      	mov	r0, r3
 801a54a:	f004 fc45 	bl	801edd8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a54e:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801a550:	68fb      	ldr	r3, [r7, #12]
 801a552:	2b00      	cmp	r3, #0
 801a554:	bf14      	ite	ne
 801a556:	2301      	movne	r3, #1
 801a558:	2300      	moveq	r3, #0
 801a55a:	b2db      	uxtb	r3, r3
}
 801a55c:	4618      	mov	r0, r3
 801a55e:	3710      	adds	r7, #16
 801a560:	46bd      	mov	sp, r7
 801a562:	bd80      	pop	{r7, pc}

0801a564 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 801a564:	b590      	push	{r4, r7, lr}
 801a566:	b089      	sub	sp, #36	; 0x24
 801a568:	af00      	add	r7, sp, #0
 801a56a:	60f8      	str	r0, [r7, #12]
 801a56c:	60b9      	str	r1, [r7, #8]
 801a56e:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801a570:	68bb      	ldr	r3, [r7, #8]
 801a572:	69db      	ldr	r3, [r3, #28]
 801a574:	6879      	ldr	r1, [r7, #4]
 801a576:	4618      	mov	r0, r3
 801a578:	f004 fc2e 	bl	801edd8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a57c:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801a57e:	2400      	movs	r4, #0
 801a580:	69fb      	ldr	r3, [r7, #28]
 801a582:	2b00      	cmp	r3, #0
 801a584:	d004      	beq.n	801a590 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801a586:	69f9      	ldr	r1, [r7, #28]
 801a588:	68f8      	ldr	r0, [r7, #12]
 801a58a:	f7f0 f829 	bl	800a5e0 <_ZN14MockNamedValueC1ERKS_>
 801a58e:	e00c      	b.n	801a5aa <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 801a590:	f107 0314 	add.w	r3, r7, #20
 801a594:	490a      	ldr	r1, [pc, #40]	; (801a5c0 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801a596:	4618      	mov	r0, r3
 801a598:	f7f1 ff7d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801a59c:	2401      	movs	r4, #1
 801a59e:	f107 0314 	add.w	r3, r7, #20
 801a5a2:	4619      	mov	r1, r3
 801a5a4:	68f8      	ldr	r0, [r7, #12]
 801a5a6:	f002 fc9b 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
 801a5aa:	2c00      	cmp	r4, #0
 801a5ac:	d004      	beq.n	801a5b8 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 801a5ae:	f107 0314 	add.w	r3, r7, #20
 801a5b2:	4618      	mov	r0, r3
 801a5b4:	f7f2 fb27 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 801a5b8:	68f8      	ldr	r0, [r7, #12]
 801a5ba:	3724      	adds	r7, #36	; 0x24
 801a5bc:	46bd      	mov	sp, r7
 801a5be:	bd90      	pop	{r4, r7, pc}
 801a5c0:	08025934 	.word	0x08025934

0801a5c4 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 801a5c4:	b590      	push	{r4, r7, lr}
 801a5c6:	b089      	sub	sp, #36	; 0x24
 801a5c8:	af00      	add	r7, sp, #0
 801a5ca:	60f8      	str	r0, [r7, #12]
 801a5cc:	60b9      	str	r1, [r7, #8]
 801a5ce:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801a5d0:	68bb      	ldr	r3, [r7, #8]
 801a5d2:	6a1b      	ldr	r3, [r3, #32]
 801a5d4:	6879      	ldr	r1, [r7, #4]
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	f004 fbfe 	bl	801edd8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a5dc:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801a5de:	2400      	movs	r4, #0
 801a5e0:	69fb      	ldr	r3, [r7, #28]
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d004      	beq.n	801a5f0 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801a5e6:	69f9      	ldr	r1, [r7, #28]
 801a5e8:	68f8      	ldr	r0, [r7, #12]
 801a5ea:	f7ef fff9 	bl	800a5e0 <_ZN14MockNamedValueC1ERKS_>
 801a5ee:	e00c      	b.n	801a60a <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 801a5f0:	f107 0314 	add.w	r3, r7, #20
 801a5f4:	490a      	ldr	r1, [pc, #40]	; (801a620 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801a5f6:	4618      	mov	r0, r3
 801a5f8:	f7f1 ff4d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801a5fc:	2401      	movs	r4, #1
 801a5fe:	f107 0314 	add.w	r3, r7, #20
 801a602:	4619      	mov	r1, r3
 801a604:	68f8      	ldr	r0, [r7, #12]
 801a606:	f002 fc6b 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
 801a60a:	2c00      	cmp	r4, #0
 801a60c:	d004      	beq.n	801a618 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 801a60e:	f107 0314 	add.w	r3, r7, #20
 801a612:	4618      	mov	r0, r3
 801a614:	f7f2 faf7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 801a618:	68f8      	ldr	r0, [r7, #12]
 801a61a:	3724      	adds	r7, #36	; 0x24
 801a61c:	46bd      	mov	sp, r7
 801a61e:	bd90      	pop	{r4, r7, pc}
 801a620:	08025934 	.word	0x08025934

0801a624 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 801a624:	b580      	push	{r7, lr}
 801a626:	b084      	sub	sp, #16
 801a628:	af00      	add	r7, sp, #0
 801a62a:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	69db      	ldr	r3, [r3, #28]
 801a630:	4618      	mov	r0, r3
 801a632:	f004 fc00 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 801a636:	60f8      	str	r0, [r7, #12]
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d014      	beq.n	801a668 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 801a63e:	68f9      	ldr	r1, [r7, #12]
 801a640:	6878      	ldr	r0, [r7, #4]
 801a642:	f000 fced 	bl	801b020 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a646:	4603      	mov	r3, r0
 801a648:	4618      	mov	r0, r3
 801a64a:	f000 fd1f 	bl	801b08c <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801a64e:	4603      	mov	r3, r0
 801a650:	f083 0301 	eor.w	r3, r3, #1
 801a654:	b2db      	uxtb	r3, r3
 801a656:	2b00      	cmp	r3, #0
 801a658:	d001      	beq.n	801a65e <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801a65a:	2300      	movs	r3, #0
 801a65c:	e023      	b.n	801a6a6 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 801a65e:	68f8      	ldr	r0, [r7, #12]
 801a660:	f004 faf2 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 801a664:	60f8      	str	r0, [r7, #12]
 801a666:	e7e7      	b.n	801a638 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	6a1b      	ldr	r3, [r3, #32]
 801a66c:	4618      	mov	r0, r3
 801a66e:	f004 fbe2 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 801a672:	60f8      	str	r0, [r7, #12]
 801a674:	68fb      	ldr	r3, [r7, #12]
 801a676:	2b00      	cmp	r3, #0
 801a678:	d014      	beq.n	801a6a4 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801a67a:	68f9      	ldr	r1, [r7, #12]
 801a67c:	6878      	ldr	r0, [r7, #4]
 801a67e:	f000 fccf 	bl	801b020 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a682:	4603      	mov	r3, r0
 801a684:	4618      	mov	r0, r3
 801a686:	f000 fd01 	bl	801b08c <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801a68a:	4603      	mov	r3, r0
 801a68c:	f083 0301 	eor.w	r3, r3, #1
 801a690:	b2db      	uxtb	r3, r3
 801a692:	2b00      	cmp	r3, #0
 801a694:	d001      	beq.n	801a69a <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801a696:	2300      	movs	r3, #0
 801a698:	e005      	b.n	801a6a6 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801a69a:	68f8      	ldr	r0, [r7, #12]
 801a69c:	f004 fad4 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 801a6a0:	60f8      	str	r0, [r7, #12]
 801a6a2:	e7e7      	b.n	801a674 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 801a6a4:	2301      	movs	r3, #1
}
 801a6a6:	4618      	mov	r0, r3
 801a6a8:	3710      	adds	r7, #16
 801a6aa:	46bd      	mov	sp, r7
 801a6ac:	bd80      	pop	{r7, pc}

0801a6ae <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 801a6ae:	b480      	push	{r7}
 801a6b0:	b083      	sub	sp, #12
 801a6b2:	af00      	add	r7, sp, #0
 801a6b4:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	2201      	movs	r2, #1
 801a6ba:	731a      	strb	r2, [r3, #12]
    return *this;
 801a6bc:	687b      	ldr	r3, [r7, #4]
}
 801a6be:	4618      	mov	r0, r3
 801a6c0:	370c      	adds	r7, #12
 801a6c2:	46bd      	mov	sp, r7
 801a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6c8:	4770      	bx	lr

0801a6ca <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801a6ca:	b480      	push	{r7}
 801a6cc:	b083      	sub	sp, #12
 801a6ce:	af00      	add	r7, sp, #0
 801a6d0:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6da:	429a      	cmp	r2, r3
 801a6dc:	bf0c      	ite	eq
 801a6de:	2301      	moveq	r3, #1
 801a6e0:	2300      	movne	r3, #0
 801a6e2:	b2db      	uxtb	r3, r3
}
 801a6e4:	4618      	mov	r0, r3
 801a6e6:	370c      	adds	r7, #12
 801a6e8:	46bd      	mov	sp, r7
 801a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ee:	4770      	bx	lr

0801a6f0 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 801a6f0:	b480      	push	{r7}
 801a6f2:	b083      	sub	sp, #12
 801a6f4:	af00      	add	r7, sp, #0
 801a6f6:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a700:	429a      	cmp	r2, r3
 801a702:	bf34      	ite	cc
 801a704:	2301      	movcc	r3, #1
 801a706:	2300      	movcs	r3, #0
 801a708:	b2db      	uxtb	r3, r3
}
 801a70a:	4618      	mov	r0, r3
 801a70c:	370c      	adds	r7, #12
 801a70e:	46bd      	mov	sp, r7
 801a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a714:	4770      	bx	lr

0801a716 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801a716:	b580      	push	{r7, lr}
 801a718:	b082      	sub	sp, #8
 801a71a:	af00      	add	r7, sp, #0
 801a71c:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	33cc      	adds	r3, #204	; 0xcc
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	6878      	ldr	r0, [r7, #4]
 801a728:	4798      	blx	r3
 801a72a:	4603      	mov	r3, r0
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d00c      	beq.n	801a74a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	7b1b      	ldrb	r3, [r3, #12]
 801a734:	f083 0301 	eor.w	r3, r3, #1
 801a738:	b2db      	uxtb	r3, r3
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d103      	bne.n	801a746 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	7b5b      	ldrb	r3, [r3, #13]
 801a742:	2b00      	cmp	r3, #0
 801a744:	d001      	beq.n	801a74a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801a746:	2301      	movs	r3, #1
 801a748:	e000      	b.n	801a74c <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801a74a:	2300      	movs	r3, #0
}
 801a74c:	4618      	mov	r0, r3
 801a74e:	3708      	adds	r7, #8
 801a750:	46bd      	mov	sp, r7
 801a752:	bd80      	pop	{r7, pc}

0801a754 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801a754:	b580      	push	{r7, lr}
 801a756:	b082      	sub	sp, #8
 801a758:	af00      	add	r7, sp, #0
 801a75a:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	33d0      	adds	r3, #208	; 0xd0
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	6878      	ldr	r0, [r7, #4]
 801a766:	4798      	blx	r3
 801a768:	4603      	mov	r3, r0
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d006      	beq.n	801a77c <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801a774:	2b00      	cmp	r3, #0
 801a776:	d001      	beq.n	801a77c <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801a778:	2301      	movs	r3, #1
 801a77a:	e000      	b.n	801a77e <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 801a77c:	2300      	movs	r3, #0
}
 801a77e:	4618      	mov	r0, r3
 801a780:	3708      	adds	r7, #8
 801a782:	46bd      	mov	sp, r7
 801a784:	bd80      	pop	{r7, pc}

0801a786 <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801a786:	b580      	push	{r7, lr}
 801a788:	b082      	sub	sp, #8
 801a78a:	af00      	add	r7, sp, #0
 801a78c:	6078      	str	r0, [r7, #4]
 801a78e:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a794:	1c5a      	adds	r2, r3, #1
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	691b      	ldr	r3, [r3, #16]
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d00c      	beq.n	801a7bc <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801a7a6:	683a      	ldr	r2, [r7, #0]
 801a7a8:	429a      	cmp	r2, r3
 801a7aa:	d304      	bcc.n	801a7b6 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	695b      	ldr	r3, [r3, #20]
 801a7b0:	683a      	ldr	r2, [r7, #0]
 801a7b2:	429a      	cmp	r2, r3
 801a7b4:	d902      	bls.n	801a7bc <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	2201      	movs	r2, #1
 801a7ba:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	33ec      	adds	r3, #236	; 0xec
 801a7c2:	681b      	ldr	r3, [r3, #0]
 801a7c4:	6878      	ldr	r0, [r7, #4]
 801a7c6:	4798      	blx	r3
}
 801a7c8:	bf00      	nop
 801a7ca:	3708      	adds	r7, #8
 801a7cc:	46bd      	mov	sp, r7
 801a7ce:	bd80      	pop	{r7, pc}

0801a7d0 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 801a7d0:	b480      	push	{r7}
 801a7d2:	b083      	sub	sp, #12
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	2201      	movs	r2, #1
 801a7dc:	735a      	strb	r2, [r3, #13]
}
 801a7de:	bf00      	nop
 801a7e0:	370c      	adds	r7, #12
 801a7e2:	46bd      	mov	sp, r7
 801a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7e8:	4770      	bx	lr

0801a7ea <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801a7ea:	b480      	push	{r7}
 801a7ec:	b083      	sub	sp, #12
 801a7ee:	af00      	add	r7, sp, #0
 801a7f0:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	2201      	movs	r2, #1
 801a7f6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801a7fa:	bf00      	nop
 801a7fc:	370c      	adds	r7, #12
 801a7fe:	46bd      	mov	sp, r7
 801a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a804:	4770      	bx	lr

0801a806 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801a806:	b580      	push	{r7, lr}
 801a808:	b084      	sub	sp, #16
 801a80a:	af00      	add	r7, sp, #0
 801a80c:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801a814:	f083 0301 	eor.w	r3, r3, #1
 801a818:	b2da      	uxtb	r2, r3
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	2200      	movs	r2, #0
 801a824:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	69db      	ldr	r3, [r3, #28]
 801a82a:	4618      	mov	r0, r3
 801a82c:	f004 fb03 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 801a830:	60f8      	str	r0, [r7, #12]
 801a832:	68fb      	ldr	r3, [r7, #12]
 801a834:	2b00      	cmp	r3, #0
 801a836:	d00d      	beq.n	801a854 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801a838:	68f9      	ldr	r1, [r7, #12]
 801a83a:	6878      	ldr	r0, [r7, #4]
 801a83c:	f000 fbf0 	bl	801b020 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a840:	4603      	mov	r3, r0
 801a842:	2100      	movs	r1, #0
 801a844:	4618      	mov	r0, r3
 801a846:	f000 fc11 	bl	801b06c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801a84a:	68f8      	ldr	r0, [r7, #12]
 801a84c:	f004 f9fc 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 801a850:	60f8      	str	r0, [r7, #12]
 801a852:	e7ee      	b.n	801a832 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	6a1b      	ldr	r3, [r3, #32]
 801a858:	4618      	mov	r0, r3
 801a85a:	f004 faec 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 801a85e:	60f8      	str	r0, [r7, #12]
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	2b00      	cmp	r3, #0
 801a864:	d00d      	beq.n	801a882 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801a866:	68f9      	ldr	r1, [r7, #12]
 801a868:	6878      	ldr	r0, [r7, #4]
 801a86a:	f000 fbd9 	bl	801b020 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a86e:	4603      	mov	r3, r0
 801a870:	2100      	movs	r1, #0
 801a872:	4618      	mov	r0, r3
 801a874:	f000 fbfa 	bl	801b06c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801a878:	68f8      	ldr	r0, [r7, #12]
 801a87a:	f004 f9e5 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 801a87e:	60f8      	str	r0, [r7, #12]
 801a880:	e7ee      	b.n	801a860 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 801a882:	bf00      	nop
 801a884:	3710      	adds	r7, #16
 801a886:	46bd      	mov	sp, r7
 801a888:	bd80      	pop	{r7, pc}

0801a88a <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801a88a:	b590      	push	{r4, r7, lr}
 801a88c:	b087      	sub	sp, #28
 801a88e:	af00      	add	r7, sp, #0
 801a890:	6078      	str	r0, [r7, #4]
 801a892:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	69db      	ldr	r3, [r3, #28]
 801a898:	4618      	mov	r0, r3
 801a89a:	f004 facc 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 801a89e:	6178      	str	r0, [r7, #20]
 801a8a0:	697b      	ldr	r3, [r7, #20]
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d022      	beq.n	801a8ec <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801a8a6:	f107 030c 	add.w	r3, r7, #12
 801a8aa:	6979      	ldr	r1, [r7, #20]
 801a8ac:	4618      	mov	r0, r3
 801a8ae:	f004 fa06 	bl	801ecbe <_ZNK22MockNamedValueListNode7getNameEv>
 801a8b2:	f107 030c 	add.w	r3, r7, #12
 801a8b6:	6839      	ldr	r1, [r7, #0]
 801a8b8:	4618      	mov	r0, r3
 801a8ba:	f7f2 f9b0 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801a8be:	4603      	mov	r3, r0
 801a8c0:	461c      	mov	r4, r3
 801a8c2:	f107 030c 	add.w	r3, r7, #12
 801a8c6:	4618      	mov	r0, r3
 801a8c8:	f7f2 f99d 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801a8cc:	2c00      	cmp	r4, #0
 801a8ce:	d008      	beq.n	801a8e2 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801a8d0:	6979      	ldr	r1, [r7, #20]
 801a8d2:	6878      	ldr	r0, [r7, #4]
 801a8d4:	f000 fba4 	bl	801b020 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a8d8:	4603      	mov	r3, r0
 801a8da:	2101      	movs	r1, #1
 801a8dc:	4618      	mov	r0, r3
 801a8de:	f000 fbc5 	bl	801b06c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801a8e2:	6978      	ldr	r0, [r7, #20]
 801a8e4:	f004 f9b0 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 801a8e8:	6178      	str	r0, [r7, #20]
 801a8ea:	e7d9      	b.n	801a8a0 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801a8ec:	bf00      	nop
 801a8ee:	371c      	adds	r7, #28
 801a8f0:	46bd      	mov	sp, r7
 801a8f2:	bd90      	pop	{r4, r7, pc}

0801a8f4 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 801a8f4:	b590      	push	{r4, r7, lr}
 801a8f6:	b087      	sub	sp, #28
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	6078      	str	r0, [r7, #4]
 801a8fc:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	6a1b      	ldr	r3, [r3, #32]
 801a902:	4618      	mov	r0, r3
 801a904:	f004 fa97 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 801a908:	6178      	str	r0, [r7, #20]
 801a90a:	697b      	ldr	r3, [r7, #20]
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d022      	beq.n	801a956 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801a910:	f107 030c 	add.w	r3, r7, #12
 801a914:	6979      	ldr	r1, [r7, #20]
 801a916:	4618      	mov	r0, r3
 801a918:	f004 f9d1 	bl	801ecbe <_ZNK22MockNamedValueListNode7getNameEv>
 801a91c:	f107 030c 	add.w	r3, r7, #12
 801a920:	6839      	ldr	r1, [r7, #0]
 801a922:	4618      	mov	r0, r3
 801a924:	f7f2 f97b 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801a928:	4603      	mov	r3, r0
 801a92a:	461c      	mov	r4, r3
 801a92c:	f107 030c 	add.w	r3, r7, #12
 801a930:	4618      	mov	r0, r3
 801a932:	f7f2 f968 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801a936:	2c00      	cmp	r4, #0
 801a938:	d008      	beq.n	801a94c <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801a93a:	6979      	ldr	r1, [r7, #20]
 801a93c:	6878      	ldr	r0, [r7, #4]
 801a93e:	f000 fb6f 	bl	801b020 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a942:	4603      	mov	r3, r0
 801a944:	2101      	movs	r1, #1
 801a946:	4618      	mov	r0, r3
 801a948:	f000 fb90 	bl	801b06c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801a94c:	6978      	ldr	r0, [r7, #20]
 801a94e:	f004 f97b 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 801a952:	6178      	str	r0, [r7, #20]
 801a954:	e7d9      	b.n	801a90a <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801a956:	bf00      	nop
 801a958:	371c      	adds	r7, #28
 801a95a:	46bd      	mov	sp, r7
 801a95c:	bd90      	pop	{r4, r7, pc}
	...

0801a960 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 801a960:	b580      	push	{r7, lr}
 801a962:	b086      	sub	sp, #24
 801a964:	af00      	add	r7, sp, #0
 801a966:	60f8      	str	r0, [r7, #12]
 801a968:	60b9      	str	r1, [r7, #8]
 801a96a:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801a96c:	68bb      	ldr	r3, [r7, #8]
 801a96e:	69db      	ldr	r3, [r3, #28]
 801a970:	6879      	ldr	r1, [r7, #4]
 801a972:	4618      	mov	r0, r3
 801a974:	f004 fa30 	bl	801edd8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a978:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801a97a:	697b      	ldr	r3, [r7, #20]
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d005      	beq.n	801a98c <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 801a980:	68fb      	ldr	r3, [r7, #12]
 801a982:	6979      	ldr	r1, [r7, #20]
 801a984:	4618      	mov	r0, r3
 801a986:	f7ff fa0b 	bl	8019da0 <_Z10StringFromRK14MockNamedValue>
 801a98a:	e003      	b.n	801a994 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 801a98c:	4903      	ldr	r1, [pc, #12]	; (801a99c <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 801a98e:	68f8      	ldr	r0, [r7, #12]
 801a990:	f7f1 fd81 	bl	800c496 <_ZN12SimpleStringC1EPKc>
}
 801a994:	68f8      	ldr	r0, [r7, #12]
 801a996:	3718      	adds	r7, #24
 801a998:	46bd      	mov	sp, r7
 801a99a:	bd80      	pop	{r7, pc}
 801a99c:	080259a0 	.word	0x080259a0

0801a9a0 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 801a9a0:	b590      	push	{r4, r7, lr}
 801a9a2:	b087      	sub	sp, #28
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	6078      	str	r0, [r7, #4]
 801a9a8:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	69dc      	ldr	r4, [r3, #28]
 801a9ae:	683b      	ldr	r3, [r7, #0]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	335c      	adds	r3, #92	; 0x5c
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	f107 020c 	add.w	r2, r7, #12
 801a9ba:	6839      	ldr	r1, [r7, #0]
 801a9bc:	4610      	mov	r0, r2
 801a9be:	4798      	blx	r3
 801a9c0:	f107 030c 	add.w	r3, r7, #12
 801a9c4:	4619      	mov	r1, r3
 801a9c6:	4620      	mov	r0, r4
 801a9c8:	f004 fa06 	bl	801edd8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a9cc:	6178      	str	r0, [r7, #20]
 801a9ce:	f107 030c 	add.w	r3, r7, #12
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	f7f2 f917 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801a9d8:	697b      	ldr	r3, [r7, #20]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d00d      	beq.n	801a9fa <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 801a9de:	697b      	ldr	r3, [r7, #20]
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	3350      	adds	r3, #80	; 0x50
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	6839      	ldr	r1, [r7, #0]
 801a9e8:	6978      	ldr	r0, [r7, #20]
 801a9ea:	4798      	blx	r3
 801a9ec:	4603      	mov	r3, r0
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	bf14      	ite	ne
 801a9f2:	2301      	movne	r3, #1
 801a9f4:	2300      	moveq	r3, #0
 801a9f6:	b2db      	uxtb	r3, r3
 801a9f8:	e006      	b.n	801aa08 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	7b1b      	ldrb	r3, [r3, #12]
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	bf14      	ite	ne
 801aa02:	2301      	movne	r3, #1
 801aa04:	2300      	moveq	r3, #0
 801aa06:	b2db      	uxtb	r3, r3
}
 801aa08:	4618      	mov	r0, r3
 801aa0a:	371c      	adds	r7, #28
 801aa0c:	46bd      	mov	sp, r7
 801aa0e:	bd90      	pop	{r4, r7, pc}

0801aa10 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 801aa10:	b590      	push	{r4, r7, lr}
 801aa12:	b087      	sub	sp, #28
 801aa14:	af00      	add	r7, sp, #0
 801aa16:	6078      	str	r0, [r7, #4]
 801aa18:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	6a1c      	ldr	r4, [r3, #32]
 801aa1e:	683b      	ldr	r3, [r7, #0]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	335c      	adds	r3, #92	; 0x5c
 801aa24:	681b      	ldr	r3, [r3, #0]
 801aa26:	f107 020c 	add.w	r2, r7, #12
 801aa2a:	6839      	ldr	r1, [r7, #0]
 801aa2c:	4610      	mov	r0, r2
 801aa2e:	4798      	blx	r3
 801aa30:	f107 030c 	add.w	r3, r7, #12
 801aa34:	4619      	mov	r1, r3
 801aa36:	4620      	mov	r0, r4
 801aa38:	f004 f9ce 	bl	801edd8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801aa3c:	6178      	str	r0, [r7, #20]
 801aa3e:	f107 030c 	add.w	r3, r7, #12
 801aa42:	4618      	mov	r0, r3
 801aa44:	f7f2 f8df 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801aa48:	697b      	ldr	r3, [r7, #20]
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	d00d      	beq.n	801aa6a <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 801aa4e:	697b      	ldr	r3, [r7, #20]
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	3354      	adds	r3, #84	; 0x54
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	6839      	ldr	r1, [r7, #0]
 801aa58:	6978      	ldr	r0, [r7, #20]
 801aa5a:	4798      	blx	r3
 801aa5c:	4603      	mov	r3, r0
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	bf14      	ite	ne
 801aa62:	2301      	movne	r3, #1
 801aa64:	2300      	moveq	r3, #0
 801aa66:	b2db      	uxtb	r3, r3
 801aa68:	e006      	b.n	801aa78 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	7b1b      	ldrb	r3, [r3, #12]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	bf14      	ite	ne
 801aa72:	2301      	movne	r3, #1
 801aa74:	2300      	moveq	r3, #0
 801aa76:	b2db      	uxtb	r3, r3
}
 801aa78:	4618      	mov	r0, r3
 801aa7a:	371c      	adds	r7, #28
 801aa7c:	46bd      	mov	sp, r7
 801aa7e:	bd90      	pop	{r4, r7, pc}

0801aa80 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 801aa80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa82:	b0a1      	sub	sp, #132	; 0x84
 801aa84:	af02      	add	r7, sp, #8
 801aa86:	6078      	str	r0, [r7, #4]
 801aa88:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801aa8a:	49bc      	ldr	r1, [pc, #752]	; (801ad7c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801aa8c:	6878      	ldr	r0, [r7, #4]
 801aa8e:	f7f1 fd02 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 801aa92:	683b      	ldr	r3, [r7, #0]
 801aa94:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d012      	beq.n	801aac2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 801aa9c:	683b      	ldr	r3, [r7, #0]
 801aa9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801aaa0:	f107 030c 	add.w	r3, r7, #12
 801aaa4:	49b6      	ldr	r1, [pc, #728]	; (801ad80 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	f7f2 fdb4 	bl	800d614 <_Z16StringFromFormatPKcz>
 801aaac:	f107 030c 	add.w	r3, r7, #12
 801aab0:	4619      	mov	r1, r3
 801aab2:	6878      	ldr	r0, [r7, #4]
 801aab4:	f7f1 fd5b 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801aab8:	f107 030c 	add.w	r3, r7, #12
 801aabc:	4618      	mov	r0, r3
 801aabe:	f7f2 f8a2 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    str += getName();
 801aac2:	f107 0314 	add.w	r3, r7, #20
 801aac6:	6839      	ldr	r1, [r7, #0]
 801aac8:	4618      	mov	r0, r3
 801aaca:	f7ff f989 	bl	8019de0 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801aace:	f107 0314 	add.w	r3, r7, #20
 801aad2:	4619      	mov	r1, r3
 801aad4:	6878      	ldr	r0, [r7, #4]
 801aad6:	f7f2 f913 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801aada:	f107 0314 	add.w	r3, r7, #20
 801aade:	4618      	mov	r0, r3
 801aae0:	f7f2 f891 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801aae4:	49a7      	ldr	r1, [pc, #668]	; (801ad84 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801aae6:	6878      	ldr	r0, [r7, #4]
 801aae8:	f7f2 f91c 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 801aaec:	683b      	ldr	r3, [r7, #0]
 801aaee:	691b      	ldr	r3, [r3, #16]
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d02d      	beq.n	801ab50 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801aaf4:	683b      	ldr	r3, [r7, #0]
 801aaf6:	691a      	ldr	r2, [r3, #16]
 801aaf8:	683b      	ldr	r3, [r7, #0]
 801aafa:	695b      	ldr	r3, [r3, #20]
 801aafc:	429a      	cmp	r2, r3
 801aafe:	d113      	bne.n	801ab28 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 801ab00:	683b      	ldr	r3, [r7, #0]
 801ab02:	691a      	ldr	r2, [r3, #16]
 801ab04:	f107 031c 	add.w	r3, r7, #28
 801ab08:	499f      	ldr	r1, [pc, #636]	; (801ad88 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	f7f2 fd82 	bl	800d614 <_Z16StringFromFormatPKcz>
 801ab10:	f107 031c 	add.w	r3, r7, #28
 801ab14:	4619      	mov	r1, r3
 801ab16:	6878      	ldr	r0, [r7, #4]
 801ab18:	f7f2 f8f2 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801ab1c:	f107 031c 	add.w	r3, r7, #28
 801ab20:	4618      	mov	r0, r3
 801ab22:	f7f2 f870 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ab26:	e013      	b.n	801ab50 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801ab28:	683b      	ldr	r3, [r7, #0]
 801ab2a:	691a      	ldr	r2, [r3, #16]
 801ab2c:	683b      	ldr	r3, [r7, #0]
 801ab2e:	695b      	ldr	r3, [r3, #20]
 801ab30:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801ab34:	4995      	ldr	r1, [pc, #596]	; (801ad8c <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801ab36:	f7f2 fd6d 	bl	800d614 <_Z16StringFromFormatPKcz>
 801ab3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ab3e:	4619      	mov	r1, r3
 801ab40:	6878      	ldr	r0, [r7, #4]
 801ab42:	f7f2 f8dd 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801ab46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ab4a:	4618      	mov	r0, r3
 801ab4c:	f7f2 f85b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 801ab50:	683b      	ldr	r3, [r7, #0]
 801ab52:	69db      	ldr	r3, [r3, #28]
 801ab54:	4618      	mov	r0, r3
 801ab56:	f004 f96e 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 801ab5a:	4603      	mov	r3, r0
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d109      	bne.n	801ab74 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801ab60:	683b      	ldr	r3, [r7, #0]
 801ab62:	6a1b      	ldr	r3, [r3, #32]
 801ab64:	4618      	mov	r0, r3
 801ab66:	f004 f966 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 801ab6a:	4603      	mov	r3, r0
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d101      	bne.n	801ab74 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801ab70:	2301      	movs	r3, #1
 801ab72:	e000      	b.n	801ab76 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801ab74:	2300      	movs	r3, #0
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d00b      	beq.n	801ab92 <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801ab7a:	683b      	ldr	r3, [r7, #0]
 801ab7c:	7b1b      	ldrb	r3, [r3, #12]
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d001      	beq.n	801ab86 <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 801ab82:	4b83      	ldr	r3, [pc, #524]	; (801ad90 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 801ab84:	e000      	b.n	801ab88 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801ab86:	4b83      	ldr	r3, [pc, #524]	; (801ad94 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 801ab88:	4619      	mov	r1, r3
 801ab8a:	6878      	ldr	r0, [r7, #4]
 801ab8c:	f7f2 f8ca 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
 801ab90:	e0e3      	b.n	801ad5a <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 801ab92:	683b      	ldr	r3, [r7, #0]
 801ab94:	69db      	ldr	r3, [r3, #28]
 801ab96:	4618      	mov	r0, r3
 801ab98:	f004 f94d 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 801ab9c:	6778      	str	r0, [r7, #116]	; 0x74
 801ab9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d069      	beq.n	801ac78 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 801aba4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801aba8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801abaa:	4618      	mov	r0, r3
 801abac:	f004 f89a 	bl	801ece4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801abb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801abb4:	4618      	mov	r0, r3
 801abb6:	f7f1 fff9 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801abba:	4605      	mov	r5, r0
 801abbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801abc0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801abc2:	4618      	mov	r0, r3
 801abc4:	f004 f87b 	bl	801ecbe <_ZNK22MockNamedValueListNode7getNameEv>
 801abc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801abcc:	4618      	mov	r0, r3
 801abce:	f7f1 ffed 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801abd2:	4606      	mov	r6, r0
 801abd4:	683b      	ldr	r3, [r7, #0]
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	33a4      	adds	r3, #164	; 0xa4
 801abda:	681c      	ldr	r4, [r3, #0]
 801abdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801abe0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801abe2:	4618      	mov	r0, r3
 801abe4:	f004 f86b 	bl	801ecbe <_ZNK22MockNamedValueListNode7getNameEv>
 801abe8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801abec:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801abf0:	6839      	ldr	r1, [r7, #0]
 801abf2:	4618      	mov	r0, r3
 801abf4:	47a0      	blx	r4
 801abf6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801abfa:	4618      	mov	r0, r3
 801abfc:	f7f1 ffd6 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801ac00:	4603      	mov	r3, r0
 801ac02:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801ac06:	9300      	str	r3, [sp, #0]
 801ac08:	4633      	mov	r3, r6
 801ac0a:	462a      	mov	r2, r5
 801ac0c:	4962      	ldr	r1, [pc, #392]	; (801ad98 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 801ac0e:	f7f2 fd01 	bl	800d614 <_Z16StringFromFormatPKcz>
 801ac12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ac16:	4619      	mov	r1, r3
 801ac18:	6878      	ldr	r0, [r7, #4]
 801ac1a:	f7f2 f871 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801ac1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ac22:	4618      	mov	r0, r3
 801ac24:	f7f1 ffef 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ac28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801ac2c:	4618      	mov	r0, r3
 801ac2e:	f7f1 ffea 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ac32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac36:	4618      	mov	r0, r3
 801ac38:	f7f1 ffe5 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ac3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ac40:	4618      	mov	r0, r3
 801ac42:	f7f1 ffe0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ac46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ac4a:	4618      	mov	r0, r3
 801ac4c:	f7f1 ffdb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801ac50:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801ac52:	f003 fff9 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 801ac56:	4603      	mov	r3, r0
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	bf14      	ite	ne
 801ac5c:	2301      	movne	r3, #1
 801ac5e:	2300      	moveq	r3, #0
 801ac60:	b2db      	uxtb	r3, r3
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d003      	beq.n	801ac6e <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801ac66:	494d      	ldr	r1, [pc, #308]	; (801ad9c <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801ac68:	6878      	ldr	r0, [r7, #4]
 801ac6a:	f7f2 f85b 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 801ac6e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801ac70:	f003 ffea 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 801ac74:	6778      	str	r0, [r7, #116]	; 0x74
 801ac76:	e792      	b.n	801ab9e <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801ac78:	683b      	ldr	r3, [r7, #0]
 801ac7a:	69db      	ldr	r3, [r3, #28]
 801ac7c:	4618      	mov	r0, r3
 801ac7e:	f004 f8da 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 801ac82:	4603      	mov	r3, r0
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d009      	beq.n	801ac9c <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801ac88:	683b      	ldr	r3, [r7, #0]
 801ac8a:	6a1b      	ldr	r3, [r3, #32]
 801ac8c:	4618      	mov	r0, r3
 801ac8e:	f004 f8d2 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 801ac92:	4603      	mov	r3, r0
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	d001      	beq.n	801ac9c <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801ac98:	2301      	movs	r3, #1
 801ac9a:	e000      	b.n	801ac9e <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 801ac9c:	2300      	movs	r3, #0
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	d003      	beq.n	801acaa <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 801aca2:	493e      	ldr	r1, [pc, #248]	; (801ad9c <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801aca4:	6878      	ldr	r0, [r7, #4]
 801aca6:	f7f2 f83d 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801acaa:	683b      	ldr	r3, [r7, #0]
 801acac:	6a1b      	ldr	r3, [r3, #32]
 801acae:	4618      	mov	r0, r3
 801acb0:	f004 f8c1 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 801acb4:	6778      	str	r0, [r7, #116]	; 0x74
 801acb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d046      	beq.n	801ad4a <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 801acbc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801acc0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801acc2:	4618      	mov	r0, r3
 801acc4:	f004 f80e 	bl	801ece4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801acc8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801accc:	4618      	mov	r0, r3
 801acce:	f7f1 ff6d 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801acd2:	4604      	mov	r4, r0
 801acd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801acd8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801acda:	4618      	mov	r0, r3
 801acdc:	f003 ffef 	bl	801ecbe <_ZNK22MockNamedValueListNode7getNameEv>
 801ace0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801ace4:	4618      	mov	r0, r3
 801ace6:	f7f1 ff61 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801acea:	4603      	mov	r3, r0
 801acec:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801acf0:	4622      	mov	r2, r4
 801acf2:	492b      	ldr	r1, [pc, #172]	; (801ada0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801acf4:	f7f2 fc8e 	bl	800d614 <_Z16StringFromFormatPKcz>
 801acf8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801acfc:	4619      	mov	r1, r3
 801acfe:	6878      	ldr	r0, [r7, #4]
 801ad00:	f7f1 fffe 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801ad04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801ad08:	4618      	mov	r0, r3
 801ad0a:	f7f1 ff7c 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ad0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801ad12:	4618      	mov	r0, r3
 801ad14:	f7f1 ff77 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ad18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801ad1c:	4618      	mov	r0, r3
 801ad1e:	f7f1 ff72 	bl	800cc06 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801ad22:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801ad24:	f003 ff90 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 801ad28:	4603      	mov	r3, r0
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	bf14      	ite	ne
 801ad2e:	2301      	movne	r3, #1
 801ad30:	2300      	moveq	r3, #0
 801ad32:	b2db      	uxtb	r3, r3
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	d003      	beq.n	801ad40 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801ad38:	4918      	ldr	r1, [pc, #96]	; (801ad9c <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801ad3a:	6878      	ldr	r0, [r7, #4]
 801ad3c:	f7f1 fff2 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 801ad40:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801ad42:	f003 ff81 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 801ad46:	6778      	str	r0, [r7, #116]	; 0x74
 801ad48:	e7b5      	b.n	801acb6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801ad4a:	683b      	ldr	r3, [r7, #0]
 801ad4c:	7b1b      	ldrb	r3, [r3, #12]
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d003      	beq.n	801ad5a <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801ad52:	4914      	ldr	r1, [pc, #80]	; (801ada4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801ad54:	6878      	ldr	r0, [r7, #4]
 801ad56:	f7f1 ffe5 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801ad5a:	683b      	ldr	r3, [r7, #0]
 801ad5c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801ad5e:	683b      	ldr	r3, [r7, #0]
 801ad60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801ad62:	2b01      	cmp	r3, #1
 801ad64:	d101      	bne.n	801ad6a <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801ad66:	4c05      	ldr	r4, [pc, #20]	; (801ad7c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801ad68:	e000      	b.n	801ad6c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801ad6a:	4c0f      	ldr	r4, [pc, #60]	; (801ada8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801ad6c:	683b      	ldr	r3, [r7, #0]
 801ad6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801ad70:	683a      	ldr	r2, [r7, #0]
 801ad72:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801ad74:	2a01      	cmp	r2, #1
 801ad76:	d119      	bne.n	801adac <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801ad78:	4a00      	ldr	r2, [pc, #0]	; (801ad7c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801ad7a:	e018      	b.n	801adae <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801ad7c:	08025934 	.word	0x08025934
 801ad80:	080259a8 	.word	0x080259a8
 801ad84:	080259c0 	.word	0x080259c0
 801ad88:	080259c8 	.word	0x080259c8
 801ad8c:	080259e8 	.word	0x080259e8
 801ad90:	08025a0c 	.word	0x08025a0c
 801ad94:	08025a24 	.word	0x08025a24
 801ad98:	08025a34 	.word	0x08025a34
 801ad9c:	08025a40 	.word	0x08025a40
 801ada0:	08025a44 	.word	0x08025a44
 801ada4:	08025a54 	.word	0x08025a54
 801ada8:	08025a74 	.word	0x08025a74
 801adac:	4a0c      	ldr	r2, [pc, #48]	; (801ade0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 801adae:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801adb2:	9201      	str	r2, [sp, #4]
 801adb4:	9300      	str	r3, [sp, #0]
 801adb6:	4623      	mov	r3, r4
 801adb8:	460a      	mov	r2, r1
 801adba:	490a      	ldr	r1, [pc, #40]	; (801ade4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 801adbc:	f7f2 fc2a 	bl	800d614 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801adc0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801adc4:	4619      	mov	r1, r3
 801adc6:	6878      	ldr	r0, [r7, #4]
 801adc8:	f7f1 ff9a 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801adcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801add0:	4618      	mov	r0, r3
 801add2:	f7f1 ff18 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    return str;
 801add6:	bf00      	nop
}
 801add8:	6878      	ldr	r0, [r7, #4]
 801adda:	377c      	adds	r7, #124	; 0x7c
 801addc:	46bd      	mov	sp, r7
 801adde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ade0:	08025a74 	.word	0x08025a74
 801ade4:	08025a78 	.word	0x08025a78

0801ade8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801ade8:	b590      	push	{r4, r7, lr}
 801adea:	b095      	sub	sp, #84	; 0x54
 801adec:	af00      	add	r7, sp, #0
 801adee:	6078      	str	r0, [r7, #4]
 801adf0:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801adf2:	496c      	ldr	r1, [pc, #432]	; (801afa4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801adf4:	6878      	ldr	r0, [r7, #4]
 801adf6:	f7f1 fb4e 	bl	800c496 <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801adfa:	683b      	ldr	r3, [r7, #0]
 801adfc:	69db      	ldr	r3, [r3, #28]
 801adfe:	4618      	mov	r0, r3
 801ae00:	f004 f819 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 801ae04:	64f8      	str	r0, [r7, #76]	; 0x4c
 801ae06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d05e      	beq.n	801aeca <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801ae0c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801ae0e:	6838      	ldr	r0, [r7, #0]
 801ae10:	f000 f906 	bl	801b020 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801ae14:	4603      	mov	r3, r0
 801ae16:	4618      	mov	r0, r3
 801ae18:	f000 f938 	bl	801b08c <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801ae1c:	4603      	mov	r3, r0
 801ae1e:	f083 0301 	eor.w	r3, r3, #1
 801ae22:	b2db      	uxtb	r3, r3
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	d04b      	beq.n	801aec0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801ae28:	f107 030c 	add.w	r3, r7, #12
 801ae2c:	495d      	ldr	r1, [pc, #372]	; (801afa4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801ae2e:	4618      	mov	r0, r3
 801ae30:	f7f1 fb31 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801ae34:	f107 030c 	add.w	r3, r7, #12
 801ae38:	4619      	mov	r1, r3
 801ae3a:	6878      	ldr	r0, [r7, #4]
 801ae3c:	f7f1 ff34 	bl	800cca8 <_ZneRK12SimpleStringS1_>
 801ae40:	4603      	mov	r3, r0
 801ae42:	461c      	mov	r4, r3
 801ae44:	f107 030c 	add.w	r3, r7, #12
 801ae48:	4618      	mov	r0, r3
 801ae4a:	f7f1 fedc 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ae4e:	2c00      	cmp	r4, #0
 801ae50:	d003      	beq.n	801ae5a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801ae52:	4955      	ldr	r1, [pc, #340]	; (801afa8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801ae54:	6878      	ldr	r0, [r7, #4]
 801ae56:	f7f1 ff65 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801ae5a:	f107 031c 	add.w	r3, r7, #28
 801ae5e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801ae60:	4618      	mov	r0, r3
 801ae62:	f003 ff3f 	bl	801ece4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801ae66:	f107 031c 	add.w	r3, r7, #28
 801ae6a:	4618      	mov	r0, r3
 801ae6c:	f7f1 fe9e 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801ae70:	4604      	mov	r4, r0
 801ae72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ae76:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801ae78:	4618      	mov	r0, r3
 801ae7a:	f003 ff20 	bl	801ecbe <_ZNK22MockNamedValueListNode7getNameEv>
 801ae7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ae82:	4618      	mov	r0, r3
 801ae84:	f7f1 fe92 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801ae88:	4603      	mov	r3, r0
 801ae8a:	f107 0014 	add.w	r0, r7, #20
 801ae8e:	4622      	mov	r2, r4
 801ae90:	4946      	ldr	r1, [pc, #280]	; (801afac <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801ae92:	f7f2 fbbf 	bl	800d614 <_Z16StringFromFormatPKcz>
 801ae96:	f107 0314 	add.w	r3, r7, #20
 801ae9a:	4619      	mov	r1, r3
 801ae9c:	6878      	ldr	r0, [r7, #4]
 801ae9e:	f7f1 ff2f 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801aea2:	f107 0314 	add.w	r3, r7, #20
 801aea6:	4618      	mov	r0, r3
 801aea8:	f7f1 fead 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801aeac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801aeb0:	4618      	mov	r0, r3
 801aeb2:	f7f1 fea8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801aeb6:	f107 031c 	add.w	r3, r7, #28
 801aeba:	4618      	mov	r0, r3
 801aebc:	f7f1 fea3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 801aec0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801aec2:	f003 fec1 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 801aec6:	64f8      	str	r0, [r7, #76]	; 0x4c
 801aec8:	e79d      	b.n	801ae06 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801aeca:	683b      	ldr	r3, [r7, #0]
 801aecc:	6a1b      	ldr	r3, [r3, #32]
 801aece:	4618      	mov	r0, r3
 801aed0:	f003 ffb1 	bl	801ee36 <_ZN18MockNamedValueList5beginEv>
 801aed4:	64f8      	str	r0, [r7, #76]	; 0x4c
 801aed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d05e      	beq.n	801af9a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 801aedc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801aede:	6838      	ldr	r0, [r7, #0]
 801aee0:	f000 f89e 	bl	801b020 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801aee4:	4603      	mov	r3, r0
 801aee6:	4618      	mov	r0, r3
 801aee8:	f000 f8d0 	bl	801b08c <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801aeec:	4603      	mov	r3, r0
 801aeee:	f083 0301 	eor.w	r3, r3, #1
 801aef2:	b2db      	uxtb	r3, r3
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	d04b      	beq.n	801af90 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801aef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801aefc:	4929      	ldr	r1, [pc, #164]	; (801afa4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801aefe:	4618      	mov	r0, r3
 801af00:	f7f1 fac9 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801af04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801af08:	4619      	mov	r1, r3
 801af0a:	6878      	ldr	r0, [r7, #4]
 801af0c:	f7f1 fecc 	bl	800cca8 <_ZneRK12SimpleStringS1_>
 801af10:	4603      	mov	r3, r0
 801af12:	461c      	mov	r4, r3
 801af14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801af18:	4618      	mov	r0, r3
 801af1a:	f7f1 fe74 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801af1e:	2c00      	cmp	r4, #0
 801af20:	d003      	beq.n	801af2a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801af22:	4921      	ldr	r1, [pc, #132]	; (801afa8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801af24:	6878      	ldr	r0, [r7, #4]
 801af26:	f7f1 fefd 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801af2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801af2e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801af30:	4618      	mov	r0, r3
 801af32:	f003 fed7 	bl	801ece4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801af36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801af3a:	4618      	mov	r0, r3
 801af3c:	f7f1 fe36 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801af40:	4604      	mov	r4, r0
 801af42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801af46:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801af48:	4618      	mov	r0, r3
 801af4a:	f003 feb8 	bl	801ecbe <_ZNK22MockNamedValueListNode7getNameEv>
 801af4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801af52:	4618      	mov	r0, r3
 801af54:	f7f1 fe2a 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801af58:	4603      	mov	r3, r0
 801af5a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801af5e:	4622      	mov	r2, r4
 801af60:	4912      	ldr	r1, [pc, #72]	; (801afac <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801af62:	f7f2 fb57 	bl	800d614 <_Z16StringFromFormatPKcz>
 801af66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801af6a:	4619      	mov	r1, r3
 801af6c:	6878      	ldr	r0, [r7, #4]
 801af6e:	f7f1 fec7 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801af72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801af76:	4618      	mov	r0, r3
 801af78:	f7f1 fe45 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801af7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801af80:	4618      	mov	r0, r3
 801af82:	f7f1 fe40 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801af86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801af8a:	4618      	mov	r0, r3
 801af8c:	f7f1 fe3b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801af90:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801af92:	f003 fe59 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 801af96:	64f8      	str	r0, [r7, #76]	; 0x4c
 801af98:	e79d      	b.n	801aed6 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801af9a:	bf00      	nop
}
 801af9c:	6878      	ldr	r0, [r7, #4]
 801af9e:	3754      	adds	r7, #84	; 0x54
 801afa0:	46bd      	mov	sp, r7
 801afa2:	bd90      	pop	{r4, r7, pc}
 801afa4:	08025934 	.word	0x08025934
 801afa8:	08025a40 	.word	0x08025a40
 801afac:	08025aa0 	.word	0x08025aa0

0801afb0 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801afb0:	b590      	push	{r4, r7, lr}
 801afb2:	b085      	sub	sp, #20
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	6078      	str	r0, [r7, #4]
 801afb8:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801afba:	f107 0308 	add.w	r3, r7, #8
 801afbe:	6879      	ldr	r1, [r7, #4]
 801afc0:	4618      	mov	r0, r3
 801afc2:	f7fe ff0d 	bl	8019de0 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801afc6:	f107 0308 	add.w	r3, r7, #8
 801afca:	4619      	mov	r1, r3
 801afcc:	6838      	ldr	r0, [r7, #0]
 801afce:	f7f1 fe26 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801afd2:	4603      	mov	r3, r0
 801afd4:	461c      	mov	r4, r3
 801afd6:	f107 0308 	add.w	r3, r7, #8
 801afda:	4618      	mov	r0, r3
 801afdc:	f7f1 fe13 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801afe0:	4623      	mov	r3, r4
}
 801afe2:	4618      	mov	r0, r3
 801afe4:	3714      	adds	r7, #20
 801afe6:	46bd      	mov	sp, r7
 801afe8:	bd90      	pop	{r4, r7, pc}

0801afea <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801afea:	b480      	push	{r7}
 801afec:	b083      	sub	sp, #12
 801afee:	af00      	add	r7, sp, #0
 801aff0:	6078      	str	r0, [r7, #4]
 801aff2:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801affa:	f083 0301 	eor.w	r3, r3, #1
 801affe:	b2db      	uxtb	r3, r3
 801b000:	2b00      	cmp	r3, #0
 801b002:	d104      	bne.n	801b00e <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b008:	683a      	ldr	r2, [r7, #0]
 801b00a:	429a      	cmp	r2, r3
 801b00c:	d101      	bne.n	801b012 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801b00e:	2301      	movs	r3, #1
 801b010:	e000      	b.n	801b014 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801b012:	2300      	movs	r3, #0
}
 801b014:	4618      	mov	r0, r3
 801b016:	370c      	adds	r7, #12
 801b018:	46bd      	mov	sp, r7
 801b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b01e:	4770      	bx	lr

0801b020 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801b020:	b580      	push	{r7, lr}
 801b022:	b082      	sub	sp, #8
 801b024:	af00      	add	r7, sp, #0
 801b026:	6078      	str	r0, [r7, #4]
 801b028:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801b02a:	6838      	ldr	r0, [r7, #0]
 801b02c:	f003 fe18 	bl	801ec60 <_ZN22MockNamedValueListNode4itemEv>
 801b030:	4603      	mov	r3, r0
}
 801b032:	4618      	mov	r0, r3
 801b034:	3708      	adds	r7, #8
 801b036:	46bd      	mov	sp, r7
 801b038:	bd80      	pop	{r7, pc}
	...

0801b03c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801b03c:	b580      	push	{r7, lr}
 801b03e:	b082      	sub	sp, #8
 801b040:	af00      	add	r7, sp, #0
 801b042:	6078      	str	r0, [r7, #4]
 801b044:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	6839      	ldr	r1, [r7, #0]
 801b04a:	4618      	mov	r0, r3
 801b04c:	f001 ff48 	bl	801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>
 801b050:	4a05      	ldr	r2, [pc, #20]	; (801b068 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	601a      	str	r2, [r3, #0]
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	2200      	movs	r2, #0
 801b05a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	4618      	mov	r0, r3
 801b062:	3708      	adds	r7, #8
 801b064:	46bd      	mov	sp, r7
 801b066:	bd80      	pop	{r7, pc}
 801b068:	08028a60 	.word	0x08028a60

0801b06c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801b06c:	b480      	push	{r7}
 801b06e:	b083      	sub	sp, #12
 801b070:	af00      	add	r7, sp, #0
 801b072:	6078      	str	r0, [r7, #4]
 801b074:	460b      	mov	r3, r1
 801b076:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	78fa      	ldrb	r2, [r7, #3]
 801b07c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801b080:	bf00      	nop
 801b082:	370c      	adds	r7, #12
 801b084:	46bd      	mov	sp, r7
 801b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b08a:	4770      	bx	lr

0801b08c <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801b08c:	b480      	push	{r7}
 801b08e:	b083      	sub	sp, #12
 801b090:	af00      	add	r7, sp, #0
 801b092:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801b09a:	4618      	mov	r0, r3
 801b09c:	370c      	adds	r7, #12
 801b09e:	46bd      	mov	sp, r7
 801b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0a4:	4770      	bx	lr
	...

0801b0a8 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801b0a8:	b580      	push	{r7, lr}
 801b0aa:	b082      	sub	sp, #8
 801b0ac:	af00      	add	r7, sp, #0
 801b0ae:	6078      	str	r0, [r7, #4]
 801b0b0:	460b      	mov	r3, r1
 801b0b2:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	3328      	adds	r3, #40	; 0x28
 801b0b8:	4907      	ldr	r1, [pc, #28]	; (801b0d8 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801b0ba:	4618      	mov	r0, r3
 801b0bc:	f002 f9b4 	bl	801d428 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	3328      	adds	r3, #40	; 0x28
 801b0c4:	78fa      	ldrb	r2, [r7, #3]
 801b0c6:	4611      	mov	r1, r2
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	f001 ff5b 	bl	801cf84 <_ZN14MockNamedValue8setValueEb>
    return *this;
 801b0ce:	687b      	ldr	r3, [r7, #4]
}
 801b0d0:	4618      	mov	r0, r3
 801b0d2:	3708      	adds	r7, #8
 801b0d4:	46bd      	mov	sp, r7
 801b0d6:	bd80      	pop	{r7, pc}
 801b0d8:	08025aa8 	.word	0x08025aa8

0801b0dc <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801b0dc:	b580      	push	{r7, lr}
 801b0de:	b082      	sub	sp, #8
 801b0e0:	af00      	add	r7, sp, #0
 801b0e2:	6078      	str	r0, [r7, #4]
 801b0e4:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	3328      	adds	r3, #40	; 0x28
 801b0ea:	4907      	ldr	r1, [pc, #28]	; (801b108 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801b0ec:	4618      	mov	r0, r3
 801b0ee:	f002 f99b 	bl	801d428 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	3328      	adds	r3, #40	; 0x28
 801b0f6:	6839      	ldr	r1, [r7, #0]
 801b0f8:	4618      	mov	r0, r3
 801b0fa:	f001 ff67 	bl	801cfcc <_ZN14MockNamedValue8setValueEj>
    return *this;
 801b0fe:	687b      	ldr	r3, [r7, #4]
}
 801b100:	4618      	mov	r0, r3
 801b102:	3708      	adds	r7, #8
 801b104:	46bd      	mov	sp, r7
 801b106:	bd80      	pop	{r7, pc}
 801b108:	08025aa8 	.word	0x08025aa8

0801b10c <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801b10c:	b580      	push	{r7, lr}
 801b10e:	b082      	sub	sp, #8
 801b110:	af00      	add	r7, sp, #0
 801b112:	6078      	str	r0, [r7, #4]
 801b114:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	3328      	adds	r3, #40	; 0x28
 801b11a:	4907      	ldr	r1, [pc, #28]	; (801b138 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801b11c:	4618      	mov	r0, r3
 801b11e:	f002 f983 	bl	801d428 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	3328      	adds	r3, #40	; 0x28
 801b126:	6839      	ldr	r1, [r7, #0]
 801b128:	4618      	mov	r0, r3
 801b12a:	f001 ff71 	bl	801d010 <_ZN14MockNamedValue8setValueEi>
    return *this;
 801b12e:	687b      	ldr	r3, [r7, #4]
}
 801b130:	4618      	mov	r0, r3
 801b132:	3708      	adds	r7, #8
 801b134:	46bd      	mov	sp, r7
 801b136:	bd80      	pop	{r7, pc}
 801b138:	08025aa8 	.word	0x08025aa8

0801b13c <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801b13c:	b580      	push	{r7, lr}
 801b13e:	b082      	sub	sp, #8
 801b140:	af00      	add	r7, sp, #0
 801b142:	6078      	str	r0, [r7, #4]
 801b144:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	3328      	adds	r3, #40	; 0x28
 801b14a:	4907      	ldr	r1, [pc, #28]	; (801b168 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801b14c:	4618      	mov	r0, r3
 801b14e:	f002 f96b 	bl	801d428 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	3328      	adds	r3, #40	; 0x28
 801b156:	6839      	ldr	r1, [r7, #0]
 801b158:	4618      	mov	r0, r3
 801b15a:	f001 ff7b 	bl	801d054 <_ZN14MockNamedValue8setValueEl>
    return *this;
 801b15e:	687b      	ldr	r3, [r7, #4]
}
 801b160:	4618      	mov	r0, r3
 801b162:	3708      	adds	r7, #8
 801b164:	46bd      	mov	sp, r7
 801b166:	bd80      	pop	{r7, pc}
 801b168:	08025aa8 	.word	0x08025aa8

0801b16c <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801b16c:	b580      	push	{r7, lr}
 801b16e:	b082      	sub	sp, #8
 801b170:	af00      	add	r7, sp, #0
 801b172:	6078      	str	r0, [r7, #4]
 801b174:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	3328      	adds	r3, #40	; 0x28
 801b17a:	4907      	ldr	r1, [pc, #28]	; (801b198 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801b17c:	4618      	mov	r0, r3
 801b17e:	f002 f953 	bl	801d428 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	3328      	adds	r3, #40	; 0x28
 801b186:	6839      	ldr	r1, [r7, #0]
 801b188:	4618      	mov	r0, r3
 801b18a:	f001 ff85 	bl	801d098 <_ZN14MockNamedValue8setValueEm>
    return *this;
 801b18e:	687b      	ldr	r3, [r7, #4]
}
 801b190:	4618      	mov	r0, r3
 801b192:	3708      	adds	r7, #8
 801b194:	46bd      	mov	sp, r7
 801b196:	bd80      	pop	{r7, pc}
 801b198:	08025aa8 	.word	0x08025aa8

0801b19c <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801b19c:	b5b0      	push	{r4, r5, r7, lr}
 801b19e:	b086      	sub	sp, #24
 801b1a0:	af02      	add	r7, sp, #8
 801b1a2:	60f8      	str	r0, [r7, #12]
 801b1a4:	1d3b      	adds	r3, r7, #4
 801b1a6:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801b1aa:	f7f8 fd57 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801b1ae:	4604      	mov	r4, r0
 801b1b0:	6823      	ldr	r3, [r4, #0]
 801b1b2:	3368      	adds	r3, #104	; 0x68
 801b1b4:	681d      	ldr	r5, [r3, #0]
 801b1b6:	f7f8 fd61 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	9300      	str	r3, [sp, #0]
 801b1be:	f240 2319 	movw	r3, #537	; 0x219
 801b1c2:	4a04      	ldr	r2, [pc, #16]	; (801b1d4 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801b1c4:	4904      	ldr	r1, [pc, #16]	; (801b1d8 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801b1c6:	4620      	mov	r0, r4
 801b1c8:	47a8      	blx	r5
    return *this;
 801b1ca:	68fb      	ldr	r3, [r7, #12]
}
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	3710      	adds	r7, #16
 801b1d0:	46bd      	mov	sp, r7
 801b1d2:	bdb0      	pop	{r4, r5, r7, pc}
 801b1d4:	08025938 	.word	0x08025938
 801b1d8:	08025954 	.word	0x08025954

0801b1dc <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801b1dc:	b5b0      	push	{r4, r5, r7, lr}
 801b1de:	b086      	sub	sp, #24
 801b1e0:	af02      	add	r7, sp, #8
 801b1e2:	60f8      	str	r0, [r7, #12]
 801b1e4:	1d3b      	adds	r3, r7, #4
 801b1e6:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801b1ea:	f7f8 fd37 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801b1ee:	4604      	mov	r4, r0
 801b1f0:	6823      	ldr	r3, [r4, #0]
 801b1f2:	3368      	adds	r3, #104	; 0x68
 801b1f4:	681d      	ldr	r5, [r3, #0]
 801b1f6:	f7f8 fd41 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b1fa:	4603      	mov	r3, r0
 801b1fc:	9300      	str	r3, [sp, #0]
 801b1fe:	f240 231f 	movw	r3, #543	; 0x21f
 801b202:	4a04      	ldr	r2, [pc, #16]	; (801b214 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801b204:	4904      	ldr	r1, [pc, #16]	; (801b218 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801b206:	4620      	mov	r0, r4
 801b208:	47a8      	blx	r5
    return *this;
 801b20a:	68fb      	ldr	r3, [r7, #12]
}
 801b20c:	4618      	mov	r0, r3
 801b20e:	3710      	adds	r7, #16
 801b210:	46bd      	mov	sp, r7
 801b212:	bdb0      	pop	{r4, r5, r7, pc}
 801b214:	08025938 	.word	0x08025938
 801b218:	08025974 	.word	0x08025974

0801b21c <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801b21c:	b580      	push	{r7, lr}
 801b21e:	b082      	sub	sp, #8
 801b220:	af00      	add	r7, sp, #0
 801b222:	6078      	str	r0, [r7, #4]
 801b224:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	3328      	adds	r3, #40	; 0x28
 801b22a:	4907      	ldr	r1, [pc, #28]	; (801b248 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801b22c:	4618      	mov	r0, r3
 801b22e:	f002 f8fb 	bl	801d428 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	3328      	adds	r3, #40	; 0x28
 801b236:	6839      	ldr	r1, [r7, #0]
 801b238:	4618      	mov	r0, r3
 801b23a:	f002 f837 	bl	801d2ac <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801b23e:	687b      	ldr	r3, [r7, #4]
}
 801b240:	4618      	mov	r0, r3
 801b242:	3708      	adds	r7, #8
 801b244:	46bd      	mov	sp, r7
 801b246:	bd80      	pop	{r7, pc}
 801b248:	08025aa8 	.word	0x08025aa8

0801b24c <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801b24c:	b580      	push	{r7, lr}
 801b24e:	b084      	sub	sp, #16
 801b250:	af00      	add	r7, sp, #0
 801b252:	60f8      	str	r0, [r7, #12]
 801b254:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801b258:	68fb      	ldr	r3, [r7, #12]
 801b25a:	3328      	adds	r3, #40	; 0x28
 801b25c:	4907      	ldr	r1, [pc, #28]	; (801b27c <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801b25e:	4618      	mov	r0, r3
 801b260:	f002 f8e2 	bl	801d428 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b264:	68fb      	ldr	r3, [r7, #12]
 801b266:	3328      	adds	r3, #40	; 0x28
 801b268:	ed97 0b00 	vldr	d0, [r7]
 801b26c:	4618      	mov	r0, r3
 801b26e:	f001 ff73 	bl	801d158 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801b272:	68fb      	ldr	r3, [r7, #12]
}
 801b274:	4618      	mov	r0, r3
 801b276:	3710      	adds	r7, #16
 801b278:	46bd      	mov	sp, r7
 801b27a:	bd80      	pop	{r7, pc}
 801b27c:	08025aa8 	.word	0x08025aa8

0801b280 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801b280:	b580      	push	{r7, lr}
 801b282:	b082      	sub	sp, #8
 801b284:	af00      	add	r7, sp, #0
 801b286:	6078      	str	r0, [r7, #4]
 801b288:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	3328      	adds	r3, #40	; 0x28
 801b28e:	4907      	ldr	r1, [pc, #28]	; (801b2ac <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801b290:	4618      	mov	r0, r3
 801b292:	f002 f8c9 	bl	801d428 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	3328      	adds	r3, #40	; 0x28
 801b29a:	6839      	ldr	r1, [r7, #0]
 801b29c:	4618      	mov	r0, r3
 801b29e:	f001 ff9f 	bl	801d1e0 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801b2a2:	687b      	ldr	r3, [r7, #4]
}
 801b2a4:	4618      	mov	r0, r3
 801b2a6:	3708      	adds	r7, #8
 801b2a8:	46bd      	mov	sp, r7
 801b2aa:	bd80      	pop	{r7, pc}
 801b2ac:	08025aa8 	.word	0x08025aa8

0801b2b0 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801b2b0:	b580      	push	{r7, lr}
 801b2b2:	b082      	sub	sp, #8
 801b2b4:	af00      	add	r7, sp, #0
 801b2b6:	6078      	str	r0, [r7, #4]
 801b2b8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	3328      	adds	r3, #40	; 0x28
 801b2be:	4907      	ldr	r1, [pc, #28]	; (801b2dc <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801b2c0:	4618      	mov	r0, r3
 801b2c2:	f002 f8b1 	bl	801d428 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	3328      	adds	r3, #40	; 0x28
 801b2ca:	6839      	ldr	r1, [r7, #0]
 801b2cc:	4618      	mov	r0, r3
 801b2ce:	f001 ffa9 	bl	801d224 <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801b2d2:	687b      	ldr	r3, [r7, #4]
}
 801b2d4:	4618      	mov	r0, r3
 801b2d6:	3708      	adds	r7, #8
 801b2d8:	46bd      	mov	sp, r7
 801b2da:	bd80      	pop	{r7, pc}
 801b2dc:	08025aa8 	.word	0x08025aa8

0801b2e0 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801b2e0:	b580      	push	{r7, lr}
 801b2e2:	b082      	sub	sp, #8
 801b2e4:	af00      	add	r7, sp, #0
 801b2e6:	6078      	str	r0, [r7, #4]
 801b2e8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	3328      	adds	r3, #40	; 0x28
 801b2ee:	4907      	ldr	r1, [pc, #28]	; (801b30c <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801b2f0:	4618      	mov	r0, r3
 801b2f2:	f002 f899 	bl	801d428 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	3328      	adds	r3, #40	; 0x28
 801b2fa:	6839      	ldr	r1, [r7, #0]
 801b2fc:	4618      	mov	r0, r3
 801b2fe:	f001 ffb3 	bl	801d268 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801b302:	687b      	ldr	r3, [r7, #4]
}
 801b304:	4618      	mov	r0, r3
 801b306:	3708      	adds	r7, #8
 801b308:	46bd      	mov	sp, r7
 801b30a:	bd80      	pop	{r7, pc}
 801b30c:	08025aa8 	.word	0x08025aa8

0801b310 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801b310:	b480      	push	{r7}
 801b312:	b083      	sub	sp, #12
 801b314:	af00      	add	r7, sp, #0
 801b316:	6078      	str	r0, [r7, #4]
 801b318:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	2201      	movs	r2, #1
 801b31e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	2200      	movs	r2, #0
 801b326:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	683a      	ldr	r2, [r7, #0]
 801b32e:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801b330:	687b      	ldr	r3, [r7, #4]
}
 801b332:	4618      	mov	r0, r3
 801b334:	370c      	adds	r7, #12
 801b336:	46bd      	mov	sp, r7
 801b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b33c:	4770      	bx	lr

0801b33e <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801b33e:	b580      	push	{r7, lr}
 801b340:	b082      	sub	sp, #8
 801b342:	af00      	add	r7, sp, #0
 801b344:	6078      	str	r0, [r7, #4]
 801b346:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801b348:	683b      	ldr	r3, [r7, #0]
 801b34a:	3328      	adds	r3, #40	; 0x28
 801b34c:	4619      	mov	r1, r3
 801b34e:	6878      	ldr	r0, [r7, #4]
 801b350:	f7ef f946 	bl	800a5e0 <_ZN14MockNamedValueC1ERKS_>
}
 801b354:	6878      	ldr	r0, [r7, #4]
 801b356:	3708      	adds	r7, #8
 801b358:	46bd      	mov	sp, r7
 801b35a:	bd80      	pop	{r7, pc}

0801b35c <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801b35c:	b480      	push	{r7}
 801b35e:	b085      	sub	sp, #20
 801b360:	af00      	add	r7, sp, #0
 801b362:	60f8      	str	r0, [r7, #12]
 801b364:	60b9      	str	r1, [r7, #8]
 801b366:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801b368:	68fb      	ldr	r3, [r7, #12]
 801b36a:	68ba      	ldr	r2, [r7, #8]
 801b36c:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801b36e:	68fb      	ldr	r3, [r7, #12]
 801b370:	687a      	ldr	r2, [r7, #4]
 801b372:	615a      	str	r2, [r3, #20]
    return *this;
 801b374:	68fb      	ldr	r3, [r7, #12]
}
 801b376:	4618      	mov	r0, r3
 801b378:	3714      	adds	r7, #20
 801b37a:	46bd      	mov	sp, r7
 801b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b380:	4770      	bx	lr

0801b382 <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801b382:	b480      	push	{r7}
 801b384:	b083      	sub	sp, #12
 801b386:	af00      	add	r7, sp, #0
 801b388:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	7e1b      	ldrb	r3, [r3, #24]
}
 801b38e:	4618      	mov	r0, r3
 801b390:	370c      	adds	r7, #12
 801b392:	46bd      	mov	sp, r7
 801b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b398:	4770      	bx	lr

0801b39a <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801b39a:	b480      	push	{r7}
 801b39c:	b083      	sub	sp, #12
 801b39e:	af00      	add	r7, sp, #0
 801b3a0:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801b3a6:	4618      	mov	r0, r3
 801b3a8:	370c      	adds	r7, #12
 801b3aa:	46bd      	mov	sp, r7
 801b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3b0:	4770      	bx	lr
	...

0801b3b4 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801b3b4:	b580      	push	{r7, lr}
 801b3b6:	b082      	sub	sp, #8
 801b3b8:	af00      	add	r7, sp, #0
 801b3ba:	6078      	str	r0, [r7, #4]
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	4618      	mov	r0, r3
 801b3c0:	f7fe fcce 	bl	8019d60 <_ZN16MockExpectedCallC1Ev>
 801b3c4:	4a03      	ldr	r2, [pc, #12]	; (801b3d4 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	601a      	str	r2, [r3, #0]
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	3708      	adds	r7, #8
 801b3d0:	46bd      	mov	sp, r7
 801b3d2:	bd80      	pop	{r7, pc}
 801b3d4:	080288c0 	.word	0x080288c0

0801b3d8 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801b3d8:	b580      	push	{r7, lr}
 801b3da:	af00      	add	r7, sp, #0
 801b3dc:	4801      	ldr	r0, [pc, #4]	; (801b3e4 <__tcf_0+0xc>)
 801b3de:	f000 f831 	bl	801b444 <_ZN23MockIgnoredExpectedCallD1Ev>
 801b3e2:	bd80      	pop	{r7, pc}
 801b3e4:	20000ebc 	.word	0x20000ebc

0801b3e8 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801b3e8:	b580      	push	{r7, lr}
 801b3ea:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801b3ec:	4b12      	ldr	r3, [pc, #72]	; (801b438 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801b3ee:	781b      	ldrb	r3, [r3, #0]
 801b3f0:	f3bf 8f5b 	dmb	ish
 801b3f4:	b2db      	uxtb	r3, r3
 801b3f6:	f003 0301 	and.w	r3, r3, #1
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	bf0c      	ite	eq
 801b3fe:	2301      	moveq	r3, #1
 801b400:	2300      	movne	r3, #0
 801b402:	b2db      	uxtb	r3, r3
 801b404:	2b00      	cmp	r3, #0
 801b406:	d013      	beq.n	801b430 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801b408:	480b      	ldr	r0, [pc, #44]	; (801b438 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801b40a:	f003 ff05 	bl	801f218 <__cxa_guard_acquire>
 801b40e:	4603      	mov	r3, r0
 801b410:	2b00      	cmp	r3, #0
 801b412:	bf14      	ite	ne
 801b414:	2301      	movne	r3, #1
 801b416:	2300      	moveq	r3, #0
 801b418:	b2db      	uxtb	r3, r3
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d008      	beq.n	801b430 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801b41e:	4807      	ldr	r0, [pc, #28]	; (801b43c <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801b420:	f7ff ffc8 	bl	801b3b4 <_ZN23MockIgnoredExpectedCallC1Ev>
 801b424:	4804      	ldr	r0, [pc, #16]	; (801b438 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801b426:	f003 ff03 	bl	801f230 <__cxa_guard_release>
 801b42a:	4805      	ldr	r0, [pc, #20]	; (801b440 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801b42c:	f003 ff27 	bl	801f27e <atexit>
    return call;
 801b430:	4b02      	ldr	r3, [pc, #8]	; (801b43c <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801b432:	4618      	mov	r0, r3
 801b434:	bd80      	pop	{r7, pc}
 801b436:	bf00      	nop
 801b438:	20000ec0 	.word	0x20000ec0
 801b43c:	20000ebc 	.word	0x20000ebc
 801b440:	0801b3d9 	.word	0x0801b3d9

0801b444 <_ZN23MockIgnoredExpectedCallD1Ev>:
 801b444:	b580      	push	{r7, lr}
 801b446:	b082      	sub	sp, #8
 801b448:	af00      	add	r7, sp, #0
 801b44a:	6078      	str	r0, [r7, #4]
 801b44c:	4a05      	ldr	r2, [pc, #20]	; (801b464 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	601a      	str	r2, [r3, #0]
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	4618      	mov	r0, r3
 801b456:	f7fe fc93 	bl	8019d80 <_ZN16MockExpectedCallD1Ev>
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	4618      	mov	r0, r3
 801b45e:	3708      	adds	r7, #8
 801b460:	46bd      	mov	sp, r7
 801b462:	bd80      	pop	{r7, pc}
 801b464:	080288c0 	.word	0x080288c0

0801b468 <_ZN23MockIgnoredExpectedCallD0Ev>:
 801b468:	b580      	push	{r7, lr}
 801b46a:	b082      	sub	sp, #8
 801b46c:	af00      	add	r7, sp, #0
 801b46e:	6078      	str	r0, [r7, #4]
 801b470:	6878      	ldr	r0, [r7, #4]
 801b472:	f7ff ffe7 	bl	801b444 <_ZN23MockIgnoredExpectedCallD1Ev>
 801b476:	2104      	movs	r1, #4
 801b478:	6878      	ldr	r0, [r7, #4]
 801b47a:	f7ee fc5d 	bl	8009d38 <_ZdlPvj>
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	4618      	mov	r0, r3
 801b482:	3708      	adds	r7, #8
 801b484:	46bd      	mov	sp, r7
 801b486:	bd80      	pop	{r7, pc}

0801b488 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801b488:	b580      	push	{r7, lr}
 801b48a:	b082      	sub	sp, #8
 801b48c:	af00      	add	r7, sp, #0
 801b48e:	6078      	str	r0, [r7, #4]
 801b490:	4a05      	ldr	r2, [pc, #20]	; (801b4a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	601a      	str	r2, [r3, #0]
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	4618      	mov	r0, r3
 801b49a:	f001 fd4b 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	4618      	mov	r0, r3
 801b4a2:	3708      	adds	r7, #8
 801b4a4:	46bd      	mov	sp, r7
 801b4a6:	bd80      	pop	{r7, pc}
 801b4a8:	08028a60 	.word	0x08028a60

0801b4ac <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801b4ac:	b580      	push	{r7, lr}
 801b4ae:	b082      	sub	sp, #8
 801b4b0:	af00      	add	r7, sp, #0
 801b4b2:	6078      	str	r0, [r7, #4]
 801b4b4:	6878      	ldr	r0, [r7, #4]
 801b4b6:	f7ff ffe7 	bl	801b488 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801b4ba:	2138      	movs	r1, #56	; 0x38
 801b4bc:	6878      	ldr	r0, [r7, #4]
 801b4be:	f7ee fc3b 	bl	8009d38 <_ZdlPvj>
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	3708      	adds	r7, #8
 801b4c8:	46bd      	mov	sp, r7
 801b4ca:	bd80      	pop	{r7, pc}

0801b4cc <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801b4cc:	b480      	push	{r7}
 801b4ce:	b083      	sub	sp, #12
 801b4d0:	af00      	add	r7, sp, #0
 801b4d2:	6078      	str	r0, [r7, #4]
 801b4d4:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	683a      	ldr	r2, [r7, #0]
 801b4da:	601a      	str	r2, [r3, #0]
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	2200      	movs	r2, #0
 801b4e0:	605a      	str	r2, [r3, #4]
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	4618      	mov	r0, r3
 801b4e6:	370c      	adds	r7, #12
 801b4e8:	46bd      	mov	sp, r7
 801b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ee:	4770      	bx	lr

0801b4f0 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801b4f0:	b480      	push	{r7}
 801b4f2:	b083      	sub	sp, #12
 801b4f4:	af00      	add	r7, sp, #0
 801b4f6:	6078      	str	r0, [r7, #4]
 801b4f8:	4a06      	ldr	r2, [pc, #24]	; (801b514 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	601a      	str	r2, [r3, #0]
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	2200      	movs	r2, #0
 801b502:	605a      	str	r2, [r3, #4]
{
}
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	4618      	mov	r0, r3
 801b508:	370c      	adds	r7, #12
 801b50a:	46bd      	mov	sp, r7
 801b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b510:	4770      	bx	lr
 801b512:	bf00      	nop
 801b514:	08028bb4 	.word	0x08028bb4

0801b518 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801b518:	b580      	push	{r7, lr}
 801b51a:	b084      	sub	sp, #16
 801b51c:	af00      	add	r7, sp, #0
 801b51e:	6078      	str	r0, [r7, #4]
 801b520:	4a0d      	ldr	r2, [pc, #52]	; (801b558 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	685b      	ldr	r3, [r3, #4]
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d00f      	beq.n	801b54e <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	685b      	ldr	r3, [r3, #4]
 801b532:	685b      	ldr	r3, [r3, #4]
 801b534:	60fb      	str	r3, [r7, #12]
        delete head_;
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	685b      	ldr	r3, [r3, #4]
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d003      	beq.n	801b546 <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801b53e:	2108      	movs	r1, #8
 801b540:	4618      	mov	r0, r3
 801b542:	f7ee fbf9 	bl	8009d38 <_ZdlPvj>
        head_ = next;
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	68fa      	ldr	r2, [r7, #12]
 801b54a:	605a      	str	r2, [r3, #4]
    while (head_) {
 801b54c:	e7eb      	b.n	801b526 <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	4618      	mov	r0, r3
 801b552:	3710      	adds	r7, #16
 801b554:	46bd      	mov	sp, r7
 801b556:	bd80      	pop	{r7, pc}
 801b558:	08028bb4 	.word	0x08028bb4

0801b55c <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801b55c:	b580      	push	{r7, lr}
 801b55e:	b082      	sub	sp, #8
 801b560:	af00      	add	r7, sp, #0
 801b562:	6078      	str	r0, [r7, #4]
}
 801b564:	6878      	ldr	r0, [r7, #4]
 801b566:	f7ff ffd7 	bl	801b518 <_ZN21MockExpectedCallsListD1Ev>
 801b56a:	2108      	movs	r1, #8
 801b56c:	6878      	ldr	r0, [r7, #4]
 801b56e:	f7ee fbe3 	bl	8009d38 <_ZdlPvj>
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	4618      	mov	r0, r3
 801b576:	3708      	adds	r7, #8
 801b578:	46bd      	mov	sp, r7
 801b57a:	bd80      	pop	{r7, pc}

0801b57c <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801b57c:	b580      	push	{r7, lr}
 801b57e:	b084      	sub	sp, #16
 801b580:	af00      	add	r7, sp, #0
 801b582:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	685b      	ldr	r3, [r3, #4]
 801b588:	60fb      	str	r3, [r7, #12]
 801b58a:	68fb      	ldr	r3, [r7, #12]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d011      	beq.n	801b5b4 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801b590:	68fb      	ldr	r3, [r7, #12]
 801b592:	681a      	ldr	r2, [r3, #0]
 801b594:	68fb      	ldr	r3, [r7, #12]
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	33d4      	adds	r3, #212	; 0xd4
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	4610      	mov	r0, r2
 801b5a0:	4798      	blx	r3
 801b5a2:	4603      	mov	r3, r0
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	d001      	beq.n	801b5ac <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801b5a8:	2301      	movs	r3, #1
 801b5aa:	e004      	b.n	801b5b6 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b5ac:	68fb      	ldr	r3, [r7, #12]
 801b5ae:	685b      	ldr	r3, [r3, #4]
 801b5b0:	60fb      	str	r3, [r7, #12]
 801b5b2:	e7ea      	b.n	801b58a <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801b5b4:	2300      	movs	r3, #0
}
 801b5b6:	4618      	mov	r0, r3
 801b5b8:	3710      	adds	r7, #16
 801b5ba:	46bd      	mov	sp, r7
 801b5bc:	bd80      	pop	{r7, pc}

0801b5be <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801b5be:	b480      	push	{r7}
 801b5c0:	b085      	sub	sp, #20
 801b5c2:	af00      	add	r7, sp, #0
 801b5c4:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801b5c6:	2300      	movs	r3, #0
 801b5c8:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	685b      	ldr	r3, [r3, #4]
 801b5ce:	60bb      	str	r3, [r7, #8]
 801b5d0:	68bb      	ldr	r3, [r7, #8]
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d006      	beq.n	801b5e4 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801b5d6:	68fb      	ldr	r3, [r7, #12]
 801b5d8:	3301      	adds	r3, #1
 801b5da:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b5dc:	68bb      	ldr	r3, [r7, #8]
 801b5de:	685b      	ldr	r3, [r3, #4]
 801b5e0:	60bb      	str	r3, [r7, #8]
 801b5e2:	e7f5      	b.n	801b5d0 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801b5e4:	68fb      	ldr	r3, [r7, #12]
}
 801b5e6:	4618      	mov	r0, r3
 801b5e8:	3714      	adds	r7, #20
 801b5ea:	46bd      	mov	sp, r7
 801b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5f0:	4770      	bx	lr

0801b5f2 <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801b5f2:	b480      	push	{r7}
 801b5f4:	b083      	sub	sp, #12
 801b5f6:	af00      	add	r7, sp, #0
 801b5f8:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	685b      	ldr	r3, [r3, #4]
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	bf0c      	ite	eq
 801b602:	2301      	moveq	r3, #1
 801b604:	2300      	movne	r3, #0
 801b606:	b2db      	uxtb	r3, r3
}
 801b608:	4618      	mov	r0, r3
 801b60a:	370c      	adds	r7, #12
 801b60c:	46bd      	mov	sp, r7
 801b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b612:	4770      	bx	lr

0801b614 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801b614:	b580      	push	{r7, lr}
 801b616:	b084      	sub	sp, #16
 801b618:	af00      	add	r7, sp, #0
 801b61a:	6078      	str	r0, [r7, #4]
 801b61c:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801b61e:	2300      	movs	r3, #0
 801b620:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	685b      	ldr	r3, [r3, #4]
 801b626:	60bb      	str	r3, [r7, #8]
 801b628:	68bb      	ldr	r3, [r7, #8]
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d01d      	beq.n	801b66a <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801b62e:	68bb      	ldr	r3, [r7, #8]
 801b630:	681a      	ldr	r2, [r3, #0]
 801b632:	68bb      	ldr	r3, [r7, #8]
 801b634:	681b      	ldr	r3, [r3, #0]
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	33b8      	adds	r3, #184	; 0xb8
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	6839      	ldr	r1, [r7, #0]
 801b63e:	4610      	mov	r0, r2
 801b640:	4798      	blx	r3
 801b642:	4603      	mov	r3, r0
 801b644:	2b00      	cmp	r3, #0
 801b646:	d00c      	beq.n	801b662 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801b648:	68bb      	ldr	r3, [r7, #8]
 801b64a:	681a      	ldr	r2, [r3, #0]
 801b64c:	68bb      	ldr	r3, [r7, #8]
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	33f8      	adds	r3, #248	; 0xf8
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	4610      	mov	r0, r2
 801b658:	4798      	blx	r3
 801b65a:	4602      	mov	r2, r0
 801b65c:	68fb      	ldr	r3, [r7, #12]
 801b65e:	4413      	add	r3, r2
 801b660:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b662:	68bb      	ldr	r3, [r7, #8]
 801b664:	685b      	ldr	r3, [r3, #4]
 801b666:	60bb      	str	r3, [r7, #8]
 801b668:	e7de      	b.n	801b628 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801b66a:	68fb      	ldr	r3, [r7, #12]
}
 801b66c:	4618      	mov	r0, r3
 801b66e:	3710      	adds	r7, #16
 801b670:	46bd      	mov	sp, r7
 801b672:	bd80      	pop	{r7, pc}

0801b674 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801b674:	b580      	push	{r7, lr}
 801b676:	b084      	sub	sp, #16
 801b678:	af00      	add	r7, sp, #0
 801b67a:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801b67c:	2300      	movs	r3, #0
 801b67e:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	685b      	ldr	r3, [r3, #4]
 801b684:	60bb      	str	r3, [r7, #8]
 801b686:	68bb      	ldr	r3, [r7, #8]
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d015      	beq.n	801b6b8 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801b68c:	68bb      	ldr	r3, [r7, #8]
 801b68e:	681a      	ldr	r2, [r3, #0]
 801b690:	68bb      	ldr	r3, [r7, #8]
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	33c0      	adds	r3, #192	; 0xc0
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	4610      	mov	r0, r2
 801b69c:	4798      	blx	r3
 801b69e:	4603      	mov	r3, r0
 801b6a0:	f083 0301 	eor.w	r3, r3, #1
 801b6a4:	b2db      	uxtb	r3, r3
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d002      	beq.n	801b6b0 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801b6aa:	68fb      	ldr	r3, [r7, #12]
 801b6ac:	3301      	adds	r3, #1
 801b6ae:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b6b0:	68bb      	ldr	r3, [r7, #8]
 801b6b2:	685b      	ldr	r3, [r3, #4]
 801b6b4:	60bb      	str	r3, [r7, #8]
 801b6b6:	e7e6      	b.n	801b686 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801b6b8:	68fb      	ldr	r3, [r7, #12]
}
 801b6ba:	4618      	mov	r0, r3
 801b6bc:	3710      	adds	r7, #16
 801b6be:	46bd      	mov	sp, r7
 801b6c0:	bd80      	pop	{r7, pc}

0801b6c2 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801b6c2:	b580      	push	{r7, lr}
 801b6c4:	b084      	sub	sp, #16
 801b6c6:	af00      	add	r7, sp, #0
 801b6c8:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	685b      	ldr	r3, [r3, #4]
 801b6ce:	60fb      	str	r3, [r7, #12]
 801b6d0:	68fb      	ldr	r3, [r7, #12]
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	d011      	beq.n	801b6fa <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801b6d6:	68fb      	ldr	r3, [r7, #12]
 801b6d8:	681a      	ldr	r2, [r3, #0]
 801b6da:	68fb      	ldr	r3, [r7, #12]
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	33c8      	adds	r3, #200	; 0xc8
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	4610      	mov	r0, r2
 801b6e6:	4798      	blx	r3
 801b6e8:	4603      	mov	r3, r0
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d001      	beq.n	801b6f2 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801b6ee:	2301      	movs	r3, #1
 801b6f0:	e004      	b.n	801b6fc <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b6f2:	68fb      	ldr	r3, [r7, #12]
 801b6f4:	685b      	ldr	r3, [r3, #4]
 801b6f6:	60fb      	str	r3, [r7, #12]
 801b6f8:	e7ea      	b.n	801b6d0 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801b6fa:	2300      	movs	r3, #0
}
 801b6fc:	4618      	mov	r0, r3
 801b6fe:	3710      	adds	r7, #16
 801b700:	46bd      	mov	sp, r7
 801b702:	bd80      	pop	{r7, pc}

0801b704 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801b704:	b580      	push	{r7, lr}
 801b706:	b084      	sub	sp, #16
 801b708:	af00      	add	r7, sp, #0
 801b70a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	685b      	ldr	r3, [r3, #4]
 801b710:	60fb      	str	r3, [r7, #12]
 801b712:	68fb      	ldr	r3, [r7, #12]
 801b714:	2b00      	cmp	r3, #0
 801b716:	d014      	beq.n	801b742 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	681a      	ldr	r2, [r3, #0]
 801b71c:	68fb      	ldr	r3, [r7, #12]
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	681b      	ldr	r3, [r3, #0]
 801b722:	33c0      	adds	r3, #192	; 0xc0
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	4610      	mov	r0, r2
 801b728:	4798      	blx	r3
 801b72a:	4603      	mov	r3, r0
 801b72c:	f083 0301 	eor.w	r3, r3, #1
 801b730:	b2db      	uxtb	r3, r3
 801b732:	2b00      	cmp	r3, #0
 801b734:	d001      	beq.n	801b73a <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801b736:	2301      	movs	r3, #1
 801b738:	e004      	b.n	801b744 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b73a:	68fb      	ldr	r3, [r7, #12]
 801b73c:	685b      	ldr	r3, [r3, #4]
 801b73e:	60fb      	str	r3, [r7, #12]
 801b740:	e7e7      	b.n	801b712 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801b742:	2300      	movs	r3, #0
}
 801b744:	4618      	mov	r0, r3
 801b746:	3710      	adds	r7, #16
 801b748:	46bd      	mov	sp, r7
 801b74a:	bd80      	pop	{r7, pc}

0801b74c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801b74c:	b580      	push	{r7, lr}
 801b74e:	b084      	sub	sp, #16
 801b750:	af00      	add	r7, sp, #0
 801b752:	6078      	str	r0, [r7, #4]
 801b754:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	685b      	ldr	r3, [r3, #4]
 801b75a:	60fb      	str	r3, [r7, #12]
 801b75c:	68fb      	ldr	r3, [r7, #12]
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d012      	beq.n	801b788 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801b762:	68fb      	ldr	r3, [r7, #12]
 801b764:	681a      	ldr	r2, [r3, #0]
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	681b      	ldr	r3, [r3, #0]
 801b76a:	681b      	ldr	r3, [r3, #0]
 801b76c:	33b8      	adds	r3, #184	; 0xb8
 801b76e:	681b      	ldr	r3, [r3, #0]
 801b770:	6839      	ldr	r1, [r7, #0]
 801b772:	4610      	mov	r0, r2
 801b774:	4798      	blx	r3
 801b776:	4603      	mov	r3, r0
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d001      	beq.n	801b780 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801b77c:	2301      	movs	r3, #1
 801b77e:	e004      	b.n	801b78a <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b780:	68fb      	ldr	r3, [r7, #12]
 801b782:	685b      	ldr	r3, [r3, #4]
 801b784:	60fb      	str	r3, [r7, #12]
 801b786:	e7e9      	b.n	801b75c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801b788:	2300      	movs	r3, #0
}
 801b78a:	4618      	mov	r0, r3
 801b78c:	3710      	adds	r7, #16
 801b78e:	46bd      	mov	sp, r7
 801b790:	bd80      	pop	{r7, pc}
	...

0801b794 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801b794:	b590      	push	{r4, r7, lr}
 801b796:	b085      	sub	sp, #20
 801b798:	af00      	add	r7, sp, #0
 801b79a:	6078      	str	r0, [r7, #4]
 801b79c:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801b79e:	2273      	movs	r2, #115	; 0x73
 801b7a0:	4911      	ldr	r1, [pc, #68]	; (801b7e8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801b7a2:	2008      	movs	r0, #8
 801b7a4:	f7ee fab4 	bl	8009d10 <_ZnwjPKci>
 801b7a8:	4604      	mov	r4, r0
 801b7aa:	6839      	ldr	r1, [r7, #0]
 801b7ac:	4620      	mov	r0, r4
 801b7ae:	f7ff fe8d 	bl	801b4cc <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801b7b2:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	685b      	ldr	r3, [r3, #4]
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d103      	bne.n	801b7c4 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	68ba      	ldr	r2, [r7, #8]
 801b7c0:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801b7c2:	e00d      	b.n	801b7e0 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	685b      	ldr	r3, [r3, #4]
 801b7c8:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801b7ca:	68fb      	ldr	r3, [r7, #12]
 801b7cc:	685b      	ldr	r3, [r3, #4]
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d003      	beq.n	801b7da <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801b7d2:	68fb      	ldr	r3, [r7, #12]
 801b7d4:	685b      	ldr	r3, [r3, #4]
 801b7d6:	60fb      	str	r3, [r7, #12]
 801b7d8:	e7f7      	b.n	801b7ca <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	68ba      	ldr	r2, [r7, #8]
 801b7de:	605a      	str	r2, [r3, #4]
}
 801b7e0:	bf00      	nop
 801b7e2:	3714      	adds	r7, #20
 801b7e4:	46bd      	mov	sp, r7
 801b7e6:	bd90      	pop	{r4, r7, pc}
 801b7e8:	08025ab4 	.word	0x08025ab4

0801b7ec <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801b7ec:	b580      	push	{r7, lr}
 801b7ee:	b084      	sub	sp, #16
 801b7f0:	af00      	add	r7, sp, #0
 801b7f2:	6078      	str	r0, [r7, #4]
 801b7f4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b7f6:	683b      	ldr	r3, [r7, #0]
 801b7f8:	685b      	ldr	r3, [r3, #4]
 801b7fa:	60fb      	str	r3, [r7, #12]
 801b7fc:	68fb      	ldr	r3, [r7, #12]
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d018      	beq.n	801b834 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801b802:	68fb      	ldr	r3, [r7, #12]
 801b804:	681a      	ldr	r2, [r3, #0]
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	681b      	ldr	r3, [r3, #0]
 801b80a:	681b      	ldr	r3, [r3, #0]
 801b80c:	33c4      	adds	r3, #196	; 0xc4
 801b80e:	681b      	ldr	r3, [r3, #0]
 801b810:	4610      	mov	r0, r2
 801b812:	4798      	blx	r3
 801b814:	4603      	mov	r3, r0
 801b816:	2b00      	cmp	r3, #0
 801b818:	d008      	beq.n	801b82c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	3330      	adds	r3, #48	; 0x30
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	68fa      	ldr	r2, [r7, #12]
 801b824:	6812      	ldr	r2, [r2, #0]
 801b826:	4611      	mov	r1, r2
 801b828:	6878      	ldr	r0, [r7, #4]
 801b82a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b82c:	68fb      	ldr	r3, [r7, #12]
 801b82e:	685b      	ldr	r3, [r3, #4]
 801b830:	60fb      	str	r3, [r7, #12]
 801b832:	e7e3      	b.n	801b7fc <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801b834:	bf00      	nop
 801b836:	3710      	adds	r7, #16
 801b838:	46bd      	mov	sp, r7
 801b83a:	bd80      	pop	{r7, pc}

0801b83c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801b83c:	b580      	push	{r7, lr}
 801b83e:	b086      	sub	sp, #24
 801b840:	af00      	add	r7, sp, #0
 801b842:	60f8      	str	r0, [r7, #12]
 801b844:	60b9      	str	r1, [r7, #8]
 801b846:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	685b      	ldr	r3, [r3, #4]
 801b84c:	617b      	str	r3, [r7, #20]
 801b84e:	697b      	ldr	r3, [r7, #20]
 801b850:	2b00      	cmp	r3, #0
 801b852:	d019      	beq.n	801b888 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801b854:	697b      	ldr	r3, [r7, #20]
 801b856:	681a      	ldr	r2, [r3, #0]
 801b858:	697b      	ldr	r3, [r7, #20]
 801b85a:	681b      	ldr	r3, [r3, #0]
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	33b8      	adds	r3, #184	; 0xb8
 801b860:	681b      	ldr	r3, [r3, #0]
 801b862:	68b9      	ldr	r1, [r7, #8]
 801b864:	4610      	mov	r0, r2
 801b866:	4798      	blx	r3
 801b868:	4603      	mov	r3, r0
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d008      	beq.n	801b880 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801b86e:	68fb      	ldr	r3, [r7, #12]
 801b870:	681b      	ldr	r3, [r3, #0]
 801b872:	3330      	adds	r3, #48	; 0x30
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	697a      	ldr	r2, [r7, #20]
 801b878:	6812      	ldr	r2, [r2, #0]
 801b87a:	4611      	mov	r1, r2
 801b87c:	68f8      	ldr	r0, [r7, #12]
 801b87e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b880:	697b      	ldr	r3, [r7, #20]
 801b882:	685b      	ldr	r3, [r3, #4]
 801b884:	617b      	str	r3, [r7, #20]
 801b886:	e7e2      	b.n	801b84e <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801b888:	bf00      	nop
 801b88a:	3718      	adds	r7, #24
 801b88c:	46bd      	mov	sp, r7
 801b88e:	bd80      	pop	{r7, pc}

0801b890 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801b890:	b580      	push	{r7, lr}
 801b892:	b084      	sub	sp, #16
 801b894:	af00      	add	r7, sp, #0
 801b896:	6078      	str	r0, [r7, #4]
 801b898:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b89a:	683b      	ldr	r3, [r7, #0]
 801b89c:	685b      	ldr	r3, [r3, #4]
 801b89e:	60fb      	str	r3, [r7, #12]
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d00c      	beq.n	801b8c0 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	3330      	adds	r3, #48	; 0x30
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	68fa      	ldr	r2, [r7, #12]
 801b8b0:	6812      	ldr	r2, [r2, #0]
 801b8b2:	4611      	mov	r1, r2
 801b8b4:	6878      	ldr	r0, [r7, #4]
 801b8b6:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	685b      	ldr	r3, [r3, #4]
 801b8bc:	60fb      	str	r3, [r7, #12]
 801b8be:	e7ef      	b.n	801b8a0 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801b8c0:	bf00      	nop
 801b8c2:	3710      	adds	r7, #16
 801b8c4:	46bd      	mov	sp, r7
 801b8c6:	bd80      	pop	{r7, pc}

0801b8c8 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801b8c8:	b580      	push	{r7, lr}
 801b8ca:	b084      	sub	sp, #16
 801b8cc:	af00      	add	r7, sp, #0
 801b8ce:	6078      	str	r0, [r7, #4]
 801b8d0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	685b      	ldr	r3, [r3, #4]
 801b8d6:	60fb      	str	r3, [r7, #12]
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d016      	beq.n	801b90c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801b8de:	68fb      	ldr	r3, [r7, #12]
 801b8e0:	681a      	ldr	r2, [r3, #0]
 801b8e2:	68fb      	ldr	r3, [r7, #12]
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	33b8      	adds	r3, #184	; 0xb8
 801b8ea:	681b      	ldr	r3, [r3, #0]
 801b8ec:	6839      	ldr	r1, [r7, #0]
 801b8ee:	4610      	mov	r0, r2
 801b8f0:	4798      	blx	r3
 801b8f2:	4603      	mov	r3, r0
 801b8f4:	f083 0301 	eor.w	r3, r3, #1
 801b8f8:	b2db      	uxtb	r3, r3
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d002      	beq.n	801b904 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801b8fe:	68fb      	ldr	r3, [r7, #12]
 801b900:	2200      	movs	r2, #0
 801b902:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b904:	68fb      	ldr	r3, [r7, #12]
 801b906:	685b      	ldr	r3, [r3, #4]
 801b908:	60fb      	str	r3, [r7, #12]
 801b90a:	e7e5      	b.n	801b8d8 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	681b      	ldr	r3, [r3, #0]
 801b910:	3388      	adds	r3, #136	; 0x88
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	6878      	ldr	r0, [r7, #4]
 801b916:	4798      	blx	r3
}
 801b918:	bf00      	nop
 801b91a:	3710      	adds	r7, #16
 801b91c:	46bd      	mov	sp, r7
 801b91e:	bd80      	pop	{r7, pc}

0801b920 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801b920:	b580      	push	{r7, lr}
 801b922:	b084      	sub	sp, #16
 801b924:	af00      	add	r7, sp, #0
 801b926:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	685b      	ldr	r3, [r3, #4]
 801b92c:	60fb      	str	r3, [r7, #12]
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	2b00      	cmp	r3, #0
 801b932:	d015      	beq.n	801b960 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801b934:	68fb      	ldr	r3, [r7, #12]
 801b936:	681a      	ldr	r2, [r3, #0]
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	681b      	ldr	r3, [r3, #0]
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	33d4      	adds	r3, #212	; 0xd4
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	4610      	mov	r0, r2
 801b944:	4798      	blx	r3
 801b946:	4603      	mov	r3, r0
 801b948:	f083 0301 	eor.w	r3, r3, #1
 801b94c:	b2db      	uxtb	r3, r3
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d002      	beq.n	801b958 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801b952:	68fb      	ldr	r3, [r7, #12]
 801b954:	2200      	movs	r2, #0
 801b956:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b958:	68fb      	ldr	r3, [r7, #12]
 801b95a:	685b      	ldr	r3, [r3, #4]
 801b95c:	60fb      	str	r3, [r7, #12]
 801b95e:	e7e6      	b.n	801b92e <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	681b      	ldr	r3, [r3, #0]
 801b964:	3388      	adds	r3, #136	; 0x88
 801b966:	681b      	ldr	r3, [r3, #0]
 801b968:	6878      	ldr	r0, [r7, #4]
 801b96a:	4798      	blx	r3
}
 801b96c:	bf00      	nop
 801b96e:	3710      	adds	r7, #16
 801b970:	46bd      	mov	sp, r7
 801b972:	bd80      	pop	{r7, pc}

0801b974 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801b974:	b580      	push	{r7, lr}
 801b976:	b084      	sub	sp, #16
 801b978:	af00      	add	r7, sp, #0
 801b97a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	685b      	ldr	r3, [r3, #4]
 801b980:	60fb      	str	r3, [r7, #12]
 801b982:	68fb      	ldr	r3, [r7, #12]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d01b      	beq.n	801b9c0 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801b988:	68fb      	ldr	r3, [r7, #12]
 801b98a:	681a      	ldr	r2, [r3, #0]
 801b98c:	68fb      	ldr	r3, [r7, #12]
 801b98e:	681b      	ldr	r3, [r3, #0]
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	33c8      	adds	r3, #200	; 0xc8
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	4610      	mov	r0, r2
 801b998:	4798      	blx	r3
 801b99a:	4603      	mov	r3, r0
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d00b      	beq.n	801b9b8 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	681a      	ldr	r2, [r3, #0]
 801b9a4:	68fb      	ldr	r3, [r7, #12]
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	33ec      	adds	r3, #236	; 0xec
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	4610      	mov	r0, r2
 801b9b0:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	2200      	movs	r2, #0
 801b9b6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b9b8:	68fb      	ldr	r3, [r7, #12]
 801b9ba:	685b      	ldr	r3, [r3, #4]
 801b9bc:	60fb      	str	r3, [r7, #12]
 801b9be:	e7e0      	b.n	801b982 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	3388      	adds	r3, #136	; 0x88
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	6878      	ldr	r0, [r7, #4]
 801b9ca:	4798      	blx	r3
}
 801b9cc:	bf00      	nop
 801b9ce:	3710      	adds	r7, #16
 801b9d0:	46bd      	mov	sp, r7
 801b9d2:	bd80      	pop	{r7, pc}

0801b9d4 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801b9d4:	b580      	push	{r7, lr}
 801b9d6:	b084      	sub	sp, #16
 801b9d8:	af00      	add	r7, sp, #0
 801b9da:	6078      	str	r0, [r7, #4]
 801b9dc:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	685b      	ldr	r3, [r3, #4]
 801b9e2:	60fb      	str	r3, [r7, #12]
 801b9e4:	68fb      	ldr	r3, [r7, #12]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d016      	beq.n	801ba18 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	681a      	ldr	r2, [r3, #0]
 801b9ee:	68fb      	ldr	r3, [r7, #12]
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	33a8      	adds	r3, #168	; 0xa8
 801b9f6:	681b      	ldr	r3, [r3, #0]
 801b9f8:	6839      	ldr	r1, [r7, #0]
 801b9fa:	4610      	mov	r0, r2
 801b9fc:	4798      	blx	r3
 801b9fe:	4603      	mov	r3, r0
 801ba00:	f083 0301 	eor.w	r3, r3, #1
 801ba04:	b2db      	uxtb	r3, r3
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	d002      	beq.n	801ba10 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801ba0a:	68fb      	ldr	r3, [r7, #12]
 801ba0c:	2200      	movs	r2, #0
 801ba0e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ba10:	68fb      	ldr	r3, [r7, #12]
 801ba12:	685b      	ldr	r3, [r3, #4]
 801ba14:	60fb      	str	r3, [r7, #12]
 801ba16:	e7e5      	b.n	801b9e4 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	3388      	adds	r3, #136	; 0x88
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	6878      	ldr	r0, [r7, #4]
 801ba22:	4798      	blx	r3
}
 801ba24:	bf00      	nop
 801ba26:	3710      	adds	r7, #16
 801ba28:	46bd      	mov	sp, r7
 801ba2a:	bd80      	pop	{r7, pc}

0801ba2c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	b084      	sub	sp, #16
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	6078      	str	r0, [r7, #4]
 801ba34:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	685b      	ldr	r3, [r3, #4]
 801ba3a:	60fb      	str	r3, [r7, #12]
 801ba3c:	68fb      	ldr	r3, [r7, #12]
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d016      	beq.n	801ba70 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	681a      	ldr	r2, [r3, #0]
 801ba46:	68fb      	ldr	r3, [r7, #12]
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	33b0      	adds	r3, #176	; 0xb0
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	6839      	ldr	r1, [r7, #0]
 801ba52:	4610      	mov	r0, r2
 801ba54:	4798      	blx	r3
 801ba56:	4603      	mov	r3, r0
 801ba58:	f083 0301 	eor.w	r3, r3, #1
 801ba5c:	b2db      	uxtb	r3, r3
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	d002      	beq.n	801ba68 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801ba62:	68fb      	ldr	r3, [r7, #12]
 801ba64:	2200      	movs	r2, #0
 801ba66:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ba68:	68fb      	ldr	r3, [r7, #12]
 801ba6a:	685b      	ldr	r3, [r3, #4]
 801ba6c:	60fb      	str	r3, [r7, #12]
 801ba6e:	e7e5      	b.n	801ba3c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	3388      	adds	r3, #136	; 0x88
 801ba76:	681b      	ldr	r3, [r3, #0]
 801ba78:	6878      	ldr	r0, [r7, #4]
 801ba7a:	4798      	blx	r3
}
 801ba7c:	bf00      	nop
 801ba7e:	3710      	adds	r7, #16
 801ba80:	46bd      	mov	sp, r7
 801ba82:	bd80      	pop	{r7, pc}

0801ba84 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801ba84:	b580      	push	{r7, lr}
 801ba86:	b084      	sub	sp, #16
 801ba88:	af00      	add	r7, sp, #0
 801ba8a:	6078      	str	r0, [r7, #4]
 801ba8c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	685b      	ldr	r3, [r3, #4]
 801ba92:	60fb      	str	r3, [r7, #12]
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d016      	beq.n	801bac8 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801ba9a:	68fb      	ldr	r3, [r7, #12]
 801ba9c:	681a      	ldr	r2, [r3, #0]
 801ba9e:	68fb      	ldr	r3, [r7, #12]
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	681b      	ldr	r3, [r3, #0]
 801baa4:	33ac      	adds	r3, #172	; 0xac
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	6839      	ldr	r1, [r7, #0]
 801baaa:	4610      	mov	r0, r2
 801baac:	4798      	blx	r3
 801baae:	4603      	mov	r3, r0
 801bab0:	f083 0301 	eor.w	r3, r3, #1
 801bab4:	b2db      	uxtb	r3, r3
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d002      	beq.n	801bac0 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801baba:	68fb      	ldr	r3, [r7, #12]
 801babc:	2200      	movs	r2, #0
 801babe:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bac0:	68fb      	ldr	r3, [r7, #12]
 801bac2:	685b      	ldr	r3, [r3, #4]
 801bac4:	60fb      	str	r3, [r7, #12]
 801bac6:	e7e5      	b.n	801ba94 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	3388      	adds	r3, #136	; 0x88
 801bace:	681b      	ldr	r3, [r3, #0]
 801bad0:	6878      	ldr	r0, [r7, #4]
 801bad2:	4798      	blx	r3
}
 801bad4:	bf00      	nop
 801bad6:	3710      	adds	r7, #16
 801bad8:	46bd      	mov	sp, r7
 801bada:	bd80      	pop	{r7, pc}

0801badc <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801badc:	b580      	push	{r7, lr}
 801bade:	b084      	sub	sp, #16
 801bae0:	af00      	add	r7, sp, #0
 801bae2:	6078      	str	r0, [r7, #4]
 801bae4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	685b      	ldr	r3, [r3, #4]
 801baea:	60fb      	str	r3, [r7, #12]
 801baec:	68fb      	ldr	r3, [r7, #12]
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d016      	beq.n	801bb20 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801baf2:	68fb      	ldr	r3, [r7, #12]
 801baf4:	681a      	ldr	r2, [r3, #0]
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	33b4      	adds	r3, #180	; 0xb4
 801bafe:	681b      	ldr	r3, [r3, #0]
 801bb00:	6839      	ldr	r1, [r7, #0]
 801bb02:	4610      	mov	r0, r2
 801bb04:	4798      	blx	r3
 801bb06:	4603      	mov	r3, r0
 801bb08:	f083 0301 	eor.w	r3, r3, #1
 801bb0c:	b2db      	uxtb	r3, r3
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	d002      	beq.n	801bb18 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801bb12:	68fb      	ldr	r3, [r7, #12]
 801bb14:	2200      	movs	r2, #0
 801bb16:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	685b      	ldr	r3, [r3, #4]
 801bb1c:	60fb      	str	r3, [r7, #12]
 801bb1e:	e7e5      	b.n	801baec <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	681b      	ldr	r3, [r3, #0]
 801bb24:	3388      	adds	r3, #136	; 0x88
 801bb26:	681b      	ldr	r3, [r3, #0]
 801bb28:	6878      	ldr	r0, [r7, #4]
 801bb2a:	4798      	blx	r3
}
 801bb2c:	bf00      	nop
 801bb2e:	3710      	adds	r7, #16
 801bb30:	46bd      	mov	sp, r7
 801bb32:	bd80      	pop	{r7, pc}

0801bb34 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801bb34:	b580      	push	{r7, lr}
 801bb36:	b084      	sub	sp, #16
 801bb38:	af00      	add	r7, sp, #0
 801bb3a:	6078      	str	r0, [r7, #4]
 801bb3c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	685b      	ldr	r3, [r3, #4]
 801bb42:	60fb      	str	r3, [r7, #12]
 801bb44:	68fb      	ldr	r3, [r7, #12]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d016      	beq.n	801bb78 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	681a      	ldr	r2, [r3, #0]
 801bb4e:	68fb      	ldr	r3, [r7, #12]
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	33bc      	adds	r3, #188	; 0xbc
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	6839      	ldr	r1, [r7, #0]
 801bb5a:	4610      	mov	r0, r2
 801bb5c:	4798      	blx	r3
 801bb5e:	4603      	mov	r3, r0
 801bb60:	f083 0301 	eor.w	r3, r3, #1
 801bb64:	b2db      	uxtb	r3, r3
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d002      	beq.n	801bb70 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801bb6a:	68fb      	ldr	r3, [r7, #12]
 801bb6c:	2200      	movs	r2, #0
 801bb6e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	685b      	ldr	r3, [r3, #4]
 801bb74:	60fb      	str	r3, [r7, #12]
 801bb76:	e7e5      	b.n	801bb44 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	3388      	adds	r3, #136	; 0x88
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	6878      	ldr	r0, [r7, #4]
 801bb82:	4798      	blx	r3
}
 801bb84:	bf00      	nop
 801bb86:	3710      	adds	r7, #16
 801bb88:	46bd      	mov	sp, r7
 801bb8a:	bd80      	pop	{r7, pc}

0801bb8c <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801bb8c:	b580      	push	{r7, lr}
 801bb8e:	b084      	sub	sp, #16
 801bb90:	af00      	add	r7, sp, #0
 801bb92:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	685b      	ldr	r3, [r3, #4]
 801bb98:	60fb      	str	r3, [r7, #12]
 801bb9a:	68fb      	ldr	r3, [r7, #12]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d01d      	beq.n	801bbdc <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801bba0:	68fb      	ldr	r3, [r7, #12]
 801bba2:	681a      	ldr	r2, [r3, #0]
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	681b      	ldr	r3, [r3, #0]
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	33c8      	adds	r3, #200	; 0xc8
 801bbac:	681b      	ldr	r3, [r3, #0]
 801bbae:	4610      	mov	r0, r2
 801bbb0:	4798      	blx	r3
 801bbb2:	4603      	mov	r3, r0
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d00d      	beq.n	801bbd4 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801bbb8:	68fb      	ldr	r3, [r7, #12]
 801bbba:	681b      	ldr	r3, [r3, #0]
 801bbbc:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	681b      	ldr	r3, [r3, #0]
 801bbc8:	3388      	adds	r3, #136	; 0x88
 801bbca:	681b      	ldr	r3, [r3, #0]
 801bbcc:	6878      	ldr	r0, [r7, #4]
 801bbce:	4798      	blx	r3
            return matchingCall;
 801bbd0:	68bb      	ldr	r3, [r7, #8]
 801bbd2:	e004      	b.n	801bbde <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	685b      	ldr	r3, [r3, #4]
 801bbd8:	60fb      	str	r3, [r7, #12]
 801bbda:	e7de      	b.n	801bb9a <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801bbdc:	2300      	movs	r3, #0
}
 801bbde:	4618      	mov	r0, r3
 801bbe0:	3710      	adds	r7, #16
 801bbe2:	46bd      	mov	sp, r7
 801bbe4:	bd80      	pop	{r7, pc}

0801bbe6 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801bbe6:	b580      	push	{r7, lr}
 801bbe8:	b084      	sub	sp, #16
 801bbea:	af00      	add	r7, sp, #0
 801bbec:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	685b      	ldr	r3, [r3, #4]
 801bbf2:	60fb      	str	r3, [r7, #12]
 801bbf4:	68fb      	ldr	r3, [r7, #12]
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d012      	beq.n	801bc20 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	681a      	ldr	r2, [r3, #0]
 801bbfe:	68fb      	ldr	r3, [r7, #12]
 801bc00:	681b      	ldr	r3, [r3, #0]
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	33cc      	adds	r3, #204	; 0xcc
 801bc06:	681b      	ldr	r3, [r3, #0]
 801bc08:	4610      	mov	r0, r2
 801bc0a:	4798      	blx	r3
 801bc0c:	4603      	mov	r3, r0
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d002      	beq.n	801bc18 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801bc12:	68fb      	ldr	r3, [r7, #12]
 801bc14:	681b      	ldr	r3, [r3, #0]
 801bc16:	e004      	b.n	801bc22 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bc18:	68fb      	ldr	r3, [r7, #12]
 801bc1a:	685b      	ldr	r3, [r3, #4]
 801bc1c:	60fb      	str	r3, [r7, #12]
 801bc1e:	e7e9      	b.n	801bbf4 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801bc20:	2300      	movs	r3, #0
}
 801bc22:	4618      	mov	r0, r3
 801bc24:	3710      	adds	r7, #16
 801bc26:	46bd      	mov	sp, r7
 801bc28:	bd80      	pop	{r7, pc}

0801bc2a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801bc2a:	b580      	push	{r7, lr}
 801bc2c:	b084      	sub	sp, #16
 801bc2e:	af00      	add	r7, sp, #0
 801bc30:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	685b      	ldr	r3, [r3, #4]
 801bc36:	60fb      	str	r3, [r7, #12]
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d01d      	beq.n	801bc7a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801bc3e:	68fb      	ldr	r3, [r7, #12]
 801bc40:	681a      	ldr	r2, [r3, #0]
 801bc42:	68fb      	ldr	r3, [r7, #12]
 801bc44:	681b      	ldr	r3, [r3, #0]
 801bc46:	681b      	ldr	r3, [r3, #0]
 801bc48:	33cc      	adds	r3, #204	; 0xcc
 801bc4a:	681b      	ldr	r3, [r3, #0]
 801bc4c:	4610      	mov	r0, r2
 801bc4e:	4798      	blx	r3
 801bc50:	4603      	mov	r3, r0
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d00d      	beq.n	801bc72 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801bc56:	68fb      	ldr	r3, [r7, #12]
 801bc58:	681b      	ldr	r3, [r3, #0]
 801bc5a:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801bc5c:	68fb      	ldr	r3, [r7, #12]
 801bc5e:	2200      	movs	r2, #0
 801bc60:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	3388      	adds	r3, #136	; 0x88
 801bc68:	681b      	ldr	r3, [r3, #0]
 801bc6a:	6878      	ldr	r0, [r7, #4]
 801bc6c:	4798      	blx	r3
            return matchingCall;
 801bc6e:	68bb      	ldr	r3, [r7, #8]
 801bc70:	e004      	b.n	801bc7c <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bc72:	68fb      	ldr	r3, [r7, #12]
 801bc74:	685b      	ldr	r3, [r3, #4]
 801bc76:	60fb      	str	r3, [r7, #12]
 801bc78:	e7de      	b.n	801bc38 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801bc7a:	2300      	movs	r3, #0
}
 801bc7c:	4618      	mov	r0, r3
 801bc7e:	3710      	adds	r7, #16
 801bc80:	46bd      	mov	sp, r7
 801bc82:	bd80      	pop	{r7, pc}

0801bc84 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801bc84:	b580      	push	{r7, lr}
 801bc86:	b086      	sub	sp, #24
 801bc88:	af00      	add	r7, sp, #0
 801bc8a:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	685b      	ldr	r3, [r3, #4]
 801bc90:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801bc92:	2300      	movs	r3, #0
 801bc94:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801bc96:	2300      	movs	r3, #0
 801bc98:	60fb      	str	r3, [r7, #12]

    while (current) {
 801bc9a:	697b      	ldr	r3, [r7, #20]
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d024      	beq.n	801bcea <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801bca0:	697b      	ldr	r3, [r7, #20]
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	d11a      	bne.n	801bcde <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801bca8:	697b      	ldr	r3, [r7, #20]
 801bcaa:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801bcac:	693b      	ldr	r3, [r7, #16]
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	d106      	bne.n	801bcc0 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801bcb2:	697b      	ldr	r3, [r7, #20]
 801bcb4:	685b      	ldr	r3, [r3, #4]
 801bcb6:	617b      	str	r3, [r7, #20]
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	697a      	ldr	r2, [r7, #20]
 801bcbc:	605a      	str	r2, [r3, #4]
 801bcbe:	e006      	b.n	801bcce <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801bcc0:	697b      	ldr	r3, [r7, #20]
 801bcc2:	685a      	ldr	r2, [r3, #4]
 801bcc4:	693b      	ldr	r3, [r7, #16]
 801bcc6:	605a      	str	r2, [r3, #4]
 801bcc8:	693b      	ldr	r3, [r7, #16]
 801bcca:	685b      	ldr	r3, [r3, #4]
 801bccc:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801bcce:	68fb      	ldr	r3, [r7, #12]
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d0e2      	beq.n	801bc9a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801bcd4:	2108      	movs	r1, #8
 801bcd6:	4618      	mov	r0, r3
 801bcd8:	f7ee f82e 	bl	8009d38 <_ZdlPvj>
 801bcdc:	e7dd      	b.n	801bc9a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801bcde:	697b      	ldr	r3, [r7, #20]
 801bce0:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801bce2:	697b      	ldr	r3, [r7, #20]
 801bce4:	685b      	ldr	r3, [r3, #4]
 801bce6:	617b      	str	r3, [r7, #20]
    while (current) {
 801bce8:	e7d7      	b.n	801bc9a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801bcea:	bf00      	nop
 801bcec:	3718      	adds	r7, #24
 801bcee:	46bd      	mov	sp, r7
 801bcf0:	bd80      	pop	{r7, pc}

0801bcf2 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801bcf2:	b580      	push	{r7, lr}
 801bcf4:	b084      	sub	sp, #16
 801bcf6:	af00      	add	r7, sp, #0
 801bcf8:	6078      	str	r0, [r7, #4]
    while (head_) {
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	685b      	ldr	r3, [r3, #4]
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d019      	beq.n	801bd36 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	685b      	ldr	r3, [r3, #4]
 801bd06:	685b      	ldr	r3, [r3, #4]
 801bd08:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	685b      	ldr	r3, [r3, #4]
 801bd0e:	681b      	ldr	r3, [r3, #0]
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d004      	beq.n	801bd1e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801bd14:	681a      	ldr	r2, [r3, #0]
 801bd16:	3204      	adds	r2, #4
 801bd18:	6812      	ldr	r2, [r2, #0]
 801bd1a:	4618      	mov	r0, r3
 801bd1c:	4790      	blx	r2
        delete head_;
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	685b      	ldr	r3, [r3, #4]
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d003      	beq.n	801bd2e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801bd26:	2108      	movs	r1, #8
 801bd28:	4618      	mov	r0, r3
 801bd2a:	f7ee f805 	bl	8009d38 <_ZdlPvj>
        head_ = next;
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	68fa      	ldr	r2, [r7, #12]
 801bd32:	605a      	str	r2, [r3, #4]
    while (head_) {
 801bd34:	e7e1      	b.n	801bcfa <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801bd36:	bf00      	nop
 801bd38:	3710      	adds	r7, #16
 801bd3a:	46bd      	mov	sp, r7
 801bd3c:	bd80      	pop	{r7, pc}

0801bd3e <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801bd3e:	b580      	push	{r7, lr}
 801bd40:	b084      	sub	sp, #16
 801bd42:	af00      	add	r7, sp, #0
 801bd44:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	685b      	ldr	r3, [r3, #4]
 801bd4a:	60fb      	str	r3, [r7, #12]
 801bd4c:	68fb      	ldr	r3, [r7, #12]
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d00c      	beq.n	801bd6c <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801bd52:	68fb      	ldr	r3, [r7, #12]
 801bd54:	681a      	ldr	r2, [r3, #0]
 801bd56:	68fb      	ldr	r3, [r7, #12]
 801bd58:	681b      	ldr	r3, [r3, #0]
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	33ec      	adds	r3, #236	; 0xec
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	4610      	mov	r0, r2
 801bd62:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bd64:	68fb      	ldr	r3, [r7, #12]
 801bd66:	685b      	ldr	r3, [r3, #4]
 801bd68:	60fb      	str	r3, [r7, #12]
 801bd6a:	e7ef      	b.n	801bd4c <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801bd6c:	bf00      	nop
 801bd6e:	3710      	adds	r7, #16
 801bd70:	46bd      	mov	sp, r7
 801bd72:	bd80      	pop	{r7, pc}

0801bd74 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801bd74:	b580      	push	{r7, lr}
 801bd76:	b084      	sub	sp, #16
 801bd78:	af00      	add	r7, sp, #0
 801bd7a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	685b      	ldr	r3, [r3, #4]
 801bd80:	60fb      	str	r3, [r7, #12]
 801bd82:	68fb      	ldr	r3, [r7, #12]
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d00c      	beq.n	801bda2 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	681a      	ldr	r2, [r3, #0]
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	681b      	ldr	r3, [r3, #0]
 801bd92:	33e8      	adds	r3, #232	; 0xe8
 801bd94:	681b      	ldr	r3, [r3, #0]
 801bd96:	4610      	mov	r0, r2
 801bd98:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bd9a:	68fb      	ldr	r3, [r7, #12]
 801bd9c:	685b      	ldr	r3, [r3, #4]
 801bd9e:	60fb      	str	r3, [r7, #12]
 801bda0:	e7ef      	b.n	801bd82 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801bda2:	bf00      	nop
 801bda4:	3710      	adds	r7, #16
 801bda6:	46bd      	mov	sp, r7
 801bda8:	bd80      	pop	{r7, pc}

0801bdaa <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801bdaa:	b580      	push	{r7, lr}
 801bdac:	b084      	sub	sp, #16
 801bdae:	af00      	add	r7, sp, #0
 801bdb0:	6078      	str	r0, [r7, #4]
 801bdb2:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	685b      	ldr	r3, [r3, #4]
 801bdb8:	60fb      	str	r3, [r7, #12]
 801bdba:	68fb      	ldr	r3, [r7, #12]
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d00d      	beq.n	801bddc <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801bdc0:	68fb      	ldr	r3, [r7, #12]
 801bdc2:	681a      	ldr	r2, [r3, #0]
 801bdc4:	68fb      	ldr	r3, [r7, #12]
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	681b      	ldr	r3, [r3, #0]
 801bdca:	33dc      	adds	r3, #220	; 0xdc
 801bdcc:	681b      	ldr	r3, [r3, #0]
 801bdce:	6839      	ldr	r1, [r7, #0]
 801bdd0:	4610      	mov	r0, r2
 801bdd2:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bdd4:	68fb      	ldr	r3, [r7, #12]
 801bdd6:	685b      	ldr	r3, [r3, #4]
 801bdd8:	60fb      	str	r3, [r7, #12]
 801bdda:	e7ee      	b.n	801bdba <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801bddc:	bf00      	nop
 801bdde:	3710      	adds	r7, #16
 801bde0:	46bd      	mov	sp, r7
 801bde2:	bd80      	pop	{r7, pc}

0801bde4 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801bde4:	b580      	push	{r7, lr}
 801bde6:	b084      	sub	sp, #16
 801bde8:	af00      	add	r7, sp, #0
 801bdea:	6078      	str	r0, [r7, #4]
 801bdec:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	685b      	ldr	r3, [r3, #4]
 801bdf2:	60fb      	str	r3, [r7, #12]
 801bdf4:	68fb      	ldr	r3, [r7, #12]
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	d00d      	beq.n	801be16 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801bdfa:	68fb      	ldr	r3, [r7, #12]
 801bdfc:	681a      	ldr	r2, [r3, #0]
 801bdfe:	68fb      	ldr	r3, [r7, #12]
 801be00:	681b      	ldr	r3, [r3, #0]
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	33e0      	adds	r3, #224	; 0xe0
 801be06:	681b      	ldr	r3, [r3, #0]
 801be08:	6839      	ldr	r1, [r7, #0]
 801be0a:	4610      	mov	r0, r2
 801be0c:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be0e:	68fb      	ldr	r3, [r7, #12]
 801be10:	685b      	ldr	r3, [r3, #4]
 801be12:	60fb      	str	r3, [r7, #12]
 801be14:	e7ee      	b.n	801bdf4 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801be16:	bf00      	nop
 801be18:	3710      	adds	r7, #16
 801be1a:	46bd      	mov	sp, r7
 801be1c:	bd80      	pop	{r7, pc}
	...

0801be20 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801be20:	b590      	push	{r4, r7, lr}
 801be22:	b087      	sub	sp, #28
 801be24:	af00      	add	r7, sp, #0
 801be26:	60f8      	str	r0, [r7, #12]
 801be28:	60b9      	str	r1, [r7, #8]
 801be2a:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801be2c:	68b9      	ldr	r1, [r7, #8]
 801be2e:	68f8      	ldr	r0, [r7, #12]
 801be30:	f7f0 fb85 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801be34:	f107 0310 	add.w	r3, r7, #16
 801be38:	490f      	ldr	r1, [pc, #60]	; (801be78 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801be3a:	4618      	mov	r0, r3
 801be3c:	f7f0 fb2b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801be40:	f107 0310 	add.w	r3, r7, #16
 801be44:	4619      	mov	r1, r3
 801be46:	68f8      	ldr	r0, [r7, #12]
 801be48:	f7f0 fee9 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801be4c:	4603      	mov	r3, r0
 801be4e:	461c      	mov	r4, r3
 801be50:	f107 0310 	add.w	r3, r7, #16
 801be54:	4618      	mov	r0, r3
 801be56:	f7f0 fed6 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801be5a:	2c00      	cmp	r4, #0
 801be5c:	d007      	beq.n	801be6e <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801be5e:	6879      	ldr	r1, [r7, #4]
 801be60:	68f8      	ldr	r0, [r7, #12]
 801be62:	f7f0 ff4d 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801be66:	4905      	ldr	r1, [pc, #20]	; (801be7c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801be68:	68f8      	ldr	r0, [r7, #12]
 801be6a:	f7f0 ff5b 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801be6e:	bf00      	nop
}
 801be70:	68f8      	ldr	r0, [r7, #12]
 801be72:	371c      	adds	r7, #28
 801be74:	46bd      	mov	sp, r7
 801be76:	bd90      	pop	{r4, r7, pc}
 801be78:	08025ad8 	.word	0x08025ad8
 801be7c:	08025adc 	.word	0x08025adc

0801be80 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801be80:	b590      	push	{r4, r7, lr}
 801be82:	b087      	sub	sp, #28
 801be84:	af00      	add	r7, sp, #0
 801be86:	60f8      	str	r0, [r7, #12]
 801be88:	60b9      	str	r1, [r7, #8]
 801be8a:	607a      	str	r2, [r7, #4]
 801be8c:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801be8e:	68b9      	ldr	r1, [r7, #8]
 801be90:	68f8      	ldr	r0, [r7, #12]
 801be92:	f7f0 fb54 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801be96:	f107 0310 	add.w	r3, r7, #16
 801be9a:	4912      	ldr	r1, [pc, #72]	; (801bee4 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801be9c:	4618      	mov	r0, r3
 801be9e:	f7f0 fafa 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801bea2:	f107 0310 	add.w	r3, r7, #16
 801bea6:	4619      	mov	r1, r3
 801bea8:	68f8      	ldr	r0, [r7, #12]
 801beaa:	f7f0 fefd 	bl	800cca8 <_ZneRK12SimpleStringS1_>
 801beae:	4603      	mov	r3, r0
 801beb0:	461c      	mov	r4, r3
 801beb2:	f107 0310 	add.w	r3, r7, #16
 801beb6:	4618      	mov	r0, r3
 801beb8:	f7f0 fea5 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801bebc:	2c00      	cmp	r4, #0
 801bebe:	d003      	beq.n	801bec8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801bec0:	4909      	ldr	r1, [pc, #36]	; (801bee8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801bec2:	68f8      	ldr	r0, [r7, #12]
 801bec4:	f7f0 ff2e 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801bec8:	6879      	ldr	r1, [r7, #4]
 801beca:	68f8      	ldr	r0, [r7, #12]
 801becc:	f7f0 ff18 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801bed0:	6839      	ldr	r1, [r7, #0]
 801bed2:	68f8      	ldr	r0, [r7, #12]
 801bed4:	f7f0 ff14 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    return str;
 801bed8:	bf00      	nop
}
 801beda:	68f8      	ldr	r0, [r7, #12]
 801bedc:	371c      	adds	r7, #28
 801bede:	46bd      	mov	sp, r7
 801bee0:	bd90      	pop	{r4, r7, pc}
 801bee2:	bf00      	nop
 801bee4:	08025ad8 	.word	0x08025ad8
 801bee8:	08025ae4 	.word	0x08025ae4

0801beec <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801beec:	b580      	push	{r7, lr}
 801beee:	b08c      	sub	sp, #48	; 0x30
 801bef0:	af00      	add	r7, sp, #0
 801bef2:	60f8      	str	r0, [r7, #12]
 801bef4:	60b9      	str	r1, [r7, #8]
 801bef6:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801bef8:	f107 0314 	add.w	r3, r7, #20
 801befc:	4929      	ldr	r1, [pc, #164]	; (801bfa4 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801befe:	4618      	mov	r0, r3
 801bf00:	f7f0 fac9 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bf04:	68bb      	ldr	r3, [r7, #8]
 801bf06:	685b      	ldr	r3, [r3, #4]
 801bf08:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	d038      	beq.n	801bf82 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801bf10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf12:	681a      	ldr	r2, [r3, #0]
 801bf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	681b      	ldr	r3, [r3, #0]
 801bf1a:	33c0      	adds	r3, #192	; 0xc0
 801bf1c:	681b      	ldr	r3, [r3, #0]
 801bf1e:	4610      	mov	r0, r2
 801bf20:	4798      	blx	r3
 801bf22:	4603      	mov	r3, r0
 801bf24:	f083 0301 	eor.w	r3, r3, #1
 801bf28:	b2db      	uxtb	r3, r3
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d025      	beq.n	801bf7a <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801bf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf30:	6819      	ldr	r1, [r3, #0]
 801bf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	681b      	ldr	r3, [r3, #0]
 801bf38:	33f0      	adds	r3, #240	; 0xf0
 801bf3a:	681b      	ldr	r3, [r3, #0]
 801bf3c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801bf40:	4610      	mov	r0, r2
 801bf42:	4798      	blx	r3
 801bf44:	f107 001c 	add.w	r0, r7, #28
 801bf48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bf4c:	f107 0114 	add.w	r1, r7, #20
 801bf50:	687a      	ldr	r2, [r7, #4]
 801bf52:	f7ff ff95 	bl	801be80 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801bf56:	f107 021c 	add.w	r2, r7, #28
 801bf5a:	f107 0314 	add.w	r3, r7, #20
 801bf5e:	4611      	mov	r1, r2
 801bf60:	4618      	mov	r0, r3
 801bf62:	f7f0 fb04 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801bf66:	f107 031c 	add.w	r3, r7, #28
 801bf6a:	4618      	mov	r0, r3
 801bf6c:	f7f0 fe4b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801bf70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bf74:	4618      	mov	r0, r3
 801bf76:	f7f0 fe46 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf7c:	685b      	ldr	r3, [r3, #4]
 801bf7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bf80:	e7c3      	b.n	801bf0a <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801bf82:	68fb      	ldr	r3, [r7, #12]
 801bf84:	f107 0114 	add.w	r1, r7, #20
 801bf88:	687a      	ldr	r2, [r7, #4]
 801bf8a:	4618      	mov	r0, r3
 801bf8c:	f7ff ff48 	bl	801be20 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801bf90:	f107 0314 	add.w	r3, r7, #20
 801bf94:	4618      	mov	r0, r3
 801bf96:	f7f0 fe36 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801bf9a:	bf00      	nop
}
 801bf9c:	68f8      	ldr	r0, [r7, #12]
 801bf9e:	3730      	adds	r7, #48	; 0x30
 801bfa0:	46bd      	mov	sp, r7
 801bfa2:	bd80      	pop	{r7, pc}
 801bfa4:	08025ad8 	.word	0x08025ad8

0801bfa8 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801bfa8:	b580      	push	{r7, lr}
 801bfaa:	b08c      	sub	sp, #48	; 0x30
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	60f8      	str	r0, [r7, #12]
 801bfb0:	60b9      	str	r1, [r7, #8]
 801bfb2:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801bfb4:	f107 0314 	add.w	r3, r7, #20
 801bfb8:	4928      	ldr	r1, [pc, #160]	; (801c05c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801bfba:	4618      	mov	r0, r3
 801bfbc:	f7f0 fa6b 	bl	800c496 <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bfc0:	68bb      	ldr	r3, [r7, #8]
 801bfc2:	685b      	ldr	r3, [r3, #4]
 801bfc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d035      	beq.n	801c038 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfce:	681a      	ldr	r2, [r3, #0]
 801bfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfd2:	681b      	ldr	r3, [r3, #0]
 801bfd4:	681b      	ldr	r3, [r3, #0]
 801bfd6:	33c0      	adds	r3, #192	; 0xc0
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	4610      	mov	r0, r2
 801bfdc:	4798      	blx	r3
 801bfde:	4603      	mov	r3, r0
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d025      	beq.n	801c030 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801bfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfe6:	6819      	ldr	r1, [r3, #0]
 801bfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfea:	681b      	ldr	r3, [r3, #0]
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	33f0      	adds	r3, #240	; 0xf0
 801bff0:	681b      	ldr	r3, [r3, #0]
 801bff2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801bff6:	4610      	mov	r0, r2
 801bff8:	4798      	blx	r3
 801bffa:	f107 001c 	add.w	r0, r7, #28
 801bffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c002:	f107 0114 	add.w	r1, r7, #20
 801c006:	687a      	ldr	r2, [r7, #4]
 801c008:	f7ff ff3a 	bl	801be80 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c00c:	f107 021c 	add.w	r2, r7, #28
 801c010:	f107 0314 	add.w	r3, r7, #20
 801c014:	4611      	mov	r1, r2
 801c016:	4618      	mov	r0, r3
 801c018:	f7f0 faa9 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801c01c:	f107 031c 	add.w	r3, r7, #28
 801c020:	4618      	mov	r0, r3
 801c022:	f7f0 fdf0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801c026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c02a:	4618      	mov	r0, r3
 801c02c:	f7f0 fdeb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c032:	685b      	ldr	r3, [r3, #4]
 801c034:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c036:	e7c6      	b.n	801bfc6 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c038:	68fb      	ldr	r3, [r7, #12]
 801c03a:	f107 0114 	add.w	r1, r7, #20
 801c03e:	687a      	ldr	r2, [r7, #4]
 801c040:	4618      	mov	r0, r3
 801c042:	f7ff feed 	bl	801be20 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801c046:	f107 0314 	add.w	r3, r7, #20
 801c04a:	4618      	mov	r0, r3
 801c04c:	f7f0 fddb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c050:	bf00      	nop
}
 801c052:	68f8      	ldr	r0, [r7, #12]
 801c054:	3730      	adds	r7, #48	; 0x30
 801c056:	46bd      	mov	sp, r7
 801c058:	bd80      	pop	{r7, pc}
 801c05a:	bf00      	nop
 801c05c:	08025ad8 	.word	0x08025ad8

0801c060 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801c060:	b580      	push	{r7, lr}
 801c062:	b08e      	sub	sp, #56	; 0x38
 801c064:	af00      	add	r7, sp, #0
 801c066:	6078      	str	r0, [r7, #4]
 801c068:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801c06a:	f107 030c 	add.w	r3, r7, #12
 801c06e:	4936      	ldr	r1, [pc, #216]	; (801c148 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c070:	4618      	mov	r0, r3
 801c072:	f7f0 fa10 	bl	800c496 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c076:	683b      	ldr	r3, [r7, #0]
 801c078:	685b      	ldr	r3, [r3, #4]
 801c07a:	637b      	str	r3, [r7, #52]	; 0x34
 801c07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d044      	beq.n	801c10c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801c082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c084:	681a      	ldr	r2, [r3, #0]
 801c086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c088:	681b      	ldr	r3, [r3, #0]
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	33cc      	adds	r3, #204	; 0xcc
 801c08e:	681b      	ldr	r3, [r3, #0]
 801c090:	4610      	mov	r0, r2
 801c092:	4798      	blx	r3
 801c094:	4603      	mov	r3, r0
 801c096:	f083 0301 	eor.w	r3, r3, #1
 801c09a:	b2db      	uxtb	r3, r3
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	d031      	beq.n	801c104 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801c0a0:	f107 031c 	add.w	r3, r7, #28
 801c0a4:	4928      	ldr	r1, [pc, #160]	; (801c148 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c0a6:	4618      	mov	r0, r3
 801c0a8:	f7f0 f9f5 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801c0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0ae:	6819      	ldr	r1, [r3, #0]
 801c0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0b2:	681b      	ldr	r3, [r3, #0]
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	33f4      	adds	r3, #244	; 0xf4
 801c0b8:	681b      	ldr	r3, [r3, #0]
 801c0ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c0be:	4610      	mov	r0, r2
 801c0c0:	4798      	blx	r3
 801c0c2:	f107 0014 	add.w	r0, r7, #20
 801c0c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c0ca:	f107 021c 	add.w	r2, r7, #28
 801c0ce:	f107 010c 	add.w	r1, r7, #12
 801c0d2:	f7ff fed5 	bl	801be80 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c0d6:	f107 0214 	add.w	r2, r7, #20
 801c0da:	f107 030c 	add.w	r3, r7, #12
 801c0de:	4611      	mov	r1, r2
 801c0e0:	4618      	mov	r0, r3
 801c0e2:	f7f0 fa44 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801c0e6:	f107 0314 	add.w	r3, r7, #20
 801c0ea:	4618      	mov	r0, r3
 801c0ec:	f7f0 fd8b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801c0f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c0f4:	4618      	mov	r0, r3
 801c0f6:	f7f0 fd86 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801c0fa:	f107 031c 	add.w	r3, r7, #28
 801c0fe:	4618      	mov	r0, r3
 801c100:	f7f0 fd81 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c106:	685b      	ldr	r3, [r3, #4]
 801c108:	637b      	str	r3, [r7, #52]	; 0x34
 801c10a:	e7b7      	b.n	801c07c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801c10c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c110:	490d      	ldr	r1, [pc, #52]	; (801c148 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c112:	4618      	mov	r0, r3
 801c114:	f7f0 f9bf 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801c11e:	f107 010c 	add.w	r1, r7, #12
 801c122:	4618      	mov	r0, r3
 801c124:	f7ff fe7c 	bl	801be20 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801c128:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c12c:	4618      	mov	r0, r3
 801c12e:	f7f0 fd6a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801c132:	f107 030c 	add.w	r3, r7, #12
 801c136:	4618      	mov	r0, r3
 801c138:	f7f0 fd65 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801c13c:	bf00      	nop
}
 801c13e:	6878      	ldr	r0, [r7, #4]
 801c140:	3738      	adds	r7, #56	; 0x38
 801c142:	46bd      	mov	sp, r7
 801c144:	bd80      	pop	{r7, pc}
 801c146:	bf00      	nop
 801c148:	08025ad8 	.word	0x08025ad8

0801c14c <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801c14c:	b580      	push	{r7, lr}
 801c14e:	b084      	sub	sp, #16
 801c150:	af00      	add	r7, sp, #0
 801c152:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	685b      	ldr	r3, [r3, #4]
 801c158:	60fb      	str	r3, [r7, #12]
 801c15a:	68fb      	ldr	r3, [r7, #12]
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d014      	beq.n	801c18a <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801c160:	68fb      	ldr	r3, [r7, #12]
 801c162:	681a      	ldr	r2, [r3, #0]
 801c164:	68fb      	ldr	r3, [r7, #12]
 801c166:	681b      	ldr	r3, [r3, #0]
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	33d0      	adds	r3, #208	; 0xd0
 801c16c:	681b      	ldr	r3, [r3, #0]
 801c16e:	4610      	mov	r0, r2
 801c170:	4798      	blx	r3
 801c172:	4603      	mov	r3, r0
 801c174:	f083 0301 	eor.w	r3, r3, #1
 801c178:	b2db      	uxtb	r3, r3
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d001      	beq.n	801c182 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801c17e:	2301      	movs	r3, #1
 801c180:	e004      	b.n	801c18c <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c182:	68fb      	ldr	r3, [r7, #12]
 801c184:	685b      	ldr	r3, [r3, #4]
 801c186:	60fb      	str	r3, [r7, #12]
 801c188:	e7e7      	b.n	801c15a <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801c18a:	2300      	movs	r3, #0
}
 801c18c:	4618      	mov	r0, r3
 801c18e:	3710      	adds	r7, #16
 801c190:	46bd      	mov	sp, r7
 801c192:	bd80      	pop	{r7, pc}

0801c194 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801c194:	b480      	push	{r7}
 801c196:	b083      	sub	sp, #12
 801c198:	af00      	add	r7, sp, #0
 801c19a:	6078      	str	r0, [r7, #4]
 801c19c:	460b      	mov	r3, r1
 801c19e:	70fb      	strb	r3, [r7, #3]
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	78fa      	ldrb	r2, [r7, #3]
 801c1a4:	711a      	strb	r2, [r3, #4]
 801c1a6:	bf00      	nop
 801c1a8:	370c      	adds	r7, #12
 801c1aa:	46bd      	mov	sp, r7
 801c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1b0:	4770      	bx	lr
	...

0801c1b4 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801c1b4:	b580      	push	{r7, lr}
 801c1b6:	b082      	sub	sp, #8
 801c1b8:	af00      	add	r7, sp, #0
 801c1ba:	6078      	str	r0, [r7, #4]
 801c1bc:	460b      	mov	r3, r1
 801c1be:	70fb      	strb	r3, [r7, #3]
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	4618      	mov	r0, r3
 801c1c4:	f7ed ff6a 	bl	800a09c <_ZN14TestTerminatorC1Ev>
 801c1c8:	4a05      	ldr	r2, [pc, #20]	; (801c1e0 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	601a      	str	r2, [r3, #0]
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	78fa      	ldrb	r2, [r7, #3]
 801c1d2:	711a      	strb	r2, [r3, #4]
    {
    }
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	4618      	mov	r0, r3
 801c1d8:	3708      	adds	r7, #8
 801c1da:	46bd      	mov	sp, r7
 801c1dc:	bd80      	pop	{r7, pc}
 801c1de:	bf00      	nop
 801c1e0:	08028c48 	.word	0x08028c48

0801c1e4 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801c1e4:	b580      	push	{r7, lr}
 801c1e6:	b082      	sub	sp, #8
 801c1e8:	af00      	add	r7, sp, #0
 801c1ea:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	791b      	ldrb	r3, [r3, #4]
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	d001      	beq.n	801c1f8 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801c1f4:	f7f6 f9fe 	bl	80125f4 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801c1f8:	f7f7 fd40 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c1fc:	4603      	mov	r3, r0
 801c1fe:	681a      	ldr	r2, [r3, #0]
 801c200:	6812      	ldr	r2, [r2, #0]
 801c202:	4618      	mov	r0, r3
 801c204:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801c206:	bf00      	nop
 801c208:	3708      	adds	r7, #8
 801c20a:	46bd      	mov	sp, r7
 801c20c:	bd80      	pop	{r7, pc}
	...

0801c210 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801c210:	b580      	push	{r7, lr}
 801c212:	b082      	sub	sp, #8
 801c214:	af00      	add	r7, sp, #0
 801c216:	6078      	str	r0, [r7, #4]
    {
 801c218:	4a05      	ldr	r2, [pc, #20]	; (801c230 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	601a      	str	r2, [r3, #0]
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	4618      	mov	r0, r3
 801c222:	f7f7 fdbb 	bl	8013d9c <_ZN14TestTerminatorD1Ev>
    }
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	4618      	mov	r0, r3
 801c22a:	3708      	adds	r7, #8
 801c22c:	46bd      	mov	sp, r7
 801c22e:	bd80      	pop	{r7, pc}
 801c230:	08028c48 	.word	0x08028c48

0801c234 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801c234:	b580      	push	{r7, lr}
 801c236:	b082      	sub	sp, #8
 801c238:	af00      	add	r7, sp, #0
 801c23a:	6078      	str	r0, [r7, #4]
    }
 801c23c:	6878      	ldr	r0, [r7, #4]
 801c23e:	f7ff ffe7 	bl	801c210 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801c242:	2108      	movs	r1, #8
 801c244:	6878      	ldr	r0, [r7, #4]
 801c246:	f7ed fd77 	bl	8009d38 <_ZdlPvj>
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	4618      	mov	r0, r3
 801c24e:	3708      	adds	r7, #8
 801c250:	46bd      	mov	sp, r7
 801c252:	bd80      	pop	{r7, pc}

0801c254 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801c254:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c256:	b085      	sub	sp, #20
 801c258:	af00      	add	r7, sp, #0
 801c25a:	6078      	str	r0, [r7, #4]
 801c25c:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	330c      	adds	r3, #12
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	6878      	ldr	r0, [r7, #4]
 801c268:	4798      	blx	r3
 801c26a:	4603      	mov	r3, r0
 801c26c:	681a      	ldr	r2, [r3, #0]
 801c26e:	321c      	adds	r2, #28
 801c270:	6812      	ldr	r2, [r2, #0]
 801c272:	4618      	mov	r0, r3
 801c274:	4790      	blx	r2
 801c276:	4603      	mov	r3, r0
 801c278:	f083 0301 	eor.w	r3, r3, #1
 801c27c:	b2db      	uxtb	r3, r3
 801c27e:	2b00      	cmp	r3, #0
 801c280:	d01d      	beq.n	801c2be <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	681b      	ldr	r3, [r3, #0]
 801c286:	330c      	adds	r3, #12
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	6878      	ldr	r0, [r7, #4]
 801c28c:	4798      	blx	r3
 801c28e:	4604      	mov	r4, r0
 801c290:	6823      	ldr	r3, [r4, #0]
 801c292:	339c      	adds	r3, #156	; 0x9c
 801c294:	681d      	ldr	r5, [r3, #0]
 801c296:	683e      	ldr	r6, [r7, #0]
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	791a      	ldrb	r2, [r3, #4]
 801c29c:	f107 0308 	add.w	r3, r7, #8
 801c2a0:	4611      	mov	r1, r2
 801c2a2:	4618      	mov	r0, r3
 801c2a4:	f7ff ff86 	bl	801c1b4 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801c2a8:	f107 0308 	add.w	r3, r7, #8
 801c2ac:	461a      	mov	r2, r3
 801c2ae:	4631      	mov	r1, r6
 801c2b0:	4620      	mov	r0, r4
 801c2b2:	47a8      	blx	r5
 801c2b4:	f107 0308 	add.w	r3, r7, #8
 801c2b8:	4618      	mov	r0, r3
 801c2ba:	f7ff ffa9 	bl	801c210 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801c2be:	bf00      	nop
 801c2c0:	3714      	adds	r7, #20
 801c2c2:	46bd      	mov	sp, r7
 801c2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c2c6 <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801c2c6:	b580      	push	{r7, lr}
 801c2c8:	b082      	sub	sp, #8
 801c2ca:	af00      	add	r7, sp, #0
 801c2cc:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801c2ce:	f7f7 fcc5 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801c2d2:	4603      	mov	r3, r0
}
 801c2d4:	4618      	mov	r0, r3
 801c2d6:	3708      	adds	r7, #8
 801c2d8:	46bd      	mov	sp, r7
 801c2da:	bd80      	pop	{r7, pc}

0801c2dc <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801c2dc:	b590      	push	{r4, r7, lr}
 801c2de:	b085      	sub	sp, #20
 801c2e0:	af00      	add	r7, sp, #0
 801c2e2:	6078      	str	r0, [r7, #4]
 801c2e4:	6039      	str	r1, [r7, #0]
 801c2e6:	687c      	ldr	r4, [r7, #4]
 801c2e8:	f107 0308 	add.w	r3, r7, #8
 801c2ec:	490b      	ldr	r1, [pc, #44]	; (801c31c <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801c2ee:	4618      	mov	r0, r3
 801c2f0:	f7f0 f8d1 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801c2f4:	f107 0308 	add.w	r3, r7, #8
 801c2f8:	461a      	mov	r2, r3
 801c2fa:	6839      	ldr	r1, [r7, #0]
 801c2fc:	4620      	mov	r0, r4
 801c2fe:	f7f1 ff29 	bl	800e154 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801c302:	f107 0308 	add.w	r3, r7, #8
 801c306:	4618      	mov	r0, r3
 801c308:	f7f0 fc7d 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801c30c:	4a04      	ldr	r2, [pc, #16]	; (801c320 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	601a      	str	r2, [r3, #0]
{
}
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	4618      	mov	r0, r3
 801c316:	3714      	adds	r7, #20
 801c318:	46bd      	mov	sp, r7
 801c31a:	bd90      	pop	{r4, r7, pc}
 801c31c:	08025ae8 	.word	0x08025ae8
 801c320:	08027bd4 	.word	0x08027bd4

0801c324 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801c324:	b5b0      	push	{r4, r5, r7, lr}
 801c326:	b08a      	sub	sp, #40	; 0x28
 801c328:	af00      	add	r7, sp, #0
 801c32a:	6078      	str	r0, [r7, #4]
 801c32c:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	332c      	adds	r3, #44	; 0x2c
 801c332:	492b      	ldr	r1, [pc, #172]	; (801c3e0 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801c334:	4618      	mov	r0, r3
 801c336:	f7f0 fcf5 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801c340:	683b      	ldr	r3, [r7, #0]
 801c342:	681b      	ldr	r3, [r3, #0]
 801c344:	337c      	adds	r3, #124	; 0x7c
 801c346:	681c      	ldr	r4, [r3, #0]
 801c348:	f107 0310 	add.w	r3, r7, #16
 801c34c:	4925      	ldr	r1, [pc, #148]	; (801c3e4 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801c34e:	4618      	mov	r0, r3
 801c350:	f7f0 f8a1 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801c354:	f107 0308 	add.w	r3, r7, #8
 801c358:	f107 0210 	add.w	r2, r7, #16
 801c35c:	6839      	ldr	r1, [r7, #0]
 801c35e:	4618      	mov	r0, r3
 801c360:	47a0      	blx	r4
 801c362:	f107 0308 	add.w	r3, r7, #8
 801c366:	4619      	mov	r1, r3
 801c368:	4628      	mov	r0, r5
 801c36a:	f7f0 fcc9 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801c36e:	f107 0308 	add.w	r3, r7, #8
 801c372:	4618      	mov	r0, r3
 801c374:	f7f0 fc47 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801c378:	f107 0310 	add.w	r3, r7, #16
 801c37c:	4618      	mov	r0, r3
 801c37e:	f7f0 fc42 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	332c      	adds	r3, #44	; 0x2c
 801c386:	4918      	ldr	r1, [pc, #96]	; (801c3e8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801c388:	4618      	mov	r0, r3
 801c38a:	f7f0 fccb 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801c38e:	687b      	ldr	r3, [r7, #4]
 801c390:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801c394:	683b      	ldr	r3, [r7, #0]
 801c396:	681b      	ldr	r3, [r3, #0]
 801c398:	3380      	adds	r3, #128	; 0x80
 801c39a:	681c      	ldr	r4, [r3, #0]
 801c39c:	f107 0320 	add.w	r3, r7, #32
 801c3a0:	4910      	ldr	r1, [pc, #64]	; (801c3e4 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801c3a2:	4618      	mov	r0, r3
 801c3a4:	f7f0 f877 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801c3a8:	f107 0318 	add.w	r3, r7, #24
 801c3ac:	f107 0220 	add.w	r2, r7, #32
 801c3b0:	6839      	ldr	r1, [r7, #0]
 801c3b2:	4618      	mov	r0, r3
 801c3b4:	47a0      	blx	r4
 801c3b6:	f107 0318 	add.w	r3, r7, #24
 801c3ba:	4619      	mov	r1, r3
 801c3bc:	4628      	mov	r0, r5
 801c3be:	f7f0 fc9f 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801c3c2:	f107 0318 	add.w	r3, r7, #24
 801c3c6:	4618      	mov	r0, r3
 801c3c8:	f7f0 fc1d 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801c3cc:	f107 0320 	add.w	r3, r7, #32
 801c3d0:	4618      	mov	r0, r3
 801c3d2:	f7f0 fc18 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 801c3d6:	bf00      	nop
 801c3d8:	3728      	adds	r7, #40	; 0x28
 801c3da:	46bd      	mov	sp, r7
 801c3dc:	bdb0      	pop	{r4, r5, r7, pc}
 801c3de:	bf00      	nop
 801c3e0:	08025b38 	.word	0x08025b38
 801c3e4:	08025b64 	.word	0x08025b64
 801c3e8:	08025b68 	.word	0x08025b68

0801c3ec <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801c3ec:	b590      	push	{r4, r7, lr}
 801c3ee:	b08f      	sub	sp, #60	; 0x3c
 801c3f0:	af00      	add	r7, sp, #0
 801c3f2:	60f8      	str	r0, [r7, #12]
 801c3f4:	60b9      	str	r1, [r7, #8]
 801c3f6:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801c3f8:	f107 0310 	add.w	r3, r7, #16
 801c3fc:	4618      	mov	r0, r3
 801c3fe:	f7ff f877 	bl	801b4f0 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801c402:	f107 0310 	add.w	r3, r7, #16
 801c406:	687a      	ldr	r2, [r7, #4]
 801c408:	68b9      	ldr	r1, [r7, #8]
 801c40a:	4618      	mov	r0, r3
 801c40c:	f7ff fa16 	bl	801b83c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801c410:	68fb      	ldr	r3, [r7, #12]
 801c412:	332c      	adds	r3, #44	; 0x2c
 801c414:	4937      	ldr	r1, [pc, #220]	; (801c4f4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801c416:	4618      	mov	r0, r3
 801c418:	f7f0 fc84 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801c41c:	68fb      	ldr	r3, [r7, #12]
 801c41e:	332c      	adds	r3, #44	; 0x2c
 801c420:	68b9      	ldr	r1, [r7, #8]
 801c422:	4618      	mov	r0, r3
 801c424:	f7f0 fc6c 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801c428:	68fb      	ldr	r3, [r7, #12]
 801c42a:	332c      	adds	r3, #44	; 0x2c
 801c42c:	4932      	ldr	r1, [pc, #200]	; (801c4f8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801c42e:	4618      	mov	r0, r3
 801c430:	f7f0 fc78 	bl	800cd24 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801c434:	68fb      	ldr	r3, [r7, #12]
 801c436:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c43a:	f107 0320 	add.w	r3, r7, #32
 801c43e:	492f      	ldr	r1, [pc, #188]	; (801c4fc <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801c440:	4618      	mov	r0, r3
 801c442:	f7f0 f828 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801c446:	f107 0318 	add.w	r3, r7, #24
 801c44a:	f107 0220 	add.w	r2, r7, #32
 801c44e:	f107 0110 	add.w	r1, r7, #16
 801c452:	4618      	mov	r0, r3
 801c454:	f7ff fd4a 	bl	801beec <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801c458:	f107 0318 	add.w	r3, r7, #24
 801c45c:	4619      	mov	r1, r3
 801c45e:	4620      	mov	r0, r4
 801c460:	f7f0 fc4e 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801c464:	f107 0318 	add.w	r3, r7, #24
 801c468:	4618      	mov	r0, r3
 801c46a:	f7f0 fbcc 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801c46e:	f107 0320 	add.w	r3, r7, #32
 801c472:	4618      	mov	r0, r3
 801c474:	f7f0 fbc7 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801c478:	68fb      	ldr	r3, [r7, #12]
 801c47a:	332c      	adds	r3, #44	; 0x2c
 801c47c:	4920      	ldr	r1, [pc, #128]	; (801c500 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801c47e:	4618      	mov	r0, r3
 801c480:	f7f0 fc50 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801c484:	68fb      	ldr	r3, [r7, #12]
 801c486:	332c      	adds	r3, #44	; 0x2c
 801c488:	68b9      	ldr	r1, [r7, #8]
 801c48a:	4618      	mov	r0, r3
 801c48c:	f7f0 fc38 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801c490:	68fb      	ldr	r3, [r7, #12]
 801c492:	332c      	adds	r3, #44	; 0x2c
 801c494:	4918      	ldr	r1, [pc, #96]	; (801c4f8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801c496:	4618      	mov	r0, r3
 801c498:	f7f0 fc44 	bl	800cd24 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801c49c:	68fb      	ldr	r3, [r7, #12]
 801c49e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c4a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c4a6:	4915      	ldr	r1, [pc, #84]	; (801c4fc <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801c4a8:	4618      	mov	r0, r3
 801c4aa:	f7ef fff4 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801c4ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c4b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801c4b6:	f107 0110 	add.w	r1, r7, #16
 801c4ba:	4618      	mov	r0, r3
 801c4bc:	f7ff fd74 	bl	801bfa8 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801c4c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c4c4:	4619      	mov	r1, r3
 801c4c6:	4620      	mov	r0, r4
 801c4c8:	f7f0 fc1a 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801c4cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c4d0:	4618      	mov	r0, r3
 801c4d2:	f7f0 fb98 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801c4d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c4da:	4618      	mov	r0, r3
 801c4dc:	f7f0 fb93 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801c4e0:	f107 0310 	add.w	r3, r7, #16
 801c4e4:	4618      	mov	r0, r3
 801c4e6:	f7ff f817 	bl	801b518 <_ZN21MockExpectedCallsListD1Ev>
}
 801c4ea:	bf00      	nop
 801c4ec:	373c      	adds	r7, #60	; 0x3c
 801c4ee:	46bd      	mov	sp, r7
 801c4f0:	bd90      	pop	{r4, r7, pc}
 801c4f2:	bf00      	nop
 801c4f4:	08025b90 	.word	0x08025b90
 801c4f8:	08025bd0 	.word	0x08025bd0
 801c4fc:	08025b64 	.word	0x08025b64
 801c500:	08025bd4 	.word	0x08025bd4

0801c504 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801c504:	b590      	push	{r4, r7, lr}
 801c506:	b087      	sub	sp, #28
 801c508:	af00      	add	r7, sp, #0
 801c50a:	60f8      	str	r0, [r7, #12]
 801c50c:	60b9      	str	r1, [r7, #8]
 801c50e:	607a      	str	r2, [r7, #4]
 801c510:	68fb      	ldr	r3, [r7, #12]
 801c512:	68b9      	ldr	r1, [r7, #8]
 801c514:	4618      	mov	r0, r3
 801c516:	f7ff fee1 	bl	801c2dc <_ZN11MockFailureC1EP10UtestShell>
 801c51a:	4a10      	ldr	r2, [pc, #64]	; (801c55c <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c526:	f107 0310 	add.w	r3, r7, #16
 801c52a:	490d      	ldr	r1, [pc, #52]	; (801c560 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801c52c:	4618      	mov	r0, r3
 801c52e:	f7ef ffb2 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801c532:	f107 0310 	add.w	r3, r7, #16
 801c536:	4619      	mov	r1, r3
 801c538:	4620      	mov	r0, r4
 801c53a:	f7f0 f818 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801c53e:	f107 0310 	add.w	r3, r7, #16
 801c542:	4618      	mov	r0, r3
 801c544:	f7f0 fb5f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801c548:	68fb      	ldr	r3, [r7, #12]
 801c54a:	6879      	ldr	r1, [r7, #4]
 801c54c:	4618      	mov	r0, r3
 801c54e:	f7ff fee9 	bl	801c324 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801c552:	68fb      	ldr	r3, [r7, #12]
 801c554:	4618      	mov	r0, r3
 801c556:	371c      	adds	r7, #28
 801c558:	46bd      	mov	sp, r7
 801c55a:	bd90      	pop	{r4, r7, pc}
 801c55c:	08027ba8 	.word	0x08027ba8
 801c560:	08025c10 	.word	0x08025c10

0801c564 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801c564:	b590      	push	{r4, r7, lr}
 801c566:	b08d      	sub	sp, #52	; 0x34
 801c568:	af00      	add	r7, sp, #0
 801c56a:	60f8      	str	r0, [r7, #12]
 801c56c:	60b9      	str	r1, [r7, #8]
 801c56e:	607a      	str	r2, [r7, #4]
 801c570:	603b      	str	r3, [r7, #0]
 801c572:	68fb      	ldr	r3, [r7, #12]
 801c574:	68b9      	ldr	r1, [r7, #8]
 801c576:	4618      	mov	r0, r3
 801c578:	f7ff feb0 	bl	801c2dc <_ZN11MockFailureC1EP10UtestShell>
 801c57c:	4a2f      	ldr	r2, [pc, #188]	; (801c63c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801c57e:	68fb      	ldr	r3, [r7, #12]
 801c580:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801c582:	683b      	ldr	r3, [r7, #0]
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	3310      	adds	r3, #16
 801c588:	681b      	ldr	r3, [r3, #0]
 801c58a:	6879      	ldr	r1, [r7, #4]
 801c58c:	6838      	ldr	r0, [r7, #0]
 801c58e:	4798      	blx	r3
 801c590:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801c592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c594:	2b00      	cmp	r3, #0
 801c596:	d027      	beq.n	801c5e8 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801c598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c59a:	1c5a      	adds	r2, r3, #1
 801c59c:	f107 0314 	add.w	r3, r7, #20
 801c5a0:	4611      	mov	r1, r2
 801c5a2:	4618      	mov	r0, r3
 801c5a4:	f7f1 fa00 	bl	800d9a8 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801c5a8:	68fb      	ldr	r3, [r7, #12]
 801c5aa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c5ae:	f107 0314 	add.w	r3, r7, #20
 801c5b2:	4618      	mov	r0, r3
 801c5b4:	f7f0 fafa 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801c5b8:	4602      	mov	r2, r0
 801c5ba:	f107 031c 	add.w	r3, r7, #28
 801c5be:	4920      	ldr	r1, [pc, #128]	; (801c640 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801c5c0:	4618      	mov	r0, r3
 801c5c2:	f7f1 f827 	bl	800d614 <_Z16StringFromFormatPKcz>
 801c5c6:	f107 031c 	add.w	r3, r7, #28
 801c5ca:	4619      	mov	r1, r3
 801c5cc:	4620      	mov	r0, r4
 801c5ce:	f7ef ffce 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801c5d2:	f107 031c 	add.w	r3, r7, #28
 801c5d6:	4618      	mov	r0, r3
 801c5d8:	f7f0 fb15 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801c5dc:	f107 0314 	add.w	r3, r7, #20
 801c5e0:	4618      	mov	r0, r3
 801c5e2:	f7f0 fb10 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801c5e6:	e013      	b.n	801c610 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801c5e8:	68fb      	ldr	r3, [r7, #12]
 801c5ea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c5ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c5f2:	4914      	ldr	r1, [pc, #80]	; (801c644 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801c5f4:	4618      	mov	r0, r3
 801c5f6:	f7ef ff4e 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801c5fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c5fe:	4619      	mov	r1, r3
 801c600:	4620      	mov	r0, r4
 801c602:	f7ef ffb4 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801c606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c60a:	4618      	mov	r0, r3
 801c60c:	f7f0 fafb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	332c      	adds	r3, #44	; 0x2c
 801c614:	6879      	ldr	r1, [r7, #4]
 801c616:	4618      	mov	r0, r3
 801c618:	f7f0 fb72 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	332c      	adds	r3, #44	; 0x2c
 801c620:	4909      	ldr	r1, [pc, #36]	; (801c648 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801c622:	4618      	mov	r0, r3
 801c624:	f7f0 fb7e 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	6839      	ldr	r1, [r7, #0]
 801c62c:	4618      	mov	r0, r3
 801c62e:	f7ff fe79 	bl	801c324 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	4618      	mov	r0, r3
 801c636:	3734      	adds	r7, #52	; 0x34
 801c638:	46bd      	mov	sp, r7
 801c63a:	bd90      	pop	{r4, r7, pc}
 801c63c:	08028548 	.word	0x08028548
 801c640:	08025c40 	.word	0x08025c40
 801c644:	08025c7c 	.word	0x08025c7c
 801c648:	08025bd0 	.word	0x08025bd0

0801c64c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801c64c:	b590      	push	{r4, r7, lr}
 801c64e:	b089      	sub	sp, #36	; 0x24
 801c650:	af00      	add	r7, sp, #0
 801c652:	60f8      	str	r0, [r7, #12]
 801c654:	60b9      	str	r1, [r7, #8]
 801c656:	607a      	str	r2, [r7, #4]
 801c658:	68fb      	ldr	r3, [r7, #12]
 801c65a:	68b9      	ldr	r1, [r7, #8]
 801c65c:	4618      	mov	r0, r3
 801c65e:	f7ff fe3d 	bl	801c2dc <_ZN11MockFailureC1EP10UtestShell>
 801c662:	4a1f      	ldr	r2, [pc, #124]	; (801c6e0 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801c664:	68fb      	ldr	r3, [r7, #12]
 801c666:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801c668:	f107 0310 	add.w	r3, r7, #16
 801c66c:	4618      	mov	r0, r3
 801c66e:	f7fe ff3f 	bl	801b4f0 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801c672:	f107 0310 	add.w	r3, r7, #16
 801c676:	6879      	ldr	r1, [r7, #4]
 801c678:	4618      	mov	r0, r3
 801c67a:	f7ff f909 	bl	801b890 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801c67e:	f107 0310 	add.w	r3, r7, #16
 801c682:	4618      	mov	r0, r3
 801c684:	f7ff f94c 	bl	801b920 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c68e:	f107 0318 	add.w	r3, r7, #24
 801c692:	4914      	ldr	r1, [pc, #80]	; (801c6e4 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801c694:	4618      	mov	r0, r3
 801c696:	f7ef fefe 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801c69a:	f107 0318 	add.w	r3, r7, #24
 801c69e:	4619      	mov	r1, r3
 801c6a0:	4620      	mov	r0, r4
 801c6a2:	f7ef ff64 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801c6a6:	f107 0318 	add.w	r3, r7, #24
 801c6aa:	4618      	mov	r0, r3
 801c6ac:	f7f0 faab 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801c6b0:	68fb      	ldr	r3, [r7, #12]
 801c6b2:	332c      	adds	r3, #44	; 0x2c
 801c6b4:	490c      	ldr	r1, [pc, #48]	; (801c6e8 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801c6b6:	4618      	mov	r0, r3
 801c6b8:	f7f0 fb34 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	f107 0210 	add.w	r2, r7, #16
 801c6c2:	4611      	mov	r1, r2
 801c6c4:	4618      	mov	r0, r3
 801c6c6:	f7ff fe2d 	bl	801c324 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801c6ca:	f107 0310 	add.w	r3, r7, #16
 801c6ce:	4618      	mov	r0, r3
 801c6d0:	f7fe ff22 	bl	801b518 <_ZN21MockExpectedCallsListD1Ev>
}
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	4618      	mov	r0, r3
 801c6d8:	3724      	adds	r7, #36	; 0x24
 801c6da:	46bd      	mov	sp, r7
 801c6dc:	bd90      	pop	{r4, r7, pc}
 801c6de:	bf00      	nop
 801c6e0:	08027b7c 	.word	0x08027b7c
 801c6e4:	08025ca8 	.word	0x08025ca8
 801c6e8:	08025bd0 	.word	0x08025bd0

0801c6ec <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801c6ec:	b590      	push	{r4, r7, lr}
 801c6ee:	b099      	sub	sp, #100	; 0x64
 801c6f0:	af00      	add	r7, sp, #0
 801c6f2:	60f8      	str	r0, [r7, #12]
 801c6f4:	60b9      	str	r1, [r7, #8]
 801c6f6:	607a      	str	r2, [r7, #4]
 801c6f8:	603b      	str	r3, [r7, #0]
 801c6fa:	68fb      	ldr	r3, [r7, #12]
 801c6fc:	68b9      	ldr	r1, [r7, #8]
 801c6fe:	4618      	mov	r0, r3
 801c700:	f7ff fdec 	bl	801c2dc <_ZN11MockFailureC1EP10UtestShell>
 801c704:	4a9e      	ldr	r2, [pc, #632]	; (801c980 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801c70a:	f107 0310 	add.w	r3, r7, #16
 801c70e:	4618      	mov	r0, r3
 801c710:	f7fe feee 	bl	801b4f0 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801c714:	f107 0310 	add.w	r3, r7, #16
 801c718:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801c71a:	6879      	ldr	r1, [r7, #4]
 801c71c:	4618      	mov	r0, r3
 801c71e:	f7ff f88d 	bl	801b83c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801c722:	683b      	ldr	r3, [r7, #0]
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	335c      	adds	r3, #92	; 0x5c
 801c728:	681b      	ldr	r3, [r3, #0]
 801c72a:	f107 0218 	add.w	r2, r7, #24
 801c72e:	6839      	ldr	r1, [r7, #0]
 801c730:	4610      	mov	r0, r2
 801c732:	4798      	blx	r3
 801c734:	f107 0218 	add.w	r2, r7, #24
 801c738:	f107 0310 	add.w	r3, r7, #16
 801c73c:	4611      	mov	r1, r2
 801c73e:	4618      	mov	r0, r3
 801c740:	f7ff f948 	bl	801b9d4 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801c744:	f107 0318 	add.w	r3, r7, #24
 801c748:	4618      	mov	r0, r3
 801c74a:	f7f0 fa5c 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801c74e:	f107 0310 	add.w	r3, r7, #16
 801c752:	4618      	mov	r0, r3
 801c754:	f7fe ff4d 	bl	801b5f2 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801c758:	4603      	mov	r3, r0
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d037      	beq.n	801c7ce <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801c75e:	68fb      	ldr	r3, [r7, #12]
 801c760:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c764:	f107 0320 	add.w	r3, r7, #32
 801c768:	4986      	ldr	r1, [pc, #536]	; (801c984 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801c76a:	4618      	mov	r0, r3
 801c76c:	f7ef fe93 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801c770:	f107 0320 	add.w	r3, r7, #32
 801c774:	4619      	mov	r1, r3
 801c776:	4620      	mov	r0, r4
 801c778:	f7ef fef9 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801c77c:	f107 0320 	add.w	r3, r7, #32
 801c780:	4618      	mov	r0, r3
 801c782:	f7f0 fa40 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	332c      	adds	r3, #44	; 0x2c
 801c78a:	6879      	ldr	r1, [r7, #4]
 801c78c:	4618      	mov	r0, r3
 801c78e:	f7f0 fab7 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	332c      	adds	r3, #44	; 0x2c
 801c796:	497c      	ldr	r1, [pc, #496]	; (801c988 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801c798:	4618      	mov	r0, r3
 801c79a:	f7f0 fac3 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801c79e:	68fb      	ldr	r3, [r7, #12]
 801c7a0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c7a4:	683b      	ldr	r3, [r7, #0]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	335c      	adds	r3, #92	; 0x5c
 801c7aa:	681b      	ldr	r3, [r3, #0]
 801c7ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801c7b0:	6839      	ldr	r1, [r7, #0]
 801c7b2:	4610      	mov	r0, r2
 801c7b4:	4798      	blx	r3
 801c7b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c7ba:	4619      	mov	r1, r3
 801c7bc:	4620      	mov	r0, r4
 801c7be:	f7f0 fa9f 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801c7c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c7c6:	4618      	mov	r0, r3
 801c7c8:	f7f0 fa1d 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801c7cc:	e056      	b.n	801c87c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c7d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c7d8:	496c      	ldr	r1, [pc, #432]	; (801c98c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801c7da:	4618      	mov	r0, r3
 801c7dc:	f7ef fe5b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801c7e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c7e4:	4619      	mov	r1, r3
 801c7e6:	4620      	mov	r0, r4
 801c7e8:	f7ef fec1 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801c7ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c7f0:	4618      	mov	r0, r3
 801c7f2:	f7f0 fa08 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c7fc:	683b      	ldr	r3, [r7, #0]
 801c7fe:	681b      	ldr	r3, [r3, #0]
 801c800:	335c      	adds	r3, #92	; 0x5c
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c808:	6839      	ldr	r1, [r7, #0]
 801c80a:	4610      	mov	r0, r2
 801c80c:	4798      	blx	r3
 801c80e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c812:	4619      	mov	r1, r3
 801c814:	4620      	mov	r0, r4
 801c816:	f7f0 fa73 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801c81a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c81e:	4618      	mov	r0, r3
 801c820:	f7f0 f9f1 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801c824:	68fb      	ldr	r3, [r7, #12]
 801c826:	332c      	adds	r3, #44	; 0x2c
 801c828:	4959      	ldr	r1, [pc, #356]	; (801c990 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801c82a:	4618      	mov	r0, r3
 801c82c:	f7f0 fa7a 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801c830:	68fb      	ldr	r3, [r7, #12]
 801c832:	332c      	adds	r3, #44	; 0x2c
 801c834:	6879      	ldr	r1, [r7, #4]
 801c836:	4618      	mov	r0, r3
 801c838:	f7f0 fa62 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	332c      	adds	r3, #44	; 0x2c
 801c840:	4954      	ldr	r1, [pc, #336]	; (801c994 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801c842:	4618      	mov	r0, r3
 801c844:	f7f0 fa6e 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c84e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c852:	6839      	ldr	r1, [r7, #0]
 801c854:	4618      	mov	r0, r3
 801c856:	f7fd faa3 	bl	8019da0 <_Z10StringFromRK14MockNamedValue>
 801c85a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c85e:	4619      	mov	r1, r3
 801c860:	4620      	mov	r0, r4
 801c862:	f7f0 fa4d 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801c866:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c86a:	4618      	mov	r0, r3
 801c86c:	f7f0 f9cb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	332c      	adds	r3, #44	; 0x2c
 801c874:	4948      	ldr	r1, [pc, #288]	; (801c998 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801c876:	4618      	mov	r0, r3
 801c878:	f7f0 fa54 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801c87c:	68fb      	ldr	r3, [r7, #12]
 801c87e:	332c      	adds	r3, #44	; 0x2c
 801c880:	4946      	ldr	r1, [pc, #280]	; (801c99c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801c882:	4618      	mov	r0, r3
 801c884:	f7f0 fa4e 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801c88c:	6879      	ldr	r1, [r7, #4]
 801c88e:	4618      	mov	r0, r3
 801c890:	f7ff fdac 	bl	801c3ec <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	332c      	adds	r3, #44	; 0x2c
 801c898:	4941      	ldr	r1, [pc, #260]	; (801c9a0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801c89a:	4618      	mov	r0, r3
 801c89c:	f7f0 fa42 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801c8a0:	68fb      	ldr	r3, [r7, #12]
 801c8a2:	332c      	adds	r3, #44	; 0x2c
 801c8a4:	6879      	ldr	r1, [r7, #4]
 801c8a6:	4618      	mov	r0, r3
 801c8a8:	f7f0 fa2a 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	332c      	adds	r3, #44	; 0x2c
 801c8b0:	493a      	ldr	r1, [pc, #232]	; (801c99c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801c8b2:	4618      	mov	r0, r3
 801c8b4:	f7f0 fa36 	bl	800cd24 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	332c      	adds	r3, #44	; 0x2c
 801c8bc:	4939      	ldr	r1, [pc, #228]	; (801c9a4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801c8be:	4618      	mov	r0, r3
 801c8c0:	f7f0 fa30 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801c8c4:	68fb      	ldr	r3, [r7, #12]
 801c8c6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c8ca:	683b      	ldr	r3, [r7, #0]
 801c8cc:	681b      	ldr	r3, [r3, #0]
 801c8ce:	3360      	adds	r3, #96	; 0x60
 801c8d0:	681b      	ldr	r3, [r3, #0]
 801c8d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801c8d6:	6839      	ldr	r1, [r7, #0]
 801c8d8:	4610      	mov	r0, r2
 801c8da:	4798      	blx	r3
 801c8dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c8e0:	4619      	mov	r1, r3
 801c8e2:	4620      	mov	r0, r4
 801c8e4:	f7f0 fa0c 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801c8e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c8ec:	4618      	mov	r0, r3
 801c8ee:	f7f0 f98a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	332c      	adds	r3, #44	; 0x2c
 801c8f6:	492c      	ldr	r1, [pc, #176]	; (801c9a8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801c8f8:	4618      	mov	r0, r3
 801c8fa:	f7f0 fa13 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801c8fe:	68fb      	ldr	r3, [r7, #12]
 801c900:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c904:	683b      	ldr	r3, [r7, #0]
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	335c      	adds	r3, #92	; 0x5c
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c910:	6839      	ldr	r1, [r7, #0]
 801c912:	4610      	mov	r0, r2
 801c914:	4798      	blx	r3
 801c916:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c91a:	4619      	mov	r1, r3
 801c91c:	4620      	mov	r0, r4
 801c91e:	f7f0 f9ef 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801c922:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c926:	4618      	mov	r0, r3
 801c928:	f7f0 f96d 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	332c      	adds	r3, #44	; 0x2c
 801c930:	491e      	ldr	r1, [pc, #120]	; (801c9ac <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801c932:	4618      	mov	r0, r3
 801c934:	f7f0 f9f6 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801c938:	68fb      	ldr	r3, [r7, #12]
 801c93a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c93e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c942:	6839      	ldr	r1, [r7, #0]
 801c944:	4618      	mov	r0, r3
 801c946:	f7fd fa2b 	bl	8019da0 <_Z10StringFromRK14MockNamedValue>
 801c94a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c94e:	4619      	mov	r1, r3
 801c950:	4620      	mov	r0, r4
 801c952:	f7f0 f9d5 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801c956:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c95a:	4618      	mov	r0, r3
 801c95c:	f7f0 f953 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	332c      	adds	r3, #44	; 0x2c
 801c964:	490c      	ldr	r1, [pc, #48]	; (801c998 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801c966:	4618      	mov	r0, r3
 801c968:	f7f0 f9dc 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801c96c:	f107 0310 	add.w	r3, r7, #16
 801c970:	4618      	mov	r0, r3
 801c972:	f7fe fdd1 	bl	801b518 <_ZN21MockExpectedCallsListD1Ev>
}
 801c976:	68fb      	ldr	r3, [r7, #12]
 801c978:	4618      	mov	r0, r3
 801c97a:	3764      	adds	r7, #100	; 0x64
 801c97c:	46bd      	mov	sp, r7
 801c97e:	bd90      	pop	{r4, r7, pc}
 801c980:	0802851c 	.word	0x0802851c
 801c984:	08025ccc 	.word	0x08025ccc
 801c988:	08025d04 	.word	0x08025d04
 801c98c:	08025d08 	.word	0x08025d08
 801c990:	08025d40 	.word	0x08025d40
 801c994:	08025d50 	.word	0x08025d50
 801c998:	08025d58 	.word	0x08025d58
 801c99c:	08025bd0 	.word	0x08025bd0
 801c9a0:	08025d5c 	.word	0x08025d5c
 801c9a4:	08025b64 	.word	0x08025b64
 801c9a8:	08025d90 	.word	0x08025d90
 801c9ac:	08025d94 	.word	0x08025d94

0801c9b0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801c9b0:	b590      	push	{r4, r7, lr}
 801c9b2:	b097      	sub	sp, #92	; 0x5c
 801c9b4:	af00      	add	r7, sp, #0
 801c9b6:	60f8      	str	r0, [r7, #12]
 801c9b8:	60b9      	str	r1, [r7, #8]
 801c9ba:	607a      	str	r2, [r7, #4]
 801c9bc:	603b      	str	r3, [r7, #0]
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	68b9      	ldr	r1, [r7, #8]
 801c9c2:	4618      	mov	r0, r3
 801c9c4:	f7ff fc8a 	bl	801c2dc <_ZN11MockFailureC1EP10UtestShell>
 801c9c8:	4a90      	ldr	r2, [pc, #576]	; (801cc0c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801c9ca:	68fb      	ldr	r3, [r7, #12]
 801c9cc:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801c9ce:	f107 0310 	add.w	r3, r7, #16
 801c9d2:	4618      	mov	r0, r3
 801c9d4:	f7fe fd8c 	bl	801b4f0 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801c9d8:	f107 0310 	add.w	r3, r7, #16
 801c9dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c9de:	6879      	ldr	r1, [r7, #4]
 801c9e0:	4618      	mov	r0, r3
 801c9e2:	f7fe ff2b 	bl	801b83c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801c9e6:	683b      	ldr	r3, [r7, #0]
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	335c      	adds	r3, #92	; 0x5c
 801c9ec:	681b      	ldr	r3, [r3, #0]
 801c9ee:	f107 0218 	add.w	r2, r7, #24
 801c9f2:	6839      	ldr	r1, [r7, #0]
 801c9f4:	4610      	mov	r0, r2
 801c9f6:	4798      	blx	r3
 801c9f8:	f107 0218 	add.w	r2, r7, #24
 801c9fc:	f107 0310 	add.w	r3, r7, #16
 801ca00:	4611      	mov	r1, r2
 801ca02:	4618      	mov	r0, r3
 801ca04:	f7ff f812 	bl	801ba2c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801ca08:	f107 0318 	add.w	r3, r7, #24
 801ca0c:	4618      	mov	r0, r3
 801ca0e:	f7f0 f8fa 	bl	800cc06 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801ca12:	f107 0310 	add.w	r3, r7, #16
 801ca16:	4618      	mov	r0, r3
 801ca18:	f7fe fdeb 	bl	801b5f2 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801ca1c:	4603      	mov	r3, r0
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	d037      	beq.n	801ca92 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801ca22:	68fb      	ldr	r3, [r7, #12]
 801ca24:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ca28:	f107 0320 	add.w	r3, r7, #32
 801ca2c:	4978      	ldr	r1, [pc, #480]	; (801cc10 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801ca2e:	4618      	mov	r0, r3
 801ca30:	f7ef fd31 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801ca34:	f107 0320 	add.w	r3, r7, #32
 801ca38:	4619      	mov	r1, r3
 801ca3a:	4620      	mov	r0, r4
 801ca3c:	f7ef fd97 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801ca40:	f107 0320 	add.w	r3, r7, #32
 801ca44:	4618      	mov	r0, r3
 801ca46:	f7f0 f8de 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801ca4a:	68fb      	ldr	r3, [r7, #12]
 801ca4c:	332c      	adds	r3, #44	; 0x2c
 801ca4e:	6879      	ldr	r1, [r7, #4]
 801ca50:	4618      	mov	r0, r3
 801ca52:	f7f0 f955 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	332c      	adds	r3, #44	; 0x2c
 801ca5a:	496e      	ldr	r1, [pc, #440]	; (801cc14 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801ca5c:	4618      	mov	r0, r3
 801ca5e:	f7f0 f961 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801ca62:	68fb      	ldr	r3, [r7, #12]
 801ca64:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ca68:	683b      	ldr	r3, [r7, #0]
 801ca6a:	681b      	ldr	r3, [r3, #0]
 801ca6c:	335c      	adds	r3, #92	; 0x5c
 801ca6e:	681b      	ldr	r3, [r3, #0]
 801ca70:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801ca74:	6839      	ldr	r1, [r7, #0]
 801ca76:	4610      	mov	r0, r2
 801ca78:	4798      	blx	r3
 801ca7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ca7e:	4619      	mov	r1, r3
 801ca80:	4620      	mov	r0, r4
 801ca82:	f7f0 f93d 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801ca86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ca8a:	4618      	mov	r0, r3
 801ca8c:	f7f0 f8bb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ca90:	e059      	b.n	801cb46 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801ca92:	68fb      	ldr	r3, [r7, #12]
 801ca94:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ca98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ca9c:	495e      	ldr	r1, [pc, #376]	; (801cc18 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801ca9e:	4618      	mov	r0, r3
 801caa0:	f7ef fcf9 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801caa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801caa8:	4619      	mov	r1, r3
 801caaa:	4620      	mov	r0, r4
 801caac:	f7ef fd5f 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801cab0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cab4:	4618      	mov	r0, r3
 801cab6:	f7f0 f8a6 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cac0:	683b      	ldr	r3, [r7, #0]
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	3360      	adds	r3, #96	; 0x60
 801cac6:	681b      	ldr	r3, [r3, #0]
 801cac8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801cacc:	6839      	ldr	r1, [r7, #0]
 801cace:	4610      	mov	r0, r2
 801cad0:	4798      	blx	r3
 801cad2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cad6:	4619      	mov	r1, r3
 801cad8:	4620      	mov	r0, r4
 801cada:	f7f0 f911 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801cade:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cae2:	4618      	mov	r0, r3
 801cae4:	f7f0 f88f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801cae8:	68fb      	ldr	r3, [r7, #12]
 801caea:	332c      	adds	r3, #44	; 0x2c
 801caec:	494b      	ldr	r1, [pc, #300]	; (801cc1c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801caee:	4618      	mov	r0, r3
 801caf0:	f7f0 f918 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801caf4:	68fb      	ldr	r3, [r7, #12]
 801caf6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cafa:	683b      	ldr	r3, [r7, #0]
 801cafc:	681b      	ldr	r3, [r3, #0]
 801cafe:	335c      	adds	r3, #92	; 0x5c
 801cb00:	681b      	ldr	r3, [r3, #0]
 801cb02:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801cb06:	6839      	ldr	r1, [r7, #0]
 801cb08:	4610      	mov	r0, r2
 801cb0a:	4798      	blx	r3
 801cb0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cb10:	4619      	mov	r1, r3
 801cb12:	4620      	mov	r0, r4
 801cb14:	f7f0 f8f4 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801cb18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cb1c:	4618      	mov	r0, r3
 801cb1e:	f7f0 f872 	bl	800cc06 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801cb22:	68fb      	ldr	r3, [r7, #12]
 801cb24:	332c      	adds	r3, #44	; 0x2c
 801cb26:	493e      	ldr	r1, [pc, #248]	; (801cc20 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801cb28:	4618      	mov	r0, r3
 801cb2a:	f7f0 f8fb 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	332c      	adds	r3, #44	; 0x2c
 801cb32:	6879      	ldr	r1, [r7, #4]
 801cb34:	4618      	mov	r0, r3
 801cb36:	f7f0 f8e3 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801cb3a:	68fb      	ldr	r3, [r7, #12]
 801cb3c:	332c      	adds	r3, #44	; 0x2c
 801cb3e:	4939      	ldr	r1, [pc, #228]	; (801cc24 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801cb40:	4618      	mov	r0, r3
 801cb42:	f7f0 f8ef 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801cb46:	68fb      	ldr	r3, [r7, #12]
 801cb48:	332c      	adds	r3, #44	; 0x2c
 801cb4a:	4937      	ldr	r1, [pc, #220]	; (801cc28 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801cb4c:	4618      	mov	r0, r3
 801cb4e:	f7f0 f8e9 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801cb52:	68fb      	ldr	r3, [r7, #12]
 801cb54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cb56:	6879      	ldr	r1, [r7, #4]
 801cb58:	4618      	mov	r0, r3
 801cb5a:	f7ff fc47 	bl	801c3ec <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801cb5e:	68fb      	ldr	r3, [r7, #12]
 801cb60:	332c      	adds	r3, #44	; 0x2c
 801cb62:	4932      	ldr	r1, [pc, #200]	; (801cc2c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801cb64:	4618      	mov	r0, r3
 801cb66:	f7f0 f8dd 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801cb6a:	68fb      	ldr	r3, [r7, #12]
 801cb6c:	332c      	adds	r3, #44	; 0x2c
 801cb6e:	6879      	ldr	r1, [r7, #4]
 801cb70:	4618      	mov	r0, r3
 801cb72:	f7f0 f8c5 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801cb76:	68fb      	ldr	r3, [r7, #12]
 801cb78:	332c      	adds	r3, #44	; 0x2c
 801cb7a:	492b      	ldr	r1, [pc, #172]	; (801cc28 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801cb7c:	4618      	mov	r0, r3
 801cb7e:	f7f0 f8d1 	bl	800cd24 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801cb82:	68fb      	ldr	r3, [r7, #12]
 801cb84:	332c      	adds	r3, #44	; 0x2c
 801cb86:	492a      	ldr	r1, [pc, #168]	; (801cc30 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801cb88:	4618      	mov	r0, r3
 801cb8a:	f7f0 f8cb 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cb94:	683b      	ldr	r3, [r7, #0]
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	3360      	adds	r3, #96	; 0x60
 801cb9a:	681b      	ldr	r3, [r3, #0]
 801cb9c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801cba0:	6839      	ldr	r1, [r7, #0]
 801cba2:	4610      	mov	r0, r2
 801cba4:	4798      	blx	r3
 801cba6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cbaa:	4619      	mov	r1, r3
 801cbac:	4620      	mov	r0, r4
 801cbae:	f7f0 f8a7 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801cbb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cbb6:	4618      	mov	r0, r3
 801cbb8:	f7f0 f825 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801cbbc:	68fb      	ldr	r3, [r7, #12]
 801cbbe:	332c      	adds	r3, #44	; 0x2c
 801cbc0:	491c      	ldr	r1, [pc, #112]	; (801cc34 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801cbc2:	4618      	mov	r0, r3
 801cbc4:	f7f0 f8ae 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801cbc8:	68fb      	ldr	r3, [r7, #12]
 801cbca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cbce:	683b      	ldr	r3, [r7, #0]
 801cbd0:	681b      	ldr	r3, [r3, #0]
 801cbd2:	335c      	adds	r3, #92	; 0x5c
 801cbd4:	681b      	ldr	r3, [r3, #0]
 801cbd6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801cbda:	6839      	ldr	r1, [r7, #0]
 801cbdc:	4610      	mov	r0, r2
 801cbde:	4798      	blx	r3
 801cbe0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801cbe4:	4619      	mov	r1, r3
 801cbe6:	4620      	mov	r0, r4
 801cbe8:	f7f0 f88a 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801cbec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801cbf0:	4618      	mov	r0, r3
 801cbf2:	f7f0 f808 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801cbf6:	f107 0310 	add.w	r3, r7, #16
 801cbfa:	4618      	mov	r0, r3
 801cbfc:	f7fe fc8c 	bl	801b518 <_ZN21MockExpectedCallsListD1Ev>
}
 801cc00:	68fb      	ldr	r3, [r7, #12]
 801cc02:	4618      	mov	r0, r3
 801cc04:	375c      	adds	r7, #92	; 0x5c
 801cc06:	46bd      	mov	sp, r7
 801cc08:	bd90      	pop	{r4, r7, pc}
 801cc0a:	bf00      	nop
 801cc0c:	080284f0 	.word	0x080284f0
 801cc10:	08025d98 	.word	0x08025d98
 801cc14:	08025d04 	.word	0x08025d04
 801cc18:	08025dd8 	.word	0x08025dd8
 801cc1c:	08025e04 	.word	0x08025e04
 801cc20:	08025d40 	.word	0x08025d40
 801cc24:	08025e1c 	.word	0x08025e1c
 801cc28:	08025bd0 	.word	0x08025bd0
 801cc2c:	08025e20 	.word	0x08025e20
 801cc30:	08025b64 	.word	0x08025b64
 801cc34:	08025d90 	.word	0x08025d90

0801cc38 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801cc38:	b590      	push	{r4, r7, lr}
 801cc3a:	b08b      	sub	sp, #44	; 0x2c
 801cc3c:	af00      	add	r7, sp, #0
 801cc3e:	60f8      	str	r0, [r7, #12]
 801cc40:	60b9      	str	r1, [r7, #8]
 801cc42:	607a      	str	r2, [r7, #4]
 801cc44:	603b      	str	r3, [r7, #0]
 801cc46:	68fb      	ldr	r3, [r7, #12]
 801cc48:	68b9      	ldr	r1, [r7, #8]
 801cc4a:	4618      	mov	r0, r3
 801cc4c:	f7ff fb46 	bl	801c2dc <_ZN11MockFailureC1EP10UtestShell>
 801cc50:	4a30      	ldr	r2, [pc, #192]	; (801cd14 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801cc52:	68fb      	ldr	r3, [r7, #12]
 801cc54:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801cc56:	f107 0310 	add.w	r3, r7, #16
 801cc5a:	4618      	mov	r0, r3
 801cc5c:	f7fe fc48 	bl	801b4f0 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801cc60:	f107 0310 	add.w	r3, r7, #16
 801cc64:	683a      	ldr	r2, [r7, #0]
 801cc66:	6879      	ldr	r1, [r7, #4]
 801cc68:	4618      	mov	r0, r3
 801cc6a:	f7fe fde7 	bl	801b83c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cc74:	f107 0318 	add.w	r3, r7, #24
 801cc78:	4927      	ldr	r1, [pc, #156]	; (801cd18 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801cc7a:	4618      	mov	r0, r3
 801cc7c:	f7ef fc0b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801cc80:	f107 0318 	add.w	r3, r7, #24
 801cc84:	4619      	mov	r1, r3
 801cc86:	4620      	mov	r0, r4
 801cc88:	f7ef fc71 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801cc8c:	f107 0318 	add.w	r3, r7, #24
 801cc90:	4618      	mov	r0, r3
 801cc92:	f7ef ffb8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801cc96:	68fb      	ldr	r3, [r7, #12]
 801cc98:	332c      	adds	r3, #44	; 0x2c
 801cc9a:	6879      	ldr	r1, [r7, #4]
 801cc9c:	4618      	mov	r0, r3
 801cc9e:	f7f0 f82f 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801cca2:	68fb      	ldr	r3, [r7, #12]
 801cca4:	332c      	adds	r3, #44	; 0x2c
 801cca6:	491d      	ldr	r1, [pc, #116]	; (801cd1c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801cca8:	4618      	mov	r0, r3
 801ccaa:	f7f0 f83b 	bl	800cd24 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801ccae:	68fb      	ldr	r3, [r7, #12]
 801ccb0:	683a      	ldr	r2, [r7, #0]
 801ccb2:	6879      	ldr	r1, [r7, #4]
 801ccb4:	4618      	mov	r0, r3
 801ccb6:	f7ff fb99 	bl	801c3ec <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801ccba:	68fb      	ldr	r3, [r7, #12]
 801ccbc:	332c      	adds	r3, #44	; 0x2c
 801ccbe:	4918      	ldr	r1, [pc, #96]	; (801cd20 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801ccc0:	4618      	mov	r0, r3
 801ccc2:	f7f0 f82f 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801ccc6:	68fb      	ldr	r3, [r7, #12]
 801ccc8:	332c      	adds	r3, #44	; 0x2c
 801ccca:	4916      	ldr	r1, [pc, #88]	; (801cd24 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801cccc:	4618      	mov	r0, r3
 801ccce:	f7f0 f829 	bl	800cd24 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801ccd2:	68fb      	ldr	r3, [r7, #12]
 801ccd4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ccd8:	f107 0320 	add.w	r3, r7, #32
 801ccdc:	f107 0210 	add.w	r2, r7, #16
 801cce0:	4611      	mov	r1, r2
 801cce2:	4618      	mov	r0, r3
 801cce4:	f7ff f9bc 	bl	801c060 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801cce8:	f107 0320 	add.w	r3, r7, #32
 801ccec:	4619      	mov	r1, r3
 801ccee:	4620      	mov	r0, r4
 801ccf0:	f7f0 f806 	bl	800cd00 <_ZN12SimpleStringpLERKS_>
 801ccf4:	f107 0320 	add.w	r3, r7, #32
 801ccf8:	4618      	mov	r0, r3
 801ccfa:	f7ef ff84 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801ccfe:	f107 0310 	add.w	r3, r7, #16
 801cd02:	4618      	mov	r0, r3
 801cd04:	f7fe fc08 	bl	801b518 <_ZN21MockExpectedCallsListD1Ev>
}
 801cd08:	68fb      	ldr	r3, [r7, #12]
 801cd0a:	4618      	mov	r0, r3
 801cd0c:	372c      	adds	r7, #44	; 0x2c
 801cd0e:	46bd      	mov	sp, r7
 801cd10:	bd90      	pop	{r4, r7, pc}
 801cd12:	bf00      	nop
 801cd14:	080284c4 	.word	0x080284c4
 801cd18:	08025e5c 	.word	0x08025e5c
 801cd1c:	08025e8c 	.word	0x08025e8c
 801cd20:	08025ea0 	.word	0x08025ea0
 801cd24:	08025b64 	.word	0x08025b64

0801cd28 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801cd28:	b590      	push	{r4, r7, lr}
 801cd2a:	b087      	sub	sp, #28
 801cd2c:	af00      	add	r7, sp, #0
 801cd2e:	60f8      	str	r0, [r7, #12]
 801cd30:	60b9      	str	r1, [r7, #8]
 801cd32:	607a      	str	r2, [r7, #4]
 801cd34:	68fb      	ldr	r3, [r7, #12]
 801cd36:	68b9      	ldr	r1, [r7, #8]
 801cd38:	4618      	mov	r0, r3
 801cd3a:	f7ff facf 	bl	801c2dc <_ZN11MockFailureC1EP10UtestShell>
 801cd3e:	4a10      	ldr	r2, [pc, #64]	; (801cd80 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801cd40:	68fb      	ldr	r3, [r7, #12]
 801cd42:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cd4a:	6878      	ldr	r0, [r7, #4]
 801cd4c:	f7ef ff2e 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801cd50:	4602      	mov	r2, r0
 801cd52:	f107 0310 	add.w	r3, r7, #16
 801cd56:	490b      	ldr	r1, [pc, #44]	; (801cd84 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801cd58:	4618      	mov	r0, r3
 801cd5a:	f7f0 fc5b 	bl	800d614 <_Z16StringFromFormatPKcz>
 801cd5e:	f107 0310 	add.w	r3, r7, #16
 801cd62:	4619      	mov	r1, r3
 801cd64:	4620      	mov	r0, r4
 801cd66:	f7ef fc02 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801cd6a:	f107 0310 	add.w	r3, r7, #16
 801cd6e:	4618      	mov	r0, r3
 801cd70:	f7ef ff49 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 801cd74:	68fb      	ldr	r3, [r7, #12]
 801cd76:	4618      	mov	r0, r3
 801cd78:	371c      	adds	r7, #28
 801cd7a:	46bd      	mov	sp, r7
 801cd7c:	bd90      	pop	{r4, r7, pc}
 801cd7e:	bf00      	nop
 801cd80:	08028498 	.word	0x08028498
 801cd84:	08025ecc 	.word	0x08025ecc

0801cd88 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801cd88:	b590      	push	{r4, r7, lr}
 801cd8a:	b087      	sub	sp, #28
 801cd8c:	af00      	add	r7, sp, #0
 801cd8e:	60f8      	str	r0, [r7, #12]
 801cd90:	60b9      	str	r1, [r7, #8]
 801cd92:	607a      	str	r2, [r7, #4]
 801cd94:	68fb      	ldr	r3, [r7, #12]
 801cd96:	68b9      	ldr	r1, [r7, #8]
 801cd98:	4618      	mov	r0, r3
 801cd9a:	f7ff fa9f 	bl	801c2dc <_ZN11MockFailureC1EP10UtestShell>
 801cd9e:	4a10      	ldr	r2, [pc, #64]	; (801cde0 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801cda0:	68fb      	ldr	r3, [r7, #12]
 801cda2:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801cda4:	68fb      	ldr	r3, [r7, #12]
 801cda6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cdaa:	6878      	ldr	r0, [r7, #4]
 801cdac:	f7ef fefe 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801cdb0:	4602      	mov	r2, r0
 801cdb2:	f107 0310 	add.w	r3, r7, #16
 801cdb6:	490b      	ldr	r1, [pc, #44]	; (801cde4 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801cdb8:	4618      	mov	r0, r3
 801cdba:	f7f0 fc2b 	bl	800d614 <_Z16StringFromFormatPKcz>
 801cdbe:	f107 0310 	add.w	r3, r7, #16
 801cdc2:	4619      	mov	r1, r3
 801cdc4:	4620      	mov	r0, r4
 801cdc6:	f7ef fbd2 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801cdca:	f107 0310 	add.w	r3, r7, #16
 801cdce:	4618      	mov	r0, r3
 801cdd0:	f7ef ff19 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 801cdd4:	68fb      	ldr	r3, [r7, #12]
 801cdd6:	4618      	mov	r0, r3
 801cdd8:	371c      	adds	r7, #28
 801cdda:	46bd      	mov	sp, r7
 801cddc:	bd90      	pop	{r4, r7, pc}
 801cdde:	bf00      	nop
 801cde0:	0802846c 	.word	0x0802846c
 801cde4:	08025f24 	.word	0x08025f24

0801cde8 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801cde8:	b590      	push	{r4, r7, lr}
 801cdea:	b087      	sub	sp, #28
 801cdec:	af00      	add	r7, sp, #0
 801cdee:	60f8      	str	r0, [r7, #12]
 801cdf0:	60b9      	str	r1, [r7, #8]
 801cdf2:	607a      	str	r2, [r7, #4]
 801cdf4:	603b      	str	r3, [r7, #0]
 801cdf6:	68fb      	ldr	r3, [r7, #12]
 801cdf8:	68b9      	ldr	r1, [r7, #8]
 801cdfa:	4618      	mov	r0, r3
 801cdfc:	f7ff fa6e 	bl	801c2dc <_ZN11MockFailureC1EP10UtestShell>
 801ce00:	4a12      	ldr	r2, [pc, #72]	; (801ce4c <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801ce02:	68fb      	ldr	r3, [r7, #12]
 801ce04:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801ce06:	68fb      	ldr	r3, [r7, #12]
 801ce08:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801ce0c:	6878      	ldr	r0, [r7, #4]
 801ce0e:	f7ef fecd 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801ce12:	4602      	mov	r2, r0
 801ce14:	f107 0010 	add.w	r0, r7, #16
 801ce18:	683b      	ldr	r3, [r7, #0]
 801ce1a:	490d      	ldr	r1, [pc, #52]	; (801ce50 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801ce1c:	f7f0 fbfa 	bl	800d614 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801ce20:	f107 0310 	add.w	r3, r7, #16
 801ce24:	4619      	mov	r1, r3
 801ce26:	4620      	mov	r0, r4
 801ce28:	f7ef fba1 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801ce2c:	f107 0310 	add.w	r3, r7, #16
 801ce30:	4618      	mov	r0, r3
 801ce32:	f7ef fee8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801ce36:	68fb      	ldr	r3, [r7, #12]
 801ce38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ce3a:	6879      	ldr	r1, [r7, #4]
 801ce3c:	4618      	mov	r0, r3
 801ce3e:	f7ff fad5 	bl	801c3ec <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801ce42:	68fb      	ldr	r3, [r7, #12]
 801ce44:	4618      	mov	r0, r3
 801ce46:	371c      	adds	r7, #28
 801ce48:	46bd      	mov	sp, r7
 801ce4a:	bd90      	pop	{r4, r7, pc}
 801ce4c:	08028440 	.word	0x08028440
 801ce50:	08025f74 	.word	0x08025f74

0801ce54 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ce54:	b590      	push	{r4, r7, lr}
 801ce56:	b087      	sub	sp, #28
 801ce58:	af00      	add	r7, sp, #0
 801ce5a:	60f8      	str	r0, [r7, #12]
 801ce5c:	60b9      	str	r1, [r7, #8]
 801ce5e:	607a      	str	r2, [r7, #4]
 801ce60:	603b      	str	r3, [r7, #0]
 801ce62:	68fb      	ldr	r3, [r7, #12]
 801ce64:	68b9      	ldr	r1, [r7, #8]
 801ce66:	4618      	mov	r0, r3
 801ce68:	f7ff fa38 	bl	801c2dc <_ZN11MockFailureC1EP10UtestShell>
 801ce6c:	4a12      	ldr	r2, [pc, #72]	; (801ceb8 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801ce6e:	68fb      	ldr	r3, [r7, #12]
 801ce70:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801ce72:	68fb      	ldr	r3, [r7, #12]
 801ce74:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ce78:	6878      	ldr	r0, [r7, #4]
 801ce7a:	f7ef fe97 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801ce7e:	4602      	mov	r2, r0
 801ce80:	f107 0310 	add.w	r3, r7, #16
 801ce84:	490d      	ldr	r1, [pc, #52]	; (801cebc <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801ce86:	4618      	mov	r0, r3
 801ce88:	f7f0 fbc4 	bl	800d614 <_Z16StringFromFormatPKcz>
 801ce8c:	f107 0310 	add.w	r3, r7, #16
 801ce90:	4619      	mov	r1, r3
 801ce92:	4620      	mov	r0, r4
 801ce94:	f7ef fb6b 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801ce98:	f107 0310 	add.w	r3, r7, #16
 801ce9c:	4618      	mov	r0, r3
 801ce9e:	f7ef feb2 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801cea2:	68fb      	ldr	r3, [r7, #12]
 801cea4:	683a      	ldr	r2, [r7, #0]
 801cea6:	6879      	ldr	r1, [r7, #4]
 801cea8:	4618      	mov	r0, r3
 801ceaa:	f7ff fa9f 	bl	801c3ec <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801ceae:	68fb      	ldr	r3, [r7, #12]
 801ceb0:	4618      	mov	r0, r3
 801ceb2:	371c      	adds	r7, #28
 801ceb4:	46bd      	mov	sp, r7
 801ceb6:	bd90      	pop	{r4, r7, pc}
 801ceb8:	08028414 	.word	0x08028414
 801cebc:	08025fd8 	.word	0x08025fd8

0801cec0 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801cec0:	b480      	push	{r7}
 801cec2:	b083      	sub	sp, #12
 801cec4:	af00      	add	r7, sp, #0
 801cec6:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801cec8:	4a04      	ldr	r2, [pc, #16]	; (801cedc <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	6013      	str	r3, [r2, #0]
}
 801cece:	bf00      	nop
 801ced0:	370c      	adds	r7, #12
 801ced2:	46bd      	mov	sp, r7
 801ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ced8:	4770      	bx	lr
 801ceda:	bf00      	nop
 801cedc:	20000ec4 	.word	0x20000ec4

0801cee0 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801cee0:	b580      	push	{r7, lr}
 801cee2:	b082      	sub	sp, #8
 801cee4:	af00      	add	r7, sp, #0
 801cee6:	6078      	str	r0, [r7, #4]
 801cee8:	6039      	str	r1, [r7, #0]
 801ceea:	4a10      	ldr	r2, [pc, #64]	; (801cf2c <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	601a      	str	r2, [r3, #0]
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	3304      	adds	r3, #4
 801cef4:	6839      	ldr	r1, [r7, #0]
 801cef6:	4618      	mov	r0, r3
 801cef8:	f7ef fb21 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	330c      	adds	r3, #12
 801cf00:	490b      	ldr	r1, [pc, #44]	; (801cf30 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801cf02:	4618      	mov	r0, r3
 801cf04:	f7ef fac7 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	2200      	movs	r2, #0
 801cf0c:	629a      	str	r2, [r3, #40]	; 0x28
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	2200      	movs	r2, #0
 801cf12:	62da      	str	r2, [r3, #44]	; 0x2c
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	2200      	movs	r2, #0
 801cf18:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	2200      	movs	r2, #0
 801cf1e:	619a      	str	r2, [r3, #24]
}
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	4618      	mov	r0, r3
 801cf24:	3708      	adds	r7, #8
 801cf26:	46bd      	mov	sp, r7
 801cf28:	bd80      	pop	{r7, pc}
 801cf2a:	bf00      	nop
 801cf2c:	08028c9c 	.word	0x08028c9c
 801cf30:	08026028 	.word	0x08026028

0801cf34 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801cf34:	b580      	push	{r7, lr}
 801cf36:	b082      	sub	sp, #8
 801cf38:	af00      	add	r7, sp, #0
 801cf3a:	6078      	str	r0, [r7, #4]
 801cf3c:	4a08      	ldr	r2, [pc, #32]	; (801cf60 <_ZN14MockNamedValueD1Ev+0x2c>)
 801cf3e:	687b      	ldr	r3, [r7, #4]
 801cf40:	601a      	str	r2, [r3, #0]
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	330c      	adds	r3, #12
 801cf46:	4618      	mov	r0, r3
 801cf48:	f7ef fe5d 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	3304      	adds	r3, #4
 801cf50:	4618      	mov	r0, r3
 801cf52:	f7ef fe58 	bl	800cc06 <_ZN12SimpleStringD1Ev>
{
}
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	4618      	mov	r0, r3
 801cf5a:	3708      	adds	r7, #8
 801cf5c:	46bd      	mov	sp, r7
 801cf5e:	bd80      	pop	{r7, pc}
 801cf60:	08028c9c 	.word	0x08028c9c

0801cf64 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801cf64:	b580      	push	{r7, lr}
 801cf66:	b082      	sub	sp, #8
 801cf68:	af00      	add	r7, sp, #0
 801cf6a:	6078      	str	r0, [r7, #4]
}
 801cf6c:	6878      	ldr	r0, [r7, #4]
 801cf6e:	f7ff ffe1 	bl	801cf34 <_ZN14MockNamedValueD1Ev>
 801cf72:	2138      	movs	r1, #56	; 0x38
 801cf74:	6878      	ldr	r0, [r7, #4]
 801cf76:	f7ec fedf 	bl	8009d38 <_ZdlPvj>
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	4618      	mov	r0, r3
 801cf7e:	3708      	adds	r7, #8
 801cf80:	46bd      	mov	sp, r7
 801cf82:	bd80      	pop	{r7, pc}

0801cf84 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801cf84:	b590      	push	{r4, r7, lr}
 801cf86:	b085      	sub	sp, #20
 801cf88:	af00      	add	r7, sp, #0
 801cf8a:	6078      	str	r0, [r7, #4]
 801cf8c:	460b      	mov	r3, r1
 801cf8e:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	f103 040c 	add.w	r4, r3, #12
 801cf96:	f107 0308 	add.w	r3, r7, #8
 801cf9a:	490b      	ldr	r1, [pc, #44]	; (801cfc8 <_ZN14MockNamedValue8setValueEb+0x44>)
 801cf9c:	4618      	mov	r0, r3
 801cf9e:	f7ef fa7a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801cfa2:	f107 0308 	add.w	r3, r7, #8
 801cfa6:	4619      	mov	r1, r3
 801cfa8:	4620      	mov	r0, r4
 801cfaa:	f7ef fae0 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801cfae:	f107 0308 	add.w	r3, r7, #8
 801cfb2:	4618      	mov	r0, r3
 801cfb4:	f7ef fe27 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	78fa      	ldrb	r2, [r7, #3]
 801cfbc:	761a      	strb	r2, [r3, #24]
}
 801cfbe:	bf00      	nop
 801cfc0:	3714      	adds	r7, #20
 801cfc2:	46bd      	mov	sp, r7
 801cfc4:	bd90      	pop	{r4, r7, pc}
 801cfc6:	bf00      	nop
 801cfc8:	0802602c 	.word	0x0802602c

0801cfcc <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801cfcc:	b590      	push	{r4, r7, lr}
 801cfce:	b085      	sub	sp, #20
 801cfd0:	af00      	add	r7, sp, #0
 801cfd2:	6078      	str	r0, [r7, #4]
 801cfd4:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	f103 040c 	add.w	r4, r3, #12
 801cfdc:	f107 0308 	add.w	r3, r7, #8
 801cfe0:	490a      	ldr	r1, [pc, #40]	; (801d00c <_ZN14MockNamedValue8setValueEj+0x40>)
 801cfe2:	4618      	mov	r0, r3
 801cfe4:	f7ef fa57 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801cfe8:	f107 0308 	add.w	r3, r7, #8
 801cfec:	4619      	mov	r1, r3
 801cfee:	4620      	mov	r0, r4
 801cff0:	f7ef fabd 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801cff4:	f107 0308 	add.w	r3, r7, #8
 801cff8:	4618      	mov	r0, r3
 801cffa:	f7ef fe04 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	683a      	ldr	r2, [r7, #0]
 801d002:	619a      	str	r2, [r3, #24]
}
 801d004:	bf00      	nop
 801d006:	3714      	adds	r7, #20
 801d008:	46bd      	mov	sp, r7
 801d00a:	bd90      	pop	{r4, r7, pc}
 801d00c:	08026034 	.word	0x08026034

0801d010 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801d010:	b590      	push	{r4, r7, lr}
 801d012:	b085      	sub	sp, #20
 801d014:	af00      	add	r7, sp, #0
 801d016:	6078      	str	r0, [r7, #4]
 801d018:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	f103 040c 	add.w	r4, r3, #12
 801d020:	f107 0308 	add.w	r3, r7, #8
 801d024:	490a      	ldr	r1, [pc, #40]	; (801d050 <_ZN14MockNamedValue8setValueEi+0x40>)
 801d026:	4618      	mov	r0, r3
 801d028:	f7ef fa35 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801d02c:	f107 0308 	add.w	r3, r7, #8
 801d030:	4619      	mov	r1, r3
 801d032:	4620      	mov	r0, r4
 801d034:	f7ef fa9b 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801d038:	f107 0308 	add.w	r3, r7, #8
 801d03c:	4618      	mov	r0, r3
 801d03e:	f7ef fde2 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801d042:	687b      	ldr	r3, [r7, #4]
 801d044:	683a      	ldr	r2, [r7, #0]
 801d046:	619a      	str	r2, [r3, #24]
}
 801d048:	bf00      	nop
 801d04a:	3714      	adds	r7, #20
 801d04c:	46bd      	mov	sp, r7
 801d04e:	bd90      	pop	{r4, r7, pc}
 801d050:	08026028 	.word	0x08026028

0801d054 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801d054:	b590      	push	{r4, r7, lr}
 801d056:	b085      	sub	sp, #20
 801d058:	af00      	add	r7, sp, #0
 801d05a:	6078      	str	r0, [r7, #4]
 801d05c:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	f103 040c 	add.w	r4, r3, #12
 801d064:	f107 0308 	add.w	r3, r7, #8
 801d068:	490a      	ldr	r1, [pc, #40]	; (801d094 <_ZN14MockNamedValue8setValueEl+0x40>)
 801d06a:	4618      	mov	r0, r3
 801d06c:	f7ef fa13 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801d070:	f107 0308 	add.w	r3, r7, #8
 801d074:	4619      	mov	r1, r3
 801d076:	4620      	mov	r0, r4
 801d078:	f7ef fa79 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801d07c:	f107 0308 	add.w	r3, r7, #8
 801d080:	4618      	mov	r0, r3
 801d082:	f7ef fdc0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	683a      	ldr	r2, [r7, #0]
 801d08a:	619a      	str	r2, [r3, #24]
}
 801d08c:	bf00      	nop
 801d08e:	3714      	adds	r7, #20
 801d090:	46bd      	mov	sp, r7
 801d092:	bd90      	pop	{r4, r7, pc}
 801d094:	08026044 	.word	0x08026044

0801d098 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801d098:	b590      	push	{r4, r7, lr}
 801d09a:	b085      	sub	sp, #20
 801d09c:	af00      	add	r7, sp, #0
 801d09e:	6078      	str	r0, [r7, #4]
 801d0a0:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	f103 040c 	add.w	r4, r3, #12
 801d0a8:	f107 0308 	add.w	r3, r7, #8
 801d0ac:	490a      	ldr	r1, [pc, #40]	; (801d0d8 <_ZN14MockNamedValue8setValueEm+0x40>)
 801d0ae:	4618      	mov	r0, r3
 801d0b0:	f7ef f9f1 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801d0b4:	f107 0308 	add.w	r3, r7, #8
 801d0b8:	4619      	mov	r1, r3
 801d0ba:	4620      	mov	r0, r4
 801d0bc:	f7ef fa57 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801d0c0:	f107 0308 	add.w	r3, r7, #8
 801d0c4:	4618      	mov	r0, r3
 801d0c6:	f7ef fd9e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801d0ca:	687b      	ldr	r3, [r7, #4]
 801d0cc:	683a      	ldr	r2, [r7, #0]
 801d0ce:	619a      	str	r2, [r3, #24]
}
 801d0d0:	bf00      	nop
 801d0d2:	3714      	adds	r7, #20
 801d0d4:	46bd      	mov	sp, r7
 801d0d6:	bd90      	pop	{r4, r7, pc}
 801d0d8:	08026050 	.word	0x08026050

0801d0dc <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801d0dc:	b5b0      	push	{r4, r5, r7, lr}
 801d0de:	b086      	sub	sp, #24
 801d0e0:	af02      	add	r7, sp, #8
 801d0e2:	60f8      	str	r0, [r7, #12]
 801d0e4:	1d3b      	adds	r3, r7, #4
 801d0e6:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801d0ea:	f7f6 fdb7 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801d0ee:	4604      	mov	r4, r0
 801d0f0:	6823      	ldr	r3, [r4, #0]
 801d0f2:	3368      	adds	r3, #104	; 0x68
 801d0f4:	681d      	ldr	r5, [r3, #0]
 801d0f6:	f7f6 fdc1 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d0fa:	4603      	mov	r3, r0
 801d0fc:	9300      	str	r3, [sp, #0]
 801d0fe:	2367      	movs	r3, #103	; 0x67
 801d100:	4a03      	ldr	r2, [pc, #12]	; (801d110 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801d102:	4904      	ldr	r1, [pc, #16]	; (801d114 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801d104:	4620      	mov	r0, r4
 801d106:	47a8      	blx	r5
}
 801d108:	bf00      	nop
 801d10a:	3710      	adds	r7, #16
 801d10c:	46bd      	mov	sp, r7
 801d10e:	bdb0      	pop	{r4, r5, r7, pc}
 801d110:	08026064 	.word	0x08026064
 801d114:	08026080 	.word	0x08026080

0801d118 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801d118:	b5b0      	push	{r4, r5, r7, lr}
 801d11a:	b086      	sub	sp, #24
 801d11c:	af02      	add	r7, sp, #8
 801d11e:	60f8      	str	r0, [r7, #12]
 801d120:	1d3b      	adds	r3, r7, #4
 801d122:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801d126:	f7f6 fd99 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801d12a:	4604      	mov	r4, r0
 801d12c:	6823      	ldr	r3, [r4, #0]
 801d12e:	3368      	adds	r3, #104	; 0x68
 801d130:	681d      	ldr	r5, [r3, #0]
 801d132:	f7f6 fda3 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d136:	4603      	mov	r3, r0
 801d138:	9300      	str	r3, [sp, #0]
 801d13a:	236c      	movs	r3, #108	; 0x6c
 801d13c:	4a03      	ldr	r2, [pc, #12]	; (801d14c <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801d13e:	4904      	ldr	r1, [pc, #16]	; (801d150 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801d140:	4620      	mov	r0, r4
 801d142:	47a8      	blx	r5
}
 801d144:	bf00      	nop
 801d146:	3710      	adds	r7, #16
 801d148:	46bd      	mov	sp, r7
 801d14a:	bdb0      	pop	{r4, r5, r7, pc}
 801d14c:	08026064 	.word	0x08026064
 801d150:	080260a0 	.word	0x080260a0
 801d154:	00000000 	.word	0x00000000

0801d158 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801d158:	b580      	push	{r7, lr}
 801d15a:	b084      	sub	sp, #16
 801d15c:	af00      	add	r7, sp, #0
 801d15e:	60f8      	str	r0, [r7, #12]
 801d160:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801d164:	68fb      	ldr	r3, [r7, #12]
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	3328      	adds	r3, #40	; 0x28
 801d16a:	681b      	ldr	r3, [r3, #0]
 801d16c:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801d180 <_ZN14MockNamedValue8setValueEd+0x28>
 801d170:	ed97 0b00 	vldr	d0, [r7]
 801d174:	68f8      	ldr	r0, [r7, #12]
 801d176:	4798      	blx	r3
}
 801d178:	bf00      	nop
 801d17a:	3710      	adds	r7, #16
 801d17c:	46bd      	mov	sp, r7
 801d17e:	bd80      	pop	{r7, pc}
 801d180:	47ae147b 	.word	0x47ae147b
 801d184:	3f747ae1 	.word	0x3f747ae1

0801d188 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801d188:	b590      	push	{r4, r7, lr}
 801d18a:	b089      	sub	sp, #36	; 0x24
 801d18c:	af00      	add	r7, sp, #0
 801d18e:	6178      	str	r0, [r7, #20]
 801d190:	ed87 0b02 	vstr	d0, [r7, #8]
 801d194:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801d198:	697b      	ldr	r3, [r7, #20]
 801d19a:	f103 040c 	add.w	r4, r3, #12
 801d19e:	f107 0318 	add.w	r3, r7, #24
 801d1a2:	490e      	ldr	r1, [pc, #56]	; (801d1dc <_ZN14MockNamedValue8setValueEdd+0x54>)
 801d1a4:	4618      	mov	r0, r3
 801d1a6:	f7ef f976 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801d1aa:	f107 0318 	add.w	r3, r7, #24
 801d1ae:	4619      	mov	r1, r3
 801d1b0:	4620      	mov	r0, r4
 801d1b2:	f7ef f9dc 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801d1b6:	f107 0318 	add.w	r3, r7, #24
 801d1ba:	4618      	mov	r0, r3
 801d1bc:	f7ef fd23 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801d1c0:	6979      	ldr	r1, [r7, #20]
 801d1c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801d1c6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801d1ca:	6979      	ldr	r1, [r7, #20]
 801d1cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d1d0:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801d1d4:	bf00      	nop
 801d1d6:	3724      	adds	r7, #36	; 0x24
 801d1d8:	46bd      	mov	sp, r7
 801d1da:	bd90      	pop	{r4, r7, pc}
 801d1dc:	080260cc 	.word	0x080260cc

0801d1e0 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801d1e0:	b590      	push	{r4, r7, lr}
 801d1e2:	b085      	sub	sp, #20
 801d1e4:	af00      	add	r7, sp, #0
 801d1e6:	6078      	str	r0, [r7, #4]
 801d1e8:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801d1ea:	687b      	ldr	r3, [r7, #4]
 801d1ec:	f103 040c 	add.w	r4, r3, #12
 801d1f0:	f107 0308 	add.w	r3, r7, #8
 801d1f4:	490a      	ldr	r1, [pc, #40]	; (801d220 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801d1f6:	4618      	mov	r0, r3
 801d1f8:	f7ef f94d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801d1fc:	f107 0308 	add.w	r3, r7, #8
 801d200:	4619      	mov	r1, r3
 801d202:	4620      	mov	r0, r4
 801d204:	f7ef f9b3 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801d208:	f107 0308 	add.w	r3, r7, #8
 801d20c:	4618      	mov	r0, r3
 801d20e:	f7ef fcfa 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	683a      	ldr	r2, [r7, #0]
 801d216:	619a      	str	r2, [r3, #24]
}
 801d218:	bf00      	nop
 801d21a:	3714      	adds	r7, #20
 801d21c:	46bd      	mov	sp, r7
 801d21e:	bd90      	pop	{r4, r7, pc}
 801d220:	080260d4 	.word	0x080260d4

0801d224 <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801d224:	b590      	push	{r4, r7, lr}
 801d226:	b085      	sub	sp, #20
 801d228:	af00      	add	r7, sp, #0
 801d22a:	6078      	str	r0, [r7, #4]
 801d22c:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	f103 040c 	add.w	r4, r3, #12
 801d234:	f107 0308 	add.w	r3, r7, #8
 801d238:	490a      	ldr	r1, [pc, #40]	; (801d264 <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801d23a:	4618      	mov	r0, r3
 801d23c:	f7ef f92b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801d240:	f107 0308 	add.w	r3, r7, #8
 801d244:	4619      	mov	r1, r3
 801d246:	4620      	mov	r0, r4
 801d248:	f7ef f991 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801d24c:	f107 0308 	add.w	r3, r7, #8
 801d250:	4618      	mov	r0, r3
 801d252:	f7ef fcd8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	683a      	ldr	r2, [r7, #0]
 801d25a:	619a      	str	r2, [r3, #24]
}
 801d25c:	bf00      	nop
 801d25e:	3714      	adds	r7, #20
 801d260:	46bd      	mov	sp, r7
 801d262:	bd90      	pop	{r4, r7, pc}
 801d264:	080260dc 	.word	0x080260dc

0801d268 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801d268:	b590      	push	{r4, r7, lr}
 801d26a:	b085      	sub	sp, #20
 801d26c:	af00      	add	r7, sp, #0
 801d26e:	6078      	str	r0, [r7, #4]
 801d270:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	f103 040c 	add.w	r4, r3, #12
 801d278:	f107 0308 	add.w	r3, r7, #8
 801d27c:	490a      	ldr	r1, [pc, #40]	; (801d2a8 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801d27e:	4618      	mov	r0, r3
 801d280:	f7ef f909 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801d284:	f107 0308 	add.w	r3, r7, #8
 801d288:	4619      	mov	r1, r3
 801d28a:	4620      	mov	r0, r4
 801d28c:	f7ef f96f 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801d290:	f107 0308 	add.w	r3, r7, #8
 801d294:	4618      	mov	r0, r3
 801d296:	f7ef fcb6 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	683a      	ldr	r2, [r7, #0]
 801d29e:	619a      	str	r2, [r3, #24]
}
 801d2a0:	bf00      	nop
 801d2a2:	3714      	adds	r7, #20
 801d2a4:	46bd      	mov	sp, r7
 801d2a6:	bd90      	pop	{r4, r7, pc}
 801d2a8:	080260e8 	.word	0x080260e8

0801d2ac <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801d2ac:	b590      	push	{r4, r7, lr}
 801d2ae:	b085      	sub	sp, #20
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	6078      	str	r0, [r7, #4]
 801d2b4:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801d2b6:	687b      	ldr	r3, [r7, #4]
 801d2b8:	f103 040c 	add.w	r4, r3, #12
 801d2bc:	f107 0308 	add.w	r3, r7, #8
 801d2c0:	490a      	ldr	r1, [pc, #40]	; (801d2ec <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801d2c2:	4618      	mov	r0, r3
 801d2c4:	f7ef f8e7 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801d2c8:	f107 0308 	add.w	r3, r7, #8
 801d2cc:	4619      	mov	r1, r3
 801d2ce:	4620      	mov	r0, r4
 801d2d0:	f7ef f94d 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801d2d4:	f107 0308 	add.w	r3, r7, #8
 801d2d8:	4618      	mov	r0, r3
 801d2da:	f7ef fc94 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801d2de:	687b      	ldr	r3, [r7, #4]
 801d2e0:	683a      	ldr	r2, [r7, #0]
 801d2e2:	619a      	str	r2, [r3, #24]
}
 801d2e4:	bf00      	nop
 801d2e6:	3714      	adds	r7, #20
 801d2e8:	46bd      	mov	sp, r7
 801d2ea:	bd90      	pop	{r4, r7, pc}
 801d2ec:	080260f4 	.word	0x080260f4

0801d2f0 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801d2f0:	b590      	push	{r4, r7, lr}
 801d2f2:	b087      	sub	sp, #28
 801d2f4:	af00      	add	r7, sp, #0
 801d2f6:	60f8      	str	r0, [r7, #12]
 801d2f8:	60b9      	str	r1, [r7, #8]
 801d2fa:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801d2fc:	68fb      	ldr	r3, [r7, #12]
 801d2fe:	f103 040c 	add.w	r4, r3, #12
 801d302:	f107 0310 	add.w	r3, r7, #16
 801d306:	490c      	ldr	r1, [pc, #48]	; (801d338 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801d308:	4618      	mov	r0, r3
 801d30a:	f7ef f8c4 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801d30e:	f107 0310 	add.w	r3, r7, #16
 801d312:	4619      	mov	r1, r3
 801d314:	4620      	mov	r0, r4
 801d316:	f7ef f92a 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801d31a:	f107 0310 	add.w	r3, r7, #16
 801d31e:	4618      	mov	r0, r3
 801d320:	f7ef fc71 	bl	800cc06 <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801d324:	68fb      	ldr	r3, [r7, #12]
 801d326:	68ba      	ldr	r2, [r7, #8]
 801d328:	619a      	str	r2, [r3, #24]
    size_ = size;
 801d32a:	68fb      	ldr	r3, [r7, #12]
 801d32c:	687a      	ldr	r2, [r7, #4]
 801d32e:	629a      	str	r2, [r3, #40]	; 0x28
}
 801d330:	bf00      	nop
 801d332:	371c      	adds	r7, #28
 801d334:	46bd      	mov	sp, r7
 801d336:	bd90      	pop	{r4, r7, pc}
 801d338:	08026100 	.word	0x08026100

0801d33c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801d33c:	b580      	push	{r7, lr}
 801d33e:	b084      	sub	sp, #16
 801d340:	af00      	add	r7, sp, #0
 801d342:	60f8      	str	r0, [r7, #12]
 801d344:	60b9      	str	r1, [r7, #8]
 801d346:	607a      	str	r2, [r7, #4]
    type_ = type;
 801d348:	68fb      	ldr	r3, [r7, #12]
 801d34a:	330c      	adds	r3, #12
 801d34c:	68b9      	ldr	r1, [r7, #8]
 801d34e:	4618      	mov	r0, r3
 801d350:	f7ef f90d 	bl	800c56e <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801d354:	68fb      	ldr	r3, [r7, #12]
 801d356:	687a      	ldr	r2, [r7, #4]
 801d358:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801d35a:	4b11      	ldr	r3, [pc, #68]	; (801d3a0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	2b00      	cmp	r3, #0
 801d360:	d019      	beq.n	801d396 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801d362:	4b0f      	ldr	r3, [pc, #60]	; (801d3a0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d364:	681a      	ldr	r2, [r3, #0]
 801d366:	4b0e      	ldr	r3, [pc, #56]	; (801d3a0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d368:	681b      	ldr	r3, [r3, #0]
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	3314      	adds	r3, #20
 801d36e:	681b      	ldr	r3, [r3, #0]
 801d370:	68b9      	ldr	r1, [r7, #8]
 801d372:	4610      	mov	r0, r2
 801d374:	4798      	blx	r3
 801d376:	4602      	mov	r2, r0
 801d378:	68fb      	ldr	r3, [r7, #12]
 801d37a:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801d37c:	4b08      	ldr	r3, [pc, #32]	; (801d3a0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d37e:	681a      	ldr	r2, [r3, #0]
 801d380:	4b07      	ldr	r3, [pc, #28]	; (801d3a0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d382:	681b      	ldr	r3, [r3, #0]
 801d384:	681b      	ldr	r3, [r3, #0]
 801d386:	3318      	adds	r3, #24
 801d388:	681b      	ldr	r3, [r3, #0]
 801d38a:	68b9      	ldr	r1, [r7, #8]
 801d38c:	4610      	mov	r0, r2
 801d38e:	4798      	blx	r3
 801d390:	4602      	mov	r2, r0
 801d392:	68fb      	ldr	r3, [r7, #12]
 801d394:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801d396:	bf00      	nop
 801d398:	3710      	adds	r7, #16
 801d39a:	46bd      	mov	sp, r7
 801d39c:	bd80      	pop	{r7, pc}
 801d39e:	bf00      	nop
 801d3a0:	20000ec4 	.word	0x20000ec4

0801d3a4 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801d3a4:	b580      	push	{r7, lr}
 801d3a6:	b084      	sub	sp, #16
 801d3a8:	af00      	add	r7, sp, #0
 801d3aa:	60f8      	str	r0, [r7, #12]
 801d3ac:	60b9      	str	r1, [r7, #8]
 801d3ae:	607a      	str	r2, [r7, #4]
    type_ = type;
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	330c      	adds	r3, #12
 801d3b4:	68b9      	ldr	r1, [r7, #8]
 801d3b6:	4618      	mov	r0, r3
 801d3b8:	f7ef f8d9 	bl	800c56e <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801d3bc:	68fb      	ldr	r3, [r7, #12]
 801d3be:	687a      	ldr	r2, [r7, #4]
 801d3c0:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801d3c2:	4b11      	ldr	r3, [pc, #68]	; (801d408 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d3c4:	681b      	ldr	r3, [r3, #0]
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d019      	beq.n	801d3fe <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801d3ca:	4b0f      	ldr	r3, [pc, #60]	; (801d408 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d3cc:	681a      	ldr	r2, [r3, #0]
 801d3ce:	4b0e      	ldr	r3, [pc, #56]	; (801d408 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d3d0:	681b      	ldr	r3, [r3, #0]
 801d3d2:	681b      	ldr	r3, [r3, #0]
 801d3d4:	3314      	adds	r3, #20
 801d3d6:	681b      	ldr	r3, [r3, #0]
 801d3d8:	68b9      	ldr	r1, [r7, #8]
 801d3da:	4610      	mov	r0, r2
 801d3dc:	4798      	blx	r3
 801d3de:	4602      	mov	r2, r0
 801d3e0:	68fb      	ldr	r3, [r7, #12]
 801d3e2:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801d3e4:	4b08      	ldr	r3, [pc, #32]	; (801d408 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d3e6:	681a      	ldr	r2, [r3, #0]
 801d3e8:	4b07      	ldr	r3, [pc, #28]	; (801d408 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d3ea:	681b      	ldr	r3, [r3, #0]
 801d3ec:	681b      	ldr	r3, [r3, #0]
 801d3ee:	3318      	adds	r3, #24
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	68b9      	ldr	r1, [r7, #8]
 801d3f4:	4610      	mov	r0, r2
 801d3f6:	4798      	blx	r3
 801d3f8:	4602      	mov	r2, r0
 801d3fa:	68fb      	ldr	r3, [r7, #12]
 801d3fc:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801d3fe:	bf00      	nop
 801d400:	3710      	adds	r7, #16
 801d402:	46bd      	mov	sp, r7
 801d404:	bd80      	pop	{r7, pc}
 801d406:	bf00      	nop
 801d408:	20000ec4 	.word	0x20000ec4

0801d40c <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801d40c:	b480      	push	{r7}
 801d40e:	b083      	sub	sp, #12
 801d410:	af00      	add	r7, sp, #0
 801d412:	6078      	str	r0, [r7, #4]
 801d414:	6039      	str	r1, [r7, #0]
    size_ = size;
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	683a      	ldr	r2, [r7, #0]
 801d41a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801d41c:	bf00      	nop
 801d41e:	370c      	adds	r7, #12
 801d420:	46bd      	mov	sp, r7
 801d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d426:	4770      	bx	lr

0801d428 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801d428:	b590      	push	{r4, r7, lr}
 801d42a:	b085      	sub	sp, #20
 801d42c:	af00      	add	r7, sp, #0
 801d42e:	6078      	str	r0, [r7, #4]
 801d430:	6039      	str	r1, [r7, #0]
    name_ = name;
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	1d1c      	adds	r4, r3, #4
 801d436:	f107 0308 	add.w	r3, r7, #8
 801d43a:	6839      	ldr	r1, [r7, #0]
 801d43c:	4618      	mov	r0, r3
 801d43e:	f7ef f82a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801d442:	f107 0308 	add.w	r3, r7, #8
 801d446:	4619      	mov	r1, r3
 801d448:	4620      	mov	r0, r4
 801d44a:	f7ef f890 	bl	800c56e <_ZN12SimpleStringaSERKS_>
 801d44e:	f107 0308 	add.w	r3, r7, #8
 801d452:	4618      	mov	r0, r3
 801d454:	f7ef fbd7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
}
 801d458:	bf00      	nop
 801d45a:	3714      	adds	r7, #20
 801d45c:	46bd      	mov	sp, r7
 801d45e:	bd90      	pop	{r4, r7, pc}

0801d460 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801d460:	b580      	push	{r7, lr}
 801d462:	b082      	sub	sp, #8
 801d464:	af00      	add	r7, sp, #0
 801d466:	6078      	str	r0, [r7, #4]
 801d468:	6039      	str	r1, [r7, #0]
    return name_;
 801d46a:	683b      	ldr	r3, [r7, #0]
 801d46c:	3304      	adds	r3, #4
 801d46e:	4619      	mov	r1, r3
 801d470:	6878      	ldr	r0, [r7, #4]
 801d472:	f7ef f864 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
}
 801d476:	6878      	ldr	r0, [r7, #4]
 801d478:	3708      	adds	r7, #8
 801d47a:	46bd      	mov	sp, r7
 801d47c:	bd80      	pop	{r7, pc}

0801d47e <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801d47e:	b580      	push	{r7, lr}
 801d480:	b082      	sub	sp, #8
 801d482:	af00      	add	r7, sp, #0
 801d484:	6078      	str	r0, [r7, #4]
 801d486:	6039      	str	r1, [r7, #0]
    return type_;
 801d488:	683b      	ldr	r3, [r7, #0]
 801d48a:	330c      	adds	r3, #12
 801d48c:	4619      	mov	r1, r3
 801d48e:	6878      	ldr	r0, [r7, #4]
 801d490:	f7ef f855 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
}
 801d494:	6878      	ldr	r0, [r7, #4]
 801d496:	3708      	adds	r7, #8
 801d498:	46bd      	mov	sp, r7
 801d49a:	bd80      	pop	{r7, pc}

0801d49c <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801d49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d49e:	b087      	sub	sp, #28
 801d4a0:	af04      	add	r7, sp, #16
 801d4a2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801d4a4:	f7f6 fbda 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801d4a8:	4604      	mov	r4, r0
 801d4aa:	6823      	ldr	r3, [r4, #0]
 801d4ac:	3324      	adds	r3, #36	; 0x24
 801d4ae:	681d      	ldr	r5, [r3, #0]
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	330c      	adds	r3, #12
 801d4b4:	4618      	mov	r0, r3
 801d4b6:	f7ef fb79 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801d4ba:	4606      	mov	r6, r0
 801d4bc:	f7f6 fbde 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d4c0:	4603      	mov	r3, r0
 801d4c2:	9302      	str	r3, [sp, #8]
 801d4c4:	23c8      	movs	r3, #200	; 0xc8
 801d4c6:	9301      	str	r3, [sp, #4]
 801d4c8:	4b06      	ldr	r3, [pc, #24]	; (801d4e4 <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801d4ca:	9300      	str	r3, [sp, #0]
 801d4cc:	2300      	movs	r3, #0
 801d4ce:	4632      	mov	r2, r6
 801d4d0:	4905      	ldr	r1, [pc, #20]	; (801d4e8 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801d4d2:	4620      	mov	r0, r4
 801d4d4:	47a8      	blx	r5
    return value_.boolValue_;
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	7e1b      	ldrb	r3, [r3, #24]
}
 801d4da:	4618      	mov	r0, r3
 801d4dc:	370c      	adds	r7, #12
 801d4de:	46bd      	mov	sp, r7
 801d4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d4e2:	bf00      	nop
 801d4e4:	08026064 	.word	0x08026064
 801d4e8:	0802602c 	.word	0x0802602c

0801d4ec <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801d4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4ee:	b089      	sub	sp, #36	; 0x24
 801d4f0:	af04      	add	r7, sp, #16
 801d4f2:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	f103 040c 	add.w	r4, r3, #12
 801d4fa:	f107 0308 	add.w	r3, r7, #8
 801d4fe:	4920      	ldr	r1, [pc, #128]	; (801d580 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801d500:	4618      	mov	r0, r3
 801d502:	f7ee ffc8 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801d506:	2501      	movs	r5, #1
 801d508:	f107 0308 	add.w	r3, r7, #8
 801d50c:	4619      	mov	r1, r3
 801d50e:	4620      	mov	r0, r4
 801d510:	f7ef fb85 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801d514:	4603      	mov	r3, r0
 801d516:	2b00      	cmp	r3, #0
 801d518:	d005      	beq.n	801d526 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	699b      	ldr	r3, [r3, #24]
 801d51e:	2b00      	cmp	r3, #0
 801d520:	db01      	blt.n	801d526 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801d522:	2401      	movs	r4, #1
 801d524:	e000      	b.n	801d528 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801d526:	2400      	movs	r4, #0
 801d528:	2d00      	cmp	r5, #0
 801d52a:	d004      	beq.n	801d536 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801d52c:	f107 0308 	add.w	r3, r7, #8
 801d530:	4618      	mov	r0, r3
 801d532:	f7ef fb68 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801d536:	2c00      	cmp	r4, #0
 801d538:	d002      	beq.n	801d540 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	699b      	ldr	r3, [r3, #24]
 801d53e:	e01a      	b.n	801d576 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801d540:	f7f6 fb8c 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801d544:	4604      	mov	r4, r0
 801d546:	6823      	ldr	r3, [r4, #0]
 801d548:	3324      	adds	r3, #36	; 0x24
 801d54a:	681d      	ldr	r5, [r3, #0]
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	330c      	adds	r3, #12
 801d550:	4618      	mov	r0, r3
 801d552:	f7ef fb2b 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801d556:	4606      	mov	r6, r0
 801d558:	f7f6 fb90 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d55c:	4603      	mov	r3, r0
 801d55e:	9302      	str	r3, [sp, #8]
 801d560:	23d2      	movs	r3, #210	; 0xd2
 801d562:	9301      	str	r3, [sp, #4]
 801d564:	4b07      	ldr	r3, [pc, #28]	; (801d584 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801d566:	9300      	str	r3, [sp, #0]
 801d568:	2300      	movs	r3, #0
 801d56a:	4632      	mov	r2, r6
 801d56c:	4906      	ldr	r1, [pc, #24]	; (801d588 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801d56e:	4620      	mov	r0, r4
 801d570:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	699b      	ldr	r3, [r3, #24]
    }
}
 801d576:	4618      	mov	r0, r3
 801d578:	3714      	adds	r7, #20
 801d57a:	46bd      	mov	sp, r7
 801d57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d57e:	bf00      	nop
 801d580:	08026028 	.word	0x08026028
 801d584:	08026064 	.word	0x08026064
 801d588:	08026034 	.word	0x08026034

0801d58c <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801d58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d58e:	b087      	sub	sp, #28
 801d590:	af04      	add	r7, sp, #16
 801d592:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801d594:	f7f6 fb62 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801d598:	4604      	mov	r4, r0
 801d59a:	6823      	ldr	r3, [r4, #0]
 801d59c:	3324      	adds	r3, #36	; 0x24
 801d59e:	681d      	ldr	r5, [r3, #0]
 801d5a0:	687b      	ldr	r3, [r7, #4]
 801d5a2:	330c      	adds	r3, #12
 801d5a4:	4618      	mov	r0, r3
 801d5a6:	f7ef fb01 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801d5aa:	4606      	mov	r6, r0
 801d5ac:	f7f6 fb66 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d5b0:	4603      	mov	r3, r0
 801d5b2:	9302      	str	r3, [sp, #8]
 801d5b4:	23d9      	movs	r3, #217	; 0xd9
 801d5b6:	9301      	str	r3, [sp, #4]
 801d5b8:	4b06      	ldr	r3, [pc, #24]	; (801d5d4 <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801d5ba:	9300      	str	r3, [sp, #0]
 801d5bc:	2300      	movs	r3, #0
 801d5be:	4632      	mov	r2, r6
 801d5c0:	4905      	ldr	r1, [pc, #20]	; (801d5d8 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801d5c2:	4620      	mov	r0, r4
 801d5c4:	47a8      	blx	r5
    return value_.intValue_;
 801d5c6:	687b      	ldr	r3, [r7, #4]
 801d5c8:	699b      	ldr	r3, [r3, #24]
}
 801d5ca:	4618      	mov	r0, r3
 801d5cc:	370c      	adds	r7, #12
 801d5ce:	46bd      	mov	sp, r7
 801d5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d5d2:	bf00      	nop
 801d5d4:	08026064 	.word	0x08026064
 801d5d8:	08026028 	.word	0x08026028

0801d5dc <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801d5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d5de:	b08b      	sub	sp, #44	; 0x2c
 801d5e0:	af04      	add	r7, sp, #16
 801d5e2:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801d5e4:	687b      	ldr	r3, [r7, #4]
 801d5e6:	f103 040c 	add.w	r4, r3, #12
 801d5ea:	f107 0308 	add.w	r3, r7, #8
 801d5ee:	4928      	ldr	r1, [pc, #160]	; (801d690 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801d5f0:	4618      	mov	r0, r3
 801d5f2:	f7ee ff50 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801d5f6:	f107 0308 	add.w	r3, r7, #8
 801d5fa:	4619      	mov	r1, r3
 801d5fc:	4620      	mov	r0, r4
 801d5fe:	f7ef fb0e 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801d602:	4603      	mov	r3, r0
 801d604:	461c      	mov	r4, r3
 801d606:	f107 0308 	add.w	r3, r7, #8
 801d60a:	4618      	mov	r0, r3
 801d60c:	f7ef fafb 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801d610:	2c00      	cmp	r4, #0
 801d612:	d002      	beq.n	801d61a <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	699b      	ldr	r3, [r3, #24]
 801d618:	e035      	b.n	801d686 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	f103 040c 	add.w	r4, r3, #12
 801d620:	f107 0310 	add.w	r3, r7, #16
 801d624:	491b      	ldr	r1, [pc, #108]	; (801d694 <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801d626:	4618      	mov	r0, r3
 801d628:	f7ee ff35 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801d62c:	f107 0310 	add.w	r3, r7, #16
 801d630:	4619      	mov	r1, r3
 801d632:	4620      	mov	r0, r4
 801d634:	f7ef faf3 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801d638:	4603      	mov	r3, r0
 801d63a:	461c      	mov	r4, r3
 801d63c:	f107 0310 	add.w	r3, r7, #16
 801d640:	4618      	mov	r0, r3
 801d642:	f7ef fae0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801d646:	2c00      	cmp	r4, #0
 801d648:	d002      	beq.n	801d650 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	699b      	ldr	r3, [r3, #24]
 801d64e:	e01a      	b.n	801d686 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801d650:	f7f6 fb04 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801d654:	4604      	mov	r4, r0
 801d656:	6823      	ldr	r3, [r4, #0]
 801d658:	3324      	adds	r3, #36	; 0x24
 801d65a:	681d      	ldr	r5, [r3, #0]
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	330c      	adds	r3, #12
 801d660:	4618      	mov	r0, r3
 801d662:	f7ef faa3 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801d666:	4606      	mov	r6, r0
 801d668:	f7f6 fb08 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d66c:	4603      	mov	r3, r0
 801d66e:	9302      	str	r3, [sp, #8]
 801d670:	23e5      	movs	r3, #229	; 0xe5
 801d672:	9301      	str	r3, [sp, #4]
 801d674:	4b08      	ldr	r3, [pc, #32]	; (801d698 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801d676:	9300      	str	r3, [sp, #0]
 801d678:	2300      	movs	r3, #0
 801d67a:	4632      	mov	r2, r6
 801d67c:	4907      	ldr	r1, [pc, #28]	; (801d69c <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801d67e:	4620      	mov	r0, r4
 801d680:	47a8      	blx	r5
        return value_.longIntValue_;
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	699b      	ldr	r3, [r3, #24]
    }
}
 801d686:	4618      	mov	r0, r3
 801d688:	371c      	adds	r7, #28
 801d68a:	46bd      	mov	sp, r7
 801d68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d68e:	bf00      	nop
 801d690:	08026028 	.word	0x08026028
 801d694:	08026034 	.word	0x08026034
 801d698:	08026064 	.word	0x08026064
 801d69c:	08026044 	.word	0x08026044

0801d6a0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801d6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6a2:	b08d      	sub	sp, #52	; 0x34
 801d6a4:	af04      	add	r7, sp, #16
 801d6a6:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801d6a8:	687b      	ldr	r3, [r7, #4]
 801d6aa:	f103 040c 	add.w	r4, r3, #12
 801d6ae:	f107 0308 	add.w	r3, r7, #8
 801d6b2:	4940      	ldr	r1, [pc, #256]	; (801d7b4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801d6b4:	4618      	mov	r0, r3
 801d6b6:	f7ee feee 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801d6ba:	f107 0308 	add.w	r3, r7, #8
 801d6be:	4619      	mov	r1, r3
 801d6c0:	4620      	mov	r0, r4
 801d6c2:	f7ef faac 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801d6c6:	4603      	mov	r3, r0
 801d6c8:	461c      	mov	r4, r3
 801d6ca:	f107 0308 	add.w	r3, r7, #8
 801d6ce:	4618      	mov	r0, r3
 801d6d0:	f7ef fa99 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801d6d4:	2c00      	cmp	r4, #0
 801d6d6:	d002      	beq.n	801d6de <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	699b      	ldr	r3, [r3, #24]
 801d6dc:	e066      	b.n	801d7ac <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	f103 040c 	add.w	r4, r3, #12
 801d6e4:	f107 0310 	add.w	r3, r7, #16
 801d6e8:	4933      	ldr	r1, [pc, #204]	; (801d7b8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801d6ea:	4618      	mov	r0, r3
 801d6ec:	f7ee fed3 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801d6f0:	2501      	movs	r5, #1
 801d6f2:	f107 0310 	add.w	r3, r7, #16
 801d6f6:	4619      	mov	r1, r3
 801d6f8:	4620      	mov	r0, r4
 801d6fa:	f7ef fa90 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801d6fe:	4603      	mov	r3, r0
 801d700:	2b00      	cmp	r3, #0
 801d702:	d005      	beq.n	801d710 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	699b      	ldr	r3, [r3, #24]
 801d708:	2b00      	cmp	r3, #0
 801d70a:	db01      	blt.n	801d710 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801d70c:	2401      	movs	r4, #1
 801d70e:	e000      	b.n	801d712 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801d710:	2400      	movs	r4, #0
 801d712:	2d00      	cmp	r5, #0
 801d714:	d004      	beq.n	801d720 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801d716:	f107 0310 	add.w	r3, r7, #16
 801d71a:	4618      	mov	r0, r3
 801d71c:	f7ef fa73 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801d720:	2c00      	cmp	r4, #0
 801d722:	d002      	beq.n	801d72a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	699b      	ldr	r3, [r3, #24]
 801d728:	e040      	b.n	801d7ac <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801d72a:	687b      	ldr	r3, [r7, #4]
 801d72c:	f103 040c 	add.w	r4, r3, #12
 801d730:	f107 0318 	add.w	r3, r7, #24
 801d734:	4921      	ldr	r1, [pc, #132]	; (801d7bc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801d736:	4618      	mov	r0, r3
 801d738:	f7ee fead 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801d73c:	2501      	movs	r5, #1
 801d73e:	f107 0318 	add.w	r3, r7, #24
 801d742:	4619      	mov	r1, r3
 801d744:	4620      	mov	r0, r4
 801d746:	f7ef fa6a 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801d74a:	4603      	mov	r3, r0
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	d005      	beq.n	801d75c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	699b      	ldr	r3, [r3, #24]
 801d754:	2b00      	cmp	r3, #0
 801d756:	db01      	blt.n	801d75c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801d758:	2401      	movs	r4, #1
 801d75a:	e000      	b.n	801d75e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801d75c:	2400      	movs	r4, #0
 801d75e:	2d00      	cmp	r5, #0
 801d760:	d004      	beq.n	801d76c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801d762:	f107 0318 	add.w	r3, r7, #24
 801d766:	4618      	mov	r0, r3
 801d768:	f7ef fa4d 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801d76c:	2c00      	cmp	r4, #0
 801d76e:	d002      	beq.n	801d776 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	699b      	ldr	r3, [r3, #24]
 801d774:	e01a      	b.n	801d7ac <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801d776:	f7f6 fa71 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801d77a:	4604      	mov	r4, r0
 801d77c:	6823      	ldr	r3, [r4, #0]
 801d77e:	3324      	adds	r3, #36	; 0x24
 801d780:	681d      	ldr	r5, [r3, #0]
 801d782:	687b      	ldr	r3, [r7, #4]
 801d784:	330c      	adds	r3, #12
 801d786:	4618      	mov	r0, r3
 801d788:	f7ef fa10 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801d78c:	4606      	mov	r6, r0
 801d78e:	f7f6 fa75 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d792:	4603      	mov	r3, r0
 801d794:	9302      	str	r3, [sp, #8]
 801d796:	23f4      	movs	r3, #244	; 0xf4
 801d798:	9301      	str	r3, [sp, #4]
 801d79a:	4b09      	ldr	r3, [pc, #36]	; (801d7c0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801d79c:	9300      	str	r3, [sp, #0]
 801d79e:	2300      	movs	r3, #0
 801d7a0:	4632      	mov	r2, r6
 801d7a2:	4908      	ldr	r1, [pc, #32]	; (801d7c4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801d7a4:	4620      	mov	r0, r4
 801d7a6:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	699b      	ldr	r3, [r3, #24]
    }
}
 801d7ac:	4618      	mov	r0, r3
 801d7ae:	3724      	adds	r7, #36	; 0x24
 801d7b0:	46bd      	mov	sp, r7
 801d7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d7b4:	08026034 	.word	0x08026034
 801d7b8:	08026028 	.word	0x08026028
 801d7bc:	08026044 	.word	0x08026044
 801d7c0:	08026064 	.word	0x08026064
 801d7c4:	08026050 	.word	0x08026050

0801d7c8 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801d7c8:	b5b0      	push	{r4, r5, r7, lr}
 801d7ca:	b084      	sub	sp, #16
 801d7cc:	af02      	add	r7, sp, #8
 801d7ce:	6078      	str	r0, [r7, #4]
 801d7d0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801d7d2:	f7f6 fa43 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801d7d6:	4604      	mov	r4, r0
 801d7d8:	6823      	ldr	r3, [r4, #0]
 801d7da:	3368      	adds	r3, #104	; 0x68
 801d7dc:	681d      	ldr	r5, [r3, #0]
 801d7de:	f7f6 fa4d 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d7e2:	4603      	mov	r3, r0
 801d7e4:	9300      	str	r3, [sp, #0]
 801d7e6:	f240 1323 	movw	r3, #291	; 0x123
 801d7ea:	4a06      	ldr	r2, [pc, #24]	; (801d804 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801d7ec:	4906      	ldr	r1, [pc, #24]	; (801d808 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801d7ee:	4620      	mov	r0, r4
 801d7f0:	47a8      	blx	r5
    return cpputest_longlong(0);
 801d7f2:	2100      	movs	r1, #0
 801d7f4:	6878      	ldr	r0, [r7, #4]
 801d7f6:	f7ec fe85 	bl	800a504 <_ZN17cpputest_longlongC1Ei>
}
 801d7fa:	6878      	ldr	r0, [r7, #4]
 801d7fc:	3708      	adds	r7, #8
 801d7fe:	46bd      	mov	sp, r7
 801d800:	bdb0      	pop	{r4, r5, r7, pc}
 801d802:	bf00      	nop
 801d804:	08026064 	.word	0x08026064
 801d808:	08026080 	.word	0x08026080

0801d80c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801d80c:	b5b0      	push	{r4, r5, r7, lr}
 801d80e:	b084      	sub	sp, #16
 801d810:	af02      	add	r7, sp, #8
 801d812:	6078      	str	r0, [r7, #4]
 801d814:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801d816:	f7f6 fa21 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801d81a:	4604      	mov	r4, r0
 801d81c:	6823      	ldr	r3, [r4, #0]
 801d81e:	3368      	adds	r3, #104	; 0x68
 801d820:	681d      	ldr	r5, [r3, #0]
 801d822:	f7f6 fa2b 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d826:	4603      	mov	r3, r0
 801d828:	9300      	str	r3, [sp, #0]
 801d82a:	f240 1329 	movw	r3, #297	; 0x129
 801d82e:	4a06      	ldr	r2, [pc, #24]	; (801d848 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801d830:	4906      	ldr	r1, [pc, #24]	; (801d84c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801d832:	4620      	mov	r0, r4
 801d834:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801d836:	2100      	movs	r1, #0
 801d838:	6878      	ldr	r0, [r7, #4]
 801d83a:	f7ec fe6f 	bl	800a51c <_ZN18cpputest_ulonglongC1Ei>
}
 801d83e:	6878      	ldr	r0, [r7, #4]
 801d840:	3708      	adds	r7, #8
 801d842:	46bd      	mov	sp, r7
 801d844:	bdb0      	pop	{r4, r5, r7, pc}
 801d846:	bf00      	nop
 801d848:	08026064 	.word	0x08026064
 801d84c:	080260a0 	.word	0x080260a0

0801d850 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801d850:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d852:	b087      	sub	sp, #28
 801d854:	af04      	add	r7, sp, #16
 801d856:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801d858:	f7f6 fa00 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801d85c:	4604      	mov	r4, r0
 801d85e:	6823      	ldr	r3, [r4, #0]
 801d860:	3324      	adds	r3, #36	; 0x24
 801d862:	681d      	ldr	r5, [r3, #0]
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	330c      	adds	r3, #12
 801d868:	4618      	mov	r0, r3
 801d86a:	f7ef f99f 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801d86e:	4606      	mov	r6, r0
 801d870:	f7f6 fa04 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d874:	4603      	mov	r3, r0
 801d876:	9302      	str	r3, [sp, #8]
 801d878:	f240 1331 	movw	r3, #305	; 0x131
 801d87c:	9301      	str	r3, [sp, #4]
 801d87e:	4b09      	ldr	r3, [pc, #36]	; (801d8a4 <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801d880:	9300      	str	r3, [sp, #0]
 801d882:	2300      	movs	r3, #0
 801d884:	4632      	mov	r2, r6
 801d886:	4908      	ldr	r1, [pc, #32]	; (801d8a8 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801d888:	4620      	mov	r0, r4
 801d88a:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801d88c:	687b      	ldr	r3, [r7, #4]
 801d88e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801d892:	ec43 2b17 	vmov	d7, r2, r3
}
 801d896:	eeb0 0a47 	vmov.f32	s0, s14
 801d89a:	eef0 0a67 	vmov.f32	s1, s15
 801d89e:	370c      	adds	r7, #12
 801d8a0:	46bd      	mov	sp, r7
 801d8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8a4:	08026064 	.word	0x08026064
 801d8a8:	080260cc 	.word	0x080260cc

0801d8ac <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801d8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8ae:	b087      	sub	sp, #28
 801d8b0:	af04      	add	r7, sp, #16
 801d8b2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801d8b4:	f7f6 f9d2 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801d8b8:	4604      	mov	r4, r0
 801d8ba:	6823      	ldr	r3, [r4, #0]
 801d8bc:	3324      	adds	r3, #36	; 0x24
 801d8be:	681d      	ldr	r5, [r3, #0]
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	330c      	adds	r3, #12
 801d8c4:	4618      	mov	r0, r3
 801d8c6:	f7ef f971 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801d8ca:	4606      	mov	r6, r0
 801d8cc:	f7f6 f9d6 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d8d0:	4603      	mov	r3, r0
 801d8d2:	9302      	str	r3, [sp, #8]
 801d8d4:	f240 1337 	movw	r3, #311	; 0x137
 801d8d8:	9301      	str	r3, [sp, #4]
 801d8da:	4b09      	ldr	r3, [pc, #36]	; (801d900 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801d8dc:	9300      	str	r3, [sp, #0]
 801d8de:	2300      	movs	r3, #0
 801d8e0:	4632      	mov	r2, r6
 801d8e2:	4908      	ldr	r1, [pc, #32]	; (801d904 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801d8e4:	4620      	mov	r0, r4
 801d8e6:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801d8e8:	687b      	ldr	r3, [r7, #4]
 801d8ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d8ee:	ec43 2b17 	vmov	d7, r2, r3
}
 801d8f2:	eeb0 0a47 	vmov.f32	s0, s14
 801d8f6:	eef0 0a67 	vmov.f32	s1, s15
 801d8fa:	370c      	adds	r7, #12
 801d8fc:	46bd      	mov	sp, r7
 801d8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d900:	08026064 	.word	0x08026064
 801d904:	080260cc 	.word	0x080260cc

0801d908 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801d908:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d90a:	b087      	sub	sp, #28
 801d90c:	af04      	add	r7, sp, #16
 801d90e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801d910:	f7f6 f9a4 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801d914:	4604      	mov	r4, r0
 801d916:	6823      	ldr	r3, [r4, #0]
 801d918:	3324      	adds	r3, #36	; 0x24
 801d91a:	681d      	ldr	r5, [r3, #0]
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	330c      	adds	r3, #12
 801d920:	4618      	mov	r0, r3
 801d922:	f7ef f943 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801d926:	4606      	mov	r6, r0
 801d928:	f7f6 f9a8 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d92c:	4603      	mov	r3, r0
 801d92e:	9302      	str	r3, [sp, #8]
 801d930:	f240 133d 	movw	r3, #317	; 0x13d
 801d934:	9301      	str	r3, [sp, #4]
 801d936:	4b06      	ldr	r3, [pc, #24]	; (801d950 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801d938:	9300      	str	r3, [sp, #0]
 801d93a:	2300      	movs	r3, #0
 801d93c:	4632      	mov	r2, r6
 801d93e:	4905      	ldr	r1, [pc, #20]	; (801d954 <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801d940:	4620      	mov	r0, r4
 801d942:	47a8      	blx	r5
    return value_.stringValue_;
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	699b      	ldr	r3, [r3, #24]
}
 801d948:	4618      	mov	r0, r3
 801d94a:	370c      	adds	r7, #12
 801d94c:	46bd      	mov	sp, r7
 801d94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d950:	08026064 	.word	0x08026064
 801d954:	080260f4 	.word	0x080260f4

0801d958 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801d958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d95a:	b087      	sub	sp, #28
 801d95c:	af04      	add	r7, sp, #16
 801d95e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801d960:	f7f6 f97c 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801d964:	4604      	mov	r4, r0
 801d966:	6823      	ldr	r3, [r4, #0]
 801d968:	3324      	adds	r3, #36	; 0x24
 801d96a:	681d      	ldr	r5, [r3, #0]
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	330c      	adds	r3, #12
 801d970:	4618      	mov	r0, r3
 801d972:	f7ef f91b 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801d976:	4606      	mov	r6, r0
 801d978:	f7f6 f980 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d97c:	4603      	mov	r3, r0
 801d97e:	9302      	str	r3, [sp, #8]
 801d980:	f240 1343 	movw	r3, #323	; 0x143
 801d984:	9301      	str	r3, [sp, #4]
 801d986:	4b06      	ldr	r3, [pc, #24]	; (801d9a0 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801d988:	9300      	str	r3, [sp, #0]
 801d98a:	2300      	movs	r3, #0
 801d98c:	4632      	mov	r2, r6
 801d98e:	4905      	ldr	r1, [pc, #20]	; (801d9a4 <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801d990:	4620      	mov	r0, r4
 801d992:	47a8      	blx	r5
    return value_.pointerValue_;
 801d994:	687b      	ldr	r3, [r7, #4]
 801d996:	699b      	ldr	r3, [r3, #24]
}
 801d998:	4618      	mov	r0, r3
 801d99a:	370c      	adds	r7, #12
 801d99c:	46bd      	mov	sp, r7
 801d99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d9a0:	08026064 	.word	0x08026064
 801d9a4:	080260d4 	.word	0x080260d4

0801d9a8 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801d9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9aa:	b087      	sub	sp, #28
 801d9ac:	af04      	add	r7, sp, #16
 801d9ae:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801d9b0:	f7f6 f954 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801d9b4:	4604      	mov	r4, r0
 801d9b6:	6823      	ldr	r3, [r4, #0]
 801d9b8:	3324      	adds	r3, #36	; 0x24
 801d9ba:	681d      	ldr	r5, [r3, #0]
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	330c      	adds	r3, #12
 801d9c0:	4618      	mov	r0, r3
 801d9c2:	f7ef f8f3 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801d9c6:	4606      	mov	r6, r0
 801d9c8:	f7f6 f958 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d9cc:	4603      	mov	r3, r0
 801d9ce:	9302      	str	r3, [sp, #8]
 801d9d0:	f240 1349 	movw	r3, #329	; 0x149
 801d9d4:	9301      	str	r3, [sp, #4]
 801d9d6:	4b06      	ldr	r3, [pc, #24]	; (801d9f0 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801d9d8:	9300      	str	r3, [sp, #0]
 801d9da:	2300      	movs	r3, #0
 801d9dc:	4632      	mov	r2, r6
 801d9de:	4905      	ldr	r1, [pc, #20]	; (801d9f4 <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801d9e0:	4620      	mov	r0, r4
 801d9e2:	47a8      	blx	r5
    return value_.pointerValue_;
 801d9e4:	687b      	ldr	r3, [r7, #4]
 801d9e6:	699b      	ldr	r3, [r3, #24]
}
 801d9e8:	4618      	mov	r0, r3
 801d9ea:	370c      	adds	r7, #12
 801d9ec:	46bd      	mov	sp, r7
 801d9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d9f0:	08026064 	.word	0x08026064
 801d9f4:	080260dc 	.word	0x080260dc

0801d9f8 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801d9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9fa:	b087      	sub	sp, #28
 801d9fc:	af04      	add	r7, sp, #16
 801d9fe:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801da00:	f7f6 f92c 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801da04:	4604      	mov	r4, r0
 801da06:	6823      	ldr	r3, [r4, #0]
 801da08:	3324      	adds	r3, #36	; 0x24
 801da0a:	681d      	ldr	r5, [r3, #0]
 801da0c:	687b      	ldr	r3, [r7, #4]
 801da0e:	330c      	adds	r3, #12
 801da10:	4618      	mov	r0, r3
 801da12:	f7ef f8cb 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801da16:	4606      	mov	r6, r0
 801da18:	f7f6 f930 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801da1c:	4603      	mov	r3, r0
 801da1e:	9302      	str	r3, [sp, #8]
 801da20:	f240 134f 	movw	r3, #335	; 0x14f
 801da24:	9301      	str	r3, [sp, #4]
 801da26:	4b06      	ldr	r3, [pc, #24]	; (801da40 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801da28:	9300      	str	r3, [sp, #0]
 801da2a:	2300      	movs	r3, #0
 801da2c:	4632      	mov	r2, r6
 801da2e:	4905      	ldr	r1, [pc, #20]	; (801da44 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801da30:	4620      	mov	r0, r4
 801da32:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801da34:	687b      	ldr	r3, [r7, #4]
 801da36:	699b      	ldr	r3, [r3, #24]
}
 801da38:	4618      	mov	r0, r3
 801da3a:	370c      	adds	r7, #12
 801da3c:	46bd      	mov	sp, r7
 801da3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da40:	08026064 	.word	0x08026064
 801da44:	080260e8 	.word	0x080260e8

0801da48 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801da48:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da4a:	b087      	sub	sp, #28
 801da4c:	af04      	add	r7, sp, #16
 801da4e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801da50:	f7f6 f904 	bl	8013c5c <_ZN10UtestShell10getCurrentEv>
 801da54:	4604      	mov	r4, r0
 801da56:	6823      	ldr	r3, [r4, #0]
 801da58:	3324      	adds	r3, #36	; 0x24
 801da5a:	681d      	ldr	r5, [r3, #0]
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	330c      	adds	r3, #12
 801da60:	4618      	mov	r0, r3
 801da62:	f7ef f8a3 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801da66:	4606      	mov	r6, r0
 801da68:	f7f6 f908 	bl	8013c7c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801da6c:	4603      	mov	r3, r0
 801da6e:	9302      	str	r3, [sp, #8]
 801da70:	f240 1355 	movw	r3, #341	; 0x155
 801da74:	9301      	str	r3, [sp, #4]
 801da76:	4b06      	ldr	r3, [pc, #24]	; (801da90 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801da78:	9300      	str	r3, [sp, #0]
 801da7a:	2300      	movs	r3, #0
 801da7c:	4632      	mov	r2, r6
 801da7e:	4905      	ldr	r1, [pc, #20]	; (801da94 <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801da80:	4620      	mov	r0, r4
 801da82:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	699b      	ldr	r3, [r3, #24]
}
 801da88:	4618      	mov	r0, r3
 801da8a:	370c      	adds	r7, #12
 801da8c:	46bd      	mov	sp, r7
 801da8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da90:	08026064 	.word	0x08026064
 801da94:	08026100 	.word	0x08026100

0801da98 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801da98:	b480      	push	{r7}
 801da9a:	b083      	sub	sp, #12
 801da9c:	af00      	add	r7, sp, #0
 801da9e:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801daa0:	687b      	ldr	r3, [r7, #4]
 801daa2:	699b      	ldr	r3, [r3, #24]
}
 801daa4:	4618      	mov	r0, r3
 801daa6:	370c      	adds	r7, #12
 801daa8:	46bd      	mov	sp, r7
 801daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801daae:	4770      	bx	lr

0801dab0 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801dab0:	b480      	push	{r7}
 801dab2:	b083      	sub	sp, #12
 801dab4:	af00      	add	r7, sp, #0
 801dab6:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	699b      	ldr	r3, [r3, #24]
}
 801dabc:	4618      	mov	r0, r3
 801dabe:	370c      	adds	r7, #12
 801dac0:	46bd      	mov	sp, r7
 801dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dac6:	4770      	bx	lr

0801dac8 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801dac8:	b480      	push	{r7}
 801daca:	b083      	sub	sp, #12
 801dacc:	af00      	add	r7, sp, #0
 801dace:	6078      	str	r0, [r7, #4]
    return size_;
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801dad4:	4618      	mov	r0, r3
 801dad6:	370c      	adds	r7, #12
 801dad8:	46bd      	mov	sp, r7
 801dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dade:	4770      	bx	lr

0801dae0 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801dae0:	b480      	push	{r7}
 801dae2:	b083      	sub	sp, #12
 801dae4:	af00      	add	r7, sp, #0
 801dae6:	6078      	str	r0, [r7, #4]
    return comparator_;
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801daec:	4618      	mov	r0, r3
 801daee:	370c      	adds	r7, #12
 801daf0:	46bd      	mov	sp, r7
 801daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801daf6:	4770      	bx	lr

0801daf8 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801daf8:	b480      	push	{r7}
 801dafa:	b083      	sub	sp, #12
 801dafc:	af00      	add	r7, sp, #0
 801dafe:	6078      	str	r0, [r7, #4]
    return copier_;
 801db00:	687b      	ldr	r3, [r7, #4]
 801db02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801db04:	4618      	mov	r0, r3
 801db06:	370c      	adds	r7, #12
 801db08:	46bd      	mov	sp, r7
 801db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db0e:	4770      	bx	lr

0801db10 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801db10:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db12:	b0cd      	sub	sp, #308	; 0x134
 801db14:	af00      	add	r7, sp, #0
 801db16:	1d3b      	adds	r3, r7, #4
 801db18:	6018      	str	r0, [r3, #0]
 801db1a:	463b      	mov	r3, r7
 801db1c:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801db1e:	2500      	movs	r5, #0
 801db20:	1d3b      	adds	r3, r7, #4
 801db22:	681b      	ldr	r3, [r3, #0]
 801db24:	f103 040c 	add.w	r4, r3, #12
 801db28:	f107 0308 	add.w	r3, r7, #8
 801db2c:	49bb      	ldr	r1, [pc, #748]	; (801de1c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801db2e:	4618      	mov	r0, r3
 801db30:	f7ee fcb1 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801db34:	2601      	movs	r6, #1
 801db36:	f107 0308 	add.w	r3, r7, #8
 801db3a:	4619      	mov	r1, r3
 801db3c:	4620      	mov	r0, r4
 801db3e:	f7ef f86e 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801db42:	4603      	mov	r3, r0
 801db44:	2b00      	cmp	r3, #0
 801db46:	d015      	beq.n	801db74 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801db48:	463b      	mov	r3, r7
 801db4a:	681b      	ldr	r3, [r3, #0]
 801db4c:	f103 040c 	add.w	r4, r3, #12
 801db50:	f107 0310 	add.w	r3, r7, #16
 801db54:	49b2      	ldr	r1, [pc, #712]	; (801de20 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801db56:	4618      	mov	r0, r3
 801db58:	f7ee fc9d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801db5c:	2501      	movs	r5, #1
 801db5e:	f107 0310 	add.w	r3, r7, #16
 801db62:	4619      	mov	r1, r3
 801db64:	4620      	mov	r0, r4
 801db66:	f7ef f85a 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801db6a:	4603      	mov	r3, r0
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	d001      	beq.n	801db74 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801db70:	2401      	movs	r4, #1
 801db72:	e000      	b.n	801db76 <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801db74:	2400      	movs	r4, #0
 801db76:	2d00      	cmp	r5, #0
 801db78:	d004      	beq.n	801db84 <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801db7a:	f107 0310 	add.w	r3, r7, #16
 801db7e:	4618      	mov	r0, r3
 801db80:	f7ef f841 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801db84:	2e00      	cmp	r6, #0
 801db86:	d004      	beq.n	801db92 <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801db88:	f107 0308 	add.w	r3, r7, #8
 801db8c:	4618      	mov	r0, r3
 801db8e:	f7ef f83a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801db92:	2c00      	cmp	r4, #0
 801db94:	d00c      	beq.n	801dbb0 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801db96:	1d3b      	adds	r3, r7, #4
 801db98:	681b      	ldr	r3, [r3, #0]
 801db9a:	699a      	ldr	r2, [r3, #24]
 801db9c:	463b      	mov	r3, r7
 801db9e:	681b      	ldr	r3, [r3, #0]
 801dba0:	699b      	ldr	r3, [r3, #24]
 801dba2:	429a      	cmp	r2, r3
 801dba4:	bf0c      	ite	eq
 801dba6:	2301      	moveq	r3, #1
 801dba8:	2300      	movne	r3, #0
 801dbaa:	b2dc      	uxtb	r4, r3
 801dbac:	f000 bd60 	b.w	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801dbb0:	2500      	movs	r5, #0
 801dbb2:	1d3b      	adds	r3, r7, #4
 801dbb4:	681b      	ldr	r3, [r3, #0]
 801dbb6:	f103 040c 	add.w	r4, r3, #12
 801dbba:	f107 0318 	add.w	r3, r7, #24
 801dbbe:	4998      	ldr	r1, [pc, #608]	; (801de20 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801dbc0:	4618      	mov	r0, r3
 801dbc2:	f7ee fc68 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801dbc6:	2601      	movs	r6, #1
 801dbc8:	f107 0318 	add.w	r3, r7, #24
 801dbcc:	4619      	mov	r1, r3
 801dbce:	4620      	mov	r0, r4
 801dbd0:	f7ef f825 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801dbd4:	4603      	mov	r3, r0
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	d015      	beq.n	801dc06 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801dbda:	463b      	mov	r3, r7
 801dbdc:	681b      	ldr	r3, [r3, #0]
 801dbde:	f103 040c 	add.w	r4, r3, #12
 801dbe2:	f107 0320 	add.w	r3, r7, #32
 801dbe6:	498d      	ldr	r1, [pc, #564]	; (801de1c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801dbe8:	4618      	mov	r0, r3
 801dbea:	f7ee fc54 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801dbee:	2501      	movs	r5, #1
 801dbf0:	f107 0320 	add.w	r3, r7, #32
 801dbf4:	4619      	mov	r1, r3
 801dbf6:	4620      	mov	r0, r4
 801dbf8:	f7ef f811 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801dbfc:	4603      	mov	r3, r0
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	d001      	beq.n	801dc06 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801dc02:	2401      	movs	r4, #1
 801dc04:	e000      	b.n	801dc08 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801dc06:	2400      	movs	r4, #0
 801dc08:	2d00      	cmp	r5, #0
 801dc0a:	d004      	beq.n	801dc16 <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801dc0c:	f107 0320 	add.w	r3, r7, #32
 801dc10:	4618      	mov	r0, r3
 801dc12:	f7ee fff8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801dc16:	2e00      	cmp	r6, #0
 801dc18:	d004      	beq.n	801dc24 <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801dc1a:	f107 0318 	add.w	r3, r7, #24
 801dc1e:	4618      	mov	r0, r3
 801dc20:	f7ee fff1 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801dc24:	2c00      	cmp	r4, #0
 801dc26:	d00c      	beq.n	801dc42 <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801dc28:	1d3b      	adds	r3, r7, #4
 801dc2a:	681b      	ldr	r3, [r3, #0]
 801dc2c:	699a      	ldr	r2, [r3, #24]
 801dc2e:	463b      	mov	r3, r7
 801dc30:	681b      	ldr	r3, [r3, #0]
 801dc32:	699b      	ldr	r3, [r3, #24]
 801dc34:	429a      	cmp	r2, r3
 801dc36:	bf0c      	ite	eq
 801dc38:	2301      	moveq	r3, #1
 801dc3a:	2300      	movne	r3, #0
 801dc3c:	b2dc      	uxtb	r4, r3
 801dc3e:	f000 bd17 	b.w	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801dc42:	2500      	movs	r5, #0
 801dc44:	1d3b      	adds	r3, r7, #4
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	f103 040c 	add.w	r4, r3, #12
 801dc4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dc50:	4974      	ldr	r1, [pc, #464]	; (801de24 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801dc52:	4618      	mov	r0, r3
 801dc54:	f7ee fc1f 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801dc58:	2601      	movs	r6, #1
 801dc5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dc5e:	4619      	mov	r1, r3
 801dc60:	4620      	mov	r0, r4
 801dc62:	f7ee ffdc 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801dc66:	4603      	mov	r3, r0
 801dc68:	2b00      	cmp	r3, #0
 801dc6a:	d015      	beq.n	801dc98 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801dc6c:	463b      	mov	r3, r7
 801dc6e:	681b      	ldr	r3, [r3, #0]
 801dc70:	f103 040c 	add.w	r4, r3, #12
 801dc74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dc78:	4969      	ldr	r1, [pc, #420]	; (801de20 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801dc7a:	4618      	mov	r0, r3
 801dc7c:	f7ee fc0b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801dc80:	2501      	movs	r5, #1
 801dc82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dc86:	4619      	mov	r1, r3
 801dc88:	4620      	mov	r0, r4
 801dc8a:	f7ee ffc8 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801dc8e:	4603      	mov	r3, r0
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	d001      	beq.n	801dc98 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801dc94:	2401      	movs	r4, #1
 801dc96:	e000      	b.n	801dc9a <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801dc98:	2400      	movs	r4, #0
 801dc9a:	2d00      	cmp	r5, #0
 801dc9c:	d004      	beq.n	801dca8 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801dc9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dca2:	4618      	mov	r0, r3
 801dca4:	f7ee ffaf 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801dca8:	2e00      	cmp	r6, #0
 801dcaa:	d004      	beq.n	801dcb6 <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801dcac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dcb0:	4618      	mov	r0, r3
 801dcb2:	f7ee ffa8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801dcb6:	2c00      	cmp	r4, #0
 801dcb8:	d012      	beq.n	801dce0 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801dcba:	463b      	mov	r3, r7
 801dcbc:	681b      	ldr	r3, [r3, #0]
 801dcbe:	699b      	ldr	r3, [r3, #24]
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	db0a      	blt.n	801dcda <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801dcc4:	1d3b      	adds	r3, r7, #4
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	699b      	ldr	r3, [r3, #24]
 801dcca:	463a      	mov	r2, r7
 801dccc:	6812      	ldr	r2, [r2, #0]
 801dcce:	6992      	ldr	r2, [r2, #24]
 801dcd0:	4293      	cmp	r3, r2
 801dcd2:	d102      	bne.n	801dcda <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801dcd4:	2401      	movs	r4, #1
 801dcd6:	f000 bccb 	b.w	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801dcda:	2400      	movs	r4, #0
 801dcdc:	f000 bcc8 	b.w	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801dce0:	2500      	movs	r5, #0
 801dce2:	1d3b      	adds	r3, r7, #4
 801dce4:	681b      	ldr	r3, [r3, #0]
 801dce6:	f103 040c 	add.w	r4, r3, #12
 801dcea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dcee:	494c      	ldr	r1, [pc, #304]	; (801de20 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801dcf0:	4618      	mov	r0, r3
 801dcf2:	f7ee fbd0 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801dcf6:	2601      	movs	r6, #1
 801dcf8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dcfc:	4619      	mov	r1, r3
 801dcfe:	4620      	mov	r0, r4
 801dd00:	f7ee ff8d 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801dd04:	4603      	mov	r3, r0
 801dd06:	2b00      	cmp	r3, #0
 801dd08:	d015      	beq.n	801dd36 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801dd0a:	463b      	mov	r3, r7
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	f103 040c 	add.w	r4, r3, #12
 801dd12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801dd16:	4943      	ldr	r1, [pc, #268]	; (801de24 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801dd18:	4618      	mov	r0, r3
 801dd1a:	f7ee fbbc 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801dd1e:	2501      	movs	r5, #1
 801dd20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801dd24:	4619      	mov	r1, r3
 801dd26:	4620      	mov	r0, r4
 801dd28:	f7ee ff79 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801dd2c:	4603      	mov	r3, r0
 801dd2e:	2b00      	cmp	r3, #0
 801dd30:	d001      	beq.n	801dd36 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801dd32:	2401      	movs	r4, #1
 801dd34:	e000      	b.n	801dd38 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801dd36:	2400      	movs	r4, #0
 801dd38:	2d00      	cmp	r5, #0
 801dd3a:	d004      	beq.n	801dd46 <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801dd3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801dd40:	4618      	mov	r0, r3
 801dd42:	f7ee ff60 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801dd46:	2e00      	cmp	r6, #0
 801dd48:	d004      	beq.n	801dd54 <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801dd4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dd4e:	4618      	mov	r0, r3
 801dd50:	f7ee ff59 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801dd54:	2c00      	cmp	r4, #0
 801dd56:	d012      	beq.n	801dd7e <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801dd58:	1d3b      	adds	r3, r7, #4
 801dd5a:	681b      	ldr	r3, [r3, #0]
 801dd5c:	699b      	ldr	r3, [r3, #24]
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	db0a      	blt.n	801dd78 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801dd62:	1d3b      	adds	r3, r7, #4
 801dd64:	681b      	ldr	r3, [r3, #0]
 801dd66:	699b      	ldr	r3, [r3, #24]
 801dd68:	463a      	mov	r2, r7
 801dd6a:	6812      	ldr	r2, [r2, #0]
 801dd6c:	6992      	ldr	r2, [r2, #24]
 801dd6e:	4293      	cmp	r3, r2
 801dd70:	d102      	bne.n	801dd78 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801dd72:	2401      	movs	r4, #1
 801dd74:	f000 bc7c 	b.w	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801dd78:	2400      	movs	r4, #0
 801dd7a:	f000 bc79 	b.w	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801dd7e:	2500      	movs	r5, #0
 801dd80:	1d3b      	adds	r3, r7, #4
 801dd82:	681b      	ldr	r3, [r3, #0]
 801dd84:	f103 040c 	add.w	r4, r3, #12
 801dd88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801dd8c:	4926      	ldr	r1, [pc, #152]	; (801de28 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801dd8e:	4618      	mov	r0, r3
 801dd90:	f7ee fb81 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801dd94:	2601      	movs	r6, #1
 801dd96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801dd9a:	4619      	mov	r1, r3
 801dd9c:	4620      	mov	r0, r4
 801dd9e:	f7ee ff3e 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801dda2:	4603      	mov	r3, r0
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	d015      	beq.n	801ddd4 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801dda8:	463b      	mov	r3, r7
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	f103 040c 	add.w	r4, r3, #12
 801ddb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ddb4:	491a      	ldr	r1, [pc, #104]	; (801de20 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ddb6:	4618      	mov	r0, r3
 801ddb8:	f7ee fb6d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801ddbc:	2501      	movs	r5, #1
 801ddbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ddc2:	4619      	mov	r1, r3
 801ddc4:	4620      	mov	r0, r4
 801ddc6:	f7ee ff2a 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801ddca:	4603      	mov	r3, r0
 801ddcc:	2b00      	cmp	r3, #0
 801ddce:	d001      	beq.n	801ddd4 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801ddd0:	2401      	movs	r4, #1
 801ddd2:	e000      	b.n	801ddd6 <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801ddd4:	2400      	movs	r4, #0
 801ddd6:	2d00      	cmp	r5, #0
 801ddd8:	d004      	beq.n	801dde4 <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801ddda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ddde:	4618      	mov	r0, r3
 801dde0:	f7ee ff11 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801dde4:	2e00      	cmp	r6, #0
 801dde6:	d004      	beq.n	801ddf2 <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801dde8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ddec:	4618      	mov	r0, r3
 801ddee:	f7ee ff0a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ddf2:	2c00      	cmp	r4, #0
 801ddf4:	d01a      	beq.n	801de2c <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801ddf6:	463b      	mov	r3, r7
 801ddf8:	681b      	ldr	r3, [r3, #0]
 801ddfa:	699b      	ldr	r3, [r3, #24]
 801ddfc:	2b00      	cmp	r3, #0
 801ddfe:	db0a      	blt.n	801de16 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801de00:	1d3b      	adds	r3, r7, #4
 801de02:	681b      	ldr	r3, [r3, #0]
 801de04:	699b      	ldr	r3, [r3, #24]
 801de06:	463a      	mov	r2, r7
 801de08:	6812      	ldr	r2, [r2, #0]
 801de0a:	6992      	ldr	r2, [r2, #24]
 801de0c:	4293      	cmp	r3, r2
 801de0e:	d102      	bne.n	801de16 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801de10:	2401      	movs	r4, #1
 801de12:	f000 bc2d 	b.w	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801de16:	2400      	movs	r4, #0
 801de18:	f000 bc2a 	b.w	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801de1c:	08026044 	.word	0x08026044
 801de20:	08026028 	.word	0x08026028
 801de24:	08026034 	.word	0x08026034
 801de28:	08026050 	.word	0x08026050
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801de2c:	2500      	movs	r5, #0
 801de2e:	1d3b      	adds	r3, r7, #4
 801de30:	681b      	ldr	r3, [r3, #0]
 801de32:	f103 040c 	add.w	r4, r3, #12
 801de36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801de3a:	49b8      	ldr	r1, [pc, #736]	; (801e11c <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801de3c:	4618      	mov	r0, r3
 801de3e:	f7ee fb2a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801de42:	2601      	movs	r6, #1
 801de44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801de48:	4619      	mov	r1, r3
 801de4a:	4620      	mov	r0, r4
 801de4c:	f7ee fee7 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801de50:	4603      	mov	r3, r0
 801de52:	2b00      	cmp	r3, #0
 801de54:	d015      	beq.n	801de82 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801de56:	463b      	mov	r3, r7
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	f103 040c 	add.w	r4, r3, #12
 801de5e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801de62:	49af      	ldr	r1, [pc, #700]	; (801e120 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801de64:	4618      	mov	r0, r3
 801de66:	f7ee fb16 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801de6a:	2501      	movs	r5, #1
 801de6c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801de70:	4619      	mov	r1, r3
 801de72:	4620      	mov	r0, r4
 801de74:	f7ee fed3 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801de78:	4603      	mov	r3, r0
 801de7a:	2b00      	cmp	r3, #0
 801de7c:	d001      	beq.n	801de82 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801de7e:	2401      	movs	r4, #1
 801de80:	e000      	b.n	801de84 <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801de82:	2400      	movs	r4, #0
 801de84:	2d00      	cmp	r5, #0
 801de86:	d004      	beq.n	801de92 <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801de88:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801de8c:	4618      	mov	r0, r3
 801de8e:	f7ee feba 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801de92:	2e00      	cmp	r6, #0
 801de94:	d004      	beq.n	801dea0 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801de96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801de9a:	4618      	mov	r0, r3
 801de9c:	f7ee feb3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801dea0:	2c00      	cmp	r4, #0
 801dea2:	d010      	beq.n	801dec6 <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801dea4:	1d3b      	adds	r3, r7, #4
 801dea6:	681b      	ldr	r3, [r3, #0]
 801dea8:	699b      	ldr	r3, [r3, #24]
 801deaa:	2b00      	cmp	r3, #0
 801deac:	db09      	blt.n	801dec2 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801deae:	1d3b      	adds	r3, r7, #4
 801deb0:	681b      	ldr	r3, [r3, #0]
 801deb2:	699b      	ldr	r3, [r3, #24]
 801deb4:	463a      	mov	r2, r7
 801deb6:	6812      	ldr	r2, [r2, #0]
 801deb8:	6992      	ldr	r2, [r2, #24]
 801deba:	4293      	cmp	r3, r2
 801debc:	d101      	bne.n	801dec2 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801debe:	2401      	movs	r4, #1
 801dec0:	e3d6      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801dec2:	2400      	movs	r4, #0
 801dec4:	e3d4      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801dec6:	2500      	movs	r5, #0
 801dec8:	1d3b      	adds	r3, r7, #4
 801deca:	681b      	ldr	r3, [r3, #0]
 801decc:	f103 040c 	add.w	r4, r3, #12
 801ded0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801ded4:	4993      	ldr	r1, [pc, #588]	; (801e124 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801ded6:	4618      	mov	r0, r3
 801ded8:	f7ee fadd 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801dedc:	2601      	movs	r6, #1
 801dede:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801dee2:	4619      	mov	r1, r3
 801dee4:	4620      	mov	r0, r4
 801dee6:	f7ee fe9a 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801deea:	4603      	mov	r3, r0
 801deec:	2b00      	cmp	r3, #0
 801deee:	d015      	beq.n	801df1c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801def0:	463b      	mov	r3, r7
 801def2:	681b      	ldr	r3, [r3, #0]
 801def4:	f103 040c 	add.w	r4, r3, #12
 801def8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801defc:	498a      	ldr	r1, [pc, #552]	; (801e128 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801defe:	4618      	mov	r0, r3
 801df00:	f7ee fac9 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801df04:	2501      	movs	r5, #1
 801df06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801df0a:	4619      	mov	r1, r3
 801df0c:	4620      	mov	r0, r4
 801df0e:	f7ee fe86 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801df12:	4603      	mov	r3, r0
 801df14:	2b00      	cmp	r3, #0
 801df16:	d001      	beq.n	801df1c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801df18:	2401      	movs	r4, #1
 801df1a:	e000      	b.n	801df1e <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801df1c:	2400      	movs	r4, #0
 801df1e:	2d00      	cmp	r5, #0
 801df20:	d004      	beq.n	801df2c <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801df22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801df26:	4618      	mov	r0, r3
 801df28:	f7ee fe6d 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801df2c:	2e00      	cmp	r6, #0
 801df2e:	d004      	beq.n	801df3a <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801df30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801df34:	4618      	mov	r0, r3
 801df36:	f7ee fe66 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801df3a:	2c00      	cmp	r4, #0
 801df3c:	d010      	beq.n	801df60 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801df3e:	463b      	mov	r3, r7
 801df40:	681b      	ldr	r3, [r3, #0]
 801df42:	699b      	ldr	r3, [r3, #24]
 801df44:	2b00      	cmp	r3, #0
 801df46:	db09      	blt.n	801df5c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801df48:	1d3b      	adds	r3, r7, #4
 801df4a:	681b      	ldr	r3, [r3, #0]
 801df4c:	699b      	ldr	r3, [r3, #24]
 801df4e:	463a      	mov	r2, r7
 801df50:	6812      	ldr	r2, [r2, #0]
 801df52:	6992      	ldr	r2, [r2, #24]
 801df54:	4293      	cmp	r3, r2
 801df56:	d101      	bne.n	801df5c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801df58:	2401      	movs	r4, #1
 801df5a:	e389      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801df5c:	2400      	movs	r4, #0
 801df5e:	e387      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801df60:	2500      	movs	r5, #0
 801df62:	1d3b      	adds	r3, r7, #4
 801df64:	681b      	ldr	r3, [r3, #0]
 801df66:	f103 040c 	add.w	r4, r3, #12
 801df6a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801df6e:	496e      	ldr	r1, [pc, #440]	; (801e128 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801df70:	4618      	mov	r0, r3
 801df72:	f7ee fa90 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801df76:	2601      	movs	r6, #1
 801df78:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801df7c:	4619      	mov	r1, r3
 801df7e:	4620      	mov	r0, r4
 801df80:	f7ee fe4d 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801df84:	4603      	mov	r3, r0
 801df86:	2b00      	cmp	r3, #0
 801df88:	d015      	beq.n	801dfb6 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801df8a:	463b      	mov	r3, r7
 801df8c:	681b      	ldr	r3, [r3, #0]
 801df8e:	f103 040c 	add.w	r4, r3, #12
 801df92:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801df96:	4963      	ldr	r1, [pc, #396]	; (801e124 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801df98:	4618      	mov	r0, r3
 801df9a:	f7ee fa7c 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801df9e:	2501      	movs	r5, #1
 801dfa0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801dfa4:	4619      	mov	r1, r3
 801dfa6:	4620      	mov	r0, r4
 801dfa8:	f7ee fe39 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801dfac:	4603      	mov	r3, r0
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	d001      	beq.n	801dfb6 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801dfb2:	2401      	movs	r4, #1
 801dfb4:	e000      	b.n	801dfb8 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801dfb6:	2400      	movs	r4, #0
 801dfb8:	2d00      	cmp	r5, #0
 801dfba:	d004      	beq.n	801dfc6 <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801dfbc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801dfc0:	4618      	mov	r0, r3
 801dfc2:	f7ee fe20 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801dfc6:	2e00      	cmp	r6, #0
 801dfc8:	d004      	beq.n	801dfd4 <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801dfca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801dfce:	4618      	mov	r0, r3
 801dfd0:	f7ee fe19 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801dfd4:	2c00      	cmp	r4, #0
 801dfd6:	d010      	beq.n	801dffa <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801dfd8:	1d3b      	adds	r3, r7, #4
 801dfda:	681b      	ldr	r3, [r3, #0]
 801dfdc:	699b      	ldr	r3, [r3, #24]
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	db09      	blt.n	801dff6 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801dfe2:	1d3b      	adds	r3, r7, #4
 801dfe4:	681b      	ldr	r3, [r3, #0]
 801dfe6:	699b      	ldr	r3, [r3, #24]
 801dfe8:	463a      	mov	r2, r7
 801dfea:	6812      	ldr	r2, [r2, #0]
 801dfec:	6992      	ldr	r2, [r2, #24]
 801dfee:	4293      	cmp	r3, r2
 801dff0:	d101      	bne.n	801dff6 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801dff2:	2401      	movs	r4, #1
 801dff4:	e33c      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801dff6:	2400      	movs	r4, #0
 801dff8:	e33a      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801dffa:	2500      	movs	r5, #0
 801dffc:	1d3b      	adds	r3, r7, #4
 801dffe:	681b      	ldr	r3, [r3, #0]
 801e000:	f103 040c 	add.w	r4, r3, #12
 801e004:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e008:	4946      	ldr	r1, [pc, #280]	; (801e124 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e00a:	4618      	mov	r0, r3
 801e00c:	f7ee fa43 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e010:	2601      	movs	r6, #1
 801e012:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e016:	4619      	mov	r1, r3
 801e018:	4620      	mov	r0, r4
 801e01a:	f7ee fe00 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e01e:	4603      	mov	r3, r0
 801e020:	2b00      	cmp	r3, #0
 801e022:	d015      	beq.n	801e050 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801e024:	463b      	mov	r3, r7
 801e026:	681b      	ldr	r3, [r3, #0]
 801e028:	f103 040c 	add.w	r4, r3, #12
 801e02c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e030:	493b      	ldr	r1, [pc, #236]	; (801e120 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e032:	4618      	mov	r0, r3
 801e034:	f7ee fa2f 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e038:	2501      	movs	r5, #1
 801e03a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e03e:	4619      	mov	r1, r3
 801e040:	4620      	mov	r0, r4
 801e042:	f7ee fdec 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e046:	4603      	mov	r3, r0
 801e048:	2b00      	cmp	r3, #0
 801e04a:	d001      	beq.n	801e050 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801e04c:	2401      	movs	r4, #1
 801e04e:	e000      	b.n	801e052 <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801e050:	2400      	movs	r4, #0
 801e052:	2d00      	cmp	r5, #0
 801e054:	d004      	beq.n	801e060 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801e056:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e05a:	4618      	mov	r0, r3
 801e05c:	f7ee fdd3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e060:	2e00      	cmp	r6, #0
 801e062:	d004      	beq.n	801e06e <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801e064:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e068:	4618      	mov	r0, r3
 801e06a:	f7ee fdcc 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e06e:	2c00      	cmp	r4, #0
 801e070:	d00b      	beq.n	801e08a <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801e072:	1d3b      	adds	r3, r7, #4
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	699a      	ldr	r2, [r3, #24]
 801e078:	463b      	mov	r3, r7
 801e07a:	681b      	ldr	r3, [r3, #0]
 801e07c:	699b      	ldr	r3, [r3, #24]
 801e07e:	429a      	cmp	r2, r3
 801e080:	bf0c      	ite	eq
 801e082:	2301      	moveq	r3, #1
 801e084:	2300      	movne	r3, #0
 801e086:	b2dc      	uxtb	r4, r3
 801e088:	e2f2      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801e08a:	2500      	movs	r5, #0
 801e08c:	1d3b      	adds	r3, r7, #4
 801e08e:	681b      	ldr	r3, [r3, #0]
 801e090:	f103 040c 	add.w	r4, r3, #12
 801e094:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e098:	4921      	ldr	r1, [pc, #132]	; (801e120 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e09a:	4618      	mov	r0, r3
 801e09c:	f7ee f9fb 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e0a0:	2601      	movs	r6, #1
 801e0a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e0a6:	4619      	mov	r1, r3
 801e0a8:	4620      	mov	r0, r4
 801e0aa:	f7ee fdb8 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e0ae:	4603      	mov	r3, r0
 801e0b0:	2b00      	cmp	r3, #0
 801e0b2:	d015      	beq.n	801e0e0 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801e0b4:	463b      	mov	r3, r7
 801e0b6:	681b      	ldr	r3, [r3, #0]
 801e0b8:	f103 040c 	add.w	r4, r3, #12
 801e0bc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e0c0:	4918      	ldr	r1, [pc, #96]	; (801e124 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e0c2:	4618      	mov	r0, r3
 801e0c4:	f7ee f9e7 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e0c8:	2501      	movs	r5, #1
 801e0ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e0ce:	4619      	mov	r1, r3
 801e0d0:	4620      	mov	r0, r4
 801e0d2:	f7ee fda4 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e0d6:	4603      	mov	r3, r0
 801e0d8:	2b00      	cmp	r3, #0
 801e0da:	d001      	beq.n	801e0e0 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801e0dc:	2401      	movs	r4, #1
 801e0de:	e000      	b.n	801e0e2 <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801e0e0:	2400      	movs	r4, #0
 801e0e2:	2d00      	cmp	r5, #0
 801e0e4:	d004      	beq.n	801e0f0 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801e0e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e0ea:	4618      	mov	r0, r3
 801e0ec:	f7ee fd8b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e0f0:	2e00      	cmp	r6, #0
 801e0f2:	d004      	beq.n	801e0fe <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801e0f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e0f8:	4618      	mov	r0, r3
 801e0fa:	f7ee fd84 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e0fe:	2c00      	cmp	r4, #0
 801e100:	d014      	beq.n	801e12c <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801e102:	1d3b      	adds	r3, r7, #4
 801e104:	681b      	ldr	r3, [r3, #0]
 801e106:	699a      	ldr	r2, [r3, #24]
 801e108:	463b      	mov	r3, r7
 801e10a:	681b      	ldr	r3, [r3, #0]
 801e10c:	699b      	ldr	r3, [r3, #24]
 801e10e:	429a      	cmp	r2, r3
 801e110:	bf0c      	ite	eq
 801e112:	2301      	moveq	r3, #1
 801e114:	2300      	movne	r3, #0
 801e116:	b2dc      	uxtb	r4, r3
 801e118:	e2aa      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e11a:	bf00      	nop
 801e11c:	08026028 	.word	0x08026028
 801e120:	08026050 	.word	0x08026050
 801e124:	08026034 	.word	0x08026034
 801e128:	08026044 	.word	0x08026044
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801e12c:	2500      	movs	r5, #0
 801e12e:	1d3b      	adds	r3, r7, #4
 801e130:	681b      	ldr	r3, [r3, #0]
 801e132:	f103 040c 	add.w	r4, r3, #12
 801e136:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e13a:	49ae      	ldr	r1, [pc, #696]	; (801e3f4 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801e13c:	4618      	mov	r0, r3
 801e13e:	f7ee f9aa 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e142:	2601      	movs	r6, #1
 801e144:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e148:	4619      	mov	r1, r3
 801e14a:	4620      	mov	r0, r4
 801e14c:	f7ee fd67 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e150:	4603      	mov	r3, r0
 801e152:	2b00      	cmp	r3, #0
 801e154:	d015      	beq.n	801e182 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801e156:	463b      	mov	r3, r7
 801e158:	681b      	ldr	r3, [r3, #0]
 801e15a:	f103 040c 	add.w	r4, r3, #12
 801e15e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e162:	49a5      	ldr	r1, [pc, #660]	; (801e3f8 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801e164:	4618      	mov	r0, r3
 801e166:	f7ee f996 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e16a:	2501      	movs	r5, #1
 801e16c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e170:	4619      	mov	r1, r3
 801e172:	4620      	mov	r0, r4
 801e174:	f7ee fd53 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e178:	4603      	mov	r3, r0
 801e17a:	2b00      	cmp	r3, #0
 801e17c:	d001      	beq.n	801e182 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801e17e:	2401      	movs	r4, #1
 801e180:	e000      	b.n	801e184 <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801e182:	2400      	movs	r4, #0
 801e184:	2d00      	cmp	r5, #0
 801e186:	d004      	beq.n	801e192 <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801e188:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e18c:	4618      	mov	r0, r3
 801e18e:	f7ee fd3a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e192:	2e00      	cmp	r6, #0
 801e194:	d004      	beq.n	801e1a0 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801e196:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e19a:	4618      	mov	r0, r3
 801e19c:	f7ee fd33 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e1a0:	2c00      	cmp	r4, #0
 801e1a2:	d010      	beq.n	801e1c6 <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801e1a4:	1d3b      	adds	r3, r7, #4
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	699b      	ldr	r3, [r3, #24]
 801e1aa:	2b00      	cmp	r3, #0
 801e1ac:	db09      	blt.n	801e1c2 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801e1ae:	1d3b      	adds	r3, r7, #4
 801e1b0:	681b      	ldr	r3, [r3, #0]
 801e1b2:	699b      	ldr	r3, [r3, #24]
 801e1b4:	463a      	mov	r2, r7
 801e1b6:	6812      	ldr	r2, [r2, #0]
 801e1b8:	6992      	ldr	r2, [r2, #24]
 801e1ba:	4293      	cmp	r3, r2
 801e1bc:	d101      	bne.n	801e1c2 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801e1be:	2401      	movs	r4, #1
 801e1c0:	e256      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e1c2:	2400      	movs	r4, #0
 801e1c4:	e254      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801e1c6:	2500      	movs	r5, #0
 801e1c8:	1d3b      	adds	r3, r7, #4
 801e1ca:	681b      	ldr	r3, [r3, #0]
 801e1cc:	f103 040c 	add.w	r4, r3, #12
 801e1d0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e1d4:	4988      	ldr	r1, [pc, #544]	; (801e3f8 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801e1d6:	4618      	mov	r0, r3
 801e1d8:	f7ee f95d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e1dc:	2601      	movs	r6, #1
 801e1de:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e1e2:	4619      	mov	r1, r3
 801e1e4:	4620      	mov	r0, r4
 801e1e6:	f7ee fd1a 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e1ea:	4603      	mov	r3, r0
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d015      	beq.n	801e21c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801e1f0:	463b      	mov	r3, r7
 801e1f2:	681b      	ldr	r3, [r3, #0]
 801e1f4:	f103 040c 	add.w	r4, r3, #12
 801e1f8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e1fc:	497d      	ldr	r1, [pc, #500]	; (801e3f4 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801e1fe:	4618      	mov	r0, r3
 801e200:	f7ee f949 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e204:	2501      	movs	r5, #1
 801e206:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e20a:	4619      	mov	r1, r3
 801e20c:	4620      	mov	r0, r4
 801e20e:	f7ee fd06 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e212:	4603      	mov	r3, r0
 801e214:	2b00      	cmp	r3, #0
 801e216:	d001      	beq.n	801e21c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801e218:	2401      	movs	r4, #1
 801e21a:	e000      	b.n	801e21e <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801e21c:	2400      	movs	r4, #0
 801e21e:	2d00      	cmp	r5, #0
 801e220:	d004      	beq.n	801e22c <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801e222:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e226:	4618      	mov	r0, r3
 801e228:	f7ee fced 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e22c:	2e00      	cmp	r6, #0
 801e22e:	d004      	beq.n	801e23a <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801e230:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e234:	4618      	mov	r0, r3
 801e236:	f7ee fce6 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e23a:	2c00      	cmp	r4, #0
 801e23c:	d010      	beq.n	801e260 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801e23e:	463b      	mov	r3, r7
 801e240:	681b      	ldr	r3, [r3, #0]
 801e242:	699b      	ldr	r3, [r3, #24]
 801e244:	2b00      	cmp	r3, #0
 801e246:	db09      	blt.n	801e25c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801e248:	1d3b      	adds	r3, r7, #4
 801e24a:	681b      	ldr	r3, [r3, #0]
 801e24c:	699b      	ldr	r3, [r3, #24]
 801e24e:	463a      	mov	r2, r7
 801e250:	6812      	ldr	r2, [r2, #0]
 801e252:	6992      	ldr	r2, [r2, #24]
 801e254:	4293      	cmp	r3, r2
 801e256:	d101      	bne.n	801e25c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801e258:	2401      	movs	r4, #1
 801e25a:	e209      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e25c:	2400      	movs	r4, #0
 801e25e:	e207      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801e260:	1d3b      	adds	r3, r7, #4
 801e262:	681b      	ldr	r3, [r3, #0]
 801e264:	f103 020c 	add.w	r2, r3, #12
 801e268:	463b      	mov	r3, r7
 801e26a:	681b      	ldr	r3, [r3, #0]
 801e26c:	330c      	adds	r3, #12
 801e26e:	4619      	mov	r1, r3
 801e270:	4610      	mov	r0, r2
 801e272:	f7ee fd19 	bl	800cca8 <_ZneRK12SimpleStringS1_>
 801e276:	4603      	mov	r3, r0
 801e278:	2b00      	cmp	r3, #0
 801e27a:	d001      	beq.n	801e280 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801e27c:	2400      	movs	r4, #0
 801e27e:	e1f7      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801e280:	1d3b      	adds	r3, r7, #4
 801e282:	681b      	ldr	r3, [r3, #0]
 801e284:	f103 040c 	add.w	r4, r3, #12
 801e288:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e28c:	495b      	ldr	r1, [pc, #364]	; (801e3fc <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801e28e:	4618      	mov	r0, r3
 801e290:	f7ee f901 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e294:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e298:	4619      	mov	r1, r3
 801e29a:	4620      	mov	r0, r4
 801e29c:	f7ee fcbf 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e2a0:	4603      	mov	r3, r0
 801e2a2:	461c      	mov	r4, r3
 801e2a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e2a8:	4618      	mov	r0, r3
 801e2aa:	f7ee fcac 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e2ae:	2c00      	cmp	r4, #0
 801e2b0:	d00b      	beq.n	801e2ca <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801e2b2:	1d3b      	adds	r3, r7, #4
 801e2b4:	681b      	ldr	r3, [r3, #0]
 801e2b6:	7e1a      	ldrb	r2, [r3, #24]
 801e2b8:	463b      	mov	r3, r7
 801e2ba:	681b      	ldr	r3, [r3, #0]
 801e2bc:	7e1b      	ldrb	r3, [r3, #24]
 801e2be:	429a      	cmp	r2, r3
 801e2c0:	bf0c      	ite	eq
 801e2c2:	2301      	moveq	r3, #1
 801e2c4:	2300      	movne	r3, #0
 801e2c6:	b2dc      	uxtb	r4, r3
 801e2c8:	e1d2      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801e2ca:	1d3b      	adds	r3, r7, #4
 801e2cc:	681b      	ldr	r3, [r3, #0]
 801e2ce:	f103 040c 	add.w	r4, r3, #12
 801e2d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801e2d6:	494a      	ldr	r1, [pc, #296]	; (801e400 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801e2d8:	4618      	mov	r0, r3
 801e2da:	f7ee f8dc 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e2de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801e2e2:	4619      	mov	r1, r3
 801e2e4:	4620      	mov	r0, r4
 801e2e6:	f7ee fc9a 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e2ea:	4603      	mov	r3, r0
 801e2ec:	461c      	mov	r4, r3
 801e2ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801e2f2:	4618      	mov	r0, r3
 801e2f4:	f7ee fc87 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e2f8:	2c00      	cmp	r4, #0
 801e2fa:	d00b      	beq.n	801e314 <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801e2fc:	1d3b      	adds	r3, r7, #4
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	699a      	ldr	r2, [r3, #24]
 801e302:	463b      	mov	r3, r7
 801e304:	681b      	ldr	r3, [r3, #0]
 801e306:	699b      	ldr	r3, [r3, #24]
 801e308:	429a      	cmp	r2, r3
 801e30a:	bf0c      	ite	eq
 801e30c:	2301      	moveq	r3, #1
 801e30e:	2300      	movne	r3, #0
 801e310:	b2dc      	uxtb	r4, r3
 801e312:	e1ad      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801e314:	1d3b      	adds	r3, r7, #4
 801e316:	681b      	ldr	r3, [r3, #0]
 801e318:	f103 040c 	add.w	r4, r3, #12
 801e31c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801e320:	4938      	ldr	r1, [pc, #224]	; (801e404 <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801e322:	4618      	mov	r0, r3
 801e324:	f7ee f8b7 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e328:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801e32c:	4619      	mov	r1, r3
 801e32e:	4620      	mov	r0, r4
 801e330:	f7ee fc75 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e334:	4603      	mov	r3, r0
 801e336:	461c      	mov	r4, r3
 801e338:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801e33c:	4618      	mov	r0, r3
 801e33e:	f7ee fc62 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e342:	2c00      	cmp	r4, #0
 801e344:	d00b      	beq.n	801e35e <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801e346:	1d3b      	adds	r3, r7, #4
 801e348:	681b      	ldr	r3, [r3, #0]
 801e34a:	699a      	ldr	r2, [r3, #24]
 801e34c:	463b      	mov	r3, r7
 801e34e:	681b      	ldr	r3, [r3, #0]
 801e350:	699b      	ldr	r3, [r3, #24]
 801e352:	429a      	cmp	r2, r3
 801e354:	bf0c      	ite	eq
 801e356:	2301      	moveq	r3, #1
 801e358:	2300      	movne	r3, #0
 801e35a:	b2dc      	uxtb	r4, r3
 801e35c:	e188      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801e35e:	1d3b      	adds	r3, r7, #4
 801e360:	681b      	ldr	r3, [r3, #0]
 801e362:	f103 040c 	add.w	r4, r3, #12
 801e366:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801e36a:	4922      	ldr	r1, [pc, #136]	; (801e3f4 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801e36c:	4618      	mov	r0, r3
 801e36e:	f7ee f892 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e372:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801e376:	4619      	mov	r1, r3
 801e378:	4620      	mov	r0, r4
 801e37a:	f7ee fc50 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e37e:	4603      	mov	r3, r0
 801e380:	461c      	mov	r4, r3
 801e382:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801e386:	4618      	mov	r0, r3
 801e388:	f7ee fc3d 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e38c:	2c00      	cmp	r4, #0
 801e38e:	d00b      	beq.n	801e3a8 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801e390:	1d3b      	adds	r3, r7, #4
 801e392:	681b      	ldr	r3, [r3, #0]
 801e394:	699a      	ldr	r2, [r3, #24]
 801e396:	463b      	mov	r3, r7
 801e398:	681b      	ldr	r3, [r3, #0]
 801e39a:	699b      	ldr	r3, [r3, #24]
 801e39c:	429a      	cmp	r2, r3
 801e39e:	bf0c      	ite	eq
 801e3a0:	2301      	moveq	r3, #1
 801e3a2:	2300      	movne	r3, #0
 801e3a4:	b2dc      	uxtb	r4, r3
 801e3a6:	e163      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801e3a8:	1d3b      	adds	r3, r7, #4
 801e3aa:	681b      	ldr	r3, [r3, #0]
 801e3ac:	f103 040c 	add.w	r4, r3, #12
 801e3b0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801e3b4:	4910      	ldr	r1, [pc, #64]	; (801e3f8 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801e3b6:	4618      	mov	r0, r3
 801e3b8:	f7ee f86d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e3bc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801e3c0:	4619      	mov	r1, r3
 801e3c2:	4620      	mov	r0, r4
 801e3c4:	f7ee fc2b 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e3c8:	4603      	mov	r3, r0
 801e3ca:	461c      	mov	r4, r3
 801e3cc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801e3d0:	4618      	mov	r0, r3
 801e3d2:	f7ee fc18 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e3d6:	2c00      	cmp	r4, #0
 801e3d8:	d016      	beq.n	801e408 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801e3da:	1d3b      	adds	r3, r7, #4
 801e3dc:	681b      	ldr	r3, [r3, #0]
 801e3de:	699a      	ldr	r2, [r3, #24]
 801e3e0:	463b      	mov	r3, r7
 801e3e2:	681b      	ldr	r3, [r3, #0]
 801e3e4:	699b      	ldr	r3, [r3, #24]
 801e3e6:	429a      	cmp	r2, r3
 801e3e8:	bf0c      	ite	eq
 801e3ea:	2301      	moveq	r3, #1
 801e3ec:	2300      	movne	r3, #0
 801e3ee:	b2dc      	uxtb	r4, r3
 801e3f0:	e13e      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e3f2:	bf00      	nop
 801e3f4:	08026044 	.word	0x08026044
 801e3f8:	08026050 	.word	0x08026050
 801e3fc:	0802602c 	.word	0x0802602c
 801e400:	08026028 	.word	0x08026028
 801e404:	08026034 	.word	0x08026034
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801e408:	1d3b      	adds	r3, r7, #4
 801e40a:	681b      	ldr	r3, [r3, #0]
 801e40c:	f103 040c 	add.w	r4, r3, #12
 801e410:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801e414:	4999      	ldr	r1, [pc, #612]	; (801e67c <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801e416:	4618      	mov	r0, r3
 801e418:	f7ee f83d 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e41c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801e420:	4619      	mov	r1, r3
 801e422:	4620      	mov	r0, r4
 801e424:	f7ee fbfb 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e428:	4603      	mov	r3, r0
 801e42a:	461c      	mov	r4, r3
 801e42c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801e430:	4618      	mov	r0, r3
 801e432:	f7ee fbe8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e436:	2c00      	cmp	r4, #0
 801e438:	d026      	beq.n	801e488 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801e43a:	1d3b      	adds	r3, r7, #4
 801e43c:	681b      	ldr	r3, [r3, #0]
 801e43e:	699a      	ldr	r2, [r3, #24]
 801e440:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e444:	4611      	mov	r1, r2
 801e446:	4618      	mov	r0, r3
 801e448:	f7ee f825 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e44c:	463b      	mov	r3, r7
 801e44e:	681b      	ldr	r3, [r3, #0]
 801e450:	699a      	ldr	r2, [r3, #24]
 801e452:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801e456:	4611      	mov	r1, r2
 801e458:	4618      	mov	r0, r3
 801e45a:	f7ee f81c 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e45e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801e462:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e466:	4611      	mov	r1, r2
 801e468:	4618      	mov	r0, r3
 801e46a:	f7ee fbd8 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e46e:	4603      	mov	r3, r0
 801e470:	461c      	mov	r4, r3
 801e472:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801e476:	4618      	mov	r0, r3
 801e478:	f7ee fbc5 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e47c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e480:	4618      	mov	r0, r3
 801e482:	f7ee fbc0 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e486:	e0f3      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801e488:	1d3b      	adds	r3, r7, #4
 801e48a:	681b      	ldr	r3, [r3, #0]
 801e48c:	f103 040c 	add.w	r4, r3, #12
 801e490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801e494:	497a      	ldr	r1, [pc, #488]	; (801e680 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801e496:	4618      	mov	r0, r3
 801e498:	f7ed fffd 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e49c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801e4a0:	4619      	mov	r1, r3
 801e4a2:	4620      	mov	r0, r4
 801e4a4:	f7ee fbbb 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e4a8:	4603      	mov	r3, r0
 801e4aa:	461c      	mov	r4, r3
 801e4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801e4b0:	4618      	mov	r0, r3
 801e4b2:	f7ee fba8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e4b6:	2c00      	cmp	r4, #0
 801e4b8:	d00b      	beq.n	801e4d2 <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801e4ba:	1d3b      	adds	r3, r7, #4
 801e4bc:	681b      	ldr	r3, [r3, #0]
 801e4be:	699a      	ldr	r2, [r3, #24]
 801e4c0:	463b      	mov	r3, r7
 801e4c2:	681b      	ldr	r3, [r3, #0]
 801e4c4:	699b      	ldr	r3, [r3, #24]
 801e4c6:	429a      	cmp	r2, r3
 801e4c8:	bf0c      	ite	eq
 801e4ca:	2301      	moveq	r3, #1
 801e4cc:	2300      	movne	r3, #0
 801e4ce:	b2dc      	uxtb	r4, r3
 801e4d0:	e0ce      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801e4d2:	1d3b      	adds	r3, r7, #4
 801e4d4:	681b      	ldr	r3, [r3, #0]
 801e4d6:	f103 040c 	add.w	r4, r3, #12
 801e4da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801e4de:	4969      	ldr	r1, [pc, #420]	; (801e684 <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801e4e0:	4618      	mov	r0, r3
 801e4e2:	f7ed ffd8 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e4e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801e4ea:	4619      	mov	r1, r3
 801e4ec:	4620      	mov	r0, r4
 801e4ee:	f7ee fb96 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e4f2:	4603      	mov	r3, r0
 801e4f4:	461c      	mov	r4, r3
 801e4f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801e4fa:	4618      	mov	r0, r3
 801e4fc:	f7ee fb83 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e500:	2c00      	cmp	r4, #0
 801e502:	d00b      	beq.n	801e51c <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801e504:	1d3b      	adds	r3, r7, #4
 801e506:	681b      	ldr	r3, [r3, #0]
 801e508:	699a      	ldr	r2, [r3, #24]
 801e50a:	463b      	mov	r3, r7
 801e50c:	681b      	ldr	r3, [r3, #0]
 801e50e:	699b      	ldr	r3, [r3, #24]
 801e510:	429a      	cmp	r2, r3
 801e512:	bf0c      	ite	eq
 801e514:	2301      	moveq	r3, #1
 801e516:	2300      	movne	r3, #0
 801e518:	b2dc      	uxtb	r4, r3
 801e51a:	e0a9      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801e51c:	1d3b      	adds	r3, r7, #4
 801e51e:	681b      	ldr	r3, [r3, #0]
 801e520:	f103 040c 	add.w	r4, r3, #12
 801e524:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e528:	4957      	ldr	r1, [pc, #348]	; (801e688 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801e52a:	4618      	mov	r0, r3
 801e52c:	f7ed ffb3 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e530:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e534:	4619      	mov	r1, r3
 801e536:	4620      	mov	r0, r4
 801e538:	f7ee fb71 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e53c:	4603      	mov	r3, r0
 801e53e:	461c      	mov	r4, r3
 801e540:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e544:	4618      	mov	r0, r3
 801e546:	f7ee fb5e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e54a:	2c00      	cmp	r4, #0
 801e54c:	d00b      	beq.n	801e566 <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801e54e:	1d3b      	adds	r3, r7, #4
 801e550:	681b      	ldr	r3, [r3, #0]
 801e552:	699a      	ldr	r2, [r3, #24]
 801e554:	463b      	mov	r3, r7
 801e556:	681b      	ldr	r3, [r3, #0]
 801e558:	699b      	ldr	r3, [r3, #24]
 801e55a:	429a      	cmp	r2, r3
 801e55c:	bf0c      	ite	eq
 801e55e:	2301      	moveq	r3, #1
 801e560:	2300      	movne	r3, #0
 801e562:	b2dc      	uxtb	r4, r3
 801e564:	e084      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801e566:	1d3b      	adds	r3, r7, #4
 801e568:	681b      	ldr	r3, [r3, #0]
 801e56a:	f103 040c 	add.w	r4, r3, #12
 801e56e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801e572:	4946      	ldr	r1, [pc, #280]	; (801e68c <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801e574:	4618      	mov	r0, r3
 801e576:	f7ed ff8e 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e57a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801e57e:	4619      	mov	r1, r3
 801e580:	4620      	mov	r0, r4
 801e582:	f7ee fb4c 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e586:	4603      	mov	r3, r0
 801e588:	461c      	mov	r4, r3
 801e58a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801e58e:	4618      	mov	r0, r3
 801e590:	f7ee fb39 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e594:	2c00      	cmp	r4, #0
 801e596:	d01c      	beq.n	801e5d2 <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801e598:	1d3b      	adds	r3, r7, #4
 801e59a:	681b      	ldr	r3, [r3, #0]
 801e59c:	ed93 7b06 	vldr	d7, [r3, #24]
 801e5a0:	463b      	mov	r3, r7
 801e5a2:	681b      	ldr	r3, [r3, #0]
 801e5a4:	ed93 6b06 	vldr	d6, [r3, #24]
 801e5a8:	1d3b      	adds	r3, r7, #4
 801e5aa:	681b      	ldr	r3, [r3, #0]
 801e5ac:	ed93 5b08 	vldr	d5, [r3, #32]
 801e5b0:	eeb0 2a45 	vmov.f32	s4, s10
 801e5b4:	eef0 2a65 	vmov.f32	s5, s11
 801e5b8:	eeb0 1a46 	vmov.f32	s2, s12
 801e5bc:	eef0 1a66 	vmov.f32	s3, s13
 801e5c0:	eeb0 0a47 	vmov.f32	s0, s14
 801e5c4:	eef0 0a67 	vmov.f32	s1, s15
 801e5c8:	f7f3 fe18 	bl	80121fc <_Z13doubles_equalddd>
 801e5cc:	4603      	mov	r3, r0
 801e5ce:	461c      	mov	r4, r3
 801e5d0:	e04e      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801e5d2:	1d3b      	adds	r3, r7, #4
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	f103 040c 	add.w	r4, r3, #12
 801e5da:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801e5de:	492c      	ldr	r1, [pc, #176]	; (801e690 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801e5e0:	4618      	mov	r0, r3
 801e5e2:	f7ed ff58 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e5e6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801e5ea:	4619      	mov	r1, r3
 801e5ec:	4620      	mov	r0, r4
 801e5ee:	f7ee fb16 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e5f2:	4603      	mov	r3, r0
 801e5f4:	461c      	mov	r4, r3
 801e5f6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801e5fa:	4618      	mov	r0, r3
 801e5fc:	f7ee fb03 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e600:	2c00      	cmp	r4, #0
 801e602:	d01c      	beq.n	801e63e <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801e604:	1d3b      	adds	r3, r7, #4
 801e606:	681b      	ldr	r3, [r3, #0]
 801e608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e60a:	463b      	mov	r3, r7
 801e60c:	681b      	ldr	r3, [r3, #0]
 801e60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e610:	429a      	cmp	r2, r3
 801e612:	d001      	beq.n	801e618 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801e614:	2400      	movs	r4, #0
 801e616:	e02b      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801e618:	1d3b      	adds	r3, r7, #4
 801e61a:	681b      	ldr	r3, [r3, #0]
 801e61c:	6998      	ldr	r0, [r3, #24]
 801e61e:	463b      	mov	r3, r7
 801e620:	681b      	ldr	r3, [r3, #0]
 801e622:	6999      	ldr	r1, [r3, #24]
 801e624:	1d3b      	adds	r3, r7, #4
 801e626:	681b      	ldr	r3, [r3, #0]
 801e628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e62a:	461a      	mov	r2, r3
 801e62c:	f7ed fe52 	bl	800c2d4 <_ZN12SimpleString6MemCmpEPKvS1_j>
 801e630:	4603      	mov	r3, r0
 801e632:	2b00      	cmp	r3, #0
 801e634:	bf0c      	ite	eq
 801e636:	2301      	moveq	r3, #1
 801e638:	2300      	movne	r3, #0
 801e63a:	b2dc      	uxtb	r4, r3
 801e63c:	e018      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801e63e:	1d3b      	adds	r3, r7, #4
 801e640:	681b      	ldr	r3, [r3, #0]
 801e642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e644:	2b00      	cmp	r3, #0
 801e646:	d012      	beq.n	801e66e <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801e648:	1d3b      	adds	r3, r7, #4
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801e64e:	1d3b      	adds	r3, r7, #4
 801e650:	681b      	ldr	r3, [r3, #0]
 801e652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e654:	681b      	ldr	r3, [r3, #0]
 801e656:	3308      	adds	r3, #8
 801e658:	681b      	ldr	r3, [r3, #0]
 801e65a:	1d3a      	adds	r2, r7, #4
 801e65c:	6812      	ldr	r2, [r2, #0]
 801e65e:	6991      	ldr	r1, [r2, #24]
 801e660:	463a      	mov	r2, r7
 801e662:	6812      	ldr	r2, [r2, #0]
 801e664:	6992      	ldr	r2, [r2, #24]
 801e666:	4798      	blx	r3
 801e668:	4603      	mov	r3, r0
 801e66a:	461c      	mov	r4, r3
 801e66c:	e000      	b.n	801e670 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801e66e:	2400      	movs	r4, #0
 801e670:	4623      	mov	r3, r4
}
 801e672:	4618      	mov	r0, r3
 801e674:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801e678:	46bd      	mov	sp, r7
 801e67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e67c:	080260f4 	.word	0x080260f4
 801e680:	080260d4 	.word	0x080260d4
 801e684:	080260dc 	.word	0x080260dc
 801e688:	080260e8 	.word	0x080260e8
 801e68c:	080260cc 	.word	0x080260cc
 801e690:	08026100 	.word	0x08026100

0801e694 <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801e694:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e696:	b087      	sub	sp, #28
 801e698:	af00      	add	r7, sp, #0
 801e69a:	6078      	str	r0, [r7, #4]
 801e69c:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801e69e:	687b      	ldr	r3, [r7, #4]
 801e6a0:	f103 020c 	add.w	r2, r3, #12
 801e6a4:	683b      	ldr	r3, [r7, #0]
 801e6a6:	330c      	adds	r3, #12
 801e6a8:	4619      	mov	r1, r3
 801e6aa:	4610      	mov	r0, r2
 801e6ac:	f7ee fab7 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e6b0:	4603      	mov	r3, r0
 801e6b2:	2b00      	cmp	r3, #0
 801e6b4:	d001      	beq.n	801e6ba <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801e6b6:	2301      	movs	r3, #1
 801e6b8:	e03c      	b.n	801e734 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801e6ba:	2500      	movs	r5, #0
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	f103 040c 	add.w	r4, r3, #12
 801e6c2:	f107 0308 	add.w	r3, r7, #8
 801e6c6:	491d      	ldr	r1, [pc, #116]	; (801e73c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801e6c8:	4618      	mov	r0, r3
 801e6ca:	f7ed fee4 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e6ce:	2601      	movs	r6, #1
 801e6d0:	f107 0308 	add.w	r3, r7, #8
 801e6d4:	4619      	mov	r1, r3
 801e6d6:	4620      	mov	r0, r4
 801e6d8:	f7ee faa1 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e6dc:	4603      	mov	r3, r0
 801e6de:	2b00      	cmp	r3, #0
 801e6e0:	d014      	beq.n	801e70c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801e6e2:	683b      	ldr	r3, [r7, #0]
 801e6e4:	f103 040c 	add.w	r4, r3, #12
 801e6e8:	f107 0310 	add.w	r3, r7, #16
 801e6ec:	4914      	ldr	r1, [pc, #80]	; (801e740 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801e6ee:	4618      	mov	r0, r3
 801e6f0:	f7ed fed1 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e6f4:	2501      	movs	r5, #1
 801e6f6:	f107 0310 	add.w	r3, r7, #16
 801e6fa:	4619      	mov	r1, r3
 801e6fc:	4620      	mov	r0, r4
 801e6fe:	f7ee fa8e 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e702:	4603      	mov	r3, r0
 801e704:	2b00      	cmp	r3, #0
 801e706:	d001      	beq.n	801e70c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801e708:	2401      	movs	r4, #1
 801e70a:	e000      	b.n	801e70e <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801e70c:	2400      	movs	r4, #0
 801e70e:	2d00      	cmp	r5, #0
 801e710:	d004      	beq.n	801e71c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801e712:	f107 0310 	add.w	r3, r7, #16
 801e716:	4618      	mov	r0, r3
 801e718:	f7ee fa75 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e71c:	2e00      	cmp	r6, #0
 801e71e:	d004      	beq.n	801e72a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801e720:	f107 0308 	add.w	r3, r7, #8
 801e724:	4618      	mov	r0, r3
 801e726:	f7ee fa6e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e72a:	2c00      	cmp	r4, #0
 801e72c:	d001      	beq.n	801e732 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801e72e:	2301      	movs	r3, #1
 801e730:	e000      	b.n	801e734 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801e732:	2300      	movs	r3, #0
}
 801e734:	4618      	mov	r0, r3
 801e736:	371c      	adds	r7, #28
 801e738:	46bd      	mov	sp, r7
 801e73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e73c:	080260dc 	.word	0x080260dc
 801e740:	080260d4 	.word	0x080260d4

0801e744 <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801e744:	b590      	push	{r4, r7, lr}
 801e746:	b0b9      	sub	sp, #228	; 0xe4
 801e748:	af00      	add	r7, sp, #0
 801e74a:	6078      	str	r0, [r7, #4]
 801e74c:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801e74e:	683b      	ldr	r3, [r7, #0]
 801e750:	f103 040c 	add.w	r4, r3, #12
 801e754:	f107 0308 	add.w	r3, r7, #8
 801e758:	49d4      	ldr	r1, [pc, #848]	; (801eaac <_ZNK14MockNamedValue8toStringEv+0x368>)
 801e75a:	4618      	mov	r0, r3
 801e75c:	f7ed fe9b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e760:	f107 0308 	add.w	r3, r7, #8
 801e764:	4619      	mov	r1, r3
 801e766:	4620      	mov	r0, r4
 801e768:	f7ee fa59 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e76c:	4603      	mov	r3, r0
 801e76e:	461c      	mov	r4, r3
 801e770:	f107 0308 	add.w	r3, r7, #8
 801e774:	4618      	mov	r0, r3
 801e776:	f7ee fa46 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e77a:	2c00      	cmp	r4, #0
 801e77c:	d007      	beq.n	801e78e <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801e77e:	683b      	ldr	r3, [r7, #0]
 801e780:	7e1a      	ldrb	r2, [r3, #24]
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	4611      	mov	r1, r2
 801e786:	4618      	mov	r0, r3
 801e788:	f7ee fcae 	bl	800d0e8 <_Z10StringFromb>
 801e78c:	e23f      	b.n	801ec0e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801e78e:	683b      	ldr	r3, [r7, #0]
 801e790:	f103 040c 	add.w	r4, r3, #12
 801e794:	f107 0310 	add.w	r3, r7, #16
 801e798:	49c5      	ldr	r1, [pc, #788]	; (801eab0 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801e79a:	4618      	mov	r0, r3
 801e79c:	f7ed fe7b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e7a0:	f107 0310 	add.w	r3, r7, #16
 801e7a4:	4619      	mov	r1, r3
 801e7a6:	4620      	mov	r0, r4
 801e7a8:	f7ee fa39 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e7ac:	4603      	mov	r3, r0
 801e7ae:	461c      	mov	r4, r3
 801e7b0:	f107 0310 	add.w	r3, r7, #16
 801e7b4:	4618      	mov	r0, r3
 801e7b6:	f7ee fa26 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e7ba:	2c00      	cmp	r4, #0
 801e7bc:	d03b      	beq.n	801e836 <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801e7be:	683b      	ldr	r3, [r7, #0]
 801e7c0:	699a      	ldr	r2, [r3, #24]
 801e7c2:	f107 0320 	add.w	r3, r7, #32
 801e7c6:	4611      	mov	r1, r2
 801e7c8:	4618      	mov	r0, r3
 801e7ca:	f7ee fce3 	bl	800d194 <_Z10StringFromi>
 801e7ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e7d2:	49b8      	ldr	r1, [pc, #736]	; (801eab4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801e7d4:	4618      	mov	r0, r3
 801e7d6:	f7ed fe5e 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e7da:	f107 0318 	add.w	r3, r7, #24
 801e7de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801e7e2:	f107 0120 	add.w	r1, r7, #32
 801e7e6:	4618      	mov	r0, r3
 801e7e8:	f7ee fa6f 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 801e7ec:	683b      	ldr	r3, [r7, #0]
 801e7ee:	699a      	ldr	r2, [r3, #24]
 801e7f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e7f4:	4611      	mov	r1, r2
 801e7f6:	4618      	mov	r0, r3
 801e7f8:	f7ee fdbc 	bl	800d374 <_Z30BracketsFormattedHexStringFromi>
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801e802:	f107 0118 	add.w	r1, r7, #24
 801e806:	4618      	mov	r0, r3
 801e808:	f7ee fa5f 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 801e80c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e810:	4618      	mov	r0, r3
 801e812:	f7ee f9f8 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e816:	f107 0318 	add.w	r3, r7, #24
 801e81a:	4618      	mov	r0, r3
 801e81c:	f7ee f9f3 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e820:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e824:	4618      	mov	r0, r3
 801e826:	f7ee f9ee 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e82a:	f107 0320 	add.w	r3, r7, #32
 801e82e:	4618      	mov	r0, r3
 801e830:	f7ee f9e9 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e834:	e1eb      	b.n	801ec0e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801e836:	683b      	ldr	r3, [r7, #0]
 801e838:	f103 040c 	add.w	r4, r3, #12
 801e83c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e840:	499d      	ldr	r1, [pc, #628]	; (801eab8 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801e842:	4618      	mov	r0, r3
 801e844:	f7ed fe27 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e848:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e84c:	4619      	mov	r1, r3
 801e84e:	4620      	mov	r0, r4
 801e850:	f7ee f9e5 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e854:	4603      	mov	r3, r0
 801e856:	461c      	mov	r4, r3
 801e858:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e85c:	4618      	mov	r0, r3
 801e85e:	f7ee f9d2 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e862:	2c00      	cmp	r4, #0
 801e864:	d03b      	beq.n	801e8de <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801e866:	683b      	ldr	r3, [r7, #0]
 801e868:	699a      	ldr	r2, [r3, #24]
 801e86a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e86e:	4611      	mov	r1, r2
 801e870:	4618      	mov	r0, r3
 801e872:	f7ee fef7 	bl	800d664 <_Z10StringFromj>
 801e876:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e87a:	498e      	ldr	r1, [pc, #568]	; (801eab4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801e87c:	4618      	mov	r0, r3
 801e87e:	f7ed fe0a 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e882:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e886:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801e88a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801e88e:	4618      	mov	r0, r3
 801e890:	f7ee fa1b 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 801e894:	683b      	ldr	r3, [r7, #0]
 801e896:	699a      	ldr	r2, [r3, #24]
 801e898:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e89c:	4611      	mov	r1, r2
 801e89e:	4618      	mov	r0, r3
 801e8a0:	f7ee fd84 	bl	800d3ac <_Z30BracketsFormattedHexStringFromj>
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801e8aa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801e8ae:	4618      	mov	r0, r3
 801e8b0:	f7ee fa0b 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 801e8b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e8b8:	4618      	mov	r0, r3
 801e8ba:	f7ee f9a4 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e8be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e8c2:	4618      	mov	r0, r3
 801e8c4:	f7ee f99f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e8c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e8cc:	4618      	mov	r0, r3
 801e8ce:	f7ee f99a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e8d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e8d6:	4618      	mov	r0, r3
 801e8d8:	f7ee f995 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e8dc:	e197      	b.n	801ec0e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801e8de:	683b      	ldr	r3, [r7, #0]
 801e8e0:	f103 040c 	add.w	r4, r3, #12
 801e8e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e8e8:	4974      	ldr	r1, [pc, #464]	; (801eabc <_ZNK14MockNamedValue8toStringEv+0x378>)
 801e8ea:	4618      	mov	r0, r3
 801e8ec:	f7ed fdd3 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e8f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e8f4:	4619      	mov	r1, r3
 801e8f6:	4620      	mov	r0, r4
 801e8f8:	f7ee f991 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e8fc:	4603      	mov	r3, r0
 801e8fe:	461c      	mov	r4, r3
 801e900:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e904:	4618      	mov	r0, r3
 801e906:	f7ee f97e 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e90a:	2c00      	cmp	r4, #0
 801e90c:	d03b      	beq.n	801e986 <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801e90e:	683b      	ldr	r3, [r7, #0]
 801e910:	699a      	ldr	r2, [r3, #24]
 801e912:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e916:	4611      	mov	r1, r2
 801e918:	4618      	mov	r0, r3
 801e91a:	f7ee fc4d 	bl	800d1b8 <_Z10StringFroml>
 801e91e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e922:	4964      	ldr	r1, [pc, #400]	; (801eab4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801e924:	4618      	mov	r0, r3
 801e926:	f7ed fdb6 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e92a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e92e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801e932:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801e936:	4618      	mov	r0, r3
 801e938:	f7ee f9c7 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 801e93c:	683b      	ldr	r3, [r7, #0]
 801e93e:	699a      	ldr	r2, [r3, #24]
 801e940:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e944:	4611      	mov	r1, r2
 801e946:	4618      	mov	r0, r3
 801e948:	f7ee fd4c 	bl	800d3e4 <_Z30BracketsFormattedHexStringFroml>
 801e94c:	687b      	ldr	r3, [r7, #4]
 801e94e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801e952:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801e956:	4618      	mov	r0, r3
 801e958:	f7ee f9b7 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 801e95c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e960:	4618      	mov	r0, r3
 801e962:	f7ee f950 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e966:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e96a:	4618      	mov	r0, r3
 801e96c:	f7ee f94b 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e970:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e974:	4618      	mov	r0, r3
 801e976:	f7ee f946 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e97a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e97e:	4618      	mov	r0, r3
 801e980:	f7ee f941 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e984:	e143      	b.n	801ec0e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801e986:	683b      	ldr	r3, [r7, #0]
 801e988:	f103 040c 	add.w	r4, r3, #12
 801e98c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e990:	494b      	ldr	r1, [pc, #300]	; (801eac0 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801e992:	4618      	mov	r0, r3
 801e994:	f7ed fd7f 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e998:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e99c:	4619      	mov	r1, r3
 801e99e:	4620      	mov	r0, r4
 801e9a0:	f7ee f93d 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801e9a4:	4603      	mov	r3, r0
 801e9a6:	461c      	mov	r4, r3
 801e9a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e9ac:	4618      	mov	r0, r3
 801e9ae:	f7ee f92a 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801e9b2:	2c00      	cmp	r4, #0
 801e9b4:	d03b      	beq.n	801ea2e <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801e9b6:	683b      	ldr	r3, [r7, #0]
 801e9b8:	699a      	ldr	r2, [r3, #24]
 801e9ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e9be:	4611      	mov	r1, r2
 801e9c0:	4618      	mov	r0, r3
 801e9c2:	f7ee fe61 	bl	800d688 <_Z10StringFromm>
 801e9c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e9ca:	493a      	ldr	r1, [pc, #232]	; (801eab4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801e9cc:	4618      	mov	r0, r3
 801e9ce:	f7ed fd62 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801e9d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e9d6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801e9da:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801e9de:	4618      	mov	r0, r3
 801e9e0:	f7ee f973 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 801e9e4:	683b      	ldr	r3, [r7, #0]
 801e9e6:	699a      	ldr	r2, [r3, #24]
 801e9e8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e9ec:	4611      	mov	r1, r2
 801e9ee:	4618      	mov	r0, r3
 801e9f0:	f7ee fd14 	bl	800d41c <_Z30BracketsFormattedHexStringFromm>
 801e9f4:	687b      	ldr	r3, [r7, #4]
 801e9f6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801e9fa:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801e9fe:	4618      	mov	r0, r3
 801ea00:	f7ee f963 	bl	800ccca <_ZNK12SimpleStringplERKS_>
 801ea04:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ea08:	4618      	mov	r0, r3
 801ea0a:	f7ee f8fc 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ea0e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801ea12:	4618      	mov	r0, r3
 801ea14:	f7ee f8f7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ea18:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801ea1c:	4618      	mov	r0, r3
 801ea1e:	f7ee f8f2 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ea22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ea26:	4618      	mov	r0, r3
 801ea28:	f7ee f8ed 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ea2c:	e0ef      	b.n	801ec0e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801ea2e:	683b      	ldr	r3, [r7, #0]
 801ea30:	f103 040c 	add.w	r4, r3, #12
 801ea34:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ea38:	4922      	ldr	r1, [pc, #136]	; (801eac4 <_ZNK14MockNamedValue8toStringEv+0x380>)
 801ea3a:	4618      	mov	r0, r3
 801ea3c:	f7ed fd2b 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801ea40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ea44:	4619      	mov	r1, r3
 801ea46:	4620      	mov	r0, r4
 801ea48:	f7ee f8e9 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801ea4c:	4603      	mov	r3, r0
 801ea4e:	461c      	mov	r4, r3
 801ea50:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ea54:	4618      	mov	r0, r3
 801ea56:	f7ee f8d6 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ea5a:	2c00      	cmp	r4, #0
 801ea5c:	d006      	beq.n	801ea6c <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801ea5e:	683b      	ldr	r3, [r7, #0]
 801ea60:	699b      	ldr	r3, [r3, #24]
 801ea62:	4619      	mov	r1, r3
 801ea64:	6878      	ldr	r0, [r7, #4]
 801ea66:	f7ed fd16 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801ea6a:	e0d0      	b.n	801ec0e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801ea6c:	683b      	ldr	r3, [r7, #0]
 801ea6e:	f103 040c 	add.w	r4, r3, #12
 801ea72:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ea76:	4914      	ldr	r1, [pc, #80]	; (801eac8 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801ea78:	4618      	mov	r0, r3
 801ea7a:	f7ed fd0c 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801ea7e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ea82:	4619      	mov	r1, r3
 801ea84:	4620      	mov	r0, r4
 801ea86:	f7ee f8ca 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801ea8a:	4603      	mov	r3, r0
 801ea8c:	461c      	mov	r4, r3
 801ea8e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ea92:	4618      	mov	r0, r3
 801ea94:	f7ee f8b7 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ea98:	2c00      	cmp	r4, #0
 801ea9a:	d017      	beq.n	801eacc <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801ea9c:	683b      	ldr	r3, [r7, #0]
 801ea9e:	699a      	ldr	r2, [r3, #24]
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	4611      	mov	r1, r2
 801eaa4:	4618      	mov	r0, r3
 801eaa6:	f7ee fb99 	bl	800d1dc <_Z10StringFromPKv>
 801eaaa:	e0b0      	b.n	801ec0e <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801eaac:	0802602c 	.word	0x0802602c
 801eab0:	08026028 	.word	0x08026028
 801eab4:	08026118 	.word	0x08026118
 801eab8:	08026034 	.word	0x08026034
 801eabc:	08026044 	.word	0x08026044
 801eac0:	08026050 	.word	0x08026050
 801eac4:	080260f4 	.word	0x080260f4
 801eac8:	080260d4 	.word	0x080260d4
    else if (type_ == "void (*)()")
 801eacc:	683b      	ldr	r3, [r7, #0]
 801eace:	f103 040c 	add.w	r4, r3, #12
 801ead2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801ead6:	4950      	ldr	r1, [pc, #320]	; (801ec18 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801ead8:	4618      	mov	r0, r3
 801eada:	f7ed fcdc 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801eade:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801eae2:	4619      	mov	r1, r3
 801eae4:	4620      	mov	r0, r4
 801eae6:	f7ee f89a 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801eaea:	4603      	mov	r3, r0
 801eaec:	461c      	mov	r4, r3
 801eaee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801eaf2:	4618      	mov	r0, r3
 801eaf4:	f7ee f887 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801eaf8:	2c00      	cmp	r4, #0
 801eafa:	d007      	beq.n	801eb0c <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801eafc:	683b      	ldr	r3, [r7, #0]
 801eafe:	699a      	ldr	r2, [r3, #24]
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	4611      	mov	r1, r2
 801eb04:	4618      	mov	r0, r3
 801eb06:	f7ee fb93 	bl	800d230 <_Z10StringFromPFvvE>
 801eb0a:	e080      	b.n	801ec0e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801eb0c:	683b      	ldr	r3, [r7, #0]
 801eb0e:	f103 040c 	add.w	r4, r3, #12
 801eb12:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801eb16:	4941      	ldr	r1, [pc, #260]	; (801ec1c <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801eb18:	4618      	mov	r0, r3
 801eb1a:	f7ed fcbc 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801eb1e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801eb22:	4619      	mov	r1, r3
 801eb24:	4620      	mov	r0, r4
 801eb26:	f7ee f87a 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801eb2a:	4603      	mov	r3, r0
 801eb2c:	461c      	mov	r4, r3
 801eb2e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801eb32:	4618      	mov	r0, r3
 801eb34:	f7ee f867 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801eb38:	2c00      	cmp	r4, #0
 801eb3a:	d007      	beq.n	801eb4c <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801eb3c:	683b      	ldr	r3, [r7, #0]
 801eb3e:	699a      	ldr	r2, [r3, #24]
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	4611      	mov	r1, r2
 801eb44:	4618      	mov	r0, r3
 801eb46:	f7ee fb49 	bl	800d1dc <_Z10StringFromPKv>
 801eb4a:	e060      	b.n	801ec0e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801eb4c:	683b      	ldr	r3, [r7, #0]
 801eb4e:	f103 040c 	add.w	r4, r3, #12
 801eb52:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801eb56:	4932      	ldr	r1, [pc, #200]	; (801ec20 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801eb58:	4618      	mov	r0, r3
 801eb5a:	f7ed fc9c 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801eb5e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801eb62:	4619      	mov	r1, r3
 801eb64:	4620      	mov	r0, r4
 801eb66:	f7ee f85a 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801eb6a:	4603      	mov	r3, r0
 801eb6c:	461c      	mov	r4, r3
 801eb6e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801eb72:	4618      	mov	r0, r3
 801eb74:	f7ee f847 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801eb78:	2c00      	cmp	r4, #0
 801eb7a:	d00c      	beq.n	801eb96 <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801eb7c:	683b      	ldr	r3, [r7, #0]
 801eb7e:	ed93 7b06 	vldr	d7, [r3, #24]
 801eb82:	687b      	ldr	r3, [r7, #4]
 801eb84:	2106      	movs	r1, #6
 801eb86:	eeb0 0a47 	vmov.f32	s0, s14
 801eb8a:	eef0 0a67 	vmov.f32	s1, s15
 801eb8e:	4618      	mov	r0, r3
 801eb90:	f7ee fcfe 	bl	800d590 <_Z10StringFromdi>
 801eb94:	e03b      	b.n	801ec0e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801eb96:	683b      	ldr	r3, [r7, #0]
 801eb98:	f103 040c 	add.w	r4, r3, #12
 801eb9c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801eba0:	4920      	ldr	r1, [pc, #128]	; (801ec24 <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801eba2:	4618      	mov	r0, r3
 801eba4:	f7ed fc77 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801eba8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ebac:	4619      	mov	r1, r3
 801ebae:	4620      	mov	r0, r4
 801ebb0:	f7ee f835 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801ebb4:	4603      	mov	r3, r0
 801ebb6:	461c      	mov	r4, r3
 801ebb8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ebbc:	4618      	mov	r0, r3
 801ebbe:	f7ee f822 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ebc2:	2c00      	cmp	r4, #0
 801ebc4:	d008      	beq.n	801ebd8 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801ebc6:	683b      	ldr	r3, [r7, #0]
 801ebc8:	6999      	ldr	r1, [r3, #24]
 801ebca:	683b      	ldr	r3, [r7, #0]
 801ebcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ebce:	687b      	ldr	r3, [r7, #4]
 801ebd0:	4618      	mov	r0, r3
 801ebd2:	f7ee fe71 	bl	800d8b8 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801ebd6:	e01a      	b.n	801ec0e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801ebd8:	683b      	ldr	r3, [r7, #0]
 801ebda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ebdc:	2b00      	cmp	r3, #0
 801ebde:	d00b      	beq.n	801ebf8 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801ebe0:	683b      	ldr	r3, [r7, #0]
 801ebe2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801ebe4:	683b      	ldr	r3, [r7, #0]
 801ebe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ebe8:	681b      	ldr	r3, [r3, #0]
 801ebea:	330c      	adds	r3, #12
 801ebec:	681b      	ldr	r3, [r3, #0]
 801ebee:	683a      	ldr	r2, [r7, #0]
 801ebf0:	6992      	ldr	r2, [r2, #24]
 801ebf2:	6878      	ldr	r0, [r7, #4]
 801ebf4:	4798      	blx	r3
 801ebf6:	e00a      	b.n	801ec0e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801ebf8:	683b      	ldr	r3, [r7, #0]
 801ebfa:	330c      	adds	r3, #12
 801ebfc:	4618      	mov	r0, r3
 801ebfe:	f7ed ffd5 	bl	800cbac <_ZNK12SimpleString12asCharStringEv>
 801ec02:	4602      	mov	r2, r0
 801ec04:	687b      	ldr	r3, [r7, #4]
 801ec06:	4908      	ldr	r1, [pc, #32]	; (801ec28 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801ec08:	4618      	mov	r0, r3
 801ec0a:	f7ee fd03 	bl	800d614 <_Z16StringFromFormatPKcz>

}
 801ec0e:	6878      	ldr	r0, [r7, #4]
 801ec10:	37e4      	adds	r7, #228	; 0xe4
 801ec12:	46bd      	mov	sp, r7
 801ec14:	bd90      	pop	{r4, r7, pc}
 801ec16:	bf00      	nop
 801ec18:	080260e8 	.word	0x080260e8
 801ec1c:	080260dc 	.word	0x080260dc
 801ec20:	080260cc 	.word	0x080260cc
 801ec24:	08026100 	.word	0x08026100
 801ec28:	0802611c 	.word	0x0802611c

0801ec2c <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801ec2c:	b480      	push	{r7}
 801ec2e:	b083      	sub	sp, #12
 801ec30:	af00      	add	r7, sp, #0
 801ec32:	6078      	str	r0, [r7, #4]
 801ec34:	6039      	str	r1, [r7, #0]
    next_ = node;
 801ec36:	687b      	ldr	r3, [r7, #4]
 801ec38:	683a      	ldr	r2, [r7, #0]
 801ec3a:	605a      	str	r2, [r3, #4]
}
 801ec3c:	bf00      	nop
 801ec3e:	370c      	adds	r7, #12
 801ec40:	46bd      	mov	sp, r7
 801ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec46:	4770      	bx	lr

0801ec48 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801ec48:	b480      	push	{r7}
 801ec4a:	b083      	sub	sp, #12
 801ec4c:	af00      	add	r7, sp, #0
 801ec4e:	6078      	str	r0, [r7, #4]
    return next_;
 801ec50:	687b      	ldr	r3, [r7, #4]
 801ec52:	685b      	ldr	r3, [r3, #4]
}
 801ec54:	4618      	mov	r0, r3
 801ec56:	370c      	adds	r7, #12
 801ec58:	46bd      	mov	sp, r7
 801ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec5e:	4770      	bx	lr

0801ec60 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801ec60:	b480      	push	{r7}
 801ec62:	b083      	sub	sp, #12
 801ec64:	af00      	add	r7, sp, #0
 801ec66:	6078      	str	r0, [r7, #4]
    return data_;
 801ec68:	687b      	ldr	r3, [r7, #4]
 801ec6a:	681b      	ldr	r3, [r3, #0]
}
 801ec6c:	4618      	mov	r0, r3
 801ec6e:	370c      	adds	r7, #12
 801ec70:	46bd      	mov	sp, r7
 801ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec76:	4770      	bx	lr

0801ec78 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801ec78:	b580      	push	{r7, lr}
 801ec7a:	b082      	sub	sp, #8
 801ec7c:	af00      	add	r7, sp, #0
 801ec7e:	6078      	str	r0, [r7, #4]
    delete data_;
 801ec80:	687b      	ldr	r3, [r7, #4]
 801ec82:	681b      	ldr	r3, [r3, #0]
 801ec84:	2b00      	cmp	r3, #0
 801ec86:	d004      	beq.n	801ec92 <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801ec88:	681a      	ldr	r2, [r3, #0]
 801ec8a:	3204      	adds	r2, #4
 801ec8c:	6812      	ldr	r2, [r2, #0]
 801ec8e:	4618      	mov	r0, r3
 801ec90:	4790      	blx	r2
}
 801ec92:	bf00      	nop
 801ec94:	3708      	adds	r7, #8
 801ec96:	46bd      	mov	sp, r7
 801ec98:	bd80      	pop	{r7, pc}

0801ec9a <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801ec9a:	b480      	push	{r7}
 801ec9c:	b083      	sub	sp, #12
 801ec9e:	af00      	add	r7, sp, #0
 801eca0:	6078      	str	r0, [r7, #4]
 801eca2:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801eca4:	687b      	ldr	r3, [r7, #4]
 801eca6:	683a      	ldr	r2, [r7, #0]
 801eca8:	601a      	str	r2, [r3, #0]
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	2200      	movs	r2, #0
 801ecae:	605a      	str	r2, [r3, #4]
{
}
 801ecb0:	687b      	ldr	r3, [r7, #4]
 801ecb2:	4618      	mov	r0, r3
 801ecb4:	370c      	adds	r7, #12
 801ecb6:	46bd      	mov	sp, r7
 801ecb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecbc:	4770      	bx	lr

0801ecbe <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801ecbe:	b580      	push	{r7, lr}
 801ecc0:	b082      	sub	sp, #8
 801ecc2:	af00      	add	r7, sp, #0
 801ecc4:	6078      	str	r0, [r7, #4]
 801ecc6:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801ecc8:	683b      	ldr	r3, [r7, #0]
 801ecca:	6819      	ldr	r1, [r3, #0]
 801eccc:	683b      	ldr	r3, [r7, #0]
 801ecce:	681b      	ldr	r3, [r3, #0]
 801ecd0:	681b      	ldr	r3, [r3, #0]
 801ecd2:	335c      	adds	r3, #92	; 0x5c
 801ecd4:	681b      	ldr	r3, [r3, #0]
 801ecd6:	687a      	ldr	r2, [r7, #4]
 801ecd8:	4610      	mov	r0, r2
 801ecda:	4798      	blx	r3
}
 801ecdc:	6878      	ldr	r0, [r7, #4]
 801ecde:	3708      	adds	r7, #8
 801ece0:	46bd      	mov	sp, r7
 801ece2:	bd80      	pop	{r7, pc}

0801ece4 <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801ece4:	b580      	push	{r7, lr}
 801ece6:	b082      	sub	sp, #8
 801ece8:	af00      	add	r7, sp, #0
 801ecea:	6078      	str	r0, [r7, #4]
 801ecec:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801ecee:	683b      	ldr	r3, [r7, #0]
 801ecf0:	6819      	ldr	r1, [r3, #0]
 801ecf2:	683b      	ldr	r3, [r7, #0]
 801ecf4:	681b      	ldr	r3, [r3, #0]
 801ecf6:	681b      	ldr	r3, [r3, #0]
 801ecf8:	3360      	adds	r3, #96	; 0x60
 801ecfa:	681b      	ldr	r3, [r3, #0]
 801ecfc:	687a      	ldr	r2, [r7, #4]
 801ecfe:	4610      	mov	r0, r2
 801ed00:	4798      	blx	r3
}
 801ed02:	6878      	ldr	r0, [r7, #4]
 801ed04:	3708      	adds	r7, #8
 801ed06:	46bd      	mov	sp, r7
 801ed08:	bd80      	pop	{r7, pc}

0801ed0a <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801ed0a:	b480      	push	{r7}
 801ed0c:	b083      	sub	sp, #12
 801ed0e:	af00      	add	r7, sp, #0
 801ed10:	6078      	str	r0, [r7, #4]
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	2200      	movs	r2, #0
 801ed16:	601a      	str	r2, [r3, #0]
{
}
 801ed18:	687b      	ldr	r3, [r7, #4]
 801ed1a:	4618      	mov	r0, r3
 801ed1c:	370c      	adds	r7, #12
 801ed1e:	46bd      	mov	sp, r7
 801ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed24:	4770      	bx	lr

0801ed26 <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801ed26:	b580      	push	{r7, lr}
 801ed28:	b084      	sub	sp, #16
 801ed2a:	af00      	add	r7, sp, #0
 801ed2c:	6078      	str	r0, [r7, #4]
    while (head_) {
 801ed2e:	687b      	ldr	r3, [r7, #4]
 801ed30:	681b      	ldr	r3, [r3, #0]
 801ed32:	2b00      	cmp	r3, #0
 801ed34:	d016      	beq.n	801ed64 <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801ed36:	687b      	ldr	r3, [r7, #4]
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	4618      	mov	r0, r3
 801ed3c:	f7ff ff84 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 801ed40:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801ed42:	687b      	ldr	r3, [r7, #4]
 801ed44:	681b      	ldr	r3, [r3, #0]
 801ed46:	4618      	mov	r0, r3
 801ed48:	f7ff ff96 	bl	801ec78 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801ed4c:	687b      	ldr	r3, [r7, #4]
 801ed4e:	681b      	ldr	r3, [r3, #0]
 801ed50:	2b00      	cmp	r3, #0
 801ed52:	d003      	beq.n	801ed5c <_ZN18MockNamedValueList5clearEv+0x36>
 801ed54:	2108      	movs	r1, #8
 801ed56:	4618      	mov	r0, r3
 801ed58:	f7ea ffee 	bl	8009d38 <_ZdlPvj>
        head_ = n;
 801ed5c:	687b      	ldr	r3, [r7, #4]
 801ed5e:	68fa      	ldr	r2, [r7, #12]
 801ed60:	601a      	str	r2, [r3, #0]
    while (head_) {
 801ed62:	e7e4      	b.n	801ed2e <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801ed64:	bf00      	nop
 801ed66:	3710      	adds	r7, #16
 801ed68:	46bd      	mov	sp, r7
 801ed6a:	bd80      	pop	{r7, pc}

0801ed6c <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801ed6c:	b590      	push	{r4, r7, lr}
 801ed6e:	b085      	sub	sp, #20
 801ed70:	af00      	add	r7, sp, #0
 801ed72:	6078      	str	r0, [r7, #4]
 801ed74:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801ed76:	f44f 7210 	mov.w	r2, #576	; 0x240
 801ed7a:	4916      	ldr	r1, [pc, #88]	; (801edd4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801ed7c:	2008      	movs	r0, #8
 801ed7e:	f7ea ffc7 	bl	8009d10 <_ZnwjPKci>
 801ed82:	4604      	mov	r4, r0
 801ed84:	6839      	ldr	r1, [r7, #0]
 801ed86:	4620      	mov	r0, r4
 801ed88:	f7ff ff87 	bl	801ec9a <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801ed8c:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801ed8e:	687b      	ldr	r3, [r7, #4]
 801ed90:	681b      	ldr	r3, [r3, #0]
 801ed92:	2b00      	cmp	r3, #0
 801ed94:	d103      	bne.n	801ed9e <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801ed96:	687b      	ldr	r3, [r7, #4]
 801ed98:	68ba      	ldr	r2, [r7, #8]
 801ed9a:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801ed9c:	e016      	b.n	801edcc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801ed9e:	687b      	ldr	r3, [r7, #4]
 801eda0:	681b      	ldr	r3, [r3, #0]
 801eda2:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801eda4:	68f8      	ldr	r0, [r7, #12]
 801eda6:	f7ff ff4f 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 801edaa:	4603      	mov	r3, r0
 801edac:	2b00      	cmp	r3, #0
 801edae:	bf14      	ite	ne
 801edb0:	2301      	movne	r3, #1
 801edb2:	2300      	moveq	r3, #0
 801edb4:	b2db      	uxtb	r3, r3
 801edb6:	2b00      	cmp	r3, #0
 801edb8:	d004      	beq.n	801edc4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801edba:	68f8      	ldr	r0, [r7, #12]
 801edbc:	f7ff ff44 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 801edc0:	60f8      	str	r0, [r7, #12]
 801edc2:	e7ef      	b.n	801eda4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801edc4:	68b9      	ldr	r1, [r7, #8]
 801edc6:	68f8      	ldr	r0, [r7, #12]
 801edc8:	f7ff ff30 	bl	801ec2c <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801edcc:	bf00      	nop
 801edce:	3714      	adds	r7, #20
 801edd0:	46bd      	mov	sp, r7
 801edd2:	bd90      	pop	{r4, r7, pc}
 801edd4:	08026064 	.word	0x08026064

0801edd8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801edd8:	b590      	push	{r4, r7, lr}
 801edda:	b087      	sub	sp, #28
 801eddc:	af00      	add	r7, sp, #0
 801edde:	6078      	str	r0, [r7, #4]
 801ede0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801ede2:	687b      	ldr	r3, [r7, #4]
 801ede4:	681b      	ldr	r3, [r3, #0]
 801ede6:	617b      	str	r3, [r7, #20]
 801ede8:	697b      	ldr	r3, [r7, #20]
 801edea:	2b00      	cmp	r3, #0
 801edec:	d01e      	beq.n	801ee2c <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801edee:	f107 030c 	add.w	r3, r7, #12
 801edf2:	6979      	ldr	r1, [r7, #20]
 801edf4:	4618      	mov	r0, r3
 801edf6:	f7ff ff62 	bl	801ecbe <_ZNK22MockNamedValueListNode7getNameEv>
 801edfa:	f107 030c 	add.w	r3, r7, #12
 801edfe:	6839      	ldr	r1, [r7, #0]
 801ee00:	4618      	mov	r0, r3
 801ee02:	f7ed ff0c 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801ee06:	4603      	mov	r3, r0
 801ee08:	461c      	mov	r4, r3
 801ee0a:	f107 030c 	add.w	r3, r7, #12
 801ee0e:	4618      	mov	r0, r3
 801ee10:	f7ed fef9 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ee14:	2c00      	cmp	r4, #0
 801ee16:	d004      	beq.n	801ee22 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801ee18:	6978      	ldr	r0, [r7, #20]
 801ee1a:	f7ff ff21 	bl	801ec60 <_ZN22MockNamedValueListNode4itemEv>
 801ee1e:	4603      	mov	r3, r0
 801ee20:	e005      	b.n	801ee2e <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801ee22:	6978      	ldr	r0, [r7, #20]
 801ee24:	f7ff ff10 	bl	801ec48 <_ZN22MockNamedValueListNode4nextEv>
 801ee28:	6178      	str	r0, [r7, #20]
 801ee2a:	e7dd      	b.n	801ede8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801ee2c:	2300      	movs	r3, #0
}
 801ee2e:	4618      	mov	r0, r3
 801ee30:	371c      	adds	r7, #28
 801ee32:	46bd      	mov	sp, r7
 801ee34:	bd90      	pop	{r4, r7, pc}

0801ee36 <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801ee36:	b480      	push	{r7}
 801ee38:	b083      	sub	sp, #12
 801ee3a:	af00      	add	r7, sp, #0
 801ee3c:	6078      	str	r0, [r7, #4]
    return head_;
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	681b      	ldr	r3, [r3, #0]
}
 801ee42:	4618      	mov	r0, r3
 801ee44:	370c      	adds	r7, #12
 801ee46:	46bd      	mov	sp, r7
 801ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee4c:	4770      	bx	lr

0801ee4e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801ee4e:	b580      	push	{r7, lr}
 801ee50:	b084      	sub	sp, #16
 801ee52:	af00      	add	r7, sp, #0
 801ee54:	60f8      	str	r0, [r7, #12]
 801ee56:	60b9      	str	r1, [r7, #8]
 801ee58:	607a      	str	r2, [r7, #4]
 801ee5a:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801ee5c:	68fb      	ldr	r3, [r7, #12]
 801ee5e:	68b9      	ldr	r1, [r7, #8]
 801ee60:	4618      	mov	r0, r3
 801ee62:	f7ed fb6c 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 801ee66:	68fb      	ldr	r3, [r7, #12]
 801ee68:	687a      	ldr	r2, [r7, #4]
 801ee6a:	609a      	str	r2, [r3, #8]
 801ee6c:	68fb      	ldr	r3, [r7, #12]
 801ee6e:	2200      	movs	r2, #0
 801ee70:	60da      	str	r2, [r3, #12]
 801ee72:	68fb      	ldr	r3, [r7, #12]
 801ee74:	683a      	ldr	r2, [r7, #0]
 801ee76:	611a      	str	r2, [r3, #16]
 801ee78:	68fb      	ldr	r3, [r7, #12]
 801ee7a:	4618      	mov	r0, r3
 801ee7c:	3710      	adds	r7, #16
 801ee7e:	46bd      	mov	sp, r7
 801ee80:	bd80      	pop	{r7, pc}

0801ee82 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801ee82:	b580      	push	{r7, lr}
 801ee84:	b084      	sub	sp, #16
 801ee86:	af00      	add	r7, sp, #0
 801ee88:	60f8      	str	r0, [r7, #12]
 801ee8a:	60b9      	str	r1, [r7, #8]
 801ee8c:	607a      	str	r2, [r7, #4]
 801ee8e:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801ee90:	68fb      	ldr	r3, [r7, #12]
 801ee92:	68b9      	ldr	r1, [r7, #8]
 801ee94:	4618      	mov	r0, r3
 801ee96:	f7ed fb52 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 801ee9a:	68fb      	ldr	r3, [r7, #12]
 801ee9c:	2200      	movs	r2, #0
 801ee9e:	609a      	str	r2, [r3, #8]
 801eea0:	68fb      	ldr	r3, [r7, #12]
 801eea2:	687a      	ldr	r2, [r7, #4]
 801eea4:	60da      	str	r2, [r3, #12]
 801eea6:	68fb      	ldr	r3, [r7, #12]
 801eea8:	683a      	ldr	r2, [r7, #0]
 801eeaa:	611a      	str	r2, [r3, #16]
 801eeac:	68fb      	ldr	r3, [r7, #12]
 801eeae:	4618      	mov	r0, r3
 801eeb0:	3710      	adds	r7, #16
 801eeb2:	46bd      	mov	sp, r7
 801eeb4:	bd80      	pop	{r7, pc}

0801eeb6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801eeb6:	b580      	push	{r7, lr}
 801eeb8:	b084      	sub	sp, #16
 801eeba:	af00      	add	r7, sp, #0
 801eebc:	60f8      	str	r0, [r7, #12]
 801eebe:	60b9      	str	r1, [r7, #8]
 801eec0:	607a      	str	r2, [r7, #4]
 801eec2:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801eec4:	68fb      	ldr	r3, [r7, #12]
 801eec6:	68b9      	ldr	r1, [r7, #8]
 801eec8:	4618      	mov	r0, r3
 801eeca:	f7ed fb38 	bl	800c53e <_ZN12SimpleStringC1ERKS_>
 801eece:	68fb      	ldr	r3, [r7, #12]
 801eed0:	687a      	ldr	r2, [r7, #4]
 801eed2:	609a      	str	r2, [r3, #8]
 801eed4:	68fb      	ldr	r3, [r7, #12]
 801eed6:	683a      	ldr	r2, [r7, #0]
 801eed8:	60da      	str	r2, [r3, #12]
 801eeda:	68fb      	ldr	r3, [r7, #12]
 801eedc:	69ba      	ldr	r2, [r7, #24]
 801eede:	611a      	str	r2, [r3, #16]
 801eee0:	68fb      	ldr	r3, [r7, #12]
 801eee2:	4618      	mov	r0, r3
 801eee4:	3710      	adds	r7, #16
 801eee6:	46bd      	mov	sp, r7
 801eee8:	bd80      	pop	{r7, pc}
	...

0801eeec <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801eeec:	b480      	push	{r7}
 801eeee:	b083      	sub	sp, #12
 801eef0:	af00      	add	r7, sp, #0
 801eef2:	6078      	str	r0, [r7, #4]
 801eef4:	4a06      	ldr	r2, [pc, #24]	; (801ef10 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	601a      	str	r2, [r3, #0]
 801eefa:	687b      	ldr	r3, [r7, #4]
 801eefc:	2200      	movs	r2, #0
 801eefe:	605a      	str	r2, [r3, #4]
{

}
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	4618      	mov	r0, r3
 801ef04:	370c      	adds	r7, #12
 801ef06:	46bd      	mov	sp, r7
 801ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef0c:	4770      	bx	lr
 801ef0e:	bf00      	nop
 801ef10:	08028c78 	.word	0x08028c78

0801ef14 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801ef14:	b580      	push	{r7, lr}
 801ef16:	b082      	sub	sp, #8
 801ef18:	af00      	add	r7, sp, #0
 801ef1a:	6078      	str	r0, [r7, #4]
 801ef1c:	4a05      	ldr	r2, [pc, #20]	; (801ef34 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	601a      	str	r2, [r3, #0]
{
    clear();
 801ef22:	6878      	ldr	r0, [r7, #4]
 801ef24:	f000 f825 	bl	801ef72 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801ef28:	687b      	ldr	r3, [r7, #4]
 801ef2a:	4618      	mov	r0, r3
 801ef2c:	3708      	adds	r7, #8
 801ef2e:	46bd      	mov	sp, r7
 801ef30:	bd80      	pop	{r7, pc}
 801ef32:	bf00      	nop
 801ef34:	08028c78 	.word	0x08028c78

0801ef38 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801ef38:	b580      	push	{r7, lr}
 801ef3a:	b082      	sub	sp, #8
 801ef3c:	af00      	add	r7, sp, #0
 801ef3e:	6078      	str	r0, [r7, #4]
}
 801ef40:	6878      	ldr	r0, [r7, #4]
 801ef42:	f7ff ffe7 	bl	801ef14 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801ef46:	2108      	movs	r1, #8
 801ef48:	6878      	ldr	r0, [r7, #4]
 801ef4a:	f7ea fef5 	bl	8009d38 <_ZdlPvj>
 801ef4e:	687b      	ldr	r3, [r7, #4]
 801ef50:	4618      	mov	r0, r3
 801ef52:	3708      	adds	r7, #8
 801ef54:	46bd      	mov	sp, r7
 801ef56:	bd80      	pop	{r7, pc}

0801ef58 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801ef58:	b580      	push	{r7, lr}
 801ef5a:	b082      	sub	sp, #8
 801ef5c:	af00      	add	r7, sp, #0
 801ef5e:	6078      	str	r0, [r7, #4]
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	4618      	mov	r0, r3
 801ef64:	f7ed fe4f 	bl	800cc06 <_ZN12SimpleStringD1Ev>
 801ef68:	687b      	ldr	r3, [r7, #4]
 801ef6a:	4618      	mov	r0, r3
 801ef6c:	3708      	adds	r7, #8
 801ef6e:	46bd      	mov	sp, r7
 801ef70:	bd80      	pop	{r7, pc}

0801ef72 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801ef72:	b590      	push	{r4, r7, lr}
 801ef74:	b085      	sub	sp, #20
 801ef76:	af00      	add	r7, sp, #0
 801ef78:	6078      	str	r0, [r7, #4]
    while (head_) {
 801ef7a:	687b      	ldr	r3, [r7, #4]
 801ef7c:	685b      	ldr	r3, [r3, #4]
 801ef7e:	2b00      	cmp	r3, #0
 801ef80:	d012      	beq.n	801efa8 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801ef82:	687b      	ldr	r3, [r7, #4]
 801ef84:	685b      	ldr	r3, [r3, #4]
 801ef86:	691b      	ldr	r3, [r3, #16]
 801ef88:	60fb      	str	r3, [r7, #12]
        delete head_;
 801ef8a:	687b      	ldr	r3, [r7, #4]
 801ef8c:	685c      	ldr	r4, [r3, #4]
 801ef8e:	2c00      	cmp	r4, #0
 801ef90:	d006      	beq.n	801efa0 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801ef92:	4620      	mov	r0, r4
 801ef94:	f7ff ffe0 	bl	801ef58 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801ef98:	2114      	movs	r1, #20
 801ef9a:	4620      	mov	r0, r4
 801ef9c:	f7ea fecc 	bl	8009d38 <_ZdlPvj>
        head_ = next;
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	68fa      	ldr	r2, [r7, #12]
 801efa4:	605a      	str	r2, [r3, #4]
    while (head_) {
 801efa6:	e7e8      	b.n	801ef7a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801efa8:	bf00      	nop
 801efaa:	3714      	adds	r7, #20
 801efac:	46bd      	mov	sp, r7
 801efae:	bd90      	pop	{r4, r7, pc}

0801efb0 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801efb0:	b590      	push	{r4, r7, lr}
 801efb2:	b085      	sub	sp, #20
 801efb4:	af00      	add	r7, sp, #0
 801efb6:	60f8      	str	r0, [r7, #12]
 801efb8:	60b9      	str	r1, [r7, #8]
 801efba:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801efbc:	f240 227a 	movw	r2, #634	; 0x27a
 801efc0:	4908      	ldr	r1, [pc, #32]	; (801efe4 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801efc2:	2014      	movs	r0, #20
 801efc4:	f7ea fea4 	bl	8009d10 <_ZnwjPKci>
 801efc8:	4604      	mov	r4, r0
 801efca:	68fb      	ldr	r3, [r7, #12]
 801efcc:	685b      	ldr	r3, [r3, #4]
 801efce:	687a      	ldr	r2, [r7, #4]
 801efd0:	68b9      	ldr	r1, [r7, #8]
 801efd2:	4620      	mov	r0, r4
 801efd4:	f7ff ff3b 	bl	801ee4e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801efd8:	68fb      	ldr	r3, [r7, #12]
 801efda:	605c      	str	r4, [r3, #4]
}
 801efdc:	bf00      	nop
 801efde:	3714      	adds	r7, #20
 801efe0:	46bd      	mov	sp, r7
 801efe2:	bd90      	pop	{r4, r7, pc}
 801efe4:	08026064 	.word	0x08026064

0801efe8 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801efe8:	b590      	push	{r4, r7, lr}
 801efea:	b085      	sub	sp, #20
 801efec:	af00      	add	r7, sp, #0
 801efee:	60f8      	str	r0, [r7, #12]
 801eff0:	60b9      	str	r1, [r7, #8]
 801eff2:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801eff4:	f240 227f 	movw	r2, #639	; 0x27f
 801eff8:	4908      	ldr	r1, [pc, #32]	; (801f01c <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801effa:	2014      	movs	r0, #20
 801effc:	f7ea fe88 	bl	8009d10 <_ZnwjPKci>
 801f000:	4604      	mov	r4, r0
 801f002:	68fb      	ldr	r3, [r7, #12]
 801f004:	685b      	ldr	r3, [r3, #4]
 801f006:	687a      	ldr	r2, [r7, #4]
 801f008:	68b9      	ldr	r1, [r7, #8]
 801f00a:	4620      	mov	r0, r4
 801f00c:	f7ff ff39 	bl	801ee82 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801f010:	68fb      	ldr	r3, [r7, #12]
 801f012:	605c      	str	r4, [r3, #4]
}
 801f014:	bf00      	nop
 801f016:	3714      	adds	r7, #20
 801f018:	46bd      	mov	sp, r7
 801f01a:	bd90      	pop	{r4, r7, pc}
 801f01c:	08026064 	.word	0x08026064

0801f020 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801f020:	b580      	push	{r7, lr}
 801f022:	b084      	sub	sp, #16
 801f024:	af00      	add	r7, sp, #0
 801f026:	6078      	str	r0, [r7, #4]
 801f028:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	685b      	ldr	r3, [r3, #4]
 801f02e:	60fb      	str	r3, [r7, #12]
 801f030:	68fb      	ldr	r3, [r7, #12]
 801f032:	2b00      	cmp	r3, #0
 801f034:	d017      	beq.n	801f066 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801f036:	68fb      	ldr	r3, [r7, #12]
 801f038:	6839      	ldr	r1, [r7, #0]
 801f03a:	4618      	mov	r0, r3
 801f03c:	f7ed fdef 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801f040:	4603      	mov	r3, r0
 801f042:	2b00      	cmp	r3, #0
 801f044:	d005      	beq.n	801f052 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801f046:	68fb      	ldr	r3, [r7, #12]
 801f048:	689b      	ldr	r3, [r3, #8]
 801f04a:	2b00      	cmp	r3, #0
 801f04c:	d001      	beq.n	801f052 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801f04e:	2301      	movs	r3, #1
 801f050:	e000      	b.n	801f054 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801f052:	2300      	movs	r3, #0
 801f054:	2b00      	cmp	r3, #0
 801f056:	d002      	beq.n	801f05e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801f058:	68fb      	ldr	r3, [r7, #12]
 801f05a:	689b      	ldr	r3, [r3, #8]
 801f05c:	e004      	b.n	801f068 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f05e:	68fb      	ldr	r3, [r7, #12]
 801f060:	691b      	ldr	r3, [r3, #16]
 801f062:	60fb      	str	r3, [r7, #12]
 801f064:	e7e4      	b.n	801f030 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801f066:	2300      	movs	r3, #0
}
 801f068:	4618      	mov	r0, r3
 801f06a:	3710      	adds	r7, #16
 801f06c:	46bd      	mov	sp, r7
 801f06e:	bd80      	pop	{r7, pc}

0801f070 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801f070:	b580      	push	{r7, lr}
 801f072:	b084      	sub	sp, #16
 801f074:	af00      	add	r7, sp, #0
 801f076:	6078      	str	r0, [r7, #4]
 801f078:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f07a:	687b      	ldr	r3, [r7, #4]
 801f07c:	685b      	ldr	r3, [r3, #4]
 801f07e:	60fb      	str	r3, [r7, #12]
 801f080:	68fb      	ldr	r3, [r7, #12]
 801f082:	2b00      	cmp	r3, #0
 801f084:	d017      	beq.n	801f0b6 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801f086:	68fb      	ldr	r3, [r7, #12]
 801f088:	6839      	ldr	r1, [r7, #0]
 801f08a:	4618      	mov	r0, r3
 801f08c:	f7ed fdc7 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801f090:	4603      	mov	r3, r0
 801f092:	2b00      	cmp	r3, #0
 801f094:	d005      	beq.n	801f0a2 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801f096:	68fb      	ldr	r3, [r7, #12]
 801f098:	68db      	ldr	r3, [r3, #12]
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d001      	beq.n	801f0a2 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801f09e:	2301      	movs	r3, #1
 801f0a0:	e000      	b.n	801f0a4 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801f0a2:	2300      	movs	r3, #0
 801f0a4:	2b00      	cmp	r3, #0
 801f0a6:	d002      	beq.n	801f0ae <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801f0a8:	68fb      	ldr	r3, [r7, #12]
 801f0aa:	68db      	ldr	r3, [r3, #12]
 801f0ac:	e004      	b.n	801f0b8 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f0ae:	68fb      	ldr	r3, [r7, #12]
 801f0b0:	691b      	ldr	r3, [r3, #16]
 801f0b2:	60fb      	str	r3, [r7, #12]
 801f0b4:	e7e4      	b.n	801f080 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801f0b6:	2300      	movs	r3, #0
}
 801f0b8:	4618      	mov	r0, r3
 801f0ba:	3710      	adds	r7, #16
 801f0bc:	46bd      	mov	sp, r7
 801f0be:	bd80      	pop	{r7, pc}

0801f0c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801f0c0:	b590      	push	{r4, r7, lr}
 801f0c2:	b087      	sub	sp, #28
 801f0c4:	af02      	add	r7, sp, #8
 801f0c6:	6078      	str	r0, [r7, #4]
 801f0c8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801f0ca:	683b      	ldr	r3, [r7, #0]
 801f0cc:	685b      	ldr	r3, [r3, #4]
 801f0ce:	60fb      	str	r3, [r7, #12]
 801f0d0:	68fb      	ldr	r3, [r7, #12]
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	d018      	beq.n	801f108 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801f0d6:	f240 2293 	movw	r2, #659	; 0x293
 801f0da:	490d      	ldr	r1, [pc, #52]	; (801f110 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801f0dc:	2014      	movs	r0, #20
 801f0de:	f7ea fe17 	bl	8009d10 <_ZnwjPKci>
 801f0e2:	4604      	mov	r4, r0
 801f0e4:	68f9      	ldr	r1, [r7, #12]
 801f0e6:	68fb      	ldr	r3, [r7, #12]
 801f0e8:	689a      	ldr	r2, [r3, #8]
 801f0ea:	68fb      	ldr	r3, [r7, #12]
 801f0ec:	68d8      	ldr	r0, [r3, #12]
 801f0ee:	687b      	ldr	r3, [r7, #4]
 801f0f0:	685b      	ldr	r3, [r3, #4]
 801f0f2:	9300      	str	r3, [sp, #0]
 801f0f4:	4603      	mov	r3, r0
 801f0f6:	4620      	mov	r0, r4
 801f0f8:	f7ff fedd 	bl	801eeb6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801f0fc:	687b      	ldr	r3, [r7, #4]
 801f0fe:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801f100:	68fb      	ldr	r3, [r7, #12]
 801f102:	691b      	ldr	r3, [r3, #16]
 801f104:	60fb      	str	r3, [r7, #12]
 801f106:	e7e3      	b.n	801f0d0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801f108:	bf00      	nop
 801f10a:	3714      	adds	r7, #20
 801f10c:	46bd      	mov	sp, r7
 801f10e:	bd90      	pop	{r4, r7, pc}
 801f110:	08026064 	.word	0x08026064

0801f114 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801f114:	b580      	push	{r7, lr}
 801f116:	b082      	sub	sp, #8
 801f118:	af00      	add	r7, sp, #0
 801f11a:	6078      	str	r0, [r7, #4]
 801f11c:	6039      	str	r1, [r7, #0]
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	490b      	ldr	r1, [pc, #44]	; (801f150 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801f122:	4618      	mov	r0, r3
 801f124:	f7ed f9b7 	bl	800c496 <_ZN12SimpleStringC1EPKc>
 801f128:	687b      	ldr	r3, [r7, #4]
 801f12a:	2200      	movs	r2, #0
 801f12c:	721a      	strb	r2, [r3, #8]
 801f12e:	687b      	ldr	r3, [r7, #4]
 801f130:	2200      	movs	r2, #0
 801f132:	725a      	strb	r2, [r3, #9]
 801f134:	687b      	ldr	r3, [r7, #4]
 801f136:	2200      	movs	r2, #0
 801f138:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801f13a:	687b      	ldr	r3, [r7, #4]
 801f13c:	6839      	ldr	r1, [r7, #0]
 801f13e:	4618      	mov	r0, r3
 801f140:	f7ed fa15 	bl	800c56e <_ZN12SimpleStringaSERKS_>
}
 801f144:	687b      	ldr	r3, [r7, #4]
 801f146:	4618      	mov	r0, r3
 801f148:	3708      	adds	r7, #8
 801f14a:	46bd      	mov	sp, r7
 801f14c:	bd80      	pop	{r7, pc}
 801f14e:	bf00      	nop
 801f150:	08026140 	.word	0x08026140

0801f154 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801f154:	b480      	push	{r7}
 801f156:	b083      	sub	sp, #12
 801f158:	af00      	add	r7, sp, #0
 801f15a:	6078      	str	r0, [r7, #4]
 801f15c:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801f15e:	687b      	ldr	r3, [r7, #4]
 801f160:	683a      	ldr	r2, [r7, #0]
 801f162:	60da      	str	r2, [r3, #12]
    return this;
 801f164:	687b      	ldr	r3, [r7, #4]
}
 801f166:	4618      	mov	r0, r3
 801f168:	370c      	adds	r7, #12
 801f16a:	46bd      	mov	sp, r7
 801f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f170:	4770      	bx	lr

0801f172 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801f172:	b480      	push	{r7}
 801f174:	b083      	sub	sp, #12
 801f176:	af00      	add	r7, sp, #0
 801f178:	6078      	str	r0, [r7, #4]
    return next_;
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	68db      	ldr	r3, [r3, #12]
}
 801f17e:	4618      	mov	r0, r3
 801f180:	370c      	adds	r7, #12
 801f182:	46bd      	mov	sp, r7
 801f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f188:	4770      	bx	lr

0801f18a <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801f18a:	b480      	push	{r7}
 801f18c:	b083      	sub	sp, #12
 801f18e:	af00      	add	r7, sp, #0
 801f190:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801f192:	687b      	ldr	r3, [r7, #4]
 801f194:	2201      	movs	r2, #1
 801f196:	721a      	strb	r2, [r3, #8]
}
 801f198:	bf00      	nop
 801f19a:	370c      	adds	r7, #12
 801f19c:	46bd      	mov	sp, r7
 801f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1a2:	4770      	bx	lr

0801f1a4 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801f1a4:	b480      	push	{r7}
 801f1a6:	b083      	sub	sp, #12
 801f1a8:	af00      	add	r7, sp, #0
 801f1aa:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	2201      	movs	r2, #1
 801f1b0:	725a      	strb	r2, [r3, #9]
}
 801f1b2:	bf00      	nop
 801f1b4:	370c      	adds	r7, #12
 801f1b6:	46bd      	mov	sp, r7
 801f1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1bc:	4770      	bx	lr

0801f1be <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801f1be:	b580      	push	{r7, lr}
 801f1c0:	b084      	sub	sp, #16
 801f1c2:	af00      	add	r7, sp, #0
 801f1c4:	6078      	str	r0, [r7, #4]
 801f1c6:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801f1c8:	2300      	movs	r3, #0
 801f1ca:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	7a1b      	ldrb	r3, [r3, #8]
 801f1d0:	2b00      	cmp	r3, #0
 801f1d2:	d007      	beq.n	801f1e4 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	4619      	mov	r1, r3
 801f1d8:	6838      	ldr	r0, [r7, #0]
 801f1da:	f7ed fd20 	bl	800cc1e <_ZeqRK12SimpleStringS1_>
 801f1de:	4603      	mov	r3, r0
 801f1e0:	73fb      	strb	r3, [r7, #15]
 801f1e2:	e006      	b.n	801f1f2 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801f1e4:	687b      	ldr	r3, [r7, #4]
 801f1e6:	4619      	mov	r1, r3
 801f1e8:	6838      	ldr	r0, [r7, #0]
 801f1ea:	f7ed f9d2 	bl	800c592 <_ZNK12SimpleString8containsERKS_>
 801f1ee:	4603      	mov	r3, r0
 801f1f0:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801f1f2:	687b      	ldr	r3, [r7, #4]
 801f1f4:	7a5b      	ldrb	r3, [r3, #9]
 801f1f6:	2b00      	cmp	r3, #0
 801f1f8:	d004      	beq.n	801f204 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801f1fa:	7bfb      	ldrb	r3, [r7, #15]
 801f1fc:	f083 0301 	eor.w	r3, r3, #1
 801f200:	b2db      	uxtb	r3, r3
 801f202:	e005      	b.n	801f210 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801f204:	7bfb      	ldrb	r3, [r7, #15]
 801f206:	2b00      	cmp	r3, #0
 801f208:	bf14      	ite	ne
 801f20a:	2301      	movne	r3, #1
 801f20c:	2300      	moveq	r3, #0
 801f20e:	b2db      	uxtb	r3, r3
}
 801f210:	4618      	mov	r0, r3
 801f212:	3710      	adds	r7, #16
 801f214:	46bd      	mov	sp, r7
 801f216:	bd80      	pop	{r7, pc}

0801f218 <__cxa_guard_acquire>:
 801f218:	6803      	ldr	r3, [r0, #0]
 801f21a:	07db      	lsls	r3, r3, #31
 801f21c:	d406      	bmi.n	801f22c <__cxa_guard_acquire+0x14>
 801f21e:	7843      	ldrb	r3, [r0, #1]
 801f220:	b103      	cbz	r3, 801f224 <__cxa_guard_acquire+0xc>
 801f222:	deff      	udf	#255	; 0xff
 801f224:	2301      	movs	r3, #1
 801f226:	7043      	strb	r3, [r0, #1]
 801f228:	4618      	mov	r0, r3
 801f22a:	4770      	bx	lr
 801f22c:	2000      	movs	r0, #0
 801f22e:	4770      	bx	lr

0801f230 <__cxa_guard_release>:
 801f230:	2301      	movs	r3, #1
 801f232:	6003      	str	r3, [r0, #0]
 801f234:	4770      	bx	lr

0801f236 <__cxa_pure_virtual>:
 801f236:	b508      	push	{r3, lr}
 801f238:	f000 f80c 	bl	801f254 <_ZSt9terminatev>

0801f23c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801f23c:	b508      	push	{r3, lr}
 801f23e:	4780      	blx	r0
 801f240:	f000 f816 	bl	801f270 <abort>

0801f244 <_ZSt13get_terminatev>:
 801f244:	4b02      	ldr	r3, [pc, #8]	; (801f250 <_ZSt13get_terminatev+0xc>)
 801f246:	6818      	ldr	r0, [r3, #0]
 801f248:	f3bf 8f5b 	dmb	ish
 801f24c:	4770      	bx	lr
 801f24e:	bf00      	nop
 801f250:	20000104 	.word	0x20000104

0801f254 <_ZSt9terminatev>:
 801f254:	b508      	push	{r3, lr}
 801f256:	f7ff fff5 	bl	801f244 <_ZSt13get_terminatev>
 801f25a:	f7ff ffef 	bl	801f23c <_ZN10__cxxabiv111__terminateEPFvvE>

0801f25e <fabs>:
 801f25e:	ec51 0b10 	vmov	r0, r1, d0
 801f262:	ee10 2a10 	vmov	r2, s0
 801f266:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f26a:	ec43 2b10 	vmov	d0, r2, r3
 801f26e:	4770      	bx	lr

0801f270 <abort>:
 801f270:	b508      	push	{r3, lr}
 801f272:	2006      	movs	r0, #6
 801f274:	f000 ff8c 	bl	8020190 <raise>
 801f278:	2001      	movs	r0, #1
 801f27a:	f7e1 fd78 	bl	8000d6e <_exit>

0801f27e <atexit>:
 801f27e:	2300      	movs	r3, #0
 801f280:	4601      	mov	r1, r0
 801f282:	461a      	mov	r2, r3
 801f284:	4618      	mov	r0, r3
 801f286:	f002 b9d3 	b.w	8021630 <__register_exitproc>

0801f28a <atoi>:
 801f28a:	220a      	movs	r2, #10
 801f28c:	2100      	movs	r1, #0
 801f28e:	f001 bdfb 	b.w	8020e88 <strtol>
	...

0801f294 <calloc>:
 801f294:	4b02      	ldr	r3, [pc, #8]	; (801f2a0 <calloc+0xc>)
 801f296:	460a      	mov	r2, r1
 801f298:	4601      	mov	r1, r0
 801f29a:	6818      	ldr	r0, [r3, #0]
 801f29c:	f000 bde8 	b.w	801fe70 <_calloc_r>
 801f2a0:	20000108 	.word	0x20000108

0801f2a4 <__errno>:
 801f2a4:	4b01      	ldr	r3, [pc, #4]	; (801f2ac <__errno+0x8>)
 801f2a6:	6818      	ldr	r0, [r3, #0]
 801f2a8:	4770      	bx	lr
 801f2aa:	bf00      	nop
 801f2ac:	20000108 	.word	0x20000108

0801f2b0 <_fclose_r>:
 801f2b0:	b570      	push	{r4, r5, r6, lr}
 801f2b2:	4605      	mov	r5, r0
 801f2b4:	460c      	mov	r4, r1
 801f2b6:	b911      	cbnz	r1, 801f2be <_fclose_r+0xe>
 801f2b8:	2600      	movs	r6, #0
 801f2ba:	4630      	mov	r0, r6
 801f2bc:	bd70      	pop	{r4, r5, r6, pc}
 801f2be:	b118      	cbz	r0, 801f2c8 <_fclose_r+0x18>
 801f2c0:	6983      	ldr	r3, [r0, #24]
 801f2c2:	b90b      	cbnz	r3, 801f2c8 <_fclose_r+0x18>
 801f2c4:	f000 f994 	bl	801f5f0 <__sinit>
 801f2c8:	4b2c      	ldr	r3, [pc, #176]	; (801f37c <_fclose_r+0xcc>)
 801f2ca:	429c      	cmp	r4, r3
 801f2cc:	d114      	bne.n	801f2f8 <_fclose_r+0x48>
 801f2ce:	686c      	ldr	r4, [r5, #4]
 801f2d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f2d2:	07d8      	lsls	r0, r3, #31
 801f2d4:	d405      	bmi.n	801f2e2 <_fclose_r+0x32>
 801f2d6:	89a3      	ldrh	r3, [r4, #12]
 801f2d8:	0599      	lsls	r1, r3, #22
 801f2da:	d402      	bmi.n	801f2e2 <_fclose_r+0x32>
 801f2dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f2de:	f000 fd3a 	bl	801fd56 <__retarget_lock_acquire_recursive>
 801f2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f2e6:	b98b      	cbnz	r3, 801f30c <_fclose_r+0x5c>
 801f2e8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801f2ea:	f016 0601 	ands.w	r6, r6, #1
 801f2ee:	d1e3      	bne.n	801f2b8 <_fclose_r+0x8>
 801f2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f2f2:	f000 fd32 	bl	801fd5a <__retarget_lock_release_recursive>
 801f2f6:	e7e0      	b.n	801f2ba <_fclose_r+0xa>
 801f2f8:	4b21      	ldr	r3, [pc, #132]	; (801f380 <_fclose_r+0xd0>)
 801f2fa:	429c      	cmp	r4, r3
 801f2fc:	d101      	bne.n	801f302 <_fclose_r+0x52>
 801f2fe:	68ac      	ldr	r4, [r5, #8]
 801f300:	e7e6      	b.n	801f2d0 <_fclose_r+0x20>
 801f302:	4b20      	ldr	r3, [pc, #128]	; (801f384 <_fclose_r+0xd4>)
 801f304:	429c      	cmp	r4, r3
 801f306:	bf08      	it	eq
 801f308:	68ec      	ldreq	r4, [r5, #12]
 801f30a:	e7e1      	b.n	801f2d0 <_fclose_r+0x20>
 801f30c:	4621      	mov	r1, r4
 801f30e:	4628      	mov	r0, r5
 801f310:	f000 f842 	bl	801f398 <__sflush_r>
 801f314:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f316:	4606      	mov	r6, r0
 801f318:	b133      	cbz	r3, 801f328 <_fclose_r+0x78>
 801f31a:	6a21      	ldr	r1, [r4, #32]
 801f31c:	4628      	mov	r0, r5
 801f31e:	4798      	blx	r3
 801f320:	2800      	cmp	r0, #0
 801f322:	bfb8      	it	lt
 801f324:	f04f 36ff 	movlt.w	r6, #4294967295
 801f328:	89a3      	ldrh	r3, [r4, #12]
 801f32a:	061a      	lsls	r2, r3, #24
 801f32c:	d503      	bpl.n	801f336 <_fclose_r+0x86>
 801f32e:	6921      	ldr	r1, [r4, #16]
 801f330:	4628      	mov	r0, r5
 801f332:	f000 fdad 	bl	801fe90 <_free_r>
 801f336:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f338:	b141      	cbz	r1, 801f34c <_fclose_r+0x9c>
 801f33a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f33e:	4299      	cmp	r1, r3
 801f340:	d002      	beq.n	801f348 <_fclose_r+0x98>
 801f342:	4628      	mov	r0, r5
 801f344:	f000 fda4 	bl	801fe90 <_free_r>
 801f348:	2300      	movs	r3, #0
 801f34a:	6363      	str	r3, [r4, #52]	; 0x34
 801f34c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801f34e:	b121      	cbz	r1, 801f35a <_fclose_r+0xaa>
 801f350:	4628      	mov	r0, r5
 801f352:	f000 fd9d 	bl	801fe90 <_free_r>
 801f356:	2300      	movs	r3, #0
 801f358:	64a3      	str	r3, [r4, #72]	; 0x48
 801f35a:	f000 f931 	bl	801f5c0 <__sfp_lock_acquire>
 801f35e:	2300      	movs	r3, #0
 801f360:	81a3      	strh	r3, [r4, #12]
 801f362:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f364:	07db      	lsls	r3, r3, #31
 801f366:	d402      	bmi.n	801f36e <_fclose_r+0xbe>
 801f368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f36a:	f000 fcf6 	bl	801fd5a <__retarget_lock_release_recursive>
 801f36e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f370:	f000 fcef 	bl	801fd52 <__retarget_lock_close_recursive>
 801f374:	f000 f92a 	bl	801f5cc <__sfp_lock_release>
 801f378:	e79f      	b.n	801f2ba <_fclose_r+0xa>
 801f37a:	bf00      	nop
 801f37c:	08028d6c 	.word	0x08028d6c
 801f380:	08028d8c 	.word	0x08028d8c
 801f384:	08028d4c 	.word	0x08028d4c

0801f388 <fclose>:
 801f388:	4b02      	ldr	r3, [pc, #8]	; (801f394 <fclose+0xc>)
 801f38a:	4601      	mov	r1, r0
 801f38c:	6818      	ldr	r0, [r3, #0]
 801f38e:	f7ff bf8f 	b.w	801f2b0 <_fclose_r>
 801f392:	bf00      	nop
 801f394:	20000108 	.word	0x20000108

0801f398 <__sflush_r>:
 801f398:	898a      	ldrh	r2, [r1, #12]
 801f39a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f39e:	4605      	mov	r5, r0
 801f3a0:	0710      	lsls	r0, r2, #28
 801f3a2:	460c      	mov	r4, r1
 801f3a4:	d458      	bmi.n	801f458 <__sflush_r+0xc0>
 801f3a6:	684b      	ldr	r3, [r1, #4]
 801f3a8:	2b00      	cmp	r3, #0
 801f3aa:	dc05      	bgt.n	801f3b8 <__sflush_r+0x20>
 801f3ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f3ae:	2b00      	cmp	r3, #0
 801f3b0:	dc02      	bgt.n	801f3b8 <__sflush_r+0x20>
 801f3b2:	2000      	movs	r0, #0
 801f3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f3b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f3ba:	2e00      	cmp	r6, #0
 801f3bc:	d0f9      	beq.n	801f3b2 <__sflush_r+0x1a>
 801f3be:	2300      	movs	r3, #0
 801f3c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f3c4:	682f      	ldr	r7, [r5, #0]
 801f3c6:	602b      	str	r3, [r5, #0]
 801f3c8:	d032      	beq.n	801f430 <__sflush_r+0x98>
 801f3ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f3cc:	89a3      	ldrh	r3, [r4, #12]
 801f3ce:	075a      	lsls	r2, r3, #29
 801f3d0:	d505      	bpl.n	801f3de <__sflush_r+0x46>
 801f3d2:	6863      	ldr	r3, [r4, #4]
 801f3d4:	1ac0      	subs	r0, r0, r3
 801f3d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f3d8:	b10b      	cbz	r3, 801f3de <__sflush_r+0x46>
 801f3da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f3dc:	1ac0      	subs	r0, r0, r3
 801f3de:	2300      	movs	r3, #0
 801f3e0:	4602      	mov	r2, r0
 801f3e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f3e4:	6a21      	ldr	r1, [r4, #32]
 801f3e6:	4628      	mov	r0, r5
 801f3e8:	47b0      	blx	r6
 801f3ea:	1c43      	adds	r3, r0, #1
 801f3ec:	89a3      	ldrh	r3, [r4, #12]
 801f3ee:	d106      	bne.n	801f3fe <__sflush_r+0x66>
 801f3f0:	6829      	ldr	r1, [r5, #0]
 801f3f2:	291d      	cmp	r1, #29
 801f3f4:	d82c      	bhi.n	801f450 <__sflush_r+0xb8>
 801f3f6:	4a2a      	ldr	r2, [pc, #168]	; (801f4a0 <__sflush_r+0x108>)
 801f3f8:	40ca      	lsrs	r2, r1
 801f3fa:	07d6      	lsls	r6, r2, #31
 801f3fc:	d528      	bpl.n	801f450 <__sflush_r+0xb8>
 801f3fe:	2200      	movs	r2, #0
 801f400:	6062      	str	r2, [r4, #4]
 801f402:	04d9      	lsls	r1, r3, #19
 801f404:	6922      	ldr	r2, [r4, #16]
 801f406:	6022      	str	r2, [r4, #0]
 801f408:	d504      	bpl.n	801f414 <__sflush_r+0x7c>
 801f40a:	1c42      	adds	r2, r0, #1
 801f40c:	d101      	bne.n	801f412 <__sflush_r+0x7a>
 801f40e:	682b      	ldr	r3, [r5, #0]
 801f410:	b903      	cbnz	r3, 801f414 <__sflush_r+0x7c>
 801f412:	6560      	str	r0, [r4, #84]	; 0x54
 801f414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f416:	602f      	str	r7, [r5, #0]
 801f418:	2900      	cmp	r1, #0
 801f41a:	d0ca      	beq.n	801f3b2 <__sflush_r+0x1a>
 801f41c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f420:	4299      	cmp	r1, r3
 801f422:	d002      	beq.n	801f42a <__sflush_r+0x92>
 801f424:	4628      	mov	r0, r5
 801f426:	f000 fd33 	bl	801fe90 <_free_r>
 801f42a:	2000      	movs	r0, #0
 801f42c:	6360      	str	r0, [r4, #52]	; 0x34
 801f42e:	e7c1      	b.n	801f3b4 <__sflush_r+0x1c>
 801f430:	6a21      	ldr	r1, [r4, #32]
 801f432:	2301      	movs	r3, #1
 801f434:	4628      	mov	r0, r5
 801f436:	47b0      	blx	r6
 801f438:	1c41      	adds	r1, r0, #1
 801f43a:	d1c7      	bne.n	801f3cc <__sflush_r+0x34>
 801f43c:	682b      	ldr	r3, [r5, #0]
 801f43e:	2b00      	cmp	r3, #0
 801f440:	d0c4      	beq.n	801f3cc <__sflush_r+0x34>
 801f442:	2b1d      	cmp	r3, #29
 801f444:	d001      	beq.n	801f44a <__sflush_r+0xb2>
 801f446:	2b16      	cmp	r3, #22
 801f448:	d101      	bne.n	801f44e <__sflush_r+0xb6>
 801f44a:	602f      	str	r7, [r5, #0]
 801f44c:	e7b1      	b.n	801f3b2 <__sflush_r+0x1a>
 801f44e:	89a3      	ldrh	r3, [r4, #12]
 801f450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f454:	81a3      	strh	r3, [r4, #12]
 801f456:	e7ad      	b.n	801f3b4 <__sflush_r+0x1c>
 801f458:	690f      	ldr	r7, [r1, #16]
 801f45a:	2f00      	cmp	r7, #0
 801f45c:	d0a9      	beq.n	801f3b2 <__sflush_r+0x1a>
 801f45e:	0793      	lsls	r3, r2, #30
 801f460:	680e      	ldr	r6, [r1, #0]
 801f462:	bf08      	it	eq
 801f464:	694b      	ldreq	r3, [r1, #20]
 801f466:	600f      	str	r7, [r1, #0]
 801f468:	bf18      	it	ne
 801f46a:	2300      	movne	r3, #0
 801f46c:	eba6 0807 	sub.w	r8, r6, r7
 801f470:	608b      	str	r3, [r1, #8]
 801f472:	f1b8 0f00 	cmp.w	r8, #0
 801f476:	dd9c      	ble.n	801f3b2 <__sflush_r+0x1a>
 801f478:	6a21      	ldr	r1, [r4, #32]
 801f47a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f47c:	4643      	mov	r3, r8
 801f47e:	463a      	mov	r2, r7
 801f480:	4628      	mov	r0, r5
 801f482:	47b0      	blx	r6
 801f484:	2800      	cmp	r0, #0
 801f486:	dc06      	bgt.n	801f496 <__sflush_r+0xfe>
 801f488:	89a3      	ldrh	r3, [r4, #12]
 801f48a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f48e:	81a3      	strh	r3, [r4, #12]
 801f490:	f04f 30ff 	mov.w	r0, #4294967295
 801f494:	e78e      	b.n	801f3b4 <__sflush_r+0x1c>
 801f496:	4407      	add	r7, r0
 801f498:	eba8 0800 	sub.w	r8, r8, r0
 801f49c:	e7e9      	b.n	801f472 <__sflush_r+0xda>
 801f49e:	bf00      	nop
 801f4a0:	20400001 	.word	0x20400001

0801f4a4 <_fflush_r>:
 801f4a4:	b538      	push	{r3, r4, r5, lr}
 801f4a6:	690b      	ldr	r3, [r1, #16]
 801f4a8:	4605      	mov	r5, r0
 801f4aa:	460c      	mov	r4, r1
 801f4ac:	b913      	cbnz	r3, 801f4b4 <_fflush_r+0x10>
 801f4ae:	2500      	movs	r5, #0
 801f4b0:	4628      	mov	r0, r5
 801f4b2:	bd38      	pop	{r3, r4, r5, pc}
 801f4b4:	b118      	cbz	r0, 801f4be <_fflush_r+0x1a>
 801f4b6:	6983      	ldr	r3, [r0, #24]
 801f4b8:	b90b      	cbnz	r3, 801f4be <_fflush_r+0x1a>
 801f4ba:	f000 f899 	bl	801f5f0 <__sinit>
 801f4be:	4b14      	ldr	r3, [pc, #80]	; (801f510 <_fflush_r+0x6c>)
 801f4c0:	429c      	cmp	r4, r3
 801f4c2:	d11b      	bne.n	801f4fc <_fflush_r+0x58>
 801f4c4:	686c      	ldr	r4, [r5, #4]
 801f4c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f4ca:	2b00      	cmp	r3, #0
 801f4cc:	d0ef      	beq.n	801f4ae <_fflush_r+0xa>
 801f4ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f4d0:	07d0      	lsls	r0, r2, #31
 801f4d2:	d404      	bmi.n	801f4de <_fflush_r+0x3a>
 801f4d4:	0599      	lsls	r1, r3, #22
 801f4d6:	d402      	bmi.n	801f4de <_fflush_r+0x3a>
 801f4d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f4da:	f000 fc3c 	bl	801fd56 <__retarget_lock_acquire_recursive>
 801f4de:	4628      	mov	r0, r5
 801f4e0:	4621      	mov	r1, r4
 801f4e2:	f7ff ff59 	bl	801f398 <__sflush_r>
 801f4e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f4e8:	07da      	lsls	r2, r3, #31
 801f4ea:	4605      	mov	r5, r0
 801f4ec:	d4e0      	bmi.n	801f4b0 <_fflush_r+0xc>
 801f4ee:	89a3      	ldrh	r3, [r4, #12]
 801f4f0:	059b      	lsls	r3, r3, #22
 801f4f2:	d4dd      	bmi.n	801f4b0 <_fflush_r+0xc>
 801f4f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f4f6:	f000 fc30 	bl	801fd5a <__retarget_lock_release_recursive>
 801f4fa:	e7d9      	b.n	801f4b0 <_fflush_r+0xc>
 801f4fc:	4b05      	ldr	r3, [pc, #20]	; (801f514 <_fflush_r+0x70>)
 801f4fe:	429c      	cmp	r4, r3
 801f500:	d101      	bne.n	801f506 <_fflush_r+0x62>
 801f502:	68ac      	ldr	r4, [r5, #8]
 801f504:	e7df      	b.n	801f4c6 <_fflush_r+0x22>
 801f506:	4b04      	ldr	r3, [pc, #16]	; (801f518 <_fflush_r+0x74>)
 801f508:	429c      	cmp	r4, r3
 801f50a:	bf08      	it	eq
 801f50c:	68ec      	ldreq	r4, [r5, #12]
 801f50e:	e7da      	b.n	801f4c6 <_fflush_r+0x22>
 801f510:	08028d6c 	.word	0x08028d6c
 801f514:	08028d8c 	.word	0x08028d8c
 801f518:	08028d4c 	.word	0x08028d4c

0801f51c <fflush>:
 801f51c:	4601      	mov	r1, r0
 801f51e:	b920      	cbnz	r0, 801f52a <fflush+0xe>
 801f520:	4b04      	ldr	r3, [pc, #16]	; (801f534 <fflush+0x18>)
 801f522:	4905      	ldr	r1, [pc, #20]	; (801f538 <fflush+0x1c>)
 801f524:	6818      	ldr	r0, [r3, #0]
 801f526:	f000 babb 	b.w	801faa0 <_fwalk_reent>
 801f52a:	4b04      	ldr	r3, [pc, #16]	; (801f53c <fflush+0x20>)
 801f52c:	6818      	ldr	r0, [r3, #0]
 801f52e:	f7ff bfb9 	b.w	801f4a4 <_fflush_r>
 801f532:	bf00      	nop
 801f534:	08028dac 	.word	0x08028dac
 801f538:	0801f4a5 	.word	0x0801f4a5
 801f53c:	20000108 	.word	0x20000108

0801f540 <std>:
 801f540:	2300      	movs	r3, #0
 801f542:	b510      	push	{r4, lr}
 801f544:	4604      	mov	r4, r0
 801f546:	e9c0 3300 	strd	r3, r3, [r0]
 801f54a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f54e:	6083      	str	r3, [r0, #8]
 801f550:	8181      	strh	r1, [r0, #12]
 801f552:	6643      	str	r3, [r0, #100]	; 0x64
 801f554:	81c2      	strh	r2, [r0, #14]
 801f556:	6183      	str	r3, [r0, #24]
 801f558:	4619      	mov	r1, r3
 801f55a:	2208      	movs	r2, #8
 801f55c:	305c      	adds	r0, #92	; 0x5c
 801f55e:	f000 fc7f 	bl	801fe60 <memset>
 801f562:	4b05      	ldr	r3, [pc, #20]	; (801f578 <std+0x38>)
 801f564:	6263      	str	r3, [r4, #36]	; 0x24
 801f566:	4b05      	ldr	r3, [pc, #20]	; (801f57c <std+0x3c>)
 801f568:	62a3      	str	r3, [r4, #40]	; 0x28
 801f56a:	4b05      	ldr	r3, [pc, #20]	; (801f580 <std+0x40>)
 801f56c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f56e:	4b05      	ldr	r3, [pc, #20]	; (801f584 <std+0x44>)
 801f570:	6224      	str	r4, [r4, #32]
 801f572:	6323      	str	r3, [r4, #48]	; 0x30
 801f574:	bd10      	pop	{r4, pc}
 801f576:	bf00      	nop
 801f578:	08020209 	.word	0x08020209
 801f57c:	0802022f 	.word	0x0802022f
 801f580:	08020267 	.word	0x08020267
 801f584:	0802028b 	.word	0x0802028b

0801f588 <_cleanup_r>:
 801f588:	4901      	ldr	r1, [pc, #4]	; (801f590 <_cleanup_r+0x8>)
 801f58a:	f000 ba89 	b.w	801faa0 <_fwalk_reent>
 801f58e:	bf00      	nop
 801f590:	0801f4a5 	.word	0x0801f4a5

0801f594 <__sfmoreglue>:
 801f594:	b570      	push	{r4, r5, r6, lr}
 801f596:	1e4a      	subs	r2, r1, #1
 801f598:	2568      	movs	r5, #104	; 0x68
 801f59a:	4355      	muls	r5, r2
 801f59c:	460e      	mov	r6, r1
 801f59e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f5a2:	f000 fcc5 	bl	801ff30 <_malloc_r>
 801f5a6:	4604      	mov	r4, r0
 801f5a8:	b140      	cbz	r0, 801f5bc <__sfmoreglue+0x28>
 801f5aa:	2100      	movs	r1, #0
 801f5ac:	e9c0 1600 	strd	r1, r6, [r0]
 801f5b0:	300c      	adds	r0, #12
 801f5b2:	60a0      	str	r0, [r4, #8]
 801f5b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f5b8:	f000 fc52 	bl	801fe60 <memset>
 801f5bc:	4620      	mov	r0, r4
 801f5be:	bd70      	pop	{r4, r5, r6, pc}

0801f5c0 <__sfp_lock_acquire>:
 801f5c0:	4801      	ldr	r0, [pc, #4]	; (801f5c8 <__sfp_lock_acquire+0x8>)
 801f5c2:	f000 bbc8 	b.w	801fd56 <__retarget_lock_acquire_recursive>
 801f5c6:	bf00      	nop
 801f5c8:	20000f90 	.word	0x20000f90

0801f5cc <__sfp_lock_release>:
 801f5cc:	4801      	ldr	r0, [pc, #4]	; (801f5d4 <__sfp_lock_release+0x8>)
 801f5ce:	f000 bbc4 	b.w	801fd5a <__retarget_lock_release_recursive>
 801f5d2:	bf00      	nop
 801f5d4:	20000f90 	.word	0x20000f90

0801f5d8 <__sinit_lock_acquire>:
 801f5d8:	4801      	ldr	r0, [pc, #4]	; (801f5e0 <__sinit_lock_acquire+0x8>)
 801f5da:	f000 bbbc 	b.w	801fd56 <__retarget_lock_acquire_recursive>
 801f5de:	bf00      	nop
 801f5e0:	20000f8b 	.word	0x20000f8b

0801f5e4 <__sinit_lock_release>:
 801f5e4:	4801      	ldr	r0, [pc, #4]	; (801f5ec <__sinit_lock_release+0x8>)
 801f5e6:	f000 bbb8 	b.w	801fd5a <__retarget_lock_release_recursive>
 801f5ea:	bf00      	nop
 801f5ec:	20000f8b 	.word	0x20000f8b

0801f5f0 <__sinit>:
 801f5f0:	b510      	push	{r4, lr}
 801f5f2:	4604      	mov	r4, r0
 801f5f4:	f7ff fff0 	bl	801f5d8 <__sinit_lock_acquire>
 801f5f8:	69a3      	ldr	r3, [r4, #24]
 801f5fa:	b11b      	cbz	r3, 801f604 <__sinit+0x14>
 801f5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f600:	f7ff bff0 	b.w	801f5e4 <__sinit_lock_release>
 801f604:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f608:	6523      	str	r3, [r4, #80]	; 0x50
 801f60a:	4b13      	ldr	r3, [pc, #76]	; (801f658 <__sinit+0x68>)
 801f60c:	4a13      	ldr	r2, [pc, #76]	; (801f65c <__sinit+0x6c>)
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	62a2      	str	r2, [r4, #40]	; 0x28
 801f612:	42a3      	cmp	r3, r4
 801f614:	bf04      	itt	eq
 801f616:	2301      	moveq	r3, #1
 801f618:	61a3      	streq	r3, [r4, #24]
 801f61a:	4620      	mov	r0, r4
 801f61c:	f000 f820 	bl	801f660 <__sfp>
 801f620:	6060      	str	r0, [r4, #4]
 801f622:	4620      	mov	r0, r4
 801f624:	f000 f81c 	bl	801f660 <__sfp>
 801f628:	60a0      	str	r0, [r4, #8]
 801f62a:	4620      	mov	r0, r4
 801f62c:	f000 f818 	bl	801f660 <__sfp>
 801f630:	2200      	movs	r2, #0
 801f632:	60e0      	str	r0, [r4, #12]
 801f634:	2104      	movs	r1, #4
 801f636:	6860      	ldr	r0, [r4, #4]
 801f638:	f7ff ff82 	bl	801f540 <std>
 801f63c:	68a0      	ldr	r0, [r4, #8]
 801f63e:	2201      	movs	r2, #1
 801f640:	2109      	movs	r1, #9
 801f642:	f7ff ff7d 	bl	801f540 <std>
 801f646:	68e0      	ldr	r0, [r4, #12]
 801f648:	2202      	movs	r2, #2
 801f64a:	2112      	movs	r1, #18
 801f64c:	f7ff ff78 	bl	801f540 <std>
 801f650:	2301      	movs	r3, #1
 801f652:	61a3      	str	r3, [r4, #24]
 801f654:	e7d2      	b.n	801f5fc <__sinit+0xc>
 801f656:	bf00      	nop
 801f658:	08028dac 	.word	0x08028dac
 801f65c:	0801f589 	.word	0x0801f589

0801f660 <__sfp>:
 801f660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f662:	4607      	mov	r7, r0
 801f664:	f7ff ffac 	bl	801f5c0 <__sfp_lock_acquire>
 801f668:	4b1e      	ldr	r3, [pc, #120]	; (801f6e4 <__sfp+0x84>)
 801f66a:	681e      	ldr	r6, [r3, #0]
 801f66c:	69b3      	ldr	r3, [r6, #24]
 801f66e:	b913      	cbnz	r3, 801f676 <__sfp+0x16>
 801f670:	4630      	mov	r0, r6
 801f672:	f7ff ffbd 	bl	801f5f0 <__sinit>
 801f676:	3648      	adds	r6, #72	; 0x48
 801f678:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f67c:	3b01      	subs	r3, #1
 801f67e:	d503      	bpl.n	801f688 <__sfp+0x28>
 801f680:	6833      	ldr	r3, [r6, #0]
 801f682:	b30b      	cbz	r3, 801f6c8 <__sfp+0x68>
 801f684:	6836      	ldr	r6, [r6, #0]
 801f686:	e7f7      	b.n	801f678 <__sfp+0x18>
 801f688:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f68c:	b9d5      	cbnz	r5, 801f6c4 <__sfp+0x64>
 801f68e:	4b16      	ldr	r3, [pc, #88]	; (801f6e8 <__sfp+0x88>)
 801f690:	60e3      	str	r3, [r4, #12]
 801f692:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f696:	6665      	str	r5, [r4, #100]	; 0x64
 801f698:	f000 fb5a 	bl	801fd50 <__retarget_lock_init_recursive>
 801f69c:	f7ff ff96 	bl	801f5cc <__sfp_lock_release>
 801f6a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f6a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f6a8:	6025      	str	r5, [r4, #0]
 801f6aa:	61a5      	str	r5, [r4, #24]
 801f6ac:	2208      	movs	r2, #8
 801f6ae:	4629      	mov	r1, r5
 801f6b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f6b4:	f000 fbd4 	bl	801fe60 <memset>
 801f6b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f6bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f6c0:	4620      	mov	r0, r4
 801f6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f6c4:	3468      	adds	r4, #104	; 0x68
 801f6c6:	e7d9      	b.n	801f67c <__sfp+0x1c>
 801f6c8:	2104      	movs	r1, #4
 801f6ca:	4638      	mov	r0, r7
 801f6cc:	f7ff ff62 	bl	801f594 <__sfmoreglue>
 801f6d0:	4604      	mov	r4, r0
 801f6d2:	6030      	str	r0, [r6, #0]
 801f6d4:	2800      	cmp	r0, #0
 801f6d6:	d1d5      	bne.n	801f684 <__sfp+0x24>
 801f6d8:	f7ff ff78 	bl	801f5cc <__sfp_lock_release>
 801f6dc:	230c      	movs	r3, #12
 801f6de:	603b      	str	r3, [r7, #0]
 801f6e0:	e7ee      	b.n	801f6c0 <__sfp+0x60>
 801f6e2:	bf00      	nop
 801f6e4:	08028dac 	.word	0x08028dac
 801f6e8:	ffff0001 	.word	0xffff0001

0801f6ec <_fopen_r>:
 801f6ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f6ee:	460f      	mov	r7, r1
 801f6f0:	4611      	mov	r1, r2
 801f6f2:	aa01      	add	r2, sp, #4
 801f6f4:	4605      	mov	r5, r0
 801f6f6:	f002 f82f 	bl	8021758 <__sflags>
 801f6fa:	4606      	mov	r6, r0
 801f6fc:	b918      	cbnz	r0, 801f706 <_fopen_r+0x1a>
 801f6fe:	2400      	movs	r4, #0
 801f700:	4620      	mov	r0, r4
 801f702:	b003      	add	sp, #12
 801f704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f706:	4628      	mov	r0, r5
 801f708:	f7ff ffaa 	bl	801f660 <__sfp>
 801f70c:	4604      	mov	r4, r0
 801f70e:	2800      	cmp	r0, #0
 801f710:	d0f5      	beq.n	801f6fe <_fopen_r+0x12>
 801f712:	4639      	mov	r1, r7
 801f714:	9a01      	ldr	r2, [sp, #4]
 801f716:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801f71a:	4628      	mov	r0, r5
 801f71c:	f000 fc62 	bl	801ffe4 <_open_r>
 801f720:	1e07      	subs	r7, r0, #0
 801f722:	da09      	bge.n	801f738 <_fopen_r+0x4c>
 801f724:	2500      	movs	r5, #0
 801f726:	f7ff ff4b 	bl	801f5c0 <__sfp_lock_acquire>
 801f72a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f72c:	81a5      	strh	r5, [r4, #12]
 801f72e:	f000 fb10 	bl	801fd52 <__retarget_lock_close_recursive>
 801f732:	f7ff ff4b 	bl	801f5cc <__sfp_lock_release>
 801f736:	e7e2      	b.n	801f6fe <_fopen_r+0x12>
 801f738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f73a:	07db      	lsls	r3, r3, #31
 801f73c:	d405      	bmi.n	801f74a <_fopen_r+0x5e>
 801f73e:	89a3      	ldrh	r3, [r4, #12]
 801f740:	0598      	lsls	r0, r3, #22
 801f742:	d402      	bmi.n	801f74a <_fopen_r+0x5e>
 801f744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f746:	f000 fb06 	bl	801fd56 <__retarget_lock_acquire_recursive>
 801f74a:	4b0e      	ldr	r3, [pc, #56]	; (801f784 <_fopen_r+0x98>)
 801f74c:	6263      	str	r3, [r4, #36]	; 0x24
 801f74e:	4b0e      	ldr	r3, [pc, #56]	; (801f788 <_fopen_r+0x9c>)
 801f750:	62a3      	str	r3, [r4, #40]	; 0x28
 801f752:	4b0e      	ldr	r3, [pc, #56]	; (801f78c <_fopen_r+0xa0>)
 801f754:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f756:	05f1      	lsls	r1, r6, #23
 801f758:	4b0d      	ldr	r3, [pc, #52]	; (801f790 <_fopen_r+0xa4>)
 801f75a:	81e7      	strh	r7, [r4, #14]
 801f75c:	81a6      	strh	r6, [r4, #12]
 801f75e:	6224      	str	r4, [r4, #32]
 801f760:	6323      	str	r3, [r4, #48]	; 0x30
 801f762:	d505      	bpl.n	801f770 <_fopen_r+0x84>
 801f764:	2302      	movs	r3, #2
 801f766:	2200      	movs	r2, #0
 801f768:	4621      	mov	r1, r4
 801f76a:	4628      	mov	r0, r5
 801f76c:	f000 f888 	bl	801f880 <_fseek_r>
 801f770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f772:	07da      	lsls	r2, r3, #31
 801f774:	d4c4      	bmi.n	801f700 <_fopen_r+0x14>
 801f776:	89a3      	ldrh	r3, [r4, #12]
 801f778:	059b      	lsls	r3, r3, #22
 801f77a:	d4c1      	bmi.n	801f700 <_fopen_r+0x14>
 801f77c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f77e:	f000 faec 	bl	801fd5a <__retarget_lock_release_recursive>
 801f782:	e7bd      	b.n	801f700 <_fopen_r+0x14>
 801f784:	08020209 	.word	0x08020209
 801f788:	0802022f 	.word	0x0802022f
 801f78c:	08020267 	.word	0x08020267
 801f790:	0802028b 	.word	0x0802028b

0801f794 <fopen>:
 801f794:	4b02      	ldr	r3, [pc, #8]	; (801f7a0 <fopen+0xc>)
 801f796:	460a      	mov	r2, r1
 801f798:	4601      	mov	r1, r0
 801f79a:	6818      	ldr	r0, [r3, #0]
 801f79c:	f7ff bfa6 	b.w	801f6ec <_fopen_r>
 801f7a0:	20000108 	.word	0x20000108

0801f7a4 <_fputs_r>:
 801f7a4:	b570      	push	{r4, r5, r6, lr}
 801f7a6:	460e      	mov	r6, r1
 801f7a8:	4614      	mov	r4, r2
 801f7aa:	4605      	mov	r5, r0
 801f7ac:	b118      	cbz	r0, 801f7b6 <_fputs_r+0x12>
 801f7ae:	6983      	ldr	r3, [r0, #24]
 801f7b0:	b90b      	cbnz	r3, 801f7b6 <_fputs_r+0x12>
 801f7b2:	f7ff ff1d 	bl	801f5f0 <__sinit>
 801f7b6:	4b2b      	ldr	r3, [pc, #172]	; (801f864 <_fputs_r+0xc0>)
 801f7b8:	429c      	cmp	r4, r3
 801f7ba:	d11e      	bne.n	801f7fa <_fputs_r+0x56>
 801f7bc:	686c      	ldr	r4, [r5, #4]
 801f7be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f7c0:	07da      	lsls	r2, r3, #31
 801f7c2:	d405      	bmi.n	801f7d0 <_fputs_r+0x2c>
 801f7c4:	89a3      	ldrh	r3, [r4, #12]
 801f7c6:	059b      	lsls	r3, r3, #22
 801f7c8:	d402      	bmi.n	801f7d0 <_fputs_r+0x2c>
 801f7ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f7cc:	f000 fac3 	bl	801fd56 <__retarget_lock_acquire_recursive>
 801f7d0:	89a3      	ldrh	r3, [r4, #12]
 801f7d2:	0718      	lsls	r0, r3, #28
 801f7d4:	d51b      	bpl.n	801f80e <_fputs_r+0x6a>
 801f7d6:	6923      	ldr	r3, [r4, #16]
 801f7d8:	b1cb      	cbz	r3, 801f80e <_fputs_r+0x6a>
 801f7da:	3e01      	subs	r6, #1
 801f7dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f7e0:	bb39      	cbnz	r1, 801f832 <_fputs_r+0x8e>
 801f7e2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801f7e4:	f015 0501 	ands.w	r5, r5, #1
 801f7e8:	d139      	bne.n	801f85e <_fputs_r+0xba>
 801f7ea:	89a3      	ldrh	r3, [r4, #12]
 801f7ec:	0599      	lsls	r1, r3, #22
 801f7ee:	d402      	bmi.n	801f7f6 <_fputs_r+0x52>
 801f7f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f7f2:	f000 fab2 	bl	801fd5a <__retarget_lock_release_recursive>
 801f7f6:	4628      	mov	r0, r5
 801f7f8:	bd70      	pop	{r4, r5, r6, pc}
 801f7fa:	4b1b      	ldr	r3, [pc, #108]	; (801f868 <_fputs_r+0xc4>)
 801f7fc:	429c      	cmp	r4, r3
 801f7fe:	d101      	bne.n	801f804 <_fputs_r+0x60>
 801f800:	68ac      	ldr	r4, [r5, #8]
 801f802:	e7dc      	b.n	801f7be <_fputs_r+0x1a>
 801f804:	4b19      	ldr	r3, [pc, #100]	; (801f86c <_fputs_r+0xc8>)
 801f806:	429c      	cmp	r4, r3
 801f808:	bf08      	it	eq
 801f80a:	68ec      	ldreq	r4, [r5, #12]
 801f80c:	e7d7      	b.n	801f7be <_fputs_r+0x1a>
 801f80e:	4621      	mov	r1, r4
 801f810:	4628      	mov	r0, r5
 801f812:	f001 fe9f 	bl	8021554 <__swsetup_r>
 801f816:	2800      	cmp	r0, #0
 801f818:	d0df      	beq.n	801f7da <_fputs_r+0x36>
 801f81a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f81c:	07da      	lsls	r2, r3, #31
 801f81e:	d405      	bmi.n	801f82c <_fputs_r+0x88>
 801f820:	89a3      	ldrh	r3, [r4, #12]
 801f822:	059b      	lsls	r3, r3, #22
 801f824:	d402      	bmi.n	801f82c <_fputs_r+0x88>
 801f826:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f828:	f000 fa97 	bl	801fd5a <__retarget_lock_release_recursive>
 801f82c:	f04f 35ff 	mov.w	r5, #4294967295
 801f830:	e7e1      	b.n	801f7f6 <_fputs_r+0x52>
 801f832:	68a3      	ldr	r3, [r4, #8]
 801f834:	3b01      	subs	r3, #1
 801f836:	2b00      	cmp	r3, #0
 801f838:	60a3      	str	r3, [r4, #8]
 801f83a:	da04      	bge.n	801f846 <_fputs_r+0xa2>
 801f83c:	69a2      	ldr	r2, [r4, #24]
 801f83e:	4293      	cmp	r3, r2
 801f840:	db06      	blt.n	801f850 <_fputs_r+0xac>
 801f842:	290a      	cmp	r1, #10
 801f844:	d004      	beq.n	801f850 <_fputs_r+0xac>
 801f846:	6823      	ldr	r3, [r4, #0]
 801f848:	1c5a      	adds	r2, r3, #1
 801f84a:	6022      	str	r2, [r4, #0]
 801f84c:	7019      	strb	r1, [r3, #0]
 801f84e:	e7c5      	b.n	801f7dc <_fputs_r+0x38>
 801f850:	4622      	mov	r2, r4
 801f852:	4628      	mov	r0, r5
 801f854:	f001 fe1a 	bl	802148c <__swbuf_r>
 801f858:	3001      	adds	r0, #1
 801f85a:	d1bf      	bne.n	801f7dc <_fputs_r+0x38>
 801f85c:	e7dd      	b.n	801f81a <_fputs_r+0x76>
 801f85e:	460d      	mov	r5, r1
 801f860:	e7c9      	b.n	801f7f6 <_fputs_r+0x52>
 801f862:	bf00      	nop
 801f864:	08028d6c 	.word	0x08028d6c
 801f868:	08028d8c 	.word	0x08028d8c
 801f86c:	08028d4c 	.word	0x08028d4c

0801f870 <fputs>:
 801f870:	4b02      	ldr	r3, [pc, #8]	; (801f87c <fputs+0xc>)
 801f872:	460a      	mov	r2, r1
 801f874:	4601      	mov	r1, r0
 801f876:	6818      	ldr	r0, [r3, #0]
 801f878:	f7ff bf94 	b.w	801f7a4 <_fputs_r>
 801f87c:	20000108 	.word	0x20000108

0801f880 <_fseek_r>:
 801f880:	f000 b800 	b.w	801f884 <_fseeko_r>

0801f884 <_fseeko_r>:
 801f884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f888:	460c      	mov	r4, r1
 801f88a:	4617      	mov	r7, r2
 801f88c:	461e      	mov	r6, r3
 801f88e:	4605      	mov	r5, r0
 801f890:	b118      	cbz	r0, 801f89a <_fseeko_r+0x16>
 801f892:	6983      	ldr	r3, [r0, #24]
 801f894:	b90b      	cbnz	r3, 801f89a <_fseeko_r+0x16>
 801f896:	f7ff feab 	bl	801f5f0 <__sinit>
 801f89a:	4b44      	ldr	r3, [pc, #272]	; (801f9ac <_fseeko_r+0x128>)
 801f89c:	429c      	cmp	r4, r3
 801f89e:	d122      	bne.n	801f8e6 <_fseeko_r+0x62>
 801f8a0:	686c      	ldr	r4, [r5, #4]
 801f8a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f8a4:	07d9      	lsls	r1, r3, #31
 801f8a6:	d405      	bmi.n	801f8b4 <_fseeko_r+0x30>
 801f8a8:	89a3      	ldrh	r3, [r4, #12]
 801f8aa:	059a      	lsls	r2, r3, #22
 801f8ac:	d402      	bmi.n	801f8b4 <_fseeko_r+0x30>
 801f8ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f8b0:	f000 fa51 	bl	801fd56 <__retarget_lock_acquire_recursive>
 801f8b4:	89a3      	ldrh	r3, [r4, #12]
 801f8b6:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801f8ba:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801f8be:	d103      	bne.n	801f8c8 <_fseeko_r+0x44>
 801f8c0:	4621      	mov	r1, r4
 801f8c2:	4628      	mov	r0, r5
 801f8c4:	f7ff fdee 	bl	801f4a4 <_fflush_r>
 801f8c8:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801f8cc:	f1b8 0f00 	cmp.w	r8, #0
 801f8d0:	d113      	bne.n	801f8fa <_fseeko_r+0x76>
 801f8d2:	231d      	movs	r3, #29
 801f8d4:	602b      	str	r3, [r5, #0]
 801f8d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f8d8:	07d9      	lsls	r1, r3, #31
 801f8da:	d55d      	bpl.n	801f998 <_fseeko_r+0x114>
 801f8dc:	f04f 36ff 	mov.w	r6, #4294967295
 801f8e0:	4630      	mov	r0, r6
 801f8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f8e6:	4b32      	ldr	r3, [pc, #200]	; (801f9b0 <_fseeko_r+0x12c>)
 801f8e8:	429c      	cmp	r4, r3
 801f8ea:	d101      	bne.n	801f8f0 <_fseeko_r+0x6c>
 801f8ec:	68ac      	ldr	r4, [r5, #8]
 801f8ee:	e7d8      	b.n	801f8a2 <_fseeko_r+0x1e>
 801f8f0:	4b30      	ldr	r3, [pc, #192]	; (801f9b4 <_fseeko_r+0x130>)
 801f8f2:	429c      	cmp	r4, r3
 801f8f4:	bf08      	it	eq
 801f8f6:	68ec      	ldreq	r4, [r5, #12]
 801f8f8:	e7d3      	b.n	801f8a2 <_fseeko_r+0x1e>
 801f8fa:	2e01      	cmp	r6, #1
 801f8fc:	d036      	beq.n	801f96c <_fseeko_r+0xe8>
 801f8fe:	f036 0302 	bics.w	r3, r6, #2
 801f902:	d147      	bne.n	801f994 <_fseeko_r+0x110>
 801f904:	6923      	ldr	r3, [r4, #16]
 801f906:	b91b      	cbnz	r3, 801f910 <_fseeko_r+0x8c>
 801f908:	4621      	mov	r1, r4
 801f90a:	4628      	mov	r0, r5
 801f90c:	f000 fa4a 	bl	801fda4 <__smakebuf_r>
 801f910:	4621      	mov	r1, r4
 801f912:	4628      	mov	r0, r5
 801f914:	f7ff fdc6 	bl	801f4a4 <_fflush_r>
 801f918:	2800      	cmp	r0, #0
 801f91a:	d1dc      	bne.n	801f8d6 <_fseeko_r+0x52>
 801f91c:	6a21      	ldr	r1, [r4, #32]
 801f91e:	4633      	mov	r3, r6
 801f920:	463a      	mov	r2, r7
 801f922:	4628      	mov	r0, r5
 801f924:	47c0      	blx	r8
 801f926:	3001      	adds	r0, #1
 801f928:	d0d5      	beq.n	801f8d6 <_fseeko_r+0x52>
 801f92a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f92c:	b141      	cbz	r1, 801f940 <_fseeko_r+0xbc>
 801f92e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f932:	4299      	cmp	r1, r3
 801f934:	d002      	beq.n	801f93c <_fseeko_r+0xb8>
 801f936:	4628      	mov	r0, r5
 801f938:	f000 faaa 	bl	801fe90 <_free_r>
 801f93c:	2300      	movs	r3, #0
 801f93e:	6363      	str	r3, [r4, #52]	; 0x34
 801f940:	6923      	ldr	r3, [r4, #16]
 801f942:	6023      	str	r3, [r4, #0]
 801f944:	89a3      	ldrh	r3, [r4, #12]
 801f946:	2500      	movs	r5, #0
 801f948:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 801f94c:	6065      	str	r5, [r4, #4]
 801f94e:	81a3      	strh	r3, [r4, #12]
 801f950:	2208      	movs	r2, #8
 801f952:	4629      	mov	r1, r5
 801f954:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f958:	f000 fa82 	bl	801fe60 <memset>
 801f95c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801f95e:	f016 0601 	ands.w	r6, r6, #1
 801f962:	d120      	bne.n	801f9a6 <_fseeko_r+0x122>
 801f964:	89a3      	ldrh	r3, [r4, #12]
 801f966:	059b      	lsls	r3, r3, #22
 801f968:	d4ba      	bmi.n	801f8e0 <_fseeko_r+0x5c>
 801f96a:	e00c      	b.n	801f986 <_fseeko_r+0x102>
 801f96c:	4621      	mov	r1, r4
 801f96e:	4628      	mov	r0, r5
 801f970:	f000 f822 	bl	801f9b8 <_ftello_r>
 801f974:	1c43      	adds	r3, r0, #1
 801f976:	4606      	mov	r6, r0
 801f978:	d109      	bne.n	801f98e <_fseeko_r+0x10a>
 801f97a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f97c:	07dd      	lsls	r5, r3, #31
 801f97e:	d4ad      	bmi.n	801f8dc <_fseeko_r+0x58>
 801f980:	89a3      	ldrh	r3, [r4, #12]
 801f982:	0598      	lsls	r0, r3, #22
 801f984:	d4aa      	bmi.n	801f8dc <_fseeko_r+0x58>
 801f986:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f988:	f000 f9e7 	bl	801fd5a <__retarget_lock_release_recursive>
 801f98c:	e7a8      	b.n	801f8e0 <_fseeko_r+0x5c>
 801f98e:	4407      	add	r7, r0
 801f990:	2600      	movs	r6, #0
 801f992:	e7b7      	b.n	801f904 <_fseeko_r+0x80>
 801f994:	2316      	movs	r3, #22
 801f996:	e79d      	b.n	801f8d4 <_fseeko_r+0x50>
 801f998:	89a3      	ldrh	r3, [r4, #12]
 801f99a:	059a      	lsls	r2, r3, #22
 801f99c:	d49e      	bmi.n	801f8dc <_fseeko_r+0x58>
 801f99e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f9a0:	f000 f9db 	bl	801fd5a <__retarget_lock_release_recursive>
 801f9a4:	e79a      	b.n	801f8dc <_fseeko_r+0x58>
 801f9a6:	462e      	mov	r6, r5
 801f9a8:	e79a      	b.n	801f8e0 <_fseeko_r+0x5c>
 801f9aa:	bf00      	nop
 801f9ac:	08028d6c 	.word	0x08028d6c
 801f9b0:	08028d8c 	.word	0x08028d8c
 801f9b4:	08028d4c 	.word	0x08028d4c

0801f9b8 <_ftello_r>:
 801f9b8:	b570      	push	{r4, r5, r6, lr}
 801f9ba:	460c      	mov	r4, r1
 801f9bc:	4605      	mov	r5, r0
 801f9be:	b118      	cbz	r0, 801f9c8 <_ftello_r+0x10>
 801f9c0:	6983      	ldr	r3, [r0, #24]
 801f9c2:	b90b      	cbnz	r3, 801f9c8 <_ftello_r+0x10>
 801f9c4:	f7ff fe14 	bl	801f5f0 <__sinit>
 801f9c8:	4b32      	ldr	r3, [pc, #200]	; (801fa94 <_ftello_r+0xdc>)
 801f9ca:	429c      	cmp	r4, r3
 801f9cc:	d114      	bne.n	801f9f8 <_ftello_r+0x40>
 801f9ce:	686c      	ldr	r4, [r5, #4]
 801f9d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f9d2:	07da      	lsls	r2, r3, #31
 801f9d4:	d405      	bmi.n	801f9e2 <_ftello_r+0x2a>
 801f9d6:	89a3      	ldrh	r3, [r4, #12]
 801f9d8:	059b      	lsls	r3, r3, #22
 801f9da:	d402      	bmi.n	801f9e2 <_ftello_r+0x2a>
 801f9dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f9de:	f000 f9ba 	bl	801fd56 <__retarget_lock_acquire_recursive>
 801f9e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f9e4:	b9ce      	cbnz	r6, 801fa1a <_ftello_r+0x62>
 801f9e6:	231d      	movs	r3, #29
 801f9e8:	602b      	str	r3, [r5, #0]
 801f9ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f9ec:	07de      	lsls	r6, r3, #31
 801f9ee:	d50d      	bpl.n	801fa0c <_ftello_r+0x54>
 801f9f0:	f04f 35ff 	mov.w	r5, #4294967295
 801f9f4:	4628      	mov	r0, r5
 801f9f6:	bd70      	pop	{r4, r5, r6, pc}
 801f9f8:	4b27      	ldr	r3, [pc, #156]	; (801fa98 <_ftello_r+0xe0>)
 801f9fa:	429c      	cmp	r4, r3
 801f9fc:	d101      	bne.n	801fa02 <_ftello_r+0x4a>
 801f9fe:	68ac      	ldr	r4, [r5, #8]
 801fa00:	e7e6      	b.n	801f9d0 <_ftello_r+0x18>
 801fa02:	4b26      	ldr	r3, [pc, #152]	; (801fa9c <_ftello_r+0xe4>)
 801fa04:	429c      	cmp	r4, r3
 801fa06:	bf08      	it	eq
 801fa08:	68ec      	ldreq	r4, [r5, #12]
 801fa0a:	e7e1      	b.n	801f9d0 <_ftello_r+0x18>
 801fa0c:	89a3      	ldrh	r3, [r4, #12]
 801fa0e:	059d      	lsls	r5, r3, #22
 801fa10:	d4ee      	bmi.n	801f9f0 <_ftello_r+0x38>
 801fa12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa14:	f000 f9a1 	bl	801fd5a <__retarget_lock_release_recursive>
 801fa18:	e7ea      	b.n	801f9f0 <_ftello_r+0x38>
 801fa1a:	89a2      	ldrh	r2, [r4, #12]
 801fa1c:	f002 030c 	and.w	r3, r2, #12
 801fa20:	2b08      	cmp	r3, #8
 801fa22:	d119      	bne.n	801fa58 <_ftello_r+0xa0>
 801fa24:	6823      	ldr	r3, [r4, #0]
 801fa26:	b1bb      	cbz	r3, 801fa58 <_ftello_r+0xa0>
 801fa28:	6921      	ldr	r1, [r4, #16]
 801fa2a:	1a5b      	subs	r3, r3, r1
 801fa2c:	2b00      	cmp	r3, #0
 801fa2e:	dd13      	ble.n	801fa58 <_ftello_r+0xa0>
 801fa30:	05d0      	lsls	r0, r2, #23
 801fa32:	d511      	bpl.n	801fa58 <_ftello_r+0xa0>
 801fa34:	2302      	movs	r3, #2
 801fa36:	2200      	movs	r2, #0
 801fa38:	6a21      	ldr	r1, [r4, #32]
 801fa3a:	4628      	mov	r0, r5
 801fa3c:	47b0      	blx	r6
 801fa3e:	1c41      	adds	r1, r0, #1
 801fa40:	4605      	mov	r5, r0
 801fa42:	d10d      	bne.n	801fa60 <_ftello_r+0xa8>
 801fa44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fa46:	07da      	lsls	r2, r3, #31
 801fa48:	d4d2      	bmi.n	801f9f0 <_ftello_r+0x38>
 801fa4a:	89a3      	ldrh	r3, [r4, #12]
 801fa4c:	059b      	lsls	r3, r3, #22
 801fa4e:	d4cf      	bmi.n	801f9f0 <_ftello_r+0x38>
 801fa50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa52:	f000 f982 	bl	801fd5a <__retarget_lock_release_recursive>
 801fa56:	e7cd      	b.n	801f9f4 <_ftello_r+0x3c>
 801fa58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fa5c:	d00f      	beq.n	801fa7e <_ftello_r+0xc6>
 801fa5e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801fa60:	89a2      	ldrh	r2, [r4, #12]
 801fa62:	0756      	lsls	r6, r2, #29
 801fa64:	d50d      	bpl.n	801fa82 <_ftello_r+0xca>
 801fa66:	6863      	ldr	r3, [r4, #4]
 801fa68:	1aed      	subs	r5, r5, r3
 801fa6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fa6c:	b10b      	cbz	r3, 801fa72 <_ftello_r+0xba>
 801fa6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fa70:	1aed      	subs	r5, r5, r3
 801fa72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fa74:	07d9      	lsls	r1, r3, #31
 801fa76:	d4bd      	bmi.n	801f9f4 <_ftello_r+0x3c>
 801fa78:	0593      	lsls	r3, r2, #22
 801fa7a:	d4bb      	bmi.n	801f9f4 <_ftello_r+0x3c>
 801fa7c:	e7e8      	b.n	801fa50 <_ftello_r+0x98>
 801fa7e:	2301      	movs	r3, #1
 801fa80:	e7da      	b.n	801fa38 <_ftello_r+0x80>
 801fa82:	0710      	lsls	r0, r2, #28
 801fa84:	d5f5      	bpl.n	801fa72 <_ftello_r+0xba>
 801fa86:	6823      	ldr	r3, [r4, #0]
 801fa88:	2b00      	cmp	r3, #0
 801fa8a:	d0f2      	beq.n	801fa72 <_ftello_r+0xba>
 801fa8c:	6921      	ldr	r1, [r4, #16]
 801fa8e:	1a5b      	subs	r3, r3, r1
 801fa90:	441d      	add	r5, r3
 801fa92:	e7ee      	b.n	801fa72 <_ftello_r+0xba>
 801fa94:	08028d6c 	.word	0x08028d6c
 801fa98:	08028d8c 	.word	0x08028d8c
 801fa9c:	08028d4c 	.word	0x08028d4c

0801faa0 <_fwalk_reent>:
 801faa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801faa4:	4606      	mov	r6, r0
 801faa6:	4688      	mov	r8, r1
 801faa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801faac:	2700      	movs	r7, #0
 801faae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fab2:	f1b9 0901 	subs.w	r9, r9, #1
 801fab6:	d505      	bpl.n	801fac4 <_fwalk_reent+0x24>
 801fab8:	6824      	ldr	r4, [r4, #0]
 801faba:	2c00      	cmp	r4, #0
 801fabc:	d1f7      	bne.n	801faae <_fwalk_reent+0xe>
 801fabe:	4638      	mov	r0, r7
 801fac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fac4:	89ab      	ldrh	r3, [r5, #12]
 801fac6:	2b01      	cmp	r3, #1
 801fac8:	d907      	bls.n	801fada <_fwalk_reent+0x3a>
 801faca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801face:	3301      	adds	r3, #1
 801fad0:	d003      	beq.n	801fada <_fwalk_reent+0x3a>
 801fad2:	4629      	mov	r1, r5
 801fad4:	4630      	mov	r0, r6
 801fad6:	47c0      	blx	r8
 801fad8:	4307      	orrs	r7, r0
 801fada:	3568      	adds	r5, #104	; 0x68
 801fadc:	e7e9      	b.n	801fab2 <_fwalk_reent+0x12>
	...

0801fae0 <__libc_init_array>:
 801fae0:	b570      	push	{r4, r5, r6, lr}
 801fae2:	4d0d      	ldr	r5, [pc, #52]	; (801fb18 <__libc_init_array+0x38>)
 801fae4:	4c0d      	ldr	r4, [pc, #52]	; (801fb1c <__libc_init_array+0x3c>)
 801fae6:	1b64      	subs	r4, r4, r5
 801fae8:	10a4      	asrs	r4, r4, #2
 801faea:	2600      	movs	r6, #0
 801faec:	42a6      	cmp	r6, r4
 801faee:	d109      	bne.n	801fb04 <__libc_init_array+0x24>
 801faf0:	4d0b      	ldr	r5, [pc, #44]	; (801fb20 <__libc_init_array+0x40>)
 801faf2:	4c0c      	ldr	r4, [pc, #48]	; (801fb24 <__libc_init_array+0x44>)
 801faf4:	f003 f8d6 	bl	8022ca4 <_init>
 801faf8:	1b64      	subs	r4, r4, r5
 801fafa:	10a4      	asrs	r4, r4, #2
 801fafc:	2600      	movs	r6, #0
 801fafe:	42a6      	cmp	r6, r4
 801fb00:	d105      	bne.n	801fb0e <__libc_init_array+0x2e>
 801fb02:	bd70      	pop	{r4, r5, r6, pc}
 801fb04:	f855 3b04 	ldr.w	r3, [r5], #4
 801fb08:	4798      	blx	r3
 801fb0a:	3601      	adds	r6, #1
 801fb0c:	e7ee      	b.n	801faec <__libc_init_array+0xc>
 801fb0e:	f855 3b04 	ldr.w	r3, [r5], #4
 801fb12:	4798      	blx	r3
 801fb14:	3601      	adds	r6, #1
 801fb16:	e7f2      	b.n	801fafe <__libc_init_array+0x1e>
 801fb18:	08029344 	.word	0x08029344
 801fb1c:	08029344 	.word	0x08029344
 801fb20:	08029344 	.word	0x08029344
 801fb24:	08029354 	.word	0x08029354

0801fb28 <localtime>:
 801fb28:	b538      	push	{r3, r4, r5, lr}
 801fb2a:	4b0b      	ldr	r3, [pc, #44]	; (801fb58 <localtime+0x30>)
 801fb2c:	681d      	ldr	r5, [r3, #0]
 801fb2e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801fb30:	4604      	mov	r4, r0
 801fb32:	b953      	cbnz	r3, 801fb4a <localtime+0x22>
 801fb34:	2024      	movs	r0, #36	; 0x24
 801fb36:	f000 f975 	bl	801fe24 <malloc>
 801fb3a:	4602      	mov	r2, r0
 801fb3c:	63e8      	str	r0, [r5, #60]	; 0x3c
 801fb3e:	b920      	cbnz	r0, 801fb4a <localtime+0x22>
 801fb40:	4b06      	ldr	r3, [pc, #24]	; (801fb5c <localtime+0x34>)
 801fb42:	4807      	ldr	r0, [pc, #28]	; (801fb60 <localtime+0x38>)
 801fb44:	2132      	movs	r1, #50	; 0x32
 801fb46:	f001 fdd9 	bl	80216fc <__assert_func>
 801fb4a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801fb4c:	4620      	mov	r0, r4
 801fb4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fb52:	f000 b807 	b.w	801fb64 <localtime_r>
 801fb56:	bf00      	nop
 801fb58:	20000108 	.word	0x20000108
 801fb5c:	08028db0 	.word	0x08028db0
 801fb60:	08028dc7 	.word	0x08028dc7

0801fb64 <localtime_r>:
 801fb64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801fb68:	4607      	mov	r7, r0
 801fb6a:	9101      	str	r1, [sp, #4]
 801fb6c:	f001 fe90 	bl	8021890 <__gettzinfo>
 801fb70:	9901      	ldr	r1, [sp, #4]
 801fb72:	4680      	mov	r8, r0
 801fb74:	4638      	mov	r0, r7
 801fb76:	f001 fe8f 	bl	8021898 <gmtime_r>
 801fb7a:	6943      	ldr	r3, [r0, #20]
 801fb7c:	079a      	lsls	r2, r3, #30
 801fb7e:	4604      	mov	r4, r0
 801fb80:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801fb84:	d105      	bne.n	801fb92 <localtime_r+0x2e>
 801fb86:	2264      	movs	r2, #100	; 0x64
 801fb88:	fb96 f3f2 	sdiv	r3, r6, r2
 801fb8c:	fb02 6313 	mls	r3, r2, r3, r6
 801fb90:	bb7b      	cbnz	r3, 801fbf2 <localtime_r+0x8e>
 801fb92:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801fb96:	fb96 f5f3 	sdiv	r5, r6, r3
 801fb9a:	fb03 6515 	mls	r5, r3, r5, r6
 801fb9e:	fab5 f585 	clz	r5, r5
 801fba2:	096d      	lsrs	r5, r5, #5
 801fba4:	4b68      	ldr	r3, [pc, #416]	; (801fd48 <localtime_r+0x1e4>)
 801fba6:	2230      	movs	r2, #48	; 0x30
 801fba8:	fb02 3505 	mla	r5, r2, r5, r3
 801fbac:	f001 faa6 	bl	80210fc <__tz_lock>
 801fbb0:	f001 fab0 	bl	8021114 <_tzset_unlocked>
 801fbb4:	4b65      	ldr	r3, [pc, #404]	; (801fd4c <localtime_r+0x1e8>)
 801fbb6:	681b      	ldr	r3, [r3, #0]
 801fbb8:	b353      	cbz	r3, 801fc10 <localtime_r+0xac>
 801fbba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801fbbe:	42b3      	cmp	r3, r6
 801fbc0:	d119      	bne.n	801fbf6 <localtime_r+0x92>
 801fbc2:	f8d8 1000 	ldr.w	r1, [r8]
 801fbc6:	e9d7 6700 	ldrd	r6, r7, [r7]
 801fbca:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801fbce:	b9d1      	cbnz	r1, 801fc06 <localtime_r+0xa2>
 801fbd0:	4296      	cmp	r6, r2
 801fbd2:	eb77 0303 	sbcs.w	r3, r7, r3
 801fbd6:	da23      	bge.n	801fc20 <localtime_r+0xbc>
 801fbd8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801fbdc:	4296      	cmp	r6, r2
 801fbde:	eb77 0303 	sbcs.w	r3, r7, r3
 801fbe2:	bfb4      	ite	lt
 801fbe4:	2301      	movlt	r3, #1
 801fbe6:	2300      	movge	r3, #0
 801fbe8:	6223      	str	r3, [r4, #32]
 801fbea:	db1b      	blt.n	801fc24 <localtime_r+0xc0>
 801fbec:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801fbf0:	e01a      	b.n	801fc28 <localtime_r+0xc4>
 801fbf2:	2501      	movs	r5, #1
 801fbf4:	e7d6      	b.n	801fba4 <localtime_r+0x40>
 801fbf6:	4630      	mov	r0, r6
 801fbf8:	f001 f9d8 	bl	8020fac <__tzcalc_limits>
 801fbfc:	2800      	cmp	r0, #0
 801fbfe:	d1e0      	bne.n	801fbc2 <localtime_r+0x5e>
 801fc00:	f04f 33ff 	mov.w	r3, #4294967295
 801fc04:	e004      	b.n	801fc10 <localtime_r+0xac>
 801fc06:	4296      	cmp	r6, r2
 801fc08:	eb77 0303 	sbcs.w	r3, r7, r3
 801fc0c:	da02      	bge.n	801fc14 <localtime_r+0xb0>
 801fc0e:	2300      	movs	r3, #0
 801fc10:	6223      	str	r3, [r4, #32]
 801fc12:	e7eb      	b.n	801fbec <localtime_r+0x88>
 801fc14:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801fc18:	4296      	cmp	r6, r2
 801fc1a:	eb77 0303 	sbcs.w	r3, r7, r3
 801fc1e:	daf6      	bge.n	801fc0e <localtime_r+0xaa>
 801fc20:	2301      	movs	r3, #1
 801fc22:	6223      	str	r3, [r4, #32]
 801fc24:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801fc28:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801fc2c:	203c      	movs	r0, #60	; 0x3c
 801fc2e:	fb91 f6f3 	sdiv	r6, r1, r3
 801fc32:	fb03 1316 	mls	r3, r3, r6, r1
 801fc36:	6861      	ldr	r1, [r4, #4]
 801fc38:	fb93 f2f0 	sdiv	r2, r3, r0
 801fc3c:	fb00 3012 	mls	r0, r0, r2, r3
 801fc40:	6823      	ldr	r3, [r4, #0]
 801fc42:	1a89      	subs	r1, r1, r2
 801fc44:	68a2      	ldr	r2, [r4, #8]
 801fc46:	6061      	str	r1, [r4, #4]
 801fc48:	1a1b      	subs	r3, r3, r0
 801fc4a:	1b92      	subs	r2, r2, r6
 801fc4c:	2b3b      	cmp	r3, #59	; 0x3b
 801fc4e:	6023      	str	r3, [r4, #0]
 801fc50:	60a2      	str	r2, [r4, #8]
 801fc52:	dd35      	ble.n	801fcc0 <localtime_r+0x15c>
 801fc54:	3101      	adds	r1, #1
 801fc56:	6061      	str	r1, [r4, #4]
 801fc58:	3b3c      	subs	r3, #60	; 0x3c
 801fc5a:	6023      	str	r3, [r4, #0]
 801fc5c:	6863      	ldr	r3, [r4, #4]
 801fc5e:	2b3b      	cmp	r3, #59	; 0x3b
 801fc60:	dd34      	ble.n	801fccc <localtime_r+0x168>
 801fc62:	3201      	adds	r2, #1
 801fc64:	60a2      	str	r2, [r4, #8]
 801fc66:	3b3c      	subs	r3, #60	; 0x3c
 801fc68:	6063      	str	r3, [r4, #4]
 801fc6a:	68a3      	ldr	r3, [r4, #8]
 801fc6c:	2b17      	cmp	r3, #23
 801fc6e:	dd33      	ble.n	801fcd8 <localtime_r+0x174>
 801fc70:	69e2      	ldr	r2, [r4, #28]
 801fc72:	3201      	adds	r2, #1
 801fc74:	61e2      	str	r2, [r4, #28]
 801fc76:	69a2      	ldr	r2, [r4, #24]
 801fc78:	3201      	adds	r2, #1
 801fc7a:	2a06      	cmp	r2, #6
 801fc7c:	bfc8      	it	gt
 801fc7e:	2200      	movgt	r2, #0
 801fc80:	61a2      	str	r2, [r4, #24]
 801fc82:	68e2      	ldr	r2, [r4, #12]
 801fc84:	3b18      	subs	r3, #24
 801fc86:	3201      	adds	r2, #1
 801fc88:	60a3      	str	r3, [r4, #8]
 801fc8a:	6923      	ldr	r3, [r4, #16]
 801fc8c:	60e2      	str	r2, [r4, #12]
 801fc8e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801fc92:	428a      	cmp	r2, r1
 801fc94:	dd0e      	ble.n	801fcb4 <localtime_r+0x150>
 801fc96:	2b0b      	cmp	r3, #11
 801fc98:	eba2 0201 	sub.w	r2, r2, r1
 801fc9c:	60e2      	str	r2, [r4, #12]
 801fc9e:	f103 0201 	add.w	r2, r3, #1
 801fca2:	bf09      	itett	eq
 801fca4:	6963      	ldreq	r3, [r4, #20]
 801fca6:	6122      	strne	r2, [r4, #16]
 801fca8:	2200      	moveq	r2, #0
 801fcaa:	3301      	addeq	r3, #1
 801fcac:	bf02      	ittt	eq
 801fcae:	6122      	streq	r2, [r4, #16]
 801fcb0:	6163      	streq	r3, [r4, #20]
 801fcb2:	61e2      	streq	r2, [r4, #28]
 801fcb4:	f001 fa28 	bl	8021108 <__tz_unlock>
 801fcb8:	4620      	mov	r0, r4
 801fcba:	b002      	add	sp, #8
 801fcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fcc0:	2b00      	cmp	r3, #0
 801fcc2:	dacb      	bge.n	801fc5c <localtime_r+0xf8>
 801fcc4:	3901      	subs	r1, #1
 801fcc6:	6061      	str	r1, [r4, #4]
 801fcc8:	333c      	adds	r3, #60	; 0x3c
 801fcca:	e7c6      	b.n	801fc5a <localtime_r+0xf6>
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	dacc      	bge.n	801fc6a <localtime_r+0x106>
 801fcd0:	3a01      	subs	r2, #1
 801fcd2:	60a2      	str	r2, [r4, #8]
 801fcd4:	333c      	adds	r3, #60	; 0x3c
 801fcd6:	e7c7      	b.n	801fc68 <localtime_r+0x104>
 801fcd8:	2b00      	cmp	r3, #0
 801fcda:	daeb      	bge.n	801fcb4 <localtime_r+0x150>
 801fcdc:	69e2      	ldr	r2, [r4, #28]
 801fcde:	3a01      	subs	r2, #1
 801fce0:	61e2      	str	r2, [r4, #28]
 801fce2:	69a2      	ldr	r2, [r4, #24]
 801fce4:	3a01      	subs	r2, #1
 801fce6:	bf48      	it	mi
 801fce8:	2206      	movmi	r2, #6
 801fcea:	61a2      	str	r2, [r4, #24]
 801fcec:	68e2      	ldr	r2, [r4, #12]
 801fcee:	3318      	adds	r3, #24
 801fcf0:	3a01      	subs	r2, #1
 801fcf2:	60e2      	str	r2, [r4, #12]
 801fcf4:	60a3      	str	r3, [r4, #8]
 801fcf6:	2a00      	cmp	r2, #0
 801fcf8:	d1dc      	bne.n	801fcb4 <localtime_r+0x150>
 801fcfa:	6923      	ldr	r3, [r4, #16]
 801fcfc:	3b01      	subs	r3, #1
 801fcfe:	d405      	bmi.n	801fd0c <localtime_r+0x1a8>
 801fd00:	6123      	str	r3, [r4, #16]
 801fd02:	6923      	ldr	r3, [r4, #16]
 801fd04:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801fd08:	60e3      	str	r3, [r4, #12]
 801fd0a:	e7d3      	b.n	801fcb4 <localtime_r+0x150>
 801fd0c:	230b      	movs	r3, #11
 801fd0e:	6123      	str	r3, [r4, #16]
 801fd10:	6963      	ldr	r3, [r4, #20]
 801fd12:	1e5a      	subs	r2, r3, #1
 801fd14:	6162      	str	r2, [r4, #20]
 801fd16:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801fd1a:	0793      	lsls	r3, r2, #30
 801fd1c:	d105      	bne.n	801fd2a <localtime_r+0x1c6>
 801fd1e:	2164      	movs	r1, #100	; 0x64
 801fd20:	fb92 f3f1 	sdiv	r3, r2, r1
 801fd24:	fb01 2313 	mls	r3, r1, r3, r2
 801fd28:	b963      	cbnz	r3, 801fd44 <localtime_r+0x1e0>
 801fd2a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801fd2e:	fb92 f3f1 	sdiv	r3, r2, r1
 801fd32:	fb01 2313 	mls	r3, r1, r3, r2
 801fd36:	fab3 f383 	clz	r3, r3
 801fd3a:	095b      	lsrs	r3, r3, #5
 801fd3c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801fd40:	61e3      	str	r3, [r4, #28]
 801fd42:	e7de      	b.n	801fd02 <localtime_r+0x19e>
 801fd44:	2301      	movs	r3, #1
 801fd46:	e7f9      	b.n	801fd3c <localtime_r+0x1d8>
 801fd48:	08028e28 	.word	0x08028e28
 801fd4c:	20000eec 	.word	0x20000eec

0801fd50 <__retarget_lock_init_recursive>:
 801fd50:	4770      	bx	lr

0801fd52 <__retarget_lock_close_recursive>:
 801fd52:	4770      	bx	lr

0801fd54 <__retarget_lock_acquire>:
 801fd54:	4770      	bx	lr

0801fd56 <__retarget_lock_acquire_recursive>:
 801fd56:	4770      	bx	lr

0801fd58 <__retarget_lock_release>:
 801fd58:	4770      	bx	lr

0801fd5a <__retarget_lock_release_recursive>:
 801fd5a:	4770      	bx	lr

0801fd5c <__swhatbuf_r>:
 801fd5c:	b570      	push	{r4, r5, r6, lr}
 801fd5e:	460e      	mov	r6, r1
 801fd60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd64:	2900      	cmp	r1, #0
 801fd66:	b096      	sub	sp, #88	; 0x58
 801fd68:	4614      	mov	r4, r2
 801fd6a:	461d      	mov	r5, r3
 801fd6c:	da07      	bge.n	801fd7e <__swhatbuf_r+0x22>
 801fd6e:	2300      	movs	r3, #0
 801fd70:	602b      	str	r3, [r5, #0]
 801fd72:	89b3      	ldrh	r3, [r6, #12]
 801fd74:	061a      	lsls	r2, r3, #24
 801fd76:	d410      	bmi.n	801fd9a <__swhatbuf_r+0x3e>
 801fd78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fd7c:	e00e      	b.n	801fd9c <__swhatbuf_r+0x40>
 801fd7e:	466a      	mov	r2, sp
 801fd80:	f001 fd32 	bl	80217e8 <_fstat_r>
 801fd84:	2800      	cmp	r0, #0
 801fd86:	dbf2      	blt.n	801fd6e <__swhatbuf_r+0x12>
 801fd88:	9a01      	ldr	r2, [sp, #4]
 801fd8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801fd8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fd92:	425a      	negs	r2, r3
 801fd94:	415a      	adcs	r2, r3
 801fd96:	602a      	str	r2, [r5, #0]
 801fd98:	e7ee      	b.n	801fd78 <__swhatbuf_r+0x1c>
 801fd9a:	2340      	movs	r3, #64	; 0x40
 801fd9c:	2000      	movs	r0, #0
 801fd9e:	6023      	str	r3, [r4, #0]
 801fda0:	b016      	add	sp, #88	; 0x58
 801fda2:	bd70      	pop	{r4, r5, r6, pc}

0801fda4 <__smakebuf_r>:
 801fda4:	898b      	ldrh	r3, [r1, #12]
 801fda6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fda8:	079d      	lsls	r5, r3, #30
 801fdaa:	4606      	mov	r6, r0
 801fdac:	460c      	mov	r4, r1
 801fdae:	d507      	bpl.n	801fdc0 <__smakebuf_r+0x1c>
 801fdb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fdb4:	6023      	str	r3, [r4, #0]
 801fdb6:	6123      	str	r3, [r4, #16]
 801fdb8:	2301      	movs	r3, #1
 801fdba:	6163      	str	r3, [r4, #20]
 801fdbc:	b002      	add	sp, #8
 801fdbe:	bd70      	pop	{r4, r5, r6, pc}
 801fdc0:	ab01      	add	r3, sp, #4
 801fdc2:	466a      	mov	r2, sp
 801fdc4:	f7ff ffca 	bl	801fd5c <__swhatbuf_r>
 801fdc8:	9900      	ldr	r1, [sp, #0]
 801fdca:	4605      	mov	r5, r0
 801fdcc:	4630      	mov	r0, r6
 801fdce:	f000 f8af 	bl	801ff30 <_malloc_r>
 801fdd2:	b948      	cbnz	r0, 801fde8 <__smakebuf_r+0x44>
 801fdd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fdd8:	059a      	lsls	r2, r3, #22
 801fdda:	d4ef      	bmi.n	801fdbc <__smakebuf_r+0x18>
 801fddc:	f023 0303 	bic.w	r3, r3, #3
 801fde0:	f043 0302 	orr.w	r3, r3, #2
 801fde4:	81a3      	strh	r3, [r4, #12]
 801fde6:	e7e3      	b.n	801fdb0 <__smakebuf_r+0xc>
 801fde8:	4b0d      	ldr	r3, [pc, #52]	; (801fe20 <__smakebuf_r+0x7c>)
 801fdea:	62b3      	str	r3, [r6, #40]	; 0x28
 801fdec:	89a3      	ldrh	r3, [r4, #12]
 801fdee:	6020      	str	r0, [r4, #0]
 801fdf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fdf4:	81a3      	strh	r3, [r4, #12]
 801fdf6:	9b00      	ldr	r3, [sp, #0]
 801fdf8:	6163      	str	r3, [r4, #20]
 801fdfa:	9b01      	ldr	r3, [sp, #4]
 801fdfc:	6120      	str	r0, [r4, #16]
 801fdfe:	b15b      	cbz	r3, 801fe18 <__smakebuf_r+0x74>
 801fe00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fe04:	4630      	mov	r0, r6
 801fe06:	f001 fdf7 	bl	80219f8 <_isatty_r>
 801fe0a:	b128      	cbz	r0, 801fe18 <__smakebuf_r+0x74>
 801fe0c:	89a3      	ldrh	r3, [r4, #12]
 801fe0e:	f023 0303 	bic.w	r3, r3, #3
 801fe12:	f043 0301 	orr.w	r3, r3, #1
 801fe16:	81a3      	strh	r3, [r4, #12]
 801fe18:	89a0      	ldrh	r0, [r4, #12]
 801fe1a:	4305      	orrs	r5, r0
 801fe1c:	81a5      	strh	r5, [r4, #12]
 801fe1e:	e7cd      	b.n	801fdbc <__smakebuf_r+0x18>
 801fe20:	0801f589 	.word	0x0801f589

0801fe24 <malloc>:
 801fe24:	4b02      	ldr	r3, [pc, #8]	; (801fe30 <malloc+0xc>)
 801fe26:	4601      	mov	r1, r0
 801fe28:	6818      	ldr	r0, [r3, #0]
 801fe2a:	f000 b881 	b.w	801ff30 <_malloc_r>
 801fe2e:	bf00      	nop
 801fe30:	20000108 	.word	0x20000108

0801fe34 <free>:
 801fe34:	4b02      	ldr	r3, [pc, #8]	; (801fe40 <free+0xc>)
 801fe36:	4601      	mov	r1, r0
 801fe38:	6818      	ldr	r0, [r3, #0]
 801fe3a:	f000 b829 	b.w	801fe90 <_free_r>
 801fe3e:	bf00      	nop
 801fe40:	20000108 	.word	0x20000108

0801fe44 <memcpy>:
 801fe44:	440a      	add	r2, r1
 801fe46:	4291      	cmp	r1, r2
 801fe48:	f100 33ff 	add.w	r3, r0, #4294967295
 801fe4c:	d100      	bne.n	801fe50 <memcpy+0xc>
 801fe4e:	4770      	bx	lr
 801fe50:	b510      	push	{r4, lr}
 801fe52:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fe56:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fe5a:	4291      	cmp	r1, r2
 801fe5c:	d1f9      	bne.n	801fe52 <memcpy+0xe>
 801fe5e:	bd10      	pop	{r4, pc}

0801fe60 <memset>:
 801fe60:	4402      	add	r2, r0
 801fe62:	4603      	mov	r3, r0
 801fe64:	4293      	cmp	r3, r2
 801fe66:	d100      	bne.n	801fe6a <memset+0xa>
 801fe68:	4770      	bx	lr
 801fe6a:	f803 1b01 	strb.w	r1, [r3], #1
 801fe6e:	e7f9      	b.n	801fe64 <memset+0x4>

0801fe70 <_calloc_r>:
 801fe70:	b513      	push	{r0, r1, r4, lr}
 801fe72:	434a      	muls	r2, r1
 801fe74:	4611      	mov	r1, r2
 801fe76:	9201      	str	r2, [sp, #4]
 801fe78:	f000 f85a 	bl	801ff30 <_malloc_r>
 801fe7c:	4604      	mov	r4, r0
 801fe7e:	b118      	cbz	r0, 801fe88 <_calloc_r+0x18>
 801fe80:	9a01      	ldr	r2, [sp, #4]
 801fe82:	2100      	movs	r1, #0
 801fe84:	f7ff ffec 	bl	801fe60 <memset>
 801fe88:	4620      	mov	r0, r4
 801fe8a:	b002      	add	sp, #8
 801fe8c:	bd10      	pop	{r4, pc}
	...

0801fe90 <_free_r>:
 801fe90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fe92:	2900      	cmp	r1, #0
 801fe94:	d048      	beq.n	801ff28 <_free_r+0x98>
 801fe96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fe9a:	9001      	str	r0, [sp, #4]
 801fe9c:	2b00      	cmp	r3, #0
 801fe9e:	f1a1 0404 	sub.w	r4, r1, #4
 801fea2:	bfb8      	it	lt
 801fea4:	18e4      	addlt	r4, r4, r3
 801fea6:	f001 fddf 	bl	8021a68 <__malloc_lock>
 801feaa:	4a20      	ldr	r2, [pc, #128]	; (801ff2c <_free_r+0x9c>)
 801feac:	9801      	ldr	r0, [sp, #4]
 801feae:	6813      	ldr	r3, [r2, #0]
 801feb0:	4615      	mov	r5, r2
 801feb2:	b933      	cbnz	r3, 801fec2 <_free_r+0x32>
 801feb4:	6063      	str	r3, [r4, #4]
 801feb6:	6014      	str	r4, [r2, #0]
 801feb8:	b003      	add	sp, #12
 801feba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801febe:	f001 bdd9 	b.w	8021a74 <__malloc_unlock>
 801fec2:	42a3      	cmp	r3, r4
 801fec4:	d90b      	bls.n	801fede <_free_r+0x4e>
 801fec6:	6821      	ldr	r1, [r4, #0]
 801fec8:	1862      	adds	r2, r4, r1
 801feca:	4293      	cmp	r3, r2
 801fecc:	bf04      	itt	eq
 801fece:	681a      	ldreq	r2, [r3, #0]
 801fed0:	685b      	ldreq	r3, [r3, #4]
 801fed2:	6063      	str	r3, [r4, #4]
 801fed4:	bf04      	itt	eq
 801fed6:	1852      	addeq	r2, r2, r1
 801fed8:	6022      	streq	r2, [r4, #0]
 801feda:	602c      	str	r4, [r5, #0]
 801fedc:	e7ec      	b.n	801feb8 <_free_r+0x28>
 801fede:	461a      	mov	r2, r3
 801fee0:	685b      	ldr	r3, [r3, #4]
 801fee2:	b10b      	cbz	r3, 801fee8 <_free_r+0x58>
 801fee4:	42a3      	cmp	r3, r4
 801fee6:	d9fa      	bls.n	801fede <_free_r+0x4e>
 801fee8:	6811      	ldr	r1, [r2, #0]
 801feea:	1855      	adds	r5, r2, r1
 801feec:	42a5      	cmp	r5, r4
 801feee:	d10b      	bne.n	801ff08 <_free_r+0x78>
 801fef0:	6824      	ldr	r4, [r4, #0]
 801fef2:	4421      	add	r1, r4
 801fef4:	1854      	adds	r4, r2, r1
 801fef6:	42a3      	cmp	r3, r4
 801fef8:	6011      	str	r1, [r2, #0]
 801fefa:	d1dd      	bne.n	801feb8 <_free_r+0x28>
 801fefc:	681c      	ldr	r4, [r3, #0]
 801fefe:	685b      	ldr	r3, [r3, #4]
 801ff00:	6053      	str	r3, [r2, #4]
 801ff02:	4421      	add	r1, r4
 801ff04:	6011      	str	r1, [r2, #0]
 801ff06:	e7d7      	b.n	801feb8 <_free_r+0x28>
 801ff08:	d902      	bls.n	801ff10 <_free_r+0x80>
 801ff0a:	230c      	movs	r3, #12
 801ff0c:	6003      	str	r3, [r0, #0]
 801ff0e:	e7d3      	b.n	801feb8 <_free_r+0x28>
 801ff10:	6825      	ldr	r5, [r4, #0]
 801ff12:	1961      	adds	r1, r4, r5
 801ff14:	428b      	cmp	r3, r1
 801ff16:	bf04      	itt	eq
 801ff18:	6819      	ldreq	r1, [r3, #0]
 801ff1a:	685b      	ldreq	r3, [r3, #4]
 801ff1c:	6063      	str	r3, [r4, #4]
 801ff1e:	bf04      	itt	eq
 801ff20:	1949      	addeq	r1, r1, r5
 801ff22:	6021      	streq	r1, [r4, #0]
 801ff24:	6054      	str	r4, [r2, #4]
 801ff26:	e7c7      	b.n	801feb8 <_free_r+0x28>
 801ff28:	b003      	add	sp, #12
 801ff2a:	bd30      	pop	{r4, r5, pc}
 801ff2c:	20000ec8 	.word	0x20000ec8

0801ff30 <_malloc_r>:
 801ff30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff32:	1ccd      	adds	r5, r1, #3
 801ff34:	f025 0503 	bic.w	r5, r5, #3
 801ff38:	3508      	adds	r5, #8
 801ff3a:	2d0c      	cmp	r5, #12
 801ff3c:	bf38      	it	cc
 801ff3e:	250c      	movcc	r5, #12
 801ff40:	2d00      	cmp	r5, #0
 801ff42:	4606      	mov	r6, r0
 801ff44:	db01      	blt.n	801ff4a <_malloc_r+0x1a>
 801ff46:	42a9      	cmp	r1, r5
 801ff48:	d903      	bls.n	801ff52 <_malloc_r+0x22>
 801ff4a:	230c      	movs	r3, #12
 801ff4c:	6033      	str	r3, [r6, #0]
 801ff4e:	2000      	movs	r0, #0
 801ff50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ff52:	f001 fd89 	bl	8021a68 <__malloc_lock>
 801ff56:	4921      	ldr	r1, [pc, #132]	; (801ffdc <_malloc_r+0xac>)
 801ff58:	680a      	ldr	r2, [r1, #0]
 801ff5a:	4614      	mov	r4, r2
 801ff5c:	b99c      	cbnz	r4, 801ff86 <_malloc_r+0x56>
 801ff5e:	4f20      	ldr	r7, [pc, #128]	; (801ffe0 <_malloc_r+0xb0>)
 801ff60:	683b      	ldr	r3, [r7, #0]
 801ff62:	b923      	cbnz	r3, 801ff6e <_malloc_r+0x3e>
 801ff64:	4621      	mov	r1, r4
 801ff66:	4630      	mov	r0, r6
 801ff68:	f000 f8da 	bl	8020120 <_sbrk_r>
 801ff6c:	6038      	str	r0, [r7, #0]
 801ff6e:	4629      	mov	r1, r5
 801ff70:	4630      	mov	r0, r6
 801ff72:	f000 f8d5 	bl	8020120 <_sbrk_r>
 801ff76:	1c43      	adds	r3, r0, #1
 801ff78:	d123      	bne.n	801ffc2 <_malloc_r+0x92>
 801ff7a:	230c      	movs	r3, #12
 801ff7c:	6033      	str	r3, [r6, #0]
 801ff7e:	4630      	mov	r0, r6
 801ff80:	f001 fd78 	bl	8021a74 <__malloc_unlock>
 801ff84:	e7e3      	b.n	801ff4e <_malloc_r+0x1e>
 801ff86:	6823      	ldr	r3, [r4, #0]
 801ff88:	1b5b      	subs	r3, r3, r5
 801ff8a:	d417      	bmi.n	801ffbc <_malloc_r+0x8c>
 801ff8c:	2b0b      	cmp	r3, #11
 801ff8e:	d903      	bls.n	801ff98 <_malloc_r+0x68>
 801ff90:	6023      	str	r3, [r4, #0]
 801ff92:	441c      	add	r4, r3
 801ff94:	6025      	str	r5, [r4, #0]
 801ff96:	e004      	b.n	801ffa2 <_malloc_r+0x72>
 801ff98:	6863      	ldr	r3, [r4, #4]
 801ff9a:	42a2      	cmp	r2, r4
 801ff9c:	bf0c      	ite	eq
 801ff9e:	600b      	streq	r3, [r1, #0]
 801ffa0:	6053      	strne	r3, [r2, #4]
 801ffa2:	4630      	mov	r0, r6
 801ffa4:	f001 fd66 	bl	8021a74 <__malloc_unlock>
 801ffa8:	f104 000b 	add.w	r0, r4, #11
 801ffac:	1d23      	adds	r3, r4, #4
 801ffae:	f020 0007 	bic.w	r0, r0, #7
 801ffb2:	1ac2      	subs	r2, r0, r3
 801ffb4:	d0cc      	beq.n	801ff50 <_malloc_r+0x20>
 801ffb6:	1a1b      	subs	r3, r3, r0
 801ffb8:	50a3      	str	r3, [r4, r2]
 801ffba:	e7c9      	b.n	801ff50 <_malloc_r+0x20>
 801ffbc:	4622      	mov	r2, r4
 801ffbe:	6864      	ldr	r4, [r4, #4]
 801ffc0:	e7cc      	b.n	801ff5c <_malloc_r+0x2c>
 801ffc2:	1cc4      	adds	r4, r0, #3
 801ffc4:	f024 0403 	bic.w	r4, r4, #3
 801ffc8:	42a0      	cmp	r0, r4
 801ffca:	d0e3      	beq.n	801ff94 <_malloc_r+0x64>
 801ffcc:	1a21      	subs	r1, r4, r0
 801ffce:	4630      	mov	r0, r6
 801ffd0:	f000 f8a6 	bl	8020120 <_sbrk_r>
 801ffd4:	3001      	adds	r0, #1
 801ffd6:	d1dd      	bne.n	801ff94 <_malloc_r+0x64>
 801ffd8:	e7cf      	b.n	801ff7a <_malloc_r+0x4a>
 801ffda:	bf00      	nop
 801ffdc:	20000ec8 	.word	0x20000ec8
 801ffe0:	20000ecc 	.word	0x20000ecc

0801ffe4 <_open_r>:
 801ffe4:	b538      	push	{r3, r4, r5, lr}
 801ffe6:	4d07      	ldr	r5, [pc, #28]	; (8020004 <_open_r+0x20>)
 801ffe8:	4604      	mov	r4, r0
 801ffea:	4608      	mov	r0, r1
 801ffec:	4611      	mov	r1, r2
 801ffee:	2200      	movs	r2, #0
 801fff0:	602a      	str	r2, [r5, #0]
 801fff2:	461a      	mov	r2, r3
 801fff4:	f7e0 ff32 	bl	8000e5c <_open>
 801fff8:	1c43      	adds	r3, r0, #1
 801fffa:	d102      	bne.n	8020002 <_open_r+0x1e>
 801fffc:	682b      	ldr	r3, [r5, #0]
 801fffe:	b103      	cbz	r3, 8020002 <_open_r+0x1e>
 8020000:	6023      	str	r3, [r4, #0]
 8020002:	bd38      	pop	{r3, r4, r5, pc}
 8020004:	20000f94 	.word	0x20000f94

08020008 <putchar>:
 8020008:	4b09      	ldr	r3, [pc, #36]	; (8020030 <putchar+0x28>)
 802000a:	b513      	push	{r0, r1, r4, lr}
 802000c:	681c      	ldr	r4, [r3, #0]
 802000e:	4601      	mov	r1, r0
 8020010:	b134      	cbz	r4, 8020020 <putchar+0x18>
 8020012:	69a3      	ldr	r3, [r4, #24]
 8020014:	b923      	cbnz	r3, 8020020 <putchar+0x18>
 8020016:	9001      	str	r0, [sp, #4]
 8020018:	4620      	mov	r0, r4
 802001a:	f7ff fae9 	bl	801f5f0 <__sinit>
 802001e:	9901      	ldr	r1, [sp, #4]
 8020020:	68a2      	ldr	r2, [r4, #8]
 8020022:	4620      	mov	r0, r4
 8020024:	b002      	add	sp, #8
 8020026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802002a:	f002 b999 	b.w	8022360 <_putc_r>
 802002e:	bf00      	nop
 8020030:	20000108 	.word	0x20000108

08020034 <srand>:
 8020034:	b538      	push	{r3, r4, r5, lr}
 8020036:	4b10      	ldr	r3, [pc, #64]	; (8020078 <srand+0x44>)
 8020038:	681d      	ldr	r5, [r3, #0]
 802003a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802003c:	4604      	mov	r4, r0
 802003e:	b9b3      	cbnz	r3, 802006e <srand+0x3a>
 8020040:	2018      	movs	r0, #24
 8020042:	f7ff feef 	bl	801fe24 <malloc>
 8020046:	4602      	mov	r2, r0
 8020048:	63a8      	str	r0, [r5, #56]	; 0x38
 802004a:	b920      	cbnz	r0, 8020056 <srand+0x22>
 802004c:	4b0b      	ldr	r3, [pc, #44]	; (802007c <srand+0x48>)
 802004e:	480c      	ldr	r0, [pc, #48]	; (8020080 <srand+0x4c>)
 8020050:	2142      	movs	r1, #66	; 0x42
 8020052:	f001 fb53 	bl	80216fc <__assert_func>
 8020056:	490b      	ldr	r1, [pc, #44]	; (8020084 <srand+0x50>)
 8020058:	4b0b      	ldr	r3, [pc, #44]	; (8020088 <srand+0x54>)
 802005a:	e9c0 1300 	strd	r1, r3, [r0]
 802005e:	4b0b      	ldr	r3, [pc, #44]	; (802008c <srand+0x58>)
 8020060:	6083      	str	r3, [r0, #8]
 8020062:	230b      	movs	r3, #11
 8020064:	8183      	strh	r3, [r0, #12]
 8020066:	2100      	movs	r1, #0
 8020068:	2001      	movs	r0, #1
 802006a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802006e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8020070:	2200      	movs	r2, #0
 8020072:	611c      	str	r4, [r3, #16]
 8020074:	615a      	str	r2, [r3, #20]
 8020076:	bd38      	pop	{r3, r4, r5, pc}
 8020078:	20000108 	.word	0x20000108
 802007c:	08028db0 	.word	0x08028db0
 8020080:	08028e88 	.word	0x08028e88
 8020084:	abcd330e 	.word	0xabcd330e
 8020088:	e66d1234 	.word	0xe66d1234
 802008c:	0005deec 	.word	0x0005deec

08020090 <rand>:
 8020090:	4b17      	ldr	r3, [pc, #92]	; (80200f0 <rand+0x60>)
 8020092:	b510      	push	{r4, lr}
 8020094:	681c      	ldr	r4, [r3, #0]
 8020096:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020098:	b9b3      	cbnz	r3, 80200c8 <rand+0x38>
 802009a:	2018      	movs	r0, #24
 802009c:	f7ff fec2 	bl	801fe24 <malloc>
 80200a0:	63a0      	str	r0, [r4, #56]	; 0x38
 80200a2:	b928      	cbnz	r0, 80200b0 <rand+0x20>
 80200a4:	4602      	mov	r2, r0
 80200a6:	4b13      	ldr	r3, [pc, #76]	; (80200f4 <rand+0x64>)
 80200a8:	4813      	ldr	r0, [pc, #76]	; (80200f8 <rand+0x68>)
 80200aa:	214e      	movs	r1, #78	; 0x4e
 80200ac:	f001 fb26 	bl	80216fc <__assert_func>
 80200b0:	4a12      	ldr	r2, [pc, #72]	; (80200fc <rand+0x6c>)
 80200b2:	4b13      	ldr	r3, [pc, #76]	; (8020100 <rand+0x70>)
 80200b4:	e9c0 2300 	strd	r2, r3, [r0]
 80200b8:	4b12      	ldr	r3, [pc, #72]	; (8020104 <rand+0x74>)
 80200ba:	6083      	str	r3, [r0, #8]
 80200bc:	230b      	movs	r3, #11
 80200be:	8183      	strh	r3, [r0, #12]
 80200c0:	2201      	movs	r2, #1
 80200c2:	2300      	movs	r3, #0
 80200c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80200c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80200ca:	480f      	ldr	r0, [pc, #60]	; (8020108 <rand+0x78>)
 80200cc:	690a      	ldr	r2, [r1, #16]
 80200ce:	694b      	ldr	r3, [r1, #20]
 80200d0:	4c0e      	ldr	r4, [pc, #56]	; (802010c <rand+0x7c>)
 80200d2:	4350      	muls	r0, r2
 80200d4:	fb04 0003 	mla	r0, r4, r3, r0
 80200d8:	fba2 3404 	umull	r3, r4, r2, r4
 80200dc:	1c5a      	adds	r2, r3, #1
 80200de:	4404      	add	r4, r0
 80200e0:	f144 0000 	adc.w	r0, r4, #0
 80200e4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80200e8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80200ec:	bd10      	pop	{r4, pc}
 80200ee:	bf00      	nop
 80200f0:	20000108 	.word	0x20000108
 80200f4:	08028db0 	.word	0x08028db0
 80200f8:	08028e88 	.word	0x08028e88
 80200fc:	abcd330e 	.word	0xabcd330e
 8020100:	e66d1234 	.word	0xe66d1234
 8020104:	0005deec 	.word	0x0005deec
 8020108:	5851f42d 	.word	0x5851f42d
 802010c:	4c957f2d 	.word	0x4c957f2d

08020110 <realloc>:
 8020110:	4b02      	ldr	r3, [pc, #8]	; (802011c <realloc+0xc>)
 8020112:	460a      	mov	r2, r1
 8020114:	4601      	mov	r1, r0
 8020116:	6818      	ldr	r0, [r3, #0]
 8020118:	f001 bcb2 	b.w	8021a80 <_realloc_r>
 802011c:	20000108 	.word	0x20000108

08020120 <_sbrk_r>:
 8020120:	b538      	push	{r3, r4, r5, lr}
 8020122:	4d06      	ldr	r5, [pc, #24]	; (802013c <_sbrk_r+0x1c>)
 8020124:	2300      	movs	r3, #0
 8020126:	4604      	mov	r4, r0
 8020128:	4608      	mov	r0, r1
 802012a:	602b      	str	r3, [r5, #0]
 802012c:	f7e0 fea4 	bl	8000e78 <_sbrk>
 8020130:	1c43      	adds	r3, r0, #1
 8020132:	d102      	bne.n	802013a <_sbrk_r+0x1a>
 8020134:	682b      	ldr	r3, [r5, #0]
 8020136:	b103      	cbz	r3, 802013a <_sbrk_r+0x1a>
 8020138:	6023      	str	r3, [r4, #0]
 802013a:	bd38      	pop	{r3, r4, r5, pc}
 802013c:	20000f94 	.word	0x20000f94

08020140 <_raise_r>:
 8020140:	291f      	cmp	r1, #31
 8020142:	b538      	push	{r3, r4, r5, lr}
 8020144:	4604      	mov	r4, r0
 8020146:	460d      	mov	r5, r1
 8020148:	d904      	bls.n	8020154 <_raise_r+0x14>
 802014a:	2316      	movs	r3, #22
 802014c:	6003      	str	r3, [r0, #0]
 802014e:	f04f 30ff 	mov.w	r0, #4294967295
 8020152:	bd38      	pop	{r3, r4, r5, pc}
 8020154:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020156:	b112      	cbz	r2, 802015e <_raise_r+0x1e>
 8020158:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802015c:	b94b      	cbnz	r3, 8020172 <_raise_r+0x32>
 802015e:	4620      	mov	r0, r4
 8020160:	f000 f830 	bl	80201c4 <_getpid_r>
 8020164:	462a      	mov	r2, r5
 8020166:	4601      	mov	r1, r0
 8020168:	4620      	mov	r0, r4
 802016a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802016e:	f000 b817 	b.w	80201a0 <_kill_r>
 8020172:	2b01      	cmp	r3, #1
 8020174:	d00a      	beq.n	802018c <_raise_r+0x4c>
 8020176:	1c59      	adds	r1, r3, #1
 8020178:	d103      	bne.n	8020182 <_raise_r+0x42>
 802017a:	2316      	movs	r3, #22
 802017c:	6003      	str	r3, [r0, #0]
 802017e:	2001      	movs	r0, #1
 8020180:	e7e7      	b.n	8020152 <_raise_r+0x12>
 8020182:	2400      	movs	r4, #0
 8020184:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020188:	4628      	mov	r0, r5
 802018a:	4798      	blx	r3
 802018c:	2000      	movs	r0, #0
 802018e:	e7e0      	b.n	8020152 <_raise_r+0x12>

08020190 <raise>:
 8020190:	4b02      	ldr	r3, [pc, #8]	; (802019c <raise+0xc>)
 8020192:	4601      	mov	r1, r0
 8020194:	6818      	ldr	r0, [r3, #0]
 8020196:	f7ff bfd3 	b.w	8020140 <_raise_r>
 802019a:	bf00      	nop
 802019c:	20000108 	.word	0x20000108

080201a0 <_kill_r>:
 80201a0:	b538      	push	{r3, r4, r5, lr}
 80201a2:	4d07      	ldr	r5, [pc, #28]	; (80201c0 <_kill_r+0x20>)
 80201a4:	2300      	movs	r3, #0
 80201a6:	4604      	mov	r4, r0
 80201a8:	4608      	mov	r0, r1
 80201aa:	4611      	mov	r1, r2
 80201ac:	602b      	str	r3, [r5, #0]
 80201ae:	f7e0 fdce 	bl	8000d4e <_kill>
 80201b2:	1c43      	adds	r3, r0, #1
 80201b4:	d102      	bne.n	80201bc <_kill_r+0x1c>
 80201b6:	682b      	ldr	r3, [r5, #0]
 80201b8:	b103      	cbz	r3, 80201bc <_kill_r+0x1c>
 80201ba:	6023      	str	r3, [r4, #0]
 80201bc:	bd38      	pop	{r3, r4, r5, pc}
 80201be:	bf00      	nop
 80201c0:	20000f94 	.word	0x20000f94

080201c4 <_getpid_r>:
 80201c4:	f7e0 bdbb 	b.w	8000d3e <_getpid>

080201c8 <siprintf>:
 80201c8:	b40e      	push	{r1, r2, r3}
 80201ca:	b500      	push	{lr}
 80201cc:	b09c      	sub	sp, #112	; 0x70
 80201ce:	ab1d      	add	r3, sp, #116	; 0x74
 80201d0:	9002      	str	r0, [sp, #8]
 80201d2:	9006      	str	r0, [sp, #24]
 80201d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80201d8:	4809      	ldr	r0, [pc, #36]	; (8020200 <siprintf+0x38>)
 80201da:	9107      	str	r1, [sp, #28]
 80201dc:	9104      	str	r1, [sp, #16]
 80201de:	4909      	ldr	r1, [pc, #36]	; (8020204 <siprintf+0x3c>)
 80201e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80201e4:	9105      	str	r1, [sp, #20]
 80201e6:	6800      	ldr	r0, [r0, #0]
 80201e8:	9301      	str	r3, [sp, #4]
 80201ea:	a902      	add	r1, sp, #8
 80201ec:	f001 fcca 	bl	8021b84 <_svfiprintf_r>
 80201f0:	9b02      	ldr	r3, [sp, #8]
 80201f2:	2200      	movs	r2, #0
 80201f4:	701a      	strb	r2, [r3, #0]
 80201f6:	b01c      	add	sp, #112	; 0x70
 80201f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80201fc:	b003      	add	sp, #12
 80201fe:	4770      	bx	lr
 8020200:	20000108 	.word	0x20000108
 8020204:	ffff0208 	.word	0xffff0208

08020208 <__sread>:
 8020208:	b510      	push	{r4, lr}
 802020a:	460c      	mov	r4, r1
 802020c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020210:	f002 f8ee 	bl	80223f0 <_read_r>
 8020214:	2800      	cmp	r0, #0
 8020216:	bfab      	itete	ge
 8020218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802021a:	89a3      	ldrhlt	r3, [r4, #12]
 802021c:	181b      	addge	r3, r3, r0
 802021e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020222:	bfac      	ite	ge
 8020224:	6563      	strge	r3, [r4, #84]	; 0x54
 8020226:	81a3      	strhlt	r3, [r4, #12]
 8020228:	bd10      	pop	{r4, pc}

0802022a <__seofread>:
 802022a:	2000      	movs	r0, #0
 802022c:	4770      	bx	lr

0802022e <__swrite>:
 802022e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020232:	461f      	mov	r7, r3
 8020234:	898b      	ldrh	r3, [r1, #12]
 8020236:	05db      	lsls	r3, r3, #23
 8020238:	4605      	mov	r5, r0
 802023a:	460c      	mov	r4, r1
 802023c:	4616      	mov	r6, r2
 802023e:	d505      	bpl.n	802024c <__swrite+0x1e>
 8020240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020244:	2302      	movs	r3, #2
 8020246:	2200      	movs	r2, #0
 8020248:	f001 fbea 	bl	8021a20 <_lseek_r>
 802024c:	89a3      	ldrh	r3, [r4, #12]
 802024e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020256:	81a3      	strh	r3, [r4, #12]
 8020258:	4632      	mov	r2, r6
 802025a:	463b      	mov	r3, r7
 802025c:	4628      	mov	r0, r5
 802025e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020262:	f001 b965 	b.w	8021530 <_write_r>

08020266 <__sseek>:
 8020266:	b510      	push	{r4, lr}
 8020268:	460c      	mov	r4, r1
 802026a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802026e:	f001 fbd7 	bl	8021a20 <_lseek_r>
 8020272:	1c43      	adds	r3, r0, #1
 8020274:	89a3      	ldrh	r3, [r4, #12]
 8020276:	bf15      	itete	ne
 8020278:	6560      	strne	r0, [r4, #84]	; 0x54
 802027a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802027e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020282:	81a3      	strheq	r3, [r4, #12]
 8020284:	bf18      	it	ne
 8020286:	81a3      	strhne	r3, [r4, #12]
 8020288:	bd10      	pop	{r4, pc}

0802028a <__sclose>:
 802028a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802028e:	f001 ba53 	b.w	8021738 <_close_r>
	...

08020294 <iso_year_adjust>:
 8020294:	6941      	ldr	r1, [r0, #20]
 8020296:	2900      	cmp	r1, #0
 8020298:	f240 736c 	movw	r3, #1900	; 0x76c
 802029c:	bfa8      	it	ge
 802029e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80202a2:	18ca      	adds	r2, r1, r3
 80202a4:	078b      	lsls	r3, r1, #30
 80202a6:	d105      	bne.n	80202b4 <iso_year_adjust+0x20>
 80202a8:	2164      	movs	r1, #100	; 0x64
 80202aa:	fb92 f3f1 	sdiv	r3, r2, r1
 80202ae:	fb01 2313 	mls	r3, r1, r3, r2
 80202b2:	b9db      	cbnz	r3, 80202ec <iso_year_adjust+0x58>
 80202b4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80202b8:	fb92 f3f1 	sdiv	r3, r2, r1
 80202bc:	fb01 2313 	mls	r3, r1, r3, r2
 80202c0:	fab3 f383 	clz	r3, r3
 80202c4:	095b      	lsrs	r3, r3, #5
 80202c6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80202ca:	0040      	lsls	r0, r0, #1
 80202cc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80202d0:	4418      	add	r0, r3
 80202d2:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80202d6:	4298      	cmp	r0, r3
 80202d8:	d03a      	beq.n	8020350 <iso_year_adjust+0xbc>
 80202da:	dc21      	bgt.n	8020320 <iso_year_adjust+0x8c>
 80202dc:	2801      	cmp	r0, #1
 80202de:	dc1a      	bgt.n	8020316 <iso_year_adjust+0x82>
 80202e0:	2800      	cmp	r0, #0
 80202e2:	bfb4      	ite	lt
 80202e4:	2000      	movlt	r0, #0
 80202e6:	f04f 30ff 	movge.w	r0, #4294967295
 80202ea:	4770      	bx	lr
 80202ec:	2301      	movs	r3, #1
 80202ee:	e7ea      	b.n	80202c6 <iso_year_adjust+0x32>
 80202f0:	2817      	cmp	r0, #23
 80202f2:	d813      	bhi.n	802031c <iso_year_adjust+0x88>
 80202f4:	e8df f000 	tbb	[pc, r0]
 80202f8:	0c0c0c0c 	.word	0x0c0c0c0c
 80202fc:	0c0c1212 	.word	0x0c0c1212
 8020300:	12121212 	.word	0x12121212
 8020304:	12121212 	.word	0x12121212
 8020308:	0c0c1212 	.word	0x0c0c1212
 802030c:	0c0c1212 	.word	0x0c0c1212
 8020310:	f04f 30ff 	mov.w	r0, #4294967295
 8020314:	4770      	bx	lr
 8020316:	380a      	subs	r0, #10
 8020318:	2817      	cmp	r0, #23
 802031a:	d9e9      	bls.n	80202f0 <iso_year_adjust+0x5c>
 802031c:	2000      	movs	r0, #0
 802031e:	4770      	bx	lr
 8020320:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8020324:	4298      	cmp	r0, r3
 8020326:	dc06      	bgt.n	8020336 <iso_year_adjust+0xa2>
 8020328:	f241 63b1 	movw	r3, #5809	; 0x16b1
 802032c:	4298      	cmp	r0, r3
 802032e:	bfd4      	ite	le
 8020330:	2000      	movle	r0, #0
 8020332:	2001      	movgt	r0, #1
 8020334:	4770      	bx	lr
 8020336:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 802033a:	3802      	subs	r0, #2
 802033c:	2815      	cmp	r0, #21
 802033e:	d8ed      	bhi.n	802031c <iso_year_adjust+0x88>
 8020340:	2301      	movs	r3, #1
 8020342:	4083      	lsls	r3, r0
 8020344:	4803      	ldr	r0, [pc, #12]	; (8020354 <iso_year_adjust+0xc0>)
 8020346:	4018      	ands	r0, r3
 8020348:	3800      	subs	r0, #0
 802034a:	bf18      	it	ne
 802034c:	2001      	movne	r0, #1
 802034e:	4770      	bx	lr
 8020350:	2001      	movs	r0, #1
 8020352:	4770      	bx	lr
 8020354:	002a001f 	.word	0x002a001f

08020358 <__strftime>:
 8020358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802035c:	b091      	sub	sp, #68	; 0x44
 802035e:	461d      	mov	r5, r3
 8020360:	2300      	movs	r3, #0
 8020362:	4681      	mov	r9, r0
 8020364:	4688      	mov	r8, r1
 8020366:	9304      	str	r3, [sp, #16]
 8020368:	461c      	mov	r4, r3
 802036a:	7813      	ldrb	r3, [r2, #0]
 802036c:	2b00      	cmp	r3, #0
 802036e:	f000 84d1 	beq.w	8020d14 <__strftime+0x9bc>
 8020372:	2b25      	cmp	r3, #37	; 0x25
 8020374:	d11b      	bne.n	80203ae <__strftime+0x56>
 8020376:	7857      	ldrb	r7, [r2, #1]
 8020378:	2f30      	cmp	r7, #48	; 0x30
 802037a:	d024      	beq.n	80203c6 <__strftime+0x6e>
 802037c:	2f2b      	cmp	r7, #43	; 0x2b
 802037e:	d022      	beq.n	80203c6 <__strftime+0x6e>
 8020380:	f102 0b01 	add.w	fp, r2, #1
 8020384:	2700      	movs	r7, #0
 8020386:	f89b 3000 	ldrb.w	r3, [fp]
 802038a:	3b31      	subs	r3, #49	; 0x31
 802038c:	2b08      	cmp	r3, #8
 802038e:	d81d      	bhi.n	80203cc <__strftime+0x74>
 8020390:	4658      	mov	r0, fp
 8020392:	220a      	movs	r2, #10
 8020394:	a908      	add	r1, sp, #32
 8020396:	f000 fdff 	bl	8020f98 <strtoul>
 802039a:	f8dd b020 	ldr.w	fp, [sp, #32]
 802039e:	4606      	mov	r6, r0
 80203a0:	f89b 3000 	ldrb.w	r3, [fp]
 80203a4:	2b45      	cmp	r3, #69	; 0x45
 80203a6:	d113      	bne.n	80203d0 <__strftime+0x78>
 80203a8:	f10b 0b01 	add.w	fp, fp, #1
 80203ac:	e012      	b.n	80203d4 <__strftime+0x7c>
 80203ae:	f108 31ff 	add.w	r1, r8, #4294967295
 80203b2:	42a1      	cmp	r1, r4
 80203b4:	d802      	bhi.n	80203bc <__strftime+0x64>
 80203b6:	2400      	movs	r4, #0
 80203b8:	f000 bcb2 	b.w	8020d20 <__strftime+0x9c8>
 80203bc:	f809 3004 	strb.w	r3, [r9, r4]
 80203c0:	3201      	adds	r2, #1
 80203c2:	3401      	adds	r4, #1
 80203c4:	e7d1      	b.n	802036a <__strftime+0x12>
 80203c6:	f102 0b02 	add.w	fp, r2, #2
 80203ca:	e7dc      	b.n	8020386 <__strftime+0x2e>
 80203cc:	2600      	movs	r6, #0
 80203ce:	e7e7      	b.n	80203a0 <__strftime+0x48>
 80203d0:	2b4f      	cmp	r3, #79	; 0x4f
 80203d2:	d0e9      	beq.n	80203a8 <__strftime+0x50>
 80203d4:	f89b 0000 	ldrb.w	r0, [fp]
 80203d8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80203dc:	2b55      	cmp	r3, #85	; 0x55
 80203de:	d8ea      	bhi.n	80203b6 <__strftime+0x5e>
 80203e0:	a201      	add	r2, pc, #4	; (adr r2, 80203e8 <__strftime+0x90>)
 80203e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80203e6:	bf00      	nop
 80203e8:	08020d07 	.word	0x08020d07
 80203ec:	080203b7 	.word	0x080203b7
 80203f0:	080203b7 	.word	0x080203b7
 80203f4:	080203b7 	.word	0x080203b7
 80203f8:	080203b7 	.word	0x080203b7
 80203fc:	080203b7 	.word	0x080203b7
 8020400:	080203b7 	.word	0x080203b7
 8020404:	080203b7 	.word	0x080203b7
 8020408:	080203b7 	.word	0x080203b7
 802040c:	080203b7 	.word	0x080203b7
 8020410:	080203b7 	.word	0x080203b7
 8020414:	080203b7 	.word	0x080203b7
 8020418:	080203b7 	.word	0x080203b7
 802041c:	080203b7 	.word	0x080203b7
 8020420:	080203b7 	.word	0x080203b7
 8020424:	080203b7 	.word	0x080203b7
 8020428:	080203b7 	.word	0x080203b7
 802042c:	080203b7 	.word	0x080203b7
 8020430:	080203b7 	.word	0x080203b7
 8020434:	080203b7 	.word	0x080203b7
 8020438:	080203b7 	.word	0x080203b7
 802043c:	080203b7 	.word	0x080203b7
 8020440:	080203b7 	.word	0x080203b7
 8020444:	080203b7 	.word	0x080203b7
 8020448:	080203b7 	.word	0x080203b7
 802044c:	080203b7 	.word	0x080203b7
 8020450:	080203b7 	.word	0x080203b7
 8020454:	080203b7 	.word	0x080203b7
 8020458:	0802057f 	.word	0x0802057f
 802045c:	080205d9 	.word	0x080205d9
 8020460:	0802064f 	.word	0x0802064f
 8020464:	080206e9 	.word	0x080206e9
 8020468:	080203b7 	.word	0x080203b7
 802046c:	08020735 	.word	0x08020735
 8020470:	08020815 	.word	0x08020815
 8020474:	08020917 	.word	0x08020917
 8020478:	08020925 	.word	0x08020925
 802047c:	080203b7 	.word	0x080203b7
 8020480:	080203b7 	.word	0x080203b7
 8020484:	080203b7 	.word	0x080203b7
 8020488:	08020955 	.word	0x08020955
 802048c:	080203b7 	.word	0x080203b7
 8020490:	080203b7 	.word	0x080203b7
 8020494:	0802096d 	.word	0x0802096d
 8020498:	080203b7 	.word	0x080203b7
 802049c:	080209bb 	.word	0x080209bb
 80204a0:	08020ad1 	.word	0x08020ad1
 80204a4:	08020ae3 	.word	0x08020ae3
 80204a8:	08020b3b 	.word	0x08020b3b
 80204ac:	08020b4b 	.word	0x08020b4b
 80204b0:	08020bc1 	.word	0x08020bc1
 80204b4:	08020647 	.word	0x08020647
 80204b8:	08020bf5 	.word	0x08020bf5
 80204bc:	08020cb3 	.word	0x08020cb3
 80204c0:	080203b7 	.word	0x080203b7
 80204c4:	080203b7 	.word	0x080203b7
 80204c8:	080203b7 	.word	0x080203b7
 80204cc:	080203b7 	.word	0x080203b7
 80204d0:	080203b7 	.word	0x080203b7
 80204d4:	080203b7 	.word	0x080203b7
 80204d8:	08020541 	.word	0x08020541
 80204dc:	080205ad 	.word	0x080205ad
 80204e0:	08020607 	.word	0x08020607
 80204e4:	080206c1 	.word	0x080206c1
 80204e8:	080206c1 	.word	0x080206c1
 80204ec:	080203b7 	.word	0x080203b7
 80204f0:	0802077d 	.word	0x0802077d
 80204f4:	080205ad 	.word	0x080205ad
 80204f8:	080203b7 	.word	0x080203b7
 80204fc:	08020947 	.word	0x08020947
 8020500:	08020917 	.word	0x08020917
 8020504:	08020925 	.word	0x08020925
 8020508:	0802094f 	.word	0x0802094f
 802050c:	08020959 	.word	0x08020959
 8020510:	080203b7 	.word	0x080203b7
 8020514:	0802096d 	.word	0x0802096d
 8020518:	080203b7 	.word	0x080203b7
 802051c:	08020637 	.word	0x08020637
 8020520:	080209d1 	.word	0x080209d1
 8020524:	08020ad5 	.word	0x08020ad5
 8020528:	08020b1d 	.word	0x08020b1d
 802052c:	080203b7 	.word	0x080203b7
 8020530:	08020bb1 	.word	0x08020bb1
 8020534:	0802063f 	.word	0x0802063f
 8020538:	08020bd9 	.word	0x08020bd9
 802053c:	08020c45 	.word	0x08020c45
 8020540:	69ab      	ldr	r3, [r5, #24]
 8020542:	4aa7      	ldr	r2, [pc, #668]	; (80207e0 <__strftime+0x488>)
 8020544:	3318      	adds	r3, #24
 8020546:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 802054a:	4630      	mov	r0, r6
 802054c:	f7df fe76 	bl	800023c <strlen>
 8020550:	3e01      	subs	r6, #1
 8020552:	4420      	add	r0, r4
 8020554:	f108 33ff 	add.w	r3, r8, #4294967295
 8020558:	42a0      	cmp	r0, r4
 802055a:	d107      	bne.n	802056c <__strftime+0x214>
 802055c:	f89b 3000 	ldrb.w	r3, [fp]
 8020560:	2b00      	cmp	r3, #0
 8020562:	f000 83d7 	beq.w	8020d14 <__strftime+0x9bc>
 8020566:	f10b 0201 	add.w	r2, fp, #1
 802056a:	e6fe      	b.n	802036a <__strftime+0x12>
 802056c:	42a3      	cmp	r3, r4
 802056e:	f67f af22 	bls.w	80203b6 <__strftime+0x5e>
 8020572:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020576:	f809 2004 	strb.w	r2, [r9, r4]
 802057a:	3401      	adds	r4, #1
 802057c:	e7ec      	b.n	8020558 <__strftime+0x200>
 802057e:	69aa      	ldr	r2, [r5, #24]
 8020580:	4b97      	ldr	r3, [pc, #604]	; (80207e0 <__strftime+0x488>)
 8020582:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8020586:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8020588:	4630      	mov	r0, r6
 802058a:	f7df fe57 	bl	800023c <strlen>
 802058e:	3e01      	subs	r6, #1
 8020590:	4420      	add	r0, r4
 8020592:	f108 33ff 	add.w	r3, r8, #4294967295
 8020596:	42a0      	cmp	r0, r4
 8020598:	d0e0      	beq.n	802055c <__strftime+0x204>
 802059a:	42a3      	cmp	r3, r4
 802059c:	f67f af0b 	bls.w	80203b6 <__strftime+0x5e>
 80205a0:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80205a4:	f809 2004 	strb.w	r2, [r9, r4]
 80205a8:	3401      	adds	r4, #1
 80205aa:	e7f4      	b.n	8020596 <__strftime+0x23e>
 80205ac:	4b8c      	ldr	r3, [pc, #560]	; (80207e0 <__strftime+0x488>)
 80205ae:	692a      	ldr	r2, [r5, #16]
 80205b0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80205b4:	4630      	mov	r0, r6
 80205b6:	f7df fe41 	bl	800023c <strlen>
 80205ba:	3e01      	subs	r6, #1
 80205bc:	4420      	add	r0, r4
 80205be:	f108 33ff 	add.w	r3, r8, #4294967295
 80205c2:	42a0      	cmp	r0, r4
 80205c4:	d0ca      	beq.n	802055c <__strftime+0x204>
 80205c6:	42a3      	cmp	r3, r4
 80205c8:	f67f aef5 	bls.w	80203b6 <__strftime+0x5e>
 80205cc:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80205d0:	f809 2004 	strb.w	r2, [r9, r4]
 80205d4:	3401      	adds	r4, #1
 80205d6:	e7f4      	b.n	80205c2 <__strftime+0x26a>
 80205d8:	692b      	ldr	r3, [r5, #16]
 80205da:	4a81      	ldr	r2, [pc, #516]	; (80207e0 <__strftime+0x488>)
 80205dc:	330c      	adds	r3, #12
 80205de:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80205e2:	4630      	mov	r0, r6
 80205e4:	f7df fe2a 	bl	800023c <strlen>
 80205e8:	3e01      	subs	r6, #1
 80205ea:	4420      	add	r0, r4
 80205ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80205f0:	42a0      	cmp	r0, r4
 80205f2:	d0b3      	beq.n	802055c <__strftime+0x204>
 80205f4:	42a3      	cmp	r3, r4
 80205f6:	f67f aede 	bls.w	80203b6 <__strftime+0x5e>
 80205fa:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80205fe:	f809 2004 	strb.w	r2, [r9, r4]
 8020602:	3401      	adds	r4, #1
 8020604:	e7f4      	b.n	80205f0 <__strftime+0x298>
 8020606:	4b76      	ldr	r3, [pc, #472]	; (80207e0 <__strftime+0x488>)
 8020608:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 802060c:	4630      	mov	r0, r6
 802060e:	f7df fe15 	bl	800023c <strlen>
 8020612:	7833      	ldrb	r3, [r6, #0]
 8020614:	2b00      	cmp	r3, #0
 8020616:	d0a1      	beq.n	802055c <__strftime+0x204>
 8020618:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802061a:	9300      	str	r3, [sp, #0]
 802061c:	4632      	mov	r2, r6
 802061e:	462b      	mov	r3, r5
 8020620:	eba8 0104 	sub.w	r1, r8, r4
 8020624:	eb09 0004 	add.w	r0, r9, r4
 8020628:	f7ff fe96 	bl	8020358 <__strftime>
 802062c:	2800      	cmp	r0, #0
 802062e:	f77f aec2 	ble.w	80203b6 <__strftime+0x5e>
 8020632:	4404      	add	r4, r0
 8020634:	e792      	b.n	802055c <__strftime+0x204>
 8020636:	4b6a      	ldr	r3, [pc, #424]	; (80207e0 <__strftime+0x488>)
 8020638:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 802063c:	e7e6      	b.n	802060c <__strftime+0x2b4>
 802063e:	4b68      	ldr	r3, [pc, #416]	; (80207e0 <__strftime+0x488>)
 8020640:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 8020644:	e7e2      	b.n	802060c <__strftime+0x2b4>
 8020646:	4b66      	ldr	r3, [pc, #408]	; (80207e0 <__strftime+0x488>)
 8020648:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 802064c:	e7de      	b.n	802060c <__strftime+0x2b4>
 802064e:	4965      	ldr	r1, [pc, #404]	; (80207e4 <__strftime+0x48c>)
 8020650:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8020654:	458a      	cmp	sl, r1
 8020656:	bfac      	ite	ge
 8020658:	2100      	movge	r1, #0
 802065a:	2101      	movlt	r1, #1
 802065c:	f1ba 0f00 	cmp.w	sl, #0
 8020660:	db0e      	blt.n	8020680 <__strftime+0x328>
 8020662:	2064      	movs	r0, #100	; 0x64
 8020664:	fb9a f0f0 	sdiv	r0, sl, r0
 8020668:	3013      	adds	r0, #19
 802066a:	b19f      	cbz	r7, 8020694 <__strftime+0x33c>
 802066c:	2863      	cmp	r0, #99	; 0x63
 802066e:	dd25      	ble.n	80206bc <__strftime+0x364>
 8020670:	4a5d      	ldr	r2, [pc, #372]	; (80207e8 <__strftime+0x490>)
 8020672:	4b5e      	ldr	r3, [pc, #376]	; (80207ec <__strftime+0x494>)
 8020674:	2f2b      	cmp	r7, #43	; 0x2b
 8020676:	bf14      	ite	ne
 8020678:	4617      	movne	r7, r2
 802067a:	461f      	moveq	r7, r3
 802067c:	4a5c      	ldr	r2, [pc, #368]	; (80207f0 <__strftime+0x498>)
 802067e:	e00b      	b.n	8020698 <__strftime+0x340>
 8020680:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8020684:	9105      	str	r1, [sp, #20]
 8020686:	f001 f835 	bl	80216f4 <abs>
 802068a:	2364      	movs	r3, #100	; 0x64
 802068c:	9905      	ldr	r1, [sp, #20]
 802068e:	fb90 f0f3 	sdiv	r0, r0, r3
 8020692:	e7ea      	b.n	802066a <__strftime+0x312>
 8020694:	4f54      	ldr	r7, [pc, #336]	; (80207e8 <__strftime+0x490>)
 8020696:	4a57      	ldr	r2, [pc, #348]	; (80207f4 <__strftime+0x49c>)
 8020698:	4b57      	ldr	r3, [pc, #348]	; (80207f8 <__strftime+0x4a0>)
 802069a:	9001      	str	r0, [sp, #4]
 802069c:	2e02      	cmp	r6, #2
 802069e:	bf2c      	ite	cs
 80206a0:	ebc1 0606 	rsbcs	r6, r1, r6
 80206a4:	f1c1 0602 	rsbcc	r6, r1, #2
 80206a8:	494e      	ldr	r1, [pc, #312]	; (80207e4 <__strftime+0x48c>)
 80206aa:	9600      	str	r6, [sp, #0]
 80206ac:	458a      	cmp	sl, r1
 80206ae:	bfa8      	it	ge
 80206b0:	463b      	movge	r3, r7
 80206b2:	eba8 0104 	sub.w	r1, r8, r4
 80206b6:	eb09 0004 	add.w	r0, r9, r4
 80206ba:	e02a      	b.n	8020712 <__strftime+0x3ba>
 80206bc:	4f4a      	ldr	r7, [pc, #296]	; (80207e8 <__strftime+0x490>)
 80206be:	e7dd      	b.n	802067c <__strftime+0x324>
 80206c0:	494e      	ldr	r1, [pc, #312]	; (80207fc <__strftime+0x4a4>)
 80206c2:	4a4f      	ldr	r2, [pc, #316]	; (8020800 <__strftime+0x4a8>)
 80206c4:	68eb      	ldr	r3, [r5, #12]
 80206c6:	2864      	cmp	r0, #100	; 0x64
 80206c8:	bf08      	it	eq
 80206ca:	460a      	moveq	r2, r1
 80206cc:	eba8 0104 	sub.w	r1, r8, r4
 80206d0:	eb09 0004 	add.w	r0, r9, r4
 80206d4:	f001 fe9e 	bl	8022414 <sniprintf>
 80206d8:	2800      	cmp	r0, #0
 80206da:	f6ff ae6c 	blt.w	80203b6 <__strftime+0x5e>
 80206de:	4404      	add	r4, r0
 80206e0:	45a0      	cmp	r8, r4
 80206e2:	f63f af3b 	bhi.w	802055c <__strftime+0x204>
 80206e6:	e666      	b.n	80203b6 <__strftime+0x5e>
 80206e8:	6968      	ldr	r0, [r5, #20]
 80206ea:	692b      	ldr	r3, [r5, #16]
 80206ec:	68ef      	ldr	r7, [r5, #12]
 80206ee:	2800      	cmp	r0, #0
 80206f0:	eb09 0604 	add.w	r6, r9, r4
 80206f4:	eba8 0104 	sub.w	r1, r8, r4
 80206f8:	f103 0301 	add.w	r3, r3, #1
 80206fc:	db0c      	blt.n	8020718 <__strftime+0x3c0>
 80206fe:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020702:	fb90 f2fc 	sdiv	r2, r0, ip
 8020706:	fb0c 0212 	mls	r2, ip, r2, r0
 802070a:	e9cd 7200 	strd	r7, r2, [sp]
 802070e:	4a3d      	ldr	r2, [pc, #244]	; (8020804 <__strftime+0x4ac>)
 8020710:	4630      	mov	r0, r6
 8020712:	f001 fe7f 	bl	8022414 <sniprintf>
 8020716:	e7df      	b.n	80206d8 <__strftime+0x380>
 8020718:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802071c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8020720:	f000 ffe8 	bl	80216f4 <abs>
 8020724:	2264      	movs	r2, #100	; 0x64
 8020726:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 802072a:	fb90 fcf2 	sdiv	ip, r0, r2
 802072e:	fb0c 0212 	mls	r2, ip, r2, r0
 8020732:	e7ea      	b.n	802070a <__strftime+0x3b2>
 8020734:	2325      	movs	r3, #37	; 0x25
 8020736:	f88d 3020 	strb.w	r3, [sp, #32]
 802073a:	b187      	cbz	r7, 802075e <__strftime+0x406>
 802073c:	2e06      	cmp	r6, #6
 802073e:	bf38      	it	cc
 8020740:	2606      	movcc	r6, #6
 8020742:	1fb3      	subs	r3, r6, #6
 8020744:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8020748:	d10c      	bne.n	8020764 <__strftime+0x40c>
 802074a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 802074e:	492e      	ldr	r1, [pc, #184]	; (8020808 <__strftime+0x4b0>)
 8020750:	f001 fec0 	bl	80224d4 <strcpy>
 8020754:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020756:	9300      	str	r3, [sp, #0]
 8020758:	aa08      	add	r2, sp, #32
 802075a:	462b      	mov	r3, r5
 802075c:	e760      	b.n	8020620 <__strftime+0x2c8>
 802075e:	272b      	movs	r7, #43	; 0x2b
 8020760:	260a      	movs	r6, #10
 8020762:	e7ee      	b.n	8020742 <__strftime+0x3ea>
 8020764:	4a29      	ldr	r2, [pc, #164]	; (802080c <__strftime+0x4b4>)
 8020766:	211e      	movs	r1, #30
 8020768:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 802076c:	f001 fe52 	bl	8022414 <sniprintf>
 8020770:	2800      	cmp	r0, #0
 8020772:	ddea      	ble.n	802074a <__strftime+0x3f2>
 8020774:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8020778:	4418      	add	r0, r3
 802077a:	e7e8      	b.n	802074e <__strftime+0x3f6>
 802077c:	4628      	mov	r0, r5
 802077e:	f7ff fd89 	bl	8020294 <iso_year_adjust>
 8020782:	4606      	mov	r6, r0
 8020784:	6968      	ldr	r0, [r5, #20]
 8020786:	2800      	cmp	r0, #0
 8020788:	db11      	blt.n	80207ae <__strftime+0x456>
 802078a:	2264      	movs	r2, #100	; 0x64
 802078c:	fb90 f3f2 	sdiv	r3, r0, r2
 8020790:	fb02 0313 	mls	r3, r2, r3, r0
 8020794:	441e      	add	r6, r3
 8020796:	2364      	movs	r3, #100	; 0x64
 8020798:	fb96 f0f3 	sdiv	r0, r6, r3
 802079c:	fb03 6610 	mls	r6, r3, r0, r6
 80207a0:	441e      	add	r6, r3
 80207a2:	fbb6 f2f3 	udiv	r2, r6, r3
 80207a6:	fb03 6312 	mls	r3, r3, r2, r6
 80207aa:	4a14      	ldr	r2, [pc, #80]	; (80207fc <__strftime+0x4a4>)
 80207ac:	e78e      	b.n	80206cc <__strftime+0x374>
 80207ae:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80207b2:	f000 ff9f 	bl	80216f4 <abs>
 80207b6:	2364      	movs	r3, #100	; 0x64
 80207b8:	2e00      	cmp	r6, #0
 80207ba:	fb90 f2f3 	sdiv	r2, r0, r3
 80207be:	fb02 0313 	mls	r3, r2, r3, r0
 80207c2:	da05      	bge.n	80207d0 <__strftime+0x478>
 80207c4:	6969      	ldr	r1, [r5, #20]
 80207c6:	4a12      	ldr	r2, [pc, #72]	; (8020810 <__strftime+0x4b8>)
 80207c8:	4291      	cmp	r1, r2
 80207ca:	bfb8      	it	lt
 80207cc:	2601      	movlt	r6, #1
 80207ce:	e7e1      	b.n	8020794 <__strftime+0x43c>
 80207d0:	d0e0      	beq.n	8020794 <__strftime+0x43c>
 80207d2:	6969      	ldr	r1, [r5, #20]
 80207d4:	4a03      	ldr	r2, [pc, #12]	; (80207e4 <__strftime+0x48c>)
 80207d6:	4291      	cmp	r1, r2
 80207d8:	bfb8      	it	lt
 80207da:	f04f 36ff 	movlt.w	r6, #4294967295
 80207de:	e7d9      	b.n	8020794 <__strftime+0x43c>
 80207e0:	0802906c 	.word	0x0802906c
 80207e4:	fffff894 	.word	0xfffff894
 80207e8:	080291df 	.word	0x080291df
 80207ec:	08028ef6 	.word	0x08028ef6
 80207f0:	08028eee 	.word	0x08028eee
 80207f4:	08028ee7 	.word	0x08028ee7
 80207f8:	0802931f 	.word	0x0802931f
 80207fc:	08028f06 	.word	0x08028f06
 8020800:	08028ef8 	.word	0x08028ef8
 8020804:	08028efc 	.word	0x08028efc
 8020808:	08028f0f 	.word	0x08028f0f
 802080c:	08028f0b 	.word	0x08028f0b
 8020810:	fffff895 	.word	0xfffff895
 8020814:	4bb6      	ldr	r3, [pc, #728]	; (8020af0 <__strftime+0x798>)
 8020816:	6969      	ldr	r1, [r5, #20]
 8020818:	4299      	cmp	r1, r3
 802081a:	bfac      	ite	ge
 802081c:	2300      	movge	r3, #0
 802081e:	2301      	movlt	r3, #1
 8020820:	4628      	mov	r0, r5
 8020822:	e9cd 3105 	strd	r3, r1, [sp, #20]
 8020826:	f7ff fd35 	bl	8020294 <iso_year_adjust>
 802082a:	9906      	ldr	r1, [sp, #24]
 802082c:	2900      	cmp	r1, #0
 802082e:	4682      	mov	sl, r0
 8020830:	db27      	blt.n	8020882 <__strftime+0x52a>
 8020832:	2264      	movs	r2, #100	; 0x64
 8020834:	fb91 f2f2 	sdiv	r2, r1, r2
 8020838:	3213      	adds	r2, #19
 802083a:	6968      	ldr	r0, [r5, #20]
 802083c:	2800      	cmp	r0, #0
 802083e:	db2b      	blt.n	8020898 <__strftime+0x540>
 8020840:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020844:	fb90 fefc 	sdiv	lr, r0, ip
 8020848:	fb0c 001e 	mls	r0, ip, lr, r0
 802084c:	f1ba 0f00 	cmp.w	sl, #0
 8020850:	da31      	bge.n	80208b6 <__strftime+0x55e>
 8020852:	6969      	ldr	r1, [r5, #20]
 8020854:	4ba7      	ldr	r3, [pc, #668]	; (8020af4 <__strftime+0x79c>)
 8020856:	4299      	cmp	r1, r3
 8020858:	db38      	blt.n	80208cc <__strftime+0x574>
 802085a:	eb0a 0300 	add.w	r3, sl, r0
 802085e:	1c59      	adds	r1, r3, #1
 8020860:	d139      	bne.n	80208d6 <__strftime+0x57e>
 8020862:	3a01      	subs	r2, #1
 8020864:	2363      	movs	r3, #99	; 0x63
 8020866:	2064      	movs	r0, #100	; 0x64
 8020868:	fb00 3202 	mla	r2, r0, r2, r3
 802086c:	9b05      	ldr	r3, [sp, #20]
 802086e:	2b00      	cmp	r3, #0
 8020870:	d036      	beq.n	80208e0 <__strftime+0x588>
 8020872:	232d      	movs	r3, #45	; 0x2d
 8020874:	f88d 3020 	strb.w	r3, [sp, #32]
 8020878:	b106      	cbz	r6, 802087c <__strftime+0x524>
 802087a:	3e01      	subs	r6, #1
 802087c:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8020880:	e038      	b.n	80208f4 <__strftime+0x59c>
 8020882:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8020886:	9106      	str	r1, [sp, #24]
 8020888:	f000 ff34 	bl	80216f4 <abs>
 802088c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020890:	9906      	ldr	r1, [sp, #24]
 8020892:	fb90 f2fc 	sdiv	r2, r0, ip
 8020896:	e7d0      	b.n	802083a <__strftime+0x4e2>
 8020898:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802089c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80208a0:	f000 ff28 	bl	80216f4 <abs>
 80208a4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80208a8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80208ac:	fb90 fefc 	sdiv	lr, r0, ip
 80208b0:	fb0e 001c 	mls	r0, lr, ip, r0
 80208b4:	e7ca      	b.n	802084c <__strftime+0x4f4>
 80208b6:	d0d0      	beq.n	802085a <__strftime+0x502>
 80208b8:	4b8d      	ldr	r3, [pc, #564]	; (8020af0 <__strftime+0x798>)
 80208ba:	4299      	cmp	r1, r3
 80208bc:	bfb4      	ite	lt
 80208be:	2301      	movlt	r3, #1
 80208c0:	2300      	movge	r3, #0
 80208c2:	9305      	str	r3, [sp, #20]
 80208c4:	bfb8      	it	lt
 80208c6:	f04f 3aff 	movlt.w	sl, #4294967295
 80208ca:	e7c6      	b.n	802085a <__strftime+0x502>
 80208cc:	f04f 0a01 	mov.w	sl, #1
 80208d0:	f8cd a014 	str.w	sl, [sp, #20]
 80208d4:	e7c1      	b.n	802085a <__strftime+0x502>
 80208d6:	2b64      	cmp	r3, #100	; 0x64
 80208d8:	bf04      	itt	eq
 80208da:	3201      	addeq	r2, #1
 80208dc:	2300      	moveq	r3, #0
 80208de:	e7c2      	b.n	8020866 <__strftime+0x50e>
 80208e0:	2f2b      	cmp	r7, #43	; 0x2b
 80208e2:	d106      	bne.n	80208f2 <__strftime+0x59a>
 80208e4:	f242 730f 	movw	r3, #9999	; 0x270f
 80208e8:	429a      	cmp	r2, r3
 80208ea:	d902      	bls.n	80208f2 <__strftime+0x59a>
 80208ec:	f88d 7020 	strb.w	r7, [sp, #32]
 80208f0:	e7c2      	b.n	8020878 <__strftime+0x520>
 80208f2:	ab08      	add	r3, sp, #32
 80208f4:	2125      	movs	r1, #37	; 0x25
 80208f6:	7019      	strb	r1, [r3, #0]
 80208f8:	b94f      	cbnz	r7, 802090e <__strftime+0x5b6>
 80208fa:	1c58      	adds	r0, r3, #1
 80208fc:	497e      	ldr	r1, [pc, #504]	; (8020af8 <__strftime+0x7a0>)
 80208fe:	9205      	str	r2, [sp, #20]
 8020900:	f001 fde8 	bl	80224d4 <strcpy>
 8020904:	9a05      	ldr	r2, [sp, #20]
 8020906:	9200      	str	r2, [sp, #0]
 8020908:	4633      	mov	r3, r6
 802090a:	aa08      	add	r2, sp, #32
 802090c:	e059      	b.n	80209c2 <__strftime+0x66a>
 802090e:	2130      	movs	r1, #48	; 0x30
 8020910:	1c98      	adds	r0, r3, #2
 8020912:	7059      	strb	r1, [r3, #1]
 8020914:	e7f2      	b.n	80208fc <__strftime+0x5a4>
 8020916:	4979      	ldr	r1, [pc, #484]	; (8020afc <__strftime+0x7a4>)
 8020918:	4a79      	ldr	r2, [pc, #484]	; (8020b00 <__strftime+0x7a8>)
 802091a:	68ab      	ldr	r3, [r5, #8]
 802091c:	286b      	cmp	r0, #107	; 0x6b
 802091e:	bf08      	it	eq
 8020920:	460a      	moveq	r2, r1
 8020922:	e6d3      	b.n	80206cc <__strftime+0x374>
 8020924:	68ab      	ldr	r3, [r5, #8]
 8020926:	b163      	cbz	r3, 8020942 <__strftime+0x5ea>
 8020928:	2b0c      	cmp	r3, #12
 802092a:	d004      	beq.n	8020936 <__strftime+0x5de>
 802092c:	210c      	movs	r1, #12
 802092e:	fb93 f2f1 	sdiv	r2, r3, r1
 8020932:	fb01 3312 	mls	r3, r1, r2, r3
 8020936:	4972      	ldr	r1, [pc, #456]	; (8020b00 <__strftime+0x7a8>)
 8020938:	4a70      	ldr	r2, [pc, #448]	; (8020afc <__strftime+0x7a4>)
 802093a:	2849      	cmp	r0, #73	; 0x49
 802093c:	bf08      	it	eq
 802093e:	460a      	moveq	r2, r1
 8020940:	e6c4      	b.n	80206cc <__strftime+0x374>
 8020942:	230c      	movs	r3, #12
 8020944:	e7f7      	b.n	8020936 <__strftime+0x5de>
 8020946:	69eb      	ldr	r3, [r5, #28]
 8020948:	4a6e      	ldr	r2, [pc, #440]	; (8020b04 <__strftime+0x7ac>)
 802094a:	3301      	adds	r3, #1
 802094c:	e6be      	b.n	80206cc <__strftime+0x374>
 802094e:	692b      	ldr	r3, [r5, #16]
 8020950:	3301      	adds	r3, #1
 8020952:	e72a      	b.n	80207aa <__strftime+0x452>
 8020954:	686b      	ldr	r3, [r5, #4]
 8020956:	e728      	b.n	80207aa <__strftime+0x452>
 8020958:	f108 33ff 	add.w	r3, r8, #4294967295
 802095c:	42a3      	cmp	r3, r4
 802095e:	f67f ad2a 	bls.w	80203b6 <__strftime+0x5e>
 8020962:	230a      	movs	r3, #10
 8020964:	f809 3004 	strb.w	r3, [r9, r4]
 8020968:	3401      	adds	r4, #1
 802096a:	e5f7      	b.n	802055c <__strftime+0x204>
 802096c:	68ab      	ldr	r3, [r5, #8]
 802096e:	2b0b      	cmp	r3, #11
 8020970:	bfcc      	ite	gt
 8020972:	22a4      	movgt	r2, #164	; 0xa4
 8020974:	22a0      	movle	r2, #160	; 0xa0
 8020976:	4b64      	ldr	r3, [pc, #400]	; (8020b08 <__strftime+0x7b0>)
 8020978:	4413      	add	r3, r2
 802097a:	685e      	ldr	r6, [r3, #4]
 802097c:	4630      	mov	r0, r6
 802097e:	f7df fc5d 	bl	800023c <strlen>
 8020982:	1e72      	subs	r2, r6, #1
 8020984:	4420      	add	r0, r4
 8020986:	f108 36ff 	add.w	r6, r8, #4294967295
 802098a:	42a0      	cmp	r0, r4
 802098c:	f43f ade6 	beq.w	802055c <__strftime+0x204>
 8020990:	42a6      	cmp	r6, r4
 8020992:	f67f ad10 	bls.w	80203b6 <__strftime+0x5e>
 8020996:	f89b 1000 	ldrb.w	r1, [fp]
 802099a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 802099e:	2950      	cmp	r1, #80	; 0x50
 80209a0:	d107      	bne.n	80209b2 <__strftime+0x65a>
 80209a2:	495a      	ldr	r1, [pc, #360]	; (8020b0c <__strftime+0x7b4>)
 80209a4:	5cc9      	ldrb	r1, [r1, r3]
 80209a6:	f001 0103 	and.w	r1, r1, #3
 80209aa:	2901      	cmp	r1, #1
 80209ac:	bf08      	it	eq
 80209ae:	3320      	addeq	r3, #32
 80209b0:	b2db      	uxtb	r3, r3
 80209b2:	f809 3004 	strb.w	r3, [r9, r4]
 80209b6:	3401      	adds	r4, #1
 80209b8:	e7e7      	b.n	802098a <__strftime+0x632>
 80209ba:	686b      	ldr	r3, [r5, #4]
 80209bc:	9300      	str	r3, [sp, #0]
 80209be:	4a54      	ldr	r2, [pc, #336]	; (8020b10 <__strftime+0x7b8>)
 80209c0:	68ab      	ldr	r3, [r5, #8]
 80209c2:	eba8 0104 	sub.w	r1, r8, r4
 80209c6:	eb09 0004 	add.w	r0, r9, r4
 80209ca:	f001 fd23 	bl	8022414 <sniprintf>
 80209ce:	e683      	b.n	80206d8 <__strftime+0x380>
 80209d0:	6a2b      	ldr	r3, [r5, #32]
 80209d2:	2b00      	cmp	r3, #0
 80209d4:	db79      	blt.n	8020aca <__strftime+0x772>
 80209d6:	f000 fb91 	bl	80210fc <__tz_lock>
 80209da:	9b04      	ldr	r3, [sp, #16]
 80209dc:	b90b      	cbnz	r3, 80209e2 <__strftime+0x68a>
 80209de:	f000 fb99 	bl	8021114 <_tzset_unlocked>
 80209e2:	f000 ff55 	bl	8021890 <__gettzinfo>
 80209e6:	6a2b      	ldr	r3, [r5, #32]
 80209e8:	2b00      	cmp	r3, #0
 80209ea:	bfcc      	ite	gt
 80209ec:	2350      	movgt	r3, #80	; 0x50
 80209ee:	2328      	movle	r3, #40	; 0x28
 80209f0:	58c3      	ldr	r3, [r0, r3]
 80209f2:	f1c3 0a00 	rsb	sl, r3, #0
 80209f6:	f000 fb87 	bl	8021108 <__tz_unlock>
 80209fa:	2301      	movs	r3, #1
 80209fc:	9304      	str	r3, [sp, #16]
 80209fe:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8020a02:	4662      	mov	r2, ip
 8020a04:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8020a08:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8020a0c:	9602      	str	r6, [sp, #8]
 8020a0e:	f143 36ff 	adc.w	r6, r3, #4294967295
 8020a12:	9603      	str	r6, [sp, #12]
 8020a14:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8020a18:	2e00      	cmp	r6, #0
 8020a1a:	f177 0600 	sbcs.w	r6, r7, #0
 8020a1e:	eba8 0104 	sub.w	r1, r8, r4
 8020a22:	eb09 0004 	add.w	r0, r9, r4
 8020a26:	da05      	bge.n	8020a34 <__strftime+0x6dc>
 8020a28:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8020a2c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8020a30:	9602      	str	r6, [sp, #8]
 8020a32:	9303      	str	r3, [sp, #12]
 8020a34:	9b02      	ldr	r3, [sp, #8]
 8020a36:	089e      	lsrs	r6, r3, #2
 8020a38:	9b03      	ldr	r3, [sp, #12]
 8020a3a:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 8020a3e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8020a42:	109f      	asrs	r7, r3, #2
 8020a44:	2364      	movs	r3, #100	; 0x64
 8020a46:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a4a:	1af6      	subs	r6, r6, r3
 8020a4c:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8020a50:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 8020a54:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8020a58:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a5c:	18f6      	adds	r6, r6, r3
 8020a5e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8020a62:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8020a66:	f240 136d 	movw	r3, #365	; 0x16d
 8020a6a:	fb03 fc0c 	mul.w	ip, r3, ip
 8020a6e:	69eb      	ldr	r3, [r5, #28]
 8020a70:	eb16 060c 	adds.w	r6, r6, ip
 8020a74:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8020a78:	18f6      	adds	r6, r6, r3
 8020a7a:	f04f 0c18 	mov.w	ip, #24
 8020a7e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8020a82:	fba6 230c 	umull	r2, r3, r6, ip
 8020a86:	68ae      	ldr	r6, [r5, #8]
 8020a88:	fb0c 3307 	mla	r3, ip, r7, r3
 8020a8c:	1992      	adds	r2, r2, r6
 8020a8e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8020a92:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8020a96:	fba2 670c 	umull	r6, r7, r2, ip
 8020a9a:	fb0c 7703 	mla	r7, ip, r3, r7
 8020a9e:	686b      	ldr	r3, [r5, #4]
 8020aa0:	18f6      	adds	r6, r6, r3
 8020aa2:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8020aa6:	fba6 230c 	umull	r2, r3, r6, ip
 8020aaa:	682e      	ldr	r6, [r5, #0]
 8020aac:	fb0c 3307 	mla	r3, ip, r7, r3
 8020ab0:	1992      	adds	r2, r2, r6
 8020ab2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8020ab6:	ebb2 020a 	subs.w	r2, r2, sl
 8020aba:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8020abe:	e9cd 2300 	strd	r2, r3, [sp]
 8020ac2:	4a14      	ldr	r2, [pc, #80]	; (8020b14 <__strftime+0x7bc>)
 8020ac4:	f001 fca6 	bl	8022414 <sniprintf>
 8020ac8:	e606      	b.n	80206d8 <__strftime+0x380>
 8020aca:	f04f 0a00 	mov.w	sl, #0
 8020ace:	e796      	b.n	80209fe <__strftime+0x6a6>
 8020ad0:	682b      	ldr	r3, [r5, #0]
 8020ad2:	e66a      	b.n	80207aa <__strftime+0x452>
 8020ad4:	f108 33ff 	add.w	r3, r8, #4294967295
 8020ad8:	42a3      	cmp	r3, r4
 8020ada:	f67f ac6c 	bls.w	80203b6 <__strftime+0x5e>
 8020ade:	2309      	movs	r3, #9
 8020ae0:	e740      	b.n	8020964 <__strftime+0x60c>
 8020ae2:	682b      	ldr	r3, [r5, #0]
 8020ae4:	9301      	str	r3, [sp, #4]
 8020ae6:	686b      	ldr	r3, [r5, #4]
 8020ae8:	9300      	str	r3, [sp, #0]
 8020aea:	4a0b      	ldr	r2, [pc, #44]	; (8020b18 <__strftime+0x7c0>)
 8020aec:	68ab      	ldr	r3, [r5, #8]
 8020aee:	e5e0      	b.n	80206b2 <__strftime+0x35a>
 8020af0:	fffff894 	.word	0xfffff894
 8020af4:	fffff895 	.word	0xfffff895
 8020af8:	08028f17 	.word	0x08028f17
 8020afc:	08028ef8 	.word	0x08028ef8
 8020b00:	08028f06 	.word	0x08028f06
 8020b04:	08028f1b 	.word	0x08028f1b
 8020b08:	0802906c 	.word	0x0802906c
 8020b0c:	080291e1 	.word	0x080291e1
 8020b10:	08028f2a 	.word	0x08028f2a
 8020b14:	08028f20 	.word	0x08028f20
 8020b18:	08028f25 	.word	0x08028f25
 8020b1c:	f108 33ff 	add.w	r3, r8, #4294967295
 8020b20:	42a3      	cmp	r3, r4
 8020b22:	f67f ac48 	bls.w	80203b6 <__strftime+0x5e>
 8020b26:	69ab      	ldr	r3, [r5, #24]
 8020b28:	eb09 0204 	add.w	r2, r9, r4
 8020b2c:	3401      	adds	r4, #1
 8020b2e:	b913      	cbnz	r3, 8020b36 <__strftime+0x7de>
 8020b30:	2337      	movs	r3, #55	; 0x37
 8020b32:	7013      	strb	r3, [r2, #0]
 8020b34:	e512      	b.n	802055c <__strftime+0x204>
 8020b36:	3330      	adds	r3, #48	; 0x30
 8020b38:	e7fb      	b.n	8020b32 <__strftime+0x7da>
 8020b3a:	69eb      	ldr	r3, [r5, #28]
 8020b3c:	69aa      	ldr	r2, [r5, #24]
 8020b3e:	3307      	adds	r3, #7
 8020b40:	1a9b      	subs	r3, r3, r2
 8020b42:	2207      	movs	r2, #7
 8020b44:	fb93 f3f2 	sdiv	r3, r3, r2
 8020b48:	e62f      	b.n	80207aa <__strftime+0x452>
 8020b4a:	4628      	mov	r0, r5
 8020b4c:	f7ff fba2 	bl	8020294 <iso_year_adjust>
 8020b50:	69aa      	ldr	r2, [r5, #24]
 8020b52:	b132      	cbz	r2, 8020b62 <__strftime+0x80a>
 8020b54:	3a01      	subs	r2, #1
 8020b56:	2800      	cmp	r0, #0
 8020b58:	dc28      	bgt.n	8020bac <__strftime+0x854>
 8020b5a:	69eb      	ldr	r3, [r5, #28]
 8020b5c:	d103      	bne.n	8020b66 <__strftime+0x80e>
 8020b5e:	330a      	adds	r3, #10
 8020b60:	e7ee      	b.n	8020b40 <__strftime+0x7e8>
 8020b62:	2206      	movs	r2, #6
 8020b64:	e7f7      	b.n	8020b56 <__strftime+0x7fe>
 8020b66:	6968      	ldr	r0, [r5, #20]
 8020b68:	2800      	cmp	r0, #0
 8020b6a:	eba2 0303 	sub.w	r3, r2, r3
 8020b6e:	f240 726b 	movw	r2, #1899	; 0x76b
 8020b72:	bfa8      	it	ge
 8020b74:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8020b78:	4410      	add	r0, r2
 8020b7a:	0782      	lsls	r2, r0, #30
 8020b7c:	d105      	bne.n	8020b8a <__strftime+0x832>
 8020b7e:	2264      	movs	r2, #100	; 0x64
 8020b80:	fb90 f1f2 	sdiv	r1, r0, r2
 8020b84:	fb02 0111 	mls	r1, r2, r1, r0
 8020b88:	b971      	cbnz	r1, 8020ba8 <__strftime+0x850>
 8020b8a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020b8e:	fb90 f2f1 	sdiv	r2, r0, r1
 8020b92:	fb01 0212 	mls	r2, r1, r2, r0
 8020b96:	fab2 f282 	clz	r2, r2
 8020b9a:	0952      	lsrs	r2, r2, #5
 8020b9c:	1a9a      	subs	r2, r3, r2
 8020b9e:	2a05      	cmp	r2, #5
 8020ba0:	bfb4      	ite	lt
 8020ba2:	2335      	movlt	r3, #53	; 0x35
 8020ba4:	2334      	movge	r3, #52	; 0x34
 8020ba6:	e600      	b.n	80207aa <__strftime+0x452>
 8020ba8:	2201      	movs	r2, #1
 8020baa:	e7f7      	b.n	8020b9c <__strftime+0x844>
 8020bac:	2301      	movs	r3, #1
 8020bae:	e5fc      	b.n	80207aa <__strftime+0x452>
 8020bb0:	f108 33ff 	add.w	r3, r8, #4294967295
 8020bb4:	42a3      	cmp	r3, r4
 8020bb6:	f67f abfe 	bls.w	80203b6 <__strftime+0x5e>
 8020bba:	69ab      	ldr	r3, [r5, #24]
 8020bbc:	3330      	adds	r3, #48	; 0x30
 8020bbe:	e6d1      	b.n	8020964 <__strftime+0x60c>
 8020bc0:	69ab      	ldr	r3, [r5, #24]
 8020bc2:	b13b      	cbz	r3, 8020bd4 <__strftime+0x87c>
 8020bc4:	3b01      	subs	r3, #1
 8020bc6:	69ea      	ldr	r2, [r5, #28]
 8020bc8:	3207      	adds	r2, #7
 8020bca:	1ad2      	subs	r2, r2, r3
 8020bcc:	2307      	movs	r3, #7
 8020bce:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bd2:	e5ea      	b.n	80207aa <__strftime+0x452>
 8020bd4:	2306      	movs	r3, #6
 8020bd6:	e7f6      	b.n	8020bc6 <__strftime+0x86e>
 8020bd8:	6968      	ldr	r0, [r5, #20]
 8020bda:	2800      	cmp	r0, #0
 8020bdc:	db05      	blt.n	8020bea <__strftime+0x892>
 8020bde:	2264      	movs	r2, #100	; 0x64
 8020be0:	fb90 f3f2 	sdiv	r3, r0, r2
 8020be4:	fb03 0312 	mls	r3, r3, r2, r0
 8020be8:	e5df      	b.n	80207aa <__strftime+0x452>
 8020bea:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020bee:	f000 fd81 	bl	80216f4 <abs>
 8020bf2:	e7f4      	b.n	8020bde <__strftime+0x886>
 8020bf4:	696b      	ldr	r3, [r5, #20]
 8020bf6:	4a4c      	ldr	r2, [pc, #304]	; (8020d28 <__strftime+0x9d0>)
 8020bf8:	4293      	cmp	r3, r2
 8020bfa:	da09      	bge.n	8020c10 <__strftime+0x8b8>
 8020bfc:	212d      	movs	r1, #45	; 0x2d
 8020bfe:	f88d 1020 	strb.w	r1, [sp, #32]
 8020c02:	eba2 0a03 	sub.w	sl, r2, r3
 8020c06:	b106      	cbz	r6, 8020c0a <__strftime+0x8b2>
 8020c08:	3e01      	subs	r6, #1
 8020c0a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8020c0e:	e00b      	b.n	8020c28 <__strftime+0x8d0>
 8020c10:	2f2b      	cmp	r7, #43	; 0x2b
 8020c12:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8020c16:	d106      	bne.n	8020c26 <__strftime+0x8ce>
 8020c18:	f242 730f 	movw	r3, #9999	; 0x270f
 8020c1c:	459a      	cmp	sl, r3
 8020c1e:	d902      	bls.n	8020c26 <__strftime+0x8ce>
 8020c20:	f88d 7020 	strb.w	r7, [sp, #32]
 8020c24:	e7ef      	b.n	8020c06 <__strftime+0x8ae>
 8020c26:	ab08      	add	r3, sp, #32
 8020c28:	2225      	movs	r2, #37	; 0x25
 8020c2a:	701a      	strb	r2, [r3, #0]
 8020c2c:	b937      	cbnz	r7, 8020c3c <__strftime+0x8e4>
 8020c2e:	1c58      	adds	r0, r3, #1
 8020c30:	493e      	ldr	r1, [pc, #248]	; (8020d2c <__strftime+0x9d4>)
 8020c32:	f001 fc4f 	bl	80224d4 <strcpy>
 8020c36:	f8cd a000 	str.w	sl, [sp]
 8020c3a:	e665      	b.n	8020908 <__strftime+0x5b0>
 8020c3c:	2230      	movs	r2, #48	; 0x30
 8020c3e:	1c98      	adds	r0, r3, #2
 8020c40:	705a      	strb	r2, [r3, #1]
 8020c42:	e7f5      	b.n	8020c30 <__strftime+0x8d8>
 8020c44:	6a2b      	ldr	r3, [r5, #32]
 8020c46:	2b00      	cmp	r3, #0
 8020c48:	f6ff ac88 	blt.w	802055c <__strftime+0x204>
 8020c4c:	f000 fa56 	bl	80210fc <__tz_lock>
 8020c50:	9b04      	ldr	r3, [sp, #16]
 8020c52:	b90b      	cbnz	r3, 8020c58 <__strftime+0x900>
 8020c54:	f000 fa5e 	bl	8021114 <_tzset_unlocked>
 8020c58:	f000 fe1a 	bl	8021890 <__gettzinfo>
 8020c5c:	6a2b      	ldr	r3, [r5, #32]
 8020c5e:	2b00      	cmp	r3, #0
 8020c60:	bfcc      	ite	gt
 8020c62:	2350      	movgt	r3, #80	; 0x50
 8020c64:	2328      	movle	r3, #40	; 0x28
 8020c66:	eb09 0704 	add.w	r7, r9, r4
 8020c6a:	58c6      	ldr	r6, [r0, r3]
 8020c6c:	f000 fa4c 	bl	8021108 <__tz_unlock>
 8020c70:	4276      	negs	r6, r6
 8020c72:	233c      	movs	r3, #60	; 0x3c
 8020c74:	fb96 f0f3 	sdiv	r0, r6, r3
 8020c78:	f000 fece 	bl	8021a18 <labs>
 8020c7c:	233c      	movs	r3, #60	; 0x3c
 8020c7e:	eba8 0a04 	sub.w	sl, r8, r4
 8020c82:	fb90 f2f3 	sdiv	r2, r0, r3
 8020c86:	fb02 0013 	mls	r0, r2, r3, r0
 8020c8a:	9000      	str	r0, [sp, #0]
 8020c8c:	4a28      	ldr	r2, [pc, #160]	; (8020d30 <__strftime+0x9d8>)
 8020c8e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8020c92:	4651      	mov	r1, sl
 8020c94:	4638      	mov	r0, r7
 8020c96:	fb96 f3f3 	sdiv	r3, r6, r3
 8020c9a:	f001 fbbb 	bl	8022414 <sniprintf>
 8020c9e:	2800      	cmp	r0, #0
 8020ca0:	f6ff ab89 	blt.w	80203b6 <__strftime+0x5e>
 8020ca4:	4404      	add	r4, r0
 8020ca6:	45a0      	cmp	r8, r4
 8020ca8:	f67f ab85 	bls.w	80203b6 <__strftime+0x5e>
 8020cac:	2301      	movs	r3, #1
 8020cae:	9304      	str	r3, [sp, #16]
 8020cb0:	e454      	b.n	802055c <__strftime+0x204>
 8020cb2:	6a2b      	ldr	r3, [r5, #32]
 8020cb4:	2b00      	cmp	r3, #0
 8020cb6:	f6ff ac51 	blt.w	802055c <__strftime+0x204>
 8020cba:	f000 fa1f 	bl	80210fc <__tz_lock>
 8020cbe:	9b04      	ldr	r3, [sp, #16]
 8020cc0:	b90b      	cbnz	r3, 8020cc6 <__strftime+0x96e>
 8020cc2:	f000 fa27 	bl	8021114 <_tzset_unlocked>
 8020cc6:	6a2b      	ldr	r3, [r5, #32]
 8020cc8:	4a1a      	ldr	r2, [pc, #104]	; (8020d34 <__strftime+0x9dc>)
 8020cca:	2b00      	cmp	r3, #0
 8020ccc:	bfd4      	ite	le
 8020cce:	2300      	movle	r3, #0
 8020cd0:	2301      	movgt	r3, #1
 8020cd2:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8020cd6:	4630      	mov	r0, r6
 8020cd8:	f7df fab0 	bl	800023c <strlen>
 8020cdc:	3e01      	subs	r6, #1
 8020cde:	4420      	add	r0, r4
 8020ce0:	f108 33ff 	add.w	r3, r8, #4294967295
 8020ce4:	42a0      	cmp	r0, r4
 8020ce6:	d102      	bne.n	8020cee <__strftime+0x996>
 8020ce8:	f000 fa0e 	bl	8021108 <__tz_unlock>
 8020cec:	e7de      	b.n	8020cac <__strftime+0x954>
 8020cee:	42a3      	cmp	r3, r4
 8020cf0:	d905      	bls.n	8020cfe <__strftime+0x9a6>
 8020cf2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020cf6:	f809 2004 	strb.w	r2, [r9, r4]
 8020cfa:	3401      	adds	r4, #1
 8020cfc:	e7f2      	b.n	8020ce4 <__strftime+0x98c>
 8020cfe:	f000 fa03 	bl	8021108 <__tz_unlock>
 8020d02:	f7ff bb58 	b.w	80203b6 <__strftime+0x5e>
 8020d06:	f108 33ff 	add.w	r3, r8, #4294967295
 8020d0a:	42a3      	cmp	r3, r4
 8020d0c:	f67f ab53 	bls.w	80203b6 <__strftime+0x5e>
 8020d10:	2325      	movs	r3, #37	; 0x25
 8020d12:	e627      	b.n	8020964 <__strftime+0x60c>
 8020d14:	f1b8 0f00 	cmp.w	r8, #0
 8020d18:	d002      	beq.n	8020d20 <__strftime+0x9c8>
 8020d1a:	2300      	movs	r3, #0
 8020d1c:	f809 3004 	strb.w	r3, [r9, r4]
 8020d20:	4620      	mov	r0, r4
 8020d22:	b011      	add	sp, #68	; 0x44
 8020d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d28:	fffff894 	.word	0xfffff894
 8020d2c:	08028f17 	.word	0x08028f17
 8020d30:	08028f34 	.word	0x08028f34
 8020d34:	2000016c 	.word	0x2000016c

08020d38 <strftime>:
 8020d38:	b513      	push	{r0, r1, r4, lr}
 8020d3a:	4c03      	ldr	r4, [pc, #12]	; (8020d48 <strftime+0x10>)
 8020d3c:	9400      	str	r4, [sp, #0]
 8020d3e:	f7ff fb0b 	bl	8020358 <__strftime>
 8020d42:	b002      	add	sp, #8
 8020d44:	bd10      	pop	{r4, pc}
 8020d46:	bf00      	nop
 8020d48:	200001d0 	.word	0x200001d0

08020d4c <strstr>:
 8020d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020d4e:	780c      	ldrb	r4, [r1, #0]
 8020d50:	b164      	cbz	r4, 8020d6c <strstr+0x20>
 8020d52:	4603      	mov	r3, r0
 8020d54:	781a      	ldrb	r2, [r3, #0]
 8020d56:	4618      	mov	r0, r3
 8020d58:	1c5e      	adds	r6, r3, #1
 8020d5a:	b90a      	cbnz	r2, 8020d60 <strstr+0x14>
 8020d5c:	4610      	mov	r0, r2
 8020d5e:	e005      	b.n	8020d6c <strstr+0x20>
 8020d60:	4294      	cmp	r4, r2
 8020d62:	d108      	bne.n	8020d76 <strstr+0x2a>
 8020d64:	460d      	mov	r5, r1
 8020d66:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8020d6a:	b902      	cbnz	r2, 8020d6e <strstr+0x22>
 8020d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d6e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8020d72:	4297      	cmp	r7, r2
 8020d74:	d0f7      	beq.n	8020d66 <strstr+0x1a>
 8020d76:	4633      	mov	r3, r6
 8020d78:	e7ec      	b.n	8020d54 <strstr+0x8>
	...

08020d7c <_strtol_l.isra.0>:
 8020d7c:	2b01      	cmp	r3, #1
 8020d7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d82:	d001      	beq.n	8020d88 <_strtol_l.isra.0+0xc>
 8020d84:	2b24      	cmp	r3, #36	; 0x24
 8020d86:	d906      	bls.n	8020d96 <_strtol_l.isra.0+0x1a>
 8020d88:	f7fe fa8c 	bl	801f2a4 <__errno>
 8020d8c:	2316      	movs	r3, #22
 8020d8e:	6003      	str	r3, [r0, #0]
 8020d90:	2000      	movs	r0, #0
 8020d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d96:	4f3a      	ldr	r7, [pc, #232]	; (8020e80 <_strtol_l.isra.0+0x104>)
 8020d98:	468e      	mov	lr, r1
 8020d9a:	4676      	mov	r6, lr
 8020d9c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020da0:	5de5      	ldrb	r5, [r4, r7]
 8020da2:	f015 0508 	ands.w	r5, r5, #8
 8020da6:	d1f8      	bne.n	8020d9a <_strtol_l.isra.0+0x1e>
 8020da8:	2c2d      	cmp	r4, #45	; 0x2d
 8020daa:	d134      	bne.n	8020e16 <_strtol_l.isra.0+0x9a>
 8020dac:	f89e 4000 	ldrb.w	r4, [lr]
 8020db0:	f04f 0801 	mov.w	r8, #1
 8020db4:	f106 0e02 	add.w	lr, r6, #2
 8020db8:	2b00      	cmp	r3, #0
 8020dba:	d05c      	beq.n	8020e76 <_strtol_l.isra.0+0xfa>
 8020dbc:	2b10      	cmp	r3, #16
 8020dbe:	d10c      	bne.n	8020dda <_strtol_l.isra.0+0x5e>
 8020dc0:	2c30      	cmp	r4, #48	; 0x30
 8020dc2:	d10a      	bne.n	8020dda <_strtol_l.isra.0+0x5e>
 8020dc4:	f89e 4000 	ldrb.w	r4, [lr]
 8020dc8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020dcc:	2c58      	cmp	r4, #88	; 0x58
 8020dce:	d14d      	bne.n	8020e6c <_strtol_l.isra.0+0xf0>
 8020dd0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020dd4:	2310      	movs	r3, #16
 8020dd6:	f10e 0e02 	add.w	lr, lr, #2
 8020dda:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8020dde:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020de2:	2600      	movs	r6, #0
 8020de4:	fbbc f9f3 	udiv	r9, ip, r3
 8020de8:	4635      	mov	r5, r6
 8020dea:	fb03 ca19 	mls	sl, r3, r9, ip
 8020dee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8020df2:	2f09      	cmp	r7, #9
 8020df4:	d818      	bhi.n	8020e28 <_strtol_l.isra.0+0xac>
 8020df6:	463c      	mov	r4, r7
 8020df8:	42a3      	cmp	r3, r4
 8020dfa:	dd24      	ble.n	8020e46 <_strtol_l.isra.0+0xca>
 8020dfc:	2e00      	cmp	r6, #0
 8020dfe:	db1f      	blt.n	8020e40 <_strtol_l.isra.0+0xc4>
 8020e00:	45a9      	cmp	r9, r5
 8020e02:	d31d      	bcc.n	8020e40 <_strtol_l.isra.0+0xc4>
 8020e04:	d101      	bne.n	8020e0a <_strtol_l.isra.0+0x8e>
 8020e06:	45a2      	cmp	sl, r4
 8020e08:	db1a      	blt.n	8020e40 <_strtol_l.isra.0+0xc4>
 8020e0a:	fb05 4503 	mla	r5, r5, r3, r4
 8020e0e:	2601      	movs	r6, #1
 8020e10:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020e14:	e7eb      	b.n	8020dee <_strtol_l.isra.0+0x72>
 8020e16:	2c2b      	cmp	r4, #43	; 0x2b
 8020e18:	bf08      	it	eq
 8020e1a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8020e1e:	46a8      	mov	r8, r5
 8020e20:	bf08      	it	eq
 8020e22:	f106 0e02 	addeq.w	lr, r6, #2
 8020e26:	e7c7      	b.n	8020db8 <_strtol_l.isra.0+0x3c>
 8020e28:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8020e2c:	2f19      	cmp	r7, #25
 8020e2e:	d801      	bhi.n	8020e34 <_strtol_l.isra.0+0xb8>
 8020e30:	3c37      	subs	r4, #55	; 0x37
 8020e32:	e7e1      	b.n	8020df8 <_strtol_l.isra.0+0x7c>
 8020e34:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8020e38:	2f19      	cmp	r7, #25
 8020e3a:	d804      	bhi.n	8020e46 <_strtol_l.isra.0+0xca>
 8020e3c:	3c57      	subs	r4, #87	; 0x57
 8020e3e:	e7db      	b.n	8020df8 <_strtol_l.isra.0+0x7c>
 8020e40:	f04f 36ff 	mov.w	r6, #4294967295
 8020e44:	e7e4      	b.n	8020e10 <_strtol_l.isra.0+0x94>
 8020e46:	2e00      	cmp	r6, #0
 8020e48:	da05      	bge.n	8020e56 <_strtol_l.isra.0+0xda>
 8020e4a:	2322      	movs	r3, #34	; 0x22
 8020e4c:	6003      	str	r3, [r0, #0]
 8020e4e:	4665      	mov	r5, ip
 8020e50:	b942      	cbnz	r2, 8020e64 <_strtol_l.isra.0+0xe8>
 8020e52:	4628      	mov	r0, r5
 8020e54:	e79d      	b.n	8020d92 <_strtol_l.isra.0+0x16>
 8020e56:	f1b8 0f00 	cmp.w	r8, #0
 8020e5a:	d000      	beq.n	8020e5e <_strtol_l.isra.0+0xe2>
 8020e5c:	426d      	negs	r5, r5
 8020e5e:	2a00      	cmp	r2, #0
 8020e60:	d0f7      	beq.n	8020e52 <_strtol_l.isra.0+0xd6>
 8020e62:	b10e      	cbz	r6, 8020e68 <_strtol_l.isra.0+0xec>
 8020e64:	f10e 31ff 	add.w	r1, lr, #4294967295
 8020e68:	6011      	str	r1, [r2, #0]
 8020e6a:	e7f2      	b.n	8020e52 <_strtol_l.isra.0+0xd6>
 8020e6c:	2430      	movs	r4, #48	; 0x30
 8020e6e:	2b00      	cmp	r3, #0
 8020e70:	d1b3      	bne.n	8020dda <_strtol_l.isra.0+0x5e>
 8020e72:	2308      	movs	r3, #8
 8020e74:	e7b1      	b.n	8020dda <_strtol_l.isra.0+0x5e>
 8020e76:	2c30      	cmp	r4, #48	; 0x30
 8020e78:	d0a4      	beq.n	8020dc4 <_strtol_l.isra.0+0x48>
 8020e7a:	230a      	movs	r3, #10
 8020e7c:	e7ad      	b.n	8020dda <_strtol_l.isra.0+0x5e>
 8020e7e:	bf00      	nop
 8020e80:	080291e1 	.word	0x080291e1

08020e84 <_strtol_r>:
 8020e84:	f7ff bf7a 	b.w	8020d7c <_strtol_l.isra.0>

08020e88 <strtol>:
 8020e88:	4613      	mov	r3, r2
 8020e8a:	460a      	mov	r2, r1
 8020e8c:	4601      	mov	r1, r0
 8020e8e:	4802      	ldr	r0, [pc, #8]	; (8020e98 <strtol+0x10>)
 8020e90:	6800      	ldr	r0, [r0, #0]
 8020e92:	f7ff bf73 	b.w	8020d7c <_strtol_l.isra.0>
 8020e96:	bf00      	nop
 8020e98:	20000108 	.word	0x20000108

08020e9c <_strtoul_l.isra.0>:
 8020e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020ea0:	4e3b      	ldr	r6, [pc, #236]	; (8020f90 <_strtoul_l.isra.0+0xf4>)
 8020ea2:	4686      	mov	lr, r0
 8020ea4:	468c      	mov	ip, r1
 8020ea6:	4660      	mov	r0, ip
 8020ea8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020eac:	5da5      	ldrb	r5, [r4, r6]
 8020eae:	f015 0508 	ands.w	r5, r5, #8
 8020eb2:	d1f8      	bne.n	8020ea6 <_strtoul_l.isra.0+0xa>
 8020eb4:	2c2d      	cmp	r4, #45	; 0x2d
 8020eb6:	d134      	bne.n	8020f22 <_strtoul_l.isra.0+0x86>
 8020eb8:	f89c 4000 	ldrb.w	r4, [ip]
 8020ebc:	f04f 0801 	mov.w	r8, #1
 8020ec0:	f100 0c02 	add.w	ip, r0, #2
 8020ec4:	2b00      	cmp	r3, #0
 8020ec6:	d05e      	beq.n	8020f86 <_strtoul_l.isra.0+0xea>
 8020ec8:	2b10      	cmp	r3, #16
 8020eca:	d10c      	bne.n	8020ee6 <_strtoul_l.isra.0+0x4a>
 8020ecc:	2c30      	cmp	r4, #48	; 0x30
 8020ece:	d10a      	bne.n	8020ee6 <_strtoul_l.isra.0+0x4a>
 8020ed0:	f89c 0000 	ldrb.w	r0, [ip]
 8020ed4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8020ed8:	2858      	cmp	r0, #88	; 0x58
 8020eda:	d14f      	bne.n	8020f7c <_strtoul_l.isra.0+0xe0>
 8020edc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8020ee0:	2310      	movs	r3, #16
 8020ee2:	f10c 0c02 	add.w	ip, ip, #2
 8020ee6:	f04f 37ff 	mov.w	r7, #4294967295
 8020eea:	2500      	movs	r5, #0
 8020eec:	fbb7 f7f3 	udiv	r7, r7, r3
 8020ef0:	fb03 f907 	mul.w	r9, r3, r7
 8020ef4:	ea6f 0909 	mvn.w	r9, r9
 8020ef8:	4628      	mov	r0, r5
 8020efa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8020efe:	2e09      	cmp	r6, #9
 8020f00:	d818      	bhi.n	8020f34 <_strtoul_l.isra.0+0x98>
 8020f02:	4634      	mov	r4, r6
 8020f04:	42a3      	cmp	r3, r4
 8020f06:	dd24      	ble.n	8020f52 <_strtoul_l.isra.0+0xb6>
 8020f08:	2d00      	cmp	r5, #0
 8020f0a:	db1f      	blt.n	8020f4c <_strtoul_l.isra.0+0xb0>
 8020f0c:	4287      	cmp	r7, r0
 8020f0e:	d31d      	bcc.n	8020f4c <_strtoul_l.isra.0+0xb0>
 8020f10:	d101      	bne.n	8020f16 <_strtoul_l.isra.0+0x7a>
 8020f12:	45a1      	cmp	r9, r4
 8020f14:	db1a      	blt.n	8020f4c <_strtoul_l.isra.0+0xb0>
 8020f16:	fb00 4003 	mla	r0, r0, r3, r4
 8020f1a:	2501      	movs	r5, #1
 8020f1c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020f20:	e7eb      	b.n	8020efa <_strtoul_l.isra.0+0x5e>
 8020f22:	2c2b      	cmp	r4, #43	; 0x2b
 8020f24:	bf08      	it	eq
 8020f26:	f89c 4000 	ldrbeq.w	r4, [ip]
 8020f2a:	46a8      	mov	r8, r5
 8020f2c:	bf08      	it	eq
 8020f2e:	f100 0c02 	addeq.w	ip, r0, #2
 8020f32:	e7c7      	b.n	8020ec4 <_strtoul_l.isra.0+0x28>
 8020f34:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8020f38:	2e19      	cmp	r6, #25
 8020f3a:	d801      	bhi.n	8020f40 <_strtoul_l.isra.0+0xa4>
 8020f3c:	3c37      	subs	r4, #55	; 0x37
 8020f3e:	e7e1      	b.n	8020f04 <_strtoul_l.isra.0+0x68>
 8020f40:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8020f44:	2e19      	cmp	r6, #25
 8020f46:	d804      	bhi.n	8020f52 <_strtoul_l.isra.0+0xb6>
 8020f48:	3c57      	subs	r4, #87	; 0x57
 8020f4a:	e7db      	b.n	8020f04 <_strtoul_l.isra.0+0x68>
 8020f4c:	f04f 35ff 	mov.w	r5, #4294967295
 8020f50:	e7e4      	b.n	8020f1c <_strtoul_l.isra.0+0x80>
 8020f52:	2d00      	cmp	r5, #0
 8020f54:	da07      	bge.n	8020f66 <_strtoul_l.isra.0+0xca>
 8020f56:	2322      	movs	r3, #34	; 0x22
 8020f58:	f8ce 3000 	str.w	r3, [lr]
 8020f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8020f60:	b942      	cbnz	r2, 8020f74 <_strtoul_l.isra.0+0xd8>
 8020f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020f66:	f1b8 0f00 	cmp.w	r8, #0
 8020f6a:	d000      	beq.n	8020f6e <_strtoul_l.isra.0+0xd2>
 8020f6c:	4240      	negs	r0, r0
 8020f6e:	2a00      	cmp	r2, #0
 8020f70:	d0f7      	beq.n	8020f62 <_strtoul_l.isra.0+0xc6>
 8020f72:	b10d      	cbz	r5, 8020f78 <_strtoul_l.isra.0+0xdc>
 8020f74:	f10c 31ff 	add.w	r1, ip, #4294967295
 8020f78:	6011      	str	r1, [r2, #0]
 8020f7a:	e7f2      	b.n	8020f62 <_strtoul_l.isra.0+0xc6>
 8020f7c:	2430      	movs	r4, #48	; 0x30
 8020f7e:	2b00      	cmp	r3, #0
 8020f80:	d1b1      	bne.n	8020ee6 <_strtoul_l.isra.0+0x4a>
 8020f82:	2308      	movs	r3, #8
 8020f84:	e7af      	b.n	8020ee6 <_strtoul_l.isra.0+0x4a>
 8020f86:	2c30      	cmp	r4, #48	; 0x30
 8020f88:	d0a2      	beq.n	8020ed0 <_strtoul_l.isra.0+0x34>
 8020f8a:	230a      	movs	r3, #10
 8020f8c:	e7ab      	b.n	8020ee6 <_strtoul_l.isra.0+0x4a>
 8020f8e:	bf00      	nop
 8020f90:	080291e1 	.word	0x080291e1

08020f94 <_strtoul_r>:
 8020f94:	f7ff bf82 	b.w	8020e9c <_strtoul_l.isra.0>

08020f98 <strtoul>:
 8020f98:	4613      	mov	r3, r2
 8020f9a:	460a      	mov	r2, r1
 8020f9c:	4601      	mov	r1, r0
 8020f9e:	4802      	ldr	r0, [pc, #8]	; (8020fa8 <strtoul+0x10>)
 8020fa0:	6800      	ldr	r0, [r0, #0]
 8020fa2:	f7ff bf7b 	b.w	8020e9c <_strtoul_l.isra.0>
 8020fa6:	bf00      	nop
 8020fa8:	20000108 	.word	0x20000108

08020fac <__tzcalc_limits>:
 8020fac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fb0:	4680      	mov	r8, r0
 8020fb2:	f000 fc6d 	bl	8021890 <__gettzinfo>
 8020fb6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8020fba:	4598      	cmp	r8, r3
 8020fbc:	f340 8098 	ble.w	80210f0 <__tzcalc_limits+0x144>
 8020fc0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8020fc4:	4443      	add	r3, r8
 8020fc6:	109b      	asrs	r3, r3, #2
 8020fc8:	f240 126d 	movw	r2, #365	; 0x16d
 8020fcc:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8020fd0:	fb02 3505 	mla	r5, r2, r5, r3
 8020fd4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8020fd8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8020fdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8020fe0:	441d      	add	r5, r3
 8020fe2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8020fe6:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8020fea:	fb98 f7f3 	sdiv	r7, r8, r3
 8020fee:	fb03 8717 	mls	r7, r3, r7, r8
 8020ff2:	4442      	add	r2, r8
 8020ff4:	fab7 fc87 	clz	ip, r7
 8020ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8020ffc:	f008 0303 	and.w	r3, r8, #3
 8021000:	4415      	add	r5, r2
 8021002:	2264      	movs	r2, #100	; 0x64
 8021004:	f8c0 8004 	str.w	r8, [r0, #4]
 8021008:	fb98 f6f2 	sdiv	r6, r8, r2
 802100c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021010:	fb02 8616 	mls	r6, r2, r6, r8
 8021014:	4604      	mov	r4, r0
 8021016:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 802101a:	9300      	str	r3, [sp, #0]
 802101c:	f04f 0e07 	mov.w	lr, #7
 8021020:	7a22      	ldrb	r2, [r4, #8]
 8021022:	6963      	ldr	r3, [r4, #20]
 8021024:	2a4a      	cmp	r2, #74	; 0x4a
 8021026:	d128      	bne.n	802107a <__tzcalc_limits+0xce>
 8021028:	9900      	ldr	r1, [sp, #0]
 802102a:	18ea      	adds	r2, r5, r3
 802102c:	b901      	cbnz	r1, 8021030 <__tzcalc_limits+0x84>
 802102e:	b906      	cbnz	r6, 8021032 <__tzcalc_limits+0x86>
 8021030:	bb0f      	cbnz	r7, 8021076 <__tzcalc_limits+0xca>
 8021032:	2b3b      	cmp	r3, #59	; 0x3b
 8021034:	bfd4      	ite	le
 8021036:	2300      	movle	r3, #0
 8021038:	2301      	movgt	r3, #1
 802103a:	4413      	add	r3, r2
 802103c:	1e5a      	subs	r2, r3, #1
 802103e:	69a3      	ldr	r3, [r4, #24]
 8021040:	492c      	ldr	r1, [pc, #176]	; (80210f4 <__tzcalc_limits+0x148>)
 8021042:	fb01 3202 	mla	r2, r1, r2, r3
 8021046:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021048:	4413      	add	r3, r2
 802104a:	461a      	mov	r2, r3
 802104c:	17db      	asrs	r3, r3, #31
 802104e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8021052:	3428      	adds	r4, #40	; 0x28
 8021054:	45a3      	cmp	fp, r4
 8021056:	d1e3      	bne.n	8021020 <__tzcalc_limits+0x74>
 8021058:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 802105c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8021060:	4294      	cmp	r4, r2
 8021062:	eb75 0303 	sbcs.w	r3, r5, r3
 8021066:	bfb4      	ite	lt
 8021068:	2301      	movlt	r3, #1
 802106a:	2300      	movge	r3, #0
 802106c:	6003      	str	r3, [r0, #0]
 802106e:	2001      	movs	r0, #1
 8021070:	b003      	add	sp, #12
 8021072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021076:	2300      	movs	r3, #0
 8021078:	e7df      	b.n	802103a <__tzcalc_limits+0x8e>
 802107a:	2a44      	cmp	r2, #68	; 0x44
 802107c:	d101      	bne.n	8021082 <__tzcalc_limits+0xd6>
 802107e:	18ea      	adds	r2, r5, r3
 8021080:	e7dd      	b.n	802103e <__tzcalc_limits+0x92>
 8021082:	9a00      	ldr	r2, [sp, #0]
 8021084:	bb72      	cbnz	r2, 80210e4 <__tzcalc_limits+0x138>
 8021086:	2e00      	cmp	r6, #0
 8021088:	bf0c      	ite	eq
 802108a:	46e0      	moveq	r8, ip
 802108c:	f04f 0801 	movne.w	r8, #1
 8021090:	4919      	ldr	r1, [pc, #100]	; (80210f8 <__tzcalc_limits+0x14c>)
 8021092:	68e2      	ldr	r2, [r4, #12]
 8021094:	9201      	str	r2, [sp, #4]
 8021096:	f04f 0a30 	mov.w	sl, #48	; 0x30
 802109a:	fb0a 1808 	mla	r8, sl, r8, r1
 802109e:	462a      	mov	r2, r5
 80210a0:	f04f 0900 	mov.w	r9, #0
 80210a4:	f1a8 0804 	sub.w	r8, r8, #4
 80210a8:	9901      	ldr	r1, [sp, #4]
 80210aa:	f109 0901 	add.w	r9, r9, #1
 80210ae:	4549      	cmp	r1, r9
 80210b0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80210b4:	dc18      	bgt.n	80210e8 <__tzcalc_limits+0x13c>
 80210b6:	f102 0804 	add.w	r8, r2, #4
 80210ba:	fb98 f9fe 	sdiv	r9, r8, lr
 80210be:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80210c2:	eba8 0909 	sub.w	r9, r8, r9
 80210c6:	ebb3 0909 	subs.w	r9, r3, r9
 80210ca:	6923      	ldr	r3, [r4, #16]
 80210cc:	f103 33ff 	add.w	r3, r3, #4294967295
 80210d0:	bf48      	it	mi
 80210d2:	f109 0907 	addmi.w	r9, r9, #7
 80210d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80210da:	444b      	add	r3, r9
 80210dc:	4553      	cmp	r3, sl
 80210de:	da05      	bge.n	80210ec <__tzcalc_limits+0x140>
 80210e0:	441a      	add	r2, r3
 80210e2:	e7ac      	b.n	802103e <__tzcalc_limits+0x92>
 80210e4:	46e0      	mov	r8, ip
 80210e6:	e7d3      	b.n	8021090 <__tzcalc_limits+0xe4>
 80210e8:	4452      	add	r2, sl
 80210ea:	e7dd      	b.n	80210a8 <__tzcalc_limits+0xfc>
 80210ec:	3b07      	subs	r3, #7
 80210ee:	e7f5      	b.n	80210dc <__tzcalc_limits+0x130>
 80210f0:	2000      	movs	r0, #0
 80210f2:	e7bd      	b.n	8021070 <__tzcalc_limits+0xc4>
 80210f4:	00015180 	.word	0x00015180
 80210f8:	08028e28 	.word	0x08028e28

080210fc <__tz_lock>:
 80210fc:	4801      	ldr	r0, [pc, #4]	; (8021104 <__tz_lock+0x8>)
 80210fe:	f7fe be29 	b.w	801fd54 <__retarget_lock_acquire>
 8021102:	bf00      	nop
 8021104:	20000f8f 	.word	0x20000f8f

08021108 <__tz_unlock>:
 8021108:	4801      	ldr	r0, [pc, #4]	; (8021110 <__tz_unlock+0x8>)
 802110a:	f7fe be25 	b.w	801fd58 <__retarget_lock_release>
 802110e:	bf00      	nop
 8021110:	20000f8f 	.word	0x20000f8f

08021114 <_tzset_unlocked>:
 8021114:	4b01      	ldr	r3, [pc, #4]	; (802111c <_tzset_unlocked+0x8>)
 8021116:	6818      	ldr	r0, [r3, #0]
 8021118:	f000 b802 	b.w	8021120 <_tzset_unlocked_r>
 802111c:	20000108 	.word	0x20000108

08021120 <_tzset_unlocked_r>:
 8021120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021124:	b08d      	sub	sp, #52	; 0x34
 8021126:	4607      	mov	r7, r0
 8021128:	f000 fbb2 	bl	8021890 <__gettzinfo>
 802112c:	49ae      	ldr	r1, [pc, #696]	; (80213e8 <_tzset_unlocked_r+0x2c8>)
 802112e:	4eaf      	ldr	r6, [pc, #700]	; (80213ec <_tzset_unlocked_r+0x2cc>)
 8021130:	4605      	mov	r5, r0
 8021132:	4638      	mov	r0, r7
 8021134:	f000 fba4 	bl	8021880 <_getenv_r>
 8021138:	4604      	mov	r4, r0
 802113a:	b970      	cbnz	r0, 802115a <_tzset_unlocked_r+0x3a>
 802113c:	4bac      	ldr	r3, [pc, #688]	; (80213f0 <_tzset_unlocked_r+0x2d0>)
 802113e:	4aad      	ldr	r2, [pc, #692]	; (80213f4 <_tzset_unlocked_r+0x2d4>)
 8021140:	6018      	str	r0, [r3, #0]
 8021142:	4bad      	ldr	r3, [pc, #692]	; (80213f8 <_tzset_unlocked_r+0x2d8>)
 8021144:	6018      	str	r0, [r3, #0]
 8021146:	4bad      	ldr	r3, [pc, #692]	; (80213fc <_tzset_unlocked_r+0x2dc>)
 8021148:	6830      	ldr	r0, [r6, #0]
 802114a:	e9c3 2200 	strd	r2, r2, [r3]
 802114e:	f7fe fe71 	bl	801fe34 <free>
 8021152:	6034      	str	r4, [r6, #0]
 8021154:	b00d      	add	sp, #52	; 0x34
 8021156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802115a:	6831      	ldr	r1, [r6, #0]
 802115c:	2900      	cmp	r1, #0
 802115e:	d15f      	bne.n	8021220 <_tzset_unlocked_r+0x100>
 8021160:	6830      	ldr	r0, [r6, #0]
 8021162:	f7fe fe67 	bl	801fe34 <free>
 8021166:	4620      	mov	r0, r4
 8021168:	f7df f868 	bl	800023c <strlen>
 802116c:	1c41      	adds	r1, r0, #1
 802116e:	4638      	mov	r0, r7
 8021170:	f7fe fede 	bl	801ff30 <_malloc_r>
 8021174:	6030      	str	r0, [r6, #0]
 8021176:	2800      	cmp	r0, #0
 8021178:	d157      	bne.n	802122a <_tzset_unlocked_r+0x10a>
 802117a:	7823      	ldrb	r3, [r4, #0]
 802117c:	4aa0      	ldr	r2, [pc, #640]	; (8021400 <_tzset_unlocked_r+0x2e0>)
 802117e:	49a1      	ldr	r1, [pc, #644]	; (8021404 <_tzset_unlocked_r+0x2e4>)
 8021180:	2b3a      	cmp	r3, #58	; 0x3a
 8021182:	bf08      	it	eq
 8021184:	3401      	addeq	r4, #1
 8021186:	ae0a      	add	r6, sp, #40	; 0x28
 8021188:	4633      	mov	r3, r6
 802118a:	4620      	mov	r0, r4
 802118c:	f001 f976 	bl	802247c <siscanf>
 8021190:	2800      	cmp	r0, #0
 8021192:	dddf      	ble.n	8021154 <_tzset_unlocked_r+0x34>
 8021194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021196:	18e7      	adds	r7, r4, r3
 8021198:	5ce3      	ldrb	r3, [r4, r3]
 802119a:	2b2d      	cmp	r3, #45	; 0x2d
 802119c:	d149      	bne.n	8021232 <_tzset_unlocked_r+0x112>
 802119e:	3701      	adds	r7, #1
 80211a0:	f04f 34ff 	mov.w	r4, #4294967295
 80211a4:	f10d 0a20 	add.w	sl, sp, #32
 80211a8:	f10d 0b1e 	add.w	fp, sp, #30
 80211ac:	f04f 0800 	mov.w	r8, #0
 80211b0:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80211b4:	4994      	ldr	r1, [pc, #592]	; (8021408 <_tzset_unlocked_r+0x2e8>)
 80211b6:	9603      	str	r6, [sp, #12]
 80211b8:	f8cd b000 	str.w	fp, [sp]
 80211bc:	4633      	mov	r3, r6
 80211be:	aa07      	add	r2, sp, #28
 80211c0:	4638      	mov	r0, r7
 80211c2:	f8ad 801e 	strh.w	r8, [sp, #30]
 80211c6:	f8ad 8020 	strh.w	r8, [sp, #32]
 80211ca:	f001 f957 	bl	802247c <siscanf>
 80211ce:	4540      	cmp	r0, r8
 80211d0:	ddc0      	ble.n	8021154 <_tzset_unlocked_r+0x34>
 80211d2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80211d6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80211da:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8021414 <_tzset_unlocked_r+0x2f4>
 80211de:	213c      	movs	r1, #60	; 0x3c
 80211e0:	fb01 2203 	mla	r2, r1, r3, r2
 80211e4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80211e8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80211ec:	fb01 2303 	mla	r3, r1, r3, r2
 80211f0:	435c      	muls	r4, r3
 80211f2:	62ac      	str	r4, [r5, #40]	; 0x28
 80211f4:	4c81      	ldr	r4, [pc, #516]	; (80213fc <_tzset_unlocked_r+0x2dc>)
 80211f6:	4b82      	ldr	r3, [pc, #520]	; (8021400 <_tzset_unlocked_r+0x2e0>)
 80211f8:	6023      	str	r3, [r4, #0]
 80211fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211fc:	4981      	ldr	r1, [pc, #516]	; (8021404 <_tzset_unlocked_r+0x2e4>)
 80211fe:	441f      	add	r7, r3
 8021200:	464a      	mov	r2, r9
 8021202:	4633      	mov	r3, r6
 8021204:	4638      	mov	r0, r7
 8021206:	f001 f939 	bl	802247c <siscanf>
 802120a:	4540      	cmp	r0, r8
 802120c:	dc16      	bgt.n	802123c <_tzset_unlocked_r+0x11c>
 802120e:	6823      	ldr	r3, [r4, #0]
 8021210:	6063      	str	r3, [r4, #4]
 8021212:	4b77      	ldr	r3, [pc, #476]	; (80213f0 <_tzset_unlocked_r+0x2d0>)
 8021214:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8021216:	601a      	str	r2, [r3, #0]
 8021218:	4b77      	ldr	r3, [pc, #476]	; (80213f8 <_tzset_unlocked_r+0x2d8>)
 802121a:	f8c3 8000 	str.w	r8, [r3]
 802121e:	e799      	b.n	8021154 <_tzset_unlocked_r+0x34>
 8021220:	f7df f814 	bl	800024c <strcmp>
 8021224:	2800      	cmp	r0, #0
 8021226:	d19b      	bne.n	8021160 <_tzset_unlocked_r+0x40>
 8021228:	e794      	b.n	8021154 <_tzset_unlocked_r+0x34>
 802122a:	4621      	mov	r1, r4
 802122c:	f001 f952 	bl	80224d4 <strcpy>
 8021230:	e7a3      	b.n	802117a <_tzset_unlocked_r+0x5a>
 8021232:	2b2b      	cmp	r3, #43	; 0x2b
 8021234:	bf08      	it	eq
 8021236:	3701      	addeq	r7, #1
 8021238:	2401      	movs	r4, #1
 802123a:	e7b3      	b.n	80211a4 <_tzset_unlocked_r+0x84>
 802123c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802123e:	f8c4 9004 	str.w	r9, [r4, #4]
 8021242:	18fc      	adds	r4, r7, r3
 8021244:	5cfb      	ldrb	r3, [r7, r3]
 8021246:	2b2d      	cmp	r3, #45	; 0x2d
 8021248:	f040 808b 	bne.w	8021362 <_tzset_unlocked_r+0x242>
 802124c:	3401      	adds	r4, #1
 802124e:	f04f 37ff 	mov.w	r7, #4294967295
 8021252:	2300      	movs	r3, #0
 8021254:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021258:	f8ad 301e 	strh.w	r3, [sp, #30]
 802125c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8021260:	930a      	str	r3, [sp, #40]	; 0x28
 8021262:	e9cd a602 	strd	sl, r6, [sp, #8]
 8021266:	e9cd b600 	strd	fp, r6, [sp]
 802126a:	4967      	ldr	r1, [pc, #412]	; (8021408 <_tzset_unlocked_r+0x2e8>)
 802126c:	4633      	mov	r3, r6
 802126e:	aa07      	add	r2, sp, #28
 8021270:	4620      	mov	r0, r4
 8021272:	f001 f903 	bl	802247c <siscanf>
 8021276:	2800      	cmp	r0, #0
 8021278:	dc78      	bgt.n	802136c <_tzset_unlocked_r+0x24c>
 802127a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 802127c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8021280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021282:	652f      	str	r7, [r5, #80]	; 0x50
 8021284:	441c      	add	r4, r3
 8021286:	462f      	mov	r7, r5
 8021288:	f04f 0900 	mov.w	r9, #0
 802128c:	7823      	ldrb	r3, [r4, #0]
 802128e:	2b2c      	cmp	r3, #44	; 0x2c
 8021290:	bf08      	it	eq
 8021292:	3401      	addeq	r4, #1
 8021294:	f894 8000 	ldrb.w	r8, [r4]
 8021298:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 802129c:	d178      	bne.n	8021390 <_tzset_unlocked_r+0x270>
 802129e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80212a2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80212a6:	ab09      	add	r3, sp, #36	; 0x24
 80212a8:	9300      	str	r3, [sp, #0]
 80212aa:	4958      	ldr	r1, [pc, #352]	; (802140c <_tzset_unlocked_r+0x2ec>)
 80212ac:	9603      	str	r6, [sp, #12]
 80212ae:	4633      	mov	r3, r6
 80212b0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80212b4:	4620      	mov	r0, r4
 80212b6:	f001 f8e1 	bl	802247c <siscanf>
 80212ba:	2803      	cmp	r0, #3
 80212bc:	f47f af4a 	bne.w	8021154 <_tzset_unlocked_r+0x34>
 80212c0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80212c4:	1e4b      	subs	r3, r1, #1
 80212c6:	2b0b      	cmp	r3, #11
 80212c8:	f63f af44 	bhi.w	8021154 <_tzset_unlocked_r+0x34>
 80212cc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80212d0:	1e53      	subs	r3, r2, #1
 80212d2:	2b04      	cmp	r3, #4
 80212d4:	f63f af3e 	bhi.w	8021154 <_tzset_unlocked_r+0x34>
 80212d8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80212dc:	2b06      	cmp	r3, #6
 80212de:	f63f af39 	bhi.w	8021154 <_tzset_unlocked_r+0x34>
 80212e2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80212e6:	f887 8008 	strb.w	r8, [r7, #8]
 80212ea:	617b      	str	r3, [r7, #20]
 80212ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212ee:	eb04 0803 	add.w	r8, r4, r3
 80212f2:	2302      	movs	r3, #2
 80212f4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80212f8:	2300      	movs	r3, #0
 80212fa:	f8ad 301e 	strh.w	r3, [sp, #30]
 80212fe:	f8ad 3020 	strh.w	r3, [sp, #32]
 8021302:	930a      	str	r3, [sp, #40]	; 0x28
 8021304:	f898 3000 	ldrb.w	r3, [r8]
 8021308:	2b2f      	cmp	r3, #47	; 0x2f
 802130a:	d109      	bne.n	8021320 <_tzset_unlocked_r+0x200>
 802130c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8021310:	e9cd b600 	strd	fp, r6, [sp]
 8021314:	493e      	ldr	r1, [pc, #248]	; (8021410 <_tzset_unlocked_r+0x2f0>)
 8021316:	4633      	mov	r3, r6
 8021318:	aa07      	add	r2, sp, #28
 802131a:	4640      	mov	r0, r8
 802131c:	f001 f8ae 	bl	802247c <siscanf>
 8021320:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021324:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021328:	213c      	movs	r1, #60	; 0x3c
 802132a:	fb01 2203 	mla	r2, r1, r3, r2
 802132e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021332:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021336:	fb01 2303 	mla	r3, r1, r3, r2
 802133a:	61bb      	str	r3, [r7, #24]
 802133c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802133e:	3728      	adds	r7, #40	; 0x28
 8021340:	4444      	add	r4, r8
 8021342:	f1b9 0f00 	cmp.w	r9, #0
 8021346:	d020      	beq.n	802138a <_tzset_unlocked_r+0x26a>
 8021348:	6868      	ldr	r0, [r5, #4]
 802134a:	f7ff fe2f 	bl	8020fac <__tzcalc_limits>
 802134e:	4b28      	ldr	r3, [pc, #160]	; (80213f0 <_tzset_unlocked_r+0x2d0>)
 8021350:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8021352:	601a      	str	r2, [r3, #0]
 8021354:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8021356:	1a9b      	subs	r3, r3, r2
 8021358:	4a27      	ldr	r2, [pc, #156]	; (80213f8 <_tzset_unlocked_r+0x2d8>)
 802135a:	bf18      	it	ne
 802135c:	2301      	movne	r3, #1
 802135e:	6013      	str	r3, [r2, #0]
 8021360:	e6f8      	b.n	8021154 <_tzset_unlocked_r+0x34>
 8021362:	2b2b      	cmp	r3, #43	; 0x2b
 8021364:	bf08      	it	eq
 8021366:	3401      	addeq	r4, #1
 8021368:	2701      	movs	r7, #1
 802136a:	e772      	b.n	8021252 <_tzset_unlocked_r+0x132>
 802136c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021370:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021374:	213c      	movs	r1, #60	; 0x3c
 8021376:	fb01 2203 	mla	r2, r1, r3, r2
 802137a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802137e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021382:	fb01 2303 	mla	r3, r1, r3, r2
 8021386:	435f      	muls	r7, r3
 8021388:	e77a      	b.n	8021280 <_tzset_unlocked_r+0x160>
 802138a:	f04f 0901 	mov.w	r9, #1
 802138e:	e77d      	b.n	802128c <_tzset_unlocked_r+0x16c>
 8021390:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8021394:	bf06      	itte	eq
 8021396:	3401      	addeq	r4, #1
 8021398:	4643      	moveq	r3, r8
 802139a:	2344      	movne	r3, #68	; 0x44
 802139c:	220a      	movs	r2, #10
 802139e:	a90b      	add	r1, sp, #44	; 0x2c
 80213a0:	4620      	mov	r0, r4
 80213a2:	9305      	str	r3, [sp, #20]
 80213a4:	f7ff fdf8 	bl	8020f98 <strtoul>
 80213a8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80213ac:	9b05      	ldr	r3, [sp, #20]
 80213ae:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80213b2:	45a0      	cmp	r8, r4
 80213b4:	d114      	bne.n	80213e0 <_tzset_unlocked_r+0x2c0>
 80213b6:	234d      	movs	r3, #77	; 0x4d
 80213b8:	f1b9 0f00 	cmp.w	r9, #0
 80213bc:	d107      	bne.n	80213ce <_tzset_unlocked_r+0x2ae>
 80213be:	722b      	strb	r3, [r5, #8]
 80213c0:	2103      	movs	r1, #3
 80213c2:	2302      	movs	r3, #2
 80213c4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80213c8:	f8c5 9014 	str.w	r9, [r5, #20]
 80213cc:	e791      	b.n	80212f2 <_tzset_unlocked_r+0x1d2>
 80213ce:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80213d2:	220b      	movs	r2, #11
 80213d4:	2301      	movs	r3, #1
 80213d6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80213da:	2300      	movs	r3, #0
 80213dc:	63eb      	str	r3, [r5, #60]	; 0x3c
 80213de:	e788      	b.n	80212f2 <_tzset_unlocked_r+0x1d2>
 80213e0:	b280      	uxth	r0, r0
 80213e2:	723b      	strb	r3, [r7, #8]
 80213e4:	6178      	str	r0, [r7, #20]
 80213e6:	e784      	b.n	80212f2 <_tzset_unlocked_r+0x1d2>
 80213e8:	08029168 	.word	0x08029168
 80213ec:	20000ee8 	.word	0x20000ee8
 80213f0:	20000ef0 	.word	0x20000ef0
 80213f4:	0802916b 	.word	0x0802916b
 80213f8:	20000eec 	.word	0x20000eec
 80213fc:	2000016c 	.word	0x2000016c
 8021400:	20000edb 	.word	0x20000edb
 8021404:	0802916f 	.word	0x0802916f
 8021408:	08029192 	.word	0x08029192
 802140c:	0802917e 	.word	0x0802917e
 8021410:	08029191 	.word	0x08029191
 8021414:	20000ed0 	.word	0x20000ed0

08021418 <_vsniprintf_r>:
 8021418:	b530      	push	{r4, r5, lr}
 802141a:	1e14      	subs	r4, r2, #0
 802141c:	4605      	mov	r5, r0
 802141e:	b09b      	sub	sp, #108	; 0x6c
 8021420:	4618      	mov	r0, r3
 8021422:	da05      	bge.n	8021430 <_vsniprintf_r+0x18>
 8021424:	238b      	movs	r3, #139	; 0x8b
 8021426:	602b      	str	r3, [r5, #0]
 8021428:	f04f 30ff 	mov.w	r0, #4294967295
 802142c:	b01b      	add	sp, #108	; 0x6c
 802142e:	bd30      	pop	{r4, r5, pc}
 8021430:	f44f 7302 	mov.w	r3, #520	; 0x208
 8021434:	f8ad 300c 	strh.w	r3, [sp, #12]
 8021438:	bf14      	ite	ne
 802143a:	f104 33ff 	addne.w	r3, r4, #4294967295
 802143e:	4623      	moveq	r3, r4
 8021440:	9302      	str	r3, [sp, #8]
 8021442:	9305      	str	r3, [sp, #20]
 8021444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021448:	9100      	str	r1, [sp, #0]
 802144a:	9104      	str	r1, [sp, #16]
 802144c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021450:	4602      	mov	r2, r0
 8021452:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021454:	4669      	mov	r1, sp
 8021456:	4628      	mov	r0, r5
 8021458:	f000 fb94 	bl	8021b84 <_svfiprintf_r>
 802145c:	1c43      	adds	r3, r0, #1
 802145e:	bfbc      	itt	lt
 8021460:	238b      	movlt	r3, #139	; 0x8b
 8021462:	602b      	strlt	r3, [r5, #0]
 8021464:	2c00      	cmp	r4, #0
 8021466:	d0e1      	beq.n	802142c <_vsniprintf_r+0x14>
 8021468:	9b00      	ldr	r3, [sp, #0]
 802146a:	2200      	movs	r2, #0
 802146c:	701a      	strb	r2, [r3, #0]
 802146e:	e7dd      	b.n	802142c <_vsniprintf_r+0x14>

08021470 <vsniprintf>:
 8021470:	b507      	push	{r0, r1, r2, lr}
 8021472:	9300      	str	r3, [sp, #0]
 8021474:	4613      	mov	r3, r2
 8021476:	460a      	mov	r2, r1
 8021478:	4601      	mov	r1, r0
 802147a:	4803      	ldr	r0, [pc, #12]	; (8021488 <vsniprintf+0x18>)
 802147c:	6800      	ldr	r0, [r0, #0]
 802147e:	f7ff ffcb 	bl	8021418 <_vsniprintf_r>
 8021482:	b003      	add	sp, #12
 8021484:	f85d fb04 	ldr.w	pc, [sp], #4
 8021488:	20000108 	.word	0x20000108

0802148c <__swbuf_r>:
 802148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802148e:	460e      	mov	r6, r1
 8021490:	4614      	mov	r4, r2
 8021492:	4605      	mov	r5, r0
 8021494:	b118      	cbz	r0, 802149e <__swbuf_r+0x12>
 8021496:	6983      	ldr	r3, [r0, #24]
 8021498:	b90b      	cbnz	r3, 802149e <__swbuf_r+0x12>
 802149a:	f7fe f8a9 	bl	801f5f0 <__sinit>
 802149e:	4b21      	ldr	r3, [pc, #132]	; (8021524 <__swbuf_r+0x98>)
 80214a0:	429c      	cmp	r4, r3
 80214a2:	d12b      	bne.n	80214fc <__swbuf_r+0x70>
 80214a4:	686c      	ldr	r4, [r5, #4]
 80214a6:	69a3      	ldr	r3, [r4, #24]
 80214a8:	60a3      	str	r3, [r4, #8]
 80214aa:	89a3      	ldrh	r3, [r4, #12]
 80214ac:	071a      	lsls	r2, r3, #28
 80214ae:	d52f      	bpl.n	8021510 <__swbuf_r+0x84>
 80214b0:	6923      	ldr	r3, [r4, #16]
 80214b2:	b36b      	cbz	r3, 8021510 <__swbuf_r+0x84>
 80214b4:	6923      	ldr	r3, [r4, #16]
 80214b6:	6820      	ldr	r0, [r4, #0]
 80214b8:	1ac0      	subs	r0, r0, r3
 80214ba:	6963      	ldr	r3, [r4, #20]
 80214bc:	b2f6      	uxtb	r6, r6
 80214be:	4283      	cmp	r3, r0
 80214c0:	4637      	mov	r7, r6
 80214c2:	dc04      	bgt.n	80214ce <__swbuf_r+0x42>
 80214c4:	4621      	mov	r1, r4
 80214c6:	4628      	mov	r0, r5
 80214c8:	f7fd ffec 	bl	801f4a4 <_fflush_r>
 80214cc:	bb30      	cbnz	r0, 802151c <__swbuf_r+0x90>
 80214ce:	68a3      	ldr	r3, [r4, #8]
 80214d0:	3b01      	subs	r3, #1
 80214d2:	60a3      	str	r3, [r4, #8]
 80214d4:	6823      	ldr	r3, [r4, #0]
 80214d6:	1c5a      	adds	r2, r3, #1
 80214d8:	6022      	str	r2, [r4, #0]
 80214da:	701e      	strb	r6, [r3, #0]
 80214dc:	6963      	ldr	r3, [r4, #20]
 80214de:	3001      	adds	r0, #1
 80214e0:	4283      	cmp	r3, r0
 80214e2:	d004      	beq.n	80214ee <__swbuf_r+0x62>
 80214e4:	89a3      	ldrh	r3, [r4, #12]
 80214e6:	07db      	lsls	r3, r3, #31
 80214e8:	d506      	bpl.n	80214f8 <__swbuf_r+0x6c>
 80214ea:	2e0a      	cmp	r6, #10
 80214ec:	d104      	bne.n	80214f8 <__swbuf_r+0x6c>
 80214ee:	4621      	mov	r1, r4
 80214f0:	4628      	mov	r0, r5
 80214f2:	f7fd ffd7 	bl	801f4a4 <_fflush_r>
 80214f6:	b988      	cbnz	r0, 802151c <__swbuf_r+0x90>
 80214f8:	4638      	mov	r0, r7
 80214fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80214fc:	4b0a      	ldr	r3, [pc, #40]	; (8021528 <__swbuf_r+0x9c>)
 80214fe:	429c      	cmp	r4, r3
 8021500:	d101      	bne.n	8021506 <__swbuf_r+0x7a>
 8021502:	68ac      	ldr	r4, [r5, #8]
 8021504:	e7cf      	b.n	80214a6 <__swbuf_r+0x1a>
 8021506:	4b09      	ldr	r3, [pc, #36]	; (802152c <__swbuf_r+0xa0>)
 8021508:	429c      	cmp	r4, r3
 802150a:	bf08      	it	eq
 802150c:	68ec      	ldreq	r4, [r5, #12]
 802150e:	e7ca      	b.n	80214a6 <__swbuf_r+0x1a>
 8021510:	4621      	mov	r1, r4
 8021512:	4628      	mov	r0, r5
 8021514:	f000 f81e 	bl	8021554 <__swsetup_r>
 8021518:	2800      	cmp	r0, #0
 802151a:	d0cb      	beq.n	80214b4 <__swbuf_r+0x28>
 802151c:	f04f 37ff 	mov.w	r7, #4294967295
 8021520:	e7ea      	b.n	80214f8 <__swbuf_r+0x6c>
 8021522:	bf00      	nop
 8021524:	08028d6c 	.word	0x08028d6c
 8021528:	08028d8c 	.word	0x08028d8c
 802152c:	08028d4c 	.word	0x08028d4c

08021530 <_write_r>:
 8021530:	b538      	push	{r3, r4, r5, lr}
 8021532:	4d07      	ldr	r5, [pc, #28]	; (8021550 <_write_r+0x20>)
 8021534:	4604      	mov	r4, r0
 8021536:	4608      	mov	r0, r1
 8021538:	4611      	mov	r1, r2
 802153a:	2200      	movs	r2, #0
 802153c:	602a      	str	r2, [r5, #0]
 802153e:	461a      	mov	r2, r3
 8021540:	f7df fc3c 	bl	8000dbc <_write>
 8021544:	1c43      	adds	r3, r0, #1
 8021546:	d102      	bne.n	802154e <_write_r+0x1e>
 8021548:	682b      	ldr	r3, [r5, #0]
 802154a:	b103      	cbz	r3, 802154e <_write_r+0x1e>
 802154c:	6023      	str	r3, [r4, #0]
 802154e:	bd38      	pop	{r3, r4, r5, pc}
 8021550:	20000f94 	.word	0x20000f94

08021554 <__swsetup_r>:
 8021554:	4b32      	ldr	r3, [pc, #200]	; (8021620 <__swsetup_r+0xcc>)
 8021556:	b570      	push	{r4, r5, r6, lr}
 8021558:	681d      	ldr	r5, [r3, #0]
 802155a:	4606      	mov	r6, r0
 802155c:	460c      	mov	r4, r1
 802155e:	b125      	cbz	r5, 802156a <__swsetup_r+0x16>
 8021560:	69ab      	ldr	r3, [r5, #24]
 8021562:	b913      	cbnz	r3, 802156a <__swsetup_r+0x16>
 8021564:	4628      	mov	r0, r5
 8021566:	f7fe f843 	bl	801f5f0 <__sinit>
 802156a:	4b2e      	ldr	r3, [pc, #184]	; (8021624 <__swsetup_r+0xd0>)
 802156c:	429c      	cmp	r4, r3
 802156e:	d10f      	bne.n	8021590 <__swsetup_r+0x3c>
 8021570:	686c      	ldr	r4, [r5, #4]
 8021572:	89a3      	ldrh	r3, [r4, #12]
 8021574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021578:	0719      	lsls	r1, r3, #28
 802157a:	d42c      	bmi.n	80215d6 <__swsetup_r+0x82>
 802157c:	06dd      	lsls	r5, r3, #27
 802157e:	d411      	bmi.n	80215a4 <__swsetup_r+0x50>
 8021580:	2309      	movs	r3, #9
 8021582:	6033      	str	r3, [r6, #0]
 8021584:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021588:	81a3      	strh	r3, [r4, #12]
 802158a:	f04f 30ff 	mov.w	r0, #4294967295
 802158e:	e03e      	b.n	802160e <__swsetup_r+0xba>
 8021590:	4b25      	ldr	r3, [pc, #148]	; (8021628 <__swsetup_r+0xd4>)
 8021592:	429c      	cmp	r4, r3
 8021594:	d101      	bne.n	802159a <__swsetup_r+0x46>
 8021596:	68ac      	ldr	r4, [r5, #8]
 8021598:	e7eb      	b.n	8021572 <__swsetup_r+0x1e>
 802159a:	4b24      	ldr	r3, [pc, #144]	; (802162c <__swsetup_r+0xd8>)
 802159c:	429c      	cmp	r4, r3
 802159e:	bf08      	it	eq
 80215a0:	68ec      	ldreq	r4, [r5, #12]
 80215a2:	e7e6      	b.n	8021572 <__swsetup_r+0x1e>
 80215a4:	0758      	lsls	r0, r3, #29
 80215a6:	d512      	bpl.n	80215ce <__swsetup_r+0x7a>
 80215a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80215aa:	b141      	cbz	r1, 80215be <__swsetup_r+0x6a>
 80215ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80215b0:	4299      	cmp	r1, r3
 80215b2:	d002      	beq.n	80215ba <__swsetup_r+0x66>
 80215b4:	4630      	mov	r0, r6
 80215b6:	f7fe fc6b 	bl	801fe90 <_free_r>
 80215ba:	2300      	movs	r3, #0
 80215bc:	6363      	str	r3, [r4, #52]	; 0x34
 80215be:	89a3      	ldrh	r3, [r4, #12]
 80215c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80215c4:	81a3      	strh	r3, [r4, #12]
 80215c6:	2300      	movs	r3, #0
 80215c8:	6063      	str	r3, [r4, #4]
 80215ca:	6923      	ldr	r3, [r4, #16]
 80215cc:	6023      	str	r3, [r4, #0]
 80215ce:	89a3      	ldrh	r3, [r4, #12]
 80215d0:	f043 0308 	orr.w	r3, r3, #8
 80215d4:	81a3      	strh	r3, [r4, #12]
 80215d6:	6923      	ldr	r3, [r4, #16]
 80215d8:	b94b      	cbnz	r3, 80215ee <__swsetup_r+0x9a>
 80215da:	89a3      	ldrh	r3, [r4, #12]
 80215dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80215e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80215e4:	d003      	beq.n	80215ee <__swsetup_r+0x9a>
 80215e6:	4621      	mov	r1, r4
 80215e8:	4630      	mov	r0, r6
 80215ea:	f7fe fbdb 	bl	801fda4 <__smakebuf_r>
 80215ee:	89a0      	ldrh	r0, [r4, #12]
 80215f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80215f4:	f010 0301 	ands.w	r3, r0, #1
 80215f8:	d00a      	beq.n	8021610 <__swsetup_r+0xbc>
 80215fa:	2300      	movs	r3, #0
 80215fc:	60a3      	str	r3, [r4, #8]
 80215fe:	6963      	ldr	r3, [r4, #20]
 8021600:	425b      	negs	r3, r3
 8021602:	61a3      	str	r3, [r4, #24]
 8021604:	6923      	ldr	r3, [r4, #16]
 8021606:	b943      	cbnz	r3, 802161a <__swsetup_r+0xc6>
 8021608:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802160c:	d1ba      	bne.n	8021584 <__swsetup_r+0x30>
 802160e:	bd70      	pop	{r4, r5, r6, pc}
 8021610:	0781      	lsls	r1, r0, #30
 8021612:	bf58      	it	pl
 8021614:	6963      	ldrpl	r3, [r4, #20]
 8021616:	60a3      	str	r3, [r4, #8]
 8021618:	e7f4      	b.n	8021604 <__swsetup_r+0xb0>
 802161a:	2000      	movs	r0, #0
 802161c:	e7f7      	b.n	802160e <__swsetup_r+0xba>
 802161e:	bf00      	nop
 8021620:	20000108 	.word	0x20000108
 8021624:	08028d6c 	.word	0x08028d6c
 8021628:	08028d8c 	.word	0x08028d8c
 802162c:	08028d4c 	.word	0x08028d4c

08021630 <__register_exitproc>:
 8021630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021634:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80216f0 <__register_exitproc+0xc0>
 8021638:	4606      	mov	r6, r0
 802163a:	f8d8 0000 	ldr.w	r0, [r8]
 802163e:	461f      	mov	r7, r3
 8021640:	460d      	mov	r5, r1
 8021642:	4691      	mov	r9, r2
 8021644:	f7fe fb87 	bl	801fd56 <__retarget_lock_acquire_recursive>
 8021648:	4b25      	ldr	r3, [pc, #148]	; (80216e0 <__register_exitproc+0xb0>)
 802164a:	681c      	ldr	r4, [r3, #0]
 802164c:	b934      	cbnz	r4, 802165c <__register_exitproc+0x2c>
 802164e:	4c25      	ldr	r4, [pc, #148]	; (80216e4 <__register_exitproc+0xb4>)
 8021650:	601c      	str	r4, [r3, #0]
 8021652:	4b25      	ldr	r3, [pc, #148]	; (80216e8 <__register_exitproc+0xb8>)
 8021654:	b113      	cbz	r3, 802165c <__register_exitproc+0x2c>
 8021656:	681b      	ldr	r3, [r3, #0]
 8021658:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802165c:	6863      	ldr	r3, [r4, #4]
 802165e:	2b1f      	cmp	r3, #31
 8021660:	dd07      	ble.n	8021672 <__register_exitproc+0x42>
 8021662:	f8d8 0000 	ldr.w	r0, [r8]
 8021666:	f7fe fb78 	bl	801fd5a <__retarget_lock_release_recursive>
 802166a:	f04f 30ff 	mov.w	r0, #4294967295
 802166e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021672:	b34e      	cbz	r6, 80216c8 <__register_exitproc+0x98>
 8021674:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8021678:	b988      	cbnz	r0, 802169e <__register_exitproc+0x6e>
 802167a:	4b1c      	ldr	r3, [pc, #112]	; (80216ec <__register_exitproc+0xbc>)
 802167c:	b923      	cbnz	r3, 8021688 <__register_exitproc+0x58>
 802167e:	f8d8 0000 	ldr.w	r0, [r8]
 8021682:	f7fe fb69 	bl	801fd58 <__retarget_lock_release>
 8021686:	e7f0      	b.n	802166a <__register_exitproc+0x3a>
 8021688:	f44f 7084 	mov.w	r0, #264	; 0x108
 802168c:	f7fe fbca 	bl	801fe24 <malloc>
 8021690:	2800      	cmp	r0, #0
 8021692:	d0f4      	beq.n	802167e <__register_exitproc+0x4e>
 8021694:	2300      	movs	r3, #0
 8021696:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802169a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802169e:	6863      	ldr	r3, [r4, #4]
 80216a0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80216a4:	2201      	movs	r2, #1
 80216a6:	409a      	lsls	r2, r3
 80216a8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80216ac:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80216b0:	4313      	orrs	r3, r2
 80216b2:	2e02      	cmp	r6, #2
 80216b4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80216b8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80216bc:	bf02      	ittt	eq
 80216be:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80216c2:	431a      	orreq	r2, r3
 80216c4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80216c8:	6863      	ldr	r3, [r4, #4]
 80216ca:	f8d8 0000 	ldr.w	r0, [r8]
 80216ce:	1c5a      	adds	r2, r3, #1
 80216d0:	3302      	adds	r3, #2
 80216d2:	6062      	str	r2, [r4, #4]
 80216d4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80216d8:	f7fe fb3f 	bl	801fd5a <__retarget_lock_release_recursive>
 80216dc:	2000      	movs	r0, #0
 80216de:	e7c6      	b.n	802166e <__register_exitproc+0x3e>
 80216e0:	20000f80 	.word	0x20000f80
 80216e4:	20000ef4 	.word	0x20000ef4
 80216e8:	00000000 	.word	0x00000000
 80216ec:	0801fe25 	.word	0x0801fe25
 80216f0:	20000174 	.word	0x20000174

080216f4 <abs>:
 80216f4:	2800      	cmp	r0, #0
 80216f6:	bfb8      	it	lt
 80216f8:	4240      	neglt	r0, r0
 80216fa:	4770      	bx	lr

080216fc <__assert_func>:
 80216fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80216fe:	4614      	mov	r4, r2
 8021700:	461a      	mov	r2, r3
 8021702:	4b09      	ldr	r3, [pc, #36]	; (8021728 <__assert_func+0x2c>)
 8021704:	681b      	ldr	r3, [r3, #0]
 8021706:	4605      	mov	r5, r0
 8021708:	68d8      	ldr	r0, [r3, #12]
 802170a:	b14c      	cbz	r4, 8021720 <__assert_func+0x24>
 802170c:	4b07      	ldr	r3, [pc, #28]	; (802172c <__assert_func+0x30>)
 802170e:	9100      	str	r1, [sp, #0]
 8021710:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021714:	4906      	ldr	r1, [pc, #24]	; (8021730 <__assert_func+0x34>)
 8021716:	462b      	mov	r3, r5
 8021718:	f000 f854 	bl	80217c4 <fiprintf>
 802171c:	f7fd fda8 	bl	801f270 <abort>
 8021720:	4b04      	ldr	r3, [pc, #16]	; (8021734 <__assert_func+0x38>)
 8021722:	461c      	mov	r4, r3
 8021724:	e7f3      	b.n	802170e <__assert_func+0x12>
 8021726:	bf00      	nop
 8021728:	20000108 	.word	0x20000108
 802172c:	080291a4 	.word	0x080291a4
 8021730:	080291b1 	.word	0x080291b1
 8021734:	080291df 	.word	0x080291df

08021738 <_close_r>:
 8021738:	b538      	push	{r3, r4, r5, lr}
 802173a:	4d06      	ldr	r5, [pc, #24]	; (8021754 <_close_r+0x1c>)
 802173c:	2300      	movs	r3, #0
 802173e:	4604      	mov	r4, r0
 8021740:	4608      	mov	r0, r1
 8021742:	602b      	str	r3, [r5, #0]
 8021744:	f7df fb56 	bl	8000df4 <_close>
 8021748:	1c43      	adds	r3, r0, #1
 802174a:	d102      	bne.n	8021752 <_close_r+0x1a>
 802174c:	682b      	ldr	r3, [r5, #0]
 802174e:	b103      	cbz	r3, 8021752 <_close_r+0x1a>
 8021750:	6023      	str	r3, [r4, #0]
 8021752:	bd38      	pop	{r3, r4, r5, pc}
 8021754:	20000f94 	.word	0x20000f94

08021758 <__sflags>:
 8021758:	780b      	ldrb	r3, [r1, #0]
 802175a:	2b72      	cmp	r3, #114	; 0x72
 802175c:	b530      	push	{r4, r5, lr}
 802175e:	d022      	beq.n	80217a6 <__sflags+0x4e>
 8021760:	2b77      	cmp	r3, #119	; 0x77
 8021762:	d024      	beq.n	80217ae <__sflags+0x56>
 8021764:	2b61      	cmp	r3, #97	; 0x61
 8021766:	d027      	beq.n	80217b8 <__sflags+0x60>
 8021768:	2316      	movs	r3, #22
 802176a:	6003      	str	r3, [r0, #0]
 802176c:	2000      	movs	r0, #0
 802176e:	bd30      	pop	{r4, r5, pc}
 8021770:	2d62      	cmp	r5, #98	; 0x62
 8021772:	d012      	beq.n	802179a <__sflags+0x42>
 8021774:	2d78      	cmp	r5, #120	; 0x78
 8021776:	d013      	beq.n	80217a0 <__sflags+0x48>
 8021778:	2d2b      	cmp	r5, #43	; 0x2b
 802177a:	d107      	bne.n	802178c <__sflags+0x34>
 802177c:	f020 001c 	bic.w	r0, r0, #28
 8021780:	f023 0303 	bic.w	r3, r3, #3
 8021784:	f040 0010 	orr.w	r0, r0, #16
 8021788:	f043 0302 	orr.w	r3, r3, #2
 802178c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8021790:	2d00      	cmp	r5, #0
 8021792:	d1ed      	bne.n	8021770 <__sflags+0x18>
 8021794:	4323      	orrs	r3, r4
 8021796:	6013      	str	r3, [r2, #0]
 8021798:	e7e9      	b.n	802176e <__sflags+0x16>
 802179a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802179e:	e7f5      	b.n	802178c <__sflags+0x34>
 80217a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80217a4:	e7f2      	b.n	802178c <__sflags+0x34>
 80217a6:	2400      	movs	r4, #0
 80217a8:	4623      	mov	r3, r4
 80217aa:	2004      	movs	r0, #4
 80217ac:	e7ee      	b.n	802178c <__sflags+0x34>
 80217ae:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80217b2:	2301      	movs	r3, #1
 80217b4:	2008      	movs	r0, #8
 80217b6:	e7e9      	b.n	802178c <__sflags+0x34>
 80217b8:	f44f 7402 	mov.w	r4, #520	; 0x208
 80217bc:	2301      	movs	r3, #1
 80217be:	f44f 7084 	mov.w	r0, #264	; 0x108
 80217c2:	e7e3      	b.n	802178c <__sflags+0x34>

080217c4 <fiprintf>:
 80217c4:	b40e      	push	{r1, r2, r3}
 80217c6:	b503      	push	{r0, r1, lr}
 80217c8:	4601      	mov	r1, r0
 80217ca:	ab03      	add	r3, sp, #12
 80217cc:	4805      	ldr	r0, [pc, #20]	; (80217e4 <fiprintf+0x20>)
 80217ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80217d2:	6800      	ldr	r0, [r0, #0]
 80217d4:	9301      	str	r3, [sp, #4]
 80217d6:	f000 faff 	bl	8021dd8 <_vfiprintf_r>
 80217da:	b002      	add	sp, #8
 80217dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80217e0:	b003      	add	sp, #12
 80217e2:	4770      	bx	lr
 80217e4:	20000108 	.word	0x20000108

080217e8 <_fstat_r>:
 80217e8:	b538      	push	{r3, r4, r5, lr}
 80217ea:	4d07      	ldr	r5, [pc, #28]	; (8021808 <_fstat_r+0x20>)
 80217ec:	2300      	movs	r3, #0
 80217ee:	4604      	mov	r4, r0
 80217f0:	4608      	mov	r0, r1
 80217f2:	4611      	mov	r1, r2
 80217f4:	602b      	str	r3, [r5, #0]
 80217f6:	f7df fb09 	bl	8000e0c <_fstat>
 80217fa:	1c43      	adds	r3, r0, #1
 80217fc:	d102      	bne.n	8021804 <_fstat_r+0x1c>
 80217fe:	682b      	ldr	r3, [r5, #0]
 8021800:	b103      	cbz	r3, 8021804 <_fstat_r+0x1c>
 8021802:	6023      	str	r3, [r4, #0]
 8021804:	bd38      	pop	{r3, r4, r5, pc}
 8021806:	bf00      	nop
 8021808:	20000f94 	.word	0x20000f94

0802180c <_findenv_r>:
 802180c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021810:	4607      	mov	r7, r0
 8021812:	4689      	mov	r9, r1
 8021814:	4616      	mov	r6, r2
 8021816:	f000 fe85 	bl	8022524 <__env_lock>
 802181a:	4b18      	ldr	r3, [pc, #96]	; (802187c <_findenv_r+0x70>)
 802181c:	681c      	ldr	r4, [r3, #0]
 802181e:	469a      	mov	sl, r3
 8021820:	b134      	cbz	r4, 8021830 <_findenv_r+0x24>
 8021822:	464b      	mov	r3, r9
 8021824:	4698      	mov	r8, r3
 8021826:	f813 1b01 	ldrb.w	r1, [r3], #1
 802182a:	b139      	cbz	r1, 802183c <_findenv_r+0x30>
 802182c:	293d      	cmp	r1, #61	; 0x3d
 802182e:	d1f9      	bne.n	8021824 <_findenv_r+0x18>
 8021830:	4638      	mov	r0, r7
 8021832:	f000 fe7d 	bl	8022530 <__env_unlock>
 8021836:	2000      	movs	r0, #0
 8021838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802183c:	eba8 0809 	sub.w	r8, r8, r9
 8021840:	46a3      	mov	fp, r4
 8021842:	f854 0b04 	ldr.w	r0, [r4], #4
 8021846:	2800      	cmp	r0, #0
 8021848:	d0f2      	beq.n	8021830 <_findenv_r+0x24>
 802184a:	4642      	mov	r2, r8
 802184c:	4649      	mov	r1, r9
 802184e:	f000 fe49 	bl	80224e4 <strncmp>
 8021852:	2800      	cmp	r0, #0
 8021854:	d1f4      	bne.n	8021840 <_findenv_r+0x34>
 8021856:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802185a:	eb03 0508 	add.w	r5, r3, r8
 802185e:	f813 3008 	ldrb.w	r3, [r3, r8]
 8021862:	2b3d      	cmp	r3, #61	; 0x3d
 8021864:	d1ec      	bne.n	8021840 <_findenv_r+0x34>
 8021866:	f8da 3000 	ldr.w	r3, [sl]
 802186a:	ebab 0303 	sub.w	r3, fp, r3
 802186e:	109b      	asrs	r3, r3, #2
 8021870:	4638      	mov	r0, r7
 8021872:	6033      	str	r3, [r6, #0]
 8021874:	f000 fe5c 	bl	8022530 <__env_unlock>
 8021878:	1c68      	adds	r0, r5, #1
 802187a:	e7dd      	b.n	8021838 <_findenv_r+0x2c>
 802187c:	20000000 	.word	0x20000000

08021880 <_getenv_r>:
 8021880:	b507      	push	{r0, r1, r2, lr}
 8021882:	aa01      	add	r2, sp, #4
 8021884:	f7ff ffc2 	bl	802180c <_findenv_r>
 8021888:	b003      	add	sp, #12
 802188a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08021890 <__gettzinfo>:
 8021890:	4800      	ldr	r0, [pc, #0]	; (8021894 <__gettzinfo+0x4>)
 8021892:	4770      	bx	lr
 8021894:	20000178 	.word	0x20000178

08021898 <gmtime_r>:
 8021898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802189c:	e9d0 6700 	ldrd	r6, r7, [r0]
 80218a0:	460c      	mov	r4, r1
 80218a2:	4a51      	ldr	r2, [pc, #324]	; (80219e8 <gmtime_r+0x150>)
 80218a4:	2300      	movs	r3, #0
 80218a6:	4630      	mov	r0, r6
 80218a8:	4639      	mov	r1, r7
 80218aa:	f7de ff83 	bl	80007b4 <__aeabi_ldivmod>
 80218ae:	4639      	mov	r1, r7
 80218b0:	4605      	mov	r5, r0
 80218b2:	4a4d      	ldr	r2, [pc, #308]	; (80219e8 <gmtime_r+0x150>)
 80218b4:	4630      	mov	r0, r6
 80218b6:	2300      	movs	r3, #0
 80218b8:	f7de ff7c 	bl	80007b4 <__aeabi_ldivmod>
 80218bc:	2a00      	cmp	r2, #0
 80218be:	bfbc      	itt	lt
 80218c0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80218c4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80218c8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80218cc:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80218d0:	fbb2 f3f1 	udiv	r3, r2, r1
 80218d4:	fb01 2213 	mls	r2, r1, r3, r2
 80218d8:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80218dc:	bfac      	ite	ge
 80218de:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80218e2:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80218e6:	60a3      	str	r3, [r4, #8]
 80218e8:	fbb2 f3f1 	udiv	r3, r2, r1
 80218ec:	fb01 2213 	mls	r2, r1, r3, r2
 80218f0:	6063      	str	r3, [r4, #4]
 80218f2:	6022      	str	r2, [r4, #0]
 80218f4:	1cc3      	adds	r3, r0, #3
 80218f6:	2207      	movs	r2, #7
 80218f8:	fb93 f2f2 	sdiv	r2, r3, r2
 80218fc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8021900:	1a9b      	subs	r3, r3, r2
 8021902:	bf48      	it	mi
 8021904:	3307      	addmi	r3, #7
 8021906:	2800      	cmp	r0, #0
 8021908:	61a3      	str	r3, [r4, #24]
 802190a:	bfb8      	it	lt
 802190c:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8021910:	4936      	ldr	r1, [pc, #216]	; (80219ec <gmtime_r+0x154>)
 8021912:	bfae      	itee	ge
 8021914:	fb90 f1f1 	sdivge	r1, r0, r1
 8021918:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 802191c:	fb93 f1f1 	sdivlt	r1, r3, r1
 8021920:	4b33      	ldr	r3, [pc, #204]	; (80219f0 <gmtime_r+0x158>)
 8021922:	fb03 0001 	mla	r0, r3, r1, r0
 8021926:	f648 62ac 	movw	r2, #36524	; 0x8eac
 802192a:	fbb0 f2f2 	udiv	r2, r0, r2
 802192e:	4402      	add	r2, r0
 8021930:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8021934:	fbb0 f3fc 	udiv	r3, r0, ip
 8021938:	1ad2      	subs	r2, r2, r3
 802193a:	f240 176d 	movw	r7, #365	; 0x16d
 802193e:	4b2d      	ldr	r3, [pc, #180]	; (80219f4 <gmtime_r+0x15c>)
 8021940:	fbb0 f3f3 	udiv	r3, r0, r3
 8021944:	2664      	movs	r6, #100	; 0x64
 8021946:	1ad3      	subs	r3, r2, r3
 8021948:	fbb3 f5f7 	udiv	r5, r3, r7
 802194c:	fbb3 f3fc 	udiv	r3, r3, ip
 8021950:	fbb5 f2f6 	udiv	r2, r5, r6
 8021954:	1ad3      	subs	r3, r2, r3
 8021956:	4403      	add	r3, r0
 8021958:	fb07 3315 	mls	r3, r7, r5, r3
 802195c:	2099      	movs	r0, #153	; 0x99
 802195e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8021962:	f10c 0c02 	add.w	ip, ip, #2
 8021966:	f103 0e01 	add.w	lr, r3, #1
 802196a:	fbbc f7f0 	udiv	r7, ip, r0
 802196e:	4378      	muls	r0, r7
 8021970:	3002      	adds	r0, #2
 8021972:	f04f 0805 	mov.w	r8, #5
 8021976:	fbb0 f0f8 	udiv	r0, r0, r8
 802197a:	ebae 0000 	sub.w	r0, lr, r0
 802197e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8021982:	45f4      	cmp	ip, lr
 8021984:	bf94      	ite	ls
 8021986:	f04f 0c02 	movls.w	ip, #2
 802198a:	f06f 0c09 	mvnhi.w	ip, #9
 802198e:	4467      	add	r7, ip
 8021990:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8021994:	fb0c 5101 	mla	r1, ip, r1, r5
 8021998:	2f01      	cmp	r7, #1
 802199a:	bf98      	it	ls
 802199c:	3101      	addls	r1, #1
 802199e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80219a2:	d30c      	bcc.n	80219be <gmtime_r+0x126>
 80219a4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80219a8:	61e3      	str	r3, [r4, #28]
 80219aa:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80219ae:	2300      	movs	r3, #0
 80219b0:	60e0      	str	r0, [r4, #12]
 80219b2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80219b6:	6223      	str	r3, [r4, #32]
 80219b8:	4620      	mov	r0, r4
 80219ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80219be:	f015 0f03 	tst.w	r5, #3
 80219c2:	d102      	bne.n	80219ca <gmtime_r+0x132>
 80219c4:	fb06 5212 	mls	r2, r6, r2, r5
 80219c8:	b95a      	cbnz	r2, 80219e2 <gmtime_r+0x14a>
 80219ca:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80219ce:	fbb5 f2f6 	udiv	r2, r5, r6
 80219d2:	fb06 5212 	mls	r2, r6, r2, r5
 80219d6:	fab2 f282 	clz	r2, r2
 80219da:	0952      	lsrs	r2, r2, #5
 80219dc:	333b      	adds	r3, #59	; 0x3b
 80219de:	4413      	add	r3, r2
 80219e0:	e7e2      	b.n	80219a8 <gmtime_r+0x110>
 80219e2:	2201      	movs	r2, #1
 80219e4:	e7fa      	b.n	80219dc <gmtime_r+0x144>
 80219e6:	bf00      	nop
 80219e8:	00015180 	.word	0x00015180
 80219ec:	00023ab1 	.word	0x00023ab1
 80219f0:	fffdc54f 	.word	0xfffdc54f
 80219f4:	00023ab0 	.word	0x00023ab0

080219f8 <_isatty_r>:
 80219f8:	b538      	push	{r3, r4, r5, lr}
 80219fa:	4d06      	ldr	r5, [pc, #24]	; (8021a14 <_isatty_r+0x1c>)
 80219fc:	2300      	movs	r3, #0
 80219fe:	4604      	mov	r4, r0
 8021a00:	4608      	mov	r0, r1
 8021a02:	602b      	str	r3, [r5, #0]
 8021a04:	f7df fa12 	bl	8000e2c <_isatty>
 8021a08:	1c43      	adds	r3, r0, #1
 8021a0a:	d102      	bne.n	8021a12 <_isatty_r+0x1a>
 8021a0c:	682b      	ldr	r3, [r5, #0]
 8021a0e:	b103      	cbz	r3, 8021a12 <_isatty_r+0x1a>
 8021a10:	6023      	str	r3, [r4, #0]
 8021a12:	bd38      	pop	{r3, r4, r5, pc}
 8021a14:	20000f94 	.word	0x20000f94

08021a18 <labs>:
 8021a18:	2800      	cmp	r0, #0
 8021a1a:	bfb8      	it	lt
 8021a1c:	4240      	neglt	r0, r0
 8021a1e:	4770      	bx	lr

08021a20 <_lseek_r>:
 8021a20:	b538      	push	{r3, r4, r5, lr}
 8021a22:	4d07      	ldr	r5, [pc, #28]	; (8021a40 <_lseek_r+0x20>)
 8021a24:	4604      	mov	r4, r0
 8021a26:	4608      	mov	r0, r1
 8021a28:	4611      	mov	r1, r2
 8021a2a:	2200      	movs	r2, #0
 8021a2c:	602a      	str	r2, [r5, #0]
 8021a2e:	461a      	mov	r2, r3
 8021a30:	f7df fa07 	bl	8000e42 <_lseek>
 8021a34:	1c43      	adds	r3, r0, #1
 8021a36:	d102      	bne.n	8021a3e <_lseek_r+0x1e>
 8021a38:	682b      	ldr	r3, [r5, #0]
 8021a3a:	b103      	cbz	r3, 8021a3e <_lseek_r+0x1e>
 8021a3c:	6023      	str	r3, [r4, #0]
 8021a3e:	bd38      	pop	{r3, r4, r5, pc}
 8021a40:	20000f94 	.word	0x20000f94

08021a44 <__ascii_mbtowc>:
 8021a44:	b082      	sub	sp, #8
 8021a46:	b901      	cbnz	r1, 8021a4a <__ascii_mbtowc+0x6>
 8021a48:	a901      	add	r1, sp, #4
 8021a4a:	b142      	cbz	r2, 8021a5e <__ascii_mbtowc+0x1a>
 8021a4c:	b14b      	cbz	r3, 8021a62 <__ascii_mbtowc+0x1e>
 8021a4e:	7813      	ldrb	r3, [r2, #0]
 8021a50:	600b      	str	r3, [r1, #0]
 8021a52:	7812      	ldrb	r2, [r2, #0]
 8021a54:	1e10      	subs	r0, r2, #0
 8021a56:	bf18      	it	ne
 8021a58:	2001      	movne	r0, #1
 8021a5a:	b002      	add	sp, #8
 8021a5c:	4770      	bx	lr
 8021a5e:	4610      	mov	r0, r2
 8021a60:	e7fb      	b.n	8021a5a <__ascii_mbtowc+0x16>
 8021a62:	f06f 0001 	mvn.w	r0, #1
 8021a66:	e7f8      	b.n	8021a5a <__ascii_mbtowc+0x16>

08021a68 <__malloc_lock>:
 8021a68:	4801      	ldr	r0, [pc, #4]	; (8021a70 <__malloc_lock+0x8>)
 8021a6a:	f7fe b974 	b.w	801fd56 <__retarget_lock_acquire_recursive>
 8021a6e:	bf00      	nop
 8021a70:	20000f8c 	.word	0x20000f8c

08021a74 <__malloc_unlock>:
 8021a74:	4801      	ldr	r0, [pc, #4]	; (8021a7c <__malloc_unlock+0x8>)
 8021a76:	f7fe b970 	b.w	801fd5a <__retarget_lock_release_recursive>
 8021a7a:	bf00      	nop
 8021a7c:	20000f8c 	.word	0x20000f8c

08021a80 <_realloc_r>:
 8021a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a82:	4607      	mov	r7, r0
 8021a84:	4614      	mov	r4, r2
 8021a86:	460e      	mov	r6, r1
 8021a88:	b921      	cbnz	r1, 8021a94 <_realloc_r+0x14>
 8021a8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8021a8e:	4611      	mov	r1, r2
 8021a90:	f7fe ba4e 	b.w	801ff30 <_malloc_r>
 8021a94:	b922      	cbnz	r2, 8021aa0 <_realloc_r+0x20>
 8021a96:	f7fe f9fb 	bl	801fe90 <_free_r>
 8021a9a:	4625      	mov	r5, r4
 8021a9c:	4628      	mov	r0, r5
 8021a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021aa0:	f000 fd66 	bl	8022570 <_malloc_usable_size_r>
 8021aa4:	42a0      	cmp	r0, r4
 8021aa6:	d20f      	bcs.n	8021ac8 <_realloc_r+0x48>
 8021aa8:	4621      	mov	r1, r4
 8021aaa:	4638      	mov	r0, r7
 8021aac:	f7fe fa40 	bl	801ff30 <_malloc_r>
 8021ab0:	4605      	mov	r5, r0
 8021ab2:	2800      	cmp	r0, #0
 8021ab4:	d0f2      	beq.n	8021a9c <_realloc_r+0x1c>
 8021ab6:	4631      	mov	r1, r6
 8021ab8:	4622      	mov	r2, r4
 8021aba:	f7fe f9c3 	bl	801fe44 <memcpy>
 8021abe:	4631      	mov	r1, r6
 8021ac0:	4638      	mov	r0, r7
 8021ac2:	f7fe f9e5 	bl	801fe90 <_free_r>
 8021ac6:	e7e9      	b.n	8021a9c <_realloc_r+0x1c>
 8021ac8:	4635      	mov	r5, r6
 8021aca:	e7e7      	b.n	8021a9c <_realloc_r+0x1c>

08021acc <__ssputs_r>:
 8021acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021ad0:	688e      	ldr	r6, [r1, #8]
 8021ad2:	429e      	cmp	r6, r3
 8021ad4:	4682      	mov	sl, r0
 8021ad6:	460c      	mov	r4, r1
 8021ad8:	4690      	mov	r8, r2
 8021ada:	461f      	mov	r7, r3
 8021adc:	d838      	bhi.n	8021b50 <__ssputs_r+0x84>
 8021ade:	898a      	ldrh	r2, [r1, #12]
 8021ae0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021ae4:	d032      	beq.n	8021b4c <__ssputs_r+0x80>
 8021ae6:	6825      	ldr	r5, [r4, #0]
 8021ae8:	6909      	ldr	r1, [r1, #16]
 8021aea:	eba5 0901 	sub.w	r9, r5, r1
 8021aee:	6965      	ldr	r5, [r4, #20]
 8021af0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021af4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021af8:	3301      	adds	r3, #1
 8021afa:	444b      	add	r3, r9
 8021afc:	106d      	asrs	r5, r5, #1
 8021afe:	429d      	cmp	r5, r3
 8021b00:	bf38      	it	cc
 8021b02:	461d      	movcc	r5, r3
 8021b04:	0553      	lsls	r3, r2, #21
 8021b06:	d531      	bpl.n	8021b6c <__ssputs_r+0xa0>
 8021b08:	4629      	mov	r1, r5
 8021b0a:	f7fe fa11 	bl	801ff30 <_malloc_r>
 8021b0e:	4606      	mov	r6, r0
 8021b10:	b950      	cbnz	r0, 8021b28 <__ssputs_r+0x5c>
 8021b12:	230c      	movs	r3, #12
 8021b14:	f8ca 3000 	str.w	r3, [sl]
 8021b18:	89a3      	ldrh	r3, [r4, #12]
 8021b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021b1e:	81a3      	strh	r3, [r4, #12]
 8021b20:	f04f 30ff 	mov.w	r0, #4294967295
 8021b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021b28:	6921      	ldr	r1, [r4, #16]
 8021b2a:	464a      	mov	r2, r9
 8021b2c:	f7fe f98a 	bl	801fe44 <memcpy>
 8021b30:	89a3      	ldrh	r3, [r4, #12]
 8021b32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021b3a:	81a3      	strh	r3, [r4, #12]
 8021b3c:	6126      	str	r6, [r4, #16]
 8021b3e:	6165      	str	r5, [r4, #20]
 8021b40:	444e      	add	r6, r9
 8021b42:	eba5 0509 	sub.w	r5, r5, r9
 8021b46:	6026      	str	r6, [r4, #0]
 8021b48:	60a5      	str	r5, [r4, #8]
 8021b4a:	463e      	mov	r6, r7
 8021b4c:	42be      	cmp	r6, r7
 8021b4e:	d900      	bls.n	8021b52 <__ssputs_r+0x86>
 8021b50:	463e      	mov	r6, r7
 8021b52:	4632      	mov	r2, r6
 8021b54:	6820      	ldr	r0, [r4, #0]
 8021b56:	4641      	mov	r1, r8
 8021b58:	f000 fcf0 	bl	802253c <memmove>
 8021b5c:	68a3      	ldr	r3, [r4, #8]
 8021b5e:	6822      	ldr	r2, [r4, #0]
 8021b60:	1b9b      	subs	r3, r3, r6
 8021b62:	4432      	add	r2, r6
 8021b64:	60a3      	str	r3, [r4, #8]
 8021b66:	6022      	str	r2, [r4, #0]
 8021b68:	2000      	movs	r0, #0
 8021b6a:	e7db      	b.n	8021b24 <__ssputs_r+0x58>
 8021b6c:	462a      	mov	r2, r5
 8021b6e:	f7ff ff87 	bl	8021a80 <_realloc_r>
 8021b72:	4606      	mov	r6, r0
 8021b74:	2800      	cmp	r0, #0
 8021b76:	d1e1      	bne.n	8021b3c <__ssputs_r+0x70>
 8021b78:	6921      	ldr	r1, [r4, #16]
 8021b7a:	4650      	mov	r0, sl
 8021b7c:	f7fe f988 	bl	801fe90 <_free_r>
 8021b80:	e7c7      	b.n	8021b12 <__ssputs_r+0x46>
	...

08021b84 <_svfiprintf_r>:
 8021b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b88:	4698      	mov	r8, r3
 8021b8a:	898b      	ldrh	r3, [r1, #12]
 8021b8c:	061b      	lsls	r3, r3, #24
 8021b8e:	b09d      	sub	sp, #116	; 0x74
 8021b90:	4607      	mov	r7, r0
 8021b92:	460d      	mov	r5, r1
 8021b94:	4614      	mov	r4, r2
 8021b96:	d50e      	bpl.n	8021bb6 <_svfiprintf_r+0x32>
 8021b98:	690b      	ldr	r3, [r1, #16]
 8021b9a:	b963      	cbnz	r3, 8021bb6 <_svfiprintf_r+0x32>
 8021b9c:	2140      	movs	r1, #64	; 0x40
 8021b9e:	f7fe f9c7 	bl	801ff30 <_malloc_r>
 8021ba2:	6028      	str	r0, [r5, #0]
 8021ba4:	6128      	str	r0, [r5, #16]
 8021ba6:	b920      	cbnz	r0, 8021bb2 <_svfiprintf_r+0x2e>
 8021ba8:	230c      	movs	r3, #12
 8021baa:	603b      	str	r3, [r7, #0]
 8021bac:	f04f 30ff 	mov.w	r0, #4294967295
 8021bb0:	e0d1      	b.n	8021d56 <_svfiprintf_r+0x1d2>
 8021bb2:	2340      	movs	r3, #64	; 0x40
 8021bb4:	616b      	str	r3, [r5, #20]
 8021bb6:	2300      	movs	r3, #0
 8021bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8021bba:	2320      	movs	r3, #32
 8021bbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021bc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8021bc4:	2330      	movs	r3, #48	; 0x30
 8021bc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8021d70 <_svfiprintf_r+0x1ec>
 8021bca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021bce:	f04f 0901 	mov.w	r9, #1
 8021bd2:	4623      	mov	r3, r4
 8021bd4:	469a      	mov	sl, r3
 8021bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021bda:	b10a      	cbz	r2, 8021be0 <_svfiprintf_r+0x5c>
 8021bdc:	2a25      	cmp	r2, #37	; 0x25
 8021bde:	d1f9      	bne.n	8021bd4 <_svfiprintf_r+0x50>
 8021be0:	ebba 0b04 	subs.w	fp, sl, r4
 8021be4:	d00b      	beq.n	8021bfe <_svfiprintf_r+0x7a>
 8021be6:	465b      	mov	r3, fp
 8021be8:	4622      	mov	r2, r4
 8021bea:	4629      	mov	r1, r5
 8021bec:	4638      	mov	r0, r7
 8021bee:	f7ff ff6d 	bl	8021acc <__ssputs_r>
 8021bf2:	3001      	adds	r0, #1
 8021bf4:	f000 80aa 	beq.w	8021d4c <_svfiprintf_r+0x1c8>
 8021bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021bfa:	445a      	add	r2, fp
 8021bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8021bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8021c02:	2b00      	cmp	r3, #0
 8021c04:	f000 80a2 	beq.w	8021d4c <_svfiprintf_r+0x1c8>
 8021c08:	2300      	movs	r3, #0
 8021c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8021c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021c12:	f10a 0a01 	add.w	sl, sl, #1
 8021c16:	9304      	str	r3, [sp, #16]
 8021c18:	9307      	str	r3, [sp, #28]
 8021c1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021c1e:	931a      	str	r3, [sp, #104]	; 0x68
 8021c20:	4654      	mov	r4, sl
 8021c22:	2205      	movs	r2, #5
 8021c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021c28:	4851      	ldr	r0, [pc, #324]	; (8021d70 <_svfiprintf_r+0x1ec>)
 8021c2a:	f7de fb19 	bl	8000260 <memchr>
 8021c2e:	9a04      	ldr	r2, [sp, #16]
 8021c30:	b9d8      	cbnz	r0, 8021c6a <_svfiprintf_r+0xe6>
 8021c32:	06d0      	lsls	r0, r2, #27
 8021c34:	bf44      	itt	mi
 8021c36:	2320      	movmi	r3, #32
 8021c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021c3c:	0711      	lsls	r1, r2, #28
 8021c3e:	bf44      	itt	mi
 8021c40:	232b      	movmi	r3, #43	; 0x2b
 8021c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021c46:	f89a 3000 	ldrb.w	r3, [sl]
 8021c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8021c4c:	d015      	beq.n	8021c7a <_svfiprintf_r+0xf6>
 8021c4e:	9a07      	ldr	r2, [sp, #28]
 8021c50:	4654      	mov	r4, sl
 8021c52:	2000      	movs	r0, #0
 8021c54:	f04f 0c0a 	mov.w	ip, #10
 8021c58:	4621      	mov	r1, r4
 8021c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021c5e:	3b30      	subs	r3, #48	; 0x30
 8021c60:	2b09      	cmp	r3, #9
 8021c62:	d94e      	bls.n	8021d02 <_svfiprintf_r+0x17e>
 8021c64:	b1b0      	cbz	r0, 8021c94 <_svfiprintf_r+0x110>
 8021c66:	9207      	str	r2, [sp, #28]
 8021c68:	e014      	b.n	8021c94 <_svfiprintf_r+0x110>
 8021c6a:	eba0 0308 	sub.w	r3, r0, r8
 8021c6e:	fa09 f303 	lsl.w	r3, r9, r3
 8021c72:	4313      	orrs	r3, r2
 8021c74:	9304      	str	r3, [sp, #16]
 8021c76:	46a2      	mov	sl, r4
 8021c78:	e7d2      	b.n	8021c20 <_svfiprintf_r+0x9c>
 8021c7a:	9b03      	ldr	r3, [sp, #12]
 8021c7c:	1d19      	adds	r1, r3, #4
 8021c7e:	681b      	ldr	r3, [r3, #0]
 8021c80:	9103      	str	r1, [sp, #12]
 8021c82:	2b00      	cmp	r3, #0
 8021c84:	bfbb      	ittet	lt
 8021c86:	425b      	neglt	r3, r3
 8021c88:	f042 0202 	orrlt.w	r2, r2, #2
 8021c8c:	9307      	strge	r3, [sp, #28]
 8021c8e:	9307      	strlt	r3, [sp, #28]
 8021c90:	bfb8      	it	lt
 8021c92:	9204      	strlt	r2, [sp, #16]
 8021c94:	7823      	ldrb	r3, [r4, #0]
 8021c96:	2b2e      	cmp	r3, #46	; 0x2e
 8021c98:	d10c      	bne.n	8021cb4 <_svfiprintf_r+0x130>
 8021c9a:	7863      	ldrb	r3, [r4, #1]
 8021c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8021c9e:	d135      	bne.n	8021d0c <_svfiprintf_r+0x188>
 8021ca0:	9b03      	ldr	r3, [sp, #12]
 8021ca2:	1d1a      	adds	r2, r3, #4
 8021ca4:	681b      	ldr	r3, [r3, #0]
 8021ca6:	9203      	str	r2, [sp, #12]
 8021ca8:	2b00      	cmp	r3, #0
 8021caa:	bfb8      	it	lt
 8021cac:	f04f 33ff 	movlt.w	r3, #4294967295
 8021cb0:	3402      	adds	r4, #2
 8021cb2:	9305      	str	r3, [sp, #20]
 8021cb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8021d80 <_svfiprintf_r+0x1fc>
 8021cb8:	7821      	ldrb	r1, [r4, #0]
 8021cba:	2203      	movs	r2, #3
 8021cbc:	4650      	mov	r0, sl
 8021cbe:	f7de facf 	bl	8000260 <memchr>
 8021cc2:	b140      	cbz	r0, 8021cd6 <_svfiprintf_r+0x152>
 8021cc4:	2340      	movs	r3, #64	; 0x40
 8021cc6:	eba0 000a 	sub.w	r0, r0, sl
 8021cca:	fa03 f000 	lsl.w	r0, r3, r0
 8021cce:	9b04      	ldr	r3, [sp, #16]
 8021cd0:	4303      	orrs	r3, r0
 8021cd2:	3401      	adds	r4, #1
 8021cd4:	9304      	str	r3, [sp, #16]
 8021cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021cda:	4826      	ldr	r0, [pc, #152]	; (8021d74 <_svfiprintf_r+0x1f0>)
 8021cdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021ce0:	2206      	movs	r2, #6
 8021ce2:	f7de fabd 	bl	8000260 <memchr>
 8021ce6:	2800      	cmp	r0, #0
 8021ce8:	d038      	beq.n	8021d5c <_svfiprintf_r+0x1d8>
 8021cea:	4b23      	ldr	r3, [pc, #140]	; (8021d78 <_svfiprintf_r+0x1f4>)
 8021cec:	bb1b      	cbnz	r3, 8021d36 <_svfiprintf_r+0x1b2>
 8021cee:	9b03      	ldr	r3, [sp, #12]
 8021cf0:	3307      	adds	r3, #7
 8021cf2:	f023 0307 	bic.w	r3, r3, #7
 8021cf6:	3308      	adds	r3, #8
 8021cf8:	9303      	str	r3, [sp, #12]
 8021cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021cfc:	4433      	add	r3, r6
 8021cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8021d00:	e767      	b.n	8021bd2 <_svfiprintf_r+0x4e>
 8021d02:	fb0c 3202 	mla	r2, ip, r2, r3
 8021d06:	460c      	mov	r4, r1
 8021d08:	2001      	movs	r0, #1
 8021d0a:	e7a5      	b.n	8021c58 <_svfiprintf_r+0xd4>
 8021d0c:	2300      	movs	r3, #0
 8021d0e:	3401      	adds	r4, #1
 8021d10:	9305      	str	r3, [sp, #20]
 8021d12:	4619      	mov	r1, r3
 8021d14:	f04f 0c0a 	mov.w	ip, #10
 8021d18:	4620      	mov	r0, r4
 8021d1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021d1e:	3a30      	subs	r2, #48	; 0x30
 8021d20:	2a09      	cmp	r2, #9
 8021d22:	d903      	bls.n	8021d2c <_svfiprintf_r+0x1a8>
 8021d24:	2b00      	cmp	r3, #0
 8021d26:	d0c5      	beq.n	8021cb4 <_svfiprintf_r+0x130>
 8021d28:	9105      	str	r1, [sp, #20]
 8021d2a:	e7c3      	b.n	8021cb4 <_svfiprintf_r+0x130>
 8021d2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8021d30:	4604      	mov	r4, r0
 8021d32:	2301      	movs	r3, #1
 8021d34:	e7f0      	b.n	8021d18 <_svfiprintf_r+0x194>
 8021d36:	ab03      	add	r3, sp, #12
 8021d38:	9300      	str	r3, [sp, #0]
 8021d3a:	462a      	mov	r2, r5
 8021d3c:	4b0f      	ldr	r3, [pc, #60]	; (8021d7c <_svfiprintf_r+0x1f8>)
 8021d3e:	a904      	add	r1, sp, #16
 8021d40:	4638      	mov	r0, r7
 8021d42:	f3af 8000 	nop.w
 8021d46:	1c42      	adds	r2, r0, #1
 8021d48:	4606      	mov	r6, r0
 8021d4a:	d1d6      	bne.n	8021cfa <_svfiprintf_r+0x176>
 8021d4c:	89ab      	ldrh	r3, [r5, #12]
 8021d4e:	065b      	lsls	r3, r3, #25
 8021d50:	f53f af2c 	bmi.w	8021bac <_svfiprintf_r+0x28>
 8021d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021d56:	b01d      	add	sp, #116	; 0x74
 8021d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d5c:	ab03      	add	r3, sp, #12
 8021d5e:	9300      	str	r3, [sp, #0]
 8021d60:	462a      	mov	r2, r5
 8021d62:	4b06      	ldr	r3, [pc, #24]	; (8021d7c <_svfiprintf_r+0x1f8>)
 8021d64:	a904      	add	r1, sp, #16
 8021d66:	4638      	mov	r0, r7
 8021d68:	f000 f9d4 	bl	8022114 <_printf_i>
 8021d6c:	e7eb      	b.n	8021d46 <_svfiprintf_r+0x1c2>
 8021d6e:	bf00      	nop
 8021d70:	080292eb 	.word	0x080292eb
 8021d74:	080292f5 	.word	0x080292f5
 8021d78:	00000000 	.word	0x00000000
 8021d7c:	08021acd 	.word	0x08021acd
 8021d80:	080292f1 	.word	0x080292f1

08021d84 <__sfputc_r>:
 8021d84:	6893      	ldr	r3, [r2, #8]
 8021d86:	3b01      	subs	r3, #1
 8021d88:	2b00      	cmp	r3, #0
 8021d8a:	b410      	push	{r4}
 8021d8c:	6093      	str	r3, [r2, #8]
 8021d8e:	da08      	bge.n	8021da2 <__sfputc_r+0x1e>
 8021d90:	6994      	ldr	r4, [r2, #24]
 8021d92:	42a3      	cmp	r3, r4
 8021d94:	db01      	blt.n	8021d9a <__sfputc_r+0x16>
 8021d96:	290a      	cmp	r1, #10
 8021d98:	d103      	bne.n	8021da2 <__sfputc_r+0x1e>
 8021d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021d9e:	f7ff bb75 	b.w	802148c <__swbuf_r>
 8021da2:	6813      	ldr	r3, [r2, #0]
 8021da4:	1c58      	adds	r0, r3, #1
 8021da6:	6010      	str	r0, [r2, #0]
 8021da8:	7019      	strb	r1, [r3, #0]
 8021daa:	4608      	mov	r0, r1
 8021dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021db0:	4770      	bx	lr

08021db2 <__sfputs_r>:
 8021db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021db4:	4606      	mov	r6, r0
 8021db6:	460f      	mov	r7, r1
 8021db8:	4614      	mov	r4, r2
 8021dba:	18d5      	adds	r5, r2, r3
 8021dbc:	42ac      	cmp	r4, r5
 8021dbe:	d101      	bne.n	8021dc4 <__sfputs_r+0x12>
 8021dc0:	2000      	movs	r0, #0
 8021dc2:	e007      	b.n	8021dd4 <__sfputs_r+0x22>
 8021dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021dc8:	463a      	mov	r2, r7
 8021dca:	4630      	mov	r0, r6
 8021dcc:	f7ff ffda 	bl	8021d84 <__sfputc_r>
 8021dd0:	1c43      	adds	r3, r0, #1
 8021dd2:	d1f3      	bne.n	8021dbc <__sfputs_r+0xa>
 8021dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021dd8 <_vfiprintf_r>:
 8021dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ddc:	460d      	mov	r5, r1
 8021dde:	b09d      	sub	sp, #116	; 0x74
 8021de0:	4614      	mov	r4, r2
 8021de2:	4698      	mov	r8, r3
 8021de4:	4606      	mov	r6, r0
 8021de6:	b118      	cbz	r0, 8021df0 <_vfiprintf_r+0x18>
 8021de8:	6983      	ldr	r3, [r0, #24]
 8021dea:	b90b      	cbnz	r3, 8021df0 <_vfiprintf_r+0x18>
 8021dec:	f7fd fc00 	bl	801f5f0 <__sinit>
 8021df0:	4b89      	ldr	r3, [pc, #548]	; (8022018 <_vfiprintf_r+0x240>)
 8021df2:	429d      	cmp	r5, r3
 8021df4:	d11b      	bne.n	8021e2e <_vfiprintf_r+0x56>
 8021df6:	6875      	ldr	r5, [r6, #4]
 8021df8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021dfa:	07d9      	lsls	r1, r3, #31
 8021dfc:	d405      	bmi.n	8021e0a <_vfiprintf_r+0x32>
 8021dfe:	89ab      	ldrh	r3, [r5, #12]
 8021e00:	059a      	lsls	r2, r3, #22
 8021e02:	d402      	bmi.n	8021e0a <_vfiprintf_r+0x32>
 8021e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021e06:	f7fd ffa6 	bl	801fd56 <__retarget_lock_acquire_recursive>
 8021e0a:	89ab      	ldrh	r3, [r5, #12]
 8021e0c:	071b      	lsls	r3, r3, #28
 8021e0e:	d501      	bpl.n	8021e14 <_vfiprintf_r+0x3c>
 8021e10:	692b      	ldr	r3, [r5, #16]
 8021e12:	b9eb      	cbnz	r3, 8021e50 <_vfiprintf_r+0x78>
 8021e14:	4629      	mov	r1, r5
 8021e16:	4630      	mov	r0, r6
 8021e18:	f7ff fb9c 	bl	8021554 <__swsetup_r>
 8021e1c:	b1c0      	cbz	r0, 8021e50 <_vfiprintf_r+0x78>
 8021e1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021e20:	07dc      	lsls	r4, r3, #31
 8021e22:	d50e      	bpl.n	8021e42 <_vfiprintf_r+0x6a>
 8021e24:	f04f 30ff 	mov.w	r0, #4294967295
 8021e28:	b01d      	add	sp, #116	; 0x74
 8021e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e2e:	4b7b      	ldr	r3, [pc, #492]	; (802201c <_vfiprintf_r+0x244>)
 8021e30:	429d      	cmp	r5, r3
 8021e32:	d101      	bne.n	8021e38 <_vfiprintf_r+0x60>
 8021e34:	68b5      	ldr	r5, [r6, #8]
 8021e36:	e7df      	b.n	8021df8 <_vfiprintf_r+0x20>
 8021e38:	4b79      	ldr	r3, [pc, #484]	; (8022020 <_vfiprintf_r+0x248>)
 8021e3a:	429d      	cmp	r5, r3
 8021e3c:	bf08      	it	eq
 8021e3e:	68f5      	ldreq	r5, [r6, #12]
 8021e40:	e7da      	b.n	8021df8 <_vfiprintf_r+0x20>
 8021e42:	89ab      	ldrh	r3, [r5, #12]
 8021e44:	0598      	lsls	r0, r3, #22
 8021e46:	d4ed      	bmi.n	8021e24 <_vfiprintf_r+0x4c>
 8021e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021e4a:	f7fd ff86 	bl	801fd5a <__retarget_lock_release_recursive>
 8021e4e:	e7e9      	b.n	8021e24 <_vfiprintf_r+0x4c>
 8021e50:	2300      	movs	r3, #0
 8021e52:	9309      	str	r3, [sp, #36]	; 0x24
 8021e54:	2320      	movs	r3, #32
 8021e56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021e5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8021e5e:	2330      	movs	r3, #48	; 0x30
 8021e60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022024 <_vfiprintf_r+0x24c>
 8021e64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021e68:	f04f 0901 	mov.w	r9, #1
 8021e6c:	4623      	mov	r3, r4
 8021e6e:	469a      	mov	sl, r3
 8021e70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021e74:	b10a      	cbz	r2, 8021e7a <_vfiprintf_r+0xa2>
 8021e76:	2a25      	cmp	r2, #37	; 0x25
 8021e78:	d1f9      	bne.n	8021e6e <_vfiprintf_r+0x96>
 8021e7a:	ebba 0b04 	subs.w	fp, sl, r4
 8021e7e:	d00b      	beq.n	8021e98 <_vfiprintf_r+0xc0>
 8021e80:	465b      	mov	r3, fp
 8021e82:	4622      	mov	r2, r4
 8021e84:	4629      	mov	r1, r5
 8021e86:	4630      	mov	r0, r6
 8021e88:	f7ff ff93 	bl	8021db2 <__sfputs_r>
 8021e8c:	3001      	adds	r0, #1
 8021e8e:	f000 80aa 	beq.w	8021fe6 <_vfiprintf_r+0x20e>
 8021e92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021e94:	445a      	add	r2, fp
 8021e96:	9209      	str	r2, [sp, #36]	; 0x24
 8021e98:	f89a 3000 	ldrb.w	r3, [sl]
 8021e9c:	2b00      	cmp	r3, #0
 8021e9e:	f000 80a2 	beq.w	8021fe6 <_vfiprintf_r+0x20e>
 8021ea2:	2300      	movs	r3, #0
 8021ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8021ea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021eac:	f10a 0a01 	add.w	sl, sl, #1
 8021eb0:	9304      	str	r3, [sp, #16]
 8021eb2:	9307      	str	r3, [sp, #28]
 8021eb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021eb8:	931a      	str	r3, [sp, #104]	; 0x68
 8021eba:	4654      	mov	r4, sl
 8021ebc:	2205      	movs	r2, #5
 8021ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021ec2:	4858      	ldr	r0, [pc, #352]	; (8022024 <_vfiprintf_r+0x24c>)
 8021ec4:	f7de f9cc 	bl	8000260 <memchr>
 8021ec8:	9a04      	ldr	r2, [sp, #16]
 8021eca:	b9d8      	cbnz	r0, 8021f04 <_vfiprintf_r+0x12c>
 8021ecc:	06d1      	lsls	r1, r2, #27
 8021ece:	bf44      	itt	mi
 8021ed0:	2320      	movmi	r3, #32
 8021ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021ed6:	0713      	lsls	r3, r2, #28
 8021ed8:	bf44      	itt	mi
 8021eda:	232b      	movmi	r3, #43	; 0x2b
 8021edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8021ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8021ee6:	d015      	beq.n	8021f14 <_vfiprintf_r+0x13c>
 8021ee8:	9a07      	ldr	r2, [sp, #28]
 8021eea:	4654      	mov	r4, sl
 8021eec:	2000      	movs	r0, #0
 8021eee:	f04f 0c0a 	mov.w	ip, #10
 8021ef2:	4621      	mov	r1, r4
 8021ef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021ef8:	3b30      	subs	r3, #48	; 0x30
 8021efa:	2b09      	cmp	r3, #9
 8021efc:	d94e      	bls.n	8021f9c <_vfiprintf_r+0x1c4>
 8021efe:	b1b0      	cbz	r0, 8021f2e <_vfiprintf_r+0x156>
 8021f00:	9207      	str	r2, [sp, #28]
 8021f02:	e014      	b.n	8021f2e <_vfiprintf_r+0x156>
 8021f04:	eba0 0308 	sub.w	r3, r0, r8
 8021f08:	fa09 f303 	lsl.w	r3, r9, r3
 8021f0c:	4313      	orrs	r3, r2
 8021f0e:	9304      	str	r3, [sp, #16]
 8021f10:	46a2      	mov	sl, r4
 8021f12:	e7d2      	b.n	8021eba <_vfiprintf_r+0xe2>
 8021f14:	9b03      	ldr	r3, [sp, #12]
 8021f16:	1d19      	adds	r1, r3, #4
 8021f18:	681b      	ldr	r3, [r3, #0]
 8021f1a:	9103      	str	r1, [sp, #12]
 8021f1c:	2b00      	cmp	r3, #0
 8021f1e:	bfbb      	ittet	lt
 8021f20:	425b      	neglt	r3, r3
 8021f22:	f042 0202 	orrlt.w	r2, r2, #2
 8021f26:	9307      	strge	r3, [sp, #28]
 8021f28:	9307      	strlt	r3, [sp, #28]
 8021f2a:	bfb8      	it	lt
 8021f2c:	9204      	strlt	r2, [sp, #16]
 8021f2e:	7823      	ldrb	r3, [r4, #0]
 8021f30:	2b2e      	cmp	r3, #46	; 0x2e
 8021f32:	d10c      	bne.n	8021f4e <_vfiprintf_r+0x176>
 8021f34:	7863      	ldrb	r3, [r4, #1]
 8021f36:	2b2a      	cmp	r3, #42	; 0x2a
 8021f38:	d135      	bne.n	8021fa6 <_vfiprintf_r+0x1ce>
 8021f3a:	9b03      	ldr	r3, [sp, #12]
 8021f3c:	1d1a      	adds	r2, r3, #4
 8021f3e:	681b      	ldr	r3, [r3, #0]
 8021f40:	9203      	str	r2, [sp, #12]
 8021f42:	2b00      	cmp	r3, #0
 8021f44:	bfb8      	it	lt
 8021f46:	f04f 33ff 	movlt.w	r3, #4294967295
 8021f4a:	3402      	adds	r4, #2
 8021f4c:	9305      	str	r3, [sp, #20]
 8021f4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022034 <_vfiprintf_r+0x25c>
 8021f52:	7821      	ldrb	r1, [r4, #0]
 8021f54:	2203      	movs	r2, #3
 8021f56:	4650      	mov	r0, sl
 8021f58:	f7de f982 	bl	8000260 <memchr>
 8021f5c:	b140      	cbz	r0, 8021f70 <_vfiprintf_r+0x198>
 8021f5e:	2340      	movs	r3, #64	; 0x40
 8021f60:	eba0 000a 	sub.w	r0, r0, sl
 8021f64:	fa03 f000 	lsl.w	r0, r3, r0
 8021f68:	9b04      	ldr	r3, [sp, #16]
 8021f6a:	4303      	orrs	r3, r0
 8021f6c:	3401      	adds	r4, #1
 8021f6e:	9304      	str	r3, [sp, #16]
 8021f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021f74:	482c      	ldr	r0, [pc, #176]	; (8022028 <_vfiprintf_r+0x250>)
 8021f76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021f7a:	2206      	movs	r2, #6
 8021f7c:	f7de f970 	bl	8000260 <memchr>
 8021f80:	2800      	cmp	r0, #0
 8021f82:	d03f      	beq.n	8022004 <_vfiprintf_r+0x22c>
 8021f84:	4b29      	ldr	r3, [pc, #164]	; (802202c <_vfiprintf_r+0x254>)
 8021f86:	bb1b      	cbnz	r3, 8021fd0 <_vfiprintf_r+0x1f8>
 8021f88:	9b03      	ldr	r3, [sp, #12]
 8021f8a:	3307      	adds	r3, #7
 8021f8c:	f023 0307 	bic.w	r3, r3, #7
 8021f90:	3308      	adds	r3, #8
 8021f92:	9303      	str	r3, [sp, #12]
 8021f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f96:	443b      	add	r3, r7
 8021f98:	9309      	str	r3, [sp, #36]	; 0x24
 8021f9a:	e767      	b.n	8021e6c <_vfiprintf_r+0x94>
 8021f9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8021fa0:	460c      	mov	r4, r1
 8021fa2:	2001      	movs	r0, #1
 8021fa4:	e7a5      	b.n	8021ef2 <_vfiprintf_r+0x11a>
 8021fa6:	2300      	movs	r3, #0
 8021fa8:	3401      	adds	r4, #1
 8021faa:	9305      	str	r3, [sp, #20]
 8021fac:	4619      	mov	r1, r3
 8021fae:	f04f 0c0a 	mov.w	ip, #10
 8021fb2:	4620      	mov	r0, r4
 8021fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021fb8:	3a30      	subs	r2, #48	; 0x30
 8021fba:	2a09      	cmp	r2, #9
 8021fbc:	d903      	bls.n	8021fc6 <_vfiprintf_r+0x1ee>
 8021fbe:	2b00      	cmp	r3, #0
 8021fc0:	d0c5      	beq.n	8021f4e <_vfiprintf_r+0x176>
 8021fc2:	9105      	str	r1, [sp, #20]
 8021fc4:	e7c3      	b.n	8021f4e <_vfiprintf_r+0x176>
 8021fc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8021fca:	4604      	mov	r4, r0
 8021fcc:	2301      	movs	r3, #1
 8021fce:	e7f0      	b.n	8021fb2 <_vfiprintf_r+0x1da>
 8021fd0:	ab03      	add	r3, sp, #12
 8021fd2:	9300      	str	r3, [sp, #0]
 8021fd4:	462a      	mov	r2, r5
 8021fd6:	4b16      	ldr	r3, [pc, #88]	; (8022030 <_vfiprintf_r+0x258>)
 8021fd8:	a904      	add	r1, sp, #16
 8021fda:	4630      	mov	r0, r6
 8021fdc:	f3af 8000 	nop.w
 8021fe0:	4607      	mov	r7, r0
 8021fe2:	1c78      	adds	r0, r7, #1
 8021fe4:	d1d6      	bne.n	8021f94 <_vfiprintf_r+0x1bc>
 8021fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021fe8:	07d9      	lsls	r1, r3, #31
 8021fea:	d405      	bmi.n	8021ff8 <_vfiprintf_r+0x220>
 8021fec:	89ab      	ldrh	r3, [r5, #12]
 8021fee:	059a      	lsls	r2, r3, #22
 8021ff0:	d402      	bmi.n	8021ff8 <_vfiprintf_r+0x220>
 8021ff2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021ff4:	f7fd feb1 	bl	801fd5a <__retarget_lock_release_recursive>
 8021ff8:	89ab      	ldrh	r3, [r5, #12]
 8021ffa:	065b      	lsls	r3, r3, #25
 8021ffc:	f53f af12 	bmi.w	8021e24 <_vfiprintf_r+0x4c>
 8022000:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022002:	e711      	b.n	8021e28 <_vfiprintf_r+0x50>
 8022004:	ab03      	add	r3, sp, #12
 8022006:	9300      	str	r3, [sp, #0]
 8022008:	462a      	mov	r2, r5
 802200a:	4b09      	ldr	r3, [pc, #36]	; (8022030 <_vfiprintf_r+0x258>)
 802200c:	a904      	add	r1, sp, #16
 802200e:	4630      	mov	r0, r6
 8022010:	f000 f880 	bl	8022114 <_printf_i>
 8022014:	e7e4      	b.n	8021fe0 <_vfiprintf_r+0x208>
 8022016:	bf00      	nop
 8022018:	08028d6c 	.word	0x08028d6c
 802201c:	08028d8c 	.word	0x08028d8c
 8022020:	08028d4c 	.word	0x08028d4c
 8022024:	080292eb 	.word	0x080292eb
 8022028:	080292f5 	.word	0x080292f5
 802202c:	00000000 	.word	0x00000000
 8022030:	08021db3 	.word	0x08021db3
 8022034:	080292f1 	.word	0x080292f1

08022038 <_printf_common>:
 8022038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802203c:	4616      	mov	r6, r2
 802203e:	4699      	mov	r9, r3
 8022040:	688a      	ldr	r2, [r1, #8]
 8022042:	690b      	ldr	r3, [r1, #16]
 8022044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022048:	4293      	cmp	r3, r2
 802204a:	bfb8      	it	lt
 802204c:	4613      	movlt	r3, r2
 802204e:	6033      	str	r3, [r6, #0]
 8022050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022054:	4607      	mov	r7, r0
 8022056:	460c      	mov	r4, r1
 8022058:	b10a      	cbz	r2, 802205e <_printf_common+0x26>
 802205a:	3301      	adds	r3, #1
 802205c:	6033      	str	r3, [r6, #0]
 802205e:	6823      	ldr	r3, [r4, #0]
 8022060:	0699      	lsls	r1, r3, #26
 8022062:	bf42      	ittt	mi
 8022064:	6833      	ldrmi	r3, [r6, #0]
 8022066:	3302      	addmi	r3, #2
 8022068:	6033      	strmi	r3, [r6, #0]
 802206a:	6825      	ldr	r5, [r4, #0]
 802206c:	f015 0506 	ands.w	r5, r5, #6
 8022070:	d106      	bne.n	8022080 <_printf_common+0x48>
 8022072:	f104 0a19 	add.w	sl, r4, #25
 8022076:	68e3      	ldr	r3, [r4, #12]
 8022078:	6832      	ldr	r2, [r6, #0]
 802207a:	1a9b      	subs	r3, r3, r2
 802207c:	42ab      	cmp	r3, r5
 802207e:	dc26      	bgt.n	80220ce <_printf_common+0x96>
 8022080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022084:	1e13      	subs	r3, r2, #0
 8022086:	6822      	ldr	r2, [r4, #0]
 8022088:	bf18      	it	ne
 802208a:	2301      	movne	r3, #1
 802208c:	0692      	lsls	r2, r2, #26
 802208e:	d42b      	bmi.n	80220e8 <_printf_common+0xb0>
 8022090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022094:	4649      	mov	r1, r9
 8022096:	4638      	mov	r0, r7
 8022098:	47c0      	blx	r8
 802209a:	3001      	adds	r0, #1
 802209c:	d01e      	beq.n	80220dc <_printf_common+0xa4>
 802209e:	6823      	ldr	r3, [r4, #0]
 80220a0:	68e5      	ldr	r5, [r4, #12]
 80220a2:	6832      	ldr	r2, [r6, #0]
 80220a4:	f003 0306 	and.w	r3, r3, #6
 80220a8:	2b04      	cmp	r3, #4
 80220aa:	bf08      	it	eq
 80220ac:	1aad      	subeq	r5, r5, r2
 80220ae:	68a3      	ldr	r3, [r4, #8]
 80220b0:	6922      	ldr	r2, [r4, #16]
 80220b2:	bf0c      	ite	eq
 80220b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80220b8:	2500      	movne	r5, #0
 80220ba:	4293      	cmp	r3, r2
 80220bc:	bfc4      	itt	gt
 80220be:	1a9b      	subgt	r3, r3, r2
 80220c0:	18ed      	addgt	r5, r5, r3
 80220c2:	2600      	movs	r6, #0
 80220c4:	341a      	adds	r4, #26
 80220c6:	42b5      	cmp	r5, r6
 80220c8:	d11a      	bne.n	8022100 <_printf_common+0xc8>
 80220ca:	2000      	movs	r0, #0
 80220cc:	e008      	b.n	80220e0 <_printf_common+0xa8>
 80220ce:	2301      	movs	r3, #1
 80220d0:	4652      	mov	r2, sl
 80220d2:	4649      	mov	r1, r9
 80220d4:	4638      	mov	r0, r7
 80220d6:	47c0      	blx	r8
 80220d8:	3001      	adds	r0, #1
 80220da:	d103      	bne.n	80220e4 <_printf_common+0xac>
 80220dc:	f04f 30ff 	mov.w	r0, #4294967295
 80220e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220e4:	3501      	adds	r5, #1
 80220e6:	e7c6      	b.n	8022076 <_printf_common+0x3e>
 80220e8:	18e1      	adds	r1, r4, r3
 80220ea:	1c5a      	adds	r2, r3, #1
 80220ec:	2030      	movs	r0, #48	; 0x30
 80220ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80220f2:	4422      	add	r2, r4
 80220f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80220f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80220fc:	3302      	adds	r3, #2
 80220fe:	e7c7      	b.n	8022090 <_printf_common+0x58>
 8022100:	2301      	movs	r3, #1
 8022102:	4622      	mov	r2, r4
 8022104:	4649      	mov	r1, r9
 8022106:	4638      	mov	r0, r7
 8022108:	47c0      	blx	r8
 802210a:	3001      	adds	r0, #1
 802210c:	d0e6      	beq.n	80220dc <_printf_common+0xa4>
 802210e:	3601      	adds	r6, #1
 8022110:	e7d9      	b.n	80220c6 <_printf_common+0x8e>
	...

08022114 <_printf_i>:
 8022114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022118:	460c      	mov	r4, r1
 802211a:	4691      	mov	r9, r2
 802211c:	7e27      	ldrb	r7, [r4, #24]
 802211e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022120:	2f78      	cmp	r7, #120	; 0x78
 8022122:	4680      	mov	r8, r0
 8022124:	469a      	mov	sl, r3
 8022126:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802212a:	d807      	bhi.n	802213c <_printf_i+0x28>
 802212c:	2f62      	cmp	r7, #98	; 0x62
 802212e:	d80a      	bhi.n	8022146 <_printf_i+0x32>
 8022130:	2f00      	cmp	r7, #0
 8022132:	f000 80d8 	beq.w	80222e6 <_printf_i+0x1d2>
 8022136:	2f58      	cmp	r7, #88	; 0x58
 8022138:	f000 80a3 	beq.w	8022282 <_printf_i+0x16e>
 802213c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022144:	e03a      	b.n	80221bc <_printf_i+0xa8>
 8022146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802214a:	2b15      	cmp	r3, #21
 802214c:	d8f6      	bhi.n	802213c <_printf_i+0x28>
 802214e:	a001      	add	r0, pc, #4	; (adr r0, 8022154 <_printf_i+0x40>)
 8022150:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8022154:	080221ad 	.word	0x080221ad
 8022158:	080221c1 	.word	0x080221c1
 802215c:	0802213d 	.word	0x0802213d
 8022160:	0802213d 	.word	0x0802213d
 8022164:	0802213d 	.word	0x0802213d
 8022168:	0802213d 	.word	0x0802213d
 802216c:	080221c1 	.word	0x080221c1
 8022170:	0802213d 	.word	0x0802213d
 8022174:	0802213d 	.word	0x0802213d
 8022178:	0802213d 	.word	0x0802213d
 802217c:	0802213d 	.word	0x0802213d
 8022180:	080222cd 	.word	0x080222cd
 8022184:	080221f1 	.word	0x080221f1
 8022188:	080222af 	.word	0x080222af
 802218c:	0802213d 	.word	0x0802213d
 8022190:	0802213d 	.word	0x0802213d
 8022194:	080222ef 	.word	0x080222ef
 8022198:	0802213d 	.word	0x0802213d
 802219c:	080221f1 	.word	0x080221f1
 80221a0:	0802213d 	.word	0x0802213d
 80221a4:	0802213d 	.word	0x0802213d
 80221a8:	080222b7 	.word	0x080222b7
 80221ac:	680b      	ldr	r3, [r1, #0]
 80221ae:	1d1a      	adds	r2, r3, #4
 80221b0:	681b      	ldr	r3, [r3, #0]
 80221b2:	600a      	str	r2, [r1, #0]
 80221b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80221b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80221bc:	2301      	movs	r3, #1
 80221be:	e0a3      	b.n	8022308 <_printf_i+0x1f4>
 80221c0:	6825      	ldr	r5, [r4, #0]
 80221c2:	6808      	ldr	r0, [r1, #0]
 80221c4:	062e      	lsls	r6, r5, #24
 80221c6:	f100 0304 	add.w	r3, r0, #4
 80221ca:	d50a      	bpl.n	80221e2 <_printf_i+0xce>
 80221cc:	6805      	ldr	r5, [r0, #0]
 80221ce:	600b      	str	r3, [r1, #0]
 80221d0:	2d00      	cmp	r5, #0
 80221d2:	da03      	bge.n	80221dc <_printf_i+0xc8>
 80221d4:	232d      	movs	r3, #45	; 0x2d
 80221d6:	426d      	negs	r5, r5
 80221d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80221dc:	485e      	ldr	r0, [pc, #376]	; (8022358 <_printf_i+0x244>)
 80221de:	230a      	movs	r3, #10
 80221e0:	e019      	b.n	8022216 <_printf_i+0x102>
 80221e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80221e6:	6805      	ldr	r5, [r0, #0]
 80221e8:	600b      	str	r3, [r1, #0]
 80221ea:	bf18      	it	ne
 80221ec:	b22d      	sxthne	r5, r5
 80221ee:	e7ef      	b.n	80221d0 <_printf_i+0xbc>
 80221f0:	680b      	ldr	r3, [r1, #0]
 80221f2:	6825      	ldr	r5, [r4, #0]
 80221f4:	1d18      	adds	r0, r3, #4
 80221f6:	6008      	str	r0, [r1, #0]
 80221f8:	0628      	lsls	r0, r5, #24
 80221fa:	d501      	bpl.n	8022200 <_printf_i+0xec>
 80221fc:	681d      	ldr	r5, [r3, #0]
 80221fe:	e002      	b.n	8022206 <_printf_i+0xf2>
 8022200:	0669      	lsls	r1, r5, #25
 8022202:	d5fb      	bpl.n	80221fc <_printf_i+0xe8>
 8022204:	881d      	ldrh	r5, [r3, #0]
 8022206:	4854      	ldr	r0, [pc, #336]	; (8022358 <_printf_i+0x244>)
 8022208:	2f6f      	cmp	r7, #111	; 0x6f
 802220a:	bf0c      	ite	eq
 802220c:	2308      	moveq	r3, #8
 802220e:	230a      	movne	r3, #10
 8022210:	2100      	movs	r1, #0
 8022212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022216:	6866      	ldr	r6, [r4, #4]
 8022218:	60a6      	str	r6, [r4, #8]
 802221a:	2e00      	cmp	r6, #0
 802221c:	bfa2      	ittt	ge
 802221e:	6821      	ldrge	r1, [r4, #0]
 8022220:	f021 0104 	bicge.w	r1, r1, #4
 8022224:	6021      	strge	r1, [r4, #0]
 8022226:	b90d      	cbnz	r5, 802222c <_printf_i+0x118>
 8022228:	2e00      	cmp	r6, #0
 802222a:	d04d      	beq.n	80222c8 <_printf_i+0x1b4>
 802222c:	4616      	mov	r6, r2
 802222e:	fbb5 f1f3 	udiv	r1, r5, r3
 8022232:	fb03 5711 	mls	r7, r3, r1, r5
 8022236:	5dc7      	ldrb	r7, [r0, r7]
 8022238:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802223c:	462f      	mov	r7, r5
 802223e:	42bb      	cmp	r3, r7
 8022240:	460d      	mov	r5, r1
 8022242:	d9f4      	bls.n	802222e <_printf_i+0x11a>
 8022244:	2b08      	cmp	r3, #8
 8022246:	d10b      	bne.n	8022260 <_printf_i+0x14c>
 8022248:	6823      	ldr	r3, [r4, #0]
 802224a:	07df      	lsls	r7, r3, #31
 802224c:	d508      	bpl.n	8022260 <_printf_i+0x14c>
 802224e:	6923      	ldr	r3, [r4, #16]
 8022250:	6861      	ldr	r1, [r4, #4]
 8022252:	4299      	cmp	r1, r3
 8022254:	bfde      	ittt	le
 8022256:	2330      	movle	r3, #48	; 0x30
 8022258:	f806 3c01 	strble.w	r3, [r6, #-1]
 802225c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022260:	1b92      	subs	r2, r2, r6
 8022262:	6122      	str	r2, [r4, #16]
 8022264:	f8cd a000 	str.w	sl, [sp]
 8022268:	464b      	mov	r3, r9
 802226a:	aa03      	add	r2, sp, #12
 802226c:	4621      	mov	r1, r4
 802226e:	4640      	mov	r0, r8
 8022270:	f7ff fee2 	bl	8022038 <_printf_common>
 8022274:	3001      	adds	r0, #1
 8022276:	d14c      	bne.n	8022312 <_printf_i+0x1fe>
 8022278:	f04f 30ff 	mov.w	r0, #4294967295
 802227c:	b004      	add	sp, #16
 802227e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022282:	4835      	ldr	r0, [pc, #212]	; (8022358 <_printf_i+0x244>)
 8022284:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022288:	6823      	ldr	r3, [r4, #0]
 802228a:	680e      	ldr	r6, [r1, #0]
 802228c:	061f      	lsls	r7, r3, #24
 802228e:	f856 5b04 	ldr.w	r5, [r6], #4
 8022292:	600e      	str	r6, [r1, #0]
 8022294:	d514      	bpl.n	80222c0 <_printf_i+0x1ac>
 8022296:	07d9      	lsls	r1, r3, #31
 8022298:	bf44      	itt	mi
 802229a:	f043 0320 	orrmi.w	r3, r3, #32
 802229e:	6023      	strmi	r3, [r4, #0]
 80222a0:	b91d      	cbnz	r5, 80222aa <_printf_i+0x196>
 80222a2:	6823      	ldr	r3, [r4, #0]
 80222a4:	f023 0320 	bic.w	r3, r3, #32
 80222a8:	6023      	str	r3, [r4, #0]
 80222aa:	2310      	movs	r3, #16
 80222ac:	e7b0      	b.n	8022210 <_printf_i+0xfc>
 80222ae:	6823      	ldr	r3, [r4, #0]
 80222b0:	f043 0320 	orr.w	r3, r3, #32
 80222b4:	6023      	str	r3, [r4, #0]
 80222b6:	2378      	movs	r3, #120	; 0x78
 80222b8:	4828      	ldr	r0, [pc, #160]	; (802235c <_printf_i+0x248>)
 80222ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80222be:	e7e3      	b.n	8022288 <_printf_i+0x174>
 80222c0:	065e      	lsls	r6, r3, #25
 80222c2:	bf48      	it	mi
 80222c4:	b2ad      	uxthmi	r5, r5
 80222c6:	e7e6      	b.n	8022296 <_printf_i+0x182>
 80222c8:	4616      	mov	r6, r2
 80222ca:	e7bb      	b.n	8022244 <_printf_i+0x130>
 80222cc:	680b      	ldr	r3, [r1, #0]
 80222ce:	6826      	ldr	r6, [r4, #0]
 80222d0:	6960      	ldr	r0, [r4, #20]
 80222d2:	1d1d      	adds	r5, r3, #4
 80222d4:	600d      	str	r5, [r1, #0]
 80222d6:	0635      	lsls	r5, r6, #24
 80222d8:	681b      	ldr	r3, [r3, #0]
 80222da:	d501      	bpl.n	80222e0 <_printf_i+0x1cc>
 80222dc:	6018      	str	r0, [r3, #0]
 80222de:	e002      	b.n	80222e6 <_printf_i+0x1d2>
 80222e0:	0671      	lsls	r1, r6, #25
 80222e2:	d5fb      	bpl.n	80222dc <_printf_i+0x1c8>
 80222e4:	8018      	strh	r0, [r3, #0]
 80222e6:	2300      	movs	r3, #0
 80222e8:	6123      	str	r3, [r4, #16]
 80222ea:	4616      	mov	r6, r2
 80222ec:	e7ba      	b.n	8022264 <_printf_i+0x150>
 80222ee:	680b      	ldr	r3, [r1, #0]
 80222f0:	1d1a      	adds	r2, r3, #4
 80222f2:	600a      	str	r2, [r1, #0]
 80222f4:	681e      	ldr	r6, [r3, #0]
 80222f6:	6862      	ldr	r2, [r4, #4]
 80222f8:	2100      	movs	r1, #0
 80222fa:	4630      	mov	r0, r6
 80222fc:	f7dd ffb0 	bl	8000260 <memchr>
 8022300:	b108      	cbz	r0, 8022306 <_printf_i+0x1f2>
 8022302:	1b80      	subs	r0, r0, r6
 8022304:	6060      	str	r0, [r4, #4]
 8022306:	6863      	ldr	r3, [r4, #4]
 8022308:	6123      	str	r3, [r4, #16]
 802230a:	2300      	movs	r3, #0
 802230c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022310:	e7a8      	b.n	8022264 <_printf_i+0x150>
 8022312:	6923      	ldr	r3, [r4, #16]
 8022314:	4632      	mov	r2, r6
 8022316:	4649      	mov	r1, r9
 8022318:	4640      	mov	r0, r8
 802231a:	47d0      	blx	sl
 802231c:	3001      	adds	r0, #1
 802231e:	d0ab      	beq.n	8022278 <_printf_i+0x164>
 8022320:	6823      	ldr	r3, [r4, #0]
 8022322:	079b      	lsls	r3, r3, #30
 8022324:	d413      	bmi.n	802234e <_printf_i+0x23a>
 8022326:	68e0      	ldr	r0, [r4, #12]
 8022328:	9b03      	ldr	r3, [sp, #12]
 802232a:	4298      	cmp	r0, r3
 802232c:	bfb8      	it	lt
 802232e:	4618      	movlt	r0, r3
 8022330:	e7a4      	b.n	802227c <_printf_i+0x168>
 8022332:	2301      	movs	r3, #1
 8022334:	4632      	mov	r2, r6
 8022336:	4649      	mov	r1, r9
 8022338:	4640      	mov	r0, r8
 802233a:	47d0      	blx	sl
 802233c:	3001      	adds	r0, #1
 802233e:	d09b      	beq.n	8022278 <_printf_i+0x164>
 8022340:	3501      	adds	r5, #1
 8022342:	68e3      	ldr	r3, [r4, #12]
 8022344:	9903      	ldr	r1, [sp, #12]
 8022346:	1a5b      	subs	r3, r3, r1
 8022348:	42ab      	cmp	r3, r5
 802234a:	dcf2      	bgt.n	8022332 <_printf_i+0x21e>
 802234c:	e7eb      	b.n	8022326 <_printf_i+0x212>
 802234e:	2500      	movs	r5, #0
 8022350:	f104 0619 	add.w	r6, r4, #25
 8022354:	e7f5      	b.n	8022342 <_printf_i+0x22e>
 8022356:	bf00      	nop
 8022358:	080292fc 	.word	0x080292fc
 802235c:	0802930d 	.word	0x0802930d

08022360 <_putc_r>:
 8022360:	b570      	push	{r4, r5, r6, lr}
 8022362:	460d      	mov	r5, r1
 8022364:	4614      	mov	r4, r2
 8022366:	4606      	mov	r6, r0
 8022368:	b118      	cbz	r0, 8022372 <_putc_r+0x12>
 802236a:	6983      	ldr	r3, [r0, #24]
 802236c:	b90b      	cbnz	r3, 8022372 <_putc_r+0x12>
 802236e:	f7fd f93f 	bl	801f5f0 <__sinit>
 8022372:	4b1c      	ldr	r3, [pc, #112]	; (80223e4 <_putc_r+0x84>)
 8022374:	429c      	cmp	r4, r3
 8022376:	d124      	bne.n	80223c2 <_putc_r+0x62>
 8022378:	6874      	ldr	r4, [r6, #4]
 802237a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802237c:	07d8      	lsls	r0, r3, #31
 802237e:	d405      	bmi.n	802238c <_putc_r+0x2c>
 8022380:	89a3      	ldrh	r3, [r4, #12]
 8022382:	0599      	lsls	r1, r3, #22
 8022384:	d402      	bmi.n	802238c <_putc_r+0x2c>
 8022386:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022388:	f7fd fce5 	bl	801fd56 <__retarget_lock_acquire_recursive>
 802238c:	68a3      	ldr	r3, [r4, #8]
 802238e:	3b01      	subs	r3, #1
 8022390:	2b00      	cmp	r3, #0
 8022392:	60a3      	str	r3, [r4, #8]
 8022394:	da05      	bge.n	80223a2 <_putc_r+0x42>
 8022396:	69a2      	ldr	r2, [r4, #24]
 8022398:	4293      	cmp	r3, r2
 802239a:	db1c      	blt.n	80223d6 <_putc_r+0x76>
 802239c:	b2eb      	uxtb	r3, r5
 802239e:	2b0a      	cmp	r3, #10
 80223a0:	d019      	beq.n	80223d6 <_putc_r+0x76>
 80223a2:	6823      	ldr	r3, [r4, #0]
 80223a4:	1c5a      	adds	r2, r3, #1
 80223a6:	6022      	str	r2, [r4, #0]
 80223a8:	701d      	strb	r5, [r3, #0]
 80223aa:	b2ed      	uxtb	r5, r5
 80223ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80223ae:	07da      	lsls	r2, r3, #31
 80223b0:	d405      	bmi.n	80223be <_putc_r+0x5e>
 80223b2:	89a3      	ldrh	r3, [r4, #12]
 80223b4:	059b      	lsls	r3, r3, #22
 80223b6:	d402      	bmi.n	80223be <_putc_r+0x5e>
 80223b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80223ba:	f7fd fcce 	bl	801fd5a <__retarget_lock_release_recursive>
 80223be:	4628      	mov	r0, r5
 80223c0:	bd70      	pop	{r4, r5, r6, pc}
 80223c2:	4b09      	ldr	r3, [pc, #36]	; (80223e8 <_putc_r+0x88>)
 80223c4:	429c      	cmp	r4, r3
 80223c6:	d101      	bne.n	80223cc <_putc_r+0x6c>
 80223c8:	68b4      	ldr	r4, [r6, #8]
 80223ca:	e7d6      	b.n	802237a <_putc_r+0x1a>
 80223cc:	4b07      	ldr	r3, [pc, #28]	; (80223ec <_putc_r+0x8c>)
 80223ce:	429c      	cmp	r4, r3
 80223d0:	bf08      	it	eq
 80223d2:	68f4      	ldreq	r4, [r6, #12]
 80223d4:	e7d1      	b.n	802237a <_putc_r+0x1a>
 80223d6:	4629      	mov	r1, r5
 80223d8:	4622      	mov	r2, r4
 80223da:	4630      	mov	r0, r6
 80223dc:	f7ff f856 	bl	802148c <__swbuf_r>
 80223e0:	4605      	mov	r5, r0
 80223e2:	e7e3      	b.n	80223ac <_putc_r+0x4c>
 80223e4:	08028d6c 	.word	0x08028d6c
 80223e8:	08028d8c 	.word	0x08028d8c
 80223ec:	08028d4c 	.word	0x08028d4c

080223f0 <_read_r>:
 80223f0:	b538      	push	{r3, r4, r5, lr}
 80223f2:	4d07      	ldr	r5, [pc, #28]	; (8022410 <_read_r+0x20>)
 80223f4:	4604      	mov	r4, r0
 80223f6:	4608      	mov	r0, r1
 80223f8:	4611      	mov	r1, r2
 80223fa:	2200      	movs	r2, #0
 80223fc:	602a      	str	r2, [r5, #0]
 80223fe:	461a      	mov	r2, r3
 8022400:	f7de fcbf 	bl	8000d82 <_read>
 8022404:	1c43      	adds	r3, r0, #1
 8022406:	d102      	bne.n	802240e <_read_r+0x1e>
 8022408:	682b      	ldr	r3, [r5, #0]
 802240a:	b103      	cbz	r3, 802240e <_read_r+0x1e>
 802240c:	6023      	str	r3, [r4, #0]
 802240e:	bd38      	pop	{r3, r4, r5, pc}
 8022410:	20000f94 	.word	0x20000f94

08022414 <sniprintf>:
 8022414:	b40c      	push	{r2, r3}
 8022416:	b530      	push	{r4, r5, lr}
 8022418:	4b17      	ldr	r3, [pc, #92]	; (8022478 <sniprintf+0x64>)
 802241a:	1e0c      	subs	r4, r1, #0
 802241c:	681d      	ldr	r5, [r3, #0]
 802241e:	b09d      	sub	sp, #116	; 0x74
 8022420:	da08      	bge.n	8022434 <sniprintf+0x20>
 8022422:	238b      	movs	r3, #139	; 0x8b
 8022424:	602b      	str	r3, [r5, #0]
 8022426:	f04f 30ff 	mov.w	r0, #4294967295
 802242a:	b01d      	add	sp, #116	; 0x74
 802242c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022430:	b002      	add	sp, #8
 8022432:	4770      	bx	lr
 8022434:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022438:	f8ad 3014 	strh.w	r3, [sp, #20]
 802243c:	bf14      	ite	ne
 802243e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8022442:	4623      	moveq	r3, r4
 8022444:	9304      	str	r3, [sp, #16]
 8022446:	9307      	str	r3, [sp, #28]
 8022448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802244c:	9002      	str	r0, [sp, #8]
 802244e:	9006      	str	r0, [sp, #24]
 8022450:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022454:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022456:	ab21      	add	r3, sp, #132	; 0x84
 8022458:	a902      	add	r1, sp, #8
 802245a:	4628      	mov	r0, r5
 802245c:	9301      	str	r3, [sp, #4]
 802245e:	f7ff fb91 	bl	8021b84 <_svfiprintf_r>
 8022462:	1c43      	adds	r3, r0, #1
 8022464:	bfbc      	itt	lt
 8022466:	238b      	movlt	r3, #139	; 0x8b
 8022468:	602b      	strlt	r3, [r5, #0]
 802246a:	2c00      	cmp	r4, #0
 802246c:	d0dd      	beq.n	802242a <sniprintf+0x16>
 802246e:	9b02      	ldr	r3, [sp, #8]
 8022470:	2200      	movs	r2, #0
 8022472:	701a      	strb	r2, [r3, #0]
 8022474:	e7d9      	b.n	802242a <sniprintf+0x16>
 8022476:	bf00      	nop
 8022478:	20000108 	.word	0x20000108

0802247c <siscanf>:
 802247c:	b40e      	push	{r1, r2, r3}
 802247e:	b510      	push	{r4, lr}
 8022480:	b09f      	sub	sp, #124	; 0x7c
 8022482:	ac21      	add	r4, sp, #132	; 0x84
 8022484:	f44f 7101 	mov.w	r1, #516	; 0x204
 8022488:	f854 2b04 	ldr.w	r2, [r4], #4
 802248c:	9201      	str	r2, [sp, #4]
 802248e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022492:	9004      	str	r0, [sp, #16]
 8022494:	9008      	str	r0, [sp, #32]
 8022496:	f7dd fed1 	bl	800023c <strlen>
 802249a:	4b0c      	ldr	r3, [pc, #48]	; (80224cc <siscanf+0x50>)
 802249c:	9005      	str	r0, [sp, #20]
 802249e:	9009      	str	r0, [sp, #36]	; 0x24
 80224a0:	930d      	str	r3, [sp, #52]	; 0x34
 80224a2:	480b      	ldr	r0, [pc, #44]	; (80224d0 <siscanf+0x54>)
 80224a4:	9a01      	ldr	r2, [sp, #4]
 80224a6:	6800      	ldr	r0, [r0, #0]
 80224a8:	9403      	str	r4, [sp, #12]
 80224aa:	2300      	movs	r3, #0
 80224ac:	9311      	str	r3, [sp, #68]	; 0x44
 80224ae:	9316      	str	r3, [sp, #88]	; 0x58
 80224b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80224b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80224b8:	a904      	add	r1, sp, #16
 80224ba:	4623      	mov	r3, r4
 80224bc:	f000 f8ba 	bl	8022634 <__ssvfiscanf_r>
 80224c0:	b01f      	add	sp, #124	; 0x7c
 80224c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80224c6:	b003      	add	sp, #12
 80224c8:	4770      	bx	lr
 80224ca:	bf00      	nop
 80224cc:	0802022b 	.word	0x0802022b
 80224d0:	20000108 	.word	0x20000108

080224d4 <strcpy>:
 80224d4:	4603      	mov	r3, r0
 80224d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80224da:	f803 2b01 	strb.w	r2, [r3], #1
 80224de:	2a00      	cmp	r2, #0
 80224e0:	d1f9      	bne.n	80224d6 <strcpy+0x2>
 80224e2:	4770      	bx	lr

080224e4 <strncmp>:
 80224e4:	b510      	push	{r4, lr}
 80224e6:	b16a      	cbz	r2, 8022504 <strncmp+0x20>
 80224e8:	3901      	subs	r1, #1
 80224ea:	1884      	adds	r4, r0, r2
 80224ec:	f810 3b01 	ldrb.w	r3, [r0], #1
 80224f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80224f4:	4293      	cmp	r3, r2
 80224f6:	d103      	bne.n	8022500 <strncmp+0x1c>
 80224f8:	42a0      	cmp	r0, r4
 80224fa:	d001      	beq.n	8022500 <strncmp+0x1c>
 80224fc:	2b00      	cmp	r3, #0
 80224fe:	d1f5      	bne.n	80224ec <strncmp+0x8>
 8022500:	1a98      	subs	r0, r3, r2
 8022502:	bd10      	pop	{r4, pc}
 8022504:	4610      	mov	r0, r2
 8022506:	e7fc      	b.n	8022502 <strncmp+0x1e>

08022508 <__ascii_wctomb>:
 8022508:	b149      	cbz	r1, 802251e <__ascii_wctomb+0x16>
 802250a:	2aff      	cmp	r2, #255	; 0xff
 802250c:	bf85      	ittet	hi
 802250e:	238a      	movhi	r3, #138	; 0x8a
 8022510:	6003      	strhi	r3, [r0, #0]
 8022512:	700a      	strbls	r2, [r1, #0]
 8022514:	f04f 30ff 	movhi.w	r0, #4294967295
 8022518:	bf98      	it	ls
 802251a:	2001      	movls	r0, #1
 802251c:	4770      	bx	lr
 802251e:	4608      	mov	r0, r1
 8022520:	4770      	bx	lr
	...

08022524 <__env_lock>:
 8022524:	4801      	ldr	r0, [pc, #4]	; (802252c <__env_lock+0x8>)
 8022526:	f7fd bc16 	b.w	801fd56 <__retarget_lock_acquire_recursive>
 802252a:	bf00      	nop
 802252c:	20000f8a 	.word	0x20000f8a

08022530 <__env_unlock>:
 8022530:	4801      	ldr	r0, [pc, #4]	; (8022538 <__env_unlock+0x8>)
 8022532:	f7fd bc12 	b.w	801fd5a <__retarget_lock_release_recursive>
 8022536:	bf00      	nop
 8022538:	20000f8a 	.word	0x20000f8a

0802253c <memmove>:
 802253c:	4288      	cmp	r0, r1
 802253e:	b510      	push	{r4, lr}
 8022540:	eb01 0402 	add.w	r4, r1, r2
 8022544:	d902      	bls.n	802254c <memmove+0x10>
 8022546:	4284      	cmp	r4, r0
 8022548:	4623      	mov	r3, r4
 802254a:	d807      	bhi.n	802255c <memmove+0x20>
 802254c:	1e43      	subs	r3, r0, #1
 802254e:	42a1      	cmp	r1, r4
 8022550:	d008      	beq.n	8022564 <memmove+0x28>
 8022552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022556:	f803 2f01 	strb.w	r2, [r3, #1]!
 802255a:	e7f8      	b.n	802254e <memmove+0x12>
 802255c:	4402      	add	r2, r0
 802255e:	4601      	mov	r1, r0
 8022560:	428a      	cmp	r2, r1
 8022562:	d100      	bne.n	8022566 <memmove+0x2a>
 8022564:	bd10      	pop	{r4, pc}
 8022566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802256a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802256e:	e7f7      	b.n	8022560 <memmove+0x24>

08022570 <_malloc_usable_size_r>:
 8022570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022574:	1f18      	subs	r0, r3, #4
 8022576:	2b00      	cmp	r3, #0
 8022578:	bfbc      	itt	lt
 802257a:	580b      	ldrlt	r3, [r1, r0]
 802257c:	18c0      	addlt	r0, r0, r3
 802257e:	4770      	bx	lr

08022580 <_sungetc_r>:
 8022580:	b538      	push	{r3, r4, r5, lr}
 8022582:	1c4b      	adds	r3, r1, #1
 8022584:	4614      	mov	r4, r2
 8022586:	d103      	bne.n	8022590 <_sungetc_r+0x10>
 8022588:	f04f 35ff 	mov.w	r5, #4294967295
 802258c:	4628      	mov	r0, r5
 802258e:	bd38      	pop	{r3, r4, r5, pc}
 8022590:	8993      	ldrh	r3, [r2, #12]
 8022592:	f023 0320 	bic.w	r3, r3, #32
 8022596:	8193      	strh	r3, [r2, #12]
 8022598:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802259a:	6852      	ldr	r2, [r2, #4]
 802259c:	b2cd      	uxtb	r5, r1
 802259e:	b18b      	cbz	r3, 80225c4 <_sungetc_r+0x44>
 80225a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80225a2:	4293      	cmp	r3, r2
 80225a4:	dd08      	ble.n	80225b8 <_sungetc_r+0x38>
 80225a6:	6823      	ldr	r3, [r4, #0]
 80225a8:	1e5a      	subs	r2, r3, #1
 80225aa:	6022      	str	r2, [r4, #0]
 80225ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 80225b0:	6863      	ldr	r3, [r4, #4]
 80225b2:	3301      	adds	r3, #1
 80225b4:	6063      	str	r3, [r4, #4]
 80225b6:	e7e9      	b.n	802258c <_sungetc_r+0xc>
 80225b8:	4621      	mov	r1, r4
 80225ba:	f000 fb39 	bl	8022c30 <__submore>
 80225be:	2800      	cmp	r0, #0
 80225c0:	d0f1      	beq.n	80225a6 <_sungetc_r+0x26>
 80225c2:	e7e1      	b.n	8022588 <_sungetc_r+0x8>
 80225c4:	6921      	ldr	r1, [r4, #16]
 80225c6:	6823      	ldr	r3, [r4, #0]
 80225c8:	b151      	cbz	r1, 80225e0 <_sungetc_r+0x60>
 80225ca:	4299      	cmp	r1, r3
 80225cc:	d208      	bcs.n	80225e0 <_sungetc_r+0x60>
 80225ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80225d2:	42a9      	cmp	r1, r5
 80225d4:	d104      	bne.n	80225e0 <_sungetc_r+0x60>
 80225d6:	3b01      	subs	r3, #1
 80225d8:	3201      	adds	r2, #1
 80225da:	6023      	str	r3, [r4, #0]
 80225dc:	6062      	str	r2, [r4, #4]
 80225de:	e7d5      	b.n	802258c <_sungetc_r+0xc>
 80225e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80225e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80225e8:	6363      	str	r3, [r4, #52]	; 0x34
 80225ea:	2303      	movs	r3, #3
 80225ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80225ee:	4623      	mov	r3, r4
 80225f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80225f4:	6023      	str	r3, [r4, #0]
 80225f6:	2301      	movs	r3, #1
 80225f8:	e7dc      	b.n	80225b4 <_sungetc_r+0x34>

080225fa <__ssrefill_r>:
 80225fa:	b510      	push	{r4, lr}
 80225fc:	460c      	mov	r4, r1
 80225fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8022600:	b169      	cbz	r1, 802261e <__ssrefill_r+0x24>
 8022602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022606:	4299      	cmp	r1, r3
 8022608:	d001      	beq.n	802260e <__ssrefill_r+0x14>
 802260a:	f7fd fc41 	bl	801fe90 <_free_r>
 802260e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022610:	6063      	str	r3, [r4, #4]
 8022612:	2000      	movs	r0, #0
 8022614:	6360      	str	r0, [r4, #52]	; 0x34
 8022616:	b113      	cbz	r3, 802261e <__ssrefill_r+0x24>
 8022618:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802261a:	6023      	str	r3, [r4, #0]
 802261c:	bd10      	pop	{r4, pc}
 802261e:	6923      	ldr	r3, [r4, #16]
 8022620:	6023      	str	r3, [r4, #0]
 8022622:	2300      	movs	r3, #0
 8022624:	6063      	str	r3, [r4, #4]
 8022626:	89a3      	ldrh	r3, [r4, #12]
 8022628:	f043 0320 	orr.w	r3, r3, #32
 802262c:	81a3      	strh	r3, [r4, #12]
 802262e:	f04f 30ff 	mov.w	r0, #4294967295
 8022632:	e7f3      	b.n	802261c <__ssrefill_r+0x22>

08022634 <__ssvfiscanf_r>:
 8022634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022638:	460c      	mov	r4, r1
 802263a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802263e:	2100      	movs	r1, #0
 8022640:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8022644:	49b2      	ldr	r1, [pc, #712]	; (8022910 <__ssvfiscanf_r+0x2dc>)
 8022646:	91a0      	str	r1, [sp, #640]	; 0x280
 8022648:	f10d 0804 	add.w	r8, sp, #4
 802264c:	49b1      	ldr	r1, [pc, #708]	; (8022914 <__ssvfiscanf_r+0x2e0>)
 802264e:	4fb2      	ldr	r7, [pc, #712]	; (8022918 <__ssvfiscanf_r+0x2e4>)
 8022650:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 802291c <__ssvfiscanf_r+0x2e8>
 8022654:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8022658:	4606      	mov	r6, r0
 802265a:	91a1      	str	r1, [sp, #644]	; 0x284
 802265c:	9300      	str	r3, [sp, #0]
 802265e:	f892 a000 	ldrb.w	sl, [r2]
 8022662:	f1ba 0f00 	cmp.w	sl, #0
 8022666:	f000 8151 	beq.w	802290c <__ssvfiscanf_r+0x2d8>
 802266a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 802266e:	f013 0308 	ands.w	r3, r3, #8
 8022672:	f102 0501 	add.w	r5, r2, #1
 8022676:	d019      	beq.n	80226ac <__ssvfiscanf_r+0x78>
 8022678:	6863      	ldr	r3, [r4, #4]
 802267a:	2b00      	cmp	r3, #0
 802267c:	dd0f      	ble.n	802269e <__ssvfiscanf_r+0x6a>
 802267e:	6823      	ldr	r3, [r4, #0]
 8022680:	781a      	ldrb	r2, [r3, #0]
 8022682:	5cba      	ldrb	r2, [r7, r2]
 8022684:	0712      	lsls	r2, r2, #28
 8022686:	d401      	bmi.n	802268c <__ssvfiscanf_r+0x58>
 8022688:	462a      	mov	r2, r5
 802268a:	e7e8      	b.n	802265e <__ssvfiscanf_r+0x2a>
 802268c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802268e:	3201      	adds	r2, #1
 8022690:	9245      	str	r2, [sp, #276]	; 0x114
 8022692:	6862      	ldr	r2, [r4, #4]
 8022694:	3301      	adds	r3, #1
 8022696:	3a01      	subs	r2, #1
 8022698:	6062      	str	r2, [r4, #4]
 802269a:	6023      	str	r3, [r4, #0]
 802269c:	e7ec      	b.n	8022678 <__ssvfiscanf_r+0x44>
 802269e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80226a0:	4621      	mov	r1, r4
 80226a2:	4630      	mov	r0, r6
 80226a4:	4798      	blx	r3
 80226a6:	2800      	cmp	r0, #0
 80226a8:	d0e9      	beq.n	802267e <__ssvfiscanf_r+0x4a>
 80226aa:	e7ed      	b.n	8022688 <__ssvfiscanf_r+0x54>
 80226ac:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80226b0:	f040 8083 	bne.w	80227ba <__ssvfiscanf_r+0x186>
 80226b4:	9341      	str	r3, [sp, #260]	; 0x104
 80226b6:	9343      	str	r3, [sp, #268]	; 0x10c
 80226b8:	7853      	ldrb	r3, [r2, #1]
 80226ba:	2b2a      	cmp	r3, #42	; 0x2a
 80226bc:	bf02      	ittt	eq
 80226be:	2310      	moveq	r3, #16
 80226c0:	1c95      	addeq	r5, r2, #2
 80226c2:	9341      	streq	r3, [sp, #260]	; 0x104
 80226c4:	220a      	movs	r2, #10
 80226c6:	46ab      	mov	fp, r5
 80226c8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80226cc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80226d0:	2b09      	cmp	r3, #9
 80226d2:	d91d      	bls.n	8022710 <__ssvfiscanf_r+0xdc>
 80226d4:	4891      	ldr	r0, [pc, #580]	; (802291c <__ssvfiscanf_r+0x2e8>)
 80226d6:	2203      	movs	r2, #3
 80226d8:	f7dd fdc2 	bl	8000260 <memchr>
 80226dc:	b140      	cbz	r0, 80226f0 <__ssvfiscanf_r+0xbc>
 80226de:	2301      	movs	r3, #1
 80226e0:	eba0 0009 	sub.w	r0, r0, r9
 80226e4:	fa03 f000 	lsl.w	r0, r3, r0
 80226e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80226ea:	4318      	orrs	r0, r3
 80226ec:	9041      	str	r0, [sp, #260]	; 0x104
 80226ee:	465d      	mov	r5, fp
 80226f0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80226f4:	2b78      	cmp	r3, #120	; 0x78
 80226f6:	d806      	bhi.n	8022706 <__ssvfiscanf_r+0xd2>
 80226f8:	2b57      	cmp	r3, #87	; 0x57
 80226fa:	d810      	bhi.n	802271e <__ssvfiscanf_r+0xea>
 80226fc:	2b25      	cmp	r3, #37	; 0x25
 80226fe:	d05c      	beq.n	80227ba <__ssvfiscanf_r+0x186>
 8022700:	d856      	bhi.n	80227b0 <__ssvfiscanf_r+0x17c>
 8022702:	2b00      	cmp	r3, #0
 8022704:	d074      	beq.n	80227f0 <__ssvfiscanf_r+0x1bc>
 8022706:	2303      	movs	r3, #3
 8022708:	9347      	str	r3, [sp, #284]	; 0x11c
 802270a:	230a      	movs	r3, #10
 802270c:	9342      	str	r3, [sp, #264]	; 0x108
 802270e:	e081      	b.n	8022814 <__ssvfiscanf_r+0x1e0>
 8022710:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8022712:	fb02 1303 	mla	r3, r2, r3, r1
 8022716:	3b30      	subs	r3, #48	; 0x30
 8022718:	9343      	str	r3, [sp, #268]	; 0x10c
 802271a:	465d      	mov	r5, fp
 802271c:	e7d3      	b.n	80226c6 <__ssvfiscanf_r+0x92>
 802271e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8022722:	2a20      	cmp	r2, #32
 8022724:	d8ef      	bhi.n	8022706 <__ssvfiscanf_r+0xd2>
 8022726:	a101      	add	r1, pc, #4	; (adr r1, 802272c <__ssvfiscanf_r+0xf8>)
 8022728:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802272c:	080227ff 	.word	0x080227ff
 8022730:	08022707 	.word	0x08022707
 8022734:	08022707 	.word	0x08022707
 8022738:	0802285d 	.word	0x0802285d
 802273c:	08022707 	.word	0x08022707
 8022740:	08022707 	.word	0x08022707
 8022744:	08022707 	.word	0x08022707
 8022748:	08022707 	.word	0x08022707
 802274c:	08022707 	.word	0x08022707
 8022750:	08022707 	.word	0x08022707
 8022754:	08022707 	.word	0x08022707
 8022758:	08022873 	.word	0x08022873
 802275c:	08022849 	.word	0x08022849
 8022760:	080227b7 	.word	0x080227b7
 8022764:	080227b7 	.word	0x080227b7
 8022768:	080227b7 	.word	0x080227b7
 802276c:	08022707 	.word	0x08022707
 8022770:	0802284d 	.word	0x0802284d
 8022774:	08022707 	.word	0x08022707
 8022778:	08022707 	.word	0x08022707
 802277c:	08022707 	.word	0x08022707
 8022780:	08022707 	.word	0x08022707
 8022784:	08022883 	.word	0x08022883
 8022788:	08022855 	.word	0x08022855
 802278c:	080227f7 	.word	0x080227f7
 8022790:	08022707 	.word	0x08022707
 8022794:	08022707 	.word	0x08022707
 8022798:	0802287f 	.word	0x0802287f
 802279c:	08022707 	.word	0x08022707
 80227a0:	08022849 	.word	0x08022849
 80227a4:	08022707 	.word	0x08022707
 80227a8:	08022707 	.word	0x08022707
 80227ac:	080227ff 	.word	0x080227ff
 80227b0:	3b45      	subs	r3, #69	; 0x45
 80227b2:	2b02      	cmp	r3, #2
 80227b4:	d8a7      	bhi.n	8022706 <__ssvfiscanf_r+0xd2>
 80227b6:	2305      	movs	r3, #5
 80227b8:	e02b      	b.n	8022812 <__ssvfiscanf_r+0x1de>
 80227ba:	6863      	ldr	r3, [r4, #4]
 80227bc:	2b00      	cmp	r3, #0
 80227be:	dd0d      	ble.n	80227dc <__ssvfiscanf_r+0x1a8>
 80227c0:	6823      	ldr	r3, [r4, #0]
 80227c2:	781a      	ldrb	r2, [r3, #0]
 80227c4:	4552      	cmp	r2, sl
 80227c6:	f040 80a1 	bne.w	802290c <__ssvfiscanf_r+0x2d8>
 80227ca:	3301      	adds	r3, #1
 80227cc:	6862      	ldr	r2, [r4, #4]
 80227ce:	6023      	str	r3, [r4, #0]
 80227d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80227d2:	3a01      	subs	r2, #1
 80227d4:	3301      	adds	r3, #1
 80227d6:	6062      	str	r2, [r4, #4]
 80227d8:	9345      	str	r3, [sp, #276]	; 0x114
 80227da:	e755      	b.n	8022688 <__ssvfiscanf_r+0x54>
 80227dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80227de:	4621      	mov	r1, r4
 80227e0:	4630      	mov	r0, r6
 80227e2:	4798      	blx	r3
 80227e4:	2800      	cmp	r0, #0
 80227e6:	d0eb      	beq.n	80227c0 <__ssvfiscanf_r+0x18c>
 80227e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80227ea:	2800      	cmp	r0, #0
 80227ec:	f040 8084 	bne.w	80228f8 <__ssvfiscanf_r+0x2c4>
 80227f0:	f04f 30ff 	mov.w	r0, #4294967295
 80227f4:	e086      	b.n	8022904 <__ssvfiscanf_r+0x2d0>
 80227f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80227f8:	f042 0220 	orr.w	r2, r2, #32
 80227fc:	9241      	str	r2, [sp, #260]	; 0x104
 80227fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022804:	9241      	str	r2, [sp, #260]	; 0x104
 8022806:	2210      	movs	r2, #16
 8022808:	2b6f      	cmp	r3, #111	; 0x6f
 802280a:	9242      	str	r2, [sp, #264]	; 0x108
 802280c:	bf34      	ite	cc
 802280e:	2303      	movcc	r3, #3
 8022810:	2304      	movcs	r3, #4
 8022812:	9347      	str	r3, [sp, #284]	; 0x11c
 8022814:	6863      	ldr	r3, [r4, #4]
 8022816:	2b00      	cmp	r3, #0
 8022818:	dd41      	ble.n	802289e <__ssvfiscanf_r+0x26a>
 802281a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802281c:	0659      	lsls	r1, r3, #25
 802281e:	d404      	bmi.n	802282a <__ssvfiscanf_r+0x1f6>
 8022820:	6823      	ldr	r3, [r4, #0]
 8022822:	781a      	ldrb	r2, [r3, #0]
 8022824:	5cba      	ldrb	r2, [r7, r2]
 8022826:	0712      	lsls	r2, r2, #28
 8022828:	d440      	bmi.n	80228ac <__ssvfiscanf_r+0x278>
 802282a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802282c:	2b02      	cmp	r3, #2
 802282e:	dc4f      	bgt.n	80228d0 <__ssvfiscanf_r+0x29c>
 8022830:	466b      	mov	r3, sp
 8022832:	4622      	mov	r2, r4
 8022834:	a941      	add	r1, sp, #260	; 0x104
 8022836:	4630      	mov	r0, r6
 8022838:	f000 f874 	bl	8022924 <_scanf_chars>
 802283c:	2801      	cmp	r0, #1
 802283e:	d065      	beq.n	802290c <__ssvfiscanf_r+0x2d8>
 8022840:	2802      	cmp	r0, #2
 8022842:	f47f af21 	bne.w	8022688 <__ssvfiscanf_r+0x54>
 8022846:	e7cf      	b.n	80227e8 <__ssvfiscanf_r+0x1b4>
 8022848:	220a      	movs	r2, #10
 802284a:	e7dd      	b.n	8022808 <__ssvfiscanf_r+0x1d4>
 802284c:	2300      	movs	r3, #0
 802284e:	9342      	str	r3, [sp, #264]	; 0x108
 8022850:	2303      	movs	r3, #3
 8022852:	e7de      	b.n	8022812 <__ssvfiscanf_r+0x1de>
 8022854:	2308      	movs	r3, #8
 8022856:	9342      	str	r3, [sp, #264]	; 0x108
 8022858:	2304      	movs	r3, #4
 802285a:	e7da      	b.n	8022812 <__ssvfiscanf_r+0x1de>
 802285c:	4629      	mov	r1, r5
 802285e:	4640      	mov	r0, r8
 8022860:	f000 f9ac 	bl	8022bbc <__sccl>
 8022864:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802286a:	9341      	str	r3, [sp, #260]	; 0x104
 802286c:	4605      	mov	r5, r0
 802286e:	2301      	movs	r3, #1
 8022870:	e7cf      	b.n	8022812 <__ssvfiscanf_r+0x1de>
 8022872:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022878:	9341      	str	r3, [sp, #260]	; 0x104
 802287a:	2300      	movs	r3, #0
 802287c:	e7c9      	b.n	8022812 <__ssvfiscanf_r+0x1de>
 802287e:	2302      	movs	r3, #2
 8022880:	e7c7      	b.n	8022812 <__ssvfiscanf_r+0x1de>
 8022882:	9841      	ldr	r0, [sp, #260]	; 0x104
 8022884:	06c3      	lsls	r3, r0, #27
 8022886:	f53f aeff 	bmi.w	8022688 <__ssvfiscanf_r+0x54>
 802288a:	9b00      	ldr	r3, [sp, #0]
 802288c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802288e:	1d19      	adds	r1, r3, #4
 8022890:	9100      	str	r1, [sp, #0]
 8022892:	681b      	ldr	r3, [r3, #0]
 8022894:	07c0      	lsls	r0, r0, #31
 8022896:	bf4c      	ite	mi
 8022898:	801a      	strhmi	r2, [r3, #0]
 802289a:	601a      	strpl	r2, [r3, #0]
 802289c:	e6f4      	b.n	8022688 <__ssvfiscanf_r+0x54>
 802289e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80228a0:	4621      	mov	r1, r4
 80228a2:	4630      	mov	r0, r6
 80228a4:	4798      	blx	r3
 80228a6:	2800      	cmp	r0, #0
 80228a8:	d0b7      	beq.n	802281a <__ssvfiscanf_r+0x1e6>
 80228aa:	e79d      	b.n	80227e8 <__ssvfiscanf_r+0x1b4>
 80228ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80228ae:	3201      	adds	r2, #1
 80228b0:	9245      	str	r2, [sp, #276]	; 0x114
 80228b2:	6862      	ldr	r2, [r4, #4]
 80228b4:	3a01      	subs	r2, #1
 80228b6:	2a00      	cmp	r2, #0
 80228b8:	6062      	str	r2, [r4, #4]
 80228ba:	dd02      	ble.n	80228c2 <__ssvfiscanf_r+0x28e>
 80228bc:	3301      	adds	r3, #1
 80228be:	6023      	str	r3, [r4, #0]
 80228c0:	e7ae      	b.n	8022820 <__ssvfiscanf_r+0x1ec>
 80228c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80228c4:	4621      	mov	r1, r4
 80228c6:	4630      	mov	r0, r6
 80228c8:	4798      	blx	r3
 80228ca:	2800      	cmp	r0, #0
 80228cc:	d0a8      	beq.n	8022820 <__ssvfiscanf_r+0x1ec>
 80228ce:	e78b      	b.n	80227e8 <__ssvfiscanf_r+0x1b4>
 80228d0:	2b04      	cmp	r3, #4
 80228d2:	dc06      	bgt.n	80228e2 <__ssvfiscanf_r+0x2ae>
 80228d4:	466b      	mov	r3, sp
 80228d6:	4622      	mov	r2, r4
 80228d8:	a941      	add	r1, sp, #260	; 0x104
 80228da:	4630      	mov	r0, r6
 80228dc:	f000 f87a 	bl	80229d4 <_scanf_i>
 80228e0:	e7ac      	b.n	802283c <__ssvfiscanf_r+0x208>
 80228e2:	4b0f      	ldr	r3, [pc, #60]	; (8022920 <__ssvfiscanf_r+0x2ec>)
 80228e4:	2b00      	cmp	r3, #0
 80228e6:	f43f aecf 	beq.w	8022688 <__ssvfiscanf_r+0x54>
 80228ea:	466b      	mov	r3, sp
 80228ec:	4622      	mov	r2, r4
 80228ee:	a941      	add	r1, sp, #260	; 0x104
 80228f0:	4630      	mov	r0, r6
 80228f2:	f3af 8000 	nop.w
 80228f6:	e7a1      	b.n	802283c <__ssvfiscanf_r+0x208>
 80228f8:	89a3      	ldrh	r3, [r4, #12]
 80228fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80228fe:	bf18      	it	ne
 8022900:	f04f 30ff 	movne.w	r0, #4294967295
 8022904:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8022908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802290c:	9844      	ldr	r0, [sp, #272]	; 0x110
 802290e:	e7f9      	b.n	8022904 <__ssvfiscanf_r+0x2d0>
 8022910:	08022581 	.word	0x08022581
 8022914:	080225fb 	.word	0x080225fb
 8022918:	080291e1 	.word	0x080291e1
 802291c:	080292f1 	.word	0x080292f1
 8022920:	00000000 	.word	0x00000000

08022924 <_scanf_chars>:
 8022924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022928:	4615      	mov	r5, r2
 802292a:	688a      	ldr	r2, [r1, #8]
 802292c:	4680      	mov	r8, r0
 802292e:	460c      	mov	r4, r1
 8022930:	b932      	cbnz	r2, 8022940 <_scanf_chars+0x1c>
 8022932:	698a      	ldr	r2, [r1, #24]
 8022934:	2a00      	cmp	r2, #0
 8022936:	bf0c      	ite	eq
 8022938:	2201      	moveq	r2, #1
 802293a:	f04f 32ff 	movne.w	r2, #4294967295
 802293e:	608a      	str	r2, [r1, #8]
 8022940:	6822      	ldr	r2, [r4, #0]
 8022942:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80229d0 <_scanf_chars+0xac>
 8022946:	06d1      	lsls	r1, r2, #27
 8022948:	bf5f      	itttt	pl
 802294a:	681a      	ldrpl	r2, [r3, #0]
 802294c:	1d11      	addpl	r1, r2, #4
 802294e:	6019      	strpl	r1, [r3, #0]
 8022950:	6816      	ldrpl	r6, [r2, #0]
 8022952:	2700      	movs	r7, #0
 8022954:	69a0      	ldr	r0, [r4, #24]
 8022956:	b188      	cbz	r0, 802297c <_scanf_chars+0x58>
 8022958:	2801      	cmp	r0, #1
 802295a:	d107      	bne.n	802296c <_scanf_chars+0x48>
 802295c:	682b      	ldr	r3, [r5, #0]
 802295e:	781a      	ldrb	r2, [r3, #0]
 8022960:	6963      	ldr	r3, [r4, #20]
 8022962:	5c9b      	ldrb	r3, [r3, r2]
 8022964:	b953      	cbnz	r3, 802297c <_scanf_chars+0x58>
 8022966:	bb27      	cbnz	r7, 80229b2 <_scanf_chars+0x8e>
 8022968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802296c:	2802      	cmp	r0, #2
 802296e:	d120      	bne.n	80229b2 <_scanf_chars+0x8e>
 8022970:	682b      	ldr	r3, [r5, #0]
 8022972:	781b      	ldrb	r3, [r3, #0]
 8022974:	f813 3009 	ldrb.w	r3, [r3, r9]
 8022978:	071b      	lsls	r3, r3, #28
 802297a:	d41a      	bmi.n	80229b2 <_scanf_chars+0x8e>
 802297c:	6823      	ldr	r3, [r4, #0]
 802297e:	06da      	lsls	r2, r3, #27
 8022980:	bf5e      	ittt	pl
 8022982:	682b      	ldrpl	r3, [r5, #0]
 8022984:	781b      	ldrbpl	r3, [r3, #0]
 8022986:	f806 3b01 	strbpl.w	r3, [r6], #1
 802298a:	682a      	ldr	r2, [r5, #0]
 802298c:	686b      	ldr	r3, [r5, #4]
 802298e:	3201      	adds	r2, #1
 8022990:	602a      	str	r2, [r5, #0]
 8022992:	68a2      	ldr	r2, [r4, #8]
 8022994:	3b01      	subs	r3, #1
 8022996:	3a01      	subs	r2, #1
 8022998:	606b      	str	r3, [r5, #4]
 802299a:	3701      	adds	r7, #1
 802299c:	60a2      	str	r2, [r4, #8]
 802299e:	b142      	cbz	r2, 80229b2 <_scanf_chars+0x8e>
 80229a0:	2b00      	cmp	r3, #0
 80229a2:	dcd7      	bgt.n	8022954 <_scanf_chars+0x30>
 80229a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80229a8:	4629      	mov	r1, r5
 80229aa:	4640      	mov	r0, r8
 80229ac:	4798      	blx	r3
 80229ae:	2800      	cmp	r0, #0
 80229b0:	d0d0      	beq.n	8022954 <_scanf_chars+0x30>
 80229b2:	6823      	ldr	r3, [r4, #0]
 80229b4:	f013 0310 	ands.w	r3, r3, #16
 80229b8:	d105      	bne.n	80229c6 <_scanf_chars+0xa2>
 80229ba:	68e2      	ldr	r2, [r4, #12]
 80229bc:	3201      	adds	r2, #1
 80229be:	60e2      	str	r2, [r4, #12]
 80229c0:	69a2      	ldr	r2, [r4, #24]
 80229c2:	b102      	cbz	r2, 80229c6 <_scanf_chars+0xa2>
 80229c4:	7033      	strb	r3, [r6, #0]
 80229c6:	6923      	ldr	r3, [r4, #16]
 80229c8:	441f      	add	r7, r3
 80229ca:	6127      	str	r7, [r4, #16]
 80229cc:	2000      	movs	r0, #0
 80229ce:	e7cb      	b.n	8022968 <_scanf_chars+0x44>
 80229d0:	080291e1 	.word	0x080291e1

080229d4 <_scanf_i>:
 80229d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229d8:	4698      	mov	r8, r3
 80229da:	4b74      	ldr	r3, [pc, #464]	; (8022bac <_scanf_i+0x1d8>)
 80229dc:	460c      	mov	r4, r1
 80229de:	4682      	mov	sl, r0
 80229e0:	4616      	mov	r6, r2
 80229e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80229e6:	b087      	sub	sp, #28
 80229e8:	ab03      	add	r3, sp, #12
 80229ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80229ee:	4b70      	ldr	r3, [pc, #448]	; (8022bb0 <_scanf_i+0x1dc>)
 80229f0:	69a1      	ldr	r1, [r4, #24]
 80229f2:	4a70      	ldr	r2, [pc, #448]	; (8022bb4 <_scanf_i+0x1e0>)
 80229f4:	2903      	cmp	r1, #3
 80229f6:	bf18      	it	ne
 80229f8:	461a      	movne	r2, r3
 80229fa:	68a3      	ldr	r3, [r4, #8]
 80229fc:	9201      	str	r2, [sp, #4]
 80229fe:	1e5a      	subs	r2, r3, #1
 8022a00:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8022a04:	bf88      	it	hi
 8022a06:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8022a0a:	4627      	mov	r7, r4
 8022a0c:	bf82      	ittt	hi
 8022a0e:	eb03 0905 	addhi.w	r9, r3, r5
 8022a12:	f240 135d 	movwhi	r3, #349	; 0x15d
 8022a16:	60a3      	strhi	r3, [r4, #8]
 8022a18:	f857 3b1c 	ldr.w	r3, [r7], #28
 8022a1c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8022a20:	bf98      	it	ls
 8022a22:	f04f 0900 	movls.w	r9, #0
 8022a26:	6023      	str	r3, [r4, #0]
 8022a28:	463d      	mov	r5, r7
 8022a2a:	f04f 0b00 	mov.w	fp, #0
 8022a2e:	6831      	ldr	r1, [r6, #0]
 8022a30:	ab03      	add	r3, sp, #12
 8022a32:	7809      	ldrb	r1, [r1, #0]
 8022a34:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8022a38:	2202      	movs	r2, #2
 8022a3a:	f7dd fc11 	bl	8000260 <memchr>
 8022a3e:	b328      	cbz	r0, 8022a8c <_scanf_i+0xb8>
 8022a40:	f1bb 0f01 	cmp.w	fp, #1
 8022a44:	d159      	bne.n	8022afa <_scanf_i+0x126>
 8022a46:	6862      	ldr	r2, [r4, #4]
 8022a48:	b92a      	cbnz	r2, 8022a56 <_scanf_i+0x82>
 8022a4a:	6822      	ldr	r2, [r4, #0]
 8022a4c:	2308      	movs	r3, #8
 8022a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022a52:	6063      	str	r3, [r4, #4]
 8022a54:	6022      	str	r2, [r4, #0]
 8022a56:	6822      	ldr	r2, [r4, #0]
 8022a58:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8022a5c:	6022      	str	r2, [r4, #0]
 8022a5e:	68a2      	ldr	r2, [r4, #8]
 8022a60:	1e51      	subs	r1, r2, #1
 8022a62:	60a1      	str	r1, [r4, #8]
 8022a64:	b192      	cbz	r2, 8022a8c <_scanf_i+0xb8>
 8022a66:	6832      	ldr	r2, [r6, #0]
 8022a68:	1c51      	adds	r1, r2, #1
 8022a6a:	6031      	str	r1, [r6, #0]
 8022a6c:	7812      	ldrb	r2, [r2, #0]
 8022a6e:	f805 2b01 	strb.w	r2, [r5], #1
 8022a72:	6872      	ldr	r2, [r6, #4]
 8022a74:	3a01      	subs	r2, #1
 8022a76:	2a00      	cmp	r2, #0
 8022a78:	6072      	str	r2, [r6, #4]
 8022a7a:	dc07      	bgt.n	8022a8c <_scanf_i+0xb8>
 8022a7c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8022a80:	4631      	mov	r1, r6
 8022a82:	4650      	mov	r0, sl
 8022a84:	4790      	blx	r2
 8022a86:	2800      	cmp	r0, #0
 8022a88:	f040 8085 	bne.w	8022b96 <_scanf_i+0x1c2>
 8022a8c:	f10b 0b01 	add.w	fp, fp, #1
 8022a90:	f1bb 0f03 	cmp.w	fp, #3
 8022a94:	d1cb      	bne.n	8022a2e <_scanf_i+0x5a>
 8022a96:	6863      	ldr	r3, [r4, #4]
 8022a98:	b90b      	cbnz	r3, 8022a9e <_scanf_i+0xca>
 8022a9a:	230a      	movs	r3, #10
 8022a9c:	6063      	str	r3, [r4, #4]
 8022a9e:	6863      	ldr	r3, [r4, #4]
 8022aa0:	4945      	ldr	r1, [pc, #276]	; (8022bb8 <_scanf_i+0x1e4>)
 8022aa2:	6960      	ldr	r0, [r4, #20]
 8022aa4:	1ac9      	subs	r1, r1, r3
 8022aa6:	f000 f889 	bl	8022bbc <__sccl>
 8022aaa:	f04f 0b00 	mov.w	fp, #0
 8022aae:	68a3      	ldr	r3, [r4, #8]
 8022ab0:	6822      	ldr	r2, [r4, #0]
 8022ab2:	2b00      	cmp	r3, #0
 8022ab4:	d03d      	beq.n	8022b32 <_scanf_i+0x15e>
 8022ab6:	6831      	ldr	r1, [r6, #0]
 8022ab8:	6960      	ldr	r0, [r4, #20]
 8022aba:	f891 c000 	ldrb.w	ip, [r1]
 8022abe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8022ac2:	2800      	cmp	r0, #0
 8022ac4:	d035      	beq.n	8022b32 <_scanf_i+0x15e>
 8022ac6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8022aca:	d124      	bne.n	8022b16 <_scanf_i+0x142>
 8022acc:	0510      	lsls	r0, r2, #20
 8022ace:	d522      	bpl.n	8022b16 <_scanf_i+0x142>
 8022ad0:	f10b 0b01 	add.w	fp, fp, #1
 8022ad4:	f1b9 0f00 	cmp.w	r9, #0
 8022ad8:	d003      	beq.n	8022ae2 <_scanf_i+0x10e>
 8022ada:	3301      	adds	r3, #1
 8022adc:	f109 39ff 	add.w	r9, r9, #4294967295
 8022ae0:	60a3      	str	r3, [r4, #8]
 8022ae2:	6873      	ldr	r3, [r6, #4]
 8022ae4:	3b01      	subs	r3, #1
 8022ae6:	2b00      	cmp	r3, #0
 8022ae8:	6073      	str	r3, [r6, #4]
 8022aea:	dd1b      	ble.n	8022b24 <_scanf_i+0x150>
 8022aec:	6833      	ldr	r3, [r6, #0]
 8022aee:	3301      	adds	r3, #1
 8022af0:	6033      	str	r3, [r6, #0]
 8022af2:	68a3      	ldr	r3, [r4, #8]
 8022af4:	3b01      	subs	r3, #1
 8022af6:	60a3      	str	r3, [r4, #8]
 8022af8:	e7d9      	b.n	8022aae <_scanf_i+0xda>
 8022afa:	f1bb 0f02 	cmp.w	fp, #2
 8022afe:	d1ae      	bne.n	8022a5e <_scanf_i+0x8a>
 8022b00:	6822      	ldr	r2, [r4, #0]
 8022b02:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8022b06:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8022b0a:	d1bf      	bne.n	8022a8c <_scanf_i+0xb8>
 8022b0c:	2310      	movs	r3, #16
 8022b0e:	6063      	str	r3, [r4, #4]
 8022b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022b14:	e7a2      	b.n	8022a5c <_scanf_i+0x88>
 8022b16:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8022b1a:	6022      	str	r2, [r4, #0]
 8022b1c:	780b      	ldrb	r3, [r1, #0]
 8022b1e:	f805 3b01 	strb.w	r3, [r5], #1
 8022b22:	e7de      	b.n	8022ae2 <_scanf_i+0x10e>
 8022b24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022b28:	4631      	mov	r1, r6
 8022b2a:	4650      	mov	r0, sl
 8022b2c:	4798      	blx	r3
 8022b2e:	2800      	cmp	r0, #0
 8022b30:	d0df      	beq.n	8022af2 <_scanf_i+0x11e>
 8022b32:	6823      	ldr	r3, [r4, #0]
 8022b34:	05d9      	lsls	r1, r3, #23
 8022b36:	d50d      	bpl.n	8022b54 <_scanf_i+0x180>
 8022b38:	42bd      	cmp	r5, r7
 8022b3a:	d909      	bls.n	8022b50 <_scanf_i+0x17c>
 8022b3c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8022b40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8022b44:	4632      	mov	r2, r6
 8022b46:	4650      	mov	r0, sl
 8022b48:	4798      	blx	r3
 8022b4a:	f105 39ff 	add.w	r9, r5, #4294967295
 8022b4e:	464d      	mov	r5, r9
 8022b50:	42bd      	cmp	r5, r7
 8022b52:	d028      	beq.n	8022ba6 <_scanf_i+0x1d2>
 8022b54:	6822      	ldr	r2, [r4, #0]
 8022b56:	f012 0210 	ands.w	r2, r2, #16
 8022b5a:	d113      	bne.n	8022b84 <_scanf_i+0x1b0>
 8022b5c:	702a      	strb	r2, [r5, #0]
 8022b5e:	6863      	ldr	r3, [r4, #4]
 8022b60:	9e01      	ldr	r6, [sp, #4]
 8022b62:	4639      	mov	r1, r7
 8022b64:	4650      	mov	r0, sl
 8022b66:	47b0      	blx	r6
 8022b68:	f8d8 3000 	ldr.w	r3, [r8]
 8022b6c:	6821      	ldr	r1, [r4, #0]
 8022b6e:	1d1a      	adds	r2, r3, #4
 8022b70:	f8c8 2000 	str.w	r2, [r8]
 8022b74:	f011 0f20 	tst.w	r1, #32
 8022b78:	681b      	ldr	r3, [r3, #0]
 8022b7a:	d00f      	beq.n	8022b9c <_scanf_i+0x1c8>
 8022b7c:	6018      	str	r0, [r3, #0]
 8022b7e:	68e3      	ldr	r3, [r4, #12]
 8022b80:	3301      	adds	r3, #1
 8022b82:	60e3      	str	r3, [r4, #12]
 8022b84:	1bed      	subs	r5, r5, r7
 8022b86:	44ab      	add	fp, r5
 8022b88:	6925      	ldr	r5, [r4, #16]
 8022b8a:	445d      	add	r5, fp
 8022b8c:	6125      	str	r5, [r4, #16]
 8022b8e:	2000      	movs	r0, #0
 8022b90:	b007      	add	sp, #28
 8022b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b96:	f04f 0b00 	mov.w	fp, #0
 8022b9a:	e7ca      	b.n	8022b32 <_scanf_i+0x15e>
 8022b9c:	07ca      	lsls	r2, r1, #31
 8022b9e:	bf4c      	ite	mi
 8022ba0:	8018      	strhmi	r0, [r3, #0]
 8022ba2:	6018      	strpl	r0, [r3, #0]
 8022ba4:	e7eb      	b.n	8022b7e <_scanf_i+0x1aa>
 8022ba6:	2001      	movs	r0, #1
 8022ba8:	e7f2      	b.n	8022b90 <_scanf_i+0x1bc>
 8022baa:	bf00      	nop
 8022bac:	080261a8 	.word	0x080261a8
 8022bb0:	08020f95 	.word	0x08020f95
 8022bb4:	08020e85 	.word	0x08020e85
 8022bb8:	08029337 	.word	0x08029337

08022bbc <__sccl>:
 8022bbc:	b570      	push	{r4, r5, r6, lr}
 8022bbe:	780b      	ldrb	r3, [r1, #0]
 8022bc0:	4604      	mov	r4, r0
 8022bc2:	2b5e      	cmp	r3, #94	; 0x5e
 8022bc4:	bf0b      	itete	eq
 8022bc6:	784b      	ldrbeq	r3, [r1, #1]
 8022bc8:	1c48      	addne	r0, r1, #1
 8022bca:	1c88      	addeq	r0, r1, #2
 8022bcc:	2200      	movne	r2, #0
 8022bce:	bf08      	it	eq
 8022bd0:	2201      	moveq	r2, #1
 8022bd2:	1e61      	subs	r1, r4, #1
 8022bd4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8022bd8:	f801 2f01 	strb.w	r2, [r1, #1]!
 8022bdc:	42a9      	cmp	r1, r5
 8022bde:	d1fb      	bne.n	8022bd8 <__sccl+0x1c>
 8022be0:	b90b      	cbnz	r3, 8022be6 <__sccl+0x2a>
 8022be2:	3801      	subs	r0, #1
 8022be4:	bd70      	pop	{r4, r5, r6, pc}
 8022be6:	f082 0101 	eor.w	r1, r2, #1
 8022bea:	54e1      	strb	r1, [r4, r3]
 8022bec:	1c42      	adds	r2, r0, #1
 8022bee:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8022bf2:	2d2d      	cmp	r5, #45	; 0x2d
 8022bf4:	f102 36ff 	add.w	r6, r2, #4294967295
 8022bf8:	4610      	mov	r0, r2
 8022bfa:	d006      	beq.n	8022c0a <__sccl+0x4e>
 8022bfc:	2d5d      	cmp	r5, #93	; 0x5d
 8022bfe:	d0f1      	beq.n	8022be4 <__sccl+0x28>
 8022c00:	b90d      	cbnz	r5, 8022c06 <__sccl+0x4a>
 8022c02:	4630      	mov	r0, r6
 8022c04:	e7ee      	b.n	8022be4 <__sccl+0x28>
 8022c06:	462b      	mov	r3, r5
 8022c08:	e7ef      	b.n	8022bea <__sccl+0x2e>
 8022c0a:	7816      	ldrb	r6, [r2, #0]
 8022c0c:	2e5d      	cmp	r6, #93	; 0x5d
 8022c0e:	d0fa      	beq.n	8022c06 <__sccl+0x4a>
 8022c10:	42b3      	cmp	r3, r6
 8022c12:	dcf8      	bgt.n	8022c06 <__sccl+0x4a>
 8022c14:	4618      	mov	r0, r3
 8022c16:	3001      	adds	r0, #1
 8022c18:	4286      	cmp	r6, r0
 8022c1a:	5421      	strb	r1, [r4, r0]
 8022c1c:	dcfb      	bgt.n	8022c16 <__sccl+0x5a>
 8022c1e:	43d8      	mvns	r0, r3
 8022c20:	4430      	add	r0, r6
 8022c22:	1c5d      	adds	r5, r3, #1
 8022c24:	42b3      	cmp	r3, r6
 8022c26:	bfa8      	it	ge
 8022c28:	2000      	movge	r0, #0
 8022c2a:	182b      	adds	r3, r5, r0
 8022c2c:	3202      	adds	r2, #2
 8022c2e:	e7de      	b.n	8022bee <__sccl+0x32>

08022c30 <__submore>:
 8022c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022c34:	460c      	mov	r4, r1
 8022c36:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8022c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022c3c:	4299      	cmp	r1, r3
 8022c3e:	d11d      	bne.n	8022c7c <__submore+0x4c>
 8022c40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022c44:	f7fd f974 	bl	801ff30 <_malloc_r>
 8022c48:	b918      	cbnz	r0, 8022c52 <__submore+0x22>
 8022c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8022c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022c56:	63a3      	str	r3, [r4, #56]	; 0x38
 8022c58:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8022c5c:	6360      	str	r0, [r4, #52]	; 0x34
 8022c5e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8022c62:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8022c66:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8022c6a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8022c6e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8022c72:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8022c76:	6020      	str	r0, [r4, #0]
 8022c78:	2000      	movs	r0, #0
 8022c7a:	e7e8      	b.n	8022c4e <__submore+0x1e>
 8022c7c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8022c7e:	0077      	lsls	r7, r6, #1
 8022c80:	463a      	mov	r2, r7
 8022c82:	f7fe fefd 	bl	8021a80 <_realloc_r>
 8022c86:	4605      	mov	r5, r0
 8022c88:	2800      	cmp	r0, #0
 8022c8a:	d0de      	beq.n	8022c4a <__submore+0x1a>
 8022c8c:	eb00 0806 	add.w	r8, r0, r6
 8022c90:	4601      	mov	r1, r0
 8022c92:	4632      	mov	r2, r6
 8022c94:	4640      	mov	r0, r8
 8022c96:	f7fd f8d5 	bl	801fe44 <memcpy>
 8022c9a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8022c9e:	f8c4 8000 	str.w	r8, [r4]
 8022ca2:	e7e9      	b.n	8022c78 <__submore+0x48>

08022ca4 <_init>:
 8022ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ca6:	bf00      	nop
 8022ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022caa:	bc08      	pop	{r3}
 8022cac:	469e      	mov	lr, r3
 8022cae:	4770      	bx	lr

08022cb0 <_fini>:
 8022cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022cb2:	bf00      	nop
 8022cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022cb6:	bc08      	pop	{r3}
 8022cb8:	469e      	mov	lr, r3
 8022cba:	4770      	bx	lr
 8022cbc:	0000      	movs	r0, r0
	...

08022cc0 <__time_veneer>:
 8022cc0:	e51ff004 	ldr	pc, [pc, #-4]	; 8022cc4 <__time_veneer+0x4>
 8022cc4:	200005c0 	.word	0x200005c0
