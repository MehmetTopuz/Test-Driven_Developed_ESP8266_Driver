
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022ea0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000063b8  08023080  08023080  00033080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029438  08029438  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  08029438  08029438  00039438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029440  08029440  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08029440  08029440  00039440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08029450  08029450  00039450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08029460  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c18  2000033c  0802979c  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f54  0802979c  00040f54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006a345  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c113  00000000  00000000  000aa6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004468  00000000  00000000  000b67c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004248  00000000  00000000  000bac30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d891  00000000  00000000  000bee78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d2d8  00000000  00000000  000ec709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001138e0  00000000  00000000  001199e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022d2c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014af0  00000000  00000000  0022d314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0802305c 	.word	0x0802305c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	0802305c 	.word	0x0802305c

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000408 	.word	0x20000408

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f01e fc76 	bl	801f65c <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f01e fbce 	bl	801f65c <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	20000f58 	.word	0x20000f58

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f01e ffa5 	bl	801fe98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f003 f83f 	bl	8003fd0 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f60:	08029460 	.word	0x08029460
  ldr r2, =_sbss
 8000f64:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f68:	20000f54 	.word	0x20000f54

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000f40 	.word	0x20000f40
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000f40 	.word	0x20000f40

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	08026448 	.word	0x08026448
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08026458 	.word	0x08026458

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	08026458 	.word	0x08026458

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	08026460 	.word	0x08026460
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	08026478 	.word	0x08026478
 8003904:	08026480 	.word	0x08026480

08003908 <ESP_Init>:

int ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 uint8_t 	(*UART_Receive)(void),
			 uint32_t 	(*getTick)(void),
			 uint32_t	UART_Buffer_Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <ESP_Init+0x42>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <ESP_Init+0x42>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <ESP_Init+0x42>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <ESP_Init+0x50>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <ESP_Init+0x50>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003934:	4a08      	ldr	r2, [pc, #32]	; (8003958 <ESP_Init+0x50>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 fa5a 	bl	8003df4 <ringBuffer_init>
 8003940:	4603      	mov	r3, r0
 8003942:	4a06      	ldr	r2, [pc, #24]	; (800395c <ESP_Init+0x54>)
 8003944:	6013      	str	r3, [r2, #0]

		return 1;
 8003946:	2301      	movs	r3, #1
 8003948:	e001      	b.n	800394e <ESP_Init+0x46>
	}
	else
	{
		return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000360 	.word	0x20000360
 800395c:	20000498 	.word	0x20000498

08003960 <Send_AT_Command>:


void Send_AT_Command(char *cmd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <Send_AT_Command+0x18>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000360 	.word	0x20000360

0800397c <ESP_UART_ReceiveHandler>:

void ESP_UART_ReceiveHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
	uint8_t rx_data=0;
 8003982:	2300      	movs	r3, #0
 8003984:	71fb      	strb	r3, [r7, #7]

	rx_data = ESP8266.UART_Receive();
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <ESP_UART_ReceiveHandler+0x2c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4798      	blx	r3
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
	ringBuffer_push(rx_buffer, rx_data);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <ESP_UART_ReceiveHandler+0x30>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	79fa      	ldrb	r2, [r7, #7]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fa6c 	bl	8003e76 <ringBuffer_push>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000360 	.word	0x20000360
 80039ac:	20000498 	.word	0x20000498

080039b0 <Read_Response>:


uint32_t Read_Response(char * response)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <Read_Response+0x20>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fae3 	bl	8003f8a <ringBuffer_lookFor>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000498 	.word	0x20000498

080039d4 <Wait_Response>:


Status Wait_Response(char* response, uint32_t timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <Wait_Response+0x74>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <Wait_Response+0x78>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	4798      	blx	r3
 80039ec:	4603      	mov	r3, r0
 80039ee:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <Wait_Response+0x7c>)
 80039f0:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <Wait_Response+0x74>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 80039f8:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <Wait_Response+0x80>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fac3 	bl	8003f8a <ringBuffer_lookFor>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <Wait_Response+0x46>
	{
		firstCall = 0;
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <Wait_Response+0x74>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <Wait_Response+0x7c>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e012      	b.n	8003a40 <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <Wait_Response+0x78>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	4798      	blx	r3
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <Wait_Response+0x7c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d807      	bhi.n	8003a3e <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <Wait_Response+0x74>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <Wait_Response+0x7c>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e000      	b.n	8003a40 <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003a3e:	2305      	movs	r3, #5
	}

}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	2000036c 	.word	0x2000036c
 8003a4c:	20000360 	.word	0x20000360
 8003a50:	20000370 	.word	0x20000370
 8003a54:	20000498 	.word	0x20000498

08003a58 <Connect_Wifi>:

Status Connect_Wifi(char* ssid, char* password)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b098      	sub	sp, #96	; 0x60
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003a62:	4a16      	ldr	r2, [pc, #88]	; (8003abc <Connect_Wifi+0x64>)
 8003a64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a68:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};
	char *response_buffer[3] =
 8003a6e:	4a14      	ldr	r2, [pc, #80]	; (8003ac0 <Connect_Wifi+0x68>)
 8003a70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a74:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};
	Status response_state = IDLE;
 8003a7a:	2305      	movs	r3, #5
 8003a7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003a80:	f107 0008 	add.w	r0, r7, #8
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <Connect_Wifi+0x6c>)
 8003a8c:	490e      	ldr	r1, [pc, #56]	; (8003ac8 <Connect_Wifi+0x70>)
 8003a8e:	f01c fd77 	bl	8020580 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003a92:	f107 0308 	add.w	r3, r7, #8
 8003a96:	653b      	str	r3, [r7, #80]	; 0x50

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003a98:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003a9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f82e 	bl	8003b04 <Command_Process>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	return response_state;
 8003aae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3758      	adds	r7, #88	; 0x58
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	080230ec 	.word	0x080230ec
 8003ac0:	080230f8 	.word	0x080230f8
 8003ac4:	080230d0 	.word	0x080230d0
 8003ac8:	080230dc 	.word	0x080230dc

08003acc <Disconnect_Wifi>:

Status Disconnect_Wifi(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
	char *command_buffer[1] = { AT_CWQAP };
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <Disconnect_Wifi+0x30>)
 8003ad4:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <Disconnect_Wifi+0x34>)
 8003ad8:	607b      	str	r3, [r7, #4]

	Status response_state = IDLE;
 8003ada:	2305      	movs	r3, #5
 8003adc:	73fb      	strb	r3, [r7, #15]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003ade:	1d39      	adds	r1, r7, #4
 8003ae0:	f107 0308 	add.w	r3, r7, #8
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f80c 	bl	8003b04 <Command_Process>
 8003aec:	4603      	mov	r3, r0
 8003aee:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003af0:	7bfb      	ldrb	r3, [r7, #15]

}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	08023090 	.word	0x08023090
 8003b00:	080230a0 	.word	0x080230a0

08003b04 <Command_Process>:

Status Command_Process(char **commandArray, char **responseArray, uint8_t numberOfCommands)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	71fb      	strb	r3, [r7, #7]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d004      	beq.n	8003b22 <Command_Process+0x1e>
 8003b18:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <Command_Process+0xfc>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	79fa      	ldrb	r2, [r7, #7]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d806      	bhi.n	8003b30 <Command_Process+0x2c>
	{
		ringBuffer_flush(rx_buffer);
 8003b22:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <Command_Process+0x100>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f9f9 	bl	8003f1e <ringBuffer_flush>
		return STATUS_ERROR;
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	e062      	b.n	8003bf6 <Command_Process+0xf2>
	}
	else
	{
		if(commandFlag)
 8003b30:	4b35      	ldr	r3, [pc, #212]	; (8003c08 <Command_Process+0x104>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00b      	beq.n	8003b50 <Command_Process+0x4c>
		{
			Send_AT_Command(commandArray[currentCommand]);
 8003b38:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <Command_Process+0xfc>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4413      	add	r3, r2
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff0b 	bl	8003960 <Send_AT_Command>
			commandFlag = 0;
 8003b4a:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <Command_Process+0x104>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
		}
//		else
//		{
			response = Wait_Response(responseArray[currentCommand], 5000);
 8003b50:	4b2b      	ldr	r3, [pc, #172]	; (8003c00 <Command_Process+0xfc>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	4413      	add	r3, r2
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff37 	bl	80039d4 <Wait_Response>
 8003b66:	4603      	mov	r3, r0
 8003b68:	75fb      	strb	r3, [r7, #23]

			if(Read_Response("ERROR"))
 8003b6a:	4828      	ldr	r0, [pc, #160]	; (8003c0c <Command_Process+0x108>)
 8003b6c:	f7ff ff20 	bl	80039b0 <Read_Response>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00c      	beq.n	8003b90 <Command_Process+0x8c>
			{
				commandFlag = 1;
 8003b76:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <Command_Process+0x104>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003b7c:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <Command_Process+0xfc>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <Command_Process+0x100>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f9c9 	bl	8003f1e <ringBuffer_flush>
				return STATUS_ERROR;
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	e032      	b.n	8003bf6 <Command_Process+0xf2>
			}
			else if(response == IDLE)
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	d101      	bne.n	8003b9a <Command_Process+0x96>
			{
				return response;
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
 8003b98:	e02d      	b.n	8003bf6 <Command_Process+0xf2>
			}
			else if(response == FOUND)
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d123      	bne.n	8003be8 <Command_Process+0xe4>
			{
				if(currentCommand == (numberOfCommands-1))
 8003ba0:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <Command_Process+0xfc>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d10c      	bne.n	8003bc8 <Command_Process+0xc4>
				{
					commandFlag = 1;
 8003bae:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <Command_Process+0x104>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003bb4:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <Command_Process+0xfc>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003bba:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <Command_Process+0x100>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 f9ad 	bl	8003f1e <ringBuffer_flush>
					return STATUS_OK;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e016      	b.n	8003bf6 <Command_Process+0xf2>
				}
				else
				{
					commandFlag = 1;
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <Command_Process+0x104>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <Command_Process+0xfc>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <Command_Process+0xfc>)
 8003bd8:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <Command_Process+0x100>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f99d 	bl	8003f1e <ringBuffer_flush>
					return response;
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	e006      	b.n	8003bf6 <Command_Process+0xf2>
				}

			}
			else
			{
				commandFlag = 1;
 8003be8:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <Command_Process+0x104>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003bee:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <Command_Process+0xfc>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
				return response;
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
			}
//		}
	}


}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000374 	.word	0x20000374
 8003c04:	20000498 	.word	0x20000498
 8003c08:	20000010 	.word	0x20000010
 8003c0c:	08023104 	.word	0x08023104

08003c10 <Connect_TCP_Server>:

Status Connect_TCP_Server(char* ip, char* port)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b0a4      	sub	sp, #144	; 0x90
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
	Status response_state = IDLE;
 8003c1a:	2305      	movs	r3, #5
 8003c1c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	char *command_buffer[3] =
 8003c20:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <Connect_TCP_Server+0x64>)
 8003c22:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c26:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		AT_CIPCLOSE,
		AT_CIPMUX_SINGLE,
		""
	};

	char *response_buffer[3] =
 8003c2c:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <Connect_TCP_Server+0x68>)
 8003c2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003c32:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		AT_RESPONSE_OK
	};

	char wifi_buffer[100];

	sprintf(wifi_buffer,"%s\"%s\",%s\r\n",AT_CIPSTART_TCP,ip,port);
 8003c38:	f107 0008 	add.w	r0, r7, #8
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a0e      	ldr	r2, [pc, #56]	; (8003c7c <Connect_TCP_Server+0x6c>)
 8003c44:	490e      	ldr	r1, [pc, #56]	; (8003c80 <Connect_TCP_Server+0x70>)
 8003c46:	f01c fc9b 	bl	8020580 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003c52:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003c56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ff51 	bl	8003b04 <Command_Process>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	return response_state;
 8003c68:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3788      	adds	r7, #136	; 0x88
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	0802312c 	.word	0x0802312c
 8003c78:	080230f8 	.word	0x080230f8
 8003c7c:	0802310c 	.word	0x0802310c
 8003c80:	08023120 	.word	0x08023120

08003c84 <Disconnect_TCP_Server>:

Status Disconnect_TCP_Server(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
	Status response_state = IDLE;
 8003c8a:	2305      	movs	r3, #5
 8003c8c:	73fb      	strb	r3, [r7, #15]

	char *command_buffer[1] = { AT_CIPCLOSE };
 8003c8e:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <Disconnect_TCP_Server+0x30>)
 8003c90:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003c92:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <Disconnect_TCP_Server+0x34>)
 8003c94:	607b      	str	r3, [r7, #4]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003c96:	1d39      	adds	r1, r7, #4
 8003c98:	f107 0308 	add.w	r3, r7, #8
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff ff30 	bl	8003b04 <Command_Process>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]

}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	080230a4 	.word	0x080230a4
 8003cb8:	080230a0 	.word	0x080230a0

08003cbc <Send_TCP_Message>:

Status Send_TCP_Message(char* message)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b096      	sub	sp, #88	; 0x58
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	Status response_state = STATUS_ERROR;
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint32_t length=0;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	653b      	str	r3, [r7, #80]	; 0x50

	length = strlen(message);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fc fab4 	bl	800023c <strlen>
 8003cd4:	6538      	str	r0, [r7, #80]	; 0x50

	char cipSendBuffer[50];

	sprintf(cipSendBuffer,"%s%ld\r\n",AT_CIPSEND,length);
 8003cd6:	f107 001c 	add.w	r0, r7, #28
 8003cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cdc:	4a10      	ldr	r2, [pc, #64]	; (8003d20 <Send_TCP_Message+0x64>)
 8003cde:	4911      	ldr	r1, [pc, #68]	; (8003d24 <Send_TCP_Message+0x68>)
 8003ce0:	f01c fc4e 	bl	8020580 <siprintf>

	char *command_buffer[2];

	command_buffer[0] = cipSendBuffer;
 8003ce4:	f107 031c 	add.w	r3, r7, #28
 8003ce8:	617b      	str	r3, [r7, #20]
	command_buffer[1] = message;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	61bb      	str	r3, [r7, #24]

	char *response_buffer[2] =
 8003cee:	4a0e      	ldr	r2, [pc, #56]	; (8003d28 <Send_TCP_Message+0x6c>)
 8003cf0:	f107 030c 	add.w	r3, r7, #12
 8003cf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cf8:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8003cfc:	f107 010c 	add.w	r1, r7, #12
 8003d00:	f107 0314 	add.w	r3, r7, #20
 8003d04:	2202      	movs	r2, #2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff fefc 	bl	8003b04 <Command_Process>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	return response_state;
 8003d12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3758      	adds	r7, #88	; 0x58
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	08023138 	.word	0x08023138
 8003d24:	08023144 	.word	0x08023144
 8003d28:	0802314c 	.word	0x0802314c

08003d2c <Read_TCP_Message>:

Status Read_TCP_Message(char* receivedMessage)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8003d34:	2305      	movs	r3, #5
 8003d36:	76fb      	strb	r3, [r7, #27]

	char *substring = strstr((char*)rx_buffer->buffer,"+IPD,");
 8003d38:	4b2c      	ldr	r3, [pc, #176]	; (8003dec <Read_TCP_Message+0xc0>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	492c      	ldr	r1, [pc, #176]	; (8003df0 <Read_TCP_Message+0xc4>)
 8003d40:	4618      	mov	r0, r3
 8003d42:	f01d f9df 	bl	8021104 <strstr>
 8003d46:	6178      	str	r0, [r7, #20]

	char messageLengthString[3];

	uint32_t messageLength=0,index=0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24


	if(substring != NULL)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d045      	beq.n	8003de2 <Read_TCP_Message+0xb6>
	{
		for(uint8_t i=0;i<3;i++)
 8003d56:	2300      	movs	r3, #0
 8003d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5c:	e01c      	b.n	8003d98 <Read_TCP_Message+0x6c>
		{
			if(*(substring+5+i) == ':')
 8003d5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d62:	3305      	adds	r3, #5
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4413      	add	r3, r2
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b3a      	cmp	r3, #58	; 0x3a
 8003d6c:	d019      	beq.n	8003da2 <Read_TCP_Message+0x76>
				break;
			messageLengthString[i] = *(substring+5+i);
 8003d6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d72:	3305      	adds	r3, #5
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	441a      	add	r2, r3
 8003d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d7c:	7812      	ldrb	r2, [r2, #0]
 8003d7e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003d82:	440b      	add	r3, r1
 8003d84:	f803 2c1c 	strb.w	r2, [r3, #-28]
			index += 1;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
		for(uint8_t i=0;i<3;i++)
 8003d8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d92:	3301      	adds	r3, #1
 8003d94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d9de      	bls.n	8003d5e <Read_TCP_Message+0x32>
 8003da0:	e000      	b.n	8003da4 <Read_TCP_Message+0x78>
				break;
 8003da2:	bf00      	nop

		}

		messageLength = atoi(messageLengthString);
 8003da4:	f107 030c 	add.w	r3, r7, #12
 8003da8:	4618      	mov	r0, r3
 8003daa:	f01b fc4a 	bl	801f642 <atoi>
 8003dae:	4603      	mov	r3, r0
 8003db0:	613b      	str	r3, [r7, #16]

		for(uint32_t i=0;i<=messageLength+1;i++)
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	e00d      	b.n	8003dd4 <Read_TCP_Message+0xa8>
		{
			receivedMessage[i] = *(substring+6+index+i);
 8003db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3306      	adds	r3, #6
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	441a      	add	r2, r3
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	440b      	add	r3, r1
 8003dca:	7812      	ldrb	r2, [r2, #0]
 8003dcc:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=0;i<=messageLength+1;i++)
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d9ec      	bls.n	8003db8 <Read_TCP_Message+0x8c>
		}

		return STATUS_OK;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e000      	b.n	8003de4 <Read_TCP_Message+0xb8>


	}
	else
		return STATUS_ERROR;
 8003de2:	2304      	movs	r3, #4

	return response_state;
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3728      	adds	r7, #40	; 0x28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20000498 	.word	0x20000498
 8003df0:	08023154 	.word	0x08023154

08003df4 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003dfc:	2010      	movs	r0, #16
 8003dfe:	f01c f9ed 	bl	80201dc <malloc>
 8003e02:	4603      	mov	r3, r0
 8003e04:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e017      	b.n	8003e40 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003e22:	2101      	movs	r1, #1
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f01b fc11 	bl	801f64c <calloc>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e000      	b.n	8003e40 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00b      	beq.n	8003e6e <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d004      	beq.n	8003e68 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f01c f9c2 	bl	80201ec <free>
		}
		free(buffer);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f01c f9bf 	bl	80201ec <free>
	}
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d00c      	beq.n	8003eaa <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4413      	add	r3, r2
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003ea8:	e009      	b.n	8003ebe <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	78fa      	ldrb	r2, [r7, #3]
 8003eb6:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d00d      	beq.n	8003efc <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	4413      	add	r3, r2
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	605a      	str	r2, [r3, #4]
		return data;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	e00a      	b.n	8003f12 <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	605a      	str	r2, [r3, #4]
		return data;
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68d8      	ldr	r0, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	2100      	movs	r1, #0
 8003f32:	f01c f971 	bl	8020218 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	605a      	str	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	601a      	str	r2, [r3, #0]
}
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	e00a      	b.n	8003f72 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	4413      	add	r3, r2
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	4619      	mov	r1, r3
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff ff85 	bl	8003e76 <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	6838      	ldr	r0, [r7, #0]
 8003f74:	f7fc f962 	bl	800023c <strlen>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d8ed      	bhi.n	8003f5c <ringBuffer_pushArray+0x10>
}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * 			0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	6839      	ldr	r1, [r7, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f01d f8b2 	bl	8021104 <strstr>
 8003fa0:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <ringBuffer_lookFor+0x22>
		return 1;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <ringBuffer_lookFor+0x24>
	else
		return 0;
 8003fac:	2300      	movs	r3, #0

}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
	...

08003fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fd6:	f7fc ffca 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fda:	f000 f81d 	bl	8004018 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fde:	f000 f951 	bl	8004284 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003fe2:	f000 f891 	bl	8004108 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003fe6:	f000 f8ed 	bl	80041c4 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003fea:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <main+0x44>)
 8003fec:	463b      	mov	r3, r7
 8003fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ff2:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8003ff6:	463b      	mov	r3, r7
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	2002      	movs	r0, #2
 8003ffc:	f004 fb98 	bl	8008730 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8004000:	2120      	movs	r1, #32
 8004002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004006:	f7fd fbaf 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800400a:	2064      	movs	r0, #100	; 0x64
 800400c:	f7fd f820 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8004010:	e7f6      	b.n	8004000 <main+0x30>
 8004012:	bf00      	nop
 8004014:	08023164 	.word	0x08023164

08004018 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b0a8      	sub	sp, #160	; 0xa0
 800401c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800401e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004022:	2238      	movs	r2, #56	; 0x38
 8004024:	2100      	movs	r1, #0
 8004026:	4618      	mov	r0, r3
 8004028:	f01c f8f6 	bl	8020218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800402c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800403c:	463b      	mov	r3, r7
 800403e:	2254      	movs	r2, #84	; 0x54
 8004040:	2100      	movs	r1, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f01c f8e8 	bl	8020218 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004048:	2000      	movs	r0, #0
 800404a:	f7fd fbcb 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800404e:	2302      	movs	r3, #2
 8004050:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004056:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004058:	2340      	movs	r3, #64	; 0x40
 800405a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800405c:	2302      	movs	r3, #2
 800405e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004062:	2302      	movs	r3, #2
 8004064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004068:	2304      	movs	r3, #4
 800406a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800406e:	2355      	movs	r3, #85	; 0x55
 8004070:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004074:	2302      	movs	r3, #2
 8004076:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800407a:	2302      	movs	r3, #2
 800407c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004080:	2302      	movs	r3, #2
 8004082:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004086:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800408a:	4618      	mov	r0, r3
 800408c:	f7fd fc5e 	bl	800194c <HAL_RCC_OscConfig>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf14      	ite	ne
 8004096:	2301      	movne	r3, #1
 8004098:	2300      	moveq	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 80040a0:	f000 f960 	bl	8004364 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040a4:	230f      	movs	r3, #15
 80040a6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040a8:	2303      	movs	r3, #3
 80040aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040ac:	2300      	movs	r3, #0
 80040ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80040b0:	2300      	movs	r3, #0
 80040b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040b4:	2300      	movs	r3, #0
 80040b6:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80040b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040bc:	2104      	movs	r1, #4
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fd ff5c 	bl	8001f7c <HAL_RCC_ClockConfig>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bf14      	ite	ne
 80040ca:	2301      	movne	r3, #1
 80040cc:	2300      	moveq	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 80040d4:	f000 f946 	bl	8004364 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 80040d8:	2321      	movs	r3, #33	; 0x21
 80040da:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80040dc:	2300      	movs	r3, #0
 80040de:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040e4:	463b      	mov	r3, r7
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fe f964 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf14      	ite	ne
 80040f2:	2301      	movne	r3, #1
 80040f4:	2300      	moveq	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 80040fc:	f000 f932 	bl	8004364 <Error_Handler>
  }
}
 8004100:	bf00      	nop
 8004102:	37a0      	adds	r7, #160	; 0xa0
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800410c:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800410e:	4a2c      	ldr	r2, [pc, #176]	; (80041c0 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8004110:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8004112:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004118:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800411a:	4b28      	ldr	r3, [pc, #160]	; (80041bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800411c:	2200      	movs	r2, #0
 800411e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004120:	4b26      	ldr	r3, [pc, #152]	; (80041bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004122:	2200      	movs	r2, #0
 8004124:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004126:	4b25      	ldr	r3, [pc, #148]	; (80041bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004128:	2200      	movs	r2, #0
 800412a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800412c:	4b23      	ldr	r3, [pc, #140]	; (80041bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800412e:	220c      	movs	r2, #12
 8004130:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004132:	4b22      	ldr	r3, [pc, #136]	; (80041bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004134:	2200      	movs	r2, #0
 8004136:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004138:	4b20      	ldr	r3, [pc, #128]	; (80041bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800413a:	2200      	movs	r2, #0
 800413c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800413e:	4b1f      	ldr	r3, [pc, #124]	; (80041bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004140:	2200      	movs	r2, #0
 8004142:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004144:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004146:	2200      	movs	r2, #0
 8004148:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800414a:	481c      	ldr	r0, [pc, #112]	; (80041bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800414c:	f7fe fb7e 	bl	800284c <HAL_UART_Init>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	bf14      	ite	ne
 8004156:	2301      	movne	r3, #1
 8004158:	2300      	moveq	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8004160:	f000 f900 	bl	8004364 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004164:	2100      	movs	r1, #0
 8004166:	4815      	ldr	r0, [pc, #84]	; (80041bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004168:	f7ff fb04 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	bf14      	ite	ne
 8004172:	2301      	movne	r3, #1
 8004174:	2300      	moveq	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 800417c:	f000 f8f2 	bl	8004364 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004180:	2100      	movs	r1, #0
 8004182:	480e      	ldr	r0, [pc, #56]	; (80041bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004184:	f7ff fb34 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	bf14      	ite	ne
 800418e:	2301      	movne	r3, #1
 8004190:	2300      	moveq	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8004198:	f000 f8e4 	bl	8004364 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800419c:	4807      	ldr	r0, [pc, #28]	; (80041bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800419e:	f7ff fab0 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf14      	ite	ne
 80041a8:	2301      	movne	r3, #1
 80041aa:	2300      	moveq	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 80041b2:	f000 f8d7 	bl	8004364 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000378 	.word	0x20000378
 80041c0:	40008000 	.word	0x40008000

080041c4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80041c8:	4b2c      	ldr	r3, [pc, #176]	; (800427c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80041ca:	4a2d      	ldr	r2, [pc, #180]	; (8004280 <_ZL19MX_USART1_UART_Initv+0xbc>)
 80041cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80041ce:	4b2b      	ldr	r3, [pc, #172]	; (800427c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80041d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041d6:	4b29      	ldr	r3, [pc, #164]	; (800427c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80041d8:	2200      	movs	r2, #0
 80041da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041dc:	4b27      	ldr	r3, [pc, #156]	; (800427c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80041de:	2200      	movs	r2, #0
 80041e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041e2:	4b26      	ldr	r3, [pc, #152]	; (800427c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041e8:	4b24      	ldr	r3, [pc, #144]	; (800427c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80041ea:	220c      	movs	r2, #12
 80041ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ee:	4b23      	ldr	r3, [pc, #140]	; (800427c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041f4:	4b21      	ldr	r3, [pc, #132]	; (800427c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004200:	4b1e      	ldr	r3, [pc, #120]	; (800427c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004202:	2200      	movs	r2, #0
 8004204:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004206:	4b1d      	ldr	r3, [pc, #116]	; (800427c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004208:	2200      	movs	r2, #0
 800420a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800420c:	481b      	ldr	r0, [pc, #108]	; (800427c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800420e:	f7fe fb1d 	bl	800284c <HAL_UART_Init>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	bf14      	ite	ne
 8004218:	2301      	movne	r3, #1
 800421a:	2300      	moveq	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8004222:	f000 f89f 	bl	8004364 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004226:	2100      	movs	r1, #0
 8004228:	4814      	ldr	r0, [pc, #80]	; (800427c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800422a:	f7ff faa3 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	bf14      	ite	ne
 8004234:	2301      	movne	r3, #1
 8004236:	2300      	moveq	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800423e:	f000 f891 	bl	8004364 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004242:	2100      	movs	r1, #0
 8004244:	480d      	ldr	r0, [pc, #52]	; (800427c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004246:	f7ff fad3 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800425a:	f000 f883 	bl	8004364 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800425e:	4807      	ldr	r0, [pc, #28]	; (800427c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004260:	f7ff fa4f 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	bf14      	ite	ne
 800426a:	2301      	movne	r3, #1
 800426c:	2300      	moveq	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8004274:	f000 f876 	bl	8004364 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004278:	bf00      	nop
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000408 	.word	0x20000408
 8004280:	40013800 	.word	0x40013800

08004284 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08a      	sub	sp, #40	; 0x28
 8004288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800428a:	f107 0314 	add.w	r3, r7, #20
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	605a      	str	r2, [r3, #4]
 8004294:	609a      	str	r2, [r3, #8]
 8004296:	60da      	str	r2, [r3, #12]
 8004298:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800429a:	4b2f      	ldr	r3, [pc, #188]	; (8004358 <_ZL12MX_GPIO_Initv+0xd4>)
 800429c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429e:	4a2e      	ldr	r2, [pc, #184]	; (8004358 <_ZL12MX_GPIO_Initv+0xd4>)
 80042a0:	f043 0304 	orr.w	r3, r3, #4
 80042a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042a6:	4b2c      	ldr	r3, [pc, #176]	; (8004358 <_ZL12MX_GPIO_Initv+0xd4>)
 80042a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80042b2:	4b29      	ldr	r3, [pc, #164]	; (8004358 <_ZL12MX_GPIO_Initv+0xd4>)
 80042b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b6:	4a28      	ldr	r2, [pc, #160]	; (8004358 <_ZL12MX_GPIO_Initv+0xd4>)
 80042b8:	f043 0320 	orr.w	r3, r3, #32
 80042bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042be:	4b26      	ldr	r3, [pc, #152]	; (8004358 <_ZL12MX_GPIO_Initv+0xd4>)
 80042c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ca:	4b23      	ldr	r3, [pc, #140]	; (8004358 <_ZL12MX_GPIO_Initv+0xd4>)
 80042cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ce:	4a22      	ldr	r2, [pc, #136]	; (8004358 <_ZL12MX_GPIO_Initv+0xd4>)
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042d6:	4b20      	ldr	r3, [pc, #128]	; (8004358 <_ZL12MX_GPIO_Initv+0xd4>)
 80042d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042e2:	4b1d      	ldr	r3, [pc, #116]	; (8004358 <_ZL12MX_GPIO_Initv+0xd4>)
 80042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e6:	4a1c      	ldr	r2, [pc, #112]	; (8004358 <_ZL12MX_GPIO_Initv+0xd4>)
 80042e8:	f043 0302 	orr.w	r3, r3, #2
 80042ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042ee:	4b1a      	ldr	r3, [pc, #104]	; (8004358 <_ZL12MX_GPIO_Initv+0xd4>)
 80042f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	607b      	str	r3, [r7, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80042fa:	2200      	movs	r2, #0
 80042fc:	2120      	movs	r1, #32
 80042fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004302:	f7fd fa19 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800430a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800430c:	4b13      	ldr	r3, [pc, #76]	; (800435c <_ZL12MX_GPIO_Initv+0xd8>)
 800430e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004310:	2300      	movs	r3, #0
 8004312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004314:	f107 0314 	add.w	r3, r7, #20
 8004318:	4619      	mov	r1, r3
 800431a:	4811      	ldr	r0, [pc, #68]	; (8004360 <_ZL12MX_GPIO_Initv+0xdc>)
 800431c:	f7fd f88a 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004320:	2320      	movs	r3, #32
 8004322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004324:	2301      	movs	r3, #1
 8004326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004328:	2300      	movs	r3, #0
 800432a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800432c:	2300      	movs	r3, #0
 800432e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004330:	f107 0314 	add.w	r3, r7, #20
 8004334:	4619      	mov	r1, r3
 8004336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800433a:	f7fd f87b 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800433e:	2200      	movs	r2, #0
 8004340:	2100      	movs	r1, #0
 8004342:	2028      	movs	r0, #40	; 0x28
 8004344:	f7fc ff81 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004348:	2028      	movs	r0, #40	; 0x28
 800434a:	f7fc ff98 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 800434e:	bf00      	nop
 8004350:	3728      	adds	r7, #40	; 0x28
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000
 800435c:	10110000 	.word	0x10110000
 8004360:	48000800 	.word	0x48000800

08004364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004368:	b672      	cpsid	i
}
 800436a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800436c:	e7fe      	b.n	800436c <Error_Handler+0x8>

0800436e <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8004376:	2032      	movs	r0, #50	; 0x32
 8004378:	f7ff fd3c 	bl	8003df4 <ringBuffer_init>
 800437c:	4602      	mov	r2, r0
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	605a      	str	r2, [r3, #4]

	}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff fd56 	bl	8003e48 <ringBuffer_deInit>
	}
 800439c:	bf00      	nop
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f00f fe5c 	bl	801406c <_ZN5UtestC1Ev>
 80043b4:	4a03      	ldr	r2, [pc, #12]	; (80043c4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	08027a34 	.word	0x08027a34

080043c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	4a05      	ldr	r2, [pc, #20]	; (80043e8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4618      	mov	r0, r3
 80043da:	f00f fe57 	bl	801408c <_ZN5UtestD1Ev>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	08027a34 	.word	0x08027a34

080043ec <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff ffe7 	bl	80043c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80043fa:	2108      	movs	r1, #8
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f005 fe79 	bl	800a0f4 <_ZdlPvj>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	605a      	str	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff ffbe 	bl	80043a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004428:	4a03      	ldr	r2, [pc, #12]	; (8004438 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	08027a14 	.word	0x08027a14

0800443c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 800443c:	b590      	push	{r4, r7, lr}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	2224      	movs	r2, #36	; 0x24
 8004446:	4906      	ldr	r1, [pc, #24]	; (8004460 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8004448:	2008      	movs	r0, #8
 800444a:	f005 fe3f 	bl	800a0cc <_ZnwjPKci>
 800444e:	4604      	mov	r4, r0
 8004450:	4620      	mov	r0, r4
 8004452:	f7ff ffdb 	bl	800440c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 8004456:	4623      	mov	r3, r4
 8004458:	4618      	mov	r0, r3
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	bd90      	pop	{r4, r7, pc}
 8004460:	080231f4 	.word	0x080231f4

08004464 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4618      	mov	r0, r3
 8004470:	f00e fa1a 	bl	80128a8 <_ZN10UtestShellC1Ev>
 8004474:	4a03      	ldr	r2, [pc, #12]	; (8004484 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	08027968 	.word	0x08027968

08004488 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8004488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800448a:	b087      	sub	sp, #28
 800448c:	af04      	add	r7, sp, #16
 800448e:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8004490:	f00f fdc2 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8004494:	4604      	mov	r4, r0
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	3338      	adds	r3, #56	; 0x38
 800449a:	681d      	ldr	r5, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	461e      	mov	r6, r3
 80044a4:	f00f fdc8 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80044a8:	4603      	mov	r3, r0
 80044aa:	9302      	str	r3, [sp, #8]
 80044ac:	2327      	movs	r3, #39	; 0x27
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	4b2a      	ldr	r3, [pc, #168]	; (800455c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	4b2a      	ldr	r3, [pc, #168]	; (8004560 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 80044b6:	4632      	mov	r2, r6
 80044b8:	2132      	movs	r1, #50	; 0x32
 80044ba:	4620      	mov	r0, r4
 80044bc:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 80044be:	f00f fdab 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 80044c2:	4604      	mov	r4, r0
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	3320      	adds	r3, #32
 80044c8:	681d      	ldr	r5, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bf14      	ite	ne
 80044d4:	2301      	movne	r3, #1
 80044d6:	2300      	moveq	r3, #0
 80044d8:	b2de      	uxtb	r6, r3
 80044da:	f00f fdad 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80044de:	4603      	mov	r3, r0
 80044e0:	9303      	str	r3, [sp, #12]
 80044e2:	2328      	movs	r3, #40	; 0x28
 80044e4:	9302      	str	r3, [sp, #8]
 80044e6:	4b1d      	ldr	r3, [pc, #116]	; (800455c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80044e8:	9301      	str	r3, [sp, #4]
 80044ea:	2300      	movs	r3, #0
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	4b1d      	ldr	r3, [pc, #116]	; (8004564 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 80044f0:	4a1d      	ldr	r2, [pc, #116]	; (8004568 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 80044f2:	4631      	mov	r1, r6
 80044f4:	4620      	mov	r0, r4
 80044f6:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 80044f8:	f00f fd8e 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 80044fc:	4604      	mov	r4, r0
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	3338      	adds	r3, #56	; 0x38
 8004502:	681d      	ldr	r5, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	461e      	mov	r6, r3
 800450c:	f00f fd94 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004510:	4603      	mov	r3, r0
 8004512:	9302      	str	r3, [sp, #8]
 8004514:	2329      	movs	r3, #41	; 0x29
 8004516:	9301      	str	r3, [sp, #4]
 8004518:	4b10      	ldr	r3, [pc, #64]	; (800455c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	4b13      	ldr	r3, [pc, #76]	; (800456c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 800451e:	4632      	mov	r2, r6
 8004520:	2100      	movs	r1, #0
 8004522:	4620      	mov	r0, r4
 8004524:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 8004526:	f00f fd77 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 800452a:	4604      	mov	r4, r0
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	3338      	adds	r3, #56	; 0x38
 8004530:	681d      	ldr	r5, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	461e      	mov	r6, r3
 800453a:	f00f fd7d 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800453e:	4603      	mov	r3, r0
 8004540:	9302      	str	r3, [sp, #8]
 8004542:	232a      	movs	r3, #42	; 0x2a
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 800454c:	4632      	mov	r2, r6
 800454e:	2100      	movs	r1, #0
 8004550:	4620      	mov	r0, r4
 8004552:	47a8      	blx	r5

}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455c:	080231f4 	.word	0x080231f4
 8004560:	08023208 	.word	0x08023208
 8004564:	08023230 	.word	0x08023230
 8004568:	08023248 	.word	0x08023248
 800456c:	08023250 	.word	0x08023250
 8004570:	08023278 	.word	0x08023278

08004574 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	605a      	str	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff ff0a 	bl	80043a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004590:	4a03      	ldr	r2, [pc, #12]	; (80045a0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	08027948 	.word	0x08027948

080045a4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	222e      	movs	r2, #46	; 0x2e
 80045ae:	4906      	ldr	r1, [pc, #24]	; (80045c8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 80045b0:	2008      	movs	r0, #8
 80045b2:	f005 fd8b 	bl	800a0cc <_ZnwjPKci>
 80045b6:	4604      	mov	r4, r0
 80045b8:	4620      	mov	r0, r4
 80045ba:	f7ff ffdb 	bl	8004574 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 80045be:	4623      	mov	r3, r4
 80045c0:	4618      	mov	r0, r3
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd90      	pop	{r4, r7, pc}
 80045c8:	080231f4 	.word	0x080231f4

080045cc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f00e f966 	bl	80128a8 <_ZN10UtestShellC1Ev>
 80045dc:	4a03      	ldr	r2, [pc, #12]	; (80045ec <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	0802789c 	.word	0x0802789c

080045f0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 80045f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af04      	add	r7, sp, #16
 80045f6:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2145      	movs	r1, #69	; 0x45
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fc39 	bl	8003e76 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8004604:	f00f fd08 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8004608:	4604      	mov	r4, r0
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	3338      	adds	r3, #56	; 0x38
 800460e:	681d      	ldr	r5, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	461e      	mov	r6, r3
 800461a:	f00f fd0d 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800461e:	4603      	mov	r3, r0
 8004620:	9302      	str	r3, [sp, #8]
 8004622:	2331      	movs	r3, #49	; 0x31
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	4b15      	ldr	r3, [pc, #84]	; (800467c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	4b15      	ldr	r3, [pc, #84]	; (8004680 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 800462c:	4632      	mov	r2, r6
 800462e:	2145      	movs	r1, #69	; 0x45
 8004630:	4620      	mov	r0, r4
 8004632:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2110      	movs	r1, #16
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fc1b 	bl	8003e76 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8004640:	f00f fcea 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8004644:	4604      	mov	r4, r0
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	3338      	adds	r3, #56	; 0x38
 800464a:	681d      	ldr	r5, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	3301      	adds	r3, #1
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	461e      	mov	r6, r3
 8004658:	f00f fcee 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800465c:	4603      	mov	r3, r0
 800465e:	9302      	str	r3, [sp, #8]
 8004660:	2334      	movs	r3, #52	; 0x34
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 800466a:	4632      	mov	r2, r6
 800466c:	2110      	movs	r1, #16
 800466e:	4620      	mov	r0, r4
 8004670:	47a8      	blx	r5

}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800467a:	bf00      	nop
 800467c:	080231f4 	.word	0x080231f4
 8004680:	080232a0 	.word	0x080232a0
 8004684:	080232d0 	.word	0x080232d0

08004688 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	605a      	str	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff fe80 	bl	80043a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80046a4:	4a03      	ldr	r2, [pc, #12]	; (80046b4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	0802787c 	.word	0x0802787c

080046b8 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	2238      	movs	r2, #56	; 0x38
 80046c2:	4906      	ldr	r1, [pc, #24]	; (80046dc <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 80046c4:	2008      	movs	r0, #8
 80046c6:	f005 fd01 	bl	800a0cc <_ZnwjPKci>
 80046ca:	4604      	mov	r4, r0
 80046cc:	4620      	mov	r0, r4
 80046ce:	f7ff ffdb 	bl	8004688 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 80046d2:	4623      	mov	r3, r4
 80046d4:	4618      	mov	r0, r3
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd90      	pop	{r4, r7, pc}
 80046dc:	080231f4 	.word	0x080231f4

080046e0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f00e f8dc 	bl	80128a8 <_ZN10UtestShellC1Ev>
 80046f0:	4a03      	ldr	r2, [pc, #12]	; (8004700 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	080277d0 	.word	0x080277d0

08004704 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 8004704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004706:	b089      	sub	sp, #36	; 0x24
 8004708:	af04      	add	r7, sp, #16
 800470a:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	3b01      	subs	r3, #1
 8004722:	429a      	cmp	r2, r3
 8004724:	bf0c      	ite	eq
 8004726:	2301      	moveq	r3, #1
 8004728:	2300      	movne	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4293      	cmp	r3, r2
 8004732:	da0b      	bge.n	800474c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	4611      	mov	r1, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fb99 	bl	8003e76 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3301      	adds	r3, #1
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	e7e3      	b.n	8004714 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	21ff      	movs	r1, #255	; 0xff
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff fb8f 	bl	8003e76 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 8004758:	f00f fc5e 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 800475c:	4604      	mov	r4, r0
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	3338      	adds	r3, #56	; 0x38
 8004762:	681d      	ldr	r5, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	461e      	mov	r6, r3
 800476e:	f00f fc63 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004772:	4603      	mov	r3, r0
 8004774:	9302      	str	r3, [sp, #8]
 8004776:	2340      	movs	r3, #64	; 0x40
 8004778:	9301      	str	r3, [sp, #4]
 800477a:	4b05      	ldr	r3, [pc, #20]	; (8004790 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 8004780:	4632      	mov	r2, r6
 8004782:	21ff      	movs	r1, #255	; 0xff
 8004784:	4620      	mov	r0, r4
 8004786:	47a8      	blx	r5
}
 8004788:	bf00      	nop
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004790:	080231f4 	.word	0x080231f4
 8004794:	08023300 	.word	0x08023300

08004798 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	605a      	str	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fdf8 	bl	80043a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80047b4:	4a03      	ldr	r2, [pc, #12]	; (80047c4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	080277b0 	.word	0x080277b0

080047c8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 80047c8:	b590      	push	{r4, r7, lr}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	2243      	movs	r2, #67	; 0x43
 80047d2:	4906      	ldr	r1, [pc, #24]	; (80047ec <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 80047d4:	2008      	movs	r0, #8
 80047d6:	f005 fc79 	bl	800a0cc <_ZnwjPKci>
 80047da:	4604      	mov	r4, r0
 80047dc:	4620      	mov	r0, r4
 80047de:	f7ff ffdb 	bl	8004798 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 80047e2:	4623      	mov	r3, r4
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd90      	pop	{r4, r7, pc}
 80047ec:	080231f4 	.word	0x080231f4

080047f0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f00e f854 	bl	80128a8 <_ZN10UtestShellC1Ev>
 8004800:	4a03      	ldr	r2, [pc, #12]	; (8004810 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	08027704 	.word	0x08027704

08004814 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 8004814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004816:	b089      	sub	sp, #36	; 0x24
 8004818:	af04      	add	r7, sp, #16
 800481a:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	21ff      	movs	r1, #255	; 0xff
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff fb27 	bl	8003e76 <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff fb4c 	bl	8003eca <ringBuffer_pop>
 8004832:	4603      	mov	r3, r0
 8004834:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 8004836:	f00f fbef 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 800483a:	4604      	mov	r4, r0
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	3338      	adds	r3, #56	; 0x38
 8004840:	681d      	ldr	r5, [r3, #0]
 8004842:	7bfe      	ldrb	r6, [r7, #15]
 8004844:	f00f fbf8 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004848:	4603      	mov	r3, r0
 800484a:	9302      	str	r3, [sp, #8]
 800484c:	2348      	movs	r3, #72	; 0x48
 800484e:	9301      	str	r3, [sp, #4]
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	4b05      	ldr	r3, [pc, #20]	; (800486c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 8004856:	4632      	mov	r2, r6
 8004858:	21ff      	movs	r1, #255	; 0xff
 800485a:	4620      	mov	r0, r4
 800485c:	47a8      	blx	r5

}
 800485e:	bf00      	nop
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004866:	bf00      	nop
 8004868:	080231f4 	.word	0x080231f4
 800486c:	08023330 	.word	0x08023330

08004870 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	605a      	str	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fd8c 	bl	80043a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800488c:	4a03      	ldr	r2, [pc, #12]	; (800489c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	080276e4 	.word	0x080276e4

080048a0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 80048a0:	b590      	push	{r4, r7, lr}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	224c      	movs	r2, #76	; 0x4c
 80048aa:	4906      	ldr	r1, [pc, #24]	; (80048c4 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 80048ac:	2008      	movs	r0, #8
 80048ae:	f005 fc0d 	bl	800a0cc <_ZnwjPKci>
 80048b2:	4604      	mov	r4, r0
 80048b4:	4620      	mov	r0, r4
 80048b6:	f7ff ffdb 	bl	8004870 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 80048ba:	4623      	mov	r3, r4
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd90      	pop	{r4, r7, pc}
 80048c4:	080231f4 	.word	0x080231f4

080048c8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f00d ffe8 	bl	80128a8 <_ZN10UtestShellC1Ev>
 80048d8:	4a03      	ldr	r2, [pc, #12]	; (80048e8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	08027638 	.word	0x08027638

080048ec <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 80048ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ee:	b089      	sub	sp, #36	; 0x24
 80048f0:	af04      	add	r7, sp, #16
 80048f2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	21aa      	movs	r1, #170	; 0xaa
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff fab9 	bl	8003e76 <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	3b01      	subs	r3, #1
 800491a:	429a      	cmp	r2, r3
 800491c:	bf0c      	ite	eq
 800491e:	2301      	moveq	r3, #1
 8004920:	2300      	movne	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4293      	cmp	r3, r2
 800492a:	da0a      	bge.n	8004942 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff faca 	bl	8003eca <ringBuffer_pop>
 8004936:	4603      	mov	r3, r0
 8004938:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3301      	adds	r3, #1
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e7e4      	b.n	800490c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fabf 	bl	8003eca <ringBuffer_pop>
 800494c:	4603      	mov	r3, r0
 800494e:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 8004950:	f00f fb62 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8004954:	4604      	mov	r4, r0
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	3338      	adds	r3, #56	; 0x38
 800495a:	681d      	ldr	r5, [r3, #0]
 800495c:	7afe      	ldrb	r6, [r7, #11]
 800495e:	f00f fb6b 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004962:	4603      	mov	r3, r0
 8004964:	9302      	str	r3, [sp, #8]
 8004966:	2359      	movs	r3, #89	; 0x59
 8004968:	9301      	str	r3, [sp, #4]
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 8004970:	4632      	mov	r2, r6
 8004972:	21aa      	movs	r1, #170	; 0xaa
 8004974:	4620      	mov	r0, r4
 8004976:	47a8      	blx	r5
}
 8004978:	bf00      	nop
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004980:	080231f4 	.word	0x080231f4
 8004984:	08023350 	.word	0x08023350

08004988 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	605a      	str	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fd00 	bl	80043a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80049a4:	4a03      	ldr	r2, [pc, #12]	; (80049b4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	08027618 	.word	0x08027618

080049b8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 80049b8:	b590      	push	{r4, r7, lr}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	225c      	movs	r2, #92	; 0x5c
 80049c2:	4906      	ldr	r1, [pc, #24]	; (80049dc <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 80049c4:	2008      	movs	r0, #8
 80049c6:	f005 fb81 	bl	800a0cc <_ZnwjPKci>
 80049ca:	4604      	mov	r4, r0
 80049cc:	4620      	mov	r0, r4
 80049ce:	f7ff ffdb 	bl	8004988 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 80049d2:	4623      	mov	r3, r4
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd90      	pop	{r4, r7, pc}
 80049dc:	080231f4 	.word	0x080231f4

080049e0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f00d ff5c 	bl	80128a8 <_ZN10UtestShellC1Ev>
 80049f0:	4a03      	ldr	r2, [pc, #12]	; (8004a00 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4618      	mov	r0, r3
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	0802756c 	.word	0x0802756c

08004a04 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a06:	b089      	sub	sp, #36	; 0x24
 8004a08:	af04      	add	r7, sp, #16
 8004a0a:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d20b      	bcs.n	8004a34 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	4611      	mov	r1, r2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff fa25 	bl	8003e76 <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	e7ed      	b.n	8004a10 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004a34:	f00f faf0 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8004a38:	4604      	mov	r4, r0
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	3338      	adds	r3, #56	; 0x38
 8004a3e:	681d      	ldr	r5, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	4413      	add	r3, r2
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	461e      	mov	r6, r3
 8004a54:	f00f faf0 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	9302      	str	r3, [sp, #8]
 8004a5c:	2363      	movs	r3, #99	; 0x63
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	4b24      	ldr	r3, [pc, #144]	; (8004af4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8004a66:	4632      	mov	r2, r6
 8004a68:	2131      	movs	r1, #49	; 0x31
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fa53 	bl	8003f1e <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004a78:	f00f face 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	3338      	adds	r3, #56	; 0x38
 8004a82:	681d      	ldr	r5, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	3b01      	subs	r3, #1
 8004a92:	4413      	add	r3, r2
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	461e      	mov	r6, r3
 8004a98:	f00f face 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	9302      	str	r3, [sp, #8]
 8004aa0:	2367      	movs	r3, #103	; 0x67
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	4b14      	ldr	r3, [pc, #80]	; (8004afc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004aaa:	4632      	mov	r2, r6
 8004aac:	2100      	movs	r1, #0
 8004aae:	4620      	mov	r0, r4
 8004ab0:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 8004ab2:	f00f fab1 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	3338      	adds	r3, #56	; 0x38
 8004abc:	681d      	ldr	r5, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	085b      	lsrs	r3, r3, #1
 8004acc:	4413      	add	r3, r2
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	461e      	mov	r6, r3
 8004ad2:	f00f fab1 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	9302      	str	r3, [sp, #8]
 8004ada:	2368      	movs	r3, #104	; 0x68
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004ae4:	4632      	mov	r2, r6
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4620      	mov	r0, r4
 8004aea:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004aec:	bf00      	nop
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af4:	080231f4 	.word	0x080231f4
 8004af8:	08023370 	.word	0x08023370
 8004afc:	080233ac 	.word	0x080233ac
 8004b00:	080233e8 	.word	0x080233e8

08004b04 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff fc42 	bl	80043a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004b20:	4a03      	ldr	r2, [pc, #12]	; (8004b30 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	0802754c 	.word	0x0802754c

08004b34 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	2271      	movs	r2, #113	; 0x71
 8004b3e:	4906      	ldr	r1, [pc, #24]	; (8004b58 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004b40:	2008      	movs	r0, #8
 8004b42:	f005 fac3 	bl	800a0cc <_ZnwjPKci>
 8004b46:	4604      	mov	r4, r0
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f7ff ffdb 	bl	8004b04 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004b4e:	4623      	mov	r3, r4
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd90      	pop	{r4, r7, pc}
 8004b58:	080231f4 	.word	0x080231f4

08004b5c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f00d fe9e 	bl	80128a8 <_ZN10UtestShellC1Ev>
 8004b6c:	4a03      	ldr	r2, [pc, #12]	; (8004b7c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	080274a0 	.word	0x080274a0

08004b80 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af04      	add	r7, sp, #16
 8004b86:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	490e      	ldr	r1, [pc, #56]	; (8004bc8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff f9dc 	bl	8003f4c <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004b94:	f00f fa40 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8004b98:	4604      	mov	r4, r0
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	3324      	adds	r3, #36	; 0x24
 8004b9e:	681d      	ldr	r5, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	68de      	ldr	r6, [r3, #12]
 8004ba6:	f00f fa47 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004baa:	4603      	mov	r3, r0
 8004bac:	9302      	str	r3, [sp, #8]
 8004bae:	2375      	movs	r3, #117	; 0x75
 8004bb0:	9301      	str	r3, [sp, #4]
 8004bb2:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	4632      	mov	r2, r6
 8004bba:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	47a8      	blx	r5
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc8:	08023420 	.word	0x08023420
 8004bcc:	080231f4 	.word	0x080231f4

08004bd0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	605a      	str	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fbdc 	bl	80043a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004bec:	4a03      	ldr	r2, [pc, #12]	; (8004bfc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	08027480 	.word	0x08027480

08004c00 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	2278      	movs	r2, #120	; 0x78
 8004c0a:	4906      	ldr	r1, [pc, #24]	; (8004c24 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004c0c:	2008      	movs	r0, #8
 8004c0e:	f005 fa5d 	bl	800a0cc <_ZnwjPKci>
 8004c12:	4604      	mov	r4, r0
 8004c14:	4620      	mov	r0, r4
 8004c16:	f7ff ffdb 	bl	8004bd0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004c1a:	4623      	mov	r3, r4
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd90      	pop	{r4, r7, pc}
 8004c24:	080231f4 	.word	0x080231f4

08004c28 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f00d fe38 	bl	80128a8 <_ZN10UtestShellC1Ev>
 8004c38:	4a03      	ldr	r2, [pc, #12]	; (8004c48 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	080273d4 	.word	0x080273d4

08004c4c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c50:	b08a      	sub	sp, #40	; 0x28
 8004c52:	af04      	add	r7, sp, #16
 8004c54:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	494e      	ldr	r1, [pc, #312]	; (8004d94 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff f975 	bl	8003f4c <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004c62:	f00f f9d9 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8004c66:	4604      	mov	r4, r0
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	3324      	adds	r3, #36	; 0x24
 8004c6c:	681d      	ldr	r5, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	68de      	ldr	r6, [r3, #12]
 8004c74:	f00f f9e0 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	9302      	str	r3, [sp, #8]
 8004c7c:	237c      	movs	r3, #124	; 0x7c
 8004c7e:	9301      	str	r3, [sp, #4]
 8004c80:	4b45      	ldr	r3, [pc, #276]	; (8004d98 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	2300      	movs	r3, #0
 8004c86:	4632      	mov	r2, r6
 8004c88:	4942      	ldr	r1, [pc, #264]	; (8004d94 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4942      	ldr	r1, [pc, #264]	; (8004d9c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff f978 	bl	8003f8a <ringBuffer_lookFor>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	bf14      	ite	ne
 8004ca0:	2301      	movne	r3, #1
 8004ca2:	2300      	moveq	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d05c      	beq.n	8004d64 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	493b      	ldr	r1, [pc, #236]	; (8004d9c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff f96a 	bl	8003f8a <ringBuffer_lookFor>
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	4937      	ldr	r1, [pc, #220]	; (8004d9c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff f963 	bl	8003f8a <ringBuffer_lookFor>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	429c      	cmp	r4, r3
 8004cc8:	bf14      	ite	ne
 8004cca:	2301      	movne	r3, #1
 8004ccc:	2300      	moveq	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004cd4:	f00f f9a0 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8004cd8:	6803      	ldr	r3, [r0, #0]
 8004cda:	3370      	adds	r3, #112	; 0x70
 8004cdc:	681c      	ldr	r4, [r3, #0]
 8004cde:	237d      	movs	r3, #125	; 0x7d
 8004ce0:	4a2d      	ldr	r2, [pc, #180]	; (8004d98 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004ce2:	492f      	ldr	r1, [pc, #188]	; (8004da0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004ce4:	47a0      	blx	r4
 8004ce6:	f00f f997 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8004cea:	4604      	mov	r4, r0
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	3358      	adds	r3, #88	; 0x58
 8004cf0:	681d      	ldr	r5, [r3, #0]
 8004cf2:	f107 0308 	add.w	r3, r7, #8
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f008 fc29 	bl	800d550 <_Z10StringFromi>
 8004cfe:	f107 0308 	add.w	r3, r7, #8
 8004d02:	4618      	mov	r0, r3
 8004d04:	f008 f930 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8004d08:	4606      	mov	r6, r0
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4923      	ldr	r1, [pc, #140]	; (8004d9c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff f93a 	bl	8003f8a <ringBuffer_lookFor>
 8004d16:	4602      	mov	r2, r0
 8004d18:	f107 0310 	add.w	r3, r7, #16
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f008 fe90 	bl	800da44 <_Z10StringFromm>
 8004d24:	f107 0310 	add.w	r3, r7, #16
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f008 f91d 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8004d2e:	4680      	mov	r8, r0
 8004d30:	f00f f982 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d34:	4603      	mov	r3, r0
 8004d36:	9303      	str	r3, [sp, #12]
 8004d38:	237d      	movs	r3, #125	; 0x7d
 8004d3a:	9302      	str	r3, [sp, #8]
 8004d3c:	4b16      	ldr	r3, [pc, #88]	; (8004d98 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	2300      	movs	r3, #0
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	4643      	mov	r3, r8
 8004d46:	4632      	mov	r2, r6
 8004d48:	2101      	movs	r1, #1
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	47a8      	blx	r5
 8004d4e:	f107 0310 	add.w	r3, r7, #16
 8004d52:	4618      	mov	r0, r3
 8004d54:	f008 f935 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8004d58:	f107 0308 	add.w	r3, r7, #8
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f008 f930 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8004d62:	e012      	b.n	8004d8a <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004d64:	f00f f958 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8004d68:	4604      	mov	r4, r0
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	3338      	adds	r3, #56	; 0x38
 8004d6e:	681d      	ldr	r5, [r3, #0]
 8004d70:	f00f f962 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d74:	4603      	mov	r3, r0
 8004d76:	9302      	str	r3, [sp, #8]
 8004d78:	237d      	movs	r3, #125	; 0x7d
 8004d7a:	9301      	str	r3, [sp, #4]
 8004d7c:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	2300      	movs	r3, #0
 8004d82:	2200      	movs	r2, #0
 8004d84:	2100      	movs	r1, #0
 8004d86:	4620      	mov	r0, r4
 8004d88:	47a8      	blx	r5
}
 8004d8a:	bf00      	nop
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d94:	08023428 	.word	0x08023428
 8004d98:	080231f4 	.word	0x080231f4
 8004d9c:	08023434 	.word	0x08023434
 8004da0:	0802343c 	.word	0x0802343c

08004da4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	605a      	str	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff faf2 	bl	80043a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004dc0:	4a03      	ldr	r2, [pc, #12]	; (8004dd0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	080273b4 	.word	0x080273b4

08004dd4 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	2280      	movs	r2, #128	; 0x80
 8004dde:	4906      	ldr	r1, [pc, #24]	; (8004df8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004de0:	2008      	movs	r0, #8
 8004de2:	f005 f973 	bl	800a0cc <_ZnwjPKci>
 8004de6:	4604      	mov	r4, r0
 8004de8:	4620      	mov	r0, r4
 8004dea:	f7ff ffdb 	bl	8004da4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004dee:	4623      	mov	r3, r4
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd90      	pop	{r4, r7, pc}
 8004df8:	080231f4 	.word	0x080231f4

08004dfc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f00d fd4e 	bl	80128a8 <_ZN10UtestShellC1Ev>
 8004e0c:	4a03      	ldr	r2, [pc, #12]	; (8004e1c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4618      	mov	r0, r3
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	08027308 	.word	0x08027308

08004e20 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af04      	add	r7, sp, #16
 8004e26:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004e28:	f00f f8f6 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	3338      	adds	r3, #56	; 0x38
 8004e32:	681d      	ldr	r5, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff f8bc 	bl	8003fb6 <ringBuffer_capacity>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	461e      	mov	r6, r3
 8004e42:	f00f f8f9 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004e46:	4603      	mov	r3, r0
 8004e48:	9302      	str	r3, [sp, #8]
 8004e4a:	2383      	movs	r3, #131	; 0x83
 8004e4c:	9301      	str	r3, [sp, #4]
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004e54:	4632      	mov	r2, r6
 8004e56:	2132      	movs	r1, #50	; 0x32
 8004e58:	4620      	mov	r0, r4
 8004e5a:	47a8      	blx	r5

}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e64:	080231f4 	.word	0x080231f4
 8004e68:	080234e0 	.word	0x080234e0

08004e6c <_Z18UART_Transmit_FakePh>:


void UART_Transmit_Fake(uint8_t* data)
{
 8004e6c:	b5b0      	push	{r4, r5, r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
//	mock().actualCall("UART_Transmit_Fake").withParameter("data", data);
	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 8004e74:	f107 0308 	add.w	r3, r7, #8
 8004e78:	491d      	ldr	r1, [pc, #116]	; (8004ef0 <_Z18UART_Transmit_FakePh+0x84>)
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f007 fce9 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8004e80:	f107 0308 	add.w	r3, r7, #8
 8004e84:	2100      	movs	r1, #0
 8004e86:	4618      	mov	r0, r3
 8004e88:	f005 fdbc 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	3318      	adds	r3, #24
 8004e92:	681d      	ldr	r5, [r3, #0]
 8004e94:	f107 0310 	add.w	r3, r7, #16
 8004e98:	4916      	ldr	r1, [pc, #88]	; (8004ef4 <_Z18UART_Transmit_FakePh+0x88>)
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f007 fcd9 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8004ea0:	f107 0310 	add.w	r3, r7, #16
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	47a8      	blx	r5
 8004eaa:	4604      	mov	r4, r0
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	333c      	adds	r3, #60	; 0x3c
 8004eb0:	681d      	ldr	r5, [r3, #0]
 8004eb2:	f107 0318 	add.w	r3, r7, #24
 8004eb6:	4910      	ldr	r1, [pc, #64]	; (8004ef8 <_Z18UART_Transmit_FakePh+0x8c>)
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f007 fcca 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8004ebe:	f107 0318 	add.w	r3, r7, #24
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	47a8      	blx	r5
 8004eca:	f107 0318 	add.w	r3, r7, #24
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f008 f877 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8004ed4:	f107 0310 	add.w	r3, r7, #16
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f008 f872 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8004ede:	f107 0308 	add.w	r3, r7, #8
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f008 f86d 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8004ee8:	bf00      	nop
 8004eea:	3720      	adds	r7, #32
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bdb0      	pop	{r4, r5, r7, pc}
 8004ef0:	08023518 	.word	0x08023518
 8004ef4:	0802351c 	.word	0x0802351c
 8004ef8:	08023530 	.word	0x08023530

08004efc <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004efc:	b5b0      	push	{r4, r5, r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004f02:	463b      	mov	r3, r7
 8004f04:	4916      	ldr	r1, [pc, #88]	; (8004f60 <_Z17UART_Receive_Fakev+0x64>)
 8004f06:	4618      	mov	r0, r3
 8004f08:	f007 fca3 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8004f0c:	463b      	mov	r3, r7
 8004f0e:	2100      	movs	r1, #0
 8004f10:	4618      	mov	r0, r3
 8004f12:	f005 fd77 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f16:	4604      	mov	r4, r0
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	3318      	adds	r3, #24
 8004f1c:	681d      	ldr	r5, [r3, #0]
 8004f1e:	f107 0308 	add.w	r3, r7, #8
 8004f22:	4910      	ldr	r1, [pc, #64]	; (8004f64 <_Z17UART_Receive_Fakev+0x68>)
 8004f24:	4618      	mov	r0, r3
 8004f26:	f007 fc94 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8004f2a:	f107 0308 	add.w	r3, r7, #8
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4620      	mov	r0, r4
 8004f32:	47a8      	blx	r5
 8004f34:	4603      	mov	r3, r0
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	3264      	adds	r2, #100	; 0x64
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	4790      	blx	r2
 8004f40:	4603      	mov	r3, r0
 8004f42:	b2dc      	uxtb	r4, r3
 8004f44:	f107 0308 	add.w	r3, r7, #8
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f008 f83a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8004f4e:	463b      	mov	r3, r7
 8004f50:	4618      	mov	r0, r3
 8004f52:	f008 f836 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8004f56:	4623      	mov	r3, r4
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8004f60:	08023518 	.word	0x08023518
 8004f64:	08023538 	.word	0x08023538

08004f68 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8004f6c:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <_Z12getTick_Fakev+0x30>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f74:	d103      	bne.n	8004f7e <_Z12getTick_Fakev+0x16>
		time = 0;
 8004f76:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <_Z12getTick_Fakev+0x30>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	e004      	b.n	8004f88 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 8004f7e:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <_Z12getTick_Fakev+0x30>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3301      	adds	r3, #1
 8004f84:	4a04      	ldr	r2, [pc, #16]	; (8004f98 <_Z12getTick_Fakev+0x30>)
 8004f86:	6013      	str	r3, [r2, #0]
	return time;
 8004f88:	4b03      	ldr	r3, [pc, #12]	; (8004f98 <_Z12getTick_Fakev+0x30>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	200005bc 	.word	0x200005bc

08004f9c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
TEST_GROUP(EspDriver_Test_Group)
{



	void setup()
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8004fa4:	2364      	movs	r3, #100	; 0x64
 8004fa6:	4a04      	ldr	r2, [pc, #16]	; (8004fb8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8004fa8:	4904      	ldr	r1, [pc, #16]	; (8004fbc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8004faa:	4805      	ldr	r0, [pc, #20]	; (8004fc0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8004fac:	f7fe fcac 	bl	8003908 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);

	}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	08004f69 	.word	0x08004f69
 8004fbc:	08004efd 	.word	0x08004efd
 8004fc0:	08004e6d 	.word	0x08004e6d

08004fc4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 8004fcc:	f107 0308 	add.w	r3, r7, #8
 8004fd0:	4917      	ldr	r1, [pc, #92]	; (8005030 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f007 fc3d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8004fd8:	f107 0308 	add.w	r3, r7, #8
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f005 fd10 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	3294      	adds	r2, #148	; 0x94
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	4790      	blx	r2
 8004ff0:	f107 0308 	add.w	r3, r7, #8
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f007 ffe4 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
		mock().clear();
 8004ffa:	f107 0310 	add.w	r3, r7, #16
 8004ffe:	490c      	ldr	r1, [pc, #48]	; (8005030 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8005000:	4618      	mov	r0, r3
 8005002:	f007 fc26 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005006:	f107 0310 	add.w	r3, r7, #16
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f005 fcf9 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005012:	4603      	mov	r3, r0
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	329c      	adds	r2, #156	; 0x9c
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	4790      	blx	r2
 800501e:	f107 0310 	add.w	r3, r7, #16
 8005022:	4618      	mov	r0, r3
 8005024:	f007 ffcd 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
	}
 8005028:	bf00      	nop
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	08023518 	.word	0x08023518

08005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4618      	mov	r0, r3
 8005040:	f00f f814 	bl	801406c <_ZN5UtestC1Ev>
 8005044:	4a03      	ldr	r2, [pc, #12]	; (8005054 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	080272e8 	.word	0x080272e8

08005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	4a05      	ldr	r2, [pc, #20]	; (8005078 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4618      	mov	r0, r3
 800506a:	f00f f80f 	bl	801408c <_ZN5UtestD1Ev>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	080272e8 	.word	0x080272e8

0800507c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff ffe7 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800508a:	2104      	movs	r1, #4
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f005 f831 	bl	800a0f4 <_ZdlPvj>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff ffc4 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80050ac:	4a03      	ldr	r2, [pc, #12]	; (80050bc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	080272c8 	.word	0x080272c8

080050c0 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 80050c0:	b590      	push	{r4, r7, lr}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	22b8      	movs	r2, #184	; 0xb8
 80050ca:	4906      	ldr	r1, [pc, #24]	; (80050e4 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 80050cc:	2004      	movs	r0, #4
 80050ce:	f004 fffd 	bl	800a0cc <_ZnwjPKci>
 80050d2:	4604      	mov	r4, r0
 80050d4:	4620      	mov	r0, r4
 80050d6:	f7ff ffe1 	bl	800509c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 80050da:	4623      	mov	r3, r4
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd90      	pop	{r4, r7, pc}
 80050e4:	080231f4 	.word	0x080231f4

080050e8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f00d fbd8 	bl	80128a8 <_ZN10UtestShellC1Ev>
 80050f8:	4a03      	ldr	r2, [pc, #12]	; (8005108 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	0802721c 	.word	0x0802721c

0800510c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 800510c:	b5b0      	push	{r4, r5, r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af04      	add	r7, sp, #16
 8005112:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; // or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8005114:	4b10      	ldr	r3, [pc, #64]	; (8005158 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8005116:	4a11      	ldr	r2, [pc, #68]	; (800515c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8005118:	601a      	str	r2, [r3, #0]
	int result = ESP_Init(transmit,
 800511a:	4b0f      	ldr	r3, [pc, #60]	; (8005158 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	2364      	movs	r3, #100	; 0x64
 8005120:	4a0f      	ldr	r2, [pc, #60]	; (8005160 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 8005122:	4910      	ldr	r1, [pc, #64]	; (8005164 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8005124:	f7fe fbf0 	bl	8003908 <ESP_Init>
 8005128:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 800512a:	f00e ff75 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 800512e:	4604      	mov	r4, r0
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	3338      	adds	r3, #56	; 0x38
 8005134:	681d      	ldr	r5, [r3, #0]
 8005136:	f00e ff7f 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800513a:	4603      	mov	r3, r0
 800513c:	9302      	str	r3, [sp, #8]
 800513e:	23c6      	movs	r3, #198	; 0xc6
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	4b09      	ldr	r3, [pc, #36]	; (8005168 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	4b09      	ldr	r3, [pc, #36]	; (800516c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	2101      	movs	r1, #1
 800514c:	4620      	mov	r0, r4
 800514e:	47a8      	blx	r5

}
 8005150:	bf00      	nop
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bdb0      	pop	{r4, r5, r7, pc}
 8005158:	200005c0 	.word	0x200005c0
 800515c:	08004e6d 	.word	0x08004e6d
 8005160:	08004f69 	.word	0x08004f69
 8005164:	08004efd 	.word	0x08004efd
 8005168:	080231f4 	.word	0x080231f4
 800516c:	0802354c 	.word	0x0802354c

08005170 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff ff5a 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005180:	4a03      	ldr	r2, [pc, #12]	; (8005190 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	080271fc 	.word	0x080271fc

08005194 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	22ca      	movs	r2, #202	; 0xca
 800519e:	4906      	ldr	r1, [pc, #24]	; (80051b8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 80051a0:	2004      	movs	r0, #4
 80051a2:	f004 ff93 	bl	800a0cc <_ZnwjPKci>
 80051a6:	4604      	mov	r4, r0
 80051a8:	4620      	mov	r0, r4
 80051aa:	f7ff ffe1 	bl	8005170 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 80051ae:	4623      	mov	r3, r4
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd90      	pop	{r4, r7, pc}
 80051b8:	080231f4 	.word	0x080231f4

080051bc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f00d fb6e 	bl	80128a8 <_ZN10UtestShellC1Ev>
 80051cc:	4a03      	ldr	r2, [pc, #12]	; (80051dc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	08027150 	.word	0x08027150

080051e0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 80051e0:	b5b0      	push	{r4, r5, r7, lr}
 80051e2:	b08e      	sub	sp, #56	; 0x38
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");
 80051e8:	f107 0308 	add.w	r3, r7, #8
 80051ec:	493d      	ldr	r1, [pc, #244]	; (80052e4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 80051ee:	4618      	mov	r0, r3
 80051f0:	f007 fb2f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80051f4:	f107 0308 	add.w	r3, r7, #8
 80051f8:	2100      	movs	r1, #0
 80051fa:	4618      	mov	r0, r3
 80051fc:	f005 fc02 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005200:	4604      	mov	r4, r0
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	330c      	adds	r3, #12
 8005206:	681d      	ldr	r5, [r3, #0]
 8005208:	f107 0310 	add.w	r3, r7, #16
 800520c:	4936      	ldr	r1, [pc, #216]	; (80052e8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 800520e:	4618      	mov	r0, r3
 8005210:	f007 fb1f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005214:	f107 0310 	add.w	r3, r7, #16
 8005218:	4619      	mov	r1, r3
 800521a:	4620      	mov	r0, r4
 800521c:	47a8      	blx	r5
 800521e:	4604      	mov	r4, r0
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	334c      	adds	r3, #76	; 0x4c
 8005224:	681d      	ldr	r5, [r3, #0]
 8005226:	f107 0318 	add.w	r3, r7, #24
 800522a:	4930      	ldr	r1, [pc, #192]	; (80052ec <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 800522c:	4618      	mov	r0, r3
 800522e:	f007 fb10 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005232:	f107 0318 	add.w	r3, r7, #24
 8005236:	4a2e      	ldr	r2, [pc, #184]	; (80052f0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 8005238:	4619      	mov	r1, r3
 800523a:	4620      	mov	r0, r4
 800523c:	47a8      	blx	r5
 800523e:	f107 0318 	add.w	r3, r7, #24
 8005242:	4618      	mov	r0, r3
 8005244:	f007 febd 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8005248:	f107 0310 	add.w	r3, r7, #16
 800524c:	4618      	mov	r0, r3
 800524e:	f007 feb8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8005252:	f107 0308 	add.w	r3, r7, #8
 8005256:	4618      	mov	r0, r3
 8005258:	f007 feb3 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 800525c:	f107 0320 	add.w	r3, r7, #32
 8005260:	4920      	ldr	r1, [pc, #128]	; (80052e4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 8005262:	4618      	mov	r0, r3
 8005264:	f007 faf5 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005268:	f107 0320 	add.w	r3, r7, #32
 800526c:	2100      	movs	r1, #0
 800526e:	4618      	mov	r0, r3
 8005270:	f005 fbc8 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005274:	4604      	mov	r4, r0
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	330c      	adds	r3, #12
 800527a:	681d      	ldr	r5, [r3, #0]
 800527c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005280:	4919      	ldr	r1, [pc, #100]	; (80052e8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 8005282:	4618      	mov	r0, r3
 8005284:	f007 fae5 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005288:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800528c:	4619      	mov	r1, r3
 800528e:	4620      	mov	r0, r4
 8005290:	47a8      	blx	r5
 8005292:	4604      	mov	r4, r0
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	334c      	adds	r3, #76	; 0x4c
 8005298:	681d      	ldr	r5, [r3, #0]
 800529a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800529e:	4913      	ldr	r1, [pc, #76]	; (80052ec <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 80052a0:	4618      	mov	r0, r3
 80052a2:	f007 fad6 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80052a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052aa:	4a12      	ldr	r2, [pc, #72]	; (80052f4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 80052ac:	4619      	mov	r1, r3
 80052ae:	4620      	mov	r0, r4
 80052b0:	47a8      	blx	r5
 80052b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052b6:	4618      	mov	r0, r3
 80052b8:	f007 fe83 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80052bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052c0:	4618      	mov	r0, r3
 80052c2:	f007 fe7e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80052c6:	f107 0320 	add.w	r3, r7, #32
 80052ca:	4618      	mov	r0, r3
 80052cc:	f007 fe79 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test");
 80052d0:	4807      	ldr	r0, [pc, #28]	; (80052f0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 80052d2:	f7fe fb45 	bl	8003960 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n");
 80052d6:	4807      	ldr	r0, [pc, #28]	; (80052f4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 80052d8:	f7fe fb42 	bl	8003960 <Send_AT_Command>



}
 80052dc:	bf00      	nop
 80052de:	3738      	adds	r7, #56	; 0x38
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bdb0      	pop	{r4, r5, r7, pc}
 80052e4:	08023518 	.word	0x08023518
 80052e8:	0802351c 	.word	0x0802351c
 80052ec:	08023530 	.word	0x08023530
 80052f0:	08023420 	.word	0x08023420
 80052f4:	0802356c 	.word	0x0802356c

080052f8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff fe96 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005308:	4a03      	ldr	r2, [pc, #12]	; (8005318 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	08027130 	.word	0x08027130

0800531c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 800531c:	b590      	push	{r4, r7, lr}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	22d6      	movs	r2, #214	; 0xd6
 8005326:	4906      	ldr	r1, [pc, #24]	; (8005340 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8005328:	2004      	movs	r0, #4
 800532a:	f004 fecf 	bl	800a0cc <_ZnwjPKci>
 800532e:	4604      	mov	r4, r0
 8005330:	4620      	mov	r0, r4
 8005332:	f7ff ffe1 	bl	80052f8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 8005336:	4623      	mov	r3, r4
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	bd90      	pop	{r4, r7, pc}
 8005340:	080231f4 	.word	0x080231f4

08005344 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4618      	mov	r0, r3
 8005350:	f00d faaa 	bl	80128a8 <_ZN10UtestShellC1Ev>
 8005354:	4a03      	ldr	r2, [pc, #12]	; (8005364 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	08027084 	.word	0x08027084

08005368 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 8005368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800536a:	b097      	sub	sp, #92	; 0x5c
 800536c:	af04      	add	r7, sp, #16
 800536e:	6078      	str	r0, [r7, #4]

	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'O');
 8005370:	f107 0308 	add.w	r3, r7, #8
 8005374:	4967      	ldr	r1, [pc, #412]	; (8005514 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 8005376:	4618      	mov	r0, r3
 8005378:	f007 fa6b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800537c:	f107 0308 	add.w	r3, r7, #8
 8005380:	2100      	movs	r1, #0
 8005382:	4618      	mov	r0, r3
 8005384:	f005 fb3e 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005388:	4604      	mov	r4, r0
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	330c      	adds	r3, #12
 800538e:	681d      	ldr	r5, [r3, #0]
 8005390:	f107 0310 	add.w	r3, r7, #16
 8005394:	4960      	ldr	r1, [pc, #384]	; (8005518 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 8005396:	4618      	mov	r0, r3
 8005398:	f007 fa5b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800539c:	f107 0310 	add.w	r3, r7, #16
 80053a0:	4619      	mov	r1, r3
 80053a2:	4620      	mov	r0, r4
 80053a4:	47a8      	blx	r5
 80053a6:	4603      	mov	r3, r0
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	3264      	adds	r2, #100	; 0x64
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	214f      	movs	r1, #79	; 0x4f
 80053b0:	4618      	mov	r0, r3
 80053b2:	4790      	blx	r2
 80053b4:	f107 0310 	add.w	r3, r7, #16
 80053b8:	4618      	mov	r0, r3
 80053ba:	f007 fe02 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80053be:	f107 0308 	add.w	r3, r7, #8
 80053c2:	4618      	mov	r0, r3
 80053c4:	f007 fdfd 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80053c8:	f7fe fad8 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'K');
 80053cc:	f107 0318 	add.w	r3, r7, #24
 80053d0:	4950      	ldr	r1, [pc, #320]	; (8005514 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 80053d2:	4618      	mov	r0, r3
 80053d4:	f007 fa3d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80053d8:	f107 0318 	add.w	r3, r7, #24
 80053dc:	2100      	movs	r1, #0
 80053de:	4618      	mov	r0, r3
 80053e0:	f005 fb10 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80053e4:	4604      	mov	r4, r0
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	330c      	adds	r3, #12
 80053ea:	681d      	ldr	r5, [r3, #0]
 80053ec:	f107 0320 	add.w	r3, r7, #32
 80053f0:	4949      	ldr	r1, [pc, #292]	; (8005518 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 80053f2:	4618      	mov	r0, r3
 80053f4:	f007 fa2d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80053f8:	f107 0320 	add.w	r3, r7, #32
 80053fc:	4619      	mov	r1, r3
 80053fe:	4620      	mov	r0, r4
 8005400:	47a8      	blx	r5
 8005402:	4603      	mov	r3, r0
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	3264      	adds	r2, #100	; 0x64
 8005408:	6812      	ldr	r2, [r2, #0]
 800540a:	214b      	movs	r1, #75	; 0x4b
 800540c:	4618      	mov	r0, r3
 800540e:	4790      	blx	r2
 8005410:	f107 0320 	add.w	r3, r7, #32
 8005414:	4618      	mov	r0, r3
 8005416:	f007 fdd4 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800541a:	f107 0318 	add.w	r3, r7, #24
 800541e:	4618      	mov	r0, r3
 8005420:	f007 fdcf 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005424:	f7fe faaa 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\r');
 8005428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800542c:	4939      	ldr	r1, [pc, #228]	; (8005514 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 800542e:	4618      	mov	r0, r3
 8005430:	f007 fa0f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005434:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005438:	2100      	movs	r1, #0
 800543a:	4618      	mov	r0, r3
 800543c:	f005 fae2 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005440:	4604      	mov	r4, r0
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	330c      	adds	r3, #12
 8005446:	681d      	ldr	r5, [r3, #0]
 8005448:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800544c:	4932      	ldr	r1, [pc, #200]	; (8005518 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 800544e:	4618      	mov	r0, r3
 8005450:	f007 f9ff 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005454:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005458:	4619      	mov	r1, r3
 800545a:	4620      	mov	r0, r4
 800545c:	47a8      	blx	r5
 800545e:	4603      	mov	r3, r0
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	3264      	adds	r2, #100	; 0x64
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	210d      	movs	r1, #13
 8005468:	4618      	mov	r0, r3
 800546a:	4790      	blx	r2
 800546c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005470:	4618      	mov	r0, r3
 8005472:	f007 fda6 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8005476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800547a:	4618      	mov	r0, r3
 800547c:	f007 fda1 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005480:	f7fe fa7c 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\n');
 8005484:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005488:	4922      	ldr	r1, [pc, #136]	; (8005514 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 800548a:	4618      	mov	r0, r3
 800548c:	f007 f9e1 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005490:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005494:	2100      	movs	r1, #0
 8005496:	4618      	mov	r0, r3
 8005498:	f005 fab4 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800549c:	4604      	mov	r4, r0
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	330c      	adds	r3, #12
 80054a2:	681d      	ldr	r5, [r3, #0]
 80054a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80054a8:	491b      	ldr	r1, [pc, #108]	; (8005518 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 80054aa:	4618      	mov	r0, r3
 80054ac:	f007 f9d1 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80054b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80054b4:	4619      	mov	r1, r3
 80054b6:	4620      	mov	r0, r4
 80054b8:	47a8      	blx	r5
 80054ba:	4603      	mov	r3, r0
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	3264      	adds	r2, #100	; 0x64
 80054c0:	6812      	ldr	r2, [r2, #0]
 80054c2:	210a      	movs	r1, #10
 80054c4:	4618      	mov	r0, r3
 80054c6:	4790      	blx	r2
 80054c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80054cc:	4618      	mov	r0, r3
 80054ce:	f007 fd78 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80054d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80054d6:	4618      	mov	r0, r3
 80054d8:	f007 fd73 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80054dc:	f7fe fa4e 	bl	800397c <ESP_UART_ReceiveHandler>

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the rx ring buffer.
 80054e0:	f00e fd9a 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 80054e4:	4604      	mov	r4, r0
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	3324      	adds	r3, #36	; 0x24
 80054ea:	681d      	ldr	r5, [r3, #0]
 80054ec:	4b0b      	ldr	r3, [pc, #44]	; (800551c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b4>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68de      	ldr	r6, [r3, #12]
 80054f2:	f00e fda1 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80054f6:	4603      	mov	r3, r0
 80054f8:	9302      	str	r3, [sp, #8]
 80054fa:	23e2      	movs	r3, #226	; 0xe2
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	4b08      	ldr	r3, [pc, #32]	; (8005520 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b8>)
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	2300      	movs	r3, #0
 8005504:	4632      	mov	r2, r6
 8005506:	4907      	ldr	r1, [pc, #28]	; (8005524 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1bc>)
 8005508:	4620      	mov	r0, r4
 800550a:	47a8      	blx	r5

}
 800550c:	bf00      	nop
 800550e:	374c      	adds	r7, #76	; 0x4c
 8005510:	46bd      	mov	sp, r7
 8005512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005514:	08023518 	.word	0x08023518
 8005518:	08023538 	.word	0x08023538
 800551c:	20000498 	.word	0x20000498
 8005520:	080231f4 	.word	0x080231f4
 8005524:	0802316c 	.word	0x0802316c

08005528 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff fd7e 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005538:	4a03      	ldr	r2, [pc, #12]	; (8005548 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	08027064 	.word	0x08027064

0800554c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 800554c:	b590      	push	{r4, r7, lr}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	22e6      	movs	r2, #230	; 0xe6
 8005556:	4906      	ldr	r1, [pc, #24]	; (8005570 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 8005558:	2004      	movs	r0, #4
 800555a:	f004 fdb7 	bl	800a0cc <_ZnwjPKci>
 800555e:	4604      	mov	r4, r0
 8005560:	4620      	mov	r0, r4
 8005562:	f7ff ffe1 	bl	8005528 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 8005566:	4623      	mov	r3, r4
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	bd90      	pop	{r4, r7, pc}
 8005570:	080231f4 	.word	0x080231f4

08005574 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4618      	mov	r0, r3
 8005580:	f00d f992 	bl	80128a8 <_ZN10UtestShellC1Ev>
 8005584:	4a03      	ldr	r2, [pc, #12]	; (8005594 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	08026fb8 	.word	0x08026fb8

08005598 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 8005598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800559a:	b091      	sub	sp, #68	; 0x44
 800559c:	af04      	add	r7, sp, #16
 800559e:	6078      	str	r0, [r7, #4]
	char response[10] = "OK\r\n";
 80055a0:	4a35      	ldr	r2, [pc, #212]	; (8005678 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 80055a2:	f107 030c 	add.w	r3, r7, #12
 80055a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055aa:	6018      	str	r0, [r3, #0]
 80055ac:	3304      	adds	r3, #4
 80055ae:	7019      	strb	r1, [r3, #0]
 80055b0:	f107 0311 	add.w	r3, r7, #17
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	711a      	strb	r2, [r3, #4]

	for(int i=0;i<(int)strlen(response);i++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055be:	f107 030c 	add.w	r3, r7, #12
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fa fe3a 	bl	800023c <strlen>
 80055c8:	4603      	mov	r3, r0
 80055ca:	461a      	mov	r2, r3
 80055cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ce:	4293      	cmp	r3, r2
 80055d0:	da35      	bge.n	800563e <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xa6>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80055d2:	f107 0318 	add.w	r3, r7, #24
 80055d6:	4929      	ldr	r1, [pc, #164]	; (800567c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 80055d8:	4618      	mov	r0, r3
 80055da:	f007 f93a 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80055de:	f107 0318 	add.w	r3, r7, #24
 80055e2:	2100      	movs	r1, #0
 80055e4:	4618      	mov	r0, r3
 80055e6:	f005 fa0d 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80055ea:	4604      	mov	r4, r0
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	330c      	adds	r3, #12
 80055f0:	681d      	ldr	r5, [r3, #0]
 80055f2:	f107 0320 	add.w	r3, r7, #32
 80055f6:	4922      	ldr	r1, [pc, #136]	; (8005680 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 80055f8:	4618      	mov	r0, r3
 80055fa:	f007 f92a 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80055fe:	f107 0320 	add.w	r3, r7, #32
 8005602:	4619      	mov	r1, r3
 8005604:	4620      	mov	r0, r4
 8005606:	47a8      	blx	r5
 8005608:	4603      	mov	r3, r0
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	3264      	adds	r2, #100	; 0x64
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	f107 000c 	add.w	r0, r7, #12
 8005614:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005616:	4401      	add	r1, r0
 8005618:	7809      	ldrb	r1, [r1, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	4790      	blx	r2
 800561e:	f107 0320 	add.w	r3, r7, #32
 8005622:	4618      	mov	r0, r3
 8005624:	f007 fccd 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8005628:	f107 0318 	add.w	r3, r7, #24
 800562c:	4618      	mov	r0, r3
 800562e:	f007 fcc8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8005632:	f7fe f9a3 	bl	800397c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8005636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005638:	3301      	adds	r3, #1
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800563c:	e7bf      	b.n	80055be <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x26>
	}

	uint32_t result = Read_Response((char*)"OK");
 800563e:	4811      	ldr	r0, [pc, #68]	; (8005684 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xec>)
 8005640:	f7fe f9b6 	bl	80039b0 <Read_Response>
 8005644:	62b8      	str	r0, [r7, #40]	; 0x28

	LONGS_EQUAL(1,result);
 8005646:	f00e fce7 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 800564a:	4604      	mov	r4, r0
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	3338      	adds	r3, #56	; 0x38
 8005650:	681d      	ldr	r5, [r3, #0]
 8005652:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8005654:	f00e fcf0 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005658:	4603      	mov	r3, r0
 800565a:	9302      	str	r3, [sp, #8]
 800565c:	23f2      	movs	r3, #242	; 0xf2
 800565e:	9301      	str	r3, [sp, #4]
 8005660:	4b09      	ldr	r3, [pc, #36]	; (8005688 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xf0>)
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	4b09      	ldr	r3, [pc, #36]	; (800568c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xf4>)
 8005666:	4632      	mov	r2, r6
 8005668:	2101      	movs	r1, #1
 800566a:	4620      	mov	r0, r4
 800566c:	47a8      	blx	r5

}
 800566e:	bf00      	nop
 8005670:	3734      	adds	r7, #52	; 0x34
 8005672:	46bd      	mov	sp, r7
 8005674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005676:	bf00      	nop
 8005678:	08023578 	.word	0x08023578
 800567c:	08023518 	.word	0x08023518
 8005680:	08023538 	.word	0x08023538
 8005684:	08023574 	.word	0x08023574
 8005688:	080231f4 	.word	0x080231f4
 800568c:	0802354c 	.word	0x0802354c

08005690 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fcca 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80056a0:	4a03      	ldr	r2, [pc, #12]	; (80056b0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	08026f98 	.word	0x08026f98

080056b4 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 80056b4:	b590      	push	{r4, r7, lr}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	22f7      	movs	r2, #247	; 0xf7
 80056be:	4906      	ldr	r1, [pc, #24]	; (80056d8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 80056c0:	2004      	movs	r0, #4
 80056c2:	f004 fd03 	bl	800a0cc <_ZnwjPKci>
 80056c6:	4604      	mov	r4, r0
 80056c8:	4620      	mov	r0, r4
 80056ca:	f7ff ffe1 	bl	8005690 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 80056ce:	4623      	mov	r3, r4
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd90      	pop	{r4, r7, pc}
 80056d8:	080231f4 	.word	0x080231f4

080056dc <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f00d f8de 	bl	80128a8 <_ZN10UtestShellC1Ev>
 80056ec:	4a03      	ldr	r2, [pc, #12]	; (80056fc <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	08026eec 	.word	0x08026eec

08005700 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 8005700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005702:	b089      	sub	sp, #36	; 0x24
 8005704:	af04      	add	r7, sp, #16
 8005706:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8005708:	2305      	movs	r3, #5
 800570a:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		response_state = Wait_Response((char*)"OK", 1000);
 800570c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005710:	4811      	ldr	r0, [pc, #68]	; (8005758 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 8005712:	f7fe f95f 	bl	80039d4 <Wait_Response>
 8005716:	4603      	mov	r3, r0
 8005718:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 800571a:	7bfb      	ldrb	r3, [r7, #15]
 800571c:	2b05      	cmp	r3, #5
 800571e:	d100      	bne.n	8005722 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 8005720:	e7f4      	b.n	800570c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 8005722:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8005724:	f00e fc78 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8005728:	4604      	mov	r4, r0
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	3338      	adds	r3, #56	; 0x38
 800572e:	681d      	ldr	r5, [r3, #0]
 8005730:	7bfe      	ldrb	r6, [r7, #15]
 8005732:	f00e fc81 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005736:	4603      	mov	r3, r0
 8005738:	9302      	str	r3, [sp, #8]
 800573a:	f240 1303 	movw	r3, #259	; 0x103
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	4b06      	ldr	r3, [pc, #24]	; (800575c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	4b06      	ldr	r3, [pc, #24]	; (8005760 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 8005746:	4632      	mov	r2, r6
 8005748:	2102      	movs	r1, #2
 800574a:	4620      	mov	r0, r4
 800574c:	47a8      	blx	r5

}
 800574e:	bf00      	nop
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005756:	bf00      	nop
 8005758:	08023574 	.word	0x08023574
 800575c:	080231f4 	.word	0x080231f4
 8005760:	08023584 	.word	0x08023584

08005764 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff fc60 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005774:	4a03      	ldr	r2, [pc, #12]	; (8005784 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	08026ecc 	.word	0x08026ecc

08005788 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005788:	b590      	push	{r4, r7, lr}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	f240 1207 	movw	r2, #263	; 0x107
 8005794:	4906      	ldr	r1, [pc, #24]	; (80057b0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 8005796:	2004      	movs	r0, #4
 8005798:	f004 fc98 	bl	800a0cc <_ZnwjPKci>
 800579c:	4604      	mov	r4, r0
 800579e:	4620      	mov	r0, r4
 80057a0:	f7ff ffe0 	bl	8005764 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 80057a4:	4623      	mov	r3, r4
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd90      	pop	{r4, r7, pc}
 80057ae:	bf00      	nop
 80057b0:	080231f4 	.word	0x080231f4

080057b4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4618      	mov	r0, r3
 80057c0:	f00d f872 	bl	80128a8 <_ZN10UtestShellC1Ev>
 80057c4:	4a03      	ldr	r2, [pc, #12]	; (80057d4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	08026e20 	.word	0x08026e20

080057d8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 80057d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057da:	b091      	sub	sp, #68	; 0x44
 80057dc:	af04      	add	r7, sp, #16
 80057de:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 80057e0:	2305      	movs	r3, #5
 80057e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	char response[10] = "OK\r\n";
 80057e6:	4a3b      	ldr	r2, [pc, #236]	; (80058d4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 80057e8:	f107 030c 	add.w	r3, r7, #12
 80057ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057f0:	6018      	str	r0, [r3, #0]
 80057f2:	3304      	adds	r3, #4
 80057f4:	7019      	strb	r1, [r3, #0]
 80057f6:	f107 0311 	add.w	r3, r7, #17
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	711a      	strb	r2, [r3, #4]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 8005800:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005804:	4834      	ldr	r0, [pc, #208]	; (80058d8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 8005806:	f7fe f8e5 	bl	80039d4 <Wait_Response>
 800580a:	4603      	mov	r3, r0
 800580c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(response_state != IDLE)
 8005810:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005814:	2b05      	cmp	r3, #5
 8005816:	d141      	bne.n	800589c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xc4>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 8005818:	2300      	movs	r3, #0
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800581c:	f107 030c 	add.w	r3, r7, #12
 8005820:	4618      	mov	r0, r3
 8005822:	f7fa fd0b 	bl	800023c <strlen>
 8005826:	4603      	mov	r3, r0
 8005828:	461a      	mov	r2, r3
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	4293      	cmp	r3, r2
 800582e:	dae7      	bge.n	8005800 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x28>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005830:	f107 0318 	add.w	r3, r7, #24
 8005834:	4929      	ldr	r1, [pc, #164]	; (80058dc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 8005836:	4618      	mov	r0, r3
 8005838:	f007 f80b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800583c:	f107 0318 	add.w	r3, r7, #24
 8005840:	2100      	movs	r1, #0
 8005842:	4618      	mov	r0, r3
 8005844:	f005 f8de 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005848:	4604      	mov	r4, r0
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	330c      	adds	r3, #12
 800584e:	681d      	ldr	r5, [r3, #0]
 8005850:	f107 0320 	add.w	r3, r7, #32
 8005854:	4922      	ldr	r1, [pc, #136]	; (80058e0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x108>)
 8005856:	4618      	mov	r0, r3
 8005858:	f006 fffb 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800585c:	f107 0320 	add.w	r3, r7, #32
 8005860:	4619      	mov	r1, r3
 8005862:	4620      	mov	r0, r4
 8005864:	47a8      	blx	r5
 8005866:	4603      	mov	r3, r0
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	3264      	adds	r2, #100	; 0x64
 800586c:	6812      	ldr	r2, [r2, #0]
 800586e:	f107 000c 	add.w	r0, r7, #12
 8005872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005874:	4401      	add	r1, r0
 8005876:	7809      	ldrb	r1, [r1, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	4790      	blx	r2
 800587c:	f107 0320 	add.w	r3, r7, #32
 8005880:	4618      	mov	r0, r3
 8005882:	f007 fb9e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8005886:	f107 0318 	add.w	r3, r7, #24
 800588a:	4618      	mov	r0, r3
 800588c:	f007 fb99 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005890:	f7fe f874 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8005894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005896:	3301      	adds	r3, #1
 8005898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800589a:	e7bf      	b.n	800581c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x44>
			break;
 800589c:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 800589e:	f00e fbbb 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 80058a2:	4604      	mov	r4, r0
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	3338      	adds	r3, #56	; 0x38
 80058a8:	681d      	ldr	r5, [r3, #0]
 80058aa:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
 80058ae:	f00e fbc3 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80058b2:	4603      	mov	r3, r0
 80058b4:	9302      	str	r3, [sp, #8]
 80058b6:	f44f 738d 	mov.w	r3, #282	; 0x11a
 80058ba:	9301      	str	r3, [sp, #4]
 80058bc:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x10c>)
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x110>)
 80058c2:	4632      	mov	r2, r6
 80058c4:	2100      	movs	r1, #0
 80058c6:	4620      	mov	r0, r4
 80058c8:	47a8      	blx	r5
}
 80058ca:	bf00      	nop
 80058cc:	3734      	adds	r7, #52	; 0x34
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058d2:	bf00      	nop
 80058d4:	08023578 	.word	0x08023578
 80058d8:	08023574 	.word	0x08023574
 80058dc:	08023518 	.word	0x08023518
 80058e0:	08023538 	.word	0x08023538
 80058e4:	080231f4 	.word	0x080231f4
 80058e8:	080235b8 	.word	0x080235b8

080058ec <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff fb9c 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80058fc:	4a03      	ldr	r2, [pc, #12]	; (800590c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	08026e00 	.word	0x08026e00

08005910 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005910:	b590      	push	{r4, r7, lr}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	f240 121d 	movw	r2, #285	; 0x11d
 800591c:	4906      	ldr	r1, [pc, #24]	; (8005938 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 800591e:	2004      	movs	r0, #4
 8005920:	f004 fbd4 	bl	800a0cc <_ZnwjPKci>
 8005924:	4604      	mov	r4, r0
 8005926:	4620      	mov	r0, r4
 8005928:	f7ff ffe0 	bl	80058ec <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 800592c:	4623      	mov	r3, r4
 800592e:	4618      	mov	r0, r3
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	bd90      	pop	{r4, r7, pc}
 8005936:	bf00      	nop
 8005938:	080231f4 	.word	0x080231f4

0800593c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4618      	mov	r0, r3
 8005948:	f00c ffae 	bl	80128a8 <_ZN10UtestShellC1Ev>
 800594c:	4a03      	ldr	r2, [pc, #12]	; (800595c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	08026d54 	.word	0x08026d54

08005960 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005962:	b08f      	sub	sp, #60	; 0x3c
 8005964:	af04      	add	r7, sp, #16
 8005966:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 8005968:	2302      	movs	r3, #2
 800596a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 800596e:	f107 030c 	add.w	r3, r7, #12
 8005972:	492f      	ldr	r1, [pc, #188]	; (8005a30 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 8005974:	4618      	mov	r0, r3
 8005976:	f006 ff6c 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800597a:	f107 030c 	add.w	r3, r7, #12
 800597e:	2100      	movs	r1, #0
 8005980:	4618      	mov	r0, r3
 8005982:	f005 f83f 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005986:	4604      	mov	r4, r0
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	330c      	adds	r3, #12
 800598c:	681d      	ldr	r5, [r3, #0]
 800598e:	f107 0314 	add.w	r3, r7, #20
 8005992:	4928      	ldr	r1, [pc, #160]	; (8005a34 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005994:	4618      	mov	r0, r3
 8005996:	f006 ff5c 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800599a:	f107 0314 	add.w	r3, r7, #20
 800599e:	4619      	mov	r1, r3
 80059a0:	4620      	mov	r0, r4
 80059a2:	47a8      	blx	r5
 80059a4:	4604      	mov	r4, r0
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	334c      	adds	r3, #76	; 0x4c
 80059aa:	681d      	ldr	r5, [r3, #0]
 80059ac:	f107 031c 	add.w	r3, r7, #28
 80059b0:	4921      	ldr	r1, [pc, #132]	; (8005a38 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 80059b2:	4618      	mov	r0, r3
 80059b4:	f006 ff4d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80059b8:	f107 031c 	add.w	r3, r7, #28
 80059bc:	4a1f      	ldr	r2, [pc, #124]	; (8005a3c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 80059be:	4619      	mov	r1, r3
 80059c0:	4620      	mov	r0, r4
 80059c2:	47a8      	blx	r5
 80059c4:	f107 031c 	add.w	r3, r7, #28
 80059c8:	4618      	mov	r0, r3
 80059ca:	f007 fafa 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80059ce:	f107 0314 	add.w	r3, r7, #20
 80059d2:	4618      	mov	r0, r3
 80059d4:	f007 faf5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80059d8:	f107 030c 	add.w	r3, r7, #12
 80059dc:	4618      	mov	r0, r3
 80059de:	f007 faf0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 80059e2:	4917      	ldr	r1, [pc, #92]	; (8005a40 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe0>)
 80059e4:	4817      	ldr	r0, [pc, #92]	; (8005a44 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe4>)
 80059e6:	f7fe f837 	bl	8003a58 <Connect_Wifi>
 80059ea:	4603      	mov	r3, r0
 80059ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 80059f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059f4:	2b05      	cmp	r3, #5
 80059f6:	d100      	bne.n	80059fa <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x9a>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 80059f8:	e7f3      	b.n	80059e2 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x82>
		{
			break;
 80059fa:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 80059fc:	f00e fb0c 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8005a00:	4604      	mov	r4, r0
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	3338      	adds	r3, #56	; 0x38
 8005a06:	681d      	ldr	r5, [r3, #0]
 8005a08:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005a0c:	f00e fb14 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005a10:	4603      	mov	r3, r0
 8005a12:	9302      	str	r3, [sp, #8]
 8005a14:	f44f 7398 	mov.w	r3, #304	; 0x130
 8005a18:	9301      	str	r3, [sp, #4]
 8005a1a:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe8>)
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 8005a20:	4632      	mov	r2, r6
 8005a22:	2102      	movs	r1, #2
 8005a24:	4620      	mov	r0, r4
 8005a26:	47a8      	blx	r5

}
 8005a28:	bf00      	nop
 8005a2a:	372c      	adds	r7, #44	; 0x2c
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a30:	08023518 	.word	0x08023518
 8005a34:	0802351c 	.word	0x0802351c
 8005a38:	08023530 	.word	0x08023530
 8005a3c:	08023174 	.word	0x08023174
 8005a40:	080235e4 	.word	0x080235e4
 8005a44:	080235ec 	.word	0x080235ec
 8005a48:	080231f4 	.word	0x080231f4
 8005a4c:	080235f4 	.word	0x080235f4

08005a50 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff faea 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005a60:	4a03      	ldr	r2, [pc, #12]	; (8005a70 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	08026d34 	.word	0x08026d34

08005a74 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 8005a74:	b590      	push	{r4, r7, lr}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005a80:	4906      	ldr	r1, [pc, #24]	; (8005a9c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 8005a82:	2004      	movs	r0, #4
 8005a84:	f004 fb22 	bl	800a0cc <_ZnwjPKci>
 8005a88:	4604      	mov	r4, r0
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f7ff ffe0 	bl	8005a50 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 8005a90:	4623      	mov	r3, r4
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd90      	pop	{r4, r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	080231f4 	.word	0x080231f4

08005aa0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f00c fefc 	bl	80128a8 <_ZN10UtestShellC1Ev>
 8005ab0:	4a03      	ldr	r2, [pc, #12]	; (8005ac0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	08026c88 	.word	0x08026c88

08005ac4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 8005ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ac6:	b0e1      	sub	sp, #388	; 0x184
 8005ac8:	af04      	add	r7, sp, #16
 8005aca:	1d3b      	adds	r3, r7, #4
 8005acc:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 8005ace:	4a78      	ldr	r2, [pc, #480]	; (8005cb0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 8005ad0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	2296      	movs	r2, #150	; 0x96
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f01a fb8f 	bl	80201fc <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									// check disconnect response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	char fake_tx_buffer[3][50] =
 8005ade:	f107 0308 	add.w	r3, r7, #8
 8005ae2:	4a74      	ldr	r2, [pc, #464]	; (8005cb4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	2396      	movs	r3, #150	; 0x96
 8005aea:	461a      	mov	r2, r3
 8005aec:	f01a fb86 	bl	80201fc <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005af0:	2300      	movs	r3, #0
 8005af2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005af6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	dc46      	bgt.n	8005b8c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005afe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b02:	496d      	ldr	r1, [pc, #436]	; (8005cb8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005b04:	4618      	mov	r0, r3
 8005b06:	f006 fea4 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005b0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b0e:	2100      	movs	r1, #0
 8005b10:	4618      	mov	r0, r3
 8005b12:	f004 ff77 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005b16:	4604      	mov	r4, r0
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	330c      	adds	r3, #12
 8005b1c:	681d      	ldr	r5, [r3, #0]
 8005b1e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005b22:	4966      	ldr	r1, [pc, #408]	; (8005cbc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 8005b24:	4618      	mov	r0, r3
 8005b26:	f006 fe94 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005b2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4620      	mov	r0, r4
 8005b32:	47a8      	blx	r5
 8005b34:	4604      	mov	r4, r0
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	334c      	adds	r3, #76	; 0x4c
 8005b3a:	681d      	ldr	r5, [r3, #0]
 8005b3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b40:	495f      	ldr	r1, [pc, #380]	; (8005cc0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 8005b42:	4618      	mov	r0, r3
 8005b44:	f006 fe85 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005b48:	f107 0208 	add.w	r2, r7, #8
 8005b4c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005b50:	2132      	movs	r1, #50	; 0x32
 8005b52:	fb01 f303 	mul.w	r3, r1, r3
 8005b56:	441a      	add	r2, r3
 8005b58:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4620      	mov	r0, r4
 8005b60:	47a8      	blx	r5
 8005b62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b66:	4618      	mov	r0, r3
 8005b68:	f007 fa2b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8005b6c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005b70:	4618      	mov	r0, r3
 8005b72:	f007 fa26 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8005b76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f007 fa21 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005b80:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005b84:	3301      	adds	r3, #1
 8005b86:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005b8a:	e7b4      	b.n	8005af6 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 8005b8c:	2305      	movs	r3, #5
 8005b8e:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int i = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005b98:	494a      	ldr	r1, [pc, #296]	; (8005cc4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 8005b9a:	484b      	ldr	r0, [pc, #300]	; (8005cc8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 8005b9c:	f7fd ff5c 	bl	8003a58 <Connect_Wifi>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8005ba6:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d065      	beq.n	8005c7a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 8005bae:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d061      	beq.n	8005c7a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 8005bb6:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d05d      	beq.n	8005c7a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
		{
			break;
		}

		if(i<3)
 8005bbe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	dce8      	bgt.n	8005b98 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005bcc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005bd0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005bd4:	2132      	movs	r1, #50	; 0x32
 8005bd6:	fb01 f303 	mul.w	r3, r1, r3
 8005bda:	4413      	add	r3, r2
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fa fb2d 	bl	800023c <strlen>
 8005be2:	4603      	mov	r3, r0
 8005be4:	461a      	mov	r2, r3
 8005be6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005bea:	4293      	cmp	r3, r2
 8005bec:	da3f      	bge.n	8005c6e <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1aa>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005bee:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005bf2:	4931      	ldr	r1, [pc, #196]	; (8005cb8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f006 fe2c 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005bfa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005bfe:	2100      	movs	r1, #0
 8005c00:	4618      	mov	r0, r3
 8005c02:	f004 feff 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005c06:	4604      	mov	r4, r0
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	330c      	adds	r3, #12
 8005c0c:	681d      	ldr	r5, [r3, #0]
 8005c0e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005c12:	492e      	ldr	r1, [pc, #184]	; (8005ccc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x208>)
 8005c14:	4618      	mov	r0, r3
 8005c16:	f006 fe1c 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005c1a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4620      	mov	r0, r4
 8005c22:	47a8      	blx	r5
 8005c24:	4603      	mov	r3, r0
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	3264      	adds	r2, #100	; 0x64
 8005c2a:	6812      	ldr	r2, [r2, #0]
 8005c2c:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005c30:	2032      	movs	r0, #50	; 0x32
 8005c32:	fb00 f101 	mul.w	r1, r0, r1
 8005c36:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005c3a:	4408      	add	r0, r1
 8005c3c:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005c40:	4401      	add	r1, r0
 8005c42:	39d0      	subs	r1, #208	; 0xd0
 8005c44:	7809      	ldrb	r1, [r1, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	4790      	blx	r2
 8005c4a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f007 f9b7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8005c54:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f007 f9b2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005c5e:	f7fd fe8d 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005c62:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005c66:	3301      	adds	r3, #1
 8005c68:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005c6c:	e7ae      	b.n	8005bcc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x108>
			}
			i++;
 8005c6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005c72:	3301      	adds	r3, #1
 8005c74:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005c78:	e78e      	b.n	8005b98 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
	LONGS_EQUAL(STATUS_ERROR,response);
 8005c7a:	f00e f9cd 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8005c7e:	4604      	mov	r4, r0
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	3338      	adds	r3, #56	; 0x38
 8005c84:	681d      	ldr	r5, [r3, #0]
 8005c86:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005c8a:	f00e f9d5 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	9302      	str	r3, [sp, #8]
 8005c92:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8005c96:	9301      	str	r3, [sp, #4]
 8005c98:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x20c>)
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x210>)
 8005c9e:	4632      	mov	r2, r6
 8005ca0:	2104      	movs	r1, #4
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	47a8      	blx	r5

}
 8005ca6:	bf00      	nop
 8005ca8:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cb0:	0802364c 	.word	0x0802364c
 8005cb4:	080236e4 	.word	0x080236e4
 8005cb8:	08023518 	.word	0x08023518
 8005cbc:	0802351c 	.word	0x0802351c
 8005cc0:	08023530 	.word	0x08023530
 8005cc4:	080235e4 	.word	0x080235e4
 8005cc8:	080235ec 	.word	0x080235ec
 8005ccc:	08023538 	.word	0x08023538
 8005cd0:	080231f4 	.word	0x080231f4
 8005cd4:	08023620 	.word	0x08023620

08005cd8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff f9a6 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005ce8:	4a03      	ldr	r2, [pc, #12]	; (8005cf8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	08026c68 	.word	0x08026c68

08005cfc <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005cfc:	b590      	push	{r4, r7, lr}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8005d08:	4906      	ldr	r1, [pc, #24]	; (8005d24 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005d0a:	2004      	movs	r0, #4
 8005d0c:	f004 f9de 	bl	800a0cc <_ZnwjPKci>
 8005d10:	4604      	mov	r4, r0
 8005d12:	4620      	mov	r0, r4
 8005d14:	f7ff ffe0 	bl	8005cd8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005d18:	4623      	mov	r3, r4
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd90      	pop	{r4, r7, pc}
 8005d22:	bf00      	nop
 8005d24:	080231f4 	.word	0x080231f4

08005d28 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f00c fdb8 	bl	80128a8 <_ZN10UtestShellC1Ev>
 8005d38:	4a03      	ldr	r2, [pc, #12]	; (8005d48 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	08026bbc 	.word	0x08026bbc

08005d4c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d4e:	b0e1      	sub	sp, #388	; 0x184
 8005d50:	af04      	add	r7, sp, #16
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 8005d56:	4a77      	ldr	r2, [pc, #476]	; (8005f34 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e8>)
 8005d58:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	2296      	movs	r2, #150	; 0x96
 8005d60:	4618      	mov	r0, r3
 8005d62:	f01a fa4b 	bl	80201fc <memcpy>
	{ "OK\r\n",									// station mode response
	  "OK\r\n",								// check wifi connection response
	  "OK\r\n"								// connect wifi command response
	};

	char fake_tx_buffer[3][50] =
 8005d66:	f107 0308 	add.w	r3, r7, #8
 8005d6a:	4a73      	ldr	r2, [pc, #460]	; (8005f38 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ec>)
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	4611      	mov	r1, r2
 8005d70:	2396      	movs	r3, #150	; 0x96
 8005d72:	461a      	mov	r2, r3
 8005d74:	f01a fa42 	bl	80201fc <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005d7e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	dc46      	bgt.n	8005e14 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005d86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d8a:	496c      	ldr	r1, [pc, #432]	; (8005f3c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f006 fd60 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005d92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d96:	2100      	movs	r1, #0
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f004 fe33 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005d9e:	4604      	mov	r4, r0
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	330c      	adds	r3, #12
 8005da4:	681d      	ldr	r5, [r3, #0]
 8005da6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005daa:	4965      	ldr	r1, [pc, #404]	; (8005f40 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f4>)
 8005dac:	4618      	mov	r0, r3
 8005dae:	f006 fd50 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005db2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005db6:	4619      	mov	r1, r3
 8005db8:	4620      	mov	r0, r4
 8005dba:	47a8      	blx	r5
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	334c      	adds	r3, #76	; 0x4c
 8005dc2:	681d      	ldr	r5, [r3, #0]
 8005dc4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dc8:	495e      	ldr	r1, [pc, #376]	; (8005f44 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f8>)
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f006 fd41 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005dd0:	f107 0208 	add.w	r2, r7, #8
 8005dd4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005dd8:	2132      	movs	r1, #50	; 0x32
 8005dda:	fb01 f303 	mul.w	r3, r1, r3
 8005dde:	441a      	add	r2, r3
 8005de0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005de4:	4619      	mov	r1, r3
 8005de6:	4620      	mov	r0, r4
 8005de8:	47a8      	blx	r5
 8005dea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dee:	4618      	mov	r0, r3
 8005df0:	f007 f8e7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8005df4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f007 f8e2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8005dfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e02:	4618      	mov	r0, r3
 8005e04:	f007 f8dd 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005e08:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005e12:	e7b4      	b.n	8005d7e <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005e1a:	494b      	ldr	r1, [pc, #300]	; (8005f48 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1fc>)
 8005e1c:	484b      	ldr	r0, [pc, #300]	; (8005f4c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x200>)
 8005e1e:	f7fd fe1b 	bl	8003a58 <Connect_Wifi>
 8005e22:	4603      	mov	r3, r0
 8005e24:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8005e28:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d065      	beq.n	8005efc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005e30:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d061      	beq.n	8005efc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005e38:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d05d      	beq.n	8005efc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
		{
			break;
		}

		if(i<3)
 8005e40:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	dce8      	bgt.n	8005e1a <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005e4e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005e52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005e56:	2132      	movs	r1, #50	; 0x32
 8005e58:	fb01 f303 	mul.w	r3, r1, r3
 8005e5c:	4413      	add	r3, r2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fa f9ec 	bl	800023c <strlen>
 8005e64:	4603      	mov	r3, r0
 8005e66:	461a      	mov	r2, r3
 8005e68:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	da3f      	bge.n	8005ef0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1a4>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005e70:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005e74:	4931      	ldr	r1, [pc, #196]	; (8005f3c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005e76:	4618      	mov	r0, r3
 8005e78:	f006 fceb 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005e7c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005e80:	2100      	movs	r1, #0
 8005e82:	4618      	mov	r0, r3
 8005e84:	f004 fdbe 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005e88:	4604      	mov	r4, r0
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	330c      	adds	r3, #12
 8005e8e:	681d      	ldr	r5, [r3, #0]
 8005e90:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005e94:	492e      	ldr	r1, [pc, #184]	; (8005f50 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x204>)
 8005e96:	4618      	mov	r0, r3
 8005e98:	f006 fcdb 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005e9c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	47a8      	blx	r5
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	3264      	adds	r2, #100	; 0x64
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005eb2:	2032      	movs	r0, #50	; 0x32
 8005eb4:	fb00 f101 	mul.w	r1, r0, r1
 8005eb8:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005ebc:	4408      	add	r0, r1
 8005ebe:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005ec2:	4401      	add	r1, r0
 8005ec4:	39d0      	subs	r1, #208	; 0xd0
 8005ec6:	7809      	ldrb	r1, [r1, #0]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	4790      	blx	r2
 8005ecc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f007 f876 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8005ed6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005eda:	4618      	mov	r0, r3
 8005edc:	f007 f871 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005ee0:	f7fd fd4c 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005ee4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005ee8:	3301      	adds	r3, #1
 8005eea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005eee:	e7ae      	b.n	8005e4e <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x102>
			}
			i++;
 8005ef0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005efa:	e78e      	b.n	8005e1a <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
	LONGS_EQUAL(STATUS_OK,response);
 8005efc:	f00e f88c 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8005f00:	4604      	mov	r4, r0
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	3338      	adds	r3, #56	; 0x38
 8005f06:	681d      	ldr	r5, [r3, #0]
 8005f08:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005f0c:	f00e f894 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005f10:	4603      	mov	r3, r0
 8005f12:	9302      	str	r3, [sp, #8]
 8005f14:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8005f18:	9301      	str	r3, [sp, #4]
 8005f1a:	4b0e      	ldr	r3, [pc, #56]	; (8005f54 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x208>)
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x20c>)
 8005f20:	4632      	mov	r2, r6
 8005f22:	2103      	movs	r1, #3
 8005f24:	4620      	mov	r0, r4
 8005f26:	47a8      	blx	r5

}
 8005f28:	bf00      	nop
 8005f2a:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f32:	bf00      	nop
 8005f34:	080237a4 	.word	0x080237a4
 8005f38:	080236e4 	.word	0x080236e4
 8005f3c:	08023518 	.word	0x08023518
 8005f40:	0802351c 	.word	0x0802351c
 8005f44:	08023530 	.word	0x08023530
 8005f48:	080235e4 	.word	0x080235e4
 8005f4c:	080235ec 	.word	0x080235ec
 8005f50:	08023538 	.word	0x08023538
 8005f54:	080231f4 	.word	0x080231f4
 8005f58:	0802377c 	.word	0x0802377c

08005f5c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff f864 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005f6c:	4a03      	ldr	r2, [pc, #12]	; (8005f7c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	08026b9c 	.word	0x08026b9c

08005f80 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005f80:	b590      	push	{r4, r7, lr}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8005f8c:	4906      	ldr	r1, [pc, #24]	; (8005fa8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005f8e:	2004      	movs	r0, #4
 8005f90:	f004 f89c 	bl	800a0cc <_ZnwjPKci>
 8005f94:	4604      	mov	r4, r0
 8005f96:	4620      	mov	r0, r4
 8005f98:	f7ff ffe0 	bl	8005f5c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 8005f9c:	4623      	mov	r3, r4
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd90      	pop	{r4, r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	080231f4 	.word	0x080231f4

08005fac <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f00c fc76 	bl	80128a8 <_ZN10UtestShellC1Ev>
 8005fbc:	4a03      	ldr	r2, [pc, #12]	; (8005fcc <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	08026af0 	.word	0x08026af0

08005fd0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fd2:	b08f      	sub	sp, #60	; 0x3c
 8005fd4:	af04      	add	r7, sp, #16
 8005fd6:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8005fd8:	f107 030c 	add.w	r3, r7, #12
 8005fdc:	492e      	ldr	r1, [pc, #184]	; (8006098 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xc8>)
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f006 fc37 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8005fe4:	f107 030c 	add.w	r3, r7, #12
 8005fe8:	2100      	movs	r1, #0
 8005fea:	4618      	mov	r0, r3
 8005fec:	f004 fd0a 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	681d      	ldr	r5, [r3, #0]
 8005ff8:	f107 0314 	add.w	r3, r7, #20
 8005ffc:	4927      	ldr	r1, [pc, #156]	; (800609c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xcc>)
 8005ffe:	4618      	mov	r0, r3
 8006000:	f006 fc27 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006004:	f107 0314 	add.w	r3, r7, #20
 8006008:	4619      	mov	r1, r3
 800600a:	4620      	mov	r0, r4
 800600c:	47a8      	blx	r5
 800600e:	4604      	mov	r4, r0
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	334c      	adds	r3, #76	; 0x4c
 8006014:	681d      	ldr	r5, [r3, #0]
 8006016:	f107 031c 	add.w	r3, r7, #28
 800601a:	4921      	ldr	r1, [pc, #132]	; (80060a0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 800601c:	4618      	mov	r0, r3
 800601e:	f006 fc18 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006022:	f107 031c 	add.w	r3, r7, #28
 8006026:	4a1f      	ldr	r2, [pc, #124]	; (80060a4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8006028:	4619      	mov	r1, r3
 800602a:	4620      	mov	r0, r4
 800602c:	47a8      	blx	r5
 800602e:	f107 031c 	add.w	r3, r7, #28
 8006032:	4618      	mov	r0, r3
 8006034:	f006 ffc5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8006038:	f107 0314 	add.w	r3, r7, #20
 800603c:	4618      	mov	r0, r3
 800603e:	f006 ffc0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8006042:	f107 030c 	add.w	r3, r7, #12
 8006046:	4618      	mov	r0, r3
 8006048:	f006 ffbb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 800604c:	f7fd fd3e 	bl	8003acc <Disconnect_Wifi>
 8006050:	4603      	mov	r3, r0
 8006052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8006056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800605a:	2b05      	cmp	r3, #5
 800605c:	d100      	bne.n	8006060 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x90>
		response = Disconnect_Wifi();
 800605e:	e7f5      	b.n	800604c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x7c>
			break;
 8006060:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8006062:	f00d ffd9 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8006066:	4604      	mov	r4, r0
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	3338      	adds	r3, #56	; 0x38
 800606c:	681d      	ldr	r5, [r3, #0]
 800606e:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8006072:	f00d ffe1 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006076:	4603      	mov	r3, r0
 8006078:	9302      	str	r3, [sp, #8]
 800607a:	f240 139b 	movw	r3, #411	; 0x19b
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	4b09      	ldr	r3, [pc, #36]	; (80060ac <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8006086:	4632      	mov	r2, r6
 8006088:	2102      	movs	r1, #2
 800608a:	4620      	mov	r0, r4
 800608c:	47a8      	blx	r5
}
 800608e:	bf00      	nop
 8006090:	372c      	adds	r7, #44	; 0x2c
 8006092:	46bd      	mov	sp, r7
 8006094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006096:	bf00      	nop
 8006098:	08023518 	.word	0x08023518
 800609c:	0802351c 	.word	0x0802351c
 80060a0:	08023530 	.word	0x08023530
 80060a4:	08023184 	.word	0x08023184
 80060a8:	080231f4 	.word	0x080231f4
 80060ac:	080235f4 	.word	0x080235f4

080060b0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fe ffba 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80060c0:	4a03      	ldr	r2, [pc, #12]	; (80060d0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4618      	mov	r0, r3
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	08026ad0 	.word	0x08026ad0

080060d4 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 80060d4:	b590      	push	{r4, r7, lr}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80060e0:	4906      	ldr	r1, [pc, #24]	; (80060fc <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 80060e2:	2004      	movs	r0, #4
 80060e4:	f003 fff2 	bl	800a0cc <_ZnwjPKci>
 80060e8:	4604      	mov	r4, r0
 80060ea:	4620      	mov	r0, r4
 80060ec:	f7ff ffe0 	bl	80060b0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 80060f0:	4623      	mov	r3, r4
 80060f2:	4618      	mov	r0, r3
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd90      	pop	{r4, r7, pc}
 80060fa:	bf00      	nop
 80060fc:	080231f4 	.word	0x080231f4

08006100 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4618      	mov	r0, r3
 800610c:	f00c fbcc 	bl	80128a8 <_ZN10UtestShellC1Ev>
 8006110:	4a03      	ldr	r2, [pc, #12]	; (8006120 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	08026a24 	.word	0x08026a24

08006124 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 8006124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006126:	b093      	sub	sp, #76	; 0x4c
 8006128:	af04      	add	r7, sp, #16
 800612a:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 800612c:	f107 0308 	add.w	r3, r7, #8
 8006130:	494a      	ldr	r1, [pc, #296]	; (800625c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 8006132:	4618      	mov	r0, r3
 8006134:	f006 fb8d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006138:	f107 0308 	add.w	r3, r7, #8
 800613c:	2100      	movs	r1, #0
 800613e:	4618      	mov	r0, r3
 8006140:	f004 fc60 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006144:	4604      	mov	r4, r0
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	330c      	adds	r3, #12
 800614a:	681d      	ldr	r5, [r3, #0]
 800614c:	f107 0310 	add.w	r3, r7, #16
 8006150:	4943      	ldr	r1, [pc, #268]	; (8006260 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x13c>)
 8006152:	4618      	mov	r0, r3
 8006154:	f006 fb7d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006158:	f107 0310 	add.w	r3, r7, #16
 800615c:	4619      	mov	r1, r3
 800615e:	4620      	mov	r0, r4
 8006160:	47a8      	blx	r5
 8006162:	4604      	mov	r4, r0
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	334c      	adds	r3, #76	; 0x4c
 8006168:	681d      	ldr	r5, [r3, #0]
 800616a:	f107 0318 	add.w	r3, r7, #24
 800616e:	493d      	ldr	r1, [pc, #244]	; (8006264 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x140>)
 8006170:	4618      	mov	r0, r3
 8006172:	f006 fb6e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006176:	f107 0318 	add.w	r3, r7, #24
 800617a:	4a3b      	ldr	r2, [pc, #236]	; (8006268 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x144>)
 800617c:	4619      	mov	r1, r3
 800617e:	4620      	mov	r0, r4
 8006180:	47a8      	blx	r5
 8006182:	f107 0318 	add.w	r3, r7, #24
 8006186:	4618      	mov	r0, r3
 8006188:	f006 ff1b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800618c:	f107 0310 	add.w	r3, r7, #16
 8006190:	4618      	mov	r0, r3
 8006192:	f006 ff16 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8006196:	f107 0308 	add.w	r3, r7, #8
 800619a:	4618      	mov	r0, r3
 800619c:	f006 ff11 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 80061a0:	f7fd fc94 	bl	8003acc <Disconnect_Wifi>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 80061aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061ae:	2b05      	cmp	r3, #5
 80061b0:	d139      	bne.n	8006226 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80061b2:	2300      	movs	r3, #0
 80061b4:	637b      	str	r3, [r7, #52]	; 0x34
 80061b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	dcf1      	bgt.n	80061a0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 80061bc:	f107 0320 	add.w	r3, r7, #32
 80061c0:	4926      	ldr	r1, [pc, #152]	; (800625c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 80061c2:	4618      	mov	r0, r3
 80061c4:	f006 fb45 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80061c8:	f107 0320 	add.w	r3, r7, #32
 80061cc:	2100      	movs	r1, #0
 80061ce:	4618      	mov	r0, r3
 80061d0:	f004 fc18 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80061d4:	4604      	mov	r4, r0
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	330c      	adds	r3, #12
 80061da:	681d      	ldr	r5, [r3, #0]
 80061dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061e0:	4922      	ldr	r1, [pc, #136]	; (800626c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x148>)
 80061e2:	4618      	mov	r0, r3
 80061e4:	f006 fb35 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80061e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061ec:	4619      	mov	r1, r3
 80061ee:	4620      	mov	r0, r4
 80061f0:	47a8      	blx	r5
 80061f2:	4603      	mov	r3, r0
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	3264      	adds	r2, #100	; 0x64
 80061f8:	6812      	ldr	r2, [r2, #0]
 80061fa:	481d      	ldr	r0, [pc, #116]	; (8006270 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x14c>)
 80061fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061fe:	4401      	add	r1, r0
 8006200:	7809      	ldrb	r1, [r1, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	4790      	blx	r2
 8006206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800620a:	4618      	mov	r0, r3
 800620c:	f006 fed9 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8006210:	f107 0320 	add.w	r3, r7, #32
 8006214:	4618      	mov	r0, r3
 8006216:	f006 fed4 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 800621a:	f7fd fbaf 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 800621e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006220:	3301      	adds	r3, #1
 8006222:	637b      	str	r3, [r7, #52]	; 0x34
 8006224:	e7c7      	b.n	80061b6 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x92>
			break;
 8006226:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8006228:	f00d fef6 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 800622c:	4604      	mov	r4, r0
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	3338      	adds	r3, #56	; 0x38
 8006232:	681d      	ldr	r5, [r3, #0]
 8006234:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8006238:	f00d fefe 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800623c:	4603      	mov	r3, r0
 800623e:	9302      	str	r3, [sp, #8]
 8006240:	f240 13b3 	movw	r3, #435	; 0x1b3
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x150>)
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x154>)
 800624c:	4632      	mov	r2, r6
 800624e:	2103      	movs	r1, #3
 8006250:	4620      	mov	r0, r4
 8006252:	47a8      	blx	r5
}
 8006254:	bf00      	nop
 8006256:	373c      	adds	r7, #60	; 0x3c
 8006258:	46bd      	mov	sp, r7
 800625a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800625c:	08023518 	.word	0x08023518
 8006260:	0802351c 	.word	0x0802351c
 8006264:	08023530 	.word	0x08023530
 8006268:	08023184 	.word	0x08023184
 800626c:	08023538 	.word	0x08023538
 8006270:	08023574 	.word	0x08023574
 8006274:	080231f4 	.word	0x080231f4
 8006278:	0802377c 	.word	0x0802377c

0800627c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Command_Process_Test)
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe fed4 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800628c:	4a03      	ldr	r2, [pc, #12]	; (800629c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	08026a04 	.word	0x08026a04

080062a0 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 80062a0:	b590      	push	{r4, r7, lr}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80062ac:	4906      	ldr	r1, [pc, #24]	; (80062c8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 80062ae:	2004      	movs	r0, #4
 80062b0:	f003 ff0c 	bl	800a0cc <_ZnwjPKci>
 80062b4:	4604      	mov	r4, r0
 80062b6:	4620      	mov	r0, r4
 80062b8:	f7ff ffe0 	bl	800627c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 80062bc:	4623      	mov	r3, r4
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd90      	pop	{r4, r7, pc}
 80062c6:	bf00      	nop
 80062c8:	080231f4 	.word	0x080231f4

080062cc <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f00c fae6 	bl	80128a8 <_ZN10UtestShellC1Ev>
 80062dc:	4a03      	ldr	r2, [pc, #12]	; (80062ec <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	08026958 	.word	0x08026958

080062f0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 80062f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062f2:	b09b      	sub	sp, #108	; 0x6c
 80062f4:	af04      	add	r7, sp, #16
 80062f6:	6078      	str	r0, [r7, #4]
	char *response_arr[3] =
 80062f8:	4a6d      	ldr	r2, [pc, #436]	; (80064b0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c0>)
 80062fa:	f107 0314 	add.w	r3, r7, #20
 80062fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8006300:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{ "OK\r\n",									// station mode response
	  "OK\r\n",								// check wifi connection response
	  "OK\r\n"								// connect wifi command response
	};

	char *fake_command_buffer[3] =
 8006304:	4a6b      	ldr	r2, [pc, #428]	; (80064b4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c4>)
 8006306:	f107 0308 	add.w	r3, r7, #8
 800630a:	ca07      	ldmia	r2, {r0, r1, r2}
 800630c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CWMODE=1\r\n",
		(char*)"AT+CWQAP\r\n",
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8006310:	2300      	movs	r3, #0
 8006312:	657b      	str	r3, [r7, #84]	; 0x54
 8006314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006316:	2b02      	cmp	r3, #2
 8006318:	dc43      	bgt.n	80063a2 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 800631a:	f107 0320 	add.w	r3, r7, #32
 800631e:	4966      	ldr	r1, [pc, #408]	; (80064b8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 8006320:	4618      	mov	r0, r3
 8006322:	f006 fa96 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006326:	f107 0320 	add.w	r3, r7, #32
 800632a:	2100      	movs	r1, #0
 800632c:	4618      	mov	r0, r3
 800632e:	f004 fb69 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006332:	4604      	mov	r4, r0
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	330c      	adds	r3, #12
 8006338:	681d      	ldr	r5, [r3, #0]
 800633a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800633e:	495f      	ldr	r1, [pc, #380]	; (80064bc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1cc>)
 8006340:	4618      	mov	r0, r3
 8006342:	f006 fa86 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800634a:	4619      	mov	r1, r3
 800634c:	4620      	mov	r0, r4
 800634e:	47a8      	blx	r5
 8006350:	4604      	mov	r4, r0
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	334c      	adds	r3, #76	; 0x4c
 8006356:	681d      	ldr	r5, [r3, #0]
 8006358:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800635c:	4958      	ldr	r1, [pc, #352]	; (80064c0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d0>)
 800635e:	4618      	mov	r0, r3
 8006360:	f006 fa77 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800636c:	4413      	add	r3, r2
 800636e:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8006372:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006376:	4619      	mov	r1, r3
 8006378:	4620      	mov	r0, r4
 800637a:	47a8      	blx	r5
 800637c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006380:	4618      	mov	r0, r3
 8006382:	f006 fe1e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8006386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800638a:	4618      	mov	r0, r3
 800638c:	f006 fe19 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8006390:	f107 0320 	add.w	r3, r7, #32
 8006394:	4618      	mov	r0, r3
 8006396:	f006 fe14 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 800639a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800639c:	3301      	adds	r3, #1
 800639e:	657b      	str	r3, [r7, #84]	; 0x54
 80063a0:	e7b8      	b.n	8006314 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x24>
	}
	Status response;
	int i = 0;
 80063a2:	2300      	movs	r3, #0
 80063a4:	653b      	str	r3, [r7, #80]	; 0x50
	while(1)
	{
		response = Command_Process(fake_command_buffer, response_arr, 3);
 80063a6:	f107 0114 	add.w	r1, r7, #20
 80063aa:	f107 0308 	add.w	r3, r7, #8
 80063ae:	2203      	movs	r2, #3
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fd fba7 	bl	8003b04 <Command_Process>
 80063b6:	4603      	mov	r3, r0
 80063b8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 80063bc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d05b      	beq.n	800647c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x18c>
 80063c4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d057      	beq.n	800647c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x18c>
 80063cc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d053      	beq.n	800647c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x18c>
		{
			break;
		}

		if(i<3)
 80063d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	dce5      	bgt.n	80063a6 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80063da:	2300      	movs	r3, #0
 80063dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80063e6:	4413      	add	r3, r2
 80063e8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7f9 ff25 	bl	800023c <strlen>
 80063f2:	4603      	mov	r3, r0
 80063f4:	461a      	mov	r2, r3
 80063f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f8:	4293      	cmp	r3, r2
 80063fa:	da3b      	bge.n	8006474 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x184>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80063fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006400:	492d      	ldr	r1, [pc, #180]	; (80064b8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 8006402:	4618      	mov	r0, r3
 8006404:	f006 fa25 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006408:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800640c:	2100      	movs	r1, #0
 800640e:	4618      	mov	r0, r3
 8006410:	f004 faf8 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006414:	4604      	mov	r4, r0
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	330c      	adds	r3, #12
 800641a:	681d      	ldr	r5, [r3, #0]
 800641c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006420:	4928      	ldr	r1, [pc, #160]	; (80064c4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d4>)
 8006422:	4618      	mov	r0, r3
 8006424:	f006 fa15 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006428:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800642c:	4619      	mov	r1, r3
 800642e:	4620      	mov	r0, r4
 8006430:	47a8      	blx	r5
 8006432:	4602      	mov	r2, r0
 8006434:	6813      	ldr	r3, [r2, #0]
 8006436:	3364      	adds	r3, #100	; 0x64
 8006438:	681c      	ldr	r4, [r3, #0]
 800643a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006442:	440b      	add	r3, r1
 8006444:	f853 1c44 	ldr.w	r1, [r3, #-68]
 8006448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644a:	440b      	add	r3, r1
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	4619      	mov	r1, r3
 8006450:	4610      	mov	r0, r2
 8006452:	47a0      	blx	r4
 8006454:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006458:	4618      	mov	r0, r3
 800645a:	f006 fdb2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800645e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006462:	4618      	mov	r0, r3
 8006464:	f006 fdad 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006468:	f7fd fa88 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800646c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800646e:	3301      	adds	r3, #1
 8006470:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006472:	e7b4      	b.n	80063de <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xee>
			}
			i++;
 8006474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006476:	3301      	adds	r3, #1
 8006478:	653b      	str	r3, [r7, #80]	; 0x50
		}

	}
 800647a:	e794      	b.n	80063a6 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
	LONGS_EQUAL(STATUS_OK,response);
 800647c:	f00d fdcc 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8006480:	4604      	mov	r4, r0
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	3338      	adds	r3, #56	; 0x38
 8006486:	681d      	ldr	r5, [r3, #0]
 8006488:	f897 604b 	ldrb.w	r6, [r7, #75]	; 0x4b
 800648c:	f00d fdd4 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006490:	4603      	mov	r3, r0
 8006492:	9302      	str	r3, [sp, #8]
 8006494:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8006498:	9301      	str	r3, [sp, #4]
 800649a:	4b0b      	ldr	r3, [pc, #44]	; (80064c8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d8>)
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1dc>)
 80064a0:	4632      	mov	r2, r6
 80064a2:	2103      	movs	r1, #3
 80064a4:	4620      	mov	r0, r4
 80064a6:	47a8      	blx	r5

}
 80064a8:	bf00      	nop
 80064aa:	375c      	adds	r7, #92	; 0x5c
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b0:	0802383c 	.word	0x0802383c
 80064b4:	08023848 	.word	0x08023848
 80064b8:	08023518 	.word	0x08023518
 80064bc:	0802351c 	.word	0x0802351c
 80064c0:	08023530 	.word	0x08023530
 80064c4:	08023538 	.word	0x08023538
 80064c8:	080231f4 	.word	0x080231f4
 80064cc:	0802377c 	.word	0x0802377c

080064d0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Test)
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fe fdaa 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80064e0:	4a03      	ldr	r2, [pc, #12]	; (80064f0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev+0x20>)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	08026938 	.word	0x08026938

080064f4 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv>:
 80064f4:	b590      	push	{r4, r7, lr}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8006500:	4906      	ldr	r1, [pc, #24]	; (800651c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv+0x28>)
 8006502:	2004      	movs	r0, #4
 8006504:	f003 fde2 	bl	800a0cc <_ZnwjPKci>
 8006508:	4604      	mov	r4, r0
 800650a:	4620      	mov	r0, r4
 800650c:	f7ff ffe0 	bl	80064d0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>
 8006510:	4623      	mov	r3, r4
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	bd90      	pop	{r4, r7, pc}
 800651a:	bf00      	nop
 800651c:	080231f4 	.word	0x080231f4

08006520 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>:
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4618      	mov	r0, r3
 800652c:	f00c f9bc 	bl	80128a8 <_ZN10UtestShellC1Ev>
 8006530:	4a03      	ldr	r2, [pc, #12]	; (8006540 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev+0x20>)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4618      	mov	r0, r3
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	0802688c 	.word	0x0802688c

08006544 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv>:
{
 8006544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006546:	b0bf      	sub	sp, #252	; 0xfc
 8006548:	af04      	add	r7, sp, #16
 800654a:	6078      	str	r0, [r7, #4]
	char response_arr[3][50] =
 800654c:	4a74      	ldr	r2, [pc, #464]	; (8006720 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1dc>)
 800654e:	f107 0318 	add.w	r3, r7, #24
 8006552:	4611      	mov	r1, r2
 8006554:	2296      	movs	r2, #150	; 0x96
 8006556:	4618      	mov	r0, r3
 8006558:	f019 fe50 	bl	80201fc <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "OK\r\n"
	};

	char *fake_command_buffer[3] =
 800655c:	4a71      	ldr	r2, [pc, #452]	; (8006724 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e0>)
 800655e:	f107 030c 	add.w	r3, r7, #12
 8006562:	ca07      	ldmia	r2, {r0, r1, r2}
 8006564:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CIPCLOSE\r\n",
		(char*)"AT+CIPMUX=0\r\n",
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<3;i++)
 8006568:	2300      	movs	r3, #0
 800656a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800656e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006572:	2b02      	cmp	r3, #2
 8006574:	dc46      	bgt.n	8006604 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 8006576:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800657a:	496b      	ldr	r1, [pc, #428]	; (8006728 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 800657c:	4618      	mov	r0, r3
 800657e:	f006 f968 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006582:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006586:	2100      	movs	r1, #0
 8006588:	4618      	mov	r0, r3
 800658a:	f004 fa3b 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800658e:	4604      	mov	r4, r0
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	330c      	adds	r3, #12
 8006594:	681d      	ldr	r5, [r3, #0]
 8006596:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800659a:	4964      	ldr	r1, [pc, #400]	; (800672c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e8>)
 800659c:	4618      	mov	r0, r3
 800659e:	f006 f958 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80065a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80065a6:	4619      	mov	r1, r3
 80065a8:	4620      	mov	r0, r4
 80065aa:	47a8      	blx	r5
 80065ac:	4604      	mov	r4, r0
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	334c      	adds	r3, #76	; 0x4c
 80065b2:	681d      	ldr	r5, [r3, #0]
 80065b4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80065b8:	495d      	ldr	r1, [pc, #372]	; (8006730 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1ec>)
 80065ba:	4618      	mov	r0, r3
 80065bc:	f006 f949 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80065c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80065ca:	4413      	add	r3, r2
 80065cc:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 80065d0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80065d4:	4619      	mov	r1, r3
 80065d6:	4620      	mov	r0, r4
 80065d8:	47a8      	blx	r5
 80065da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80065de:	4618      	mov	r0, r3
 80065e0:	f006 fcef 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80065e4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80065e8:	4618      	mov	r0, r3
 80065ea:	f006 fcea 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80065ee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80065f2:	4618      	mov	r0, r3
 80065f4:	f006 fce5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 80065f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fc:	3301      	adds	r3, #1
 80065fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006602:	e7b4      	b.n	800656e <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x2a>
	}

	Status response;
	int i = 0;
 8006604:	2300      	movs	r3, #0
 8006606:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 800660a:	494a      	ldr	r1, [pc, #296]	; (8006734 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f0>)
 800660c:	484a      	ldr	r0, [pc, #296]	; (8006738 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f4>)
 800660e:	f7fd faff 	bl	8003c10 <Connect_TCP_Server>
 8006612:	4603      	mov	r3, r0
 8006614:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8006618:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800661c:	2b04      	cmp	r3, #4
 800661e:	d065      	beq.n	80066ec <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1a8>
 8006620:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006624:	2b03      	cmp	r3, #3
 8006626:	d061      	beq.n	80066ec <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1a8>
 8006628:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800662c:	2b02      	cmp	r3, #2
 800662e:	d05d      	beq.n	80066ec <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1a8>
		{
			break;
		}

		if(i<3)
 8006630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006634:	2b02      	cmp	r3, #2
 8006636:	dce8      	bgt.n	800660a <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006638:	2300      	movs	r3, #0
 800663a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800663e:	f107 0218 	add.w	r2, r7, #24
 8006642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006646:	2132      	movs	r1, #50	; 0x32
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	4413      	add	r3, r2
 800664e:	4618      	mov	r0, r3
 8006650:	f7f9 fdf4 	bl	800023c <strlen>
 8006654:	4603      	mov	r3, r0
 8006656:	461a      	mov	r2, r3
 8006658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800665c:	4293      	cmp	r3, r2
 800665e:	da3f      	bge.n	80066e0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x19c>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006660:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006664:	4930      	ldr	r1, [pc, #192]	; (8006728 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 8006666:	4618      	mov	r0, r3
 8006668:	f006 f8f3 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800666c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006670:	2100      	movs	r1, #0
 8006672:	4618      	mov	r0, r3
 8006674:	f004 f9c6 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006678:	4604      	mov	r4, r0
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	330c      	adds	r3, #12
 800667e:	681d      	ldr	r5, [r3, #0]
 8006680:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006684:	492d      	ldr	r1, [pc, #180]	; (800673c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f8>)
 8006686:	4618      	mov	r0, r3
 8006688:	f006 f8e3 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800668c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006690:	4619      	mov	r1, r3
 8006692:	4620      	mov	r0, r4
 8006694:	47a8      	blx	r5
 8006696:	4603      	mov	r3, r0
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	3264      	adds	r2, #100	; 0x64
 800669c:	6812      	ldr	r2, [r2, #0]
 800669e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80066a2:	2032      	movs	r0, #50	; 0x32
 80066a4:	fb00 f101 	mul.w	r1, r0, r1
 80066a8:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 80066ac:	4408      	add	r0, r1
 80066ae:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80066b2:	4401      	add	r1, r0
 80066b4:	39d0      	subs	r1, #208	; 0xd0
 80066b6:	7809      	ldrb	r1, [r1, #0]
 80066b8:	4618      	mov	r0, r3
 80066ba:	4790      	blx	r2
 80066bc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80066c0:	4618      	mov	r0, r3
 80066c2:	f006 fc7e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80066c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80066ca:	4618      	mov	r0, r3
 80066cc:	f006 fc79 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80066d0:	f7fd f954 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80066d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066d8:	3301      	adds	r3, #1
 80066da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066de:	e7ae      	b.n	800663e <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xfa>
			}
			i++;
 80066e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e4:	3301      	adds	r3, #1
 80066e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		}

	}
 80066ea:	e78e      	b.n	800660a <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc6>
	LONGS_EQUAL(STATUS_OK,response);
 80066ec:	f00d fc94 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 80066f0:	4604      	mov	r4, r0
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	3338      	adds	r3, #56	; 0x38
 80066f6:	681d      	ldr	r5, [r3, #0]
 80066f8:	f897 60db 	ldrb.w	r6, [r7, #219]	; 0xdb
 80066fc:	f00d fc9c 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006700:	4603      	mov	r3, r0
 8006702:	9302      	str	r3, [sp, #8]
 8006704:	f240 230b 	movw	r3, #523	; 0x20b
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	4b0d      	ldr	r3, [pc, #52]	; (8006740 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1fc>)
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	4b0d      	ldr	r3, [pc, #52]	; (8006744 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x200>)
 8006710:	4632      	mov	r2, r6
 8006712:	2103      	movs	r1, #3
 8006714:	4620      	mov	r0, r4
 8006716:	47a8      	blx	r5

}
 8006718:	bf00      	nop
 800671a:	37ec      	adds	r7, #236	; 0xec
 800671c:	46bd      	mov	sp, r7
 800671e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006720:	080237a4 	.word	0x080237a4
 8006724:	08023864 	.word	0x08023864
 8006728:	08023518 	.word	0x08023518
 800672c:	0802351c 	.word	0x0802351c
 8006730:	08023530 	.word	0x08023530
 8006734:	08023854 	.word	0x08023854
 8006738:	08023858 	.word	0x08023858
 800673c:	08023538 	.word	0x08023538
 8006740:	080231f4 	.word	0x080231f4
 8006744:	0802377c 	.word	0x0802377c

08006748 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4618      	mov	r0, r3
 8006754:	f7fe fc6e 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006758:	4a03      	ldr	r2, [pc, #12]	; (8006768 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev+0x20>)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4618      	mov	r0, r3
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	0802686c 	.word	0x0802686c

0800676c <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv>:
 800676c:	b590      	push	{r4, r7, lr}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	f240 220f 	movw	r2, #527	; 0x20f
 8006778:	4906      	ldr	r1, [pc, #24]	; (8006794 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv+0x28>)
 800677a:	2004      	movs	r0, #4
 800677c:	f003 fca6 	bl	800a0cc <_ZnwjPKci>
 8006780:	4604      	mov	r4, r0
 8006782:	4620      	mov	r0, r4
 8006784:	f7ff ffe0 	bl	8006748 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>
 8006788:	4623      	mov	r3, r4
 800678a:	4618      	mov	r0, r3
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	bd90      	pop	{r4, r7, pc}
 8006792:	bf00      	nop
 8006794:	080231f4 	.word	0x080231f4

08006798 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>:
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f00c f880 	bl	80128a8 <_ZN10UtestShellC1Ev>
 80067a8:	4a03      	ldr	r2, [pc, #12]	; (80067b8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev+0x20>)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4618      	mov	r0, r3
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	080267c0 	.word	0x080267c0

080067bc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv>:
{
 80067bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067be:	b091      	sub	sp, #68	; 0x44
 80067c0:	af04      	add	r7, sp, #16
 80067c2:	6078      	str	r0, [r7, #4]

	char *fake_command_buffer[3] =
 80067c4:	4a36      	ldr	r2, [pc, #216]	; (80068a0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe4>)
 80067c6:	f107 0308 	add.w	r3, r7, #8
 80067ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80067cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CIPCLOSE\r\n",
		(char*)"AT+CIPMUX=0\r\n",
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[0]);
 80067d0:	f107 0314 	add.w	r3, r7, #20
 80067d4:	4933      	ldr	r1, [pc, #204]	; (80068a4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe8>)
 80067d6:	4618      	mov	r0, r3
 80067d8:	f006 f83b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80067dc:	f107 0314 	add.w	r3, r7, #20
 80067e0:	2100      	movs	r1, #0
 80067e2:	4618      	mov	r0, r3
 80067e4:	f004 f90e 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80067e8:	4604      	mov	r4, r0
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	330c      	adds	r3, #12
 80067ee:	681d      	ldr	r5, [r3, #0]
 80067f0:	f107 031c 	add.w	r3, r7, #28
 80067f4:	492c      	ldr	r1, [pc, #176]	; (80068a8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xec>)
 80067f6:	4618      	mov	r0, r3
 80067f8:	f006 f82b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80067fc:	f107 031c 	add.w	r3, r7, #28
 8006800:	4619      	mov	r1, r3
 8006802:	4620      	mov	r0, r4
 8006804:	47a8      	blx	r5
 8006806:	4604      	mov	r4, r0
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	334c      	adds	r3, #76	; 0x4c
 800680c:	681d      	ldr	r5, [r3, #0]
 800680e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006812:	4926      	ldr	r1, [pc, #152]	; (80068ac <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf0>)
 8006814:	4618      	mov	r0, r3
 8006816:	f006 f81c 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006820:	4619      	mov	r1, r3
 8006822:	4620      	mov	r0, r4
 8006824:	47a8      	blx	r5
 8006826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800682a:	4618      	mov	r0, r3
 800682c:	f006 fbc9 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8006830:	f107 031c 	add.w	r3, r7, #28
 8006834:	4618      	mov	r0, r3
 8006836:	f006 fbc4 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800683a:	f107 0314 	add.w	r3, r7, #20
 800683e:	4618      	mov	r0, r3
 8006840:	f006 fbbf 	bl	800cfc2 <_ZN12SimpleStringD1Ev>


	Status response;
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006844:	491a      	ldr	r1, [pc, #104]	; (80068b0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf4>)
 8006846:	481b      	ldr	r0, [pc, #108]	; (80068b4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf8>)
 8006848:	f7fd f9e2 	bl	8003c10 <Connect_TCP_Server>
 800684c:	4603      	mov	r3, r0
 800684e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8006852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006856:	2b04      	cmp	r3, #4
 8006858:	d008      	beq.n	800686c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xb0>
 800685a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800685e:	2b03      	cmp	r3, #3
 8006860:	d004      	beq.n	800686c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xb0>
 8006862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006866:	2b02      	cmp	r3, #2
 8006868:	d000      	beq.n	800686c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xb0>
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 800686a:	e7eb      	b.n	8006844 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x88>
		{
			break;
		}

	}
	LONGS_EQUAL(TIMEOUT_ERROR,response);
 800686c:	f00d fbd4 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8006870:	4604      	mov	r4, r0
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	3338      	adds	r3, #56	; 0x38
 8006876:	681d      	ldr	r5, [r3, #0]
 8006878:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 800687c:	f00d fbdc 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006880:	4603      	mov	r3, r0
 8006882:	9302      	str	r3, [sp, #8]
 8006884:	f240 2326 	movw	r3, #550	; 0x226
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	4b0b      	ldr	r3, [pc, #44]	; (80068b8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xfc>)
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x100>)
 8006890:	4632      	mov	r2, r6
 8006892:	2102      	movs	r1, #2
 8006894:	4620      	mov	r0, r4
 8006896:	47a8      	blx	r5

}
 8006898:	bf00      	nop
 800689a:	3734      	adds	r7, #52	; 0x34
 800689c:	46bd      	mov	sp, r7
 800689e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068a0:	08023864 	.word	0x08023864
 80068a4:	08023518 	.word	0x08023518
 80068a8:	0802351c 	.word	0x0802351c
 80068ac:	08023530 	.word	0x08023530
 80068b0:	08023854 	.word	0x08023854
 80068b4:	08023858 	.word	0x08023858
 80068b8:	080231f4 	.word	0x080231f4
 80068bc:	080235f4 	.word	0x080235f4

080068c0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe fbb2 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80068d0:	4a03      	ldr	r2, [pc, #12]	; (80068e0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev+0x20>)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	080267a0 	.word	0x080267a0

080068e4 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv>:
 80068e4:	b590      	push	{r4, r7, lr}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	f240 222a 	movw	r2, #554	; 0x22a
 80068f0:	4906      	ldr	r1, [pc, #24]	; (800690c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv+0x28>)
 80068f2:	2004      	movs	r0, #4
 80068f4:	f003 fbea 	bl	800a0cc <_ZnwjPKci>
 80068f8:	4604      	mov	r4, r0
 80068fa:	4620      	mov	r0, r4
 80068fc:	f7ff ffe0 	bl	80068c0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>
 8006900:	4623      	mov	r3, r4
 8006902:	4618      	mov	r0, r3
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	bd90      	pop	{r4, r7, pc}
 800690a:	bf00      	nop
 800690c:	080231f4 	.word	0x080231f4

08006910 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>:
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4618      	mov	r0, r3
 800691c:	f00b ffc4 	bl	80128a8 <_ZN10UtestShellC1Ev>
 8006920:	4a03      	ldr	r2, [pc, #12]	; (8006930 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev+0x20>)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	080266f4 	.word	0x080266f4

08006934 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv>:
{
 8006934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006936:	b0bf      	sub	sp, #252	; 0xfc
 8006938:	af04      	add	r7, sp, #16
 800693a:	6078      	str	r0, [r7, #4]
	char response_arr[3][50] =
 800693c:	4a74      	ldr	r2, [pc, #464]	; (8006b10 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1dc>)
 800693e:	f107 0318 	add.w	r3, r7, #24
 8006942:	4611      	mov	r1, r2
 8006944:	2296      	movs	r2, #150	; 0x96
 8006946:	4618      	mov	r0, r3
 8006948:	f019 fc58 	bl	80201fc <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "ERROR\r\n"
	};

	char *fake_command_buffer[3] =
 800694c:	4a71      	ldr	r2, [pc, #452]	; (8006b14 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e0>)
 800694e:	f107 030c 	add.w	r3, r7, #12
 8006952:	ca07      	ldmia	r2, {r0, r1, r2}
 8006954:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CIPCLOSE\r\n",
		(char*)"AT+CIPMUX=0\r\n",
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<3;i++)
 8006958:	2300      	movs	r3, #0
 800695a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800695e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006962:	2b02      	cmp	r3, #2
 8006964:	dc46      	bgt.n	80069f4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 8006966:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800696a:	496b      	ldr	r1, [pc, #428]	; (8006b18 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 800696c:	4618      	mov	r0, r3
 800696e:	f005 ff70 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006972:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006976:	2100      	movs	r1, #0
 8006978:	4618      	mov	r0, r3
 800697a:	f004 f843 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800697e:	4604      	mov	r4, r0
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	330c      	adds	r3, #12
 8006984:	681d      	ldr	r5, [r3, #0]
 8006986:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800698a:	4964      	ldr	r1, [pc, #400]	; (8006b1c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e8>)
 800698c:	4618      	mov	r0, r3
 800698e:	f005 ff60 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006992:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006996:	4619      	mov	r1, r3
 8006998:	4620      	mov	r0, r4
 800699a:	47a8      	blx	r5
 800699c:	4604      	mov	r4, r0
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	334c      	adds	r3, #76	; 0x4c
 80069a2:	681d      	ldr	r5, [r3, #0]
 80069a4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80069a8:	495d      	ldr	r1, [pc, #372]	; (8006b20 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1ec>)
 80069aa:	4618      	mov	r0, r3
 80069ac:	f005 ff51 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80069b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80069ba:	4413      	add	r3, r2
 80069bc:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 80069c0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80069c4:	4619      	mov	r1, r3
 80069c6:	4620      	mov	r0, r4
 80069c8:	47a8      	blx	r5
 80069ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f006 faf7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80069d4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80069d8:	4618      	mov	r0, r3
 80069da:	f006 faf2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80069de:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80069e2:	4618      	mov	r0, r3
 80069e4:	f006 faed 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 80069e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ec:	3301      	adds	r3, #1
 80069ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069f2:	e7b4      	b.n	800695e <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x2a>
	}

	Status response;
	int i = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 80069fa:	494a      	ldr	r1, [pc, #296]	; (8006b24 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f0>)
 80069fc:	484a      	ldr	r0, [pc, #296]	; (8006b28 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f4>)
 80069fe:	f7fd f907 	bl	8003c10 <Connect_TCP_Server>
 8006a02:	4603      	mov	r3, r0
 8006a04:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8006a08:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d065      	beq.n	8006adc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1a8>
 8006a10:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	d061      	beq.n	8006adc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1a8>
 8006a18:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d05d      	beq.n	8006adc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1a8>
		{
			break;
		}

		if(i<3)
 8006a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	dce8      	bgt.n	80069fa <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a2e:	f107 0218 	add.w	r2, r7, #24
 8006a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a36:	2132      	movs	r1, #50	; 0x32
 8006a38:	fb01 f303 	mul.w	r3, r1, r3
 8006a3c:	4413      	add	r3, r2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7f9 fbfc 	bl	800023c <strlen>
 8006a44:	4603      	mov	r3, r0
 8006a46:	461a      	mov	r2, r3
 8006a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	da3f      	bge.n	8006ad0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x19c>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006a50:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006a54:	4930      	ldr	r1, [pc, #192]	; (8006b18 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 8006a56:	4618      	mov	r0, r3
 8006a58:	f005 fefb 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006a5c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006a60:	2100      	movs	r1, #0
 8006a62:	4618      	mov	r0, r3
 8006a64:	f003 ffce 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006a68:	4604      	mov	r4, r0
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	330c      	adds	r3, #12
 8006a6e:	681d      	ldr	r5, [r3, #0]
 8006a70:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006a74:	492d      	ldr	r1, [pc, #180]	; (8006b2c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f8>)
 8006a76:	4618      	mov	r0, r3
 8006a78:	f005 feeb 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006a7c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006a80:	4619      	mov	r1, r3
 8006a82:	4620      	mov	r0, r4
 8006a84:	47a8      	blx	r5
 8006a86:	4603      	mov	r3, r0
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	3264      	adds	r2, #100	; 0x64
 8006a8c:	6812      	ldr	r2, [r2, #0]
 8006a8e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006a92:	2032      	movs	r0, #50	; 0x32
 8006a94:	fb00 f101 	mul.w	r1, r0, r1
 8006a98:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8006a9c:	4408      	add	r0, r1
 8006a9e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006aa2:	4401      	add	r1, r0
 8006aa4:	39d0      	subs	r1, #208	; 0xd0
 8006aa6:	7809      	ldrb	r1, [r1, #0]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	4790      	blx	r2
 8006aac:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f006 fa86 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8006ab6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006aba:	4618      	mov	r0, r3
 8006abc:	f006 fa81 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006ac0:	f7fc ff5c 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ac8:	3301      	adds	r3, #1
 8006aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ace:	e7ae      	b.n	8006a2e <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xfa>
			}
			i++;
 8006ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		}

	}
 8006ada:	e78e      	b.n	80069fa <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc6>
	LONGS_EQUAL(STATUS_ERROR,response);
 8006adc:	f00d fa9c 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	3338      	adds	r3, #56	; 0x38
 8006ae6:	681d      	ldr	r5, [r3, #0]
 8006ae8:	f897 60db 	ldrb.w	r6, [r7, #219]	; 0xdb
 8006aec:	f00d faa4 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006af0:	4603      	mov	r3, r0
 8006af2:	9302      	str	r3, [sp, #8]
 8006af4:	f240 2353 	movw	r3, #595	; 0x253
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	4b0d      	ldr	r3, [pc, #52]	; (8006b30 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1fc>)
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x200>)
 8006b00:	4632      	mov	r2, r6
 8006b02:	2104      	movs	r1, #4
 8006b04:	4620      	mov	r0, r4
 8006b06:	47a8      	blx	r5

}
 8006b08:	bf00      	nop
 8006b0a:	37ec      	adds	r7, #236	; 0xec
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b10:	0802364c 	.word	0x0802364c
 8006b14:	08023864 	.word	0x08023864
 8006b18:	08023518 	.word	0x08023518
 8006b1c:	0802351c 	.word	0x0802351c
 8006b20:	08023530 	.word	0x08023530
 8006b24:	08023854 	.word	0x08023854
 8006b28:	08023858 	.word	0x08023858
 8006b2c:	08023538 	.word	0x08023538
 8006b30:	080231f4 	.word	0x080231f4
 8006b34:	08023620 	.word	0x08023620

08006b38 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fe fa76 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006b48:	4a03      	ldr	r2, [pc, #12]	; (8006b58 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev+0x20>)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	080266d4 	.word	0x080266d4

08006b5c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv>:
 8006b5c:	b590      	push	{r4, r7, lr}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	f240 2257 	movw	r2, #599	; 0x257
 8006b68:	4906      	ldr	r1, [pc, #24]	; (8006b84 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv+0x28>)
 8006b6a:	2004      	movs	r0, #4
 8006b6c:	f003 faae 	bl	800a0cc <_ZnwjPKci>
 8006b70:	4604      	mov	r4, r0
 8006b72:	4620      	mov	r0, r4
 8006b74:	f7ff ffe0 	bl	8006b38 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>
 8006b78:	4623      	mov	r3, r4
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd90      	pop	{r4, r7, pc}
 8006b82:	bf00      	nop
 8006b84:	080231f4 	.word	0x080231f4

08006b88 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>:
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f00b fe88 	bl	80128a8 <_ZN10UtestShellC1Ev>
 8006b98:	4a03      	ldr	r2, [pc, #12]	; (8006ba8 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev+0x20>)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	08026628 	.word	0x08026628

08006bac <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv>:
{
 8006bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bae:	b093      	sub	sp, #76	; 0x4c
 8006bb0:	af04      	add	r7, sp, #16
 8006bb2:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CIPCLOSE);
 8006bb4:	f107 0308 	add.w	r3, r7, #8
 8006bb8:	494a      	ldr	r1, [pc, #296]	; (8006ce4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f005 fe49 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006bc0:	f107 0308 	add.w	r3, r7, #8
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f003 ff1c 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006bcc:	4604      	mov	r4, r0
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	330c      	adds	r3, #12
 8006bd2:	681d      	ldr	r5, [r3, #0]
 8006bd4:	f107 0310 	add.w	r3, r7, #16
 8006bd8:	4943      	ldr	r1, [pc, #268]	; (8006ce8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x13c>)
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f005 fe39 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006be0:	f107 0310 	add.w	r3, r7, #16
 8006be4:	4619      	mov	r1, r3
 8006be6:	4620      	mov	r0, r4
 8006be8:	47a8      	blx	r5
 8006bea:	4604      	mov	r4, r0
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	334c      	adds	r3, #76	; 0x4c
 8006bf0:	681d      	ldr	r5, [r3, #0]
 8006bf2:	f107 0318 	add.w	r3, r7, #24
 8006bf6:	493d      	ldr	r1, [pc, #244]	; (8006cec <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x140>)
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f005 fe2a 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006bfe:	f107 0318 	add.w	r3, r7, #24
 8006c02:	4a3b      	ldr	r2, [pc, #236]	; (8006cf0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x144>)
 8006c04:	4619      	mov	r1, r3
 8006c06:	4620      	mov	r0, r4
 8006c08:	47a8      	blx	r5
 8006c0a:	f107 0318 	add.w	r3, r7, #24
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f006 f9d7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8006c14:	f107 0310 	add.w	r3, r7, #16
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f006 f9d2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8006c1e:	f107 0308 	add.w	r3, r7, #8
 8006c22:	4618      	mov	r0, r3
 8006c24:	f006 f9cd 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_TCP_Server();
 8006c28:	f7fd f82c 	bl	8003c84 <Disconnect_TCP_Server>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 8006c32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c36:	2b05      	cmp	r3, #5
 8006c38:	d139      	bne.n	8006cae <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	dcf1      	bgt.n	8006c28 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8006c44:	f107 0320 	add.w	r3, r7, #32
 8006c48:	4926      	ldr	r1, [pc, #152]	; (8006ce4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f005 fe01 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006c50:	f107 0320 	add.w	r3, r7, #32
 8006c54:	2100      	movs	r1, #0
 8006c56:	4618      	mov	r0, r3
 8006c58:	f003 fed4 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	330c      	adds	r3, #12
 8006c62:	681d      	ldr	r5, [r3, #0]
 8006c64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c68:	4922      	ldr	r1, [pc, #136]	; (8006cf4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x148>)
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f005 fdf1 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006c70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c74:	4619      	mov	r1, r3
 8006c76:	4620      	mov	r0, r4
 8006c78:	47a8      	blx	r5
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	3264      	adds	r2, #100	; 0x64
 8006c80:	6812      	ldr	r2, [r2, #0]
 8006c82:	481d      	ldr	r0, [pc, #116]	; (8006cf8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x14c>)
 8006c84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c86:	4401      	add	r1, r0
 8006c88:	7809      	ldrb	r1, [r1, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	4790      	blx	r2
 8006c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c92:	4618      	mov	r0, r3
 8006c94:	f006 f995 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8006c98:	f107 0320 	add.w	r3, r7, #32
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f006 f990 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8006ca2:	f7fc fe6b 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca8:	3301      	adds	r3, #1
 8006caa:	637b      	str	r3, [r7, #52]	; 0x34
 8006cac:	e7c7      	b.n	8006c3e <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x92>
			break;
 8006cae:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8006cb0:	f00d f9b2 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	3338      	adds	r3, #56	; 0x38
 8006cba:	681d      	ldr	r5, [r3, #0]
 8006cbc:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8006cc0:	f00d f9ba 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	9302      	str	r3, [sp, #8]
 8006cc8:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8006ccc:	9301      	str	r3, [sp, #4]
 8006cce:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x150>)
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x154>)
 8006cd4:	4632      	mov	r2, r6
 8006cd6:	2103      	movs	r1, #3
 8006cd8:	4620      	mov	r0, r4
 8006cda:	47a8      	blx	r5

}
 8006cdc:	bf00      	nop
 8006cde:	373c      	adds	r7, #60	; 0x3c
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ce4:	08023518 	.word	0x08023518
 8006ce8:	0802351c 	.word	0x0802351c
 8006cec:	08023530 	.word	0x08023530
 8006cf0:	080231ac 	.word	0x080231ac
 8006cf4:	08023538 	.word	0x08023538
 8006cf8:	08023574 	.word	0x08023574
 8006cfc:	080231f4 	.word	0x080231f4
 8006d00:	0802377c 	.word	0x0802377c

08006d04 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fe f990 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006d14:	4a03      	ldr	r2, [pc, #12]	; (8006d24 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev+0x20>)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	08026608 	.word	0x08026608

08006d28 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv>:
 8006d28:	b590      	push	{r4, r7, lr}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	f44f 721c 	mov.w	r2, #624	; 0x270
 8006d34:	4906      	ldr	r1, [pc, #24]	; (8006d50 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006d36:	2004      	movs	r0, #4
 8006d38:	f003 f9c8 	bl	800a0cc <_ZnwjPKci>
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f7ff ffe0 	bl	8006d04 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>
 8006d44:	4623      	mov	r3, r4
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd90      	pop	{r4, r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	080231f4 	.word	0x080231f4

08006d54 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>:
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f00b fda2 	bl	80128a8 <_ZN10UtestShellC1Ev>
 8006d64:	4a03      	ldr	r2, [pc, #12]	; (8006d74 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	0802655c 	.word	0x0802655c

08006d78 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv>:
{
 8006d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d7a:	b0b3      	sub	sp, #204	; 0xcc
 8006d7c:	af04      	add	r7, sp, #16
 8006d7e:	6078      	str	r0, [r7, #4]
	Status response;
	int i = 0;
 8006d80:	2300      	movs	r3, #0
 8006d82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char response_arr[2][50] =
 8006d86:	4a83      	ldr	r2, [pc, #524]	; (8006f94 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x21c>)
 8006d88:	f107 0308 	add.w	r3, r7, #8
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	2264      	movs	r2, #100	; 0x64
 8006d90:	4618      	mov	r0, r3
 8006d92:	f019 fa33 	bl	80201fc <memcpy>
	{ ">\r\n",
	  "SEND OK\r\n",
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT+CIPSEND=11\r\n"); // AT+CIPSEMD=11
 8006d96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006d9a:	497f      	ldr	r1, [pc, #508]	; (8006f98 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f005 fd58 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006da2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006da6:	2100      	movs	r1, #0
 8006da8:	4618      	mov	r0, r3
 8006daa:	f003 fe2b 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006dae:	4604      	mov	r4, r0
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	330c      	adds	r3, #12
 8006db4:	681d      	ldr	r5, [r3, #0]
 8006db6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006dba:	4978      	ldr	r1, [pc, #480]	; (8006f9c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f005 fd48 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006dc2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4620      	mov	r0, r4
 8006dca:	47a8      	blx	r5
 8006dcc:	4604      	mov	r4, r0
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	334c      	adds	r3, #76	; 0x4c
 8006dd2:	681d      	ldr	r5, [r3, #0]
 8006dd4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006dd8:	4971      	ldr	r1, [pc, #452]	; (8006fa0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f005 fd39 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006de0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006de4:	4a6f      	ldr	r2, [pc, #444]	; (8006fa4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x22c>)
 8006de6:	4619      	mov	r1, r3
 8006de8:	4620      	mov	r0, r4
 8006dea:	47a8      	blx	r5
 8006dec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006df0:	4618      	mov	r0, r3
 8006df2:	f006 f8e6 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8006df6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f006 f8e1 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8006e00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e04:	4618      	mov	r0, r3
 8006e06:	f006 f8dc 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Hello World");
 8006e0a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006e0e:	4962      	ldr	r1, [pc, #392]	; (8006f98 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006e10:	4618      	mov	r0, r3
 8006e12:	f005 fd1e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006e16:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f003 fdf1 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006e22:	4604      	mov	r4, r0
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	330c      	adds	r3, #12
 8006e28:	681d      	ldr	r5, [r3, #0]
 8006e2a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006e2e:	495b      	ldr	r1, [pc, #364]	; (8006f9c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 8006e30:	4618      	mov	r0, r3
 8006e32:	f005 fd0e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006e36:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	47a8      	blx	r5
 8006e40:	4604      	mov	r4, r0
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	334c      	adds	r3, #76	; 0x4c
 8006e46:	681d      	ldr	r5, [r3, #0]
 8006e48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006e4c:	4954      	ldr	r1, [pc, #336]	; (8006fa0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f005 fcff 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006e54:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006e58:	4a53      	ldr	r2, [pc, #332]	; (8006fa8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x230>)
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	47a8      	blx	r5
 8006e60:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006e64:	4618      	mov	r0, r3
 8006e66:	f006 f8ac 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8006e6a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f006 f8a7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8006e74:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f006 f8a2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
	while(1)
	{
		response = Send_TCP_Message((char*)"Hello World");
 8006e7e:	484a      	ldr	r0, [pc, #296]	; (8006fa8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x230>)
 8006e80:	f7fc ff1c 	bl	8003cbc <Send_TCP_Message>
 8006e84:	4603      	mov	r3, r0
 8006e86:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8006e8a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d065      	beq.n	8006f5e <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1e6>
 8006e92:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	d061      	beq.n	8006f5e <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1e6>
 8006e9a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d05d      	beq.n	8006f5e <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1e6>
		{
			break;
		}

		if(i<2)
 8006ea2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	dce9      	bgt.n	8006e7e <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eb0:	f107 0208 	add.w	r2, r7, #8
 8006eb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006eb8:	2132      	movs	r1, #50	; 0x32
 8006eba:	fb01 f303 	mul.w	r3, r1, r3
 8006ebe:	4413      	add	r3, r2
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7f9 f9bb 	bl	800023c <strlen>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	da3f      	bge.n	8006f52 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1da>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006ed2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006ed6:	4930      	ldr	r1, [pc, #192]	; (8006f98 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f005 fcba 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006ede:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f003 fd8d 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006eea:	4604      	mov	r4, r0
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	330c      	adds	r3, #12
 8006ef0:	681d      	ldr	r5, [r3, #0]
 8006ef2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006ef6:	492d      	ldr	r1, [pc, #180]	; (8006fac <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x234>)
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f005 fcaa 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8006efe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006f02:	4619      	mov	r1, r3
 8006f04:	4620      	mov	r0, r4
 8006f06:	47a8      	blx	r5
 8006f08:	4603      	mov	r3, r0
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	3264      	adds	r2, #100	; 0x64
 8006f0e:	6812      	ldr	r2, [r2, #0]
 8006f10:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006f14:	2032      	movs	r0, #50	; 0x32
 8006f16:	fb00 f101 	mul.w	r1, r0, r1
 8006f1a:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8006f1e:	4408      	add	r0, r1
 8006f20:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006f24:	4401      	add	r1, r0
 8006f26:	39b0      	subs	r1, #176	; 0xb0
 8006f28:	7809      	ldrb	r1, [r1, #0]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	4790      	blx	r2
 8006f2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006f32:	4618      	mov	r0, r3
 8006f34:	f006 f845 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8006f38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f006 f840 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006f42:	f7fc fd1b 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006f46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f50:	e7ae      	b.n	8006eb0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x138>
			}
			i++;
 8006f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f56:	3301      	adds	r3, #1
 8006f58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

	}
 8006f5c:	e78f      	b.n	8006e7e <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>

	LONGS_EQUAL(STATUS_OK,response);
 8006f5e:	f00d f85b 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8006f62:	4604      	mov	r4, r0
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	3338      	adds	r3, #56	; 0x38
 8006f68:	681d      	ldr	r5, [r3, #0]
 8006f6a:	f897 60af 	ldrb.w	r6, [r7, #175]	; 0xaf
 8006f6e:	f00d f863 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006f72:	4603      	mov	r3, r0
 8006f74:	9302      	str	r3, [sp, #8]
 8006f76:	f240 2391 	movw	r3, #657	; 0x291
 8006f7a:	9301      	str	r3, [sp, #4]
 8006f7c:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x238>)
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x23c>)
 8006f82:	4632      	mov	r2, r6
 8006f84:	2103      	movs	r1, #3
 8006f86:	4620      	mov	r0, r4
 8006f88:	47a8      	blx	r5

}
 8006f8a:	bf00      	nop
 8006f8c:	37bc      	adds	r7, #188	; 0xbc
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f92:	bf00      	nop
 8006f94:	08023880 	.word	0x08023880
 8006f98:	08023518 	.word	0x08023518
 8006f9c:	0802351c 	.word	0x0802351c
 8006fa0:	08023530 	.word	0x08023530
 8006fa4:	08023870 	.word	0x08023870
 8006fa8:	08023428 	.word	0x08023428
 8006fac:	08023538 	.word	0x08023538
 8006fb0:	080231f4 	.word	0x080231f4
 8006fb4:	0802377c 	.word	0x0802377c

08006fb8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe f836 	bl	8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006fc8:	4a03      	ldr	r2, [pc, #12]	; (8006fd8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev+0x20>)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	0802653c 	.word	0x0802653c

08006fdc <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv>:
 8006fdc:	b590      	push	{r4, r7, lr}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	f240 2295 	movw	r2, #661	; 0x295
 8006fe8:	4906      	ldr	r1, [pc, #24]	; (8007004 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006fea:	2004      	movs	r0, #4
 8006fec:	f003 f86e 	bl	800a0cc <_ZnwjPKci>
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f7ff ffe0 	bl	8006fb8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>
 8006ff8:	4623      	mov	r3, r4
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd90      	pop	{r4, r7, pc}
 8007002:	bf00      	nop
 8007004:	080231f4 	.word	0x080231f4

08007008 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>:
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4618      	mov	r0, r3
 8007014:	f00b fc48 	bl	80128a8 <_ZN10UtestShellC1Ev>
 8007018:	4a03      	ldr	r2, [pc, #12]	; (8007028 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev+0x20>)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	08026490 	.word	0x08026490

0800702c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv>:
{
 800702c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800702e:	b0a3      	sub	sp, #140	; 0x8c
 8007030:	af04      	add	r7, sp, #16
 8007032:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,11:Hello World";		// an example data that ESP received from server
 8007034:	4b44      	ldr	r3, [pc, #272]	; (8007148 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x11c>)
 8007036:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800703a:	461d      	mov	r5, r3
 800703c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800703e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	6023      	str	r3, [r4, #0]
 8007044:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]
 800704c:	605a      	str	r2, [r3, #4]
 800704e:	811a      	strh	r2, [r3, #8]

	Status response_state = IDLE;
 8007050:	2305      	movs	r3, #5
 8007052:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	char received_message[50];

	for(int i=0;i<(int)strlen(response);i++)
 8007056:	2300      	movs	r3, #0
 8007058:	677b      	str	r3, [r7, #116]	; 0x74
 800705a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800705e:	4618      	mov	r0, r3
 8007060:	f7f9 f8ec 	bl	800023c <strlen>
 8007064:	4603      	mov	r3, r0
 8007066:	461a      	mov	r2, r3
 8007068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800706a:	4293      	cmp	r3, r2
 800706c:	da35      	bge.n	80070da <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0xae>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800706e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007072:	4936      	ldr	r1, [pc, #216]	; (800714c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x120>)
 8007074:	4618      	mov	r0, r3
 8007076:	f005 fbec 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800707a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800707e:	2100      	movs	r1, #0
 8007080:	4618      	mov	r0, r3
 8007082:	f003 fcbf 	bl	800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007086:	4604      	mov	r4, r0
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	330c      	adds	r3, #12
 800708c:	681d      	ldr	r5, [r3, #0]
 800708e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007092:	492f      	ldr	r1, [pc, #188]	; (8007150 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x124>)
 8007094:	4618      	mov	r0, r3
 8007096:	f005 fbdc 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800709a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800709e:	4619      	mov	r1, r3
 80070a0:	4620      	mov	r0, r4
 80070a2:	47a8      	blx	r5
 80070a4:	4603      	mov	r3, r0
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	3264      	adds	r2, #100	; 0x64
 80070aa:	6812      	ldr	r2, [r2, #0]
 80070ac:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80070b0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80070b2:	4401      	add	r1, r0
 80070b4:	7809      	ldrb	r1, [r1, #0]
 80070b6:	4618      	mov	r0, r3
 80070b8:	4790      	blx	r2
 80070ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80070be:	4618      	mov	r0, r3
 80070c0:	f005 ff7f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80070c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80070c8:	4618      	mov	r0, r3
 80070ca:	f005 ff7a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 80070ce:	f7fc fc55 	bl	800397c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 80070d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070d4:	3301      	adds	r3, #1
 80070d6:	677b      	str	r3, [r7, #116]	; 0x74
 80070d8:	e7bf      	b.n	800705a <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x2e>
	}

	response_state = Read_TCP_Message(received_message);
 80070da:	f107 030c 	add.w	r3, r7, #12
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fc fe24 	bl	8003d2c <Read_TCP_Message>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LONGS_EQUAL(STATUS_OK,response_state);
 80070ea:	f00c ff95 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 80070ee:	4604      	mov	r4, r0
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	3338      	adds	r3, #56	; 0x38
 80070f4:	681d      	ldr	r5, [r3, #0]
 80070f6:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 80070fa:	f00c ff9d 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80070fe:	4603      	mov	r3, r0
 8007100:	9302      	str	r3, [sp, #8]
 8007102:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8007106:	9301      	str	r3, [sp, #4]
 8007108:	4b12      	ldr	r3, [pc, #72]	; (8007154 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x128>)
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	4b12      	ldr	r3, [pc, #72]	; (8007158 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x12c>)
 800710e:	4632      	mov	r2, r6
 8007110:	2103      	movs	r1, #3
 8007112:	4620      	mov	r0, r4
 8007114:	47a8      	blx	r5
	STRCMP_EQUAL("Hello World",received_message);
 8007116:	f00c ff7f 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 800711a:	4604      	mov	r4, r0
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	3324      	adds	r3, #36	; 0x24
 8007120:	681d      	ldr	r5, [r3, #0]
 8007122:	f00c ff89 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007126:	4603      	mov	r3, r0
 8007128:	f107 020c 	add.w	r2, r7, #12
 800712c:	9302      	str	r3, [sp, #8]
 800712e:	f240 23a5 	movw	r3, #677	; 0x2a5
 8007132:	9301      	str	r3, [sp, #4]
 8007134:	4b07      	ldr	r3, [pc, #28]	; (8007154 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x128>)
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	2300      	movs	r3, #0
 800713a:	4908      	ldr	r1, [pc, #32]	; (800715c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x130>)
 800713c:	4620      	mov	r0, r4
 800713e:	47a8      	blx	r5

}
 8007140:	bf00      	nop
 8007142:	377c      	adds	r7, #124	; 0x7c
 8007144:	46bd      	mov	sp, r7
 8007146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007148:	08023914 	.word	0x08023914
 800714c:	08023518 	.word	0x08023518
 8007150:	08023538 	.word	0x08023538
 8007154:	080231f4 	.word	0x080231f4
 8007158:	080238e4 	.word	0x080238e4
 800715c:	08023428 	.word	0x08023428

08007160 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	4a05      	ldr	r2, [pc, #20]	; (8007180 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev+0x20>)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4618      	mov	r0, r3
 8007172:	f00b fbed 	bl	8012950 <_ZN10UtestShellD1Ev>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	08026490 	.word	0x08026490

08007184 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD0Ev>:
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff ffe7 	bl	8007160 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
 8007192:	211c      	movs	r1, #28
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f002 ffad 	bl	800a0f4 <_ZdlPvj>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>:
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	4a05      	ldr	r2, [pc, #20]	; (80071c4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev+0x20>)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fd ff4f 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	0802653c 	.word	0x0802653c

080071c8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD0Ev>:
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7ff ffe7 	bl	80071a4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>
 80071d6:	2104      	movs	r1, #4
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f002 ff8b 	bl	800a0f4 <_ZdlPvj>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	4a05      	ldr	r2, [pc, #20]	; (8007208 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev+0x20>)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f00b fba9 	bl	8012950 <_ZN10UtestShellD1Ev>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4618      	mov	r0, r3
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	0802655c 	.word	0x0802655c

0800720c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD0Ev>:
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff ffe7 	bl	80071e8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
 800721a:	211c      	movs	r1, #28
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f002 ff69 	bl	800a0f4 <_ZdlPvj>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>:
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	4a05      	ldr	r2, [pc, #20]	; (800724c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev+0x20>)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4618      	mov	r0, r3
 800723e:	f7fd ff0b 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	08026608 	.word	0x08026608

08007250 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD0Ev>:
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff ffe7 	bl	800722c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>
 800725e:	2104      	movs	r1, #4
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f002 ff47 	bl	800a0f4 <_ZdlPvj>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4618      	mov	r0, r3
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	4a05      	ldr	r2, [pc, #20]	; (8007290 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev+0x20>)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4618      	mov	r0, r3
 8007282:	f00b fb65 	bl	8012950 <_ZN10UtestShellD1Ev>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	08026628 	.word	0x08026628

08007294 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD0Ev>:
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7ff ffe7 	bl	8007270 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
 80072a2:	211c      	movs	r1, #28
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f002 ff25 	bl	800a0f4 <_ZdlPvj>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>:
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	4a05      	ldr	r2, [pc, #20]	; (80072d4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev+0x20>)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fd fec7 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4618      	mov	r0, r3
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	080266d4 	.word	0x080266d4

080072d8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD0Ev>:
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7ff ffe7 	bl	80072b4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>
 80072e6:	2104      	movs	r1, #4
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f002 ff03 	bl	800a0f4 <_ZdlPvj>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	4a05      	ldr	r2, [pc, #20]	; (8007318 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev+0x20>)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4618      	mov	r0, r3
 800730a:	f00b fb21 	bl	8012950 <_ZN10UtestShellD1Ev>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4618      	mov	r0, r3
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	080266f4 	.word	0x080266f4

0800731c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD0Ev>:
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff ffe7 	bl	80072f8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
 800732a:	211c      	movs	r1, #28
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f002 fee1 	bl	800a0f4 <_ZdlPvj>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>:
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	4a05      	ldr	r2, [pc, #20]	; (800735c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev+0x20>)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4618      	mov	r0, r3
 800734e:	f7fd fe83 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4618      	mov	r0, r3
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	080267a0 	.word	0x080267a0

08007360 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD0Ev>:
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff ffe7 	bl	800733c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>
 800736e:	2104      	movs	r1, #4
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f002 febf 	bl	800a0f4 <_ZdlPvj>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4618      	mov	r0, r3
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	4a05      	ldr	r2, [pc, #20]	; (80073a0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev+0x20>)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4618      	mov	r0, r3
 8007392:	f00b fadd 	bl	8012950 <_ZN10UtestShellD1Ev>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	080267c0 	.word	0x080267c0

080073a4 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD0Ev>:
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff ffe7 	bl	8007380 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
 80073b2:	211c      	movs	r1, #28
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f002 fe9d 	bl	800a0f4 <_ZdlPvj>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4618      	mov	r0, r3
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>:
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	4a05      	ldr	r2, [pc, #20]	; (80073e4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev+0x20>)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fd fe3f 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	0802686c 	.word	0x0802686c

080073e8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD0Ev>:
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff ffe7 	bl	80073c4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>
 80073f6:	2104      	movs	r1, #4
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f002 fe7b 	bl	800a0f4 <_ZdlPvj>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4618      	mov	r0, r3
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	4a05      	ldr	r2, [pc, #20]	; (8007428 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev+0x20>)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4618      	mov	r0, r3
 800741a:	f00b fa99 	bl	8012950 <_ZN10UtestShellD1Ev>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4618      	mov	r0, r3
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	0802688c 	.word	0x0802688c

0800742c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD0Ev>:
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff ffe7 	bl	8007408 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
 800743a:	211c      	movs	r1, #28
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f002 fe59 	bl	800a0f4 <_ZdlPvj>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4618      	mov	r0, r3
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>:
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	4a05      	ldr	r2, [pc, #20]	; (800746c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev+0x20>)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4618      	mov	r0, r3
 800745e:	f7fd fdfb 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4618      	mov	r0, r3
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	08026938 	.word	0x08026938

08007470 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD0Ev>:
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff ffe7 	bl	800744c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>
 800747e:	2104      	movs	r1, #4
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f002 fe37 	bl	800a0f4 <_ZdlPvj>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	4a05      	ldr	r2, [pc, #20]	; (80074b0 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f00b fa55 	bl	8012950 <_ZN10UtestShellD1Ev>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	08026958 	.word	0x08026958

080074b4 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7ff ffe7 	bl	8007490 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 80074c2:	211c      	movs	r1, #28
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f002 fe15 	bl	800a0f4 <_ZdlPvj>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	4a05      	ldr	r2, [pc, #20]	; (80074f4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fd fdb7 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4618      	mov	r0, r3
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	08026a04 	.word	0x08026a04

080074f8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7ff ffe7 	bl	80074d4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 8007506:	2104      	movs	r1, #4
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f002 fdf3 	bl	800a0f4 <_ZdlPvj>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4618      	mov	r0, r3
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	4a05      	ldr	r2, [pc, #20]	; (8007538 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4618      	mov	r0, r3
 800752a:	f00b fa11 	bl	8012950 <_ZN10UtestShellD1Ev>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4618      	mov	r0, r3
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	08026a24 	.word	0x08026a24

0800753c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff ffe7 	bl	8007518 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 800754a:	211c      	movs	r1, #28
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f002 fdd1 	bl	800a0f4 <_ZdlPvj>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4618      	mov	r0, r3
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	4a05      	ldr	r2, [pc, #20]	; (800757c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4618      	mov	r0, r3
 800756e:	f7fd fd73 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4618      	mov	r0, r3
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	08026ad0 	.word	0x08026ad0

08007580 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff ffe7 	bl	800755c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 800758e:	2104      	movs	r1, #4
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f002 fdaf 	bl	800a0f4 <_ZdlPvj>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	4a05      	ldr	r2, [pc, #20]	; (80075c0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f00b f9cd 	bl	8012950 <_ZN10UtestShellD1Ev>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	08026af0 	.word	0x08026af0

080075c4 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff ffe7 	bl	80075a0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 80075d2:	211c      	movs	r1, #28
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f002 fd8d 	bl	800a0f4 <_ZdlPvj>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4618      	mov	r0, r3
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	4a05      	ldr	r2, [pc, #20]	; (8007604 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fd fd2f 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	08026b9c 	.word	0x08026b9c

08007608 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff ffe7 	bl	80075e4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 8007616:	2104      	movs	r1, #4
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f002 fd6b 	bl	800a0f4 <_ZdlPvj>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4618      	mov	r0, r3
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	4a05      	ldr	r2, [pc, #20]	; (8007648 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4618      	mov	r0, r3
 800763a:	f00b f989 	bl	8012950 <_ZN10UtestShellD1Ev>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4618      	mov	r0, r3
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	08026bbc 	.word	0x08026bbc

0800764c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7ff ffe7 	bl	8007628 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 800765a:	211c      	movs	r1, #28
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f002 fd49 	bl	800a0f4 <_ZdlPvj>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	4a05      	ldr	r2, [pc, #20]	; (800768c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4618      	mov	r0, r3
 800767e:	f7fd fceb 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	08026c68 	.word	0x08026c68

08007690 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7ff ffe7 	bl	800766c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 800769e:	2104      	movs	r1, #4
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f002 fd27 	bl	800a0f4 <_ZdlPvj>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4618      	mov	r0, r3
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	4a05      	ldr	r2, [pc, #20]	; (80076d0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f00b f945 	bl	8012950 <_ZN10UtestShellD1Ev>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	08026c88 	.word	0x08026c88

080076d4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7ff ffe7 	bl	80076b0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 80076e2:	211c      	movs	r1, #28
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f002 fd05 	bl	800a0f4 <_ZdlPvj>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4618      	mov	r0, r3
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	4a05      	ldr	r2, [pc, #20]	; (8007714 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4618      	mov	r0, r3
 8007706:	f7fd fca7 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4618      	mov	r0, r3
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	08026d34 	.word	0x08026d34

08007718 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff ffe7 	bl	80076f4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 8007726:	2104      	movs	r1, #4
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f002 fce3 	bl	800a0f4 <_ZdlPvj>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	4a05      	ldr	r2, [pc, #20]	; (8007758 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4618      	mov	r0, r3
 800774a:	f00b f901 	bl	8012950 <_ZN10UtestShellD1Ev>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4618      	mov	r0, r3
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	08026d54 	.word	0x08026d54

0800775c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7ff ffe7 	bl	8007738 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 800776a:	211c      	movs	r1, #28
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f002 fcc1 	bl	800a0f4 <_ZdlPvj>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4618      	mov	r0, r3
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	4a05      	ldr	r2, [pc, #20]	; (800779c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4618      	mov	r0, r3
 800778e:	f7fd fc63 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	08026e00 	.word	0x08026e00

080077a0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f7ff ffe7 	bl	800777c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 80077ae:	2104      	movs	r1, #4
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f002 fc9f 	bl	800a0f4 <_ZdlPvj>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4618      	mov	r0, r3
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	4a05      	ldr	r2, [pc, #20]	; (80077e0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f00b f8bd 	bl	8012950 <_ZN10UtestShellD1Ev>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4618      	mov	r0, r3
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	08026e20 	.word	0x08026e20

080077e4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7ff ffe7 	bl	80077c0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 80077f2:	211c      	movs	r1, #28
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f002 fc7d 	bl	800a0f4 <_ZdlPvj>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	4a05      	ldr	r2, [pc, #20]	; (8007824 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4618      	mov	r0, r3
 8007816:	f7fd fc1f 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4618      	mov	r0, r3
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	08026ecc 	.word	0x08026ecc

08007828 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff ffe7 	bl	8007804 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 8007836:	2104      	movs	r1, #4
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f002 fc5b 	bl	800a0f4 <_ZdlPvj>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4618      	mov	r0, r3
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	4a05      	ldr	r2, [pc, #20]	; (8007868 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4618      	mov	r0, r3
 800785a:	f00b f879 	bl	8012950 <_ZN10UtestShellD1Ev>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	08026eec 	.word	0x08026eec

0800786c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff ffe7 	bl	8007848 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 800787a:	211c      	movs	r1, #28
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f002 fc39 	bl	800a0f4 <_ZdlPvj>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4618      	mov	r0, r3
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	4a05      	ldr	r2, [pc, #20]	; (80078ac <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	601a      	str	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4618      	mov	r0, r3
 800789e:	f7fd fbdb 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4618      	mov	r0, r3
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	08026f98 	.word	0x08026f98

080078b0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff ffe7 	bl	800788c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 80078be:	2104      	movs	r1, #4
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f002 fc17 	bl	800a0f4 <_ZdlPvj>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4618      	mov	r0, r3
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	4a05      	ldr	r2, [pc, #20]	; (80078f0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f00b f835 	bl	8012950 <_ZN10UtestShellD1Ev>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4618      	mov	r0, r3
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	08026fb8 	.word	0x08026fb8

080078f4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7ff ffe7 	bl	80078d0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 8007902:	211c      	movs	r1, #28
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f002 fbf5 	bl	800a0f4 <_ZdlPvj>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	4a05      	ldr	r2, [pc, #20]	; (8007934 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4618      	mov	r0, r3
 8007926:	f7fd fb97 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4618      	mov	r0, r3
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	08027064 	.word	0x08027064

08007938 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff ffe7 	bl	8007914 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8007946:	2104      	movs	r1, #4
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f002 fbd3 	bl	800a0f4 <_ZdlPvj>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4618      	mov	r0, r3
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	4a05      	ldr	r2, [pc, #20]	; (8007978 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4618      	mov	r0, r3
 800796a:	f00a fff1 	bl	8012950 <_ZN10UtestShellD1Ev>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4618      	mov	r0, r3
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	08027084 	.word	0x08027084

0800797c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff ffe7 	bl	8007958 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 800798a:	211c      	movs	r1, #28
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f002 fbb1 	bl	800a0f4 <_ZdlPvj>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	4a05      	ldr	r2, [pc, #20]	; (80079bc <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7fd fb53 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	08027130 	.word	0x08027130

080079c0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff ffe7 	bl	800799c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 80079ce:	2104      	movs	r1, #4
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f002 fb8f 	bl	800a0f4 <_ZdlPvj>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	4a05      	ldr	r2, [pc, #20]	; (8007a00 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f00a ffad 	bl	8012950 <_ZN10UtestShellD1Ev>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4618      	mov	r0, r3
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	08027150 	.word	0x08027150

08007a04 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7ff ffe7 	bl	80079e0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8007a12:	211c      	movs	r1, #28
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f002 fb6d 	bl	800a0f4 <_ZdlPvj>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	4a05      	ldr	r2, [pc, #20]	; (8007a44 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fd fb0f 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	080271fc 	.word	0x080271fc

08007a48 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff ffe7 	bl	8007a24 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8007a56:	2104      	movs	r1, #4
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f002 fb4b 	bl	800a0f4 <_ZdlPvj>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4618      	mov	r0, r3
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	4a05      	ldr	r2, [pc, #20]	; (8007a88 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f00a ff69 	bl	8012950 <_ZN10UtestShellD1Ev>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	0802721c 	.word	0x0802721c

08007a8c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7ff ffe7 	bl	8007a68 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8007a9a:	211c      	movs	r1, #28
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f002 fb29 	bl	800a0f4 <_ZdlPvj>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	4a05      	ldr	r2, [pc, #20]	; (8007acc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fd facb 	bl	8005058 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	080272c8 	.word	0x080272c8

08007ad0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7ff ffe7 	bl	8007aac <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8007ade:	2104      	movs	r1, #4
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f002 fb07 	bl	800a0f4 <_ZdlPvj>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	4a05      	ldr	r2, [pc, #20]	; (8007b10 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f00a ff25 	bl	8012950 <_ZN10UtestShellD1Ev>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	08027308 	.word	0x08027308

08007b14 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff ffe7 	bl	8007af0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8007b22:	211c      	movs	r1, #28
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f002 fae5 	bl	800a0f4 <_ZdlPvj>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	4a05      	ldr	r2, [pc, #20]	; (8007b54 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fc fc3f 	bl	80043c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	080273b4 	.word	0x080273b4

08007b58 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7ff ffe7 	bl	8007b34 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8007b66:	2108      	movs	r1, #8
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f002 fac3 	bl	800a0f4 <_ZdlPvj>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4618      	mov	r0, r3
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	4a05      	ldr	r2, [pc, #20]	; (8007b98 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f00a fee1 	bl	8012950 <_ZN10UtestShellD1Ev>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4618      	mov	r0, r3
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	080273d4 	.word	0x080273d4

08007b9c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff ffe7 	bl	8007b78 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8007baa:	211c      	movs	r1, #28
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f002 faa1 	bl	800a0f4 <_ZdlPvj>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	4a05      	ldr	r2, [pc, #20]	; (8007bdc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fc fbfb 	bl	80043c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	08027480 	.word	0x08027480

08007be0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7ff ffe7 	bl	8007bbc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 8007bee:	2108      	movs	r1, #8
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f002 fa7f 	bl	800a0f4 <_ZdlPvj>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	4a05      	ldr	r2, [pc, #20]	; (8007c20 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f00a fe9d 	bl	8012950 <_ZN10UtestShellD1Ev>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	080274a0 	.word	0x080274a0

08007c24 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff ffe7 	bl	8007c00 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 8007c32:	211c      	movs	r1, #28
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f002 fa5d 	bl	800a0f4 <_ZdlPvj>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	4a05      	ldr	r2, [pc, #20]	; (8007c64 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fc fbb7 	bl	80043c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	0802754c 	.word	0x0802754c

08007c68 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff ffe7 	bl	8007c44 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8007c76:	2108      	movs	r1, #8
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f002 fa3b 	bl	800a0f4 <_ZdlPvj>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4618      	mov	r0, r3
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	4a05      	ldr	r2, [pc, #20]	; (8007ca8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f00a fe59 	bl	8012950 <_ZN10UtestShellD1Ev>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	0802756c 	.word	0x0802756c

08007cac <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7ff ffe7 	bl	8007c88 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8007cba:	211c      	movs	r1, #28
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f002 fa19 	bl	800a0f4 <_ZdlPvj>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	4a05      	ldr	r2, [pc, #20]	; (8007cec <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fc fb73 	bl	80043c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	08027618 	.word	0x08027618

08007cf0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7ff ffe7 	bl	8007ccc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8007cfe:	2108      	movs	r1, #8
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f002 f9f7 	bl	800a0f4 <_ZdlPvj>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	4a05      	ldr	r2, [pc, #20]	; (8007d30 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f00a fe15 	bl	8012950 <_ZN10UtestShellD1Ev>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	08027638 	.word	0x08027638

08007d34 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff ffe7 	bl	8007d10 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8007d42:	211c      	movs	r1, #28
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f002 f9d5 	bl	800a0f4 <_ZdlPvj>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	4a05      	ldr	r2, [pc, #20]	; (8007d74 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fc fb2f 	bl	80043c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	080276e4 	.word	0x080276e4

08007d78 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7ff ffe7 	bl	8007d54 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8007d86:	2108      	movs	r1, #8
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f002 f9b3 	bl	800a0f4 <_ZdlPvj>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	4a05      	ldr	r2, [pc, #20]	; (8007db8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f00a fdd1 	bl	8012950 <_ZN10UtestShellD1Ev>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	08027704 	.word	0x08027704

08007dbc <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7ff ffe7 	bl	8007d98 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8007dca:	211c      	movs	r1, #28
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f002 f991 	bl	800a0f4 <_ZdlPvj>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	4a05      	ldr	r2, [pc, #20]	; (8007dfc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fc faeb 	bl	80043c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	080277b0 	.word	0x080277b0

08007e00 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff ffe7 	bl	8007ddc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8007e0e:	2108      	movs	r1, #8
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f002 f96f 	bl	800a0f4 <_ZdlPvj>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	4a05      	ldr	r2, [pc, #20]	; (8007e40 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f00a fd8d 	bl	8012950 <_ZN10UtestShellD1Ev>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	080277d0 	.word	0x080277d0

08007e44 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff ffe7 	bl	8007e20 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8007e52:	211c      	movs	r1, #28
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f002 f94d 	bl	800a0f4 <_ZdlPvj>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	4a05      	ldr	r2, [pc, #20]	; (8007e84 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	601a      	str	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fc faa7 	bl	80043c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	0802787c 	.word	0x0802787c

08007e88 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7ff ffe7 	bl	8007e64 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8007e96:	2108      	movs	r1, #8
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f002 f92b 	bl	800a0f4 <_ZdlPvj>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	4a05      	ldr	r2, [pc, #20]	; (8007ec8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f00a fd49 	bl	8012950 <_ZN10UtestShellD1Ev>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	0802789c 	.word	0x0802789c

08007ecc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7ff ffe7 	bl	8007ea8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8007eda:	211c      	movs	r1, #28
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f002 f909 	bl	800a0f4 <_ZdlPvj>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	4a05      	ldr	r2, [pc, #20]	; (8007f0c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fc fa63 	bl	80043c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4618      	mov	r0, r3
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	08027948 	.word	0x08027948

08007f10 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff ffe7 	bl	8007eec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8007f1e:	2108      	movs	r1, #8
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f002 f8e7 	bl	800a0f4 <_ZdlPvj>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	4a05      	ldr	r2, [pc, #20]	; (8007f50 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f00a fd05 	bl	8012950 <_ZN10UtestShellD1Ev>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	08027968 	.word	0x08027968

08007f54 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff ffe7 	bl	8007f30 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8007f62:	211c      	movs	r1, #28
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f002 f8c5 	bl	800a0f4 <_ZdlPvj>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	4a05      	ldr	r2, [pc, #20]	; (8007f94 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fc fa1f 	bl	80043c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	08027a14 	.word	0x08027a14

08007f98 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff ffe7 	bl	8007f74 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 8007fa6:	2108      	movs	r1, #8
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f002 f8a3 	bl	800a0f4 <_ZdlPvj>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <_Z41__static_initialization_and_destruction_0ii>:
}
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af02      	add	r7, sp, #8
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	f040 8208 	bne.w	80083da <_Z41__static_initialization_and_destruction_0ii+0x422>
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	f040 8202 	bne.w	80083da <_Z41__static_initialization_and_destruction_0ii+0x422>
TEST(RingBuffer_Test_Group, InitTest)
 8007fd6:	489f      	ldr	r0, [pc, #636]	; (8008254 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8007fd8:	f7fc fa44 	bl	8004464 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8007fdc:	2324      	movs	r3, #36	; 0x24
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	4b9d      	ldr	r3, [pc, #628]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	4b9d      	ldr	r3, [pc, #628]	; (800825c <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8007fe6:	4a9e      	ldr	r2, [pc, #632]	; (8008260 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007fe8:	499a      	ldr	r1, [pc, #616]	; (8008254 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8007fea:	489e      	ldr	r0, [pc, #632]	; (8008264 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8007fec:	f00c faac 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8007ff0:	489d      	ldr	r0, [pc, #628]	; (8008268 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007ff2:	f7fc faeb 	bl	80045cc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8007ff6:	232e      	movs	r3, #46	; 0x2e
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	4b97      	ldr	r3, [pc, #604]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	4b9b      	ldr	r3, [pc, #620]	; (800826c <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8008000:	4a97      	ldr	r2, [pc, #604]	; (8008260 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008002:	4999      	ldr	r1, [pc, #612]	; (8008268 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8008004:	489a      	ldr	r0, [pc, #616]	; (8008270 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8008006:	f00c fa9f 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800800a:	489a      	ldr	r0, [pc, #616]	; (8008274 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800800c:	f7fc fb68 	bl	80046e0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8008010:	2338      	movs	r3, #56	; 0x38
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	4b90      	ldr	r3, [pc, #576]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	4b97      	ldr	r3, [pc, #604]	; (8008278 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800801a:	4a91      	ldr	r2, [pc, #580]	; (8008260 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800801c:	4995      	ldr	r1, [pc, #596]	; (8008274 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800801e:	4897      	ldr	r0, [pc, #604]	; (800827c <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8008020:	f00c fa92 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8008024:	4896      	ldr	r0, [pc, #600]	; (8008280 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008026:	f7fc fbe3 	bl	80047f0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 800802a:	2343      	movs	r3, #67	; 0x43
 800802c:	9301      	str	r3, [sp, #4]
 800802e:	4b8a      	ldr	r3, [pc, #552]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	4b94      	ldr	r3, [pc, #592]	; (8008284 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008034:	4a8a      	ldr	r2, [pc, #552]	; (8008260 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008036:	4992      	ldr	r1, [pc, #584]	; (8008280 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008038:	4893      	ldr	r0, [pc, #588]	; (8008288 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800803a:	f00c fa85 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800803e:	4893      	ldr	r0, [pc, #588]	; (800828c <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8008040:	f7fc fc42 	bl	80048c8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8008044:	234c      	movs	r3, #76	; 0x4c
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	4b83      	ldr	r3, [pc, #524]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	4b90      	ldr	r3, [pc, #576]	; (8008290 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800804e:	4a84      	ldr	r2, [pc, #528]	; (8008260 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008050:	498e      	ldr	r1, [pc, #568]	; (800828c <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8008052:	4890      	ldr	r0, [pc, #576]	; (8008294 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8008054:	f00c fa78 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008058:	488f      	ldr	r0, [pc, #572]	; (8008298 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800805a:	f7fc fcc1 	bl	80049e0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 800805e:	235c      	movs	r3, #92	; 0x5c
 8008060:	9301      	str	r3, [sp, #4]
 8008062:	4b7d      	ldr	r3, [pc, #500]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	4b8d      	ldr	r3, [pc, #564]	; (800829c <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8008068:	4a7d      	ldr	r2, [pc, #500]	; (8008260 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800806a:	498b      	ldr	r1, [pc, #556]	; (8008298 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800806c:	488c      	ldr	r0, [pc, #560]	; (80082a0 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800806e:	f00c fa6b 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8008072:	488c      	ldr	r0, [pc, #560]	; (80082a4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8008074:	f7fc fd72 	bl	8004b5c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8008078:	2371      	movs	r3, #113	; 0x71
 800807a:	9301      	str	r3, [sp, #4]
 800807c:	4b76      	ldr	r3, [pc, #472]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	4b89      	ldr	r3, [pc, #548]	; (80082a8 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8008082:	4a77      	ldr	r2, [pc, #476]	; (8008260 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008084:	4987      	ldr	r1, [pc, #540]	; (80082a4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8008086:	4889      	ldr	r0, [pc, #548]	; (80082ac <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8008088:	f00c fa5e 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 800808c:	4888      	ldr	r0, [pc, #544]	; (80082b0 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 800808e:	f7fc fdcb 	bl	8004c28 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 8008092:	2378      	movs	r3, #120	; 0x78
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	4b70      	ldr	r3, [pc, #448]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	4b86      	ldr	r3, [pc, #536]	; (80082b4 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800809c:	4a70      	ldr	r2, [pc, #448]	; (8008260 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800809e:	4984      	ldr	r1, [pc, #528]	; (80082b0 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80080a0:	4885      	ldr	r0, [pc, #532]	; (80082b8 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80080a2:	f00c fa51 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 80080a6:	4885      	ldr	r0, [pc, #532]	; (80082bc <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80080a8:	f7fc fea8 	bl	8004dfc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 80080ac:	2380      	movs	r3, #128	; 0x80
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	4b69      	ldr	r3, [pc, #420]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	4b82      	ldr	r3, [pc, #520]	; (80082c0 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80080b6:	4a6a      	ldr	r2, [pc, #424]	; (8008260 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80080b8:	4980      	ldr	r1, [pc, #512]	; (80082bc <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80080ba:	4882      	ldr	r0, [pc, #520]	; (80082c4 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80080bc:	f00c fa44 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80080c0:	4881      	ldr	r0, [pc, #516]	; (80082c8 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80080c2:	f7fd f811 	bl	80050e8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 80080c6:	23b8      	movs	r3, #184	; 0xb8
 80080c8:	9301      	str	r3, [sp, #4]
 80080ca:	4b63      	ldr	r3, [pc, #396]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	4b7f      	ldr	r3, [pc, #508]	; (80082cc <_Z41__static_initialization_and_destruction_0ii+0x314>)
 80080d0:	4a7f      	ldr	r2, [pc, #508]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80080d2:	497d      	ldr	r1, [pc, #500]	; (80082c8 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80080d4:	487f      	ldr	r0, [pc, #508]	; (80082d4 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 80080d6:	f00c fa37 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80080da:	487f      	ldr	r0, [pc, #508]	; (80082d8 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80080dc:	f7fd f86e 	bl	80051bc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 80080e0:	23ca      	movs	r3, #202	; 0xca
 80080e2:	9301      	str	r3, [sp, #4]
 80080e4:	4b5c      	ldr	r3, [pc, #368]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	4b7c      	ldr	r3, [pc, #496]	; (80082dc <_Z41__static_initialization_and_destruction_0ii+0x324>)
 80080ea:	4a79      	ldr	r2, [pc, #484]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80080ec:	497a      	ldr	r1, [pc, #488]	; (80082d8 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80080ee:	487c      	ldr	r0, [pc, #496]	; (80082e0 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 80080f0:	f00c fa2a 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80080f4:	487b      	ldr	r0, [pc, #492]	; (80082e4 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80080f6:	f7fd f925 	bl	8005344 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 80080fa:	23d6      	movs	r3, #214	; 0xd6
 80080fc:	9301      	str	r3, [sp, #4]
 80080fe:	4b56      	ldr	r3, [pc, #344]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	4b79      	ldr	r3, [pc, #484]	; (80082e8 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8008104:	4a72      	ldr	r2, [pc, #456]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008106:	4977      	ldr	r1, [pc, #476]	; (80082e4 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8008108:	4878      	ldr	r0, [pc, #480]	; (80082ec <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800810a:	f00c fa1d 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 800810e:	4878      	ldr	r0, [pc, #480]	; (80082f0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008110:	f7fd fa30 	bl	8005574 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8008114:	23e6      	movs	r3, #230	; 0xe6
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	4b4f      	ldr	r3, [pc, #316]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	4b75      	ldr	r3, [pc, #468]	; (80082f4 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800811e:	4a6c      	ldr	r2, [pc, #432]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008120:	4973      	ldr	r1, [pc, #460]	; (80082f0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008122:	4875      	ldr	r0, [pc, #468]	; (80082f8 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8008124:	f00c fa10 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8008128:	4874      	ldr	r0, [pc, #464]	; (80082fc <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800812a:	f7fd fad7 	bl	80056dc <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 800812e:	23f7      	movs	r3, #247	; 0xf7
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	4b49      	ldr	r3, [pc, #292]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	4b72      	ldr	r3, [pc, #456]	; (8008300 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8008138:	4a65      	ldr	r2, [pc, #404]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800813a:	4970      	ldr	r1, [pc, #448]	; (80082fc <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800813c:	4871      	ldr	r0, [pc, #452]	; (8008304 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800813e:	f00c fa03 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8008142:	4871      	ldr	r0, [pc, #452]	; (8008308 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008144:	f7fd fb36 	bl	80057b4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8008148:	f240 1307 	movw	r3, #263	; 0x107
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	4b42      	ldr	r3, [pc, #264]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	4b6e      	ldr	r3, [pc, #440]	; (800830c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8008154:	4a5e      	ldr	r2, [pc, #376]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008156:	496c      	ldr	r1, [pc, #432]	; (8008308 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008158:	486d      	ldr	r0, [pc, #436]	; (8008310 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800815a:	f00c f9f5 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 800815e:	486d      	ldr	r0, [pc, #436]	; (8008314 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8008160:	f7fd fbec 	bl	800593c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 8008164:	f240 131d 	movw	r3, #285	; 0x11d
 8008168:	9301      	str	r3, [sp, #4]
 800816a:	4b3b      	ldr	r3, [pc, #236]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	4b6a      	ldr	r3, [pc, #424]	; (8008318 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8008170:	4a57      	ldr	r2, [pc, #348]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008172:	4968      	ldr	r1, [pc, #416]	; (8008314 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8008174:	4869      	ldr	r0, [pc, #420]	; (800831c <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8008176:	f00c f9e7 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 800817a:	4869      	ldr	r0, [pc, #420]	; (8008320 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800817c:	f7fd fc90 	bl	8005aa0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 8008180:	f44f 739a 	mov.w	r3, #308	; 0x134
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	4b34      	ldr	r3, [pc, #208]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	4b66      	ldr	r3, [pc, #408]	; (8008324 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800818c:	4a50      	ldr	r2, [pc, #320]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800818e:	4964      	ldr	r1, [pc, #400]	; (8008320 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8008190:	4865      	ldr	r0, [pc, #404]	; (8008328 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8008192:	f00c f9d9 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8008196:	4865      	ldr	r0, [pc, #404]	; (800832c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8008198:	f7fd fdc6 	bl	8005d28 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 800819c:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80081a0:	9301      	str	r3, [sp, #4]
 80081a2:	4b2d      	ldr	r3, [pc, #180]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	4b62      	ldr	r3, [pc, #392]	; (8008330 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80081a8:	4a49      	ldr	r2, [pc, #292]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80081aa:	4960      	ldr	r1, [pc, #384]	; (800832c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80081ac:	4861      	ldr	r0, [pc, #388]	; (8008334 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 80081ae:	f00c f9cb 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80081b2:	4861      	ldr	r0, [pc, #388]	; (8008338 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80081b4:	f7fd fefa 	bl	8005fac <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 80081b8:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	4b26      	ldr	r3, [pc, #152]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	4b5e      	ldr	r3, [pc, #376]	; (800833c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80081c4:	4a42      	ldr	r2, [pc, #264]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80081c6:	495c      	ldr	r1, [pc, #368]	; (8008338 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80081c8:	485d      	ldr	r0, [pc, #372]	; (8008340 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80081ca:	f00c f9bd 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80081ce:	485d      	ldr	r0, [pc, #372]	; (8008344 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80081d0:	f7fd ff96 	bl	8006100 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 80081d4:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 80081d8:	9301      	str	r3, [sp, #4]
 80081da:	4b1f      	ldr	r3, [pc, #124]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	4b5a      	ldr	r3, [pc, #360]	; (8008348 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80081e0:	4a3b      	ldr	r2, [pc, #236]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80081e2:	4958      	ldr	r1, [pc, #352]	; (8008344 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80081e4:	4859      	ldr	r0, [pc, #356]	; (800834c <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80081e6:	f00c f9af 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 80081ea:	4859      	ldr	r0, [pc, #356]	; (8008350 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80081ec:	f7fe f86e 	bl	80062cc <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 80081f0:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 80081f4:	9301      	str	r3, [sp, #4]
 80081f6:	4b18      	ldr	r3, [pc, #96]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	4b56      	ldr	r3, [pc, #344]	; (8008354 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80081fc:	4a34      	ldr	r2, [pc, #208]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80081fe:	4954      	ldr	r1, [pc, #336]	; (8008350 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8008200:	4855      	ldr	r0, [pc, #340]	; (8008358 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8008202:	f00c f9a1 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8008206:	4855      	ldr	r0, [pc, #340]	; (800835c <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8008208:	f7fe f98a 	bl	8006520 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>
 800820c:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	4b11      	ldr	r3, [pc, #68]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	4b52      	ldr	r3, [pc, #328]	; (8008360 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8008218:	4a2d      	ldr	r2, [pc, #180]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800821a:	4950      	ldr	r1, [pc, #320]	; (800835c <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800821c:	4851      	ldr	r0, [pc, #324]	; (8008364 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800821e:	f00c f993 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8008222:	4851      	ldr	r0, [pc, #324]	; (8008368 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008224:	f7fe fab8 	bl	8006798 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>
 8008228:	f240 230f 	movw	r3, #527	; 0x20f
 800822c:	9301      	str	r3, [sp, #4]
 800822e:	4b0a      	ldr	r3, [pc, #40]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	4b4e      	ldr	r3, [pc, #312]	; (800836c <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8008234:	4a26      	ldr	r2, [pc, #152]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008236:	494c      	ldr	r1, [pc, #304]	; (8008368 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008238:	484d      	ldr	r0, [pc, #308]	; (8008370 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800823a:	f00c f985 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 800823e:	484d      	ldr	r0, [pc, #308]	; (8008374 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8008240:	f7fe fb66 	bl	8006910 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>
 8008244:	f240 232a 	movw	r3, #554	; 0x22a
 8008248:	9301      	str	r3, [sp, #4]
 800824a:	4b03      	ldr	r3, [pc, #12]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	4b4a      	ldr	r3, [pc, #296]	; (8008378 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8008250:	e094      	b.n	800837c <_Z41__static_initialization_and_destruction_0ii+0x3c4>
 8008252:	bf00      	nop
 8008254:	2000049c 	.word	0x2000049c
 8008258:	080231f4 	.word	0x080231f4
 800825c:	08023934 	.word	0x08023934
 8008260:	08023940 	.word	0x08023940
 8008264:	200004b8 	.word	0x200004b8
 8008268:	200004bc 	.word	0x200004bc
 800826c:	08023958 	.word	0x08023958
 8008270:	200004d8 	.word	0x200004d8
 8008274:	200004dc 	.word	0x200004dc
 8008278:	08023968 	.word	0x08023968
 800827c:	200004f8 	.word	0x200004f8
 8008280:	200004fc 	.word	0x200004fc
 8008284:	0802397c 	.word	0x0802397c
 8008288:	20000518 	.word	0x20000518
 800828c:	2000051c 	.word	0x2000051c
 8008290:	0802398c 	.word	0x0802398c
 8008294:	20000538 	.word	0x20000538
 8008298:	2000053c 	.word	0x2000053c
 800829c:	080239a4 	.word	0x080239a4
 80082a0:	20000558 	.word	0x20000558
 80082a4:	2000055c 	.word	0x2000055c
 80082a8:	080239b4 	.word	0x080239b4
 80082ac:	20000578 	.word	0x20000578
 80082b0:	2000057c 	.word	0x2000057c
 80082b4:	080239c4 	.word	0x080239c4
 80082b8:	20000598 	.word	0x20000598
 80082bc:	2000059c 	.word	0x2000059c
 80082c0:	080239d0 	.word	0x080239d0
 80082c4:	200005b8 	.word	0x200005b8
 80082c8:	200005c4 	.word	0x200005c4
 80082cc:	080239e0 	.word	0x080239e0
 80082d0:	080239f0 	.word	0x080239f0
 80082d4:	200005e0 	.word	0x200005e0
 80082d8:	200005e4 	.word	0x200005e4
 80082dc:	08023a08 	.word	0x08023a08
 80082e0:	20000600 	.word	0x20000600
 80082e4:	20000604 	.word	0x20000604
 80082e8:	08023a20 	.word	0x08023a20
 80082ec:	20000620 	.word	0x20000620
 80082f0:	20000624 	.word	0x20000624
 80082f4:	08023a3c 	.word	0x08023a3c
 80082f8:	20000640 	.word	0x20000640
 80082fc:	20000644 	.word	0x20000644
 8008300:	08023a50 	.word	0x08023a50
 8008304:	20000660 	.word	0x20000660
 8008308:	20000664 	.word	0x20000664
 800830c:	08023a6c 	.word	0x08023a6c
 8008310:	20000680 	.word	0x20000680
 8008314:	20000684 	.word	0x20000684
 8008318:	08023a80 	.word	0x08023a80
 800831c:	200006a0 	.word	0x200006a0
 8008320:	200006a4 	.word	0x200006a4
 8008324:	08023a9c 	.word	0x08023a9c
 8008328:	200006c0 	.word	0x200006c0
 800832c:	200006c4 	.word	0x200006c4
 8008330:	08023ab4 	.word	0x08023ab4
 8008334:	200006e0 	.word	0x200006e0
 8008338:	200006e4 	.word	0x200006e4
 800833c:	08023ac8 	.word	0x08023ac8
 8008340:	20000700 	.word	0x20000700
 8008344:	20000704 	.word	0x20000704
 8008348:	08023ae8 	.word	0x08023ae8
 800834c:	20000720 	.word	0x20000720
 8008350:	20000724 	.word	0x20000724
 8008354:	08023b00 	.word	0x08023b00
 8008358:	20000740 	.word	0x20000740
 800835c:	20000744 	.word	0x20000744
 8008360:	08023b18 	.word	0x08023b18
 8008364:	20000760 	.word	0x20000760
 8008368:	20000764 	.word	0x20000764
 800836c:	08023b2c 	.word	0x08023b2c
 8008370:	20000780 	.word	0x20000780
 8008374:	20000784 	.word	0x20000784
 8008378:	08023b48 	.word	0x08023b48
 800837c:	4a6f      	ldr	r2, [pc, #444]	; (800853c <_Z41__static_initialization_and_destruction_0ii+0x584>)
 800837e:	4970      	ldr	r1, [pc, #448]	; (8008540 <_Z41__static_initialization_and_destruction_0ii+0x588>)
 8008380:	4870      	ldr	r0, [pc, #448]	; (8008544 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 8008382:	f00c f8e1 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8008386:	4870      	ldr	r0, [pc, #448]	; (8008548 <_Z41__static_initialization_and_destruction_0ii+0x590>)
 8008388:	f7fe fbfe 	bl	8006b88 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>
 800838c:	f240 2357 	movw	r3, #599	; 0x257
 8008390:	9301      	str	r3, [sp, #4]
 8008392:	4b6e      	ldr	r3, [pc, #440]	; (800854c <_Z41__static_initialization_and_destruction_0ii+0x594>)
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	4b6e      	ldr	r3, [pc, #440]	; (8008550 <_Z41__static_initialization_and_destruction_0ii+0x598>)
 8008398:	4a68      	ldr	r2, [pc, #416]	; (800853c <_Z41__static_initialization_and_destruction_0ii+0x584>)
 800839a:	496b      	ldr	r1, [pc, #428]	; (8008548 <_Z41__static_initialization_and_destruction_0ii+0x590>)
 800839c:	486d      	ldr	r0, [pc, #436]	; (8008554 <_Z41__static_initialization_and_destruction_0ii+0x59c>)
 800839e:	f00c f8d3 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 80083a2:	486d      	ldr	r0, [pc, #436]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x5a0>)
 80083a4:	f7fe fcd6 	bl	8006d54 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>
 80083a8:	f44f 731c 	mov.w	r3, #624	; 0x270
 80083ac:	9301      	str	r3, [sp, #4]
 80083ae:	4b67      	ldr	r3, [pc, #412]	; (800854c <_Z41__static_initialization_and_destruction_0ii+0x594>)
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	4b6a      	ldr	r3, [pc, #424]	; (800855c <_Z41__static_initialization_and_destruction_0ii+0x5a4>)
 80083b4:	4a61      	ldr	r2, [pc, #388]	; (800853c <_Z41__static_initialization_and_destruction_0ii+0x584>)
 80083b6:	4968      	ldr	r1, [pc, #416]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x5a0>)
 80083b8:	4869      	ldr	r0, [pc, #420]	; (8008560 <_Z41__static_initialization_and_destruction_0ii+0x5a8>)
 80083ba:	f00c f8c5 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 80083be:	4869      	ldr	r0, [pc, #420]	; (8008564 <_Z41__static_initialization_and_destruction_0ii+0x5ac>)
 80083c0:	f7fe fe22 	bl	8007008 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>
 80083c4:	f240 2395 	movw	r3, #661	; 0x295
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	4b60      	ldr	r3, [pc, #384]	; (800854c <_Z41__static_initialization_and_destruction_0ii+0x594>)
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	4b66      	ldr	r3, [pc, #408]	; (8008568 <_Z41__static_initialization_and_destruction_0ii+0x5b0>)
 80083d0:	4a5a      	ldr	r2, [pc, #360]	; (800853c <_Z41__static_initialization_and_destruction_0ii+0x584>)
 80083d2:	4964      	ldr	r1, [pc, #400]	; (8008564 <_Z41__static_initialization_and_destruction_0ii+0x5ac>)
 80083d4:	4865      	ldr	r0, [pc, #404]	; (800856c <_Z41__static_initialization_and_destruction_0ii+0x5b4>)
 80083d6:	f00c f8b7 	bl	8014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f040 80a8 	bne.w	8008532 <_Z41__static_initialization_and_destruction_0ii+0x57a>
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083e8:	4293      	cmp	r3, r2
 80083ea:	f040 80a2 	bne.w	8008532 <_Z41__static_initialization_and_destruction_0ii+0x57a>
 80083ee:	485f      	ldr	r0, [pc, #380]	; (800856c <_Z41__static_initialization_and_destruction_0ii+0x5b4>)
 80083f0:	f00c f8d4 	bl	801459c <_ZN13TestInstallerD1Ev>
 80083f4:	485b      	ldr	r0, [pc, #364]	; (8008564 <_Z41__static_initialization_and_destruction_0ii+0x5ac>)
 80083f6:	f7fe feb3 	bl	8007160 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 80083fa:	4859      	ldr	r0, [pc, #356]	; (8008560 <_Z41__static_initialization_and_destruction_0ii+0x5a8>)
 80083fc:	f00c f8ce 	bl	801459c <_ZN13TestInstallerD1Ev>
 8008400:	4855      	ldr	r0, [pc, #340]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x5a0>)
 8008402:	f7fe fef1 	bl	80071e8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8008406:	4853      	ldr	r0, [pc, #332]	; (8008554 <_Z41__static_initialization_and_destruction_0ii+0x59c>)
 8008408:	f00c f8c8 	bl	801459c <_ZN13TestInstallerD1Ev>
 800840c:	484e      	ldr	r0, [pc, #312]	; (8008548 <_Z41__static_initialization_and_destruction_0ii+0x590>)
 800840e:	f7fe ff2f 	bl	8007270 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8008412:	484c      	ldr	r0, [pc, #304]	; (8008544 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 8008414:	f00c f8c2 	bl	801459c <_ZN13TestInstallerD1Ev>
 8008418:	4849      	ldr	r0, [pc, #292]	; (8008540 <_Z41__static_initialization_and_destruction_0ii+0x588>)
 800841a:	f7fe ff6d 	bl	80072f8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 800841e:	4854      	ldr	r0, [pc, #336]	; (8008570 <_Z41__static_initialization_and_destruction_0ii+0x5b8>)
 8008420:	f00c f8bc 	bl	801459c <_ZN13TestInstallerD1Ev>
 8008424:	4853      	ldr	r0, [pc, #332]	; (8008574 <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 8008426:	f7fe ffab 	bl	8007380 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 800842a:	4853      	ldr	r0, [pc, #332]	; (8008578 <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 800842c:	f00c f8b6 	bl	801459c <_ZN13TestInstallerD1Ev>
 8008430:	4852      	ldr	r0, [pc, #328]	; (800857c <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 8008432:	f7fe ffe9 	bl	8007408 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Command_Process_Test)
 8008436:	4852      	ldr	r0, [pc, #328]	; (8008580 <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 8008438:	f00c f8b0 	bl	801459c <_ZN13TestInstallerD1Ev>
 800843c:	4851      	ldr	r0, [pc, #324]	; (8008584 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800843e:	f7ff f827 	bl	8007490 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8008442:	4851      	ldr	r0, [pc, #324]	; (8008588 <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 8008444:	f00c f8aa 	bl	801459c <_ZN13TestInstallerD1Ev>
 8008448:	4850      	ldr	r0, [pc, #320]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800844a:	f7ff f865 	bl	8007518 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 800844e:	4850      	ldr	r0, [pc, #320]	; (8008590 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 8008450:	f00c f8a4 	bl	801459c <_ZN13TestInstallerD1Ev>
 8008454:	484f      	ldr	r0, [pc, #316]	; (8008594 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8008456:	f7ff f8a3 	bl	80075a0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 800845a:	484f      	ldr	r0, [pc, #316]	; (8008598 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800845c:	f00c f89e 	bl	801459c <_ZN13TestInstallerD1Ev>
 8008460:	484e      	ldr	r0, [pc, #312]	; (800859c <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008462:	f7ff f8e1 	bl	8007628 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8008466:	484e      	ldr	r0, [pc, #312]	; (80085a0 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 8008468:	f00c f898 	bl	801459c <_ZN13TestInstallerD1Ev>
 800846c:	484d      	ldr	r0, [pc, #308]	; (80085a4 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800846e:	f7ff f91f 	bl	80076b0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8008472:	484d      	ldr	r0, [pc, #308]	; (80085a8 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 8008474:	f00c f892 	bl	801459c <_ZN13TestInstallerD1Ev>
 8008478:	484c      	ldr	r0, [pc, #304]	; (80085ac <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800847a:	f7ff f95d 	bl	8007738 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 800847e:	484c      	ldr	r0, [pc, #304]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8008480:	f00c f88c 	bl	801459c <_ZN13TestInstallerD1Ev>
 8008484:	484b      	ldr	r0, [pc, #300]	; (80085b4 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8008486:	f7ff f99b 	bl	80077c0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 800848a:	484b      	ldr	r0, [pc, #300]	; (80085b8 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 800848c:	f00c f886 	bl	801459c <_ZN13TestInstallerD1Ev>
 8008490:	484a      	ldr	r0, [pc, #296]	; (80085bc <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8008492:	f7ff f9d9 	bl	8007848 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8008496:	484a      	ldr	r0, [pc, #296]	; (80085c0 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8008498:	f00c f880 	bl	801459c <_ZN13TestInstallerD1Ev>
 800849c:	4849      	ldr	r0, [pc, #292]	; (80085c4 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800849e:	f7ff fa17 	bl	80078d0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80084a2:	4849      	ldr	r0, [pc, #292]	; (80085c8 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 80084a4:	f00c f87a 	bl	801459c <_ZN13TestInstallerD1Ev>
 80084a8:	4848      	ldr	r0, [pc, #288]	; (80085cc <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80084aa:	f7ff fa55 	bl	8007958 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80084ae:	4848      	ldr	r0, [pc, #288]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 80084b0:	f00c f874 	bl	801459c <_ZN13TestInstallerD1Ev>
 80084b4:	4847      	ldr	r0, [pc, #284]	; (80085d4 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 80084b6:	f7ff fa93 	bl	80079e0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80084ba:	4847      	ldr	r0, [pc, #284]	; (80085d8 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 80084bc:	f00c f86e 	bl	801459c <_ZN13TestInstallerD1Ev>
 80084c0:	4846      	ldr	r0, [pc, #280]	; (80085dc <_Z41__static_initialization_and_destruction_0ii+0x624>)
 80084c2:	f7ff fad1 	bl	8007a68 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 80084c6:	4846      	ldr	r0, [pc, #280]	; (80085e0 <_Z41__static_initialization_and_destruction_0ii+0x628>)
 80084c8:	f00c f868 	bl	801459c <_ZN13TestInstallerD1Ev>
 80084cc:	4845      	ldr	r0, [pc, #276]	; (80085e4 <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 80084ce:	f7ff fb0f 	bl	8007af0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 80084d2:	4845      	ldr	r0, [pc, #276]	; (80085e8 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 80084d4:	f00c f862 	bl	801459c <_ZN13TestInstallerD1Ev>
 80084d8:	4844      	ldr	r0, [pc, #272]	; (80085ec <_Z41__static_initialization_and_destruction_0ii+0x634>)
 80084da:	f7ff fb4d 	bl	8007b78 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 80084de:	4844      	ldr	r0, [pc, #272]	; (80085f0 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 80084e0:	f00c f85c 	bl	801459c <_ZN13TestInstallerD1Ev>
 80084e4:	4843      	ldr	r0, [pc, #268]	; (80085f4 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 80084e6:	f7ff fb8b 	bl	8007c00 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80084ea:	4843      	ldr	r0, [pc, #268]	; (80085f8 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 80084ec:	f00c f856 	bl	801459c <_ZN13TestInstallerD1Ev>
 80084f0:	4842      	ldr	r0, [pc, #264]	; (80085fc <_Z41__static_initialization_and_destruction_0ii+0x644>)
 80084f2:	f7ff fbc9 	bl	8007c88 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80084f6:	4842      	ldr	r0, [pc, #264]	; (8008600 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 80084f8:	f00c f850 	bl	801459c <_ZN13TestInstallerD1Ev>
 80084fc:	4841      	ldr	r0, [pc, #260]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 80084fe:	f7ff fc07 	bl	8007d10 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 8008502:	4841      	ldr	r0, [pc, #260]	; (8008608 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 8008504:	f00c f84a 	bl	801459c <_ZN13TestInstallerD1Ev>
 8008508:	4840      	ldr	r0, [pc, #256]	; (800860c <_Z41__static_initialization_and_destruction_0ii+0x654>)
 800850a:	f7ff fc45 	bl	8007d98 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800850e:	4840      	ldr	r0, [pc, #256]	; (8008610 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 8008510:	f00c f844 	bl	801459c <_ZN13TestInstallerD1Ev>
 8008514:	483f      	ldr	r0, [pc, #252]	; (8008614 <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 8008516:	f7ff fc83 	bl	8007e20 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 800851a:	483f      	ldr	r0, [pc, #252]	; (8008618 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 800851c:	f00c f83e 	bl	801459c <_ZN13TestInstallerD1Ev>
 8008520:	483e      	ldr	r0, [pc, #248]	; (800861c <_Z41__static_initialization_and_destruction_0ii+0x664>)
 8008522:	f7ff fcc1 	bl	8007ea8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8008526:	483e      	ldr	r0, [pc, #248]	; (8008620 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 8008528:	f00c f838 	bl	801459c <_ZN13TestInstallerD1Ev>
 800852c:	483d      	ldr	r0, [pc, #244]	; (8008624 <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 800852e:	f7ff fcff 	bl	8007f30 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 8008532:	bf00      	nop
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	080239f0 	.word	0x080239f0
 8008540:	20000784 	.word	0x20000784
 8008544:	200007a0 	.word	0x200007a0
 8008548:	200007a4 	.word	0x200007a4
 800854c:	080231f4 	.word	0x080231f4
 8008550:	08023b60 	.word	0x08023b60
 8008554:	200007c0 	.word	0x200007c0
 8008558:	200007c4 	.word	0x200007c4
 800855c:	08023b74 	.word	0x08023b74
 8008560:	200007e0 	.word	0x200007e0
 8008564:	200007e4 	.word	0x200007e4
 8008568:	08023b8c 	.word	0x08023b8c
 800856c:	20000800 	.word	0x20000800
 8008570:	20000780 	.word	0x20000780
 8008574:	20000764 	.word	0x20000764
 8008578:	20000760 	.word	0x20000760
 800857c:	20000744 	.word	0x20000744
 8008580:	20000740 	.word	0x20000740
 8008584:	20000724 	.word	0x20000724
 8008588:	20000720 	.word	0x20000720
 800858c:	20000704 	.word	0x20000704
 8008590:	20000700 	.word	0x20000700
 8008594:	200006e4 	.word	0x200006e4
 8008598:	200006e0 	.word	0x200006e0
 800859c:	200006c4 	.word	0x200006c4
 80085a0:	200006c0 	.word	0x200006c0
 80085a4:	200006a4 	.word	0x200006a4
 80085a8:	200006a0 	.word	0x200006a0
 80085ac:	20000684 	.word	0x20000684
 80085b0:	20000680 	.word	0x20000680
 80085b4:	20000664 	.word	0x20000664
 80085b8:	20000660 	.word	0x20000660
 80085bc:	20000644 	.word	0x20000644
 80085c0:	20000640 	.word	0x20000640
 80085c4:	20000624 	.word	0x20000624
 80085c8:	20000620 	.word	0x20000620
 80085cc:	20000604 	.word	0x20000604
 80085d0:	20000600 	.word	0x20000600
 80085d4:	200005e4 	.word	0x200005e4
 80085d8:	200005e0 	.word	0x200005e0
 80085dc:	200005c4 	.word	0x200005c4
 80085e0:	200005b8 	.word	0x200005b8
 80085e4:	2000059c 	.word	0x2000059c
 80085e8:	20000598 	.word	0x20000598
 80085ec:	2000057c 	.word	0x2000057c
 80085f0:	20000578 	.word	0x20000578
 80085f4:	2000055c 	.word	0x2000055c
 80085f8:	20000558 	.word	0x20000558
 80085fc:	2000053c 	.word	0x2000053c
 8008600:	20000538 	.word	0x20000538
 8008604:	2000051c 	.word	0x2000051c
 8008608:	20000518 	.word	0x20000518
 800860c:	200004fc 	.word	0x200004fc
 8008610:	200004f8 	.word	0x200004f8
 8008614:	200004dc 	.word	0x200004dc
 8008618:	200004d8 	.word	0x200004d8
 800861c:	200004bc 	.word	0x200004bc
 8008620:	200004b8 	.word	0x200004b8
 8008624:	2000049c 	.word	0x2000049c

08008628 <_GLOBAL__sub_I_rx_buffer>:
 8008628:	b580      	push	{r7, lr}
 800862a:	af00      	add	r7, sp, #0
 800862c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008630:	2001      	movs	r0, #1
 8008632:	f7ff fcc1 	bl	8007fb8 <_Z41__static_initialization_and_destruction_0ii>
 8008636:	bd80      	pop	{r7, pc}

08008638 <_GLOBAL__sub_D_rx_buffer>:
 8008638:	b580      	push	{r7, lr}
 800863a:	af00      	add	r7, sp, #0
 800863c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008640:	2000      	movs	r0, #0
 8008642:	f7ff fcb9 	bl	8007fb8 <_Z41__static_initialization_and_destruction_0ii>
 8008646:	bd80      	pop	{r7, pc}

08008648 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68db      	ldr	r3, [r3, #12]
    }
 8008654:	4618      	mov	r0, r3
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	69db      	ldr	r3, [r3, #28]
    }
 800866c:	4618      	mov	r0, r3
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	695b      	ldr	r3, [r3, #20]
    }
 8008684:	4618      	mov	r0, r3
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8008690:	b590      	push	{r4, r7, lr}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff ffed 	bl	8008678 <_ZNK10TestResult15getFailureCountEv>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <_ZNK10TestResult9isFailureEv+0x2a>
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7ff ffcf 	bl	8008648 <_ZNK10TestResult11getRunCountEv>
 80086aa:	4604      	mov	r4, r0
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7ff ffd7 	bl	8008660 <_ZNK10TestResult15getIgnoredCountEv>
 80086b2:	4603      	mov	r3, r0
 80086b4:	4423      	add	r3, r4
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <_ZNK10TestResult9isFailureEv+0x2e>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e000      	b.n	80086c0 <_ZNK10TestResult9isFailureEv+0x30>
 80086be:	2300      	movs	r3, #0
    }
 80086c0:	4618      	mov	r0, r3
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd90      	pop	{r4, r7, pc}

080086c8 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
    {
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f007 fde6 	bl	80102a4 <_ZN10TestOutputC1Ev>
 80086d8:	4a03      	ldr	r2, [pc, #12]	; (80086e8 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	601a      	str	r2, [r3, #0]
    }
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	080280c8 	.word	0x080280c8

080086ec <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
    {
 80086f4:	4a05      	ldr	r2, [pc, #20]	; (800870c <_ZN17ConsoleTestOutputD1Ev+0x20>)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f007 fdef 	bl	80102e0 <_ZN10TestOutputD1Ev>
    }
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4618      	mov	r0, r3
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	080280c8 	.word	0x080280c8

08008710 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
    }
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff ffe7 	bl	80086ec <_ZN17ConsoleTestOutputD1Ev>
 800871e:	2110      	movs	r1, #16
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 fce7 	bl	800a0f4 <_ZdlPvj>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4618      	mov	r0, r3
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8008730:	b5b0      	push	{r4, r5, r7, lr}
 8008732:	b098      	sub	sp, #96	; 0x60
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
    int result = 0;
 800873a:	2300      	movs	r3, #0
 800873c:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 800873e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff ffc0 	bl	80086c8 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8008748:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800874c:	4935      	ldr	r1, [pc, #212]	; (8008824 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 800874e:	4618      	mov	r0, r3
 8008750:	f004 f87f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8008754:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008758:	f107 0318 	add.w	r3, r7, #24
 800875c:	2200      	movs	r2, #0
 800875e:	4618      	mov	r0, r3
 8008760:	f001 ff6a 	bl	800a638 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8008764:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008768:	4618      	mov	r0, r3
 800876a:	f004 fc2a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 800876e:	f107 0318 	add.w	r3, r7, #24
 8008772:	2101      	movs	r1, #1
 8008774:	4618      	mov	r0, r3
 8008776:	f001 ff2f 	bl	800a5d8 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 800877a:	f009 fb21 	bl	8011dc0 <_ZN12TestRegistry18getCurrentRegistryEv>
 800877e:	4603      	mov	r3, r0
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	3234      	adds	r2, #52	; 0x34
 8008784:	6812      	ldr	r2, [r2, #0]
 8008786:	f107 0118 	add.w	r1, r7, #24
 800878a:	4618      	mov	r0, r3
 800878c:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 800878e:	f009 fb17 	bl	8011dc0 <_ZN12TestRegistry18getCurrentRegistryEv>
 8008792:	4603      	mov	r3, r0
 8008794:	f107 0008 	add.w	r0, r7, #8
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	6879      	ldr	r1, [r7, #4]
 800879c:	f000 f844 	bl	8008828 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 80087a0:	f107 0308 	add.w	r3, r7, #8
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 f899 	bl	80088dc <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 80087aa:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80087ac:	f107 0308 	add.w	r3, r7, #8
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 f863 	bl	800887c <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 80087b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10c      	bne.n	80087d6 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 80087bc:	f107 0318 	add.w	r3, r7, #24
 80087c0:	2100      	movs	r1, #0
 80087c2:	4618      	mov	r0, r3
 80087c4:	f002 f83a 	bl	800a83c <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 80087c8:	4602      	mov	r2, r0
 80087ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80087ce:	4611      	mov	r1, r2
 80087d0:	4618      	mov	r0, r3
 80087d2:	f007 fe27 	bl	8010424 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 80087d6:	f009 faf3 	bl	8011dc0 <_ZN12TestRegistry18getCurrentRegistryEv>
 80087da:	4604      	mov	r4, r0
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	3344      	adds	r3, #68	; 0x44
 80087e0:	681d      	ldr	r5, [r3, #0]
 80087e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80087e6:	490f      	ldr	r1, [pc, #60]	; (8008824 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 80087e8:	4618      	mov	r0, r3
 80087ea:	f004 f832 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80087ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80087f2:	4619      	mov	r1, r3
 80087f4:	4620      	mov	r0, r4
 80087f6:	47a8      	blx	r5
 80087f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80087fc:	4618      	mov	r0, r3
 80087fe:	f004 fbe0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return result;
 8008802:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8008804:	f107 0318 	add.w	r3, r7, #24
 8008808:	4618      	mov	r0, r3
 800880a:	f001 ff4d 	bl	800a6a8 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 800880e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008812:	4618      	mov	r0, r3
 8008814:	f7ff ff6a 	bl	80086ec <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8008818:	4623      	mov	r3, r4
}
 800881a:	4618      	mov	r0, r3
 800881c:	3760      	adds	r7, #96	; 0x60
 800881e:	46bd      	mov	sp, r7
 8008820:	bdb0      	pop	{r4, r5, r7, pc}
 8008822:	bf00      	nop
 8008824:	08023ba4 	.word	0x08023ba4

08008828 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8008828:	b590      	push	{r4, r7, lr}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8008836:	4a0f      	ldr	r2, [pc, #60]	; (8008874 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	605a      	str	r2, [r3, #4]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	609a      	str	r2, [r3, #8]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 800884e:	2241      	movs	r2, #65	; 0x41
 8008850:	4909      	ldr	r1, [pc, #36]	; (8008878 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8008852:	2038      	movs	r0, #56	; 0x38
 8008854:	f001 fc3a 	bl	800a0cc <_ZnwjPKci>
 8008858:	4604      	mov	r4, r0
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	68b9      	ldr	r1, [r7, #8]
 800885e:	4620      	mov	r0, r4
 8008860:	f00c f84a 	bl	80148f8 <_ZN20CommandLineArgumentsC1EiPKPKc>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	609c      	str	r4, [r3, #8]
}
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4618      	mov	r0, r3
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	bd90      	pop	{r4, r7, pc}
 8008872:	bf00      	nop
 8008874:	08027a54 	.word	0x08027a54
 8008878:	08023bb8 	.word	0x08023bb8

0800887c <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	4a0c      	ldr	r2, [pc, #48]	; (80088b8 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d004      	beq.n	800889c <_ZN21CommandLineTestRunnerD1Ev+0x20>
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	3204      	adds	r2, #4
 8008896:	6812      	ldr	r2, [r2, #0]
 8008898:	4618      	mov	r0, r3
 800889a:	4790      	blx	r2
    delete output_;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d004      	beq.n	80088ae <_ZN21CommandLineTestRunnerD1Ev+0x32>
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	3204      	adds	r2, #4
 80088a8:	6812      	ldr	r2, [r2, #0]
 80088aa:	4618      	mov	r0, r3
 80088ac:	4790      	blx	r2
}
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	08027a54 	.word	0x08027a54

080088bc <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
}
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7ff ffd9 	bl	800887c <_ZN21CommandLineTestRunnerD1Ev>
 80088ca:	2110      	movs	r1, #16
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f001 fc11 	bl	800a0f4 <_ZdlPvj>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 80088dc:	b5b0      	push	{r4, r5, r7, lr}
 80088de:	b08c      	sub	sp, #48	; 0x30
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 80088e4:	2301      	movs	r3, #1
 80088e6:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 80088e8:	f107 031c 	add.w	r3, r7, #28
 80088ec:	4929      	ldr	r1, [pc, #164]	; (8008994 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 80088ee:	4618      	mov	r0, r3
 80088f0:	f003 ffaf 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80088f4:	f107 021c 	add.w	r2, r7, #28
 80088f8:	f107 0308 	add.w	r3, r7, #8
 80088fc:	4611      	mov	r1, r2
 80088fe:	4618      	mov	r0, r3
 8008900:	f008 fe1c 	bl	801153c <_ZN16SetPointerPluginC1ERK12SimpleString>
 8008904:	f107 031c 	add.w	r3, r7, #28
 8008908:	4618      	mov	r0, r3
 800890a:	f004 fb5a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68da      	ldr	r2, [r3, #12]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3334      	adds	r3, #52	; 0x34
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f107 0108 	add.w	r1, r7, #8
 8008920:	4610      	mov	r0, r2
 8008922:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68da      	ldr	r2, [r3, #12]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	333c      	adds	r3, #60	; 0x3c
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4610      	mov	r0, r2
 8008934:	4798      	blx	r3
 8008936:	4603      	mov	r3, r0
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fa3e 	bl	8008dbc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f8ac 	bl	8008aa4 <_ZN21CommandLineTestRunner11runAllTestsEv>
 800894c:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68dd      	ldr	r5, [r3, #12]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3344      	adds	r3, #68	; 0x44
 800895a:	681c      	ldr	r4, [r3, #0]
 800895c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008960:	490c      	ldr	r1, [pc, #48]	; (8008994 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8008962:	4618      	mov	r0, r3
 8008964:	f003 ff75 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8008968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800896c:	4619      	mov	r1, r3
 800896e:	4628      	mov	r0, r5
 8008970:	47a0      	blx	r4
 8008972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008976:	4618      	mov	r0, r3
 8008978:	f004 fb23 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return testResult;
 800897c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 800897e:	f107 0308 	add.w	r3, r7, #8
 8008982:	4618      	mov	r0, r3
 8008984:	f000 faaa 	bl	8008edc <_ZN16SetPointerPluginD1Ev>
    return testResult;
 8008988:	4623      	mov	r3, r4
}
 800898a:	4618      	mov	r0, r3
 800898c:	3730      	adds	r7, #48	; 0x30
 800898e:	46bd      	mov	sp, r7
 8008990:	bdb0      	pop	{r4, r5, r7, pc}
 8008992:	bf00      	nop
 8008994:	08023bdc 	.word	0x08023bdc

08008998 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 8008998:	b5b0      	push	{r4, r5, r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68dd      	ldr	r5, [r3, #12]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3330      	adds	r3, #48	; 0x30
 80089ac:	681c      	ldr	r4, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f00c fce0 	bl	8015378 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 80089b8:	4603      	mov	r3, r0
 80089ba:	4619      	mov	r1, r3
 80089bc:	4628      	mov	r0, r5
 80089be:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68dd      	ldr	r5, [r3, #12]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	332c      	adds	r3, #44	; 0x2c
 80089cc:	681c      	ldr	r4, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f00c fcdc 	bl	8015390 <_ZNK20CommandLineArguments14getNameFiltersEv>
 80089d8:	4603      	mov	r3, r0
 80089da:	4619      	mov	r1, r3
 80089dc:	4628      	mov	r0, r5
 80089de:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f00c fc2b 	bl	8015240 <_ZNK20CommandLineArguments9isVerboseEv>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d009      	beq.n	8008a04 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3320      	adds	r3, #32
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2101      	movs	r1, #1
 8008a00:	4610      	mov	r0, r2
 8008a02:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f00c fc25 	bl	8015258 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d009      	beq.n	8008a28 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3320      	adds	r3, #32
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2102      	movs	r1, #2
 8008a24:	4610      	mov	r0, r2
 8008a26:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f00c fc1f 	bl	8015270 <_ZNK20CommandLineArguments7isColorEv>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d008      	beq.n	8008a4a <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3324      	adds	r3, #36	; 0x24
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4610      	mov	r0, r2
 8008a48:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f00c fc4a 	bl	80152e8 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d008      	beq.n	8008a6c <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68da      	ldr	r2, [r3, #12]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3360      	adds	r3, #96	; 0x60
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f00c fc2d 	bl	80152d0 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d004      	beq.n	8008a86 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f009 fa19 	bl	8011eb8 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f00c fc50 	bl	8015330 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 8008a96:	f00b fadb 	bl	8014050 <_ZN10UtestShell14setCrashOnFailEv>
}
 8008a9a:	bf00      	nop
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008aa4 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 8008aa4:	b5b0      	push	{r4, r5, r7, lr}
 8008aa6:	b094      	sub	sp, #80	; 0x50
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7ff ff73 	bl	8008998 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8008aba:	2300      	movs	r3, #0
 8008abc:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f00c fc1c 	bl	8015300 <_ZNK20CommandLineArguments14getRepeatCountEv>
 8008ac8:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f00c fbda 	bl	8015288 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d019      	beq.n	8008b0e <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	f107 0308 	add.w	r3, r7, #8
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f009 fbaf 	bl	8012248 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68da      	ldr	r2, [r3, #12]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3320      	adds	r3, #32
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f107 0108 	add.w	r1, r7, #8
 8008afc:	4610      	mov	r0, r2
 8008afe:	4798      	blx	r3
        return 0;
 8008b00:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8008b02:	f107 0308 	add.w	r3, r7, #8
 8008b06:	4618      	mov	r0, r3
 8008b08:	f009 fbd6 	bl	80122b8 <_ZN10TestResultD1Ev>
 8008b0c:	e0e1      	b.n	8008cd2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f00c fbc4 	bl	80152a0 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d019      	beq.n	8008b52 <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	f107 0308 	add.w	r3, r7, #8
 8008b26:	4611      	mov	r1, r2
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f009 fb8d 	bl	8012248 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68da      	ldr	r2, [r3, #12]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3324      	adds	r3, #36	; 0x24
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f107 0108 	add.w	r1, r7, #8
 8008b40:	4610      	mov	r0, r2
 8008b42:	4798      	blx	r3
        return 0;
 8008b44:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8008b46:	f107 0308 	add.w	r3, r7, #8
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f009 fbb4 	bl	80122b8 <_ZN10TestResultD1Ev>
 8008b50:	e0bf      	b.n	8008cd2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f00c fbae 	bl	80152b8 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d019      	beq.n	8008b96 <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	f107 0308 	add.w	r3, r7, #8
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f009 fb6b 	bl	8012248 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3328      	adds	r3, #40	; 0x28
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f107 0108 	add.w	r1, r7, #8
 8008b84:	4610      	mov	r0, r2
 8008b86:	4798      	blx	r3
        return 0;
 8008b88:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8008b8a:	f107 0308 	add.w	r3, r7, #8
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f009 fb92 	bl	80122b8 <_ZN10TestResultD1Ev>
 8008b94:	e09d      	b.n	8008cd2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f00c fbbc 	bl	8015318 <_ZNK20CommandLineArguments11isReversingEv>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d008      	beq.n	8008bb8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	331c      	adds	r3, #28
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4798      	blx	r3

    if (arguments_->isShuffling())
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f00c fbc3 	bl	8015348 <_ZNK20CommandLineArguments11isShufflingEv>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d023      	beq.n	8008c10 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	332c      	adds	r3, #44	; 0x2c
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4941      	ldr	r1, [pc, #260]	; (8008cdc <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685d      	ldr	r5, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3334      	adds	r3, #52	; 0x34
 8008be8:	681c      	ldr	r4, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f00c fbb6 	bl	8015360 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	47a0      	blx	r4
        output_->print("\n");
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685a      	ldr	r2, [r3, #4]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	332c      	adds	r3, #44	; 0x2c
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4935      	ldr	r1, [pc, #212]	; (8008ce0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 8008c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c12:	1c5a      	adds	r2, r3, #1
 8008c14:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008c16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	bf8c      	ite	hi
 8008c1c:	2301      	movhi	r3, #1
 8008c1e:	2300      	movls	r3, #0
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d04e      	beq.n	8008cc4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f00c fb8c 	bl	8015348 <_ZNK20CommandLineArguments11isShufflingEv>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00f      	beq.n	8008c56 <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68dd      	ldr	r5, [r3, #12]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3318      	adds	r3, #24
 8008c42:	681c      	ldr	r4, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f00c fb89 	bl	8015360 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	4619      	mov	r1, r3
 8008c52:	4628      	mov	r0, r5
 8008c54:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6858      	ldr	r0, [r3, #4]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3340      	adds	r3, #64	; 0x40
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c66:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008c68:	4798      	blx	r3
        TestResult tr(*output_);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	f107 0308 	add.w	r3, r7, #8
 8008c72:	4611      	mov	r1, r2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f009 fae7 	bl	8012248 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68da      	ldr	r2, [r3, #12]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3314      	adds	r3, #20
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f107 0108 	add.w	r1, r7, #8
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 8008c90:	f107 0308 	add.w	r3, r7, #8
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7ff fcef 	bl	8008678 <_ZNK10TestResult15getFailureCountEv>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c9e:	4413      	add	r3, r2
 8008ca0:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 8008ca2:	f107 0308 	add.w	r3, r7, #8
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7ff fcf2 	bl	8008690 <_ZNK10TestResult9isFailureEv>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d002      	beq.n	8008cb8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 8008cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 8008cb8:	f107 0308 	add.w	r3, r7, #8
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f009 fafb 	bl	80122b8 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 8008cc2:	e7a5      	b.n	8008c10 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 8008cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 8008cca:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8008ccc:	e000      	b.n	8008cd0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 8008cce:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8008cd0:	bf00      	nop
 8008cd2:	4623      	mov	r3, r4
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3750      	adds	r7, #80	; 0x50
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bdb0      	pop	{r4, r5, r7, pc}
 8008cdc:	08023bf0 	.word	0x08023bf0
 8008ce0:	08023c1c 	.word	0x08023c1c

08008ce4 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8008ce4:	b590      	push	{r4, r7, lr}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8008cec:	229d      	movs	r2, #157	; 0x9d
 8008cee:	4906      	ldr	r1, [pc, #24]	; (8008d08 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 8008cf0:	201c      	movs	r0, #28
 8008cf2:	f001 f9eb 	bl	800a0cc <_ZnwjPKci>
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f005 f955 	bl	800dfa8 <_ZN18TeamCityTestOutputC1Ev>
 8008cfe:	4623      	mov	r3, r4
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd90      	pop	{r4, r7, pc}
 8008d08:	08023bb8 	.word	0x08023bb8

08008d0c <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8008d0c:	b590      	push	{r4, r7, lr}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 8008d16:	22a2      	movs	r2, #162	; 0xa2
 8008d18:	490a      	ldr	r1, [pc, #40]	; (8008d44 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8008d1a:	2014      	movs	r0, #20
 8008d1c:	f001 f9d6 	bl	800a0cc <_ZnwjPKci>
 8008d20:	4604      	mov	r4, r0
 8008d22:	4620      	mov	r0, r4
 8008d24:	f000 f980 	bl	8009028 <_ZN15JUnitTestOutputC1Ev>
 8008d28:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d003      	beq.n	8008d38 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f000 fbb2 	bl	800949c <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8008d38:	68fb      	ldr	r3, [r7, #12]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3714      	adds	r7, #20
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd90      	pop	{r4, r7, pc}
 8008d42:	bf00      	nop
 8008d44:	08023bb8 	.word	0x08023bb8

08008d48 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8008d48:	b590      	push	{r4, r7, lr}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8008d50:	22ab      	movs	r2, #171	; 0xab
 8008d52:	4906      	ldr	r1, [pc, #24]	; (8008d6c <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8008d54:	2010      	movs	r0, #16
 8008d56:	f001 f9b9 	bl	800a0cc <_ZnwjPKci>
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f7ff fcb3 	bl	80086c8 <_ZN17ConsoleTestOutputC1Ev>
 8008d62:	4623      	mov	r3, r4
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd90      	pop	{r4, r7, pc}
 8008d6c:	08023bb8 	.word	0x08023bb8

08008d70 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8008d70:	b590      	push	{r4, r7, lr}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8008d7c:	22b0      	movs	r2, #176	; 0xb0
 8008d7e:	490e      	ldr	r1, [pc, #56]	; (8008db8 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8008d80:	2018      	movs	r0, #24
 8008d82:	f001 f9a3 	bl	800a0cc <_ZnwjPKci>
 8008d86:	4604      	mov	r4, r0
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f007 ff83 	bl	8010c94 <_ZN19CompositeTestOutputC1Ev>
 8008d8e:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	335c      	adds	r3, #92	; 0x5c
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68b9      	ldr	r1, [r7, #8]
 8008d9a:	6978      	ldr	r0, [r7, #20]
 8008d9c:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3360      	adds	r3, #96	; 0x60
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6879      	ldr	r1, [r7, #4]
 8008da8:	6978      	ldr	r0, [r7, #20]
 8008daa:	4798      	blx	r3
  return composite;
 8008dac:	697b      	ldr	r3, [r7, #20]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	371c      	adds	r7, #28
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd90      	pop	{r4, r7, pc}
 8008db6:	bf00      	nop
 8008db8:	08023bb8 	.word	0x08023bb8

08008dbc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8008dbc:	b5b0      	push	{r4, r5, r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f00b fe4f 	bl	8014a70 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	f083 0301 	eor.w	r3, r3, #1
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d029      	beq.n	8008e32 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3310      	adds	r3, #16
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	4798      	blx	r3
 8008dea:	4602      	mov	r2, r0
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685d      	ldr	r5, [r3, #4]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	332c      	adds	r3, #44	; 0x2c
 8008dfc:	681c      	ldr	r4, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f00c fa10 	bl	8015228 <_ZNK20CommandLineArguments8needHelpEv>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d006      	beq.n	8008e1c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f00c f9fa 	bl	801520c <_ZNK20CommandLineArguments4helpEv>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	e005      	b.n	8008e28 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f00c f9e5 	bl	80151f0 <_ZNK20CommandLineArguments5usageEv>
 8008e26:	4603      	mov	r3, r0
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	47a0      	blx	r4
    return false;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e050      	b.n	8008ed4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f00d f84c 	bl	8015ed4 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d02c      	beq.n	8008e9c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	330c      	adds	r3, #12
 8008e48:	681c      	ldr	r4, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f00d f864 	bl	8015f1c <_ZNK20CommandLineArguments14getPackageNameEv>
 8008e54:	4603      	mov	r3, r0
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	47a0      	blx	r4
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f00c f9ea 	bl	8015240 <_ZNK20CommandLineArguments9isVerboseEv>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d02f      	beq.n	8008ed2 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3314      	adds	r3, #20
 8008e78:	681c      	ldr	r4, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685d      	ldr	r5, [r3, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3310      	adds	r3, #16
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	4798      	blx	r3
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	4629      	mov	r1, r5
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	47a0      	blx	r4
 8008e94:	4602      	mov	r2, r0
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	605a      	str	r2, [r3, #4]
 8008e9a:	e01a      	b.n	8008ed2 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f00d f829 	bl	8015ef8 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d009      	beq.n	8008ec0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3308      	adds	r3, #8
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	4798      	blx	r3
 8008eb8:	4602      	mov	r2, r0
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	605a      	str	r2, [r3, #4]
 8008ebe:	e008      	b.n	8008ed2 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3310      	adds	r3, #16
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	4798      	blx	r3
 8008ecc:	4602      	mov	r2, r0
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	605a      	str	r2, [r3, #4]
  return true;
 8008ed2:	2301      	movs	r3, #1
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bdb0      	pop	{r4, r5, r7, pc}

08008edc <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	4a05      	ldr	r2, [pc, #20]	; (8008efc <_ZN16SetPointerPluginD1Ev+0x20>)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	601a      	str	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f008 f9e7 	bl	80112c0 <_ZN10TestPluginD1Ev>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	080281d4 	.word	0x080281d4

08008f00 <_ZN16SetPointerPluginD0Ev>:
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7ff ffe7 	bl	8008edc <_ZN16SetPointerPluginD1Ev>
 8008f0e:	2114      	movs	r1, #20
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f001 f8ef 	bl	800a0f4 <_ZdlPvj>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
    }
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4910      	ldr	r1, [pc, #64]	; (8008f84 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8008f44:	4618      	mov	r0, r3
 8008f46:	f003 fc84 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	609a      	str	r2, [r3, #8]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	60da      	str	r2, [r3, #12]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	741a      	strb	r2, [r3, #16]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3314      	adds	r3, #20
 8008f60:	4908      	ldr	r1, [pc, #32]	; (8008f84 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8008f62:	4618      	mov	r0, r3
 8008f64:	f003 fc75 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	61da      	str	r2, [r3, #28]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	621a      	str	r2, [r3, #32]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	08023c20 	.word	0x08023c20

08008f88 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	605a      	str	r2, [r3, #4]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	609a      	str	r2, [r3, #8]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	60da      	str	r2, [r3, #12]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	611a      	str	r2, [r3, #16]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	3314      	adds	r3, #20
 8008fb2:	4907      	ldr	r1, [pc, #28]	; (8008fd0 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f003 fc4c 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	61da      	str	r2, [r3, #28]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	621a      	str	r2, [r3, #32]
    {
    }
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	08023c20 	.word	0x08023c20

08008fd4 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3314      	adds	r3, #20
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f003 ffee 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7ff ffc4 	bl	8008f88 <_ZN20JUnitTestGroupResultC1Ev>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	3328      	adds	r3, #40	; 0x28
 8009004:	4907      	ldr	r1, [pc, #28]	; (8009024 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8009006:	4618      	mov	r0, r3
 8009008:	f003 fc23 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3330      	adds	r3, #48	; 0x30
 8009010:	4904      	ldr	r1, [pc, #16]	; (8009024 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8009012:	4618      	mov	r0, r3
 8009014:	f003 fc1d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4618      	mov	r0, r3
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	08023c20 	.word	0x08023c20

08009028 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8009028:	b590      	push	{r4, r7, lr}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4618      	mov	r0, r3
 8009034:	f007 f936 	bl	80102a4 <_ZN10TestOutputC1Ev>
 8009038:	4a09      	ldr	r2, [pc, #36]	; (8009060 <_ZN15JUnitTestOutputC1Ev+0x38>)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	601a      	str	r2, [r3, #0]
 800903e:	224d      	movs	r2, #77	; 0x4d
 8009040:	4908      	ldr	r1, [pc, #32]	; (8009064 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 8009042:	2038      	movs	r0, #56	; 0x38
 8009044:	f001 f842 	bl	800a0cc <_ZnwjPKci>
 8009048:	4604      	mov	r4, r0
 800904a:	4620      	mov	r0, r4
 800904c:	f7ff ffd0 	bl	8008ff0 <_ZN19JUnitTestOutputImplC1Ev>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	611c      	str	r4, [r3, #16]
{
}
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4618      	mov	r0, r3
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	bd90      	pop	{r4, r7, pc}
 800905e:	bf00      	nop
 8009060:	08027a74 	.word	0x08027a74
 8009064:	08023c24 	.word	0x08023c24

08009068 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3330      	adds	r3, #48	; 0x30
 8009074:	4618      	mov	r0, r3
 8009076:	f003 ffa4 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	3328      	adds	r3, #40	; 0x28
 800907e:	4618      	mov	r0, r3
 8009080:	f003 ff9f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4618      	mov	r0, r3
 8009088:	f7ff ffa4 	bl	8008fd4 <_ZN20JUnitTestGroupResultD1Ev>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4618      	mov	r0, r3
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8009098:	b590      	push	{r4, r7, lr}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	4a0c      	ldr	r2, [pc, #48]	; (80090d4 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f838 	bl	800911c <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	691c      	ldr	r4, [r3, #16]
 80090b0:	2c00      	cmp	r4, #0
 80090b2:	d006      	beq.n	80090c2 <_ZN15JUnitTestOutputD1Ev+0x2a>
 80090b4:	4620      	mov	r0, r4
 80090b6:	f7ff ffd7 	bl	8009068 <_ZN19JUnitTestOutputImplD1Ev>
 80090ba:	2138      	movs	r1, #56	; 0x38
 80090bc:	4620      	mov	r0, r4
 80090be:	f001 f819 	bl	800a0f4 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f007 f90b 	bl	80102e0 <_ZN10TestOutputD1Ev>
}
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4618      	mov	r0, r3
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd90      	pop	{r4, r7, pc}
 80090d4:	08027a74 	.word	0x08027a74

080090d8 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
}
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7ff ffd9 	bl	8009098 <_ZN15JUnitTestOutputD1Ev>
 80090e6:	2114      	movs	r1, #20
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f001 f803 	bl	800a0f4 <_ZdlPvj>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4618      	mov	r0, r3
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	3314      	adds	r3, #20
 8009104:	4618      	mov	r0, r3
 8009106:	f003 ff5c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4618      	mov	r0, r3
 800910e:	f003 ff58 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4618      	mov	r0, r3
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 800911c:	b590      	push	{r4, r7, lr}
 800911e:	b087      	sub	sp, #28
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	2200      	movs	r2, #0
 800912a:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	2200      	movs	r2, #0
 8009132:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	f103 0414 	add.w	r4, r3, #20
 800913c:	f107 0308 	add.w	r3, r7, #8
 8009140:	491d      	ldr	r1, [pc, #116]	; (80091b8 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 8009142:	4618      	mov	r0, r3
 8009144:	f003 fb85 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8009148:	f107 0308 	add.w	r3, r7, #8
 800914c:	4619      	mov	r1, r3
 800914e:	4620      	mov	r0, r4
 8009150:	f003 fbeb 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 8009154:	f107 0308 	add.w	r3, r7, #8
 8009158:	4618      	mov	r0, r3
 800915a:	f003 ff32 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	617b      	str	r3, [r7, #20]
    while (cur) {
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d018      	beq.n	800919e <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d004      	beq.n	8009184 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	3204      	adds	r2, #4
 800917e:	6812      	ldr	r2, [r2, #0]
 8009180:	4618      	mov	r0, r3
 8009182:	4790      	blx	r2
        delete cur;
 8009184:	697c      	ldr	r4, [r7, #20]
 8009186:	2c00      	cmp	r4, #0
 8009188:	d006      	beq.n	8009198 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 800918a:	4620      	mov	r0, r4
 800918c:	f7ff ffb4 	bl	80090f8 <_ZN23JUnitTestCaseResultNodeD1Ev>
 8009190:	2128      	movs	r1, #40	; 0x28
 8009192:	4620      	mov	r0, r4
 8009194:	f000 ffae 	bl	800a0f4 <_ZdlPvj>
        cur = tmp;
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	617b      	str	r3, [r7, #20]
    while (cur) {
 800919c:	e7e3      	b.n	8009166 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	2200      	movs	r2, #0
 80091a4:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	2200      	movs	r2, #0
 80091ac:	621a      	str	r2, [r3, #32]
}
 80091ae:	bf00      	nop
 80091b0:	371c      	adds	r7, #28
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd90      	pop	{r4, r7, pc}
 80091b6:	bf00      	nop
 80091b8:	08023c20 	.word	0x08023c20

080091bc <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
}
 80091da:	bf00      	nop
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 80091e6:	b590      	push	{r4, r7, lr}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	6a1c      	ldr	r4, [r3, #32]
 80091f6:	6838      	ldr	r0, [r7, #0]
 80091f8:	f009 f9c6 	bl	8012588 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 80091fc:	4603      	mov	r3, r0
 80091fe:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	6a1c      	ldr	r4, [r3, #32]
 8009206:	6838      	ldr	r0, [r7, #0]
 8009208:	f7ff fe8a 	bl	8008f20 <_ZNK10TestResult13getCheckCountEv>
 800920c:	4603      	mov	r3, r0
 800920e:	6223      	str	r3, [r4, #32]
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	bd90      	pop	{r4, r7, pc}

08009218 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
}
 8009222:	bf00      	nop
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 800922e:	b590      	push	{r4, r7, lr}
 8009230:	b083      	sub	sp, #12
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	691c      	ldr	r4, [r3, #16]
 800923c:	6838      	ldr	r0, [r7, #0]
 800923e:	f009 f9af 	bl	80125a0 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 8009242:	4603      	mov	r3, r0
 8009244:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3364      	adds	r3, #100	; 0x64
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	4798      	blx	r3
    resetTestGroupResult();
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7ff ff62 	bl	800911c <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	bd90      	pop	{r4, r7, pc}

08009260 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8009260:	b590      	push	{r4, r7, lr}
 8009262:	b089      	sub	sp, #36	; 0x24
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	3201      	adds	r2, #1
 8009272:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	f103 0414 	add.w	r4, r3, #20
 800927c:	f107 0308 	add.w	r3, r7, #8
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	4618      	mov	r0, r3
 8009284:	f009 fcef 	bl	8012c66 <_ZNK10UtestShell8getGroupEv>
 8009288:	f107 0308 	add.w	r3, r7, #8
 800928c:	4619      	mov	r1, r3
 800928e:	4620      	mov	r0, r4
 8009290:	f003 fb4b 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 8009294:	f107 0308 	add.w	r3, r7, #8
 8009298:	4618      	mov	r0, r3
 800929a:	f003 fe92 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 800929e:	4b3c      	ldr	r3, [pc, #240]	; (8009390 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4798      	blx	r3
 80092a4:	4602      	mov	r2, r0
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d110      	bne.n	80092d8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 80092b6:	2288      	movs	r2, #136	; 0x88
 80092b8:	4936      	ldr	r1, [pc, #216]	; (8009394 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 80092ba:	2028      	movs	r0, #40	; 0x28
 80092bc:	f000 ff06 	bl	800a0cc <_ZnwjPKci>
 80092c0:	4604      	mov	r4, r0
 80092c2:	4620      	mov	r0, r4
 80092c4:	f7ff fe38 	bl	8008f38 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 80092cc:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	6912      	ldr	r2, [r2, #16]
 80092d2:	6a1b      	ldr	r3, [r3, #32]
 80092d4:	61d3      	str	r3, [r2, #28]
 80092d6:	e013      	b.n	8009300 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 80092d8:	228b      	movs	r2, #139	; 0x8b
 80092da:	492e      	ldr	r1, [pc, #184]	; (8009394 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 80092dc:	2028      	movs	r0, #40	; 0x28
 80092de:	f000 fef5 	bl	800a0cc <_ZnwjPKci>
 80092e2:	4604      	mov	r4, r0
 80092e4:	4620      	mov	r0, r4
 80092e6:	f7ff fe27 	bl	8008f38 <_ZN23JUnitTestCaseResultNodeC1Ev>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	6a1b      	ldr	r3, [r3, #32]
 80092f0:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	6a1a      	ldr	r2, [r3, #32]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80092fe:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	461c      	mov	r4, r3
 8009308:	f107 0310 	add.w	r3, r7, #16
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	4618      	mov	r0, r3
 8009310:	f009 fc9a 	bl	8012c48 <_ZNK10UtestShell7getNameEv>
 8009314:	f107 0310 	add.w	r3, r7, #16
 8009318:	4619      	mov	r1, r3
 800931a:	4620      	mov	r0, r4
 800931c:	f003 fb05 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 8009320:	f107 0310 	add.w	r3, r7, #16
 8009324:	4618      	mov	r0, r3
 8009326:	f003 fe4c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	6a1b      	ldr	r3, [r3, #32]
 8009330:	f103 0414 	add.w	r4, r3, #20
 8009334:	f107 0318 	add.w	r3, r7, #24
 8009338:	6839      	ldr	r1, [r7, #0]
 800933a:	4618      	mov	r0, r3
 800933c:	f009 fd55 	bl	8012dea <_ZNK10UtestShell7getFileEv>
 8009340:	f107 0318 	add.w	r3, r7, #24
 8009344:	4619      	mov	r1, r3
 8009346:	4620      	mov	r0, r4
 8009348:	f003 faef 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800934c:	f107 0318 	add.w	r3, r7, #24
 8009350:	4618      	mov	r0, r3
 8009352:	f003 fe36 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	6a1c      	ldr	r4, [r3, #32]
 800935c:	6838      	ldr	r0, [r7, #0]
 800935e:	f009 fd53 	bl	8012e08 <_ZNK10UtestShell13getLineNumberEv>
 8009362:	4603      	mov	r3, r0
 8009364:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3318      	adds	r3, #24
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6838      	ldr	r0, [r7, #0]
 8009370:	4798      	blx	r3
 8009372:	4603      	mov	r3, r0
 8009374:	f083 0301 	eor.w	r3, r3, #1
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d004      	beq.n	8009388 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	2201      	movs	r2, #1
 8009386:	741a      	strb	r2, [r3, #16]
    }
}
 8009388:	bf00      	nop
 800938a:	3724      	adds	r7, #36	; 0x24
 800938c:	46bd      	mov	sp, r7
 800938e:	bd90      	pop	{r4, r7, pc}
 8009390:	200000a8 	.word	0x200000a8
 8009394:	08023c24 	.word	0x08023c24

08009398 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08a      	sub	sp, #40	; 0x28
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 80093a4:	f107 0310 	add.w	r3, r7, #16
 80093a8:	4928      	ldr	r1, [pc, #160]	; (800944c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 80093aa:	4618      	mov	r0, r3
 80093ac:	f003 fa51 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	3328      	adds	r3, #40	; 0x28
 80093b6:	4618      	mov	r0, r3
 80093b8:	f003 fdf2 	bl	800cfa0 <_ZNK12SimpleString7isEmptyEv>
 80093bc:	4603      	mov	r3, r0
 80093be:	f083 0301 	eor.w	r3, r3, #1
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00f      	beq.n	80093e8 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80093d0:	f107 0310 	add.w	r3, r7, #16
 80093d4:	4611      	mov	r1, r2
 80093d6:	4618      	mov	r0, r3
 80093d8:	f003 fe70 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 80093dc:	f107 0310 	add.w	r3, r7, #16
 80093e0:	491b      	ldr	r1, [pc, #108]	; (8009450 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 80093e2:	4618      	mov	r0, r3
 80093e4:	f003 fe7c 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 80093e8:	f107 0310 	add.w	r3, r7, #16
 80093ec:	6879      	ldr	r1, [r7, #4]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f003 fe64 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3384      	adds	r3, #132	; 0x84
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f107 0018 	add.w	r0, r7, #24
 8009400:	f107 0210 	add.w	r2, r7, #16
 8009404:	68b9      	ldr	r1, [r7, #8]
 8009406:	4798      	blx	r3
 8009408:	f107 0320 	add.w	r3, r7, #32
 800940c:	4911      	ldr	r1, [pc, #68]	; (8009454 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 800940e:	4618      	mov	r0, r3
 8009410:	f003 fa1f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f107 0220 	add.w	r2, r7, #32
 800941a:	f107 0118 	add.w	r1, r7, #24
 800941e:	4618      	mov	r0, r3
 8009420:	f003 fe31 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 8009424:	f107 0320 	add.w	r3, r7, #32
 8009428:	4618      	mov	r0, r3
 800942a:	f003 fdca 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800942e:	f107 0318 	add.w	r3, r7, #24
 8009432:	4618      	mov	r0, r3
 8009434:	f003 fdc5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8009438:	f107 0310 	add.w	r3, r7, #16
 800943c:	4618      	mov	r0, r3
 800943e:	f003 fdc0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 8009442:	bf00      	nop
}
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	3728      	adds	r7, #40	; 0x28
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	08023c40 	.word	0x08023c40
 8009450:	08023c4c 	.word	0x08023c4c
 8009454:	08023c50 	.word	0x08023c50

08009458 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f003 fa47 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800946c:	4b0a      	ldr	r3, [pc, #40]	; (8009498 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00a      	beq.n	800948e <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	225f      	movs	r2, #95	; 0x5f
 800947e:	4619      	mov	r1, r3
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f003 fbcc 	bl	800cc1e <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	3301      	adds	r3, #1
 800948a:	617b      	str	r3, [r7, #20]
 800948c:	e7f0      	b.n	8009470 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 800948e:	bf00      	nop
}
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	3718      	adds	r7, #24
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	08023c58 	.word	0x08023c58

0800949c <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d006      	beq.n	80094bc <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	3328      	adds	r3, #40	; 0x28
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f003 fa37 	bl	800c92a <_ZN12SimpleStringaSERKS_>
    }
}
 80094bc:	bf00      	nop
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 80094c4:	b590      	push	{r4, r7, lr}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3368      	adds	r3, #104	; 0x68
 80094d2:	681c      	ldr	r4, [r3, #0]
 80094d4:	f107 0308 	add.w	r3, r7, #8
 80094d8:	4908      	ldr	r1, [pc, #32]	; (80094fc <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 80094da:	4618      	mov	r0, r3
 80094dc:	f003 f9b9 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80094e0:	f107 0308 	add.w	r3, r7, #8
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	47a0      	blx	r4
 80094ea:	f107 0308 	add.w	r3, r7, #8
 80094ee:	4618      	mov	r0, r3
 80094f0:	f003 fd67 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 80094f4:	bf00      	nop
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd90      	pop	{r4, r7, pc}
 80094fc:	08023c64 	.word	0x08023c64

08009500 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8009500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009504:	b08a      	sub	sp, #40	; 0x28
 8009506:	af04      	add	r7, sp, #16
 8009508:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8009510:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 8009516:	3314      	adds	r3, #20
 8009518:	4618      	mov	r0, r3
 800951a:	f003 fd25 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800951e:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 8009526:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	4a23      	ldr	r2, [pc, #140]	; (80095bc <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8009530:	fba2 2303 	umull	r2, r3, r2, r3
 8009534:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 8009536:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	691a      	ldr	r2, [r3, #16]
 800953e:	4b1f      	ldr	r3, [pc, #124]	; (80095bc <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8009540:	fba3 1302 	umull	r1, r3, r3, r2
 8009544:	099b      	lsrs	r3, r3, #6
 8009546:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800954a:	fb01 f303 	mul.w	r3, r1, r3
 800954e:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8009550:	603b      	str	r3, [r7, #0]
 8009552:	4b1b      	ldr	r3, [pc, #108]	; (80095c0 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4798      	blx	r3
 8009558:	4603      	mov	r3, r0
 800955a:	f107 0008 	add.w	r0, r7, #8
 800955e:	9303      	str	r3, [sp, #12]
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	9302      	str	r3, [sp, #8]
 8009564:	9601      	str	r6, [sp, #4]
 8009566:	9500      	str	r5, [sp, #0]
 8009568:	4623      	mov	r3, r4
 800956a:	4642      	mov	r2, r8
 800956c:	4915      	ldr	r1, [pc, #84]	; (80095c4 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 800956e:	f004 fa2f 	bl	800d9d0 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	3368      	adds	r3, #104	; 0x68
 8009578:	681c      	ldr	r4, [r3, #0]
 800957a:	f107 0308 	add.w	r3, r7, #8
 800957e:	4618      	mov	r0, r3
 8009580:	f003 fcf2 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8009584:	4602      	mov	r2, r0
 8009586:	f107 0310 	add.w	r3, r7, #16
 800958a:	4611      	mov	r1, r2
 800958c:	4618      	mov	r0, r3
 800958e:	f003 f960 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8009592:	f107 0310 	add.w	r3, r7, #16
 8009596:	4619      	mov	r1, r3
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	47a0      	blx	r4
 800959c:	f107 0310 	add.w	r3, r7, #16
 80095a0:	4618      	mov	r0, r3
 80095a2:	f003 fd0e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 80095a6:	f107 0308 	add.w	r3, r7, #8
 80095aa:	4618      	mov	r0, r3
 80095ac:	f003 fd09 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 80095b0:	bf00      	nop
 80095b2:	3718      	adds	r7, #24
 80095b4:	46bd      	mov	sp, r7
 80095b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095ba:	bf00      	nop
 80095bc:	10624dd3 	.word	0x10624dd3
 80095c0:	200000ac 	.word	0x200000ac
 80095c4:	08023c90 	.word	0x08023c90

080095c8 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 80095c8:	b590      	push	{r4, r7, lr}
 80095ca:	b087      	sub	sp, #28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3368      	adds	r3, #104	; 0x68
 80095d6:	681c      	ldr	r4, [r3, #0]
 80095d8:	f107 0308 	add.w	r3, r7, #8
 80095dc:	4912      	ldr	r1, [pc, #72]	; (8009628 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 80095de:	4618      	mov	r0, r3
 80095e0:	f003 f937 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80095e4:	f107 0308 	add.w	r3, r7, #8
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	47a0      	blx	r4
 80095ee:	f107 0308 	add.w	r3, r7, #8
 80095f2:	4618      	mov	r0, r3
 80095f4:	f003 fce5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	3368      	adds	r3, #104	; 0x68
 80095fe:	681c      	ldr	r4, [r3, #0]
 8009600:	f107 0310 	add.w	r3, r7, #16
 8009604:	4909      	ldr	r1, [pc, #36]	; (800962c <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 8009606:	4618      	mov	r0, r3
 8009608:	f003 f923 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800960c:	f107 0310 	add.w	r3, r7, #16
 8009610:	4619      	mov	r1, r3
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	47a0      	blx	r4
 8009616:	f107 0310 	add.w	r3, r7, #16
 800961a:	4618      	mov	r0, r3
 800961c:	f003 fcd1 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8009620:	bf00      	nop
 8009622:	371c      	adds	r7, #28
 8009624:	46bd      	mov	sp, r7
 8009626:	bd90      	pop	{r4, r7, pc}
 8009628:	08023d00 	.word	0x08023d00
 800962c:	08023d10 	.word	0x08023d10

08009630 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f003 fc93 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8009642:	4603      	mov	r3, r0
 8009644:	4619      	mov	r1, r3
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f003 f903 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 800964c:	4a0e      	ldr	r2, [pc, #56]	; (8009688 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 800964e:	490f      	ldr	r1, [pc, #60]	; (800968c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f003 fb13 	bl	800cc7c <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 8009656:	4a0e      	ldr	r2, [pc, #56]	; (8009690 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 8009658:	490e      	ldr	r1, [pc, #56]	; (8009694 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f003 fb0e 	bl	800cc7c <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 8009660:	4a0d      	ldr	r2, [pc, #52]	; (8009698 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 8009662:	490e      	ldr	r1, [pc, #56]	; (800969c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f003 fb09 	bl	800cc7c <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 800966a:	4a0d      	ldr	r2, [pc, #52]	; (80096a0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 800966c:	490d      	ldr	r1, [pc, #52]	; (80096a4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f003 fb04 	bl	800cc7c <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 8009674:	4a0c      	ldr	r2, [pc, #48]	; (80096a8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 8009676:	490d      	ldr	r1, [pc, #52]	; (80096ac <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f003 faff 	bl	800cc7c <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 800967e:	bf00      	nop
}
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	08023d20 	.word	0x08023d20
 800968c:	08023d28 	.word	0x08023d28
 8009690:	08023d2c 	.word	0x08023d2c
 8009694:	08023d34 	.word	0x08023d34
 8009698:	08023d38 	.word	0x08023d38
 800969c:	08023d40 	.word	0x08023d40
 80096a0:	08023d44 	.word	0x08023d44
 80096a4:	08023d4c 	.word	0x08023d4c
 80096a8:	08023d50 	.word	0x08023d50
 80096ac:	08023d5c 	.word	0x08023d5c

080096b0 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 80096b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b4:	b096      	sub	sp, #88	; 0x58
 80096b6:	af08      	add	r7, sp, #32
 80096b8:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	69db      	ldr	r3, [r3, #28]
 80096c0:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 80096c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 80b2 	beq.w	800982e <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 80096ce:	3328      	adds	r3, #40	; 0x28
 80096d0:	4618      	mov	r0, r3
 80096d2:	f003 fc49 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 80096d6:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	3328      	adds	r3, #40	; 0x28
 80096de:	4618      	mov	r0, r3
 80096e0:	f003 fc5e 	bl	800cfa0 <_ZNK12SimpleString7isEmptyEv>
 80096e4:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 80096ea:	4c53      	ldr	r4, [pc, #332]	; (8009838 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 80096ec:	e000      	b.n	80096f0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 80096ee:	4c53      	ldr	r4, [pc, #332]	; (800983c <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 80096f4:	3314      	adds	r3, #20
 80096f6:	4618      	mov	r0, r3
 80096f8:	f003 fc36 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 80096fc:	4605      	mov	r5, r0
 80096fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009700:	4618      	mov	r0, r3
 8009702:	f003 fc31 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8009706:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8009708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800970a:	6a1a      	ldr	r2, [r3, #32]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8009714:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8009716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	4a49      	ldr	r2, [pc, #292]	; (8009840 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800971c:	fba2 2303 	umull	r2, r3, r2, r3
 8009720:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8009722:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8009724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009726:	689a      	ldr	r2, [r3, #8]
 8009728:	4b45      	ldr	r3, [pc, #276]	; (8009840 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800972a:	fba3 1302 	umull	r1, r3, r3, r2
 800972e:	099b      	lsrs	r3, r3, #6
 8009730:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009734:	fb01 f303 	mul.w	r3, r1, r3
 8009738:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800973a:	603b      	str	r3, [r7, #0]
 800973c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800973e:	3314      	adds	r3, #20
 8009740:	4618      	mov	r0, r3
 8009742:	f003 fc11 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8009746:	4602      	mov	r2, r0
 8009748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800974a:	69db      	ldr	r3, [r3, #28]
 800974c:	f107 0014 	add.w	r0, r7, #20
 8009750:	9306      	str	r3, [sp, #24]
 8009752:	9205      	str	r2, [sp, #20]
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	9204      	str	r2, [sp, #16]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	9203      	str	r2, [sp, #12]
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	9302      	str	r3, [sp, #8]
 8009760:	9601      	str	r6, [sp, #4]
 8009762:	9500      	str	r5, [sp, #0]
 8009764:	4623      	mov	r3, r4
 8009766:	4642      	mov	r2, r8
 8009768:	4936      	ldr	r1, [pc, #216]	; (8009844 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 800976a:	f004 f931 	bl	800d9d0 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3368      	adds	r3, #104	; 0x68
 8009774:	681c      	ldr	r4, [r3, #0]
 8009776:	f107 0314 	add.w	r3, r7, #20
 800977a:	4618      	mov	r0, r3
 800977c:	f003 fbf4 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8009780:	4602      	mov	r2, r0
 8009782:	f107 031c 	add.w	r3, r7, #28
 8009786:	4611      	mov	r1, r2
 8009788:	4618      	mov	r0, r3
 800978a:	f003 f862 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800978e:	f107 031c 	add.w	r3, r7, #28
 8009792:	4619      	mov	r1, r3
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	47a0      	blx	r4
 8009798:	f107 031c 	add.w	r3, r7, #28
 800979c:	4618      	mov	r0, r3
 800979e:	f003 fc10 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097a8:	6a12      	ldr	r2, [r2, #32]
 80097aa:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 80097ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d007      	beq.n	80097c4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3388      	adds	r3, #136	; 0x88
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	4798      	blx	r3
 80097c2:	e017      	b.n	80097f4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 80097c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c6:	7c1b      	ldrb	r3, [r3, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d013      	beq.n	80097f4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	3368      	adds	r3, #104	; 0x68
 80097d2:	681c      	ldr	r4, [r3, #0]
 80097d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097d8:	491b      	ldr	r1, [pc, #108]	; (8009848 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 80097da:	4618      	mov	r0, r3
 80097dc:	f003 f839 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80097e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097e4:	4619      	mov	r1, r3
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	47a0      	blx	r4
 80097ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097ee:	4618      	mov	r0, r3
 80097f0:	f003 fbe7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	3368      	adds	r3, #104	; 0x68
 80097fa:	681c      	ldr	r4, [r3, #0]
 80097fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009800:	4912      	ldr	r1, [pc, #72]	; (800984c <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 8009802:	4618      	mov	r0, r3
 8009804:	f003 f825 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8009808:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800980c:	4619      	mov	r1, r3
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	47a0      	blx	r4
 8009812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009816:	4618      	mov	r0, r3
 8009818:	f003 fbd3 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 800981c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 8009822:	f107 0314 	add.w	r3, r7, #20
 8009826:	4618      	mov	r0, r3
 8009828:	f003 fbcb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    while (cur) {
 800982c:	e749      	b.n	80096c2 <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 800982e:	bf00      	nop
 8009830:	3738      	adds	r7, #56	; 0x38
 8009832:	46bd      	mov	sp, r7
 8009834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009838:	08023c20 	.word	0x08023c20
 800983c:	08023d60 	.word	0x08023d60
 8009840:	10624dd3 	.word	0x10624dd3
 8009844:	08023d64 	.word	0x08023d64
 8009848:	08023dc0 	.word	0x08023dc0
 800984c:	08023dd0 	.word	0x08023dd0

08009850 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8009850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009852:	b091      	sub	sp, #68	; 0x44
 8009854:	af02      	add	r7, sp, #8
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	68d9      	ldr	r1, [r3, #12]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3308      	adds	r3, #8
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f107 0210 	add.w	r2, r7, #16
 800986c:	4610      	mov	r0, r2
 800986e:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009870:	f107 0310 	add.w	r3, r7, #16
 8009874:	4618      	mov	r0, r3
 8009876:	f003 fb77 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800987a:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	68da      	ldr	r2, [r3, #12]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3314      	adds	r3, #20
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4610      	mov	r0, r2
 800988c:	4798      	blx	r3
 800988e:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009890:	461e      	mov	r6, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3380      	adds	r3, #128	; 0x80
 8009898:	681c      	ldr	r4, [r3, #0]
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	68d9      	ldr	r1, [r3, #12]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3318      	adds	r3, #24
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f107 0220 	add.w	r2, r7, #32
 80098ac:	4610      	mov	r0, r2
 80098ae:	4798      	blx	r3
 80098b0:	f107 0318 	add.w	r3, r7, #24
 80098b4:	f107 0220 	add.w	r2, r7, #32
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	4618      	mov	r0, r3
 80098bc:	47a0      	blx	r4
 80098be:	f107 0318 	add.w	r3, r7, #24
 80098c2:	4618      	mov	r0, r3
 80098c4:	f003 fb50 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 80098c8:	4603      	mov	r3, r0
 80098ca:	f107 0008 	add.w	r0, r7, #8
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	4633      	mov	r3, r6
 80098d2:	462a      	mov	r2, r5
 80098d4:	4924      	ldr	r1, [pc, #144]	; (8009968 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 80098d6:	f004 f87b 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 80098da:	f107 0318 	add.w	r3, r7, #24
 80098de:	4618      	mov	r0, r3
 80098e0:	f003 fb6f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80098e4:	f107 0320 	add.w	r3, r7, #32
 80098e8:	4618      	mov	r0, r3
 80098ea:	f003 fb6a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 80098ee:	f107 0310 	add.w	r3, r7, #16
 80098f2:	4618      	mov	r0, r3
 80098f4:	f003 fb65 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	3368      	adds	r3, #104	; 0x68
 80098fe:	681c      	ldr	r4, [r3, #0]
 8009900:	f107 0308 	add.w	r3, r7, #8
 8009904:	4618      	mov	r0, r3
 8009906:	f003 fb2f 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800990a:	4602      	mov	r2, r0
 800990c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009910:	4611      	mov	r1, r2
 8009912:	4618      	mov	r0, r3
 8009914:	f002 ff9d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8009918:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800991c:	4619      	mov	r1, r3
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	47a0      	blx	r4
 8009922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009926:	4618      	mov	r0, r3
 8009928:	f003 fb4b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	3368      	adds	r3, #104	; 0x68
 8009932:	681c      	ldr	r4, [r3, #0]
 8009934:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009938:	490c      	ldr	r1, [pc, #48]	; (800996c <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 800993a:	4618      	mov	r0, r3
 800993c:	f002 ff89 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8009940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009944:	4619      	mov	r1, r3
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	47a0      	blx	r4
 800994a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800994e:	4618      	mov	r0, r3
 8009950:	f003 fb37 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009954:	f107 0308 	add.w	r3, r7, #8
 8009958:	4618      	mov	r0, r3
 800995a:	f003 fb32 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 800995e:	bf00      	nop
 8009960:	373c      	adds	r7, #60	; 0x3c
 8009962:	46bd      	mov	sp, r7
 8009964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009966:	bf00      	nop
 8009968:	08023de0 	.word	0x08023de0
 800996c:	08023e1c 	.word	0x08023e1c

08009970 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 8009970:	b590      	push	{r4, r7, lr}
 8009972:	b08d      	sub	sp, #52	; 0x34
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3368      	adds	r3, #104	; 0x68
 800997e:	681c      	ldr	r4, [r3, #0]
 8009980:	f107 0308 	add.w	r3, r7, #8
 8009984:	4933      	ldr	r1, [pc, #204]	; (8009a54 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 8009986:	4618      	mov	r0, r3
 8009988:	f002 ff63 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800998c:	f107 0308 	add.w	r3, r7, #8
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	47a0      	blx	r4
 8009996:	f107 0308 	add.w	r3, r7, #8
 800999a:	4618      	mov	r0, r3
 800999c:	f003 fb11 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3368      	adds	r3, #104	; 0x68
 80099a6:	681c      	ldr	r4, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3380      	adds	r3, #128	; 0x80
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	6912      	ldr	r2, [r2, #16]
 80099b4:	3230      	adds	r2, #48	; 0x30
 80099b6:	f107 0010 	add.w	r0, r7, #16
 80099ba:	6879      	ldr	r1, [r7, #4]
 80099bc:	4798      	blx	r3
 80099be:	f107 0310 	add.w	r3, r7, #16
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	47a0      	blx	r4
 80099c8:	f107 0310 	add.w	r3, r7, #16
 80099cc:	4618      	mov	r0, r3
 80099ce:	f003 faf8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3368      	adds	r3, #104	; 0x68
 80099d8:	681c      	ldr	r4, [r3, #0]
 80099da:	f107 0318 	add.w	r3, r7, #24
 80099de:	491e      	ldr	r1, [pc, #120]	; (8009a58 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 80099e0:	4618      	mov	r0, r3
 80099e2:	f002 ff36 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80099e6:	f107 0318 	add.w	r3, r7, #24
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	47a0      	blx	r4
 80099f0:	f107 0318 	add.w	r3, r7, #24
 80099f4:	4618      	mov	r0, r3
 80099f6:	f003 fae4 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	3368      	adds	r3, #104	; 0x68
 8009a00:	681c      	ldr	r4, [r3, #0]
 8009a02:	f107 0320 	add.w	r3, r7, #32
 8009a06:	4915      	ldr	r1, [pc, #84]	; (8009a5c <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f002 ff22 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8009a0e:	f107 0320 	add.w	r3, r7, #32
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	47a0      	blx	r4
 8009a18:	f107 0320 	add.w	r3, r7, #32
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f003 fad0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3368      	adds	r3, #104	; 0x68
 8009a28:	681c      	ldr	r4, [r3, #0]
 8009a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a2e:	490c      	ldr	r1, [pc, #48]	; (8009a60 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8009a30:	4618      	mov	r0, r3
 8009a32:	f002 ff0e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8009a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	47a0      	blx	r4
 8009a40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a44:	4618      	mov	r0, r3
 8009a46:	f003 fabc 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8009a4a:	bf00      	nop
 8009a4c:	3734      	adds	r7, #52	; 0x34
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd90      	pop	{r4, r7, pc}
 8009a52:	bf00      	nop
 8009a54:	08023e28 	.word	0x08023e28
 8009a58:	08023e38 	.word	0x08023e38
 8009a5c:	08023e48 	.word	0x08023e48
 8009a60:	08023e64 	.word	0x08023e64

08009a64 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 8009a64:	b590      	push	{r4, r7, lr}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	3360      	adds	r3, #96	; 0x60
 8009a72:	681c      	ldr	r4, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	335c      	adds	r3, #92	; 0x5c
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	6912      	ldr	r2, [r2, #16]
 8009a80:	3214      	adds	r2, #20
 8009a82:	f107 0008 	add.w	r0, r7, #8
 8009a86:	6879      	ldr	r1, [r7, #4]
 8009a88:	4798      	blx	r3
 8009a8a:	f107 0308 	add.w	r3, r7, #8
 8009a8e:	4619      	mov	r1, r3
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	47a0      	blx	r4
 8009a94:	f107 0308 	add.w	r3, r7, #8
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f003 fa92 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	3370      	adds	r3, #112	; 0x70
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	4798      	blx	r3
    writeTestSuiteSummary();
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	3374      	adds	r3, #116	; 0x74
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	4798      	blx	r3
    writeProperties();
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3378      	adds	r3, #120	; 0x78
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	4798      	blx	r3
    writeTestCases();
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	337c      	adds	r3, #124	; 0x7c
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	4798      	blx	r3
    writeFileEnding();
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	338c      	adds	r3, #140	; 0x8c
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	4798      	blx	r3
    closeFile();
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	336c      	adds	r3, #108	; 0x6c
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	4798      	blx	r3
}
 8009ae6:	bf00      	nop
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd90      	pop	{r4, r7, pc}

08009aee <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b083      	sub	sp, #12
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	6039      	str	r1, [r7, #0]
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	3330      	adds	r3, #48	; 0x30
 8009b14:	6839      	ldr	r1, [r7, #0]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f003 fae2 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
}
 8009b1c:	bf00      	nop
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
}
 8009b2e:	bf00      	nop
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	b083      	sub	sp, #12
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
 8009b42:	6039      	str	r1, [r7, #0]
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 8009b64:	b590      	push	{r4, r7, lr}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d113      	bne.n	8009ba2 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	3201      	adds	r2, #1
 8009b82:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 8009b84:	f240 1233 	movw	r2, #307	; 0x133
 8009b88:	4908      	ldr	r1, [pc, #32]	; (8009bac <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 8009b8a:	2034      	movs	r0, #52	; 0x34
 8009b8c:	f000 fa9e 	bl	800a0cc <_ZnwjPKci>
 8009b90:	4604      	mov	r4, r0
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	4620      	mov	r0, r4
 8009b96:	f004 fd37 	bl	800e608 <_ZN11TestFailureC1ERKS_>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	6a1b      	ldr	r3, [r3, #32]
 8009ba0:	60dc      	str	r4, [r3, #12]
    }
}
 8009ba2:	bf00      	nop
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd90      	pop	{r4, r7, pc}
 8009baa:	bf00      	nop
 8009bac:	08023c24 	.word	0x08023c24

08009bb0 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 8009bb0:	b5b0      	push	{r4, r5, r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 8009bba:	4b08      	ldr	r3, [pc, #32]	; (8009bdc <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8009bbc:	681d      	ldr	r5, [r3, #0]
 8009bbe:	6838      	ldr	r0, [r7, #0]
 8009bc0:	f003 f9d2 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	691c      	ldr	r4, [r3, #16]
 8009bca:	4905      	ldr	r1, [pc, #20]	; (8009be0 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 8009bcc:	4610      	mov	r0, r2
 8009bce:	47a8      	blx	r5
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	6263      	str	r3, [r4, #36]	; 0x24
}
 8009bd4:	bf00      	nop
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bdb0      	pop	{r4, r5, r7, pc}
 8009bdc:	200000b4 	.word	0x200000b4
 8009be0:	08023e74 	.word	0x08023e74

08009be4 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 8009be4:	b590      	push	{r4, r7, lr}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 8009bee:	4b08      	ldr	r3, [pc, #32]	; (8009c10 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 8009bf0:	681c      	ldr	r4, [r3, #0]
 8009bf2:	6838      	ldr	r0, [r7, #0]
 8009bf4:	f003 f9b8 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c00:	4619      	mov	r1, r3
 8009c02:	4610      	mov	r0, r2
 8009c04:	47a0      	blx	r4
}
 8009c06:	bf00      	nop
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd90      	pop	{r4, r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	200000b8 	.word	0x200000b8

08009c14 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8009c1c:	4b05      	ldr	r3, [pc, #20]	; (8009c34 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	6912      	ldr	r2, [r2, #16]
 8009c24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009c26:	4610      	mov	r0, r2
 8009c28:	4798      	blx	r3
}
 8009c2a:	bf00      	nop
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	200000bc 	.word	0x200000bc

08009c38 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
 8009c44:	603b      	str	r3, [r7, #0]
        return false;
 8009c46:	2300      	movs	r3, #0
    }
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3714      	adds	r7, #20
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
    {
 8009c5c:	4a04      	ldr	r2, [pc, #16]	; (8009c70 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	601a      	str	r2, [r3, #0]
    }
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4618      	mov	r0, r3
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	08027b20 	.word	0x08027b20

08009c74 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
    }
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7ff ffe9 	bl	8009c54 <_ZN17MemoryLeakFailureD1Ev>
 8009c82:	2104      	movs	r1, #4
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fa35 	bl	800a0f4 <_ZdlPvj>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 8009c94:	b590      	push	{r4, r7, lr}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	687c      	ldr	r4, [r7, #4]
 8009c9e:	f000 fc71 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f00c ff6c 	bl	8016b82 <_ZN18MemoryLeakDetector8getMutexEv>
 8009caa:	4603      	mov	r3, r0
 8009cac:	4619      	mov	r1, r3
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f002 fb24 	bl	800c2fc <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd90      	pop	{r4, r7, pc}

08009cbe <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b082      	sub	sp, #8
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f002 fb29 	bl	800c320 <_ZN15ScopedMutexLockD1Ev>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 8009cd8:	b590      	push	{r4, r7, lr}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af02      	add	r7, sp, #8
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 8009ce4:	f000 fc4e 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009ce8:	4604      	mov	r4, r0
 8009cea:	f006 f8df 	bl	800feac <_Z25getCurrentMallocAllocatorv>
 8009cee:	4601      	mov	r1, r0
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	9301      	str	r3, [sp, #4]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f00d f983 	bl	8017008 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8009d02:	4603      	mov	r3, r0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd90      	pop	{r4, r7, pc}

08009d0c <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 8009d0c:	b590      	push	{r4, r7, lr}
 8009d0e:	b087      	sub	sp, #28
 8009d10:	af02      	add	r7, sp, #8
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 8009d18:	f000 fc34 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	68f9      	ldr	r1, [r7, #12]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f00c ffdd 	bl	8016ce0 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 8009d26:	f000 fc2d 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	f006 f8be 	bl	800feac <_Z25getCurrentMallocAllocatorv>
 8009d30:	4601      	mov	r1, r0
 8009d32:	2301      	movs	r3, #1
 8009d34:	9301      	str	r3, [sp, #4]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f00d f996 	bl	8017070 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8009d44:	bf00      	nop
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd90      	pop	{r4, r7, pc}

08009d4c <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8009d4c:	b590      	push	{r4, r7, lr}
 8009d4e:	b089      	sub	sp, #36	; 0x24
 8009d50:	af04      	add	r7, sp, #16
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 8009d5a:	f000 fc13 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009d5e:	4604      	mov	r4, r0
 8009d60:	f006 f8a4 	bl	800feac <_Z25getCurrentMallocAllocatorv>
 8009d64:	4601      	mov	r1, r0
 8009d66:	2301      	movs	r3, #1
 8009d68:	9302      	str	r3, [sp, #8]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	9301      	str	r3, [sp, #4]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	4620      	mov	r0, r4
 8009d78:	f00d f9de 	bl	8017138 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 8009d7c:	4603      	mov	r3, r0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd90      	pop	{r4, r7, pc}
	...

08009d88 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 8009d94:	4b04      	ldr	r3, [pc, #16]	; (8009da8 <_ZL13normal_mallocjPKcj+0x20>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	4798      	blx	r3
 8009d9c:	4603      	mov	r3, r0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	200000c8 	.word	0x200000c8

08009dac <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 8009dba:	4b05      	ldr	r3, [pc, #20]	; (8009dd0 <_ZL14normal_reallocPvjPKcj+0x24>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68b9      	ldr	r1, [r7, #8]
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	4798      	blx	r3
 8009dc4:	4603      	mov	r3, r0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	200000cc 	.word	0x200000cc

08009dd4 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 8009de0:	4b03      	ldr	r3, [pc, #12]	; (8009df0 <_ZL11normal_freePvPKcj+0x1c>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	4798      	blx	r3
}
 8009de8:	bf00      	nop
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	200000d0 	.word	0x200000d0

08009df4 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8009df4:	b590      	push	{r4, r7, lr}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8009dfc:	f107 0308 	add.w	r3, r7, #8
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7ff ff47 	bl	8009c94 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8009e06:	f000 fbbd 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	f005 ff9e 	bl	800fd4c <_Z22getCurrentNewAllocatorv>
 8009e10:	4601      	mov	r1, r0
 8009e12:	2300      	movs	r3, #0
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	4620      	mov	r0, r4
 8009e18:	f00d f864 	bl	8016ee4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009e1c:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009e1e:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 8009e20:	f107 0308 	add.w	r3, r7, #8
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7ff ff4a 	bl	8009cbe <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8009e2a:	4623      	mov	r3, r4
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3714      	adds	r7, #20
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd90      	pop	{r4, r7, pc}

08009e34 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8009e34:	b590      	push	{r4, r7, lr}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8009e3c:	f000 fba2 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009e40:	4604      	mov	r4, r0
 8009e42:	f005 ff83 	bl	800fd4c <_Z22getCurrentNewAllocatorv>
 8009e46:	4601      	mov	r1, r0
 8009e48:	2300      	movs	r3, #0
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	f00d f849 	bl	8016ee4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009e52:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009e54:	68fb      	ldr	r3, [r7, #12]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd90      	pop	{r4, r7, pc}

08009e5e <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8009e5e:	b590      	push	{r4, r7, lr}
 8009e60:	b083      	sub	sp, #12
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8009e66:	f000 fb8d 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	f005 ff6e 	bl	800fd4c <_Z22getCurrentNewAllocatorv>
 8009e70:	4601      	mov	r1, r0
 8009e72:	2300      	movs	r3, #0
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	4620      	mov	r0, r4
 8009e78:	f00d f834 	bl	8016ee4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009e7c:	4603      	mov	r3, r0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd90      	pop	{r4, r7, pc}

08009e86 <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8009e86:	b590      	push	{r4, r7, lr}
 8009e88:	b089      	sub	sp, #36	; 0x24
 8009e8a:	af02      	add	r7, sp, #8
 8009e8c:	60f8      	str	r0, [r7, #12]
 8009e8e:	60b9      	str	r1, [r7, #8]
 8009e90:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 8009e92:	f000 fb77 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009e96:	4604      	mov	r4, r0
 8009e98:	f005 ff58 	bl	800fd4c <_Z22getCurrentNewAllocatorv>
 8009e9c:	4601      	mov	r1, r0
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	4620      	mov	r0, r4
 8009eac:	f00d f8ac 	bl	8017008 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8009eb0:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009eb2:	697b      	ldr	r3, [r7, #20]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	371c      	adds	r7, #28
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd90      	pop	{r4, r7, pc}

08009ebc <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8009ebc:	b590      	push	{r4, r7, lr}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8009ec4:	f000 fb5e 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009ec8:	4604      	mov	r4, r0
 8009eca:	f005 ff97 	bl	800fdfc <_Z27getCurrentNewArrayAllocatorv>
 8009ece:	4601      	mov	r1, r0
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f00d f805 	bl	8016ee4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009eda:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009edc:	68fb      	ldr	r3, [r7, #12]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3714      	adds	r7, #20
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd90      	pop	{r4, r7, pc}

08009ee6 <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8009ee6:	b590      	push	{r4, r7, lr}
 8009ee8:	b083      	sub	sp, #12
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8009eee:	f000 fb49 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	f005 ff82 	bl	800fdfc <_Z27getCurrentNewArrayAllocatorv>
 8009ef8:	4601      	mov	r1, r0
 8009efa:	2300      	movs	r3, #0
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	4620      	mov	r0, r4
 8009f00:	f00c fff0 	bl	8016ee4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009f04:	4603      	mov	r3, r0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd90      	pop	{r4, r7, pc}

08009f0e <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8009f0e:	b590      	push	{r4, r7, lr}
 8009f10:	b089      	sub	sp, #36	; 0x24
 8009f12:	af02      	add	r7, sp, #8
 8009f14:	60f8      	str	r0, [r7, #12]
 8009f16:	60b9      	str	r1, [r7, #8]
 8009f18:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8009f1a:	f000 fb33 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009f1e:	4604      	mov	r4, r0
 8009f20:	f005 ff6c 	bl	800fdfc <_Z27getCurrentNewArrayAllocatorv>
 8009f24:	4601      	mov	r1, r0
 8009f26:	2300      	movs	r3, #0
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	4620      	mov	r0, r4
 8009f34:	f00d f868 	bl	8017008 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8009f38:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009f3a:	697b      	ldr	r3, [r7, #20]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	371c      	adds	r7, #28
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd90      	pop	{r4, r7, pc}

08009f44 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 8009f44:	b590      	push	{r4, r7, lr}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8009f4c:	f000 fb1a 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009f50:	4603      	mov	r3, r0
 8009f52:	6879      	ldr	r1, [r7, #4]
 8009f54:	4618      	mov	r0, r3
 8009f56:	f00c fec3 	bl	8016ce0 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 8009f5a:	f000 fb13 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009f5e:	4604      	mov	r4, r0
 8009f60:	f005 fef4 	bl	800fd4c <_Z22getCurrentNewAllocatorv>
 8009f64:	4601      	mov	r1, r0
 8009f66:	2300      	movs	r3, #0
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f00d f8ca 	bl	8017104 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd90      	pop	{r4, r7, pc}

08009f78 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 8009f78:	b590      	push	{r4, r7, lr}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8009f80:	f000 fb00 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009f84:	4603      	mov	r3, r0
 8009f86:	6879      	ldr	r1, [r7, #4]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f00c fea9 	bl	8016ce0 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 8009f8e:	f000 faf9 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009f92:	4604      	mov	r4, r0
 8009f94:	f005 ff32 	bl	800fdfc <_Z27getCurrentNewArrayAllocatorv>
 8009f98:	4601      	mov	r1, r0
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f00d f8b0 	bl	8017104 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd90      	pop	{r4, r7, pc}

08009fac <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8009fb4:	4b04      	ldr	r3, [pc, #16]	; (8009fc8 <_ZL19normal_operator_newj+0x1c>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	4798      	blx	r3
 8009fbc:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3710      	adds	r7, #16
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	200000c8 	.word	0x200000c8

08009fcc <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8009fd4:	4b04      	ldr	r3, [pc, #16]	; (8009fe8 <_ZL27normal_operator_new_nothrowj+0x1c>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	4798      	blx	r3
 8009fdc:	4603      	mov	r3, r0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	200000c8 	.word	0x200000c8

08009fec <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8009ff8:	4b04      	ldr	r3, [pc, #16]	; (800a00c <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	4798      	blx	r3
 800a000:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a002:	697b      	ldr	r3, [r7, #20]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3718      	adds	r7, #24
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	200000c8 	.word	0x200000c8

0800a010 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a018:	4b04      	ldr	r3, [pc, #16]	; (800a02c <_ZL25normal_operator_new_arrayj+0x1c>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	4798      	blx	r3
 800a020:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a022:	68fb      	ldr	r3, [r7, #12]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	200000c8 	.word	0x200000c8

0800a030 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800a038:	4b04      	ldr	r3, [pc, #16]	; (800a04c <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	4798      	blx	r3
 800a040:	4603      	mov	r3, r0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	200000c8 	.word	0x200000c8

0800a050 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a05c:	4b04      	ldr	r3, [pc, #16]	; (800a070 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	4798      	blx	r3
 800a064:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a066:	697b      	ldr	r3, [r7, #20]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3718      	adds	r7, #24
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	200000c8 	.word	0x200000c8

0800a074 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800a07c:	4b03      	ldr	r3, [pc, #12]	; (800a08c <_ZL22normal_operator_deletePv+0x18>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	4798      	blx	r3
}
 800a084:	bf00      	nop
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	200000d0 	.word	0x200000d0

0800a090 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800a098:	4b03      	ldr	r3, [pc, #12]	; (800a0a8 <_ZL28normal_operator_delete_arrayPv+0x18>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	4798      	blx	r3
}
 800a0a0:	bf00      	nop
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	200000d0 	.word	0x200000d0

0800a0ac <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 800a0b4:	4b04      	ldr	r3, [pc, #16]	; (800a0c8 <_Znwj+0x1c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	4798      	blx	r3
 800a0bc:	4603      	mov	r3, r0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3708      	adds	r7, #8
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	2000002c 	.word	0x2000002c

0800a0cc <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 800a0d8:	4b05      	ldr	r3, [pc, #20]	; (800a0f0 <_ZnwjPKci+0x24>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	68b9      	ldr	r1, [r7, #8]
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	4798      	blx	r3
 800a0e4:	4603      	mov	r3, r0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000034 	.word	0x20000034

0800a0f4 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 800a0fe:	4b04      	ldr	r3, [pc, #16]	; (800a110 <_ZdlPvj+0x1c>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	4798      	blx	r3
}
 800a106:	bf00      	nop
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	20000044 	.word	0x20000044

0800a114 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 800a120:	4b05      	ldr	r3, [pc, #20]	; (800a138 <_ZnajPKci+0x24>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	68b9      	ldr	r1, [r7, #8]
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	4798      	blx	r3
 800a12c:	4603      	mov	r3, r0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20000040 	.word	0x20000040

0800a13c <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 800a144:	4b03      	ldr	r3, [pc, #12]	; (800a154 <_ZdaPv+0x18>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	4798      	blx	r3
}
 800a14c:	bf00      	nop
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	20000048 	.word	0x20000048

0800a158 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 800a162:	4b04      	ldr	r3, [pc, #16]	; (800a174 <_ZdaPvj+0x1c>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	4798      	blx	r3
}
 800a16a:	bf00      	nop
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20000048 	.word	0x20000048

0800a178 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 800a178:	b480      	push	{r7}
 800a17a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 800a17c:	4b12      	ldr	r3, [pc, #72]	; (800a1c8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 800a17e:	4a13      	ldr	r2, [pc, #76]	; (800a1cc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 800a180:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 800a182:	4b13      	ldr	r3, [pc, #76]	; (800a1d0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 800a184:	4a13      	ldr	r2, [pc, #76]	; (800a1d4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 800a186:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 800a188:	4b13      	ldr	r3, [pc, #76]	; (800a1d8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 800a18a:	4a14      	ldr	r2, [pc, #80]	; (800a1dc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 800a18c:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 800a18e:	4b14      	ldr	r3, [pc, #80]	; (800a1e0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 800a190:	4a14      	ldr	r2, [pc, #80]	; (800a1e4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 800a192:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 800a194:	4b14      	ldr	r3, [pc, #80]	; (800a1e8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 800a196:	4a15      	ldr	r2, [pc, #84]	; (800a1ec <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 800a198:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 800a19a:	4b15      	ldr	r3, [pc, #84]	; (800a1f0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 800a19c:	4a15      	ldr	r2, [pc, #84]	; (800a1f4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 800a19e:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 800a1a0:	4b15      	ldr	r3, [pc, #84]	; (800a1f8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 800a1a2:	4a16      	ldr	r2, [pc, #88]	; (800a1fc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 800a1a4:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800a1a6:	4b16      	ldr	r3, [pc, #88]	; (800a200 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 800a1a8:	4a16      	ldr	r2, [pc, #88]	; (800a204 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 800a1aa:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 800a1ac:	4b16      	ldr	r3, [pc, #88]	; (800a208 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 800a1ae:	4a17      	ldr	r2, [pc, #92]	; (800a20c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 800a1b0:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 800a1b2:	4b17      	ldr	r3, [pc, #92]	; (800a210 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 800a1b4:	4a17      	ldr	r2, [pc, #92]	; (800a214 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 800a1b6:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 800a1b8:	4b17      	ldr	r3, [pc, #92]	; (800a218 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 800a1ba:	4a18      	ldr	r2, [pc, #96]	; (800a21c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 800a1bc:	601a      	str	r2, [r3, #0]

#endif
}
 800a1be:	bf00      	nop
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	2000002c 	.word	0x2000002c
 800a1cc:	08009fad 	.word	0x08009fad
 800a1d0:	20000030 	.word	0x20000030
 800a1d4:	08009fcd 	.word	0x08009fcd
 800a1d8:	20000034 	.word	0x20000034
 800a1dc:	08009fed 	.word	0x08009fed
 800a1e0:	20000038 	.word	0x20000038
 800a1e4:	0800a011 	.word	0x0800a011
 800a1e8:	2000003c 	.word	0x2000003c
 800a1ec:	0800a031 	.word	0x0800a031
 800a1f0:	20000040 	.word	0x20000040
 800a1f4:	0800a051 	.word	0x0800a051
 800a1f8:	20000044 	.word	0x20000044
 800a1fc:	0800a075 	.word	0x0800a075
 800a200:	20000048 	.word	0x20000048
 800a204:	0800a091 	.word	0x0800a091
 800a208:	20000014 	.word	0x20000014
 800a20c:	08009d89 	.word	0x08009d89
 800a210:	2000001c 	.word	0x2000001c
 800a214:	08009dad 	.word	0x08009dad
 800a218:	20000018 	.word	0x20000018
 800a21c:	08009dd5 	.word	0x08009dd5

0800a220 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 800a220:	b480      	push	{r7}
 800a222:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 800a224:	4b08      	ldr	r3, [pc, #32]	; (800a248 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a08      	ldr	r2, [pc, #32]	; (800a24c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d004      	beq.n	800a238 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 800a22e:	4b06      	ldr	r3, [pc, #24]	; (800a248 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a07      	ldr	r2, [pc, #28]	; (800a250 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d101      	bne.n	800a23c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 800a238:	2301      	movs	r3, #1
 800a23a:	e000      	b.n	800a23e <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 800a23c:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 800a23e:	4618      	mov	r0, r3
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	2000002c 	.word	0x2000002c
 800a24c:	08009e35 	.word	0x08009e35
 800a250:	08009df5 	.word	0x08009df5

0800a254 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 800a254:	b580      	push	{r7, lr}
 800a256:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 800a258:	4b1f      	ldr	r3, [pc, #124]	; (800a2d8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3301      	adds	r3, #1
 800a25e:	4a1e      	ldr	r2, [pc, #120]	; (800a2d8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800a260:	6013      	str	r3, [r2, #0]
 800a262:	4b1d      	ldr	r3, [pc, #116]	; (800a2d8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b01      	cmp	r3, #1
 800a268:	bfcc      	ite	gt
 800a26a:	2301      	movgt	r3, #1
 800a26c:	2300      	movle	r3, #0
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	2b00      	cmp	r3, #0
 800a272:	d12e      	bne.n	800a2d2 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 800a274:	4b19      	ldr	r3, [pc, #100]	; (800a2dc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a19      	ldr	r2, [pc, #100]	; (800a2e0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 800a27a:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 800a27c:	4b19      	ldr	r3, [pc, #100]	; (800a2e4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a19      	ldr	r2, [pc, #100]	; (800a2e8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 800a282:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 800a284:	4b19      	ldr	r3, [pc, #100]	; (800a2ec <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a19      	ldr	r2, [pc, #100]	; (800a2f0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 800a28a:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 800a28c:	4b19      	ldr	r3, [pc, #100]	; (800a2f4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a19      	ldr	r2, [pc, #100]	; (800a2f8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 800a292:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 800a294:	4b19      	ldr	r3, [pc, #100]	; (800a2fc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a19      	ldr	r2, [pc, #100]	; (800a300 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 800a29a:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 800a29c:	4b19      	ldr	r3, [pc, #100]	; (800a304 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a19      	ldr	r2, [pc, #100]	; (800a308 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 800a2a2:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 800a2a4:	4b19      	ldr	r3, [pc, #100]	; (800a30c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a19      	ldr	r2, [pc, #100]	; (800a310 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 800a2aa:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 800a2ac:	4b19      	ldr	r3, [pc, #100]	; (800a314 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a19      	ldr	r2, [pc, #100]	; (800a318 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 800a2b2:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 800a2b4:	4b19      	ldr	r3, [pc, #100]	; (800a31c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a19      	ldr	r2, [pc, #100]	; (800a320 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 800a2ba:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 800a2bc:	4b19      	ldr	r3, [pc, #100]	; (800a324 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a19      	ldr	r2, [pc, #100]	; (800a328 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800a2c2:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 800a2c4:	4b19      	ldr	r3, [pc, #100]	; (800a32c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a19      	ldr	r2, [pc, #100]	; (800a330 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 800a2ca:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 800a2cc:	f7ff ff54 	bl	800a178 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 800a2d0:	e000      	b.n	800a2d4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800a2d2:	bf00      	nop
#endif
}
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	20000804 	.word	0x20000804
 800a2dc:	2000002c 	.word	0x2000002c
 800a2e0:	2000004c 	.word	0x2000004c
 800a2e4:	20000030 	.word	0x20000030
 800a2e8:	20000050 	.word	0x20000050
 800a2ec:	20000034 	.word	0x20000034
 800a2f0:	20000054 	.word	0x20000054
 800a2f4:	20000038 	.word	0x20000038
 800a2f8:	20000058 	.word	0x20000058
 800a2fc:	2000003c 	.word	0x2000003c
 800a300:	2000005c 	.word	0x2000005c
 800a304:	20000040 	.word	0x20000040
 800a308:	20000060 	.word	0x20000060
 800a30c:	20000044 	.word	0x20000044
 800a310:	20000064 	.word	0x20000064
 800a314:	20000048 	.word	0x20000048
 800a318:	20000068 	.word	0x20000068
 800a31c:	20000014 	.word	0x20000014
 800a320:	20000020 	.word	0x20000020
 800a324:	2000001c 	.word	0x2000001c
 800a328:	20000028 	.word	0x20000028
 800a32c:	20000018 	.word	0x20000018
 800a330:	20000024 	.word	0x20000024

0800a334 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800a334:	b480      	push	{r7}
 800a336:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 800a338:	4b1f      	ldr	r3, [pc, #124]	; (800a3b8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	3b01      	subs	r3, #1
 800a33e:	4a1e      	ldr	r2, [pc, #120]	; (800a3b8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800a340:	6013      	str	r3, [r2, #0]
 800a342:	4b1d      	ldr	r3, [pc, #116]	; (800a3b8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	bfcc      	ite	gt
 800a34a:	2301      	movgt	r3, #1
 800a34c:	2300      	movle	r3, #0
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	2b00      	cmp	r3, #0
 800a352:	d12c      	bne.n	800a3ae <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800a354:	4b19      	ldr	r3, [pc, #100]	; (800a3bc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a19      	ldr	r2, [pc, #100]	; (800a3c0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 800a35a:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 800a35c:	4b19      	ldr	r3, [pc, #100]	; (800a3c4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a19      	ldr	r2, [pc, #100]	; (800a3c8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800a362:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 800a364:	4b19      	ldr	r3, [pc, #100]	; (800a3cc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a19      	ldr	r2, [pc, #100]	; (800a3d0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 800a36a:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 800a36c:	4b19      	ldr	r3, [pc, #100]	; (800a3d4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a19      	ldr	r2, [pc, #100]	; (800a3d8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800a372:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 800a374:	4b19      	ldr	r3, [pc, #100]	; (800a3dc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a19      	ldr	r2, [pc, #100]	; (800a3e0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 800a37a:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 800a37c:	4b19      	ldr	r3, [pc, #100]	; (800a3e4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a19      	ldr	r2, [pc, #100]	; (800a3e8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800a382:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 800a384:	4b19      	ldr	r3, [pc, #100]	; (800a3ec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a19      	ldr	r2, [pc, #100]	; (800a3f0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 800a38a:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 800a38c:	4b19      	ldr	r3, [pc, #100]	; (800a3f4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a19      	ldr	r2, [pc, #100]	; (800a3f8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 800a392:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 800a394:	4b19      	ldr	r3, [pc, #100]	; (800a3fc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a19      	ldr	r2, [pc, #100]	; (800a400 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 800a39a:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 800a39c:	4b19      	ldr	r3, [pc, #100]	; (800a404 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a19      	ldr	r2, [pc, #100]	; (800a408 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800a3a2:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 800a3a4:	4b19      	ldr	r3, [pc, #100]	; (800a40c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a19      	ldr	r2, [pc, #100]	; (800a410 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800a3aa:	6013      	str	r3, [r2, #0]
 800a3ac:	e000      	b.n	800a3b0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 800a3ae:	bf00      	nop
#endif
}
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr
 800a3b8:	20000804 	.word	0x20000804
 800a3bc:	2000004c 	.word	0x2000004c
 800a3c0:	2000002c 	.word	0x2000002c
 800a3c4:	20000050 	.word	0x20000050
 800a3c8:	20000030 	.word	0x20000030
 800a3cc:	20000054 	.word	0x20000054
 800a3d0:	20000034 	.word	0x20000034
 800a3d4:	20000058 	.word	0x20000058
 800a3d8:	20000038 	.word	0x20000038
 800a3dc:	2000005c 	.word	0x2000005c
 800a3e0:	2000003c 	.word	0x2000003c
 800a3e4:	20000060 	.word	0x20000060
 800a3e8:	20000040 	.word	0x20000040
 800a3ec:	20000064 	.word	0x20000064
 800a3f0:	20000044 	.word	0x20000044
 800a3f4:	20000068 	.word	0x20000068
 800a3f8:	20000048 	.word	0x20000048
 800a3fc:	20000020 	.word	0x20000020
 800a400:	20000014 	.word	0x20000014
 800a404:	20000028 	.word	0x20000028
 800a408:	2000001c 	.word	0x2000001c
 800a40c:	20000024 	.word	0x20000024
 800a410:	20000018 	.word	0x20000018

0800a414 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
    {
 800a41c:	4a05      	ldr	r2, [pc, #20]	; (800a434 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4618      	mov	r0, r3
 800a426:	f7ff fc15 	bl	8009c54 <_ZN17MemoryLeakFailureD1Ev>
    }
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4618      	mov	r0, r3
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	08027b0c 	.word	0x08027b0c

0800a438 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
    }
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f7ff ffe7 	bl	800a414 <_ZN25MemoryLeakWarningReporterD1Ev>
 800a446:	2104      	movs	r1, #4
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7ff fe53 	bl	800a0f4 <_ZdlPvj>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4618      	mov	r0, r3
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	4a04      	ldr	r2, [pc, #16]	; (800a474 <_ZN14TestTerminatorC1Ev+0x1c>)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	601a      	str	r2, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4618      	mov	r0, r3
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	080284b8 	.word	0x080284b8

0800a478 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4618      	mov	r0, r3
 800a484:	f7ff ffe8 	bl	800a458 <_ZN14TestTerminatorC1Ev>
 800a488:	4a03      	ldr	r2, [pc, #12]	; (800a498 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	601a      	str	r2, [r3, #0]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4618      	mov	r0, r3
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	08028490 	.word	0x08028490

0800a49c <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 800a49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a49e:	b099      	sub	sp, #100	; 0x64
 800a4a0:	af02      	add	r7, sp, #8
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800a4a6:	f009 fdb7 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 800a4aa:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800a4ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	339c      	adds	r3, #156	; 0x9c
 800a4b2:	681c      	ldr	r4, [r3, #0]
 800a4b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a4b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f008 fbc4 	bl	8012c48 <_ZNK10UtestShell7getNameEv>
 800a4c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f002 fd4f 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800a4ca:	4605      	mov	r5, r0
 800a4cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a4ce:	f008 fc9b 	bl	8012e08 <_ZNK10UtestShell13getLineNumberEv>
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a4d8:	6839      	ldr	r1, [r7, #0]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f002 f9b9 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800a4e0:	f107 000c 	add.w	r0, r7, #12
 800a4e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	4633      	mov	r3, r6
 800a4ec:	462a      	mov	r2, r5
 800a4ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4f0:	f004 fd14 	bl	800ef1c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	653b      	str	r3, [r7, #80]	; 0x50
 800a4f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7ff ffbb 	bl	800a478 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800a502:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800a506:	f107 030c 	add.w	r3, r7, #12
 800a50a:	4619      	mov	r1, r3
 800a50c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a50e:	47a0      	blx	r4
 800a510:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a514:	4618      	mov	r0, r3
 800a516:	f009 fe79 	bl	801420c <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800a51a:	f107 030c 	add.w	r3, r7, #12
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 f9ac 	bl	800a87c <_ZN11FailFailureD1Ev>
 800a524:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a528:	4618      	mov	r0, r3
 800a52a:	f002 fd4a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800a52e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a532:	4618      	mov	r0, r3
 800a534:	f002 fd45 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800a538:	bf00      	nop
 800a53a:	375c      	adds	r7, #92	; 0x5c
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a540 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	4a04      	ldr	r2, [pc, #16]	; (800a55c <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	601a      	str	r2, [r3, #0]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	08027b20 	.word	0x08027b20

0800a560 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7ff ffe8 	bl	800a540 <_ZN17MemoryLeakFailureC1Ev>
 800a570:	4a03      	ldr	r2, [pc, #12]	; (800a580 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	601a      	str	r2, [r3, #0]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4618      	mov	r0, r3
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	08027b0c 	.word	0x08027b0c

0800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800a584:	b598      	push	{r3, r4, r7, lr}
 800a586:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 800a588:	4b11      	ldr	r3, [pc, #68]	; (800a5d0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d11b      	bne.n	800a5c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 800a590:	f7ff fe60 	bl	800a254 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800a594:	2004      	movs	r0, #4
 800a596:	f7ff fd89 	bl	800a0ac <_Znwj>
 800a59a:	4603      	mov	r3, r0
 800a59c:	461c      	mov	r4, r3
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f7ff ffde 	bl	800a560 <_ZN25MemoryLeakWarningReporterC1Ev>
 800a5a4:	4b0b      	ldr	r3, [pc, #44]	; (800a5d4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800a5a6:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800a5a8:	f241 1050 	movw	r0, #4432	; 0x1150
 800a5ac:	f7ff fd7e 	bl	800a0ac <_Znwj>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	461c      	mov	r4, r3
 800a5b4:	4b07      	ldr	r3, [pc, #28]	; (800a5d4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f00c fa3e 	bl	8016a3c <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 800a5c0:	4b03      	ldr	r3, [pc, #12]	; (800a5d0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800a5c2:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800a5c4:	f7ff feb6 	bl	800a334 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 800a5c8:	4b01      	ldr	r3, [pc, #4]	; (800a5d0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	bd98      	pop	{r3, r4, r7, pc}
 800a5d0:	2000080c 	.word	0x2000080c
 800a5d4:	20000808 	.word	0x20000808

0800a5d8 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	78fa      	ldrb	r2, [r7, #3]
 800a5e8:	765a      	strb	r2, [r3, #25]
}
 800a5ea:	bf00      	nop
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 800a5fc:	f7ff fdbc 	bl	800a178 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800a600:	4b0b      	ldr	r3, [pc, #44]	; (800a630 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d004      	beq.n	800a612 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	3204      	adds	r2, #4
 800a60c:	6812      	ldr	r2, [r2, #0]
 800a60e:	4618      	mov	r0, r3
 800a610:	4790      	blx	r2
    delete globalReporter;
 800a612:	4b08      	ldr	r3, [pc, #32]	; (800a634 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d004      	beq.n	800a624 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	3204      	adds	r2, #4
 800a61e:	6812      	ldr	r2, [r2, #0]
 800a620:	4618      	mov	r0, r3
 800a622:	4790      	blx	r2
    globalDetector = NULLPTR;
 800a624:	4b02      	ldr	r3, [pc, #8]	; (800a630 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800a626:	2200      	movs	r2, #0
 800a628:	601a      	str	r2, [r3, #0]
}
 800a62a:	bf00      	nop
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	2000080c 	.word	0x2000080c
 800a634:	20000808 	.word	0x20000808

0800a638 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	68b9      	ldr	r1, [r7, #8]
 800a648:	4618      	mov	r0, r3
 800a64a:	f006 fdfd 	bl	8011248 <_ZN10TestPluginC1ERK12SimpleString>
 800a64e:	4a14      	ldr	r2, [pc, #80]	; (800a6a0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	601a      	str	r2, [r3, #0]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	761a      	strb	r2, [r3, #24]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2200      	movs	r2, #0
 800a65e:	765a      	strb	r2, [r3, #25]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800a666:	4b0f      	ldr	r3, [pc, #60]	; (800a6a4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d102      	bne.n	800a674 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 800a66e:	4a0d      	ldr	r2, [pc, #52]	; (800a6a4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	615a      	str	r2, [r3, #20]
 800a680:	e004      	b.n	800a68c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800a682:	f7ff ff7f 	bl	800a584 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a686:	4602      	mov	r2, r0
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	695b      	ldr	r3, [r3, #20]
 800a690:	4618      	mov	r0, r3
 800a692:	f00c fa69 	bl	8016b68 <_ZN18MemoryLeakDetector6enableEv>
}
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	08027b34 	.word	0x08027b34
 800a6a4:	20000810 	.word	0x20000810

0800a6a8 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	4a09      	ldr	r2, [pc, #36]	; (800a6d8 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	7e5b      	ldrb	r3, [r3, #25]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d003      	beq.n	800a6c6 <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800a6be:	f7ff fd5b 	bl	800a178 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800a6c2:	f7ff ff99 	bl	800a5f8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f006 fdf9 	bl	80112c0 <_ZN10TestPluginD1Ev>
    }
}
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	08027b34 	.word	0x08027b34

0800a6dc <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
}
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7ff ffdf 	bl	800a6a8 <_ZN23MemoryLeakWarningPluginD1Ev>
 800a6ea:	2124      	movs	r1, #36	; 0x24
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7ff fd01 	bl	800a0f4 <_ZdlPvj>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	695b      	ldr	r3, [r3, #20]
 800a70c:	4618      	mov	r0, r3
 800a70e:	f00c fa0e 	bl	8016b2e <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7fd ffb0 	bl	8008678 <_ZNK10TestResult15getFailureCountEv>
 800a718:	4602      	mov	r2, r0
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	621a      	str	r2, [r3, #32]
}
 800a71e:	bf00      	nop
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
	...

0800a728 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800a728:	b590      	push	{r4, r7, lr}
 800a72a:	b097      	sub	sp, #92	; 0x5c
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	695b      	ldr	r3, [r3, #20]
 800a738:	4618      	mov	r0, r3
 800a73a:	f00c fa08 	bl	8016b4e <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	695b      	ldr	r3, [r3, #20]
 800a742:	2103      	movs	r1, #3
 800a744:	4618      	mov	r0, r3
 800a746:	f00c fda5 	bl	8017294 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800a74a:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	7e1b      	ldrb	r3, [r3, #24]
 800a750:	f083 0301 	eor.w	r3, r3, #1
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00e      	beq.n	800a778 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	69db      	ldr	r3, [r3, #28]
 800a75e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a760:	429a      	cmp	r2, r3
 800a762:	d009      	beq.n	800a778 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6a1c      	ldr	r4, [r3, #32]
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f7fd ff85 	bl	8008678 <_ZNK10TestResult15getFailureCountEv>
 800a76e:	4603      	mov	r3, r0
 800a770:	429c      	cmp	r4, r3
 800a772:	d101      	bne.n	800a778 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800a774:	2301      	movs	r3, #1
 800a776:	e000      	b.n	800a77a <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 800a778:	2300      	movs	r3, #0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d04c      	beq.n	800a818 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 800a77e:	f7ff fd4f 	bl	800a220 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d028      	beq.n	800a7da <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	695b      	ldr	r3, [r3, #20]
 800a78c:	2103      	movs	r1, #3
 800a78e:	4618      	mov	r0, r3
 800a790:	f00c fd45 	bl	801721e <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800a794:	4602      	mov	r2, r0
 800a796:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a79a:	4611      	mov	r1, r2
 800a79c:	4618      	mov	r0, r3
 800a79e:	f002 f858 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800a7a2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a7a6:	f107 0310 	add.w	r3, r7, #16
 800a7aa:	68b9      	ldr	r1, [r7, #8]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f003 feaf 	bl	800e510 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800a7b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f002 fc03 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	3334      	adds	r3, #52	; 0x34
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f107 0210 	add.w	r2, r7, #16
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800a7ce:	f107 0310 	add.w	r3, r7, #16
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f003 ff5c 	bl	800e690 <_ZN11TestFailureD1Ev>
 800a7d8:	e01e      	b.n	800a818 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	69db      	ldr	r3, [r3, #28]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d01a      	beq.n	800a818 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	3338      	adds	r3, #56	; 0x38
 800a7e8:	681c      	ldr	r4, [r3, #0]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	69db      	ldr	r3, [r3, #28]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a7f4:	4910      	ldr	r1, [pc, #64]	; (800a838 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f003 f8ea 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 800a7fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a800:	4618      	mov	r0, r3
 800a802:	f002 fbb1 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800a806:	4603      	mov	r3, r0
 800a808:	4619      	mov	r1, r3
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	47a0      	blx	r4
 800a80e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a812:	4618      	mov	r0, r3
 800a814:	f002 fbd5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	695b      	ldr	r3, [r3, #20]
 800a81c:	4618      	mov	r0, r3
 800a81e:	f00c fd13 	bl	8017248 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	61da      	str	r2, [r3, #28]
}
 800a82e:	bf00      	nop
 800a830:	375c      	adds	r7, #92	; 0x5c
 800a832:	46bd      	mov	sp, r7
 800a834:	bd90      	pop	{r4, r7, pc}
 800a836:	bf00      	nop
 800a838:	08023e78 	.word	0x08023e78

0800a83c <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	2102      	movs	r1, #2
 800a84c:	4618      	mov	r0, r3
 800a84e:	f00c fd21 	bl	8017294 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800a852:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d007      	beq.n	800a86c <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	695b      	ldr	r3, [r3, #20]
 800a860:	2102      	movs	r1, #2
 800a862:	4618      	mov	r0, r3
 800a864:	f00c fcdb 	bl	801721e <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800a868:	4603      	mov	r3, r0
 800a86a:	e000      	b.n	800a86e <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 800a86c:	4b02      	ldr	r3, [pc, #8]	; (800a878 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	08023eb8 	.word	0x08023eb8

0800a87c <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	4a05      	ldr	r2, [pc, #20]	; (800a89c <_ZN11FailFailureD1Ev+0x20>)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	601a      	str	r2, [r3, #0]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f003 feff 	bl	800e690 <_ZN11TestFailureD1Ev>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4618      	mov	r0, r3
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	08027b7c 	.word	0x08027b7c

0800a8a0 <_ZN11FailFailureD0Ev>:
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7ff ffe7 	bl	800a87c <_ZN11FailFailureD1Ev>
 800a8ae:	2134      	movs	r1, #52	; 0x34
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f7ff fc1f 	bl	800a0f4 <_ZdlPvj>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	4a06      	ldr	r2, [pc, #24]	; (800a914 <_ZN19MockFailureReporterC1Ev+0x24>)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	601a      	str	r2, [r3, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	711a      	strb	r2, [r3, #4]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4618      	mov	r0, r3
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	08028d58 	.word	0x08028d58

0800a918 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	4a04      	ldr	r2, [pc, #16]	; (800a934 <_ZN19MockFailureReporterD1Ev+0x1c>)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	601a      	str	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4618      	mov	r0, r3
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	08028d58 	.word	0x08028d58

0800a938 <_ZN19MockFailureReporterD0Ev>:
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f7ff ffe9 	bl	800a918 <_ZN19MockFailureReporterD1Ev>
 800a946:	2108      	movs	r1, #8
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7ff fbd3 	bl	800a0f4 <_ZdlPvj>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4618      	mov	r0, r3
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	4a05      	ldr	r2, [pc, #20]	; (800a978 <_ZN11MockFailureD1Ev+0x20>)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	601a      	str	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4618      	mov	r0, r3
 800a96a:	f003 fe91 	bl	800e690 <_ZN11TestFailureD1Ev>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4618      	mov	r0, r3
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	08027cd0 	.word	0x08027cd0

0800a97c <_ZN11MockFailureD0Ev>:
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7ff ffe7 	bl	800a958 <_ZN11MockFailureD1Ev>
 800a98a:	2134      	movs	r1, #52	; 0x34
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f7ff fbb1 	bl	800a0f4 <_ZdlPvj>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4618      	mov	r0, r3
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 800a99c:	b590      	push	{r4, r7, lr}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
 800a9a6:	4a16      	ldr	r2, [pc, #88]	; (800aa00 <_ZN14MockNamedValueC1ERKS_+0x64>)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	601a      	str	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	1d1a      	adds	r2, r3, #4
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	3304      	adds	r3, #4
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	4610      	mov	r0, r2
 800a9b8:	f001 ff9f 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f103 020c 	add.w	r2, r3, #12
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	330c      	adds	r3, #12
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	f001 ff96 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	f102 0418 	add.w	r4, r2, #24
 800a9d6:	3318      	adds	r3, #24
 800a9d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a9da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	629a      	str	r2, [r3, #40]	; 0x28
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	62da      	str	r2, [r3, #44]	; 0x2c
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	631a      	str	r2, [r3, #48]	; 0x30
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd90      	pop	{r4, r7, pc}
 800aa00:	08028d98 	.word	0x08028d98

0800aa04 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b086      	sub	sp, #24
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800aa0e:	f107 030c 	add.w	r3, r7, #12
 800aa12:	4916      	ldr	r1, [pc, #88]	; (800aa6c <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800aa14:	4618      	mov	r0, r3
 800aa16:	f001 ff1c 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800aa1a:	f107 030c 	add.w	r3, r7, #12
 800aa1e:	4619      	mov	r1, r3
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f002 fb1f 	bl	800d064 <_ZneRK12SimpleStringS1_>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d005      	beq.n	800aa38 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 800aa2c:	6879      	ldr	r1, [r7, #4]
 800aa2e:	4810      	ldr	r0, [pc, #64]	; (800aa70 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800aa30:	f000 ff70 	bl	800b914 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800aa34:	4603      	mov	r3, r0
 800aa36:	e000      	b.n	800aa3a <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 800aa38:	4b0d      	ldr	r3, [pc, #52]	; (800aa70 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800aa3a:	617b      	str	r3, [r7, #20]
 800aa3c:	f107 030c 	add.w	r3, r7, #12
 800aa40:	4618      	mov	r0, r3
 800aa42:	f002 fabe 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	33a8      	adds	r3, #168	; 0xa8
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6978      	ldr	r0, [r7, #20]
 800aa52:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	33ac      	adds	r3, #172	; 0xac
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	6978      	ldr	r0, [r7, #20]
 800aa5e:	4798      	blx	r3
    return mock_support;
 800aa60:	697b      	ldr	r3, [r7, #20]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3718      	adds	r7, #24
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	08023ebc 	.word	0x08023ebc
 800aa70:	20000814 	.word	0x20000814

0800aa74 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 800aa7e:	4a21      	ldr	r2, [pc, #132]	; (800ab04 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	605a      	str	r2, [r3, #4]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	609a      	str	r2, [r3, #8]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	731a      	strb	r2, [r3, #12]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f103 0218 	add.w	r2, r3, #24
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	615a      	str	r2, [r3, #20]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	3318      	adds	r3, #24
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7ff ff23 	bl	800a8f0 <_ZN19MockFailureReporterC1Ev>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	3320      	adds	r3, #32
 800aaae:	4618      	mov	r0, r3
 800aab0:	f010 fefc 	bl	801b8ac <_ZN21MockExpectedCallsListC1Ev>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	62da      	str	r2, [r3, #44]	; 0x2c
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	3330      	adds	r3, #48	; 0x30
 800aace:	4618      	mov	r0, r3
 800aad0:	f014 fbe8 	bl	801f2a4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	3338      	adds	r3, #56	; 0x38
 800aad8:	4618      	mov	r0, r3
 800aada:	f014 faf2 	bl	801f0c2 <_ZN18MockNamedValueListC1Ev>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	333c      	adds	r3, #60	; 0x3c
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	4618      	mov	r0, r3
 800aae6:	f001 ff08 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 f894 	bl	800ac22 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4618      	mov	r0, r3
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	08027ba8 	.word	0x08027ba8

0800ab08 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	4a0d      	ldr	r2, [pc, #52]	; (800ab48 <_ZN11MockSupportD1Ev+0x40>)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	601a      	str	r2, [r3, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	333c      	adds	r3, #60	; 0x3c
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f002 fa51 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	3330      	adds	r3, #48	; 0x30
 800ab24:	4618      	mov	r0, r3
 800ab26:	f014 fbd1 	bl	801f2cc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	3320      	adds	r3, #32
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f010 fed0 	bl	801b8d4 <_ZN21MockExpectedCallsListD1Ev>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	3318      	adds	r3, #24
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7ff feed 	bl	800a918 <_ZN19MockFailureReporterD1Ev>
{
}
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4618      	mov	r0, r3
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	08027ba8 	.word	0x08027ba8

0800ab4c <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
}
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7ff ffd7 	bl	800ab08 <_ZN11MockSupportD1Ev>
 800ab5a:	2148      	movs	r1, #72	; 0x48
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f7ff fac9 	bl	800a0f4 <_ZdlPvj>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4618      	mov	r0, r3
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	460b      	mov	r3, r1
 800ab76:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	691a      	ldr	r2, [r3, #16]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3310      	adds	r3, #16
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	78f9      	ldrb	r1, [r7, #3]
 800ab88:	4610      	mov	r0, r2
 800ab8a:	4798      	blx	r3
}
 800ab8c:	bf00      	nop
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d102      	bne.n	800abaa <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	3318      	adds	r3, #24
 800aba8:	e000      	b.n	800abac <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00a      	beq.n	800abce <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	33c8      	adds	r3, #200	; 0xc8
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	6952      	ldr	r2, [r2, #20]
 800abca:	4611      	mov	r1, r2
 800abcc:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	3338      	adds	r3, #56	; 0x38
 800abd2:	4618      	mov	r0, r3
 800abd4:	f014 fb0b 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 800abd8:	60f8      	str	r0, [r7, #12]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d01c      	beq.n	800ac1a <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 800abe0:	68f9      	ldr	r1, [r7, #12]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 ff26 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	bf14      	ite	ne
 800abee:	2301      	movne	r3, #1
 800abf0:	2300      	moveq	r3, #0
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00b      	beq.n	800ac10 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 800abf8:	68f9      	ldr	r1, [r7, #12]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 ff1a 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ac00:	4603      	mov	r3, r0
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	32a4      	adds	r2, #164	; 0xa4
 800ac06:	6812      	ldr	r2, [r2, #0]
 800ac08:	6879      	ldr	r1, [r7, #4]
 800ac0a:	6949      	ldr	r1, [r1, #20]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f014 f9f5 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	e7df      	b.n	800abda <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 800ac1a:	bf00      	nop
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b083      	sub	sp, #12
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d102      	bne.n	800ac38 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	695b      	ldr	r3, [r3, #20]
 800ac36:	e000      	b.n	800ac3a <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	6113      	str	r3, [r2, #16]
}
 800ac3e:	bf00      	nop
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b082      	sub	sp, #8
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	3330      	adds	r3, #48	; 0x30
 800ac56:	4618      	mov	r0, r3
 800ac58:	f012 fb10 	bl	801d27c <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 800ac5c:	bf00      	nop
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800ac64:	b590      	push	{r4, r7, lr}
 800ac66:	b087      	sub	sp, #28
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	3330      	adds	r3, #48	; 0x30
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	68b9      	ldr	r1, [r7, #8]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f014 fb75 	bl	801f368 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3338      	adds	r3, #56	; 0x38
 800ac82:	4618      	mov	r0, r3
 800ac84:	f014 fab3 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 800ac88:	6178      	str	r0, [r7, #20]
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d01c      	beq.n	800acca <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 800ac90:	6979      	ldr	r1, [r7, #20]
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f000 fece 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	bf14      	ite	ne
 800ac9e:	2301      	movne	r3, #1
 800aca0:	2300      	moveq	r3, #0
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00b      	beq.n	800acc0 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 800aca8:	6979      	ldr	r1, [r7, #20]
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	f000 fec2 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800acb0:	4603      	mov	r3, r0
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	32b0      	adds	r2, #176	; 0xb0
 800acb6:	6814      	ldr	r4, [r2, #0]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	68b9      	ldr	r1, [r7, #8]
 800acbc:	4618      	mov	r0, r3
 800acbe:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800acc0:	6978      	ldr	r0, [r7, #20]
 800acc2:	f014 f99d 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 800acc6:	6178      	str	r0, [r7, #20]
 800acc8:	e7df      	b.n	800ac8a <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 800acca:	bf00      	nop
 800accc:	371c      	adds	r7, #28
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd90      	pop	{r4, r7, pc}

0800acd2 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800acd2:	b590      	push	{r4, r7, lr}
 800acd4:	b087      	sub	sp, #28
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	60f8      	str	r0, [r7, #12]
 800acda:	60b9      	str	r1, [r7, #8]
 800acdc:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3330      	adds	r3, #48	; 0x30
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	68b9      	ldr	r1, [r7, #8]
 800ace6:	4618      	mov	r0, r3
 800ace8:	f014 fb5a 	bl	801f3a0 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	3338      	adds	r3, #56	; 0x38
 800acf0:	4618      	mov	r0, r3
 800acf2:	f014 fa7c 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 800acf6:	6178      	str	r0, [r7, #20]
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d01c      	beq.n	800ad38 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800acfe:	6979      	ldr	r1, [r7, #20]
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f000 fe97 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	bf14      	ite	ne
 800ad0c:	2301      	movne	r3, #1
 800ad0e:	2300      	moveq	r3, #0
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00b      	beq.n	800ad2e <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800ad16:	6979      	ldr	r1, [r7, #20]
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f000 fe8b 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	32b4      	adds	r2, #180	; 0xb4
 800ad24:	6814      	ldr	r4, [r2, #0]
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	68b9      	ldr	r1, [r7, #8]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ad2e:	6978      	ldr	r0, [r7, #20]
 800ad30:	f014 f966 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 800ad34:	6178      	str	r0, [r7, #20]
 800ad36:	e7df      	b.n	800acf8 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 800ad38:	bf00      	nop
 800ad3a:	371c      	adds	r7, #28
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd90      	pop	{r4, r7, pc}

0800ad40 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	3330      	adds	r3, #48	; 0x30
 800ad4e:	6839      	ldr	r1, [r7, #0]
 800ad50:	4618      	mov	r0, r3
 800ad52:	f014 fb91 	bl	801f478 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	3338      	adds	r3, #56	; 0x38
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f014 fa47 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 800ad60:	60f8      	str	r0, [r7, #12]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d01b      	beq.n	800ada0 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 800ad68:	68f9      	ldr	r1, [r7, #12]
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fe62 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	bf14      	ite	ne
 800ad76:	2301      	movne	r3, #1
 800ad78:	2300      	moveq	r3, #0
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00a      	beq.n	800ad96 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 800ad80:	68f9      	ldr	r1, [r7, #12]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fe56 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	32b8      	adds	r2, #184	; 0xb8
 800ad8e:	6812      	ldr	r2, [r2, #0]
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	4618      	mov	r0, r3
 800ad94:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f014 f932 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 800ad9c:	60f8      	str	r0, [r7, #12]
 800ad9e:	e7e0      	b.n	800ad62 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 800ada0:	bf00      	nop
 800ada2:	3710      	adds	r7, #16
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	3330      	adds	r3, #48	; 0x30
 800adb4:	4618      	mov	r0, r3
 800adb6:	f014 fab8 	bl	801f32a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3338      	adds	r3, #56	; 0x38
 800adbe:	4618      	mov	r0, r3
 800adc0:	f014 fa15 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 800adc4:	60f8      	str	r0, [r7, #12]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d01a      	beq.n	800ae02 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 800adcc:	68f9      	ldr	r1, [r7, #12]
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 fe30 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	bf14      	ite	ne
 800adda:	2301      	movne	r3, #1
 800addc:	2300      	moveq	r3, #0
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d009      	beq.n	800adf8 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800ade4:	68f9      	ldr	r1, [r7, #12]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fe24 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800adec:	4603      	mov	r3, r0
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	32bc      	adds	r2, #188	; 0xbc
 800adf2:	6812      	ldr	r2, [r2, #0]
 800adf4:	4618      	mov	r0, r3
 800adf6:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f014 f901 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	e7e1      	b.n	800adc6 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800ae02:	bf00      	nop
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d004      	beq.n	800ae24 <_ZN11MockSupport5clearEv+0x1a>
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	3204      	adds	r2, #4
 800ae1e:	6812      	ldr	r2, [r2, #0]
 800ae20:	4618      	mov	r0, r3
 800ae22:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800ae32:	f00e fe0d 	bl	8019a50 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	3320      	adds	r3, #32
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f011 f937 	bl	801c0ae <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	3338      	adds	r3, #56	; 0x38
 800ae66:	4618      	mov	r0, r3
 800ae68:	f014 f9c1 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 800ae6c:	60f8      	str	r0, [r7, #12]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d01a      	beq.n	800aeaa <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800ae74:	68f9      	ldr	r1, [r7, #12]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fddc 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ae7c:	60b8      	str	r0, [r7, #8]
        if (support) {
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00d      	beq.n	800aea0 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	339c      	adds	r3, #156	; 0x9c
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68b8      	ldr	r0, [r7, #8]
 800ae8e:	4798      	blx	r3
            delete support;
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d004      	beq.n	800aea0 <_ZN11MockSupport5clearEv+0x96>
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	3204      	adds	r2, #4
 800ae9a:	6812      	ldr	r2, [r2, #0]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f014 f8ad 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	e7e1      	b.n	800ae6e <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	3338      	adds	r3, #56	; 0x38
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f014 f915 	bl	801f0de <_ZN18MockNamedValueList5clearEv>
}
 800aeb4:	bf00      	nop
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	731a      	strb	r2, [r3, #12]
}
 800aeca:	bf00      	nop
 800aecc:	370c      	adds	r7, #12
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
	...

0800aed8 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 800aed8:	b590      	push	{r4, r7, lr}
 800aeda:	b089      	sub	sp, #36	; 0x24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	333c      	adds	r3, #60	; 0x3c
 800aee8:	4618      	mov	r0, r3
 800aeea:	f002 f859 	bl	800cfa0 <_ZNK12SimpleString7isEmptyEv>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d004      	beq.n	800aefe <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 800aef4:	6879      	ldr	r1, [r7, #4]
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f001 fcff 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 800aefc:	e021      	b.n	800af42 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800af04:	f107 0318 	add.w	r3, r7, #24
 800af08:	4910      	ldr	r1, [pc, #64]	; (800af4c <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 800af0a:	4618      	mov	r0, r3
 800af0c:	f001 fca1 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800af10:	f107 0310 	add.w	r3, r7, #16
 800af14:	f107 0218 	add.w	r2, r7, #24
 800af18:	4621      	mov	r1, r4
 800af1a:	4618      	mov	r0, r3
 800af1c:	f002 f8b3 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f107 0110 	add.w	r1, r7, #16
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	4618      	mov	r0, r3
 800af2a:	f002 f8ac 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800af2e:	f107 0310 	add.w	r3, r7, #16
 800af32:	4618      	mov	r0, r3
 800af34:	f002 f845 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800af38:	f107 0318 	add.w	r3, r7, #24
 800af3c:	4618      	mov	r0, r3
 800af3e:	f002 f840 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	3724      	adds	r7, #36	; 0x24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd90      	pop	{r4, r7, pc}
 800af4a:	bf00      	nop
 800af4c:	08023ec0 	.word	0x08023ec0

0800af50 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	3314      	adds	r3, #20
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	2101      	movs	r1, #1
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	4798      	blx	r3
 800af6a:	4603      	mov	r3, r0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	3314      	adds	r3, #20
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	683a      	ldr	r2, [r7, #0]
 800af88:	2100      	movs	r1, #0
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	4798      	blx	r3
}
 800af8e:	bf00      	nop
 800af90:	3708      	adds	r7, #8
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
	...

0800af98 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 800af98:	b590      	push	{r4, r7, lr}
 800af9a:	b089      	sub	sp, #36	; 0x24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800afaa:	f083 0301 	eor.w	r3, r3, #1
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d003      	beq.n	800afbc <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800afb4:	f010 fbf6 	bl	801b7a4 <_ZN23MockIgnoredExpectedCall8instanceEv>
 800afb8:	4603      	mov	r3, r0
 800afba:	e041      	b.n	800b040 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f000 fb1b 	bl	800b5f8 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800afc2:	22a5      	movs	r2, #165	; 0xa5
 800afc4:	4920      	ldr	r1, [pc, #128]	; (800b048 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800afc6:	2070      	movs	r0, #112	; 0x70
 800afc8:	f7ff f880 	bl	800a0cc <_ZnwjPKci>
 800afcc:	4604      	mov	r4, r0
 800afce:	68b9      	ldr	r1, [r7, #8]
 800afd0:	4620      	mov	r0, r4
 800afd2:	f00f f8f3 	bl	801a1bc <_ZN23MockCheckedExpectedCallC1Ej>
 800afd6:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	3308      	adds	r3, #8
 800afde:	681c      	ldr	r4, [r3, #0]
 800afe0:	f107 0314 	add.w	r3, r7, #20
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	68f9      	ldr	r1, [r7, #12]
 800afe8:	4618      	mov	r0, r3
 800afea:	f7ff ff75 	bl	800aed8 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800afee:	f107 0314 	add.w	r3, r7, #20
 800aff2:	4619      	mov	r1, r3
 800aff4:	69f8      	ldr	r0, [r7, #28]
 800aff6:	47a0      	blx	r4
 800aff8:	f107 0314 	add.w	r3, r7, #20
 800affc:	4618      	mov	r0, r3
 800affe:	f001 ffe0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	7b1b      	ldrb	r3, [r3, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d013      	beq.n	800b032 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	3310      	adds	r3, #16
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	6892      	ldr	r2, [r2, #8]
 800b016:	1c50      	adds	r0, r2, #1
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	6891      	ldr	r1, [r2, #8]
 800b01c:	68ba      	ldr	r2, [r7, #8]
 800b01e:	440a      	add	r2, r1
 800b020:	4601      	mov	r1, r0
 800b022:	69f8      	ldr	r0, [r7, #28]
 800b024:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	689a      	ldr	r2, [r3, #8]
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	441a      	add	r2, r3
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3320      	adds	r3, #32
 800b036:	69f9      	ldr	r1, [r7, #28]
 800b038:	4618      	mov	r0, r3
 800b03a:	f010 fd89 	bl	801bb50 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 800b03e:	69fb      	ldr	r3, [r7, #28]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3724      	adds	r7, #36	; 0x24
 800b044:	46bd      	mov	sp, r7
 800b046:	bd90      	pop	{r4, r7, pc}
 800b048:	08023ec4 	.word	0x08023ec4

0800b04c <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 800b04c:	b5b0      	push	{r4, r5, r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	1c5a      	adds	r2, r3, #1
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	605a      	str	r2, [r3, #4]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685d      	ldr	r5, [r3, #4]
 800b062:	22b1      	movs	r2, #177	; 0xb1
 800b064:	490a      	ldr	r1, [pc, #40]	; (800b090 <_ZN11MockSupport16createActualCallEv+0x44>)
 800b066:	202c      	movs	r0, #44	; 0x2c
 800b068:	f7ff f830 	bl	800a0cc <_ZnwjPKci>
 800b06c:	4604      	mov	r4, r0
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	691a      	ldr	r2, [r3, #16]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	3320      	adds	r3, #32
 800b076:	4629      	mov	r1, r5
 800b078:	4620      	mov	r0, r4
 800b07a:	f00c fbdb 	bl	8017834 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800b086:	4618      	mov	r0, r3
 800b088:	3708      	adds	r7, #8
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bdb0      	pop	{r4, r5, r7, pc}
 800b08e:	bf00      	nop
 800b090:	08023ec4 	.word	0x08023ec4

0800b094 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00d      	beq.n	800b0c4 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	3320      	adds	r3, #32
 800b0ac:	6839      	ldr	r1, [r7, #0]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f010 fd2a 	bl	801bb08 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	f083 0301 	eor.w	r3, r3, #1
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e000      	b.n	800b0c6 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800b0ce:	b590      	push	{r4, r7, lr}
 800b0d0:	b087      	sub	sp, #28
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800b0d8:	f107 030c 	add.w	r3, r7, #12
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	6879      	ldr	r1, [r7, #4]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7ff fef9 	bl	800aed8 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d014      	beq.n	800b118 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	33c4      	adds	r3, #196	; 0xc4
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b104:	2b00      	cmp	r3, #0
 800b106:	d004      	beq.n	800b112 <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	3204      	adds	r2, #4
 800b10c:	6812      	ldr	r2, [r2, #0]
 800b10e:	4618      	mov	r0, r3
 800b110:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b11e:	f083 0301 	eor.w	r3, r3, #1
 800b122:	b2db      	uxtb	r3, r3
 800b124:	2b00      	cmp	r3, #0
 800b126:	d004      	beq.n	800b132 <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800b128:	f00e fcbe 	bl	8019aa8 <_ZN21MockIgnoredActualCall8instanceEv>
 800b12c:	4603      	mov	r3, r0
 800b12e:	461c      	mov	r4, r3
 800b130:	e02f      	b.n	800b192 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00b      	beq.n	800b154 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 800b13c:	f00e fc6e 	bl	8019a1c <_ZN19MockActualCallTrace8instanceEv>
 800b140:	4603      	mov	r3, r0
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	3208      	adds	r2, #8
 800b146:	6812      	ldr	r2, [r2, #0]
 800b148:	f107 010c 	add.w	r1, r7, #12
 800b14c:	4618      	mov	r0, r3
 800b14e:	4790      	blx	r2
 800b150:	4604      	mov	r4, r0
 800b152:	e01e      	b.n	800b192 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800b154:	f107 030c 	add.w	r3, r7, #12
 800b158:	4619      	mov	r1, r3
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f7ff ff9a 	bl	800b094 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d004      	beq.n	800b170 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800b166:	f00e fc9f 	bl	8019aa8 <_ZN21MockIgnoredActualCall8instanceEv>
 800b16a:	4603      	mov	r3, r0
 800b16c:	461c      	mov	r4, r3
 800b16e:	e010      	b.n	800b192 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	33c0      	adds	r3, #192	; 0xc0
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	4798      	blx	r3
 800b17c:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	3308      	adds	r3, #8
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f107 020c 	add.w	r2, r7, #12
 800b18a:	4611      	mov	r1, r2
 800b18c:	6978      	ldr	r0, [r7, #20]
 800b18e:	4798      	blx	r3
    return *call;
 800b190:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800b192:	f107 030c 	add.w	r3, r7, #12
 800b196:	4618      	mov	r0, r3
 800b198:	f001 ff13 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800b19c:	4623      	mov	r3, r4
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	371c      	adds	r7, #28
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd90      	pop	{r4, r7, pc}

0800b1a6 <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b084      	sub	sp, #16
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	3338      	adds	r3, #56	; 0x38
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f014 f817 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 800b1c0:	60f8      	str	r0, [r7, #12]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d01a      	beq.n	800b1fe <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800b1c8:	68f9      	ldr	r1, [r7, #12]
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 fc32 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	bf14      	ite	ne
 800b1d6:	2301      	movne	r3, #1
 800b1d8:	2300      	moveq	r3, #0
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d009      	beq.n	800b1f4 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800b1e0:	68f9      	ldr	r1, [r7, #12]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fc26 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	3290      	adds	r2, #144	; 0x90
 800b1ee:	6812      	ldr	r2, [r2, #0]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f013 ff03 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	e7e1      	b.n	800b1c2 <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800b1fe:	bf00      	nop
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b084      	sub	sp, #16
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	3338      	adds	r3, #56	; 0x38
 800b21a:	4618      	mov	r0, r3
 800b21c:	f013 ffe7 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 800b220:	60f8      	str	r0, [r7, #12]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d01a      	beq.n	800b25e <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800b228:	68f9      	ldr	r1, [r7, #12]
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fc02 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	bf14      	ite	ne
 800b236:	2301      	movne	r3, #1
 800b238:	2300      	moveq	r3, #0
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d009      	beq.n	800b254 <_ZN11MockSupport7disableEv+0x4e>
 800b240:	68f9      	ldr	r1, [r7, #12]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fbf6 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b248:	4603      	mov	r3, r0
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	3284      	adds	r2, #132	; 0x84
 800b24e:	6812      	ldr	r2, [r2, #0]
 800b250:	4618      	mov	r0, r3
 800b252:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f013 fed3 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	e7e1      	b.n	800b222 <_ZN11MockSupport7disableEv+0x1c>
}
 800b25e:	bf00      	nop
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b084      	sub	sp, #16
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2201      	movs	r2, #1
 800b272:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	3338      	adds	r3, #56	; 0x38
 800b27a:	4618      	mov	r0, r3
 800b27c:	f013 ffb7 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 800b280:	60f8      	str	r0, [r7, #12]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d01a      	beq.n	800b2be <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 800b288:	68f9      	ldr	r1, [r7, #12]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fbd2 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	bf14      	ite	ne
 800b296:	2301      	movne	r3, #1
 800b298:	2300      	moveq	r3, #0
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d009      	beq.n	800b2b4 <_ZN11MockSupport6enableEv+0x4e>
 800b2a0:	68f9      	ldr	r1, [r7, #12]
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fbc6 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	3288      	adds	r2, #136	; 0x88
 800b2ae:	6812      	ldr	r2, [r2, #0]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f013 fea3 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	e7e1      	b.n	800b282 <_ZN11MockSupport6enableEv+0x1c>
}
 800b2be:	bf00      	nop
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	78fa      	ldrb	r2, [r7, #3]
 800b2d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	3338      	adds	r3, #56	; 0x38
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f013 ff85 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 800b2e4:	60f8      	str	r0, [r7, #12]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d01b      	beq.n	800b324 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 800b2ec:	68f9      	ldr	r1, [r7, #12]
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fba0 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	bf14      	ite	ne
 800b2fa:	2301      	movne	r3, #1
 800b2fc:	2300      	moveq	r3, #0
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00a      	beq.n	800b31a <_ZN11MockSupport7tracingEb+0x54>
 800b304:	68f9      	ldr	r1, [r7, #12]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fb94 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b30c:	4603      	mov	r3, r0
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	328c      	adds	r2, #140	; 0x8c
 800b312:	6812      	ldr	r2, [r2, #0]
 800b314:	78f9      	ldrb	r1, [r7, #3]
 800b316:	4618      	mov	r0, r3
 800b318:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f013 fe70 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 800b320:	60f8      	str	r0, [r7, #12]
 800b322:	e7e0      	b.n	800b2e6 <_ZN11MockSupport7tracingEb+0x20>
}
 800b324:	bf00      	nop
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	3320      	adds	r3, #32
 800b338:	4618      	mov	r0, r3
 800b33a:	f010 fbc1 	bl	801bac0 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800b33e:	4603      	mov	r3, r0
 800b340:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	3338      	adds	r3, #56	; 0x38
 800b346:	4618      	mov	r0, r3
 800b348:	f013 ff51 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 800b34c:	60b8      	str	r0, [r7, #8]
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d01f      	beq.n	800b394 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800b354:	68b9      	ldr	r1, [r7, #8]
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 fb6c 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	bf14      	ite	ne
 800b362:	2301      	movne	r3, #1
 800b364:	2300      	moveq	r3, #0
 800b366:	b2db      	uxtb	r3, r3
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00e      	beq.n	800b38a <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800b36c:	68b9      	ldr	r1, [r7, #8]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fb60 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b374:	4603      	mov	r3, r0
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	3298      	adds	r2, #152	; 0x98
 800b37a:	6812      	ldr	r2, [r2, #0]
 800b37c:	4618      	mov	r0, r3
 800b37e:	4790      	blx	r2
 800b380:	4603      	mov	r3, r0
 800b382:	461a      	mov	r2, r3
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	4413      	add	r3, r2
 800b388:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b38a:	68b8      	ldr	r0, [r7, #8]
 800b38c:	f013 fe38 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 800b390:	60b8      	str	r0, [r7, #8]
 800b392:	e7dc      	b.n	800b34e <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2b00      	cmp	r3, #0
 800b398:	bf14      	ite	ne
 800b39a:	2301      	movne	r3, #1
 800b39c:	2300      	moveq	r3, #0
 800b39e:	b2db      	uxtb	r3, r3
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d010      	beq.n	800b3da <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	33bc      	adds	r3, #188	; 0xbc
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	4798      	blx	r3
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	f083 0301 	eor.w	r3, r3, #1
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d001      	beq.n	800b3da <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e000      	b.n	800b3dc <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d001      	beq.n	800b3e4 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	e02a      	b.n	800b43a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	3338      	adds	r3, #56	; 0x38
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f013 ff00 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d020      	beq.n	800b438 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800b3f6:	68f9      	ldr	r1, [r7, #12]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fb1b 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00f      	beq.n	800b424 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800b404:	68f9      	ldr	r1, [r7, #12]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fb14 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b40c:	4603      	mov	r3, r0
 800b40e:	4618      	mov	r0, r3
 800b410:	f7ff ffca 	bl	800b3a8 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800b414:	4603      	mov	r3, r0
 800b416:	f083 0301 	eor.w	r3, r3, #1
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d001      	beq.n	800b424 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800b420:	2301      	movs	r3, #1
 800b422:	e000      	b.n	800b426 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800b424:	2300      	movs	r3, #0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d001      	beq.n	800b42e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800b42a:	2300      	movs	r3, #0
 800b42c:	e005      	b.n	800b43a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f013 fde6 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 800b434:	60f8      	str	r0, [r7, #12]
 800b436:	e7db      	b.n	800b3f0 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800b438:	2301      	movs	r3, #1
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}

0800b442 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800b442:	b580      	push	{r7, lr}
 800b444:	b092      	sub	sp, #72	; 0x48
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800b44a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b44e:	4618      	mov	r0, r3
 800b450:	f010 fa2c 	bl	801b8ac <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f103 0220 	add.w	r2, r3, #32
 800b45a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b45e:	4611      	mov	r1, r2
 800b460:	4618      	mov	r0, r3
 800b462:	f010 fbf3 	bl	801bc4c <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	3338      	adds	r3, #56	; 0x38
 800b46a:	4618      	mov	r0, r3
 800b46c:	f013 febf 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 800b470:	6478      	str	r0, [r7, #68]	; 0x44
 800b472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b474:	2b00      	cmp	r3, #0
 800b476:	d01d      	beq.n	800b4b4 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800b478:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fada 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	bf14      	ite	ne
 800b486:	2301      	movne	r3, #1
 800b488:	2300      	moveq	r3, #0
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00c      	beq.n	800b4aa <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800b490:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 face 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b498:	4603      	mov	r3, r0
 800b49a:	f103 0220 	add.w	r2, r3, #32
 800b49e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b4a2:	4611      	mov	r1, r2
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f010 fbd1 	bl	801bc4c <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b4aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b4ac:	f013 fda8 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 800b4b0:	6478      	str	r0, [r7, #68]	; 0x44
 800b4b2:	e7de      	b.n	800b472 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	691a      	ldr	r2, [r3, #16]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	330c      	adds	r3, #12
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4610      	mov	r0, r2
 800b4c4:	4798      	blx	r3
 800b4c6:	4601      	mov	r1, r0
 800b4c8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b4cc:	f107 0308 	add.w	r3, r7, #8
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f011 f9f5 	bl	801c8c0 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	33c4      	adds	r3, #196	; 0xc4
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f107 0208 	add.w	r2, r7, #8
 800b4e2:	4611      	mov	r1, r2
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b4e8:	f107 0308 	add.w	r3, r7, #8
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f000 fe6d 	bl	800c1cc <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800b4f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f010 f9ec 	bl	801b8d4 <_ZN21MockExpectedCallsListD1Ev>
}
 800b4fc:	bf00      	nop
 800b4fe:	3748      	adds	r7, #72	; 0x48
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b092      	sub	sp, #72	; 0x48
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800b50c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b510:	4618      	mov	r0, r3
 800b512:	f010 f9cb 	bl	801b8ac <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f103 0220 	add.w	r2, r3, #32
 800b51c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b520:	4611      	mov	r1, r2
 800b522:	4618      	mov	r0, r3
 800b524:	f010 fb92 	bl	801bc4c <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	3338      	adds	r3, #56	; 0x38
 800b52c:	4618      	mov	r0, r3
 800b52e:	f013 fe5e 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 800b532:	6478      	str	r0, [r7, #68]	; 0x44
 800b534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b536:	2b00      	cmp	r3, #0
 800b538:	d01d      	beq.n	800b576 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800b53a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 fa79 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	bf14      	ite	ne
 800b548:	2301      	movne	r3, #1
 800b54a:	2300      	moveq	r3, #0
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00c      	beq.n	800b56c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800b552:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fa6d 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b55a:	4603      	mov	r3, r0
 800b55c:	f103 0220 	add.w	r2, r3, #32
 800b560:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b564:	4611      	mov	r1, r2
 800b566:	4618      	mov	r0, r3
 800b568:	f010 fb70 	bl	801bc4c <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b56c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b56e:	f013 fd47 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 800b572:	6478      	str	r0, [r7, #68]	; 0x44
 800b574:	e7de      	b.n	800b534 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	691a      	ldr	r2, [r3, #16]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	691b      	ldr	r3, [r3, #16]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	330c      	adds	r3, #12
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4610      	mov	r0, r2
 800b586:	4798      	blx	r3
 800b588:	4601      	mov	r1, r0
 800b58a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b58e:	f107 0308 	add.w	r3, r7, #8
 800b592:	4618      	mov	r0, r3
 800b594:	f011 fa38 	bl	801ca08 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	33c4      	adds	r3, #196	; 0xc4
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f107 0208 	add.w	r2, r7, #8
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b5aa:	f107 0308 	add.w	r3, r7, #8
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 fe2e 	bl	800c210 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800b5b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f010 f98b 	bl	801b8d4 <_ZN21MockExpectedCallsListD1Ev>
}
 800b5be:	bf00      	nop
 800b5c0:	3748      	adds	r7, #72	; 0x48
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b082      	sub	sp, #8
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
 800b5ce:	6039      	str	r1, [r7, #0]
    clear();
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	339c      	adds	r3, #156	; 0x9c
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	691a      	ldr	r2, [r3, #16]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	3308      	adds	r3, #8
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	4798      	blx	r3
}
 800b5f0:	bf00      	nop
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800b600:	f008 fd0a 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 800b604:	4603      	mov	r3, r0
 800b606:	4618      	mov	r0, r3
 800b608:	f007 fb78 	bl	8012cfc <_ZN10UtestShell10countCheckEv>
}
 800b60c:	bf00      	nop
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b620:	2b00      	cmp	r3, #0
 800b622:	d008      	beq.n	800b636 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	33c4      	adds	r3, #196	; 0xc4
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4610      	mov	r0, r2
 800b634:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	3338      	adds	r3, #56	; 0x38
 800b63a:	4618      	mov	r0, r3
 800b63c:	f013 fdd7 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 800b640:	60f8      	str	r0, [r7, #12]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d023      	beq.n	800b690 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800b648:	68f9      	ldr	r1, [r7, #12]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f9f2 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d009      	beq.n	800b66a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800b656:	68f9      	ldr	r1, [r7, #12]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f9eb 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b65e:	4603      	mov	r3, r0
 800b660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800b666:	2301      	movs	r3, #1
 800b668:	e000      	b.n	800b66c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800b66a:	2300      	movs	r3, #0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00a      	beq.n	800b686 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800b670:	68f9      	ldr	r1, [r7, #12]
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f9de 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b678:	4603      	mov	r3, r0
 800b67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	32c4      	adds	r2, #196	; 0xc4
 800b680:	6812      	ldr	r2, [r2, #0]
 800b682:	4618      	mov	r0, r3
 800b684:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f013 fcba 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 800b68c:	60f8      	str	r0, [r7, #12]
 800b68e:	e7d8      	b.n	800b642 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800b690:	bf00      	nop
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	3320      	adds	r3, #32
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f010 f947 	bl	801b938 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d001      	beq.n	800b6b4 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	e027      	b.n	800b704 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	3338      	adds	r3, #56	; 0x38
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f013 fd98 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d01d      	beq.n	800b702 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800b6c6:	68f9      	ldr	r1, [r7, #12]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f9b3 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00c      	beq.n	800b6ee <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800b6d4:	68f9      	ldr	r1, [r7, #12]
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f9ac 	bl	800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7ff ffda 	bl	800b698 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d001      	beq.n	800b6ee <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e000      	b.n	800b6f0 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d001      	beq.n	800b6f8 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e005      	b.n	800b704 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f013 fc81 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	e7de      	b.n	800b6c0 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800b702:	2300      	movs	r3, #0
}
 800b704:	4618      	mov	r0, r3
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7ff ff7d 	bl	800b614 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f7ff fe44 	bl	800b3a8 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00a      	beq.n	800b73c <_ZN11MockSupport17checkExpectationsEv+0x30>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	3398      	adds	r3, #152	; 0x98
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	4798      	blx	r3
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d001      	beq.n	800b73c <_ZN11MockSupport17checkExpectationsEv+0x30>
 800b738:	2301      	movs	r3, #1
 800b73a:	e000      	b.n	800b73e <_ZN11MockSupport17checkExpectationsEv+0x32>
 800b73c:	2300      	movs	r3, #0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d002      	beq.n	800b748 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f7ff fe7d 	bl	800b442 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f7ff ffa5 	bl	800b698 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7ff fed5 	bl	800b504 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800b75a:	bf00      	nop
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b082      	sub	sp, #8
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
 800b76a:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	3338      	adds	r3, #56	; 0x38
 800b770:	6839      	ldr	r1, [r7, #0]
 800b772:	4618      	mov	r0, r3
 800b774:	f013 fd0c 	bl	801f190 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	bf14      	ite	ne
 800b77e:	2301      	movne	r3, #1
 800b780:	2300      	moveq	r3, #0
 800b782:	b2db      	uxtb	r3, r3
}
 800b784:	4618      	mov	r0, r3
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800b78c:	b590      	push	{r4, r7, lr}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3338      	adds	r3, #56	; 0x38
 800b79a:	6839      	ldr	r1, [r7, #0]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f013 fcf7 	bl	801f190 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800b7a2:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d111      	bne.n	800b7ce <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800b7aa:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b7ae:	490a      	ldr	r1, [pc, #40]	; (800b7d8 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800b7b0:	2038      	movs	r0, #56	; 0x38
 800b7b2:	f7fe fc8b 	bl	800a0cc <_ZnwjPKci>
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	6839      	ldr	r1, [r7, #0]
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f011 fd6e 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
 800b7c0:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	3338      	adds	r3, #56	; 0x38
 800b7c6:	68f9      	ldr	r1, [r7, #12]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f013 fcab 	bl	801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3714      	adds	r7, #20
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd90      	pop	{r4, r7, pc}
 800b7d8:	08023ec4 	.word	0x08023ec4

0800b7dc <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800b7ea:	68b9      	ldr	r1, [r7, #8]
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f7ff ffcd 	bl	800b78c <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800b7f2:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	3344      	adds	r3, #68	; 0x44
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	683a      	ldr	r2, [r7, #0]
 800b7fe:	6879      	ldr	r1, [r7, #4]
 800b800:	6978      	ldr	r0, [r7, #20]
 800b802:	4798      	blx	r3
}
 800b804:	bf00      	nop
 800b806:	3718      	adds	r7, #24
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b088      	sub	sp, #32
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	3338      	adds	r3, #56	; 0x38
 800b81c:	6879      	ldr	r1, [r7, #4]
 800b81e:	4618      	mov	r0, r3
 800b820:	f013 fcb6 	bl	801f190 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800b824:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d111      	bne.n	800b850 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800b82c:	f107 0314 	add.w	r3, r7, #20
 800b830:	490b      	ldr	r1, [pc, #44]	; (800b860 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800b832:	4618      	mov	r0, r3
 800b834:	f001 f80d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800b838:	f107 0314 	add.w	r3, r7, #20
 800b83c:	4619      	mov	r1, r3
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f011 fd2c 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
 800b844:	f107 0314 	add.w	r3, r7, #20
 800b848:	4618      	mov	r0, r3
 800b84a:	f001 fbba 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800b84e:	e003      	b.n	800b858 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800b850:	69f9      	ldr	r1, [r7, #28]
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f7ff f8a2 	bl	800a99c <_ZN14MockNamedValueC1ERKS_>
}
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	3720      	adds	r7, #32
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	08023ebc 	.word	0x08023ebc

0800b864 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800b864:	b590      	push	{r4, r7, lr}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800b86e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b872:	4927      	ldr	r1, [pc, #156]	; (800b910 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800b874:	2048      	movs	r0, #72	; 0x48
 800b876:	f7fe fc29 	bl	800a0cc <_ZnwjPKci>
 800b87a:	4604      	mov	r4, r0
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	4620      	mov	r0, r4
 800b880:	f7ff f8f8 	bl	800aa74 <_ZN11MockSupportC1ERK12SimpleString>
 800b884:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	33a4      	adds	r3, #164	; 0xa4
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	6952      	ldr	r2, [r2, #20]
 800b892:	4611      	mov	r1, r2
 800b894:	68f8      	ldr	r0, [r7, #12]
 800b896:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d005      	beq.n	800b8ae <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	3390      	adds	r3, #144	; 0x90
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b8b4:	f083 0301 	eor.w	r3, r3, #1
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d005      	beq.n	800b8ca <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	3384      	adds	r3, #132	; 0x84
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	7b1b      	ldrb	r3, [r3, #12]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d005      	beq.n	800b8de <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	3308      	adds	r3, #8
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	4798      	blx	r3

    newMock->tracing(tracing_);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	338c      	adds	r3, #140	; 0x8c
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	33b8      	adds	r3, #184	; 0xb8
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	3230      	adds	r2, #48	; 0x30
 800b8fe:	4611      	mov	r1, r2
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	4798      	blx	r3
    return newMock;
 800b904:	68fb      	ldr	r3, [r7, #12]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd90      	pop	{r4, r7, pc}
 800b90e:	bf00      	nop
 800b910:	08023ec4 	.word	0x08023ec4

0800b914 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800b914:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b916:	b0ab      	sub	sp, #172	; 0xac
 800b918:	af04      	add	r7, sp, #16
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800b91e:	f107 0308 	add.w	r3, r7, #8
 800b922:	4941      	ldr	r1, [pc, #260]	; (800ba28 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800b924:	4618      	mov	r0, r3
 800b926:	f000 ff94 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800b92a:	f107 0308 	add.w	r3, r7, #8
 800b92e:	6839      	ldr	r1, [r7, #0]
 800b930:	4618      	mov	r0, r3
 800b932:	f001 fbc3 	bl	800d0bc <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800b936:	f107 0308 	add.w	r3, r7, #8
 800b93a:	4619      	mov	r1, r3
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f7ff ff10 	bl	800b762 <_ZN11MockSupport7hasDataERK12SimpleString>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d048      	beq.n	800b9da <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800b948:	f008 fb66 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 800b94c:	4604      	mov	r4, r0
 800b94e:	6823      	ldr	r3, [r4, #0]
 800b950:	3324      	adds	r3, #36	; 0x24
 800b952:	681d      	ldr	r5, [r3, #0]
 800b954:	f107 0318 	add.w	r3, r7, #24
 800b958:	f107 0208 	add.w	r2, r7, #8
 800b95c:	6879      	ldr	r1, [r7, #4]
 800b95e:	4618      	mov	r0, r3
 800b960:	f7ff ff54 	bl	800b80c <_ZN11MockSupport7getDataERK12SimpleString>
 800b964:	f107 0310 	add.w	r3, r7, #16
 800b968:	f107 0218 	add.w	r2, r7, #24
 800b96c:	4611      	mov	r1, r2
 800b96e:	4618      	mov	r0, r3
 800b970:	f011 ff61 	bl	801d836 <_ZNK14MockNamedValue7getTypeEv>
 800b974:	f107 0310 	add.w	r3, r7, #16
 800b978:	4618      	mov	r0, r3
 800b97a:	f001 faf5 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800b97e:	4606      	mov	r6, r0
 800b980:	f008 fb5a 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800b984:	4603      	mov	r3, r0
 800b986:	9302      	str	r3, [sp, #8]
 800b988:	f240 13bd 	movw	r3, #445	; 0x1bd
 800b98c:	9301      	str	r3, [sp, #4]
 800b98e:	4b27      	ldr	r3, [pc, #156]	; (800ba2c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	2300      	movs	r3, #0
 800b994:	4632      	mov	r2, r6
 800b996:	4926      	ldr	r1, [pc, #152]	; (800ba30 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800b998:	4620      	mov	r0, r4
 800b99a:	47a8      	blx	r5
 800b99c:	f107 0310 	add.w	r3, r7, #16
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f001 fb0e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800b9a6:	f107 0318 	add.w	r3, r7, #24
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f011 fca0 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800b9b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b9b4:	f107 0208 	add.w	r2, r7, #8
 800b9b8:	6879      	ldr	r1, [r7, #4]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7ff ff26 	bl	800b80c <_ZN11MockSupport7getDataERK12SimpleString>
 800b9c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f012 fa4f 	bl	801de68 <_ZNK14MockNamedValue16getObjectPointerEv>
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	bf00      	nop
 800b9ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f011 fc8c 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 800b9d8:	e01b      	b.n	800ba12 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800b9da:	6839      	ldr	r1, [r7, #0]
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7ff ff41 	bl	800b864 <_ZN11MockSupport5cloneERK12SimpleString>
 800b9e2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800b9e6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b9ea:	4911      	ldr	r1, [pc, #68]	; (800ba30 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f000 ff30 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800b9f2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800b9f6:	f107 0108 	add.w	r1, r7, #8
 800b9fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f7ff feec 	bl	800b7dc <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800ba04:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f001 fada 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return newMock;
 800ba0e:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800ba12:	f107 0308 	add.w	r3, r7, #8
 800ba16:	4618      	mov	r0, r3
 800ba18:	f001 fad3 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800ba1c:	4623      	mov	r3, r4
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	379c      	adds	r7, #156	; 0x9c
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba26:	bf00      	nop
 800ba28:	08023edc 	.word	0x08023edc
 800ba2c:	08023ec4 	.word	0x08023ec4
 800ba30:	08023efc 	.word	0x08023efc

0800ba34 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800ba34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba38:	b08b      	sub	sp, #44	; 0x2c
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
 800ba3e:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800ba40:	2500      	movs	r5, #0
 800ba42:	2600      	movs	r6, #0
 800ba44:	f107 0308 	add.w	r3, r7, #8
 800ba48:	6839      	ldr	r1, [r7, #0]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f013 fb26 	bl	801f09c <_ZNK22MockNamedValueListNode7getTypeEv>
 800ba50:	f04f 0801 	mov.w	r8, #1
 800ba54:	f107 0310 	add.w	r3, r7, #16
 800ba58:	492e      	ldr	r1, [pc, #184]	; (800bb14 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f000 fef9 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800ba60:	f04f 0901 	mov.w	r9, #1
 800ba64:	f107 0210 	add.w	r2, r7, #16
 800ba68:	f107 0308 	add.w	r3, r7, #8
 800ba6c:	4611      	mov	r1, r2
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f001 fab3 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d01a      	beq.n	800bab0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800ba7a:	f107 0318 	add.w	r3, r7, #24
 800ba7e:	6839      	ldr	r1, [r7, #0]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f013 faf8 	bl	801f076 <_ZNK22MockNamedValueListNode7getNameEv>
 800ba86:	2501      	movs	r5, #1
 800ba88:	f107 0320 	add.w	r3, r7, #32
 800ba8c:	4922      	ldr	r1, [pc, #136]	; (800bb18 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f000 fedf 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800ba94:	2601      	movs	r6, #1
 800ba96:	f107 0220 	add.w	r2, r7, #32
 800ba9a:	f107 0318 	add.w	r3, r7, #24
 800ba9e:	4611      	mov	r1, r2
 800baa0:	4618      	mov	r0, r3
 800baa2:	f000 ff54 	bl	800c94e <_ZNK12SimpleString8containsERKS_>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d001      	beq.n	800bab0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800baac:	2401      	movs	r4, #1
 800baae:	e000      	b.n	800bab2 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800bab0:	2400      	movs	r4, #0
 800bab2:	2e00      	cmp	r6, #0
 800bab4:	d004      	beq.n	800bac0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800bab6:	f107 0320 	add.w	r3, r7, #32
 800baba:	4618      	mov	r0, r3
 800babc:	f001 fa81 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800bac0:	2d00      	cmp	r5, #0
 800bac2:	d004      	beq.n	800bace <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800bac4:	f107 0318 	add.w	r3, r7, #24
 800bac8:	4618      	mov	r0, r3
 800baca:	f001 fa7a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800bace:	f1b9 0f00 	cmp.w	r9, #0
 800bad2:	d004      	beq.n	800bade <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800bad4:	f107 0310 	add.w	r3, r7, #16
 800bad8:	4618      	mov	r0, r3
 800bada:	f001 fa72 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800bade:	f1b8 0f00 	cmp.w	r8, #0
 800bae2:	d004      	beq.n	800baee <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800bae4:	f107 0308 	add.w	r3, r7, #8
 800bae8:	4618      	mov	r0, r3
 800baea:	f001 fa6a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800baee:	2c00      	cmp	r4, #0
 800baf0:	d00a      	beq.n	800bb08 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800baf2:	6838      	ldr	r0, [r7, #0]
 800baf4:	f013 fa90 	bl	801f018 <_ZN22MockNamedValueListNode4itemEv>
 800baf8:	4603      	mov	r3, r0
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	32a0      	adds	r2, #160	; 0xa0
 800bafe:	6812      	ldr	r2, [r2, #0]
 800bb00:	4618      	mov	r0, r3
 800bb02:	4790      	blx	r2
 800bb04:	4603      	mov	r3, r0
 800bb06:	e000      	b.n	800bb0a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	372c      	adds	r7, #44	; 0x2c
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb14:	08023efc 	.word	0x08023efc
 800bb18:	08023edc 	.word	0x08023edc

0800bb1c <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00a      	beq.n	800bb44 <_ZN11MockSupport11returnValueEv+0x28>
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	3354      	adds	r3, #84	; 0x54
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	4610      	mov	r0, r2
 800bb40:	4798      	blx	r3
 800bb42:	e010      	b.n	800bb66 <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800bb44:	f107 0308 	add.w	r3, r7, #8
 800bb48:	4909      	ldr	r1, [pc, #36]	; (800bb70 <_ZN11MockSupport11returnValueEv+0x54>)
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 fe81 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800bb50:	f107 0308 	add.w	r3, r7, #8
 800bb54:	4619      	mov	r1, r3
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f011 fba0 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
 800bb5c:	f107 0308 	add.w	r3, r7, #8
 800bb60:	4618      	mov	r0, r3
 800bb62:	f001 fa2e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	08023ebc 	.word	0x08023ebc

0800bb74 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800bb74:	b590      	push	{r4, r7, lr}
 800bb76:	b091      	sub	sp, #68	; 0x44
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	3320      	adds	r3, #32
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f107 0208 	add.w	r2, r7, #8
 800bb88:	6879      	ldr	r1, [r7, #4]
 800bb8a:	4610      	mov	r0, r2
 800bb8c:	4798      	blx	r3
 800bb8e:	f107 0308 	add.w	r3, r7, #8
 800bb92:	4618      	mov	r0, r3
 800bb94:	f011 fe5e 	bl	801d854 <_ZNK14MockNamedValue12getBoolValueEv>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	461c      	mov	r4, r3
 800bb9c:	bf00      	nop
 800bb9e:	f107 0308 	add.w	r3, r7, #8
 800bba2:	4618      	mov	r0, r3
 800bba4:	f011 fba4 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 800bba8:	4623      	mov	r3, r4
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3744      	adds	r7, #68	; 0x44
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd90      	pop	{r4, r7, pc}

0800bbb2 <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800bbb2:	b590      	push	{r4, r7, lr}
 800bbb4:	b091      	sub	sp, #68	; 0x44
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	3320      	adds	r3, #32
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f107 0208 	add.w	r2, r7, #8
 800bbc6:	6879      	ldr	r1, [r7, #4]
 800bbc8:	4610      	mov	r0, r2
 800bbca:	4798      	blx	r3
 800bbcc:	f107 0308 	add.w	r3, r7, #8
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f011 fe67 	bl	801d8a4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	bf00      	nop
 800bbda:	f107 0308 	add.w	r3, r7, #8
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f011 fb86 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 800bbe4:	4623      	mov	r3, r4
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3744      	adds	r7, #68	; 0x44
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd90      	pop	{r4, r7, pc}

0800bbee <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800bbee:	b590      	push	{r4, r7, lr}
 800bbf0:	b091      	sub	sp, #68	; 0x44
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3320      	adds	r3, #32
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f107 0208 	add.w	r2, r7, #8
 800bc02:	6879      	ldr	r1, [r7, #4]
 800bc04:	4610      	mov	r0, r2
 800bc06:	4798      	blx	r3
 800bc08:	f107 0308 	add.w	r3, r7, #8
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f011 fe99 	bl	801d944 <_ZNK14MockNamedValue11getIntValueEv>
 800bc12:	4604      	mov	r4, r0
 800bc14:	bf00      	nop
 800bc16:	f107 0308 	add.w	r3, r7, #8
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f011 fb68 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 800bc20:	4623      	mov	r3, r4
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3744      	adds	r7, #68	; 0x44
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd90      	pop	{r4, r7, pc}

0800bc2a <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b082      	sub	sp, #8
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
 800bc32:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	331c      	adds	r3, #28
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	4798      	blx	r3
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d007      	beq.n	800bc56 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	335c      	adds	r3, #92	; 0x5c
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	4798      	blx	r3
 800bc52:	4603      	mov	r3, r0
 800bc54:	e000      	b.n	800bc58 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800bc56:	683b      	ldr	r3, [r7, #0]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3708      	adds	r7, #8
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	331c      	adds	r3, #28
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	4798      	blx	r3
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00a      	beq.n	800bc94 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	3368      	adds	r3, #104	; 0x68
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	4798      	blx	r3
 800bc8a:	eeb0 7a40 	vmov.f32	s14, s0
 800bc8e:	eef0 7a60 	vmov.f32	s15, s1
 800bc92:	e001      	b.n	800bc98 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800bc94:	ed97 7b00 	vldr	d7, [r7]
}
 800bc98:	eeb0 0a47 	vmov.f32	s0, s14
 800bc9c:	eef0 0a67 	vmov.f32	s1, s15
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b082      	sub	sp, #8
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	331c      	adds	r3, #28
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	4798      	blx	r3
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d007      	beq.n	800bcd2 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	3338      	adds	r3, #56	; 0x38
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	4798      	blx	r3
 800bcce:	4603      	mov	r3, r0
 800bcd0:	e000      	b.n	800bcd4 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800bcd2:	683b      	ldr	r3, [r7, #0]
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	460b      	mov	r3, r1
 800bce6:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	331c      	adds	r3, #28
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	4798      	blx	r3
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d007      	beq.n	800bd0a <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	3324      	adds	r3, #36	; 0x24
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	4798      	blx	r3
 800bd06:	4603      	mov	r3, r0
 800bd08:	e000      	b.n	800bd0c <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800bd0a:	78fb      	ldrb	r3, [r7, #3]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	331c      	adds	r3, #28
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	4798      	blx	r3
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d007      	beq.n	800bd40 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	332c      	adds	r3, #44	; 0x2c
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	4798      	blx	r3
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	e000      	b.n	800bd42 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800bd40:	683b      	ldr	r3, [r7, #0]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b082      	sub	sp, #8
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
 800bd52:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	331c      	adds	r3, #28
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	4798      	blx	r3
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d007      	beq.n	800bd76 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	3334      	adds	r3, #52	; 0x34
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	4798      	blx	r3
 800bd72:	4603      	mov	r3, r0
 800bd74:	e000      	b.n	800bd78 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800bd76:	683b      	ldr	r3, [r7, #0]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	331c      	adds	r3, #28
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	4798      	blx	r3
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d007      	beq.n	800bdac <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	3340      	adds	r3, #64	; 0x40
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	4798      	blx	r3
 800bda8:	4603      	mov	r3, r0
 800bdaa:	e000      	b.n	800bdae <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800bdac:	683b      	ldr	r3, [r7, #0]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3708      	adds	r7, #8
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800bdb6:	b590      	push	{r4, r7, lr}
 800bdb8:	b091      	sub	sp, #68	; 0x44
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3320      	adds	r3, #32
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f107 0208 	add.w	r2, r7, #8
 800bdca:	6879      	ldr	r1, [r7, #4]
 800bdcc:	4610      	mov	r0, r2
 800bdce:	4798      	blx	r3
 800bdd0:	f107 0308 	add.w	r3, r7, #8
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f011 fddd 	bl	801d994 <_ZNK14MockNamedValue15getLongIntValueEv>
 800bdda:	4604      	mov	r4, r0
 800bddc:	bf00      	nop
 800bdde:	f107 0308 	add.w	r3, r7, #8
 800bde2:	4618      	mov	r0, r3
 800bde4:	f011 fa84 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 800bde8:	4623      	mov	r3, r4
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3744      	adds	r7, #68	; 0x44
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd90      	pop	{r4, r7, pc}

0800bdf2 <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800bdf2:	b590      	push	{r4, r7, lr}
 800bdf4:	b091      	sub	sp, #68	; 0x44
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	3320      	adds	r3, #32
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f107 0208 	add.w	r2, r7, #8
 800be06:	6879      	ldr	r1, [r7, #4]
 800be08:	4610      	mov	r0, r2
 800be0a:	4798      	blx	r3
 800be0c:	f107 0308 	add.w	r3, r7, #8
 800be10:	4618      	mov	r0, r3
 800be12:	f011 fe21 	bl	801da58 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800be16:	4604      	mov	r4, r0
 800be18:	bf00      	nop
 800be1a:	f107 0308 	add.w	r3, r7, #8
 800be1e:	4618      	mov	r0, r3
 800be20:	f011 fa66 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 800be24:	4623      	mov	r3, r4
}
 800be26:	4618      	mov	r0, r3
 800be28:	3744      	adds	r7, #68	; 0x44
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd90      	pop	{r4, r7, pc}
	...

0800be30 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800be30:	b5b0      	push	{r4, r5, r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af02      	add	r7, sp, #8
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800be3a:	f008 f8ed 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 800be3e:	4604      	mov	r4, r0
 800be40:	6823      	ldr	r3, [r4, #0]
 800be42:	3368      	adds	r3, #104	; 0x68
 800be44:	681d      	ldr	r5, [r3, #0]
 800be46:	f008 f8f7 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800be4a:	4603      	mov	r3, r0
 800be4c:	9300      	str	r3, [sp, #0]
 800be4e:	f240 2345 	movw	r3, #581	; 0x245
 800be52:	4a06      	ldr	r2, [pc, #24]	; (800be6c <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800be54:	4906      	ldr	r1, [pc, #24]	; (800be70 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800be56:	4620      	mov	r0, r4
 800be58:	47a8      	blx	r5
    return cpputest_longlong(0);
 800be5a:	2100      	movs	r1, #0
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f7fe fd2f 	bl	800a8c0 <_ZN17cpputest_longlongC1Ei>
}
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bdb0      	pop	{r4, r5, r7, pc}
 800be6a:	bf00      	nop
 800be6c:	08023ec4 	.word	0x08023ec4
 800be70:	08023f08 	.word	0x08023f08

0800be74 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800be74:	b5b0      	push	{r4, r5, r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af02      	add	r7, sp, #8
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800be7e:	f008 f8cb 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 800be82:	4604      	mov	r4, r0
 800be84:	6823      	ldr	r3, [r4, #0]
 800be86:	3368      	adds	r3, #104	; 0x68
 800be88:	681d      	ldr	r5, [r3, #0]
 800be8a:	f008 f8d5 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800be8e:	4603      	mov	r3, r0
 800be90:	9300      	str	r3, [sp, #0]
 800be92:	f240 234b 	movw	r3, #587	; 0x24b
 800be96:	4a06      	ldr	r2, [pc, #24]	; (800beb0 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800be98:	4906      	ldr	r1, [pc, #24]	; (800beb4 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800be9a:	4620      	mov	r0, r4
 800be9c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800be9e:	2100      	movs	r1, #0
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f7fe fd19 	bl	800a8d8 <_ZN18cpputest_ulonglongC1Ei>
}
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bdb0      	pop	{r4, r5, r7, pc}
 800beae:	bf00      	nop
 800beb0:	08023ec4 	.word	0x08023ec4
 800beb4:	08023f28 	.word	0x08023f28

0800beb8 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800beb8:	b5b0      	push	{r4, r5, r7, lr}
 800beba:	b086      	sub	sp, #24
 800bebc:	af02      	add	r7, sp, #8
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	4639      	mov	r1, r7
 800bec4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800bec8:	f008 f8a6 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 800becc:	4604      	mov	r4, r0
 800bece:	6823      	ldr	r3, [r4, #0]
 800bed0:	3368      	adds	r3, #104	; 0x68
 800bed2:	681d      	ldr	r5, [r3, #0]
 800bed4:	f008 f8b0 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800bed8:	4603      	mov	r3, r0
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	f240 2351 	movw	r3, #593	; 0x251
 800bee0:	4a06      	ldr	r2, [pc, #24]	; (800befc <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800bee2:	4907      	ldr	r1, [pc, #28]	; (800bf00 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800bee4:	4620      	mov	r0, r4
 800bee6:	47a8      	blx	r5
    return defaultValue;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	461a      	mov	r2, r3
 800beec:	463b      	mov	r3, r7
 800beee:	cb03      	ldmia	r3!, {r0, r1}
 800bef0:	6010      	str	r0, [r2, #0]
 800bef2:	6051      	str	r1, [r2, #4]
}
 800bef4:	68f8      	ldr	r0, [r7, #12]
 800bef6:	3710      	adds	r7, #16
 800bef8:	46bd      	mov	sp, r7
 800befa:	bdb0      	pop	{r4, r5, r7, pc}
 800befc:	08023ec4 	.word	0x08023ec4
 800bf00:	08023f08 	.word	0x08023f08

0800bf04 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800bf04:	b5b0      	push	{r4, r5, r7, lr}
 800bf06:	b086      	sub	sp, #24
 800bf08:	af02      	add	r7, sp, #8
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	4639      	mov	r1, r7
 800bf10:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800bf14:	f008 f880 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 800bf18:	4604      	mov	r4, r0
 800bf1a:	6823      	ldr	r3, [r4, #0]
 800bf1c:	3368      	adds	r3, #104	; 0x68
 800bf1e:	681d      	ldr	r5, [r3, #0]
 800bf20:	f008 f88a 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800bf24:	4603      	mov	r3, r0
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	f240 2357 	movw	r3, #599	; 0x257
 800bf2c:	4a06      	ldr	r2, [pc, #24]	; (800bf48 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800bf2e:	4907      	ldr	r1, [pc, #28]	; (800bf4c <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800bf30:	4620      	mov	r0, r4
 800bf32:	47a8      	blx	r5
    return defaultValue;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	461a      	mov	r2, r3
 800bf38:	463b      	mov	r3, r7
 800bf3a:	cb03      	ldmia	r3!, {r0, r1}
 800bf3c:	6010      	str	r0, [r2, #0]
 800bf3e:	6051      	str	r1, [r2, #4]
}
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	3710      	adds	r7, #16
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bdb0      	pop	{r4, r5, r7, pc}
 800bf48:	08023ec4 	.word	0x08023ec4
 800bf4c:	08023f28 	.word	0x08023f28

0800bf50 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800bf50:	b590      	push	{r4, r7, lr}
 800bf52:	b091      	sub	sp, #68	; 0x44
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	3320      	adds	r3, #32
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f107 0208 	add.w	r2, r7, #8
 800bf64:	6879      	ldr	r1, [r7, #4]
 800bf66:	4610      	mov	r0, r2
 800bf68:	4798      	blx	r3
 800bf6a:	f107 0308 	add.w	r3, r7, #8
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f011 fea6 	bl	801dcc0 <_ZNK14MockNamedValue14getStringValueEv>
 800bf74:	4604      	mov	r4, r0
 800bf76:	bf00      	nop
 800bf78:	f107 0308 	add.w	r3, r7, #8
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f011 f9b7 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 800bf82:	4623      	mov	r3, r4
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3744      	adds	r7, #68	; 0x44
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd90      	pop	{r4, r7, pc}

0800bf8c <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	ed2d 8b02 	vpush	{d8}
 800bf92:	b090      	sub	sp, #64	; 0x40
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	3320      	adds	r3, #32
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f107 0208 	add.w	r2, r7, #8
 800bfa4:	6879      	ldr	r1, [r7, #4]
 800bfa6:	4610      	mov	r0, r2
 800bfa8:	4798      	blx	r3
 800bfaa:	f107 0308 	add.w	r3, r7, #8
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f011 fe2a 	bl	801dc08 <_ZNK14MockNamedValue14getDoubleValueEv>
 800bfb4:	eeb0 8a40 	vmov.f32	s16, s0
 800bfb8:	eef0 8a60 	vmov.f32	s17, s1
 800bfbc:	bf00      	nop
 800bfbe:	f107 0308 	add.w	r3, r7, #8
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f011 f994 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 800bfc8:	eeb0 7a48 	vmov.f32	s14, s16
 800bfcc:	eef0 7a68 	vmov.f32	s15, s17
}
 800bfd0:	eeb0 0a47 	vmov.f32	s0, s14
 800bfd4:	eef0 0a67 	vmov.f32	s1, s15
 800bfd8:	3740      	adds	r7, #64	; 0x40
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	ecbd 8b02 	vpop	{d8}
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b082      	sub	sp, #8
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
 800bfea:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	331c      	adds	r3, #28
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	4798      	blx	r3
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d007      	beq.n	800c00e <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	336c      	adds	r3, #108	; 0x6c
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	4798      	blx	r3
 800c00a:	4603      	mov	r3, r0
 800c00c:	e000      	b.n	800c010 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800c00e:	683b      	ldr	r3, [r7, #0]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3708      	adds	r7, #8
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	331c      	adds	r3, #28
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	4798      	blx	r3
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d007      	beq.n	800c044 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	3378      	adds	r3, #120	; 0x78
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	4798      	blx	r3
 800c040:	4603      	mov	r3, r0
 800c042:	e000      	b.n	800c046 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800c044:	683b      	ldr	r3, [r7, #0]
}
 800c046:	4618      	mov	r0, r3
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b082      	sub	sp, #8
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	331c      	adds	r3, #28
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	4798      	blx	r3
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d007      	beq.n	800c07a <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	3380      	adds	r3, #128	; 0x80
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	4798      	blx	r3
 800c076:	4603      	mov	r3, r0
 800c078:	e000      	b.n	800c07c <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800c07a:	683b      	ldr	r3, [r7, #0]
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800c084:	b590      	push	{r4, r7, lr}
 800c086:	b091      	sub	sp, #68	; 0x44
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	3320      	adds	r3, #32
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f107 0208 	add.w	r2, r7, #8
 800c098:	6879      	ldr	r1, [r7, #4]
 800c09a:	4610      	mov	r0, r2
 800c09c:	4798      	blx	r3
 800c09e:	f107 0308 	add.w	r3, r7, #8
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f011 fe34 	bl	801dd10 <_ZNK14MockNamedValue15getPointerValueEv>
 800c0a8:	4604      	mov	r4, r0
 800c0aa:	bf00      	nop
 800c0ac:	f107 0308 	add.w	r3, r7, #8
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f011 f91d 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 800c0b6:	4623      	mov	r3, r4
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3744      	adds	r7, #68	; 0x44
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd90      	pop	{r4, r7, pc}

0800c0c0 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800c0c0:	b590      	push	{r4, r7, lr}
 800c0c2:	b091      	sub	sp, #68	; 0x44
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	3320      	adds	r3, #32
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f107 0208 	add.w	r2, r7, #8
 800c0d4:	6879      	ldr	r1, [r7, #4]
 800c0d6:	4610      	mov	r0, r2
 800c0d8:	4798      	blx	r3
 800c0da:	f107 0308 	add.w	r3, r7, #8
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f011 fe3e 	bl	801dd60 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	bf00      	nop
 800c0e8:	f107 0308 	add.w	r3, r7, #8
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f011 f8ff 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 800c0f2:	4623      	mov	r3, r4
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3744      	adds	r7, #68	; 0x44
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd90      	pop	{r4, r7, pc}

0800c0fc <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800c0fc:	b590      	push	{r4, r7, lr}
 800c0fe:	b091      	sub	sp, #68	; 0x44
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	3320      	adds	r3, #32
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f107 0208 	add.w	r2, r7, #8
 800c110:	6879      	ldr	r1, [r7, #4]
 800c112:	4610      	mov	r0, r2
 800c114:	4798      	blx	r3
 800c116:	f107 0308 	add.w	r3, r7, #8
 800c11a:	4618      	mov	r0, r3
 800c11c:	f011 fe48 	bl	801ddb0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800c120:	4604      	mov	r4, r0
 800c122:	bf00      	nop
 800c124:	f107 0308 	add.w	r3, r7, #8
 800c128:	4618      	mov	r0, r3
 800c12a:	f011 f8e1 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 800c12e:	4623      	mov	r3, r4
}
 800c130:	4618      	mov	r0, r3
 800c132:	3744      	adds	r7, #68	; 0x44
 800c134:	46bd      	mov	sp, r7
 800c136:	bd90      	pop	{r4, r7, pc}

0800c138 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c144:	2b00      	cmp	r3, #0
 800c146:	d00a      	beq.n	800c15e <_ZN11MockSupport14hasReturnValueEv+0x26>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	3350      	adds	r3, #80	; 0x50
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4610      	mov	r0, r2
 800c158:	4798      	blx	r3
 800c15a:	4603      	mov	r3, r0
 800c15c:	e000      	b.n	800c160 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800c15e:	2300      	movs	r3, #0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <_Z41__static_initialization_and_destruction_0ii>:
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d115      	bne.n	800c1a4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c17e:	4293      	cmp	r3, r2
 800c180:	d110      	bne.n	800c1a4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800c182:	f107 0308 	add.w	r3, r7, #8
 800c186:	490f      	ldr	r1, [pc, #60]	; (800c1c4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800c188:	4618      	mov	r0, r3
 800c18a:	f000 fb62 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800c18e:	f107 0308 	add.w	r3, r7, #8
 800c192:	4619      	mov	r1, r3
 800c194:	480c      	ldr	r0, [pc, #48]	; (800c1c8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c196:	f7fe fc6d 	bl	800aa74 <_ZN11MockSupportC1ERK12SimpleString>
 800c19a:	f107 0308 	add.w	r3, r7, #8
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f000 ff0f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d107      	bne.n	800c1ba <_Z41__static_initialization_and_destruction_0ii+0x52>
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d102      	bne.n	800c1ba <_Z41__static_initialization_and_destruction_0ii+0x52>
 800c1b4:	4804      	ldr	r0, [pc, #16]	; (800c1c8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c1b6:	f7fe fca7 	bl	800ab08 <_ZN11MockSupportD1Ev>
}
 800c1ba:	bf00      	nop
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	08023ebc 	.word	0x08023ebc
 800c1c8:	20000814 	.word	0x20000814

0800c1cc <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	4a05      	ldr	r2, [pc, #20]	; (800c1ec <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	601a      	str	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fe fbbb 	bl	800a958 <_ZN11MockFailureD1Ev>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3708      	adds	r7, #8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	08027ca4 	.word	0x08027ca4

0800c1f0 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7ff ffe7 	bl	800c1cc <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800c1fe:	2134      	movs	r1, #52	; 0x34
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f7fd ff77 	bl	800a0f4 <_ZdlPvj>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4618      	mov	r0, r3
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	4a05      	ldr	r2, [pc, #20]	; (800c230 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	601a      	str	r2, [r3, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4618      	mov	r0, r3
 800c222:	f7fe fb99 	bl	800a958 <_ZN11MockFailureD1Ev>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4618      	mov	r0, r3
 800c22a:	3708      	adds	r7, #8
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	08027c78 	.word	0x08027c78

0800c234 <_ZN20MockCallOrderFailureD0Ev>:
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f7ff ffe7 	bl	800c210 <_ZN20MockCallOrderFailureD1Ev>
 800c242:	2134      	movs	r1, #52	; 0x34
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f7fd ff55 	bl	800a0f4 <_ZdlPvj>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4618      	mov	r0, r3
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800c254:	b580      	push	{r7, lr}
 800c256:	af00      	add	r7, sp, #0
 800c258:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c25c:	2001      	movs	r0, #1
 800c25e:	f7ff ff83 	bl	800c168 <_Z41__static_initialization_and_destruction_0ii>
 800c262:	bd80      	pop	{r7, pc}

0800c264 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800c264:	b580      	push	{r7, lr}
 800c266:	af00      	add	r7, sp, #0
 800c268:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c26c:	2000      	movs	r0, #0
 800c26e:	f7ff ff7b 	bl	800c168 <_Z41__static_initialization_and_destruction_0ii>
 800c272:	bd80      	pop	{r7, pc}

0800c274 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800c27c:	4b05      	ldr	r3, [pc, #20]	; (800c294 <_ZN11SimpleMutexC1Ev+0x20>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4798      	blx	r3
 800c282:	4602      	mov	r2, r0
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	601a      	str	r2, [r3, #0]
}
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	4618      	mov	r0, r3
 800c28c:	3708      	adds	r7, #8
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	200000f0 	.word	0x200000f0

0800c298 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800c2a0:	4b05      	ldr	r3, [pc, #20]	; (800c2b8 <_ZN11SimpleMutexD1Ev+0x20>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	6812      	ldr	r2, [r2, #0]
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	4798      	blx	r3
}
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	200000fc 	.word	0x200000fc

0800c2bc <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800c2c4:	4b04      	ldr	r3, [pc, #16]	; (800c2d8 <_ZN11SimpleMutex4LockEv+0x1c>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	6812      	ldr	r2, [r2, #0]
 800c2cc:	4610      	mov	r0, r2
 800c2ce:	4798      	blx	r3
}
 800c2d0:	bf00      	nop
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}
 800c2d8:	200000f4 	.word	0x200000f4

0800c2dc <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800c2e4:	4b04      	ldr	r3, [pc, #16]	; (800c2f8 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	6812      	ldr	r2, [r2, #0]
 800c2ec:	4610      	mov	r0, r2
 800c2ee:	4798      	blx	r3
}
 800c2f0:	bf00      	nop
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	200000f8 	.word	0x200000f8

0800c2fc <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	683a      	ldr	r2, [r7, #0]
 800c30a:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4618      	mov	r0, r3
 800c312:	f7ff ffd3 	bl	800c2bc <_ZN11SimpleMutex4LockEv>
}
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4618      	mov	r0, r3
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7ff ffd5 	bl	800c2dc <_ZN11SimpleMutex6UnlockEv>
}
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4618      	mov	r0, r3
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800c340:	4b05      	ldr	r3, [pc, #20]	; (800c358 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d103      	bne.n	800c350 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800c348:	f003 fd7a 	bl	800fe40 <_Z24defaultNewArrayAllocatorv>
 800c34c:	4603      	mov	r3, r0
 800c34e:	e001      	b.n	800c354 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800c350:	4b01      	ldr	r3, [pc, #4]	; (800c358 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800c352:	681b      	ldr	r3, [r3, #0]
}
 800c354:	4618      	mov	r0, r3
 800c356:	bd80      	pop	{r7, pc}
 800c358:	2000085c 	.word	0x2000085c

0800c35c <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800c35c:	b590      	push	{r4, r7, lr}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800c368:	f7ff ffe8 	bl	800c33c <_ZN12SimpleString18getStringAllocatorEv>
 800c36c:	6803      	ldr	r3, [r0, #0]
 800c36e:	3308      	adds	r3, #8
 800c370:	681c      	ldr	r4, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	68ba      	ldr	r2, [r7, #8]
 800c376:	68f9      	ldr	r1, [r7, #12]
 800c378:	47a0      	blx	r4
 800c37a:	4603      	mov	r3, r0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3714      	adds	r7, #20
 800c380:	46bd      	mov	sp, r7
 800c382:	bd90      	pop	{r4, r7, pc}

0800c384 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800c384:	b590      	push	{r4, r7, lr}
 800c386:	b087      	sub	sp, #28
 800c388:	af02      	add	r7, sp, #8
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
 800c390:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800c392:	f7ff ffd3 	bl	800c33c <_ZN12SimpleString18getStringAllocatorEv>
 800c396:	6803      	ldr	r3, [r0, #0]
 800c398:	330c      	adds	r3, #12
 800c39a:	681c      	ldr	r4, [r3, #0]
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	9300      	str	r3, [sp, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	68ba      	ldr	r2, [r7, #8]
 800c3a4:	68f9      	ldr	r1, [r7, #12]
 800c3a6:	47a0      	blx	r4
}
 800c3a8:	bf00      	nop
 800c3aa:	3714      	adds	r7, #20
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd90      	pop	{r4, r7, pc}

0800c3b0 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800c3b8:	2284      	movs	r2, #132	; 0x84
 800c3ba:	4906      	ldr	r1, [pc, #24]	; (800c3d4 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800c3bc:	2001      	movs	r0, #1
 800c3be:	f7ff ffcd 	bl	800c35c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c3c2:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	701a      	strb	r2, [r3, #0]
    return empty;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3710      	adds	r7, #16
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	08023f54 	.word	0x08023f54

0800c3d8 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f001 f809 	bl	800d3fc <_ZN12SimpleString7isSpaceEc>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d003      	beq.n	800c3f8 <_ZN12SimpleString4AtoUEPKc+0x20>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	607b      	str	r3, [r7, #4]
 800c3f6:	e7f3      	b.n	800c3e0 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	4618      	mov	r0, r3
 800c402:	f000 ffe7 	bl	800d3d4 <_ZN12SimpleString7isDigitEc>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d005      	beq.n	800c418 <_ZN12SimpleString4AtoUEPKc+0x40>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	2b2f      	cmp	r3, #47	; 0x2f
 800c412:	d901      	bls.n	800c418 <_ZN12SimpleString4AtoUEPKc+0x40>
 800c414:	2301      	movs	r3, #1
 800c416:	e000      	b.n	800c41a <_ZN12SimpleString4AtoUEPKc+0x42>
 800c418:	2300      	movs	r3, #0
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d010      	beq.n	800c440 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	4613      	mov	r3, r2
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	4413      	add	r3, r2
 800c426:	005b      	lsls	r3, r3, #1
 800c428:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	461a      	mov	r2, r3
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	4413      	add	r3, r2
 800c434:	3b30      	subs	r3, #48	; 0x30
 800c436:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	3301      	adds	r3, #1
 800c43c:	607b      	str	r3, [r7, #4]
 800c43e:	e7dd      	b.n	800c3fc <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800c440:	68fb      	ldr	r3, [r7, #12]
}
 800c442:	4618      	mov	r0, r3
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b084      	sub	sp, #16
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	4618      	mov	r0, r3
 800c458:	f000 ffd0 	bl	800d3fc <_ZN12SimpleString7isSpaceEc>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d003      	beq.n	800c46a <_ZN12SimpleString4AtoIEPKc+0x20>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	3301      	adds	r3, #1
 800c466:	607b      	str	r3, [r7, #4]
 800c468:	e7f3      	b.n	800c452 <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800c470:	7afb      	ldrb	r3, [r7, #11]
 800c472:	2b2d      	cmp	r3, #45	; 0x2d
 800c474:	d002      	beq.n	800c47c <_ZN12SimpleString4AtoIEPKc+0x32>
 800c476:	7afb      	ldrb	r3, [r7, #11]
 800c478:	2b2b      	cmp	r3, #43	; 0x2b
 800c47a:	d102      	bne.n	800c482 <_ZN12SimpleString4AtoIEPKc+0x38>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	3301      	adds	r3, #1
 800c480:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800c482:	2300      	movs	r3, #0
 800c484:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f000 ffa2 	bl	800d3d4 <_ZN12SimpleString7isDigitEc>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00f      	beq.n	800c4b6 <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	4613      	mov	r3, r2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	4413      	add	r3, r2
 800c49e:	005b      	lsls	r3, r3, #1
 800c4a0:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	3b30      	subs	r3, #48	; 0x30
 800c4a8:	68fa      	ldr	r2, [r7, #12]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	607b      	str	r3, [r7, #4]
 800c4b4:	e7e7      	b.n	800c486 <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800c4b6:	7afb      	ldrb	r3, [r7, #11]
 800c4b8:	2b2d      	cmp	r3, #45	; 0x2d
 800c4ba:	d102      	bne.n	800c4c2 <_ZN12SimpleString4AtoIEPKc+0x78>
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	425b      	negs	r3, r3
 800c4c0:	e000      	b.n	800c4c4 <_ZN12SimpleString4AtoIEPKc+0x7a>
 800c4c2:	68fb      	ldr	r3, [r7, #12]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3710      	adds	r7, #16
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d00c      	beq.n	800c4f8 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	781a      	ldrb	r2, [r3, #0]
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d106      	bne.n	800c4f8 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	607b      	str	r3, [r7, #4]
       ++s2;
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800c4f6:	e7ee      	b.n	800c4d6 <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	1ad3      	subs	r3, r2, r3
}
 800c504:	4618      	mov	r0, r3
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800c518:	f04f 33ff 	mov.w	r3, #4294967295
 800c51c:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	3301      	adds	r3, #1
 800c522:	60fb      	str	r3, [r7, #12]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	1c5a      	adds	r2, r3, #1
 800c528:	607a      	str	r2, [r7, #4]
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	bf14      	ite	ne
 800c530:	2301      	movne	r3, #1
 800c532:	2300      	moveq	r3, #0
 800c534:	b2db      	uxtb	r3, r3
 800c536:	2b00      	cmp	r3, #0
 800c538:	d000      	beq.n	800c53c <_ZN12SimpleString6StrLenEPKc+0x2c>
 800c53a:	e7f0      	b.n	800c51e <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800c53c:	68fb      	ldr	r3, [r7, #12]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr

0800c54a <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800c54a:	b480      	push	{r7}
 800c54c:	b085      	sub	sp, #20
 800c54e:	af00      	add	r7, sp, #0
 800c550:	60f8      	str	r0, [r7, #12]
 800c552:	60b9      	str	r1, [r7, #8]
 800c554:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d013      	beq.n	800c584 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00f      	beq.n	800c584 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	781a      	ldrb	r2, [r3, #0]
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d109      	bne.n	800c584 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	3b01      	subs	r3, #1
 800c574:	607b      	str	r3, [r7, #4]
        ++s1;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	3301      	adds	r3, #1
 800c57a:	60fb      	str	r3, [r7, #12]
        ++s2;
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	3301      	adds	r3, #1
 800c580:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800c582:	e7e8      	b.n	800c556 <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d006      	beq.n	800c598 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	461a      	mov	r2, r3
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	e000      	b.n	800c59a <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800c598:	2300      	movs	r3, #0
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3714      	adds	r7, #20
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr

0800c5a6 <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800c5a6:	b480      	push	{r7}
 800c5a8:	b087      	sub	sp, #28
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	60f8      	str	r0, [r7, #12]
 800c5ae:	60b9      	str	r1, [r7, #8]
 800c5b0:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d002      	beq.n	800c5c2 <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d101      	bne.n	800c5c6 <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	e01e      	b.n	800c604 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	781a      	ldrb	r2, [r3, #0]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	607b      	str	r3, [r7, #4]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d005      	beq.n	800c5e6 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d001      	beq.n	800c5e6 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e000      	b.n	800c5e8 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d00a      	beq.n	800c602 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	60bb      	str	r3, [r7, #8]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	60fb      	str	r3, [r7, #12]
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	781a      	ldrb	r2, [r3, #0]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800c600:	e7e5      	b.n	800c5ce <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800c602:	697b      	ldr	r3, [r7, #20]
}
 800c604:	4618      	mov	r0, r3
 800c606:	371c      	adds	r7, #28
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d101      	bne.n	800c626 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	e01b      	b.n	800c65e <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d016      	beq.n	800c65c <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800c62e:	6838      	ldr	r0, [r7, #0]
 800c630:	f7ff ff6e 	bl	800c510 <_ZN12SimpleString6StrLenEPKc>
 800c634:	4603      	mov	r3, r0
 800c636:	461a      	mov	r2, r3
 800c638:	6839      	ldr	r1, [r7, #0]
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f7ff ff85 	bl	800c54a <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	bf0c      	ite	eq
 800c646:	2301      	moveq	r3, #1
 800c648:	2300      	movne	r3, #0
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d001      	beq.n	800c654 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	e004      	b.n	800c65e <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	3301      	adds	r3, #1
 800c658:	607b      	str	r3, [r7, #4]
 800c65a:	e7e4      	b.n	800c626 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3708      	adds	r7, #8
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b082      	sub	sp, #8
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	4603      	mov	r3, r0
 800c66e:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800c670:	79fb      	ldrb	r3, [r7, #7]
 800c672:	4618      	mov	r0, r3
 800c674:	f000 fed9 	bl	800d42a <_ZN12SimpleString7isUpperEc>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d003      	beq.n	800c686 <_ZN12SimpleString7ToLowerEc+0x20>
 800c67e:	79fb      	ldrb	r3, [r7, #7]
 800c680:	3320      	adds	r3, #32
 800c682:	b2db      	uxtb	r3, r3
 800c684:	e000      	b.n	800c688 <_ZN12SimpleString7ToLowerEc+0x22>
 800c686:	79fb      	ldrb	r3, [r7, #7]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800c690:	b480      	push	{r7}
 800c692:	b087      	sub	sp, #28
 800c694:	af00      	add	r7, sp, #0
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	613b      	str	r3, [r7, #16]

    while (n--)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	1e5a      	subs	r2, r3, #1
 800c6a8:	607a      	str	r2, [r7, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	bf14      	ite	ne
 800c6ae:	2301      	movne	r3, #1
 800c6b0:	2300      	moveq	r3, #0
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d013      	beq.n	800c6e0 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	781a      	ldrb	r2, [r3, #0]
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d006      	beq.n	800c6d2 <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	1ad3      	subs	r3, r2, r3
 800c6d0:	e007      	b.n	800c6e2 <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	617b      	str	r3, [r7, #20]
            ++p2;
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	613b      	str	r3, [r7, #16]
    while (n--)
 800c6de:	e7e1      	b.n	800c6a4 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	371c      	adds	r7, #28
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
	...

0800c6f0 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00d      	beq.n	800c71c <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6818      	ldr	r0, [r3, #0]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6859      	ldr	r1, [r3, #4]
 800c708:	23ee      	movs	r3, #238	; 0xee
 800c70a:	4a06      	ldr	r2, [pc, #24]	; (800c724 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800c70c:	f7ff fe3a 	bl	800c384 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2200      	movs	r2, #0
 800c71a:	605a      	str	r2, [r3, #4]
    }
}
 800c71c:	bf00      	nop
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	08023f54 	.word	0x08023f54

0800c728 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f7ff ffdd 	bl	800c6f0 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2201      	movs	r2, #1
 800c73a:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f7ff fe37 	bl	800c3b0 <_ZNK12SimpleString14getEmptyStringEv>
 800c742:	4602      	mov	r2, r0
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	601a      	str	r2, [r3, #0]
}
 800c748:	bf00      	nop
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800c75c:	68f8      	ldr	r0, [r7, #12]
 800c75e:	f7ff ffc7 	bl	800c6f0 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	4619      	mov	r1, r3
 800c76e:	68b8      	ldr	r0, [r7, #8]
 800c770:	f000 fe12 	bl	800d398 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800c774:	4602      	mov	r2, r0
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	601a      	str	r2, [r3, #0]
}
 800c77a:	bf00      	nop
 800c77c:	3710      	adds	r7, #16
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
	...

0800c784 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b082      	sub	sp, #8
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f7ff ffae 	bl	800c6f0 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	f240 1209 	movw	r2, #265	; 0x109
 800c7a2:	4907      	ldr	r1, [pc, #28]	; (800c7c0 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7ff fdd9 	bl	800c35c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	701a      	strb	r2, [r3, #0]
}
 800c7b8:	bf00      	nop
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	08023f54 	.word	0x08023f54

0800c7c4 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800c7d0:	68f8      	ldr	r0, [r7, #12]
 800c7d2:	f7ff ff8d 	bl	800c6f0 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	601a      	str	r2, [r3, #0]
}
 800c7e2:	bf00      	nop
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800c7ea:	b590      	push	{r4, r7, lr}
 800c7ec:	b083      	sub	sp, #12
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	681c      	ldr	r4, [r3, #0]
 800c7f8:	6838      	ldr	r0, [r7, #0]
 800c7fa:	f000 fbc1 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800c7fe:	4603      	mov	r3, r0
 800c800:	3301      	adds	r3, #1
 800c802:	461a      	mov	r2, r3
 800c804:	4621      	mov	r1, r4
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f7ff ffa2 	bl	800c750 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	bd90      	pop	{r4, r7, pc}

0800c814 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800c81e:	6838      	ldr	r0, [r7, #0]
 800c820:	f7ff fe76 	bl	800c510 <_ZN12SimpleString6StrLenEPKc>
 800c824:	4603      	mov	r3, r0
 800c826:	3301      	adds	r3, #1
 800c828:	461a      	mov	r2, r3
 800c82a:	6839      	ldr	r1, [r7, #0]
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f7ff ff8f 	bl	800c750 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800c832:	bf00      	nop
 800c834:	3708      	adds	r7, #8
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800c83a:	b480      	push	{r7}
 800c83c:	b083      	sub	sp, #12
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
    return buffer_;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
}
 800c846:	4618      	mov	r0, r3
 800c848:	370c      	adds	r7, #12
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr

0800c852 <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800c852:	b580      	push	{r7, lr}
 800c854:	b082      	sub	sp, #8
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
 800c85a:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	601a      	str	r2, [r3, #0]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d103      	bne.n	800c876 <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f7ff ff5a 	bl	800c728 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800c874:	e003      	b.n	800c87e <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800c876:	6839      	ldr	r1, [r7, #0]
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f7ff ffcb 	bl	800c814 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4618      	mov	r0, r3
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800c888:	b580      	push	{r7, lr}
 800c88a:	b088      	sub	sp, #32
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2200      	movs	r2, #0
 800c898:	601a      	str	r2, [r3, #0]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2200      	movs	r2, #0
 800c89e:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800c8a0:	68b8      	ldr	r0, [r7, #8]
 800c8a2:	f7ff fe35 	bl	800c510 <_ZN12SimpleString6StrLenEPKc>
 800c8a6:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	fb02 f303 	mul.w	r3, r2, r3
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f7ff ff65 	bl	800c784 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	61bb      	str	r3, [r7, #24]
 800c8c4:	69ba      	ldr	r2, [r7, #24]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d20e      	bcs.n	800c8ea <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	68b9      	ldr	r1, [r7, #8]
 800c8d4:	69f8      	ldr	r0, [r7, #28]
 800c8d6:	f7ff fe66 	bl	800c5a6 <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800c8da:	69fa      	ldr	r2, [r7, #28]
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	4413      	add	r3, r2
 800c8e0:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	61bb      	str	r3, [r7, #24]
 800c8e8:	e7ec      	b.n	800c8c4 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	701a      	strb	r2, [r3, #0]
}
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3720      	adds	r7, #32
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b082      	sub	sp, #8
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2200      	movs	r2, #0
 800c908:	601a      	str	r2, [r3, #0]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2200      	movs	r2, #0
 800c90e:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800c910:	6838      	ldr	r0, [r7, #0]
 800c912:	f7ff ff92 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800c916:	4603      	mov	r3, r0
 800c918:	4619      	mov	r1, r3
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f7ff ff7a 	bl	800c814 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	4618      	mov	r0, r3
 800c924:	3708      	adds	r7, #8
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b082      	sub	sp, #8
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d003      	beq.n	800c944 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800c93c:	6839      	ldr	r1, [r7, #0]
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f7ff ff53 	bl	800c7ea <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800c944:	687b      	ldr	r3, [r7, #4]
}
 800c946:	4618      	mov	r0, r3
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800c94e:	b590      	push	{r4, r7, lr}
 800c950:	b083      	sub	sp, #12
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f7ff ff6e 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800c95e:	4604      	mov	r4, r0
 800c960:	6838      	ldr	r0, [r7, #0]
 800c962:	f7ff ff6a 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800c966:	4603      	mov	r3, r0
 800c968:	4619      	mov	r1, r3
 800c96a:	4620      	mov	r0, r4
 800c96c:	f7ff fe50 	bl	800c610 <_ZN12SimpleString6StrStrEPKcS1_>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	bf14      	ite	ne
 800c976:	2301      	movne	r3, #1
 800c978:	2300      	moveq	r3, #0
 800c97a:	b2db      	uxtb	r3, r3
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	bd90      	pop	{r4, r7, pc}

0800c984 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800c984:	b590      	push	{r4, r7, lr}
 800c986:	b087      	sub	sp, #28
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800c98e:	f107 0308 	add.w	r3, r7, #8
 800c992:	6879      	ldr	r1, [r7, #4]
 800c994:	4618      	mov	r0, r3
 800c996:	f000 fabb 	bl	800cf10 <_ZNK12SimpleString9lowerCaseEv>
 800c99a:	f107 0310 	add.w	r3, r7, #16
 800c99e:	6839      	ldr	r1, [r7, #0]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f000 fab5 	bl	800cf10 <_ZNK12SimpleString9lowerCaseEv>
 800c9a6:	f107 0210 	add.w	r2, r7, #16
 800c9aa:	f107 0308 	add.w	r3, r7, #8
 800c9ae:	4611      	mov	r1, r2
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7ff ffcc 	bl	800c94e <_ZNK12SimpleString8containsERKS_>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	461c      	mov	r4, r3
 800c9ba:	bf00      	nop
 800c9bc:	f107 0310 	add.w	r3, r7, #16
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f000 fafe 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800c9c6:	f107 0308 	add.w	r3, r7, #8
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f000 faf9 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800c9d0:	4623      	mov	r3, r4
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	371c      	adds	r7, #28
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd90      	pop	{r4, r7, pc}

0800c9da <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800c9da:	b590      	push	{r4, r7, lr}
 800c9dc:	b083      	sub	sp, #12
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
 800c9e2:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800c9e4:	6838      	ldr	r0, [r7, #0]
 800c9e6:	f000 facb 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	bf0c      	ite	eq
 800c9f0:	2301      	moveq	r3, #1
 800c9f2:	2300      	movne	r3, #0
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d001      	beq.n	800c9fe <_ZNK12SimpleString10startsWithERKS_+0x24>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e022      	b.n	800ca44 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 fabe 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	bf0c      	ite	eq
 800ca0a:	2301      	moveq	r3, #1
 800ca0c:	2300      	movne	r3, #0
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d001      	beq.n	800ca18 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800ca14:	2300      	movs	r3, #0
 800ca16:	e015      	b.n	800ca44 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f7ff ff0e 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800ca1e:	4604      	mov	r4, r0
 800ca20:	6838      	ldr	r0, [r7, #0]
 800ca22:	f7ff ff0a 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800ca26:	4603      	mov	r3, r0
 800ca28:	4619      	mov	r1, r3
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f7ff fdf0 	bl	800c610 <_ZN12SimpleString6StrStrEPKcS1_>
 800ca30:	4604      	mov	r4, r0
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f7ff ff01 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	429c      	cmp	r4, r3
 800ca3c:	bf0c      	ite	eq
 800ca3e:	2301      	moveq	r3, #1
 800ca40:	2300      	movne	r3, #0
 800ca42:	b2db      	uxtb	r3, r3
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	370c      	adds	r7, #12
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd90      	pop	{r4, r7, pc}

0800ca4c <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800ca4c:	b590      	push	{r4, r7, lr}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 fa92 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800ca5c:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800ca5e:	6838      	ldr	r0, [r7, #0]
 800ca60:	f000 fa8e 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800ca64:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d101      	bne.n	800ca70 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	e020      	b.n	800cab2 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d101      	bne.n	800ca7a <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800ca76:	2300      	movs	r3, #0
 800ca78:	e01b      	b.n	800cab2 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800ca7a:	68fa      	ldr	r2, [r7, #12]
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d201      	bcs.n	800ca86 <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800ca82:	2300      	movs	r3, #0
 800ca84:	e015      	b.n	800cab2 <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f7ff fed7 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800ca8c:	4601      	mov	r1, r0
 800ca8e:	68fa      	ldr	r2, [r7, #12]
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	1ad3      	subs	r3, r2, r3
 800ca94:	18cc      	adds	r4, r1, r3
 800ca96:	6838      	ldr	r0, [r7, #0]
 800ca98:	f7ff fecf 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	4619      	mov	r1, r3
 800caa0:	4620      	mov	r0, r4
 800caa2:	f7ff fd13 	bl	800c4cc <_ZN12SimpleString6StrCmpEPKcS1_>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	bf0c      	ite	eq
 800caac:	2301      	moveq	r3, #1
 800caae:	2300      	movne	r3, #0
 800cab0:	b2db      	uxtb	r3, r3
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3714      	adds	r7, #20
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd90      	pop	{r4, r7, pc}

0800caba <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b086      	sub	sp, #24
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
 800cac2:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800cac4:	2300      	movs	r3, #0
 800cac6:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f7ff feb6 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800cace:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800cad0:	2300      	movs	r3, #0
 800cad2:	60fb      	str	r3, [r7, #12]
    if (*str){
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d008      	beq.n	800caee <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800cadc:	6838      	ldr	r0, [r7, #0]
 800cade:	f7ff feac 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800cae2:	4603      	mov	r3, r0
 800cae4:	4619      	mov	r1, r3
 800cae6:	6938      	ldr	r0, [r7, #16]
 800cae8:	f7ff fd92 	bl	800c610 <_ZN12SimpleString6StrStrEPKcS1_>
 800caec:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d014      	beq.n	800cb20 <_ZNK12SimpleString5countERKS_+0x66>
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d011      	beq.n	800cb20 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	613b      	str	r3, [r7, #16]
        str++;
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	3301      	adds	r3, #1
 800cb04:	613b      	str	r3, [r7, #16]
        num++;
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800cb0c:	6838      	ldr	r0, [r7, #0]
 800cb0e:	f7ff fe94 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800cb12:	4603      	mov	r3, r0
 800cb14:	4619      	mov	r1, r3
 800cb16:	6938      	ldr	r0, [r7, #16]
 800cb18:	f7ff fd7a 	bl	800c610 <_ZN12SimpleString6StrStrEPKcS1_>
 800cb1c:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800cb1e:	e7e6      	b.n	800caee <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800cb20:	697b      	ldr	r3, [r7, #20]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3718      	adds	r7, #24
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800cb2a:	b590      	push	{r4, r7, lr}
 800cb2c:	b091      	sub	sp, #68	; 0x44
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	60f8      	str	r0, [r7, #12]
 800cb32:	60b9      	str	r1, [r7, #8]
 800cb34:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800cb36:	68b9      	ldr	r1, [r7, #8]
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f7ff ffbe 	bl	800caba <_ZNK12SimpleString5countERKS_>
 800cb3e:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800cb40:	68b9      	ldr	r1, [r7, #8]
 800cb42:	68f8      	ldr	r0, [r7, #12]
 800cb44:	f7ff ff82 	bl	800ca4c <_ZNK12SimpleString8endsWithERKS_>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d001      	beq.n	800cb52 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800cb4e:	2300      	movs	r3, #0
 800cb50:	e000      	b.n	800cb54 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800cb52:	2301      	movs	r3, #1
 800cb54:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800cb56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5a:	4413      	add	r3, r2
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f001 f95c 	bl	800de1c <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f7ff fe68 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800cb6a:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d235      	bcs.n	800cbe4 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800cb78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800cb7c:	68b8      	ldr	r0, [r7, #8]
 800cb7e:	f7ff fe5c 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800cb82:	4603      	mov	r3, r0
 800cb84:	4619      	mov	r1, r3
 800cb86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cb88:	f7ff fd42 	bl	800c610 <_ZN12SimpleString6StrStrEPKcS1_>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	3301      	adds	r3, #1
 800cb90:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800cb92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f001 f9db 	bl	800df50 <_ZN22SimpleStringCollectionixEj>
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	f107 031c 	add.w	r3, r7, #28
 800cba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7ff fe55 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800cba8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbac:	1ad3      	subs	r3, r2, r3
 800cbae:	f107 0014 	add.w	r0, r7, #20
 800cbb2:	f107 011c 	add.w	r1, r7, #28
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	f000 fb0c 	bl	800d1d4 <_ZNK12SimpleString9subStringEjj>
 800cbbc:	f107 0314 	add.w	r3, r7, #20
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	f7ff feb1 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800cbc8:	f107 0314 	add.w	r3, r7, #20
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f000 f9f8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800cbd2:	f107 031c 	add.w	r3, r7, #28
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 f9f3 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800cbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbde:	3301      	adds	r3, #1
 800cbe0:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbe2:	e7c5      	b.n	800cb70 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800cbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d015      	beq.n	800cc16 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800cbea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f001 f9af 	bl	800df50 <_ZN22SimpleStringCollectionixEj>
 800cbf2:	4604      	mov	r4, r0
 800cbf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7ff fe29 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800cc00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc04:	4619      	mov	r1, r3
 800cc06:	4620      	mov	r0, r4
 800cc08:	f7ff fe8f 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800cc0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc10:	4618      	mov	r0, r3
 800cc12:	f000 f9d6 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    }
}
 800cc16:	bf00      	nop
 800cc18:	3744      	adds	r7, #68	; 0x44
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd90      	pop	{r4, r7, pc}

0800cc1e <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b084      	sub	sp, #16
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	460b      	mov	r3, r1
 800cc28:	70fb      	strb	r3, [r7, #3]
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 f9a6 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800cc34:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800cc36:	2300      	movs	r3, #0
 800cc38:	60fb      	str	r3, [r7, #12]
 800cc3a:	68fa      	ldr	r2, [r7, #12]
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d218      	bcs.n	800cc74 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7ff fdf9 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	78fa      	ldrb	r2, [r7, #3]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	bf0c      	ite	eq
 800cc56:	2301      	moveq	r3, #1
 800cc58:	2300      	movne	r3, #0
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d005      	beq.n	800cc6c <_ZN12SimpleString7replaceEcc+0x4e>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	4413      	add	r3, r2
 800cc68:	78ba      	ldrb	r2, [r7, #2]
 800cc6a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	3301      	adds	r3, #1
 800cc70:	60fb      	str	r3, [r7, #12]
 800cc72:	e7e2      	b.n	800cc3a <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800cc74:	bf00      	nop
 800cc76:	3710      	adds	r7, #16
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b08e      	sub	sp, #56	; 0x38
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800cc88:	f107 0310 	add.w	r3, r7, #16
 800cc8c:	68b9      	ldr	r1, [r7, #8]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7ff fddf 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800cc94:	f107 0310 	add.w	r3, r7, #16
 800cc98:	4619      	mov	r1, r3
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f7ff ff0d 	bl	800caba <_ZNK12SimpleString5countERKS_>
 800cca0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cca2:	f107 0310 	add.w	r3, r7, #16
 800cca6:	4618      	mov	r0, r3
 800cca8:	f000 f98b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800ccac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d071      	beq.n	800cd96 <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800ccb2:	68f8      	ldr	r0, [r7, #12]
 800ccb4:	f000 f964 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800ccb8:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800ccba:	68b8      	ldr	r0, [r7, #8]
 800ccbc:	f7ff fc28 	bl	800c510 <_ZN12SimpleString6StrLenEPKc>
 800ccc0:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7ff fc24 	bl	800c510 <_ZN12SimpleString6StrLenEPKc>
 800ccc8:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800ccca:	6a3b      	ldr	r3, [r7, #32]
 800cccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccce:	fb02 f203 	mul.w	r2, r2, r3
 800ccd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd4:	441a      	add	r2, r3
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ccda:	fb01 f303 	mul.w	r3, r1, r3
 800ccde:	1ad3      	subs	r3, r2, r3
 800cce0:	3301      	adds	r3, #1
 800cce2:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d951      	bls.n	800cd8e <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800ccea:	f240 129d 	movw	r2, #413	; 0x19d
 800ccee:	492c      	ldr	r1, [pc, #176]	; (800cda0 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800ccf0:	69f8      	ldr	r0, [r7, #28]
 800ccf2:	f7ff fb33 	bl	800c35c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800ccf6:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	637b      	str	r3, [r7, #52]	; 0x34
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	633b      	str	r3, [r7, #48]	; 0x30
 800cd00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d236      	bcs.n	800cd76 <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f7ff fd96 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd12:	4413      	add	r3, r2
 800cd14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd16:	68b9      	ldr	r1, [r7, #8]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7ff fc16 	bl	800c54a <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	bf0c      	ite	eq
 800cd24:	2301      	moveq	r3, #1
 800cd26:	2300      	movne	r3, #0
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d011      	beq.n	800cd52 <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800cd2e:	69ba      	ldr	r2, [r7, #24]
 800cd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd32:	18d0      	adds	r0, r2, r3
 800cd34:	6a3b      	ldr	r3, [r7, #32]
 800cd36:	3301      	adds	r3, #1
 800cd38:	461a      	mov	r2, r3
 800cd3a:	6879      	ldr	r1, [r7, #4]
 800cd3c:	f7ff fc33 	bl	800c5a6 <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800cd40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd42:	6a3b      	ldr	r3, [r7, #32]
 800cd44:	4413      	add	r3, r2
 800cd46:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800cd48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4c:	4413      	add	r3, r2
 800cd4e:	637b      	str	r3, [r7, #52]	; 0x34
 800cd50:	e7d6      	b.n	800cd00 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800cd52:	68f8      	ldr	r0, [r7, #12]
 800cd54:	f7ff fd71 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd5c:	441a      	add	r2, r3
 800cd5e:	69b9      	ldr	r1, [r7, #24]
 800cd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd62:	440b      	add	r3, r1
 800cd64:	7812      	ldrb	r2, [r2, #0]
 800cd66:	701a      	strb	r2, [r3, #0]
                j++;
 800cd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800cd6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd70:	3301      	adds	r3, #1
 800cd72:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800cd74:	e7c4      	b.n	800cd00 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800cd76:	69fb      	ldr	r3, [r7, #28]
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	69ba      	ldr	r2, [r7, #24]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	2200      	movs	r2, #0
 800cd80:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800cd82:	69fa      	ldr	r2, [r7, #28]
 800cd84:	69b9      	ldr	r1, [r7, #24]
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	f7ff fd1c 	bl	800c7c4 <_ZN12SimpleString19setInternalBufferToEPcj>
 800cd8c:	e004      	b.n	800cd98 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800cd8e:	68f8      	ldr	r0, [r7, #12]
 800cd90:	f7ff fcca 	bl	800c728 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800cd94:	e000      	b.n	800cd98 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800cd96:	bf00      	nop
}
 800cd98:	3738      	adds	r7, #56	; 0x38
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	08023f54 	.word	0x08023f54

0800cda4 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800cda4:	b590      	push	{r4, r7, lr}
 800cda6:	b089      	sub	sp, #36	; 0x24
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800cdae:	493b      	ldr	r1, [pc, #236]	; (800ce9c <_ZNK12SimpleString9printableEv+0xf8>)
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f7ff fd4e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800cdb6:	6838      	ldr	r0, [r7, #0]
 800cdb8:	f000 f876 	bl	800cea8 <_ZNK12SimpleString16getPrintableSizeEv>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f7ff fcde 	bl	800c784 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800cdc8:	6838      	ldr	r0, [r7, #0]
 800cdca:	f000 f8d9 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800cdce:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	61bb      	str	r3, [r7, #24]
 800cdd8:	69ba      	ldr	r2, [r7, #24]
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d252      	bcs.n	800ce86 <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	69bb      	ldr	r3, [r7, #24]
 800cde6:	4413      	add	r3, r2
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800cdec:	7cfb      	ldrb	r3, [r7, #19]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 fb43 	bl	800d47a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d012      	beq.n	800ce20 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	18d0      	adds	r0, r2, r3
 800ce02:	7cfb      	ldrb	r3, [r7, #19]
 800ce04:	3b07      	subs	r3, #7
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	461a      	mov	r2, r3
 800ce0a:	4b25      	ldr	r3, [pc, #148]	; (800cea0 <_ZNK12SimpleString9printableEv+0xfc>)
 800ce0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce10:	2202      	movs	r2, #2
 800ce12:	4619      	mov	r1, r3
 800ce14:	f7ff fbc7 	bl	800c5a6 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	3302      	adds	r3, #2
 800ce1c:	61fb      	str	r3, [r7, #28]
 800ce1e:	e02e      	b.n	800ce7e <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800ce20:	7cfb      	ldrb	r3, [r7, #19]
 800ce22:	4618      	mov	r0, r3
 800ce24:	f000 fb15 	bl	800d452 <_ZN12SimpleString9isControlEc>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d01e      	beq.n	800ce6c <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800ce2e:	7cfa      	ldrb	r2, [r7, #19]
 800ce30:	f107 0308 	add.w	r3, r7, #8
 800ce34:	491b      	ldr	r1, [pc, #108]	; (800cea4 <_ZNK12SimpleString9printableEv+0x100>)
 800ce36:	4618      	mov	r0, r3
 800ce38:	f000 fdca 	bl	800d9d0 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	18d4      	adds	r4, r2, r3
 800ce44:	f107 0308 	add.w	r3, r7, #8
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f000 f88d 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2204      	movs	r2, #4
 800ce52:	4619      	mov	r1, r3
 800ce54:	4620      	mov	r0, r4
 800ce56:	f7ff fba6 	bl	800c5a6 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	3304      	adds	r3, #4
 800ce5e:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800ce60:	f107 0308 	add.w	r3, r7, #8
 800ce64:	4618      	mov	r0, r3
 800ce66:	f000 f8ac 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800ce6a:	e008      	b.n	800ce7e <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	4413      	add	r3, r2
 800ce74:	7cfa      	ldrb	r2, [r7, #19]
 800ce76:	701a      	strb	r2, [r3, #0]
            j++;
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	3301      	adds	r3, #1
 800ce82:	61bb      	str	r3, [r7, #24]
 800ce84:	e7a8      	b.n	800cdd8 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	4413      	add	r3, r2
 800ce8e:	2200      	movs	r2, #0
 800ce90:	701a      	strb	r2, [r3, #0]

    return result;
 800ce92:	bf00      	nop
}
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	3724      	adds	r7, #36	; 0x24
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd90      	pop	{r4, r7, pc}
 800ce9c:	08024014 	.word	0x08024014
 800cea0:	2000006c 	.word	0x2000006c
 800cea4:	08024018 	.word	0x08024018

0800cea8 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b086      	sub	sp, #24
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 f865 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800ceb6:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800cebc:	2300      	movs	r3, #0
 800cebe:	613b      	str	r3, [r7, #16]
 800cec0:	693a      	ldr	r2, [r7, #16]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d21e      	bcs.n	800cf06 <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	4413      	add	r3, r2
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800ced4:	7afb      	ldrb	r3, [r7, #11]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f000 facf 	bl	800d47a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d003      	beq.n	800ceea <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	3301      	adds	r3, #1
 800cee6:	617b      	str	r3, [r7, #20]
 800cee8:	e009      	b.n	800cefe <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800ceea:	7afb      	ldrb	r3, [r7, #11]
 800ceec:	4618      	mov	r0, r3
 800ceee:	f000 fab0 	bl	800d452 <_ZN12SimpleString9isControlEc>
 800cef2:	4603      	mov	r3, r0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	3303      	adds	r3, #3
 800cefc:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	3301      	adds	r3, #1
 800cf02:	613b      	str	r3, [r7, #16]
 800cf04:	e7dc      	b.n	800cec0 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800cf06:	697b      	ldr	r3, [r7, #20]
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3718      	adds	r7, #24
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800cf10:	b590      	push	{r4, r7, lr}
 800cf12:	b085      	sub	sp, #20
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800cf1a:	6839      	ldr	r1, [r7, #0]
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7ff fcec 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 f82c 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800cf28:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	60fb      	str	r3, [r7, #12]
 800cf2e:	68fa      	ldr	r2, [r7, #12]
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d213      	bcs.n	800cf5e <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f7ff fc7f 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	4413      	add	r3, r2
 800cf42:	7819      	ldrb	r1, [r3, #0]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	18d4      	adds	r4, r2, r3
 800cf4c:	4608      	mov	r0, r1
 800cf4e:	f7ff fb8a 	bl	800c666 <_ZN12SimpleString7ToLowerEc>
 800cf52:	4603      	mov	r3, r0
 800cf54:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	3301      	adds	r3, #1
 800cf5a:	60fb      	str	r3, [r7, #12]
 800cf5c:	e7e7      	b.n	800cf2e <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800cf5e:	bf00      	nop
}
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	3714      	adds	r7, #20
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd90      	pop	{r4, r7, pc}

0800cf68 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f7ff fc62 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800cf76:	4603      	mov	r3, r0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f7ff fc56 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7ff fabd 	bl	800c510 <_ZN12SimpleString6StrLenEPKc>
 800cf96:	4603      	mov	r3, r0
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f7ff ffe9 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	bf0c      	ite	eq
 800cfb4:	2301      	moveq	r3, #1
 800cfb6:	2300      	movne	r3, #0
 800cfb8:	b2db      	uxtb	r3, r3
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b082      	sub	sp, #8
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f7ff fb90 	bl	800c6f0 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3708      	adds	r7, #8
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800cfda:	b590      	push	{r4, r7, lr}
 800cfdc:	b083      	sub	sp, #12
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
 800cfe2:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f7ff ffbf 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800cfea:	4604      	mov	r4, r0
 800cfec:	6838      	ldr	r0, [r7, #0]
 800cfee:	f7ff ffbb 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800cff2:	4603      	mov	r3, r0
 800cff4:	4619      	mov	r1, r3
 800cff6:	4620      	mov	r0, r4
 800cff8:	f7ff fa68 	bl	800c4cc <_ZN12SimpleString6StrCmpEPKcS1_>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	bf0c      	ite	eq
 800d002:	2301      	moveq	r3, #1
 800d004:	2300      	movne	r3, #0
 800d006:	b2db      	uxtb	r3, r3
}
 800d008:	4618      	mov	r0, r3
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd90      	pop	{r4, r7, pc}

0800d010 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800d010:	b590      	push	{r4, r7, lr}
 800d012:	b087      	sub	sp, #28
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800d01a:	f107 0308 	add.w	r3, r7, #8
 800d01e:	6879      	ldr	r1, [r7, #4]
 800d020:	4618      	mov	r0, r3
 800d022:	f7ff ff75 	bl	800cf10 <_ZNK12SimpleString9lowerCaseEv>
 800d026:	f107 0310 	add.w	r3, r7, #16
 800d02a:	6839      	ldr	r1, [r7, #0]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7ff ff6f 	bl	800cf10 <_ZNK12SimpleString9lowerCaseEv>
 800d032:	f107 0210 	add.w	r2, r7, #16
 800d036:	f107 0308 	add.w	r3, r7, #8
 800d03a:	4611      	mov	r1, r2
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7ff ffcc 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 800d042:	4603      	mov	r3, r0
 800d044:	461c      	mov	r4, r3
 800d046:	f107 0310 	add.w	r3, r7, #16
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7ff ffb9 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800d050:	f107 0308 	add.w	r3, r7, #8
 800d054:	4618      	mov	r0, r3
 800d056:	f7ff ffb4 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800d05a:	4623      	mov	r3, r4
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	371c      	adds	r7, #28
 800d060:	46bd      	mov	sp, r7
 800d062:	bd90      	pop	{r4, r7, pc}

0800d064 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800d06e:	6839      	ldr	r1, [r7, #0]
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f7ff ffb2 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 800d076:	4603      	mov	r3, r0
 800d078:	f083 0301 	eor.w	r3, r3, #1
 800d07c:	b2db      	uxtb	r3, r3
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b084      	sub	sp, #16
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	60f8      	str	r0, [r7, #12]
 800d08e:	60b9      	str	r1, [r7, #8]
 800d090:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800d092:	68b8      	ldr	r0, [r7, #8]
 800d094:	f7ff fbd1 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800d098:	4603      	mov	r3, r0
 800d09a:	4619      	mov	r1, r3
 800d09c:	68f8      	ldr	r0, [r7, #12]
 800d09e:	f7ff fbd8 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f7ff fbc9 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	68f8      	ldr	r0, [r7, #12]
 800d0ae:	f000 f817 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    return t;
 800d0b2:	bf00      	nop
}
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	3710      	adds	r7, #16
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800d0c6:	6838      	ldr	r0, [r7, #0]
 800d0c8:	f7ff fbb7 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f805 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
 800d0d6:	4603      	mov	r3, r0
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3708      	adds	r7, #8
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b086      	sub	sp, #24
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f7ff ff48 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800d0f0:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800d0f2:	6838      	ldr	r0, [r7, #0]
 800d0f4:	f7ff fa0c 	bl	800c510 <_ZN12SimpleString6StrLenEPKc>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800d0fe:	697a      	ldr	r2, [r7, #20]
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	4413      	add	r3, r2
 800d104:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f7ff fb97 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800d10c:	4603      	mov	r3, r0
 800d10e:	68f9      	ldr	r1, [r7, #12]
 800d110:	4618      	mov	r0, r3
 800d112:	f000 f941 	bl	800d398 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800d116:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800d118:	68ba      	ldr	r2, [r7, #8]
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	4413      	add	r3, r2
 800d11e:	693a      	ldr	r2, [r7, #16]
 800d120:	6839      	ldr	r1, [r7, #0]
 800d122:	4618      	mov	r0, r3
 800d124:	f7ff fa3f 	bl	800c5a6 <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800d128:	68fa      	ldr	r2, [r7, #12]
 800d12a:	68b9      	ldr	r1, [r7, #8]
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f7ff fb49 	bl	800c7c4 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800d132:	687b      	ldr	r3, [r7, #4]
}
 800d134:	4618      	mov	r0, r3
 800d136:	3718      	adds	r7, #24
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800d13c:	b590      	push	{r4, r7, lr}
 800d13e:	b08b      	sub	sp, #44	; 0x2c
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	4613      	mov	r3, r2
 800d148:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800d14a:	68f8      	ldr	r0, [r7, #12]
 800d14c:	f7ff ff18 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800d150:	4604      	mov	r4, r0
 800d152:	68b8      	ldr	r0, [r7, #8]
 800d154:	f7ff ff14 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800d158:	4603      	mov	r3, r0
 800d15a:	429c      	cmp	r4, r3
 800d15c:	bf8c      	ite	hi
 800d15e:	2301      	movhi	r3, #1
 800d160:	2300      	movls	r3, #0
 800d162:	b2db      	uxtb	r3, r3
 800d164:	2b00      	cmp	r3, #0
 800d166:	d006      	beq.n	800d176 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800d168:	79fb      	ldrb	r3, [r7, #7]
 800d16a:	461a      	mov	r2, r3
 800d16c:	68f9      	ldr	r1, [r7, #12]
 800d16e:	68b8      	ldr	r0, [r7, #8]
 800d170:	f7ff ffe4 	bl	800d13c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800d174:	e02b      	b.n	800d1ce <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800d176:	79fb      	ldrb	r3, [r7, #7]
 800d178:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800d17e:	68b8      	ldr	r0, [r7, #8]
 800d180:	f7ff fefe 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800d184:	4604      	mov	r4, r0
 800d186:	68f8      	ldr	r0, [r7, #12]
 800d188:	f7ff fefa 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800d18c:	4603      	mov	r3, r0
 800d18e:	1ae2      	subs	r2, r4, r3
 800d190:	f107 0114 	add.w	r1, r7, #20
 800d194:	f107 0320 	add.w	r3, r7, #32
 800d198:	4618      	mov	r0, r3
 800d19a:	f7ff fb75 	bl	800c888 <_ZN12SimpleStringC1EPKcj>
 800d19e:	f107 0318 	add.w	r3, r7, #24
 800d1a2:	f107 0120 	add.w	r1, r7, #32
 800d1a6:	68fa      	ldr	r2, [r7, #12]
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7ff ff6c 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800d1ae:	f107 0318 	add.w	r3, r7, #24
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	68f8      	ldr	r0, [r7, #12]
 800d1b6:	f7ff fbb8 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800d1ba:	f107 0318 	add.w	r3, r7, #24
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7ff feff 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800d1c4:	f107 0320 	add.w	r3, r7, #32
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7ff fefa 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 800d1ce:	372c      	adds	r7, #44	; 0x2c
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd90      	pop	{r4, r7, pc}

0800d1d4 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b086      	sub	sp, #24
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
 800d1e0:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800d1e2:	68b8      	ldr	r0, [r7, #8]
 800d1e4:	f7ff fecc 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	3b01      	subs	r3, #1
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	bf8c      	ite	hi
 800d1f2:	2301      	movhi	r3, #1
 800d1f4:	2300      	movls	r3, #0
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d004      	beq.n	800d206 <_ZNK12SimpleString9subStringEjj+0x32>
 800d1fc:	4919      	ldr	r1, [pc, #100]	; (800d264 <_ZNK12SimpleString9subStringEjj+0x90>)
 800d1fe:	68f8      	ldr	r0, [r7, #12]
 800d200:	f7ff fb27 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800d204:	e029      	b.n	800d25a <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800d206:	68b8      	ldr	r0, [r7, #8]
 800d208:	f7ff fb17 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800d20c:	4602      	mov	r2, r0
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	441a      	add	r2, r3
 800d212:	f107 0310 	add.w	r3, r7, #16
 800d216:	4611      	mov	r1, r2
 800d218:	4618      	mov	r0, r3
 800d21a:	f7ff fb1a 	bl	800c852 <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800d21e:	f107 0310 	add.w	r3, r7, #16
 800d222:	4618      	mov	r0, r3
 800d224:	f7ff feac 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800d228:	4602      	mov	r2, r0
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	4293      	cmp	r3, r2
 800d22e:	bf34      	ite	cc
 800d230:	2301      	movcc	r3, #1
 800d232:	2300      	movcs	r3, #0
 800d234:	b2db      	uxtb	r3, r3
 800d236:	2b00      	cmp	r3, #0
 800d238:	d004      	beq.n	800d244 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800d23a:	693a      	ldr	r2, [r7, #16]
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	4413      	add	r3, r2
 800d240:	2200      	movs	r2, #0
 800d242:	701a      	strb	r2, [r3, #0]

    return newString;
 800d244:	f107 0310 	add.w	r3, r7, #16
 800d248:	4619      	mov	r1, r3
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	f7ff fb55 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800d250:	f107 0310 	add.w	r3, r7, #16
 800d254:	4618      	mov	r0, r3
 800d256:	f7ff feb4 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 800d25a:	68f8      	ldr	r0, [r7, #12]
 800d25c:	3718      	adds	r7, #24
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	08024014 	.word	0x08024014

0800d268 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	60b9      	str	r1, [r7, #8]
 800d272:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800d274:	68f8      	ldr	r0, [r7, #12]
 800d276:	f04f 33ff 	mov.w	r3, #4294967295
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	68b9      	ldr	r1, [r7, #8]
 800d27e:	f7ff ffa9 	bl	800d1d4 <_ZNK12SimpleString9subStringEjj>
}
 800d282:	68f8      	ldr	r0, [r7, #12]
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}

0800d28a <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800d28a:	b580      	push	{r7, lr}
 800d28c:	b082      	sub	sp, #8
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
 800d292:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f7ff fad0 	bl	800c83a <_ZNK12SimpleString9getBufferEv>
 800d29a:	4602      	mov	r2, r0
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	4413      	add	r3, r2
 800d2a0:	781b      	ldrb	r3, [r3, #0]
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3708      	adds	r7, #8
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b082      	sub	sp, #8
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800d2b6:	78fb      	ldrb	r3, [r7, #3]
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	2100      	movs	r1, #0
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 f805 	bl	800d2cc <_ZNK12SimpleString8findFromEjc>
 800d2c2:	4603      	mov	r3, r0
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3708      	adds	r7, #8
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b086      	sub	sp, #24
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	4613      	mov	r3, r2
 800d2d8:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f7ff fe50 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800d2e0:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	617b      	str	r3, [r7, #20]
 800d2e6:	697a      	ldr	r2, [r7, #20]
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d213      	bcs.n	800d316 <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800d2ee:	6979      	ldr	r1, [r7, #20]
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f7ff ffca 	bl	800d28a <_ZNK12SimpleString2atEj>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	79fb      	ldrb	r3, [r7, #7]
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	bf0c      	ite	eq
 800d300:	2301      	moveq	r3, #1
 800d302:	2300      	movne	r3, #0
 800d304:	b2db      	uxtb	r3, r3
 800d306:	2b00      	cmp	r3, #0
 800d308:	d001      	beq.n	800d30e <_ZNK12SimpleString8findFromEjc+0x42>
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	e005      	b.n	800d31a <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	3301      	adds	r3, #1
 800d312:	617b      	str	r3, [r7, #20]
 800d314:	e7e7      	b.n	800d2e6 <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800d316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3718      	adds	r7, #24
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
	...

0800d324 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b086      	sub	sp, #24
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	4611      	mov	r1, r2
 800d330:	461a      	mov	r2, r3
 800d332:	460b      	mov	r3, r1
 800d334:	71fb      	strb	r3, [r7, #7]
 800d336:	4613      	mov	r3, r2
 800d338:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800d33a:	79fb      	ldrb	r3, [r7, #7]
 800d33c:	4619      	mov	r1, r3
 800d33e:	68b8      	ldr	r0, [r7, #8]
 800d340:	f7ff ffb3 	bl	800d2aa <_ZNK12SimpleString4findEc>
 800d344:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d34c:	d104      	bne.n	800d358 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800d34e:	4911      	ldr	r1, [pc, #68]	; (800d394 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	f7ff fa7e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800d356:	e019      	b.n	800d38c <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800d358:	79bb      	ldrb	r3, [r7, #6]
 800d35a:	461a      	mov	r2, r3
 800d35c:	6979      	ldr	r1, [r7, #20]
 800d35e:	68b8      	ldr	r0, [r7, #8]
 800d360:	f7ff ffb4 	bl	800d2cc <_ZNK12SimpleString8findFromEjc>
 800d364:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d36c:	d106      	bne.n	800d37c <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	697a      	ldr	r2, [r7, #20]
 800d372:	68b9      	ldr	r1, [r7, #8]
 800d374:	4618      	mov	r0, r3
 800d376:	f7ff ff77 	bl	800d268 <_ZNK12SimpleString9subStringEj>
 800d37a:	e007      	b.n	800d38c <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800d37c:	693a      	ldr	r2, [r7, #16]
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	1ad3      	subs	r3, r2, r3
 800d382:	68f8      	ldr	r0, [r7, #12]
 800d384:	697a      	ldr	r2, [r7, #20]
 800d386:	68b9      	ldr	r1, [r7, #8]
 800d388:	f7ff ff24 	bl	800d1d4 <_ZNK12SimpleString9subStringEjj>
}
 800d38c:	68f8      	ldr	r0, [r7, #12]
 800d38e:	3718      	adds	r7, #24
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	08024014 	.word	0x08024014

0800d398 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800d3a2:	f240 2275 	movw	r2, #629	; 0x275
 800d3a6:	490a      	ldr	r1, [pc, #40]	; (800d3d0 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800d3a8:	6838      	ldr	r0, [r7, #0]
 800d3aa:	f7fe ffd7 	bl	800c35c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800d3ae:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800d3b0:	683a      	ldr	r2, [r7, #0]
 800d3b2:	6879      	ldr	r1, [r7, #4]
 800d3b4:	68f8      	ldr	r0, [r7, #12]
 800d3b6:	f7ff f8f6 	bl	800c5a6 <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	68fa      	ldr	r2, [r7, #12]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3710      	adds	r7, #16
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	08023f54 	.word	0x08023f54

0800d3d4 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	4603      	mov	r3, r0
 800d3dc:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800d3de:	79fb      	ldrb	r3, [r7, #7]
 800d3e0:	2b2f      	cmp	r3, #47	; 0x2f
 800d3e2:	d904      	bls.n	800d3ee <_ZN12SimpleString7isDigitEc+0x1a>
 800d3e4:	79fb      	ldrb	r3, [r7, #7]
 800d3e6:	2b39      	cmp	r3, #57	; 0x39
 800d3e8:	d801      	bhi.n	800d3ee <_ZN12SimpleString7isDigitEc+0x1a>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e000      	b.n	800d3f0 <_ZN12SimpleString7isDigitEc+0x1c>
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	370c      	adds	r7, #12
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b083      	sub	sp, #12
 800d400:	af00      	add	r7, sp, #0
 800d402:	4603      	mov	r3, r0
 800d404:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800d406:	79fb      	ldrb	r3, [r7, #7]
 800d408:	2b20      	cmp	r3, #32
 800d40a:	d005      	beq.n	800d418 <_ZN12SimpleString7isSpaceEc+0x1c>
 800d40c:	79fb      	ldrb	r3, [r7, #7]
 800d40e:	2b08      	cmp	r3, #8
 800d410:	d904      	bls.n	800d41c <_ZN12SimpleString7isSpaceEc+0x20>
 800d412:	79fb      	ldrb	r3, [r7, #7]
 800d414:	2b0d      	cmp	r3, #13
 800d416:	d801      	bhi.n	800d41c <_ZN12SimpleString7isSpaceEc+0x20>
 800d418:	2301      	movs	r3, #1
 800d41a:	e000      	b.n	800d41e <_ZN12SimpleString7isSpaceEc+0x22>
 800d41c:	2300      	movs	r3, #0
}
 800d41e:	4618      	mov	r0, r3
 800d420:	370c      	adds	r7, #12
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr

0800d42a <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800d42a:	b480      	push	{r7}
 800d42c:	b083      	sub	sp, #12
 800d42e:	af00      	add	r7, sp, #0
 800d430:	4603      	mov	r3, r0
 800d432:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800d434:	79fb      	ldrb	r3, [r7, #7]
 800d436:	2b40      	cmp	r3, #64	; 0x40
 800d438:	d904      	bls.n	800d444 <_ZN12SimpleString7isUpperEc+0x1a>
 800d43a:	79fb      	ldrb	r3, [r7, #7]
 800d43c:	2b5a      	cmp	r3, #90	; 0x5a
 800d43e:	d801      	bhi.n	800d444 <_ZN12SimpleString7isUpperEc+0x1a>
 800d440:	2301      	movs	r3, #1
 800d442:	e000      	b.n	800d446 <_ZN12SimpleString7isUpperEc+0x1c>
 800d444:	2300      	movs	r3, #0
}
 800d446:	4618      	mov	r0, r3
 800d448:	370c      	adds	r7, #12
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr

0800d452 <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800d452:	b480      	push	{r7}
 800d454:	b083      	sub	sp, #12
 800d456:	af00      	add	r7, sp, #0
 800d458:	4603      	mov	r3, r0
 800d45a:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800d45c:	79fb      	ldrb	r3, [r7, #7]
 800d45e:	2b1f      	cmp	r3, #31
 800d460:	d902      	bls.n	800d468 <_ZN12SimpleString9isControlEc+0x16>
 800d462:	79fb      	ldrb	r3, [r7, #7]
 800d464:	2b7f      	cmp	r3, #127	; 0x7f
 800d466:	d101      	bne.n	800d46c <_ZN12SimpleString9isControlEc+0x1a>
 800d468:	2301      	movs	r3, #1
 800d46a:	e000      	b.n	800d46e <_ZN12SimpleString9isControlEc+0x1c>
 800d46c:	2300      	movs	r3, #0
}
 800d46e:	4618      	mov	r0, r3
 800d470:	370c      	adds	r7, #12
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr

0800d47a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800d47a:	b480      	push	{r7}
 800d47c:	b083      	sub	sp, #12
 800d47e:	af00      	add	r7, sp, #0
 800d480:	4603      	mov	r3, r0
 800d482:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800d484:	79fb      	ldrb	r3, [r7, #7]
 800d486:	2b06      	cmp	r3, #6
 800d488:	d904      	bls.n	800d494 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800d48a:	79fb      	ldrb	r3, [r7, #7]
 800d48c:	2b0d      	cmp	r3, #13
 800d48e:	d801      	bhi.n	800d494 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800d490:	2301      	movs	r3, #1
 800d492:	e000      	b.n	800d496 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800d494:	2300      	movs	r3, #0
}
 800d496:	4618      	mov	r0, r3
 800d498:	370c      	adds	r7, #12
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr
	...

0800d4a4 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800d4b0:	78fb      	ldrb	r3, [r7, #3]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d001      	beq.n	800d4ba <_Z10StringFromb+0x16>
 800d4b6:	4a06      	ldr	r2, [pc, #24]	; (800d4d0 <_Z10StringFromb+0x2c>)
 800d4b8:	e000      	b.n	800d4bc <_Z10StringFromb+0x18>
 800d4ba:	4a06      	ldr	r2, [pc, #24]	; (800d4d4 <_Z10StringFromb+0x30>)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	4906      	ldr	r1, [pc, #24]	; (800d4d8 <_Z10StringFromb+0x34>)
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f000 fa85 	bl	800d9d0 <_Z16StringFromFormatPKcz>
}
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	3708      	adds	r7, #8
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	08024020 	.word	0x08024020
 800d4d4:	08024028 	.word	0x08024028
 800d4d8:	08024030 	.word	0x08024030

0800d4dc <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800d4e6:	6839      	ldr	r1, [r7, #0]
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f7ff f9b2 	bl	800c852 <_ZN12SimpleStringC1EPKc>
}
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	3708      	adds	r7, #8
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}
	...

0800d4f8 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800d4f8:	b590      	push	{r4, r7, lr}
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800d502:	2400      	movs	r4, #0
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00e      	beq.n	800d528 <_Z25PrintableStringFromOrNullPKc+0x30>
 800d50a:	f107 0308 	add.w	r3, r7, #8
 800d50e:	6839      	ldr	r1, [r7, #0]
 800d510:	4618      	mov	r0, r3
 800d512:	f7ff ffe3 	bl	800d4dc <_Z10StringFromPKc>
 800d516:	2401      	movs	r4, #1
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f107 0208 	add.w	r2, r7, #8
 800d51e:	4611      	mov	r1, r2
 800d520:	4618      	mov	r0, r3
 800d522:	f7ff fc3f 	bl	800cda4 <_ZNK12SimpleString9printableEv>
 800d526:	e004      	b.n	800d532 <_Z25PrintableStringFromOrNullPKc+0x3a>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	4908      	ldr	r1, [pc, #32]	; (800d54c <_Z25PrintableStringFromOrNullPKc+0x54>)
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7ff ffd5 	bl	800d4dc <_Z10StringFromPKc>
 800d532:	2c00      	cmp	r4, #0
 800d534:	d004      	beq.n	800d540 <_Z25PrintableStringFromOrNullPKc+0x48>
 800d536:	f107 0308 	add.w	r3, r7, #8
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7ff fd41 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800d540:	bf00      	nop
}
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	3714      	adds	r7, #20
 800d546:	46bd      	mov	sp, r7
 800d548:	bd90      	pop	{r4, r7, pc}
 800d54a:	bf00      	nop
 800d54c:	08024034 	.word	0x08024034

0800d550 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	683a      	ldr	r2, [r7, #0]
 800d55e:	4904      	ldr	r1, [pc, #16]	; (800d570 <_Z10StringFromi+0x20>)
 800d560:	4618      	mov	r0, r3
 800d562:	f000 fa35 	bl	800d9d0 <_Z16StringFromFormatPKcz>
}
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	3708      	adds	r7, #8
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	0802403c 	.word	0x0802403c

0800d574 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	683a      	ldr	r2, [r7, #0]
 800d582:	4904      	ldr	r1, [pc, #16]	; (800d594 <_Z10StringFroml+0x20>)
 800d584:	4618      	mov	r0, r3
 800d586:	f000 fa23 	bl	800d9d0 <_Z16StringFromFormatPKcz>
}
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	3708      	adds	r7, #8
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	08024040 	.word	0x08024040

0800d598 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b086      	sub	sp, #24
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800d5a2:	f107 0308 	add.w	r3, r7, #8
 800d5a6:	4910      	ldr	r1, [pc, #64]	; (800d5e8 <_Z10StringFromPKv+0x50>)
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7ff f952 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800d5ae:	f107 0310 	add.w	r3, r7, #16
 800d5b2:	6839      	ldr	r1, [r7, #0]
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f000 f9a1 	bl	800d8fc <_Z13HexStringFromPKv>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f107 0210 	add.w	r2, r7, #16
 800d5c0:	f107 0108 	add.w	r1, r7, #8
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7ff fd5e 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800d5ca:	f107 0310 	add.w	r3, r7, #16
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7ff fcf7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800d5d4:	f107 0308 	add.w	r3, r7, #8
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7ff fcf2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800d5de:	bf00      	nop
}
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	3718      	adds	r7, #24
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	08024044 	.word	0x08024044

0800d5ec <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b086      	sub	sp, #24
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800d5f6:	f107 0308 	add.w	r3, r7, #8
 800d5fa:	4910      	ldr	r1, [pc, #64]	; (800d63c <_Z10StringFromPFvvE+0x50>)
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7ff f928 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800d602:	f107 0310 	add.w	r3, r7, #16
 800d606:	6839      	ldr	r1, [r7, #0]
 800d608:	4618      	mov	r0, r3
 800d60a:	f000 f98b 	bl	800d924 <_Z13HexStringFromPFvvE>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f107 0210 	add.w	r2, r7, #16
 800d614:	f107 0108 	add.w	r1, r7, #8
 800d618:	4618      	mov	r0, r3
 800d61a:	f7ff fd34 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800d61e:	f107 0310 	add.w	r3, r7, #16
 800d622:	4618      	mov	r0, r3
 800d624:	f7ff fccd 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800d628:	f107 0308 	add.w	r3, r7, #8
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7ff fcc8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800d632:	bf00      	nop
}
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	3718      	adds	r7, #24
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	08024044 	.word	0x08024044

0800d640 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	683a      	ldr	r2, [r7, #0]
 800d64e:	4904      	ldr	r1, [pc, #16]	; (800d660 <_Z13HexStringFroml+0x20>)
 800d650:	4618      	mov	r0, r3
 800d652:	f000 f9bd 	bl	800d9d0 <_Z16StringFromFormatPKcz>
}
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	3708      	adds	r7, #8
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	08024048 	.word	0x08024048

0800d664 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	683a      	ldr	r2, [r7, #0]
 800d672:	4904      	ldr	r1, [pc, #16]	; (800d684 <_Z13HexStringFromi+0x20>)
 800d674:	4618      	mov	r0, r3
 800d676:	f000 f9ab 	bl	800d9d0 <_Z16StringFromFormatPKcz>
}
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	0802404c 	.word	0x0802404c

0800d688 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	460b      	mov	r3, r1
 800d692:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800d694:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	4912      	ldr	r1, [pc, #72]	; (800d6e4 <_Z13HexStringFroma+0x5c>)
 800d69c:	4618      	mov	r0, r3
 800d69e:	f000 f997 	bl	800d9d0 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800d6a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	da16      	bge.n	800d6d8 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f7ff fc68 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800d6b0:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	1e9a      	subs	r2, r3, #2
 800d6b6:	f107 030c 	add.w	r3, r7, #12
 800d6ba:	6879      	ldr	r1, [r7, #4]
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7ff fdd3 	bl	800d268 <_ZNK12SimpleString9subStringEj>
 800d6c2:	f107 030c 	add.w	r3, r7, #12
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f7ff f92e 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800d6ce:	f107 030c 	add.w	r3, r7, #12
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7ff fc75 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    }
    return result;
 800d6d8:	bf00      	nop
}
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	3718      	adds	r7, #24
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	0802404c 	.word	0x0802404c

0800d6e8 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	683a      	ldr	r2, [r7, #0]
 800d6f6:	4904      	ldr	r1, [pc, #16]	; (800d708 <_Z13HexStringFromm+0x20>)
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f000 f969 	bl	800d9d0 <_Z16StringFromFormatPKcz>
}
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	3708      	adds	r7, #8
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	08024048 	.word	0x08024048

0800d70c <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b082      	sub	sp, #8
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	683a      	ldr	r2, [r7, #0]
 800d71a:	4904      	ldr	r1, [pc, #16]	; (800d72c <_Z13HexStringFromj+0x20>)
 800d71c:	4618      	mov	r0, r3
 800d71e:	f000 f957 	bl	800d9d0 <_Z16StringFromFormatPKcz>
}
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	0802404c 	.word	0x0802404c

0800d730 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d73a:	f107 0308 	add.w	r3, r7, #8
 800d73e:	6839      	ldr	r1, [r7, #0]
 800d740:	4618      	mov	r0, r3
 800d742:	f7ff ff8f 	bl	800d664 <_Z13HexStringFromi>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f107 0208 	add.w	r2, r7, #8
 800d74c:	4611      	mov	r1, r2
 800d74e:	4618      	mov	r0, r3
 800d750:	f000 f87e 	bl	800d850 <_Z26BracketsFormattedHexString12SimpleString>
 800d754:	f107 0308 	add.w	r3, r7, #8
 800d758:	4618      	mov	r0, r3
 800d75a:	f7ff fc32 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800d75e:	bf00      	nop
}
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d772:	f107 0308 	add.w	r3, r7, #8
 800d776:	6839      	ldr	r1, [r7, #0]
 800d778:	4618      	mov	r0, r3
 800d77a:	f7ff ffc7 	bl	800d70c <_Z13HexStringFromj>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f107 0208 	add.w	r2, r7, #8
 800d784:	4611      	mov	r1, r2
 800d786:	4618      	mov	r0, r3
 800d788:	f000 f862 	bl	800d850 <_Z26BracketsFormattedHexString12SimpleString>
 800d78c:	f107 0308 	add.w	r3, r7, #8
 800d790:	4618      	mov	r0, r3
 800d792:	f7ff fc16 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800d796:	bf00      	nop
}
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	3710      	adds	r7, #16
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d7aa:	f107 0308 	add.w	r3, r7, #8
 800d7ae:	6839      	ldr	r1, [r7, #0]
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7ff ff45 	bl	800d640 <_Z13HexStringFroml>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f107 0208 	add.w	r2, r7, #8
 800d7bc:	4611      	mov	r1, r2
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f000 f846 	bl	800d850 <_Z26BracketsFormattedHexString12SimpleString>
 800d7c4:	f107 0308 	add.w	r3, r7, #8
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7ff fbfa 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800d7ce:	bf00      	nop
}
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	3710      	adds	r7, #16
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d7e2:	f107 0308 	add.w	r3, r7, #8
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff ff7d 	bl	800d6e8 <_Z13HexStringFromm>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f107 0208 	add.w	r2, r7, #8
 800d7f4:	4611      	mov	r1, r2
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f000 f82a 	bl	800d850 <_Z26BracketsFormattedHexString12SimpleString>
 800d7fc:	f107 0308 	add.w	r3, r7, #8
 800d800:	4618      	mov	r0, r3
 800d802:	f7ff fbde 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800d806:	bf00      	nop
}
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	460b      	mov	r3, r1
 800d81a:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d81c:	f107 0308 	add.w	r3, r7, #8
 800d820:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800d824:	4611      	mov	r1, r2
 800d826:	4618      	mov	r0, r3
 800d828:	f7ff ff2e 	bl	800d688 <_Z13HexStringFroma>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f107 0208 	add.w	r2, r7, #8
 800d832:	4611      	mov	r1, r2
 800d834:	4618      	mov	r0, r3
 800d836:	f000 f80b 	bl	800d850 <_Z26BracketsFormattedHexString12SimpleString>
 800d83a:	f107 0308 	add.w	r3, r7, #8
 800d83e:	4618      	mov	r0, r3
 800d840:	f7ff fbbf 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800d844:	bf00      	nop
}
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
	...

0800d850 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b088      	sub	sp, #32
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800d85a:	f107 0310 	add.w	r3, r7, #16
 800d85e:	4917      	ldr	r1, [pc, #92]	; (800d8bc <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800d860:	4618      	mov	r0, r3
 800d862:	f7fe fff6 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800d866:	f107 0308 	add.w	r3, r7, #8
 800d86a:	f107 0110 	add.w	r1, r7, #16
 800d86e:	683a      	ldr	r2, [r7, #0]
 800d870:	4618      	mov	r0, r3
 800d872:	f7ff fc08 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800d876:	f107 0318 	add.w	r3, r7, #24
 800d87a:	4911      	ldr	r1, [pc, #68]	; (800d8c0 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7fe ffe8 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f107 0218 	add.w	r2, r7, #24
 800d888:	f107 0108 	add.w	r1, r7, #8
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7ff fbfa 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800d892:	f107 0318 	add.w	r3, r7, #24
 800d896:	4618      	mov	r0, r3
 800d898:	f7ff fb93 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800d89c:	f107 0308 	add.w	r3, r7, #8
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7ff fb8e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800d8a6:	f107 0310 	add.w	r3, r7, #16
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7ff fb89 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800d8b0:	bf00      	nop
}
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	3720      	adds	r7, #32
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	08024050 	.word	0x08024050
 800d8c0:	08024054 	.word	0x08024054

0800d8c4 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800d8cc:	1d3b      	adds	r3, r7, #4
 800d8ce:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3714      	adds	r7, #20
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800d8e8:	1d3b      	adds	r3, r7, #4
 800d8ea:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3714      	adds	r7, #20
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800d906:	6838      	ldr	r0, [r7, #0]
 800d908:	f7ff ffdc 	bl	800d8c4 <_ZL25convertPointerToLongValuePKv>
 800d90c:	4602      	mov	r2, r0
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	4903      	ldr	r1, [pc, #12]	; (800d920 <_Z13HexStringFromPKv+0x24>)
 800d912:	4618      	mov	r0, r3
 800d914:	f000 f85c 	bl	800d9d0 <_Z16StringFromFormatPKcz>
}
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	08024048 	.word	0x08024048

0800d924 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800d92e:	6838      	ldr	r0, [r7, #0]
 800d930:	f7ff ffd6 	bl	800d8e0 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800d934:	4602      	mov	r2, r0
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	4903      	ldr	r1, [pc, #12]	; (800d948 <_Z13HexStringFromPFvvE+0x24>)
 800d93a:	4618      	mov	r0, r3
 800d93c:	f000 f848 	bl	800d9d0 <_Z16StringFromFormatPKcz>
}
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	08024048 	.word	0x08024048

0800d94c <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b086      	sub	sp, #24
 800d950:	af02      	add	r7, sp, #8
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	ed87 0b00 	vstr	d0, [r7]
 800d958:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800d95a:	4b18      	ldr	r3, [pc, #96]	; (800d9bc <_Z10StringFromdi+0x70>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	ed97 0b00 	vldr	d0, [r7]
 800d962:	4798      	blx	r3
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	bf14      	ite	ne
 800d96a:	2301      	movne	r3, #1
 800d96c:	2300      	moveq	r3, #0
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	2b00      	cmp	r3, #0
 800d972:	d004      	beq.n	800d97e <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800d974:	4912      	ldr	r1, [pc, #72]	; (800d9c0 <_Z10StringFromdi+0x74>)
 800d976:	68f8      	ldr	r0, [r7, #12]
 800d978:	f7fe ff6b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800d97c:	e01a      	b.n	800d9b4 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800d97e:	4b11      	ldr	r3, [pc, #68]	; (800d9c4 <_Z10StringFromdi+0x78>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	ed97 0b00 	vldr	d0, [r7]
 800d986:	4798      	blx	r3
 800d988:	4603      	mov	r3, r0
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	bf14      	ite	ne
 800d98e:	2301      	movne	r3, #1
 800d990:	2300      	moveq	r3, #0
 800d992:	b2db      	uxtb	r3, r3
 800d994:	2b00      	cmp	r3, #0
 800d996:	d004      	beq.n	800d9a2 <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800d998:	490b      	ldr	r1, [pc, #44]	; (800d9c8 <_Z10StringFromdi+0x7c>)
 800d99a:	68f8      	ldr	r0, [r7, #12]
 800d99c:	f7fe ff59 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800d9a0:	e008      	b.n	800d9b4 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800d9a2:	68f8      	ldr	r0, [r7, #12]
 800d9a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9a8:	e9cd 2300 	strd	r2, r3, [sp]
 800d9ac:	68ba      	ldr	r2, [r7, #8]
 800d9ae:	4907      	ldr	r1, [pc, #28]	; (800d9cc <_Z10StringFromdi+0x80>)
 800d9b0:	f000 f80e 	bl	800d9d0 <_Z16StringFromFormatPKcz>
}
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	3710      	adds	r7, #16
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	200000e8 	.word	0x200000e8
 800d9c0:	08024088 	.word	0x08024088
 800d9c4:	200000ec 	.word	0x200000ec
 800d9c8:	0802409c 	.word	0x0802409c
 800d9cc:	080240ac 	.word	0x080240ac

0800d9d0 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800d9d0:	b40e      	push	{r1, r2, r3}
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b087      	sub	sp, #28
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800d9da:	4910      	ldr	r1, [pc, #64]	; (800da1c <_Z16StringFromFormatPKcz+0x4c>)
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f7fe ff38 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800d9e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d9e6:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800d9e8:	f107 0310 	add.w	r3, r7, #16
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f000 f839 	bl	800da68 <_Z17VStringFromFormatPKcSt9__va_list>
 800d9f6:	f107 0310 	add.w	r3, r7, #16
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f7fe ff94 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800da02:	f107 0310 	add.w	r3, r7, #16
 800da06:	4618      	mov	r0, r3
 800da08:	f7ff fadb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800da0c:	bf00      	nop
}
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	371c      	adds	r7, #28
 800da12:	46bd      	mov	sp, r7
 800da14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800da18:	b003      	add	sp, #12
 800da1a:	4770      	bx	lr
 800da1c:	08024014 	.word	0x08024014

0800da20 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	683a      	ldr	r2, [r7, #0]
 800da2e:	4904      	ldr	r1, [pc, #16]	; (800da40 <_Z10StringFromj+0x20>)
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff ffcd 	bl	800d9d0 <_Z16StringFromFormatPKcz>
}
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	3708      	adds	r7, #8
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	080240b8 	.word	0x080240b8

0800da44 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	683a      	ldr	r2, [r7, #0]
 800da52:	4904      	ldr	r1, [pc, #16]	; (800da64 <_Z10StringFromm+0x20>)
 800da54:	4618      	mov	r0, r3
 800da56:	f7ff ffbb 	bl	800d9d0 <_Z16StringFromFormatPKcz>
}
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	3708      	adds	r7, #8
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	080240bc 	.word	0x080240bc

0800da68 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800da68:	b590      	push	{r4, r7, lr}
 800da6a:	b0a7      	sub	sp, #156	; 0x9c
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800da78:	492e      	ldr	r1, [pc, #184]	; (800db34 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f7fe fee9 	bl	800c852 <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800da80:	4b2d      	ldr	r3, [pc, #180]	; (800db38 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800da82:	681c      	ldr	r4, [r3, #0]
 800da84:	f107 0014 	add.w	r0, r7, #20
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	68ba      	ldr	r2, [r7, #8]
 800da8c:	2164      	movs	r1, #100	; 0x64
 800da8e:	47a0      	blx	r4
 800da90:	4603      	mov	r3, r0
 800da92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800da96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da9a:	2b63      	cmp	r3, #99	; 0x63
 800da9c:	d813      	bhi.n	800dac6 <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800da9e:	f107 0214 	add.w	r2, r7, #20
 800daa2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800daa6:	4611      	mov	r1, r2
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7fe fed2 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800daae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800dab2:	4619      	mov	r1, r3
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	f7fe ff38 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800daba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7ff fa7f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800dac4:	e031      	b.n	800db2a <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800dac6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800daca:	3301      	adds	r3, #1
 800dacc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800dad0:	f240 32c3 	movw	r2, #963	; 0x3c3
 800dad4:	4919      	ldr	r1, [pc, #100]	; (800db3c <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800dad6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800dada:	f7fe fc3f 	bl	800c35c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800dade:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800dae2:	4b15      	ldr	r3, [pc, #84]	; (800db38 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800dae4:	681c      	ldr	r4, [r3, #0]
 800dae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dae8:	68ba      	ldr	r2, [r7, #8]
 800daea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800daee:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800daf2:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800daf4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800daf8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7fe fea8 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800db02:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800db06:	4619      	mov	r1, r3
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	f7fe ff0e 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800db0e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800db12:	4618      	mov	r0, r3
 800db14:	f7ff fa55 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800db18:	f240 33c7 	movw	r3, #967	; 0x3c7
 800db1c:	4a07      	ldr	r2, [pc, #28]	; (800db3c <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800db1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800db22:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800db26:	f7fe fc2d 	bl	800c384 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800db2a:	bf00      	nop
}
 800db2c:	68f8      	ldr	r0, [r7, #12]
 800db2e:	379c      	adds	r7, #156	; 0x9c
 800db30:	46bd      	mov	sp, r7
 800db32:	bd90      	pop	{r4, r7, pc}
 800db34:	08024014 	.word	0x08024014
 800db38:	200000b0 	.word	0x200000b0
 800db3c:	08023f54 	.word	0x08023f54

0800db40 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b08a      	sub	sp, #40	; 0x28
 800db44:	af00      	add	r7, sp, #0
 800db46:	60f8      	str	r0, [r7, #12]
 800db48:	60b9      	str	r1, [r7, #8]
 800db4a:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800db4c:	491f      	ldr	r1, [pc, #124]	; (800dbcc <_Z16StringFromBinaryPKhj+0x8c>)
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f7fe fe7f 	bl	800c852 <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800db54:	2300      	movs	r3, #0
 800db56:	627b      	str	r3, [r7, #36]	; 0x24
 800db58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d219      	bcs.n	800db94 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800db60:	68ba      	ldr	r2, [r7, #8]
 800db62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db64:	4413      	add	r3, r2
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	461a      	mov	r2, r3
 800db6a:	f107 0314 	add.w	r3, r7, #20
 800db6e:	4918      	ldr	r1, [pc, #96]	; (800dbd0 <_Z16StringFromBinaryPKhj+0x90>)
 800db70:	4618      	mov	r0, r3
 800db72:	f7ff ff2d 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 800db76:	f107 0314 	add.w	r3, r7, #20
 800db7a:	4619      	mov	r1, r3
 800db7c:	68f8      	ldr	r0, [r7, #12]
 800db7e:	f7ff fa9d 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800db82:	f107 0314 	add.w	r3, r7, #20
 800db86:	4618      	mov	r0, r3
 800db88:	f7ff fa1b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800db8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8e:	3301      	adds	r3, #1
 800db90:	627b      	str	r3, [r7, #36]	; 0x24
 800db92:	e7e1      	b.n	800db58 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f7ff f9f3 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800db9a:	4603      	mov	r3, r0
 800db9c:	3b01      	subs	r3, #1
 800db9e:	f107 001c 	add.w	r0, r7, #28
 800dba2:	2200      	movs	r2, #0
 800dba4:	68f9      	ldr	r1, [r7, #12]
 800dba6:	f7ff fb15 	bl	800d1d4 <_ZNK12SimpleString9subStringEjj>
 800dbaa:	f107 031c 	add.w	r3, r7, #28
 800dbae:	4619      	mov	r1, r3
 800dbb0:	68f8      	ldr	r0, [r7, #12]
 800dbb2:	f7fe feba 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800dbb6:	f107 031c 	add.w	r3, r7, #28
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7ff fa01 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    return result;
 800dbc0:	bf00      	nop
}
 800dbc2:	68f8      	ldr	r0, [r7, #12]
 800dbc4:	3728      	adds	r7, #40	; 0x28
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	08024014 	.word	0x08024014
 800dbd0:	080240c0 	.word	0x080240c0

0800dbd4 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b084      	sub	sp, #16
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d006      	beq.n	800dbf4 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	68b9      	ldr	r1, [r7, #8]
 800dbec:	4618      	mov	r0, r3
 800dbee:	f7ff ffa7 	bl	800db40 <_Z16StringFromBinaryPKhj>
 800dbf2:	e004      	b.n	800dbfe <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	4904      	ldr	r1, [pc, #16]	; (800dc08 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7ff fc6f 	bl	800d4dc <_Z10StringFromPKc>
}
 800dbfe:	68f8      	ldr	r0, [r7, #12]
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	08024034 	.word	0x08024034

0800dc0c <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b088      	sub	sp, #32
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	4913      	ldr	r1, [pc, #76]	; (800dc6c <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7ff fed6 	bl	800d9d0 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b80      	cmp	r3, #128	; 0x80
 800dc28:	bf28      	it	cs
 800dc2a:	2380      	movcs	r3, #128	; 0x80
 800dc2c:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800dc2e:	f107 0314 	add.w	r3, r7, #20
 800dc32:	69fa      	ldr	r2, [r7, #28]
 800dc34:	68b9      	ldr	r1, [r7, #8]
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7ff ffcc 	bl	800dbd4 <_Z22StringFromBinaryOrNullPKhj>
 800dc3c:	f107 0314 	add.w	r3, r7, #20
 800dc40:	4619      	mov	r1, r3
 800dc42:	68f8      	ldr	r0, [r7, #12]
 800dc44:	f7ff fa3a 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800dc48:	f107 0314 	add.w	r3, r7, #20
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7ff f9b8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d903      	bls.n	800dc62 <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800dc5a:	4905      	ldr	r1, [pc, #20]	; (800dc70 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f7ff fa3f 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800dc62:	bf00      	nop
}
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	3720      	adds	r7, #32
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}
 800dc6c:	080240c8 	.word	0x080240c8
 800dc70:	080240e4 	.word	0x080240e4

0800dc74 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d006      	beq.n	800dc94 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	68b9      	ldr	r1, [r7, #8]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7ff ffbd 	bl	800dc0c <_Z24StringFromBinaryWithSizePKhj>
 800dc92:	e004      	b.n	800dc9e <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	4904      	ldr	r1, [pc, #16]	; (800dca8 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7ff fc1f 	bl	800d4dc <_Z10StringFromPKc>
}
 800dc9e:	68f8      	ldr	r0, [r7, #12]
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	08024034 	.word	0x08024034

0800dcac <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b088      	sub	sp, #32
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	60b9      	str	r1, [r7, #8]
 800dcb6:	607a      	str	r2, [r7, #4]
 800dcb8:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800dcba:	4925      	ldr	r1, [pc, #148]	; (800dd50 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	f7fe fdc8 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	2b04      	cmp	r3, #4
 800dcc6:	d802      	bhi.n	800dcce <_Z20StringFromMaskedBitsmmj+0x22>
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	00db      	lsls	r3, r3, #3
 800dccc:	e000      	b.n	800dcd0 <_Z20StringFromMaskedBitsmmj+0x24>
 800dcce:	2320      	movs	r3, #32
 800dcd0:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	3b01      	subs	r3, #1
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	fa02 f303 	lsl.w	r3, r2, r3
 800dcdc:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800dcde:	2300      	movs	r3, #0
 800dce0:	61fb      	str	r3, [r7, #28]
 800dce2:	69fa      	ldr	r2, [r7, #28]
 800dce4:	69bb      	ldr	r3, [r7, #24]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d22d      	bcs.n	800dd46 <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	4013      	ands	r3, r2
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00c      	beq.n	800dd0e <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800dcf4:	68ba      	ldr	r2, [r7, #8]
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	4013      	ands	r3, r2
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d001      	beq.n	800dd02 <_Z20StringFromMaskedBitsmmj+0x56>
 800dcfe:	4b15      	ldr	r3, [pc, #84]	; (800dd54 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800dd00:	e000      	b.n	800dd04 <_Z20StringFromMaskedBitsmmj+0x58>
 800dd02:	4b15      	ldr	r3, [pc, #84]	; (800dd58 <_Z20StringFromMaskedBitsmmj+0xac>)
 800dd04:	4619      	mov	r1, r3
 800dd06:	68f8      	ldr	r0, [r7, #12]
 800dd08:	f7ff f9ea 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
 800dd0c:	e003      	b.n	800dd16 <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800dd0e:	4913      	ldr	r1, [pc, #76]	; (800dd5c <_Z20StringFromMaskedBitsmmj+0xb0>)
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f7ff f9e5 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	f003 0307 	and.w	r3, r3, #7
 800dd1c:	2b07      	cmp	r3, #7
 800dd1e:	d108      	bne.n	800dd32 <_Z20StringFromMaskedBitsmmj+0x86>
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	3b01      	subs	r3, #1
 800dd24:	69fa      	ldr	r2, [r7, #28]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d003      	beq.n	800dd32 <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800dd2a:	490d      	ldr	r1, [pc, #52]	; (800dd60 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f7ff f9d7 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	005b      	lsls	r3, r3, #1
 800dd36:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	005b      	lsls	r3, r3, #1
 800dd3c:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	3301      	adds	r3, #1
 800dd42:	61fb      	str	r3, [r7, #28]
 800dd44:	e7cd      	b.n	800dce2 <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800dd46:	bf00      	nop
}
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	3720      	adds	r7, #32
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	08024014 	.word	0x08024014
 800dd54:	080240ec 	.word	0x080240ec
 800dd58:	080240f0 	.word	0x080240f0
 800dd5c:	080240f4 	.word	0x080240f4
 800dd60:	080240f8 	.word	0x080240f8

0800dd64 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b084      	sub	sp, #16
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800dd6e:	683a      	ldr	r2, [r7, #0]
 800dd70:	4b18      	ldr	r3, [pc, #96]	; (800ddd4 <_Z23StringFromOrdinalNumberj+0x70>)
 800dd72:	fba3 1302 	umull	r1, r3, r3, r2
 800dd76:	08d9      	lsrs	r1, r3, #3
 800dd78:	460b      	mov	r3, r1
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	440b      	add	r3, r1
 800dd7e:	005b      	lsls	r3, r3, #1
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	2b0a      	cmp	r3, #10
 800dd88:	d905      	bls.n	800dd96 <_Z23StringFromOrdinalNumberj+0x32>
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	2b0d      	cmp	r3, #13
 800dd8e:	d802      	bhi.n	800dd96 <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800dd90:	4b11      	ldr	r3, [pc, #68]	; (800ddd8 <_Z23StringFromOrdinalNumberj+0x74>)
 800dd92:	60fb      	str	r3, [r7, #12]
 800dd94:	e013      	b.n	800ddbe <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	2b03      	cmp	r3, #3
 800dd9a:	d102      	bne.n	800dda2 <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800dd9c:	4b0f      	ldr	r3, [pc, #60]	; (800dddc <_Z23StringFromOrdinalNumberj+0x78>)
 800dd9e:	60fb      	str	r3, [r7, #12]
 800dda0:	e00d      	b.n	800ddbe <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	2b02      	cmp	r3, #2
 800dda6:	d102      	bne.n	800ddae <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800dda8:	4b0d      	ldr	r3, [pc, #52]	; (800dde0 <_Z23StringFromOrdinalNumberj+0x7c>)
 800ddaa:	60fb      	str	r3, [r7, #12]
 800ddac:	e007      	b.n	800ddbe <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d102      	bne.n	800ddba <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800ddb4:	4b0b      	ldr	r3, [pc, #44]	; (800dde4 <_Z23StringFromOrdinalNumberj+0x80>)
 800ddb6:	60fb      	str	r3, [r7, #12]
 800ddb8:	e001      	b.n	800ddbe <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800ddba:	4b07      	ldr	r3, [pc, #28]	; (800ddd8 <_Z23StringFromOrdinalNumberj+0x74>)
 800ddbc:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	683a      	ldr	r2, [r7, #0]
 800ddc4:	4908      	ldr	r1, [pc, #32]	; (800dde8 <_Z23StringFromOrdinalNumberj+0x84>)
 800ddc6:	f7ff fe03 	bl	800d9d0 <_Z16StringFromFormatPKcz>
}
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	cccccccd 	.word	0xcccccccd
 800ddd8:	080240fc 	.word	0x080240fc
 800dddc:	08024100 	.word	0x08024100
 800dde0:	08024104 	.word	0x08024104
 800dde4:	08024108 	.word	0x08024108
 800dde8:	0802410c 	.word	0x0802410c

0800ddec <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	3304      	adds	r3, #4
 800ddf8:	4907      	ldr	r1, [pc, #28]	; (800de18 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f7fe fd29 	bl	800c852 <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2200      	movs	r2, #0
 800de04:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2200      	movs	r2, #0
 800de0a:	60da      	str	r2, [r3, #12]
}
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	4618      	mov	r0, r3
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	08024014 	.word	0x08024014

0800de1c <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800de1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de1e:	b083      	sub	sp, #12
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d01e      	beq.n	800de6c <_ZN22SimpleStringCollection8allocateEj+0x50>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	3b04      	subs	r3, #4
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	00db      	lsls	r3, r3, #3
 800de3c:	18d4      	adds	r4, r2, r3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	429c      	cmp	r4, r3
 800de44:	d004      	beq.n	800de50 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800de46:	3c08      	subs	r4, #8
 800de48:	4620      	mov	r0, r4
 800de4a:	f7ff f8ba 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800de4e:	e7f6      	b.n	800de3e <_ZN22SimpleStringCollection8allocateEj+0x22>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f1a3 0208 	sub.w	r2, r3, #8
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	3b04      	subs	r3, #4
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	3301      	adds	r3, #1
 800de62:	00db      	lsls	r3, r3, #3
 800de64:	4619      	mov	r1, r3
 800de66:	4610      	mov	r0, r2
 800de68:	f7fc f976 	bl	800a158 <_ZdaPvj>

    size_ = _size;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	683a      	ldr	r2, [r7, #0]
 800de70:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	68dc      	ldr	r4, [r3, #12]
 800de76:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800de7a:	d202      	bcs.n	800de82 <_ZN22SimpleStringCollection8allocateEj+0x66>
 800de7c:	1c63      	adds	r3, r4, #1
 800de7e:	00db      	lsls	r3, r3, #3
 800de80:	e001      	b.n	800de86 <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800de82:	f04f 33ff 	mov.w	r3, #4294967295
 800de86:	f240 4227 	movw	r2, #1063	; 0x427
 800de8a:	4910      	ldr	r1, [pc, #64]	; (800decc <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7fc f941 	bl	800a114 <_ZnajPKci>
 800de92:	4605      	mov	r5, r0
 800de94:	1d2b      	adds	r3, r5, #4
 800de96:	3b04      	subs	r3, #4
 800de98:	2208      	movs	r2, #8
 800de9a:	601a      	str	r2, [r3, #0]
 800de9c:	1d2b      	adds	r3, r5, #4
 800de9e:	601c      	str	r4, [r3, #0]
 800dea0:	f105 0308 	add.w	r3, r5, #8
 800dea4:	1e62      	subs	r2, r4, #1
 800dea6:	4614      	mov	r4, r2
 800dea8:	461e      	mov	r6, r3
 800deaa:	2c00      	cmp	r4, #0
 800deac:	db06      	blt.n	800debc <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800deae:	4908      	ldr	r1, [pc, #32]	; (800ded0 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800deb0:	4630      	mov	r0, r6
 800deb2:	f7fe fcce 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800deb6:	3608      	adds	r6, #8
 800deb8:	3c01      	subs	r4, #1
 800deba:	e7f6      	b.n	800deaa <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800debc:	f105 0208 	add.w	r2, r5, #8
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	601a      	str	r2, [r3, #0]
}
 800dec4:	bf00      	nop
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800decc:	08023f54 	.word	0x08023f54
 800ded0:	08024014 	.word	0x08024014

0800ded4 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800ded4:	b590      	push	{r4, r7, lr}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d01e      	beq.n	800df22 <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	3b04      	subs	r3, #4
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	00db      	lsls	r3, r3, #3
 800def2:	18d4      	adds	r4, r2, r3
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	429c      	cmp	r4, r3
 800defa:	d004      	beq.n	800df06 <_ZN22SimpleStringCollectionD1Ev+0x32>
 800defc:	3c08      	subs	r4, #8
 800defe:	4620      	mov	r0, r4
 800df00:	f7ff f85f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800df04:	e7f6      	b.n	800def4 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f1a3 0208 	sub.w	r2, r3, #8
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	3b04      	subs	r3, #4
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	3301      	adds	r3, #1
 800df18:	00db      	lsls	r3, r3, #3
 800df1a:	4619      	mov	r1, r3
 800df1c:	4610      	mov	r0, r2
 800df1e:	f7fc f91b 	bl	800a158 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	3304      	adds	r3, #4
 800df26:	4618      	mov	r0, r3
 800df28:	f7ff f84b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	4618      	mov	r0, r3
 800df30:	370c      	adds	r7, #12
 800df32:	46bd      	mov	sp, r7
 800df34:	bd90      	pop	{r4, r7, pc}

0800df36 <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800df36:	b480      	push	{r7}
 800df38:	b083      	sub	sp, #12
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	6078      	str	r0, [r7, #4]
    return size_;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	68db      	ldr	r3, [r3, #12]
}
 800df42:	4618      	mov	r0, r3
 800df44:	370c      	adds	r7, #12
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr
	...

0800df50 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800df50:	b590      	push	{r4, r7, lr}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	683a      	ldr	r2, [r7, #0]
 800df60:	429a      	cmp	r2, r3
 800df62:	d315      	bcc.n	800df90 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	1d1c      	adds	r4, r3, #4
 800df68:	f107 0308 	add.w	r3, r7, #8
 800df6c:	490d      	ldr	r1, [pc, #52]	; (800dfa4 <_ZN22SimpleStringCollectionixEj+0x54>)
 800df6e:	4618      	mov	r0, r3
 800df70:	f7fe fc6f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800df74:	f107 0308 	add.w	r3, r7, #8
 800df78:	4619      	mov	r1, r3
 800df7a:	4620      	mov	r0, r4
 800df7c:	f7fe fcd5 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800df80:	f107 0308 	add.w	r3, r7, #8
 800df84:	4618      	mov	r0, r3
 800df86:	f7ff f81c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        return empty_;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	3304      	adds	r3, #4
 800df8e:	e004      	b.n	800df9a <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	00db      	lsls	r3, r3, #3
 800df98:	4413      	add	r3, r2
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3714      	adds	r7, #20
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd90      	pop	{r4, r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	08024014 	.word	0x08024014

0800dfa8 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f7fa fb88 	bl	80086c8 <_ZN17ConsoleTestOutputC1Ev>
 800dfb8:	4a08      	ldr	r2, [pc, #32]	; (800dfdc <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	601a      	str	r2, [r3, #0]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	611a      	str	r2, [r3, #16]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	3314      	adds	r3, #20
 800dfc8:	4905      	ldr	r1, [pc, #20]	; (800dfe0 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fe fc41 	bl	800c852 <_ZN12SimpleStringC1EPKc>
{
}
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3708      	adds	r7, #8
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	08027cfc 	.word	0x08027cfc
 800dfe0:	08024114 	.word	0x08024114

0800dfe4 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b082      	sub	sp, #8
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	4a08      	ldr	r2, [pc, #32]	; (800e010 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	601a      	str	r2, [r3, #0]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	3314      	adds	r3, #20
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fe ffe3 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	4618      	mov	r0, r3
 800e000:	f7fa fb74 	bl	80086ec <_ZN17ConsoleTestOutputD1Ev>
{
}
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	4618      	mov	r0, r3
 800e008:	3708      	adds	r7, #8
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	08027cfc 	.word	0x08027cfc

0800e014 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
}
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f7ff ffe1 	bl	800dfe4 <_ZN18TeamCityTestOutputD1Ev>
 800e022:	211c      	movs	r1, #28
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f7fc f865 	bl	800a0f4 <_ZdlPvj>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	4618      	mov	r0, r3
 800e02e:	3708      	adds	r7, #8
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b086      	sub	sp, #24
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	332c      	adds	r3, #44	; 0x2c
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	492b      	ldr	r1, [pc, #172]	; (800e0f8 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800e04a:	4610      	mov	r0, r2
 800e04c:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800e04e:	f107 0308 	add.w	r3, r7, #8
 800e052:	6839      	ldr	r1, [r7, #0]
 800e054:	4618      	mov	r0, r3
 800e056:	f004 fdf7 	bl	8012c48 <_ZNK10UtestShell7getNameEv>
 800e05a:	f107 0308 	add.w	r3, r7, #8
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fe ff82 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800e064:	4603      	mov	r3, r0
 800e066:	4619      	mov	r1, r3
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 f919 	bl	800e2a0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e06e:	f107 0308 	add.w	r3, r7, #8
 800e072:	4618      	mov	r0, r3
 800e074:	f7fe ffa5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	332c      	adds	r3, #44	; 0x2c
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	491e      	ldr	r1, [pc, #120]	; (800e0fc <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800e084:	4610      	mov	r0, r2
 800e086:	4798      	blx	r3
    if (!test.willRun()) {
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	3318      	adds	r3, #24
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	6838      	ldr	r0, [r7, #0]
 800e092:	4798      	blx	r3
 800e094:	4603      	mov	r3, r0
 800e096:	f083 0301 	eor.w	r3, r3, #1
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d024      	beq.n	800e0ea <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	332c      	adds	r3, #44	; 0x2c
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4915      	ldr	r1, [pc, #84]	; (800e100 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800e0ac:	4610      	mov	r0, r2
 800e0ae:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800e0b0:	f107 0310 	add.w	r3, r7, #16
 800e0b4:	6839      	ldr	r1, [r7, #0]
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f004 fdc6 	bl	8012c48 <_ZNK10UtestShell7getNameEv>
 800e0bc:	f107 0310 	add.w	r3, r7, #16
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7fe ff51 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 f8e8 	bl	800e2a0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e0d0:	f107 0310 	add.w	r3, r7, #16
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7fe ff74 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        print("']\n");
 800e0da:	687a      	ldr	r2, [r7, #4]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	332c      	adds	r3, #44	; 0x2c
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4905      	ldr	r1, [pc, #20]	; (800e0fc <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800e0e6:	4610      	mov	r0, r2
 800e0e8:	4798      	blx	r3
    }
    currtest_ = &test;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	683a      	ldr	r2, [r7, #0]
 800e0ee:	611a      	str	r2, [r3, #16]
}
 800e0f0:	bf00      	nop
 800e0f2:	3718      	adds	r7, #24
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}
 800e0f8:	08024118 	.word	0x08024118
 800e0fc:	08024138 	.word	0x08024138
 800e100:	0802413c 	.word	0x0802413c

0800e104 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800e104:	b5b0      	push	{r4, r5, r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	691b      	ldr	r3, [r3, #16]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d03b      	beq.n	800e18e <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800e116:	687a      	ldr	r2, [r7, #4]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	332c      	adds	r3, #44	; 0x2c
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	491d      	ldr	r1, [pc, #116]	; (800e198 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800e122:	4610      	mov	r0, r2
 800e124:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	691a      	ldr	r2, [r3, #16]
 800e12a:	f107 0308 	add.w	r3, r7, #8
 800e12e:	4611      	mov	r1, r2
 800e130:	4618      	mov	r0, r3
 800e132:	f004 fd89 	bl	8012c48 <_ZNK10UtestShell7getNameEv>
 800e136:	f107 0308 	add.w	r3, r7, #8
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7fe ff14 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800e140:	4603      	mov	r3, r0
 800e142:	4619      	mov	r1, r3
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f000 f8ab 	bl	800e2a0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e14a:	f107 0308 	add.w	r3, r7, #8
 800e14e:	4618      	mov	r0, r3
 800e150:	f7fe ff37 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	332c      	adds	r3, #44	; 0x2c
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	490f      	ldr	r1, [pc, #60]	; (800e19c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800e160:	4610      	mov	r0, r2
 800e162:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800e164:	687d      	ldr	r5, [r7, #4]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	3334      	adds	r3, #52	; 0x34
 800e16c:	681c      	ldr	r4, [r3, #0]
 800e16e:	6838      	ldr	r0, [r7, #0]
 800e170:	f004 fa0a 	bl	8012588 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800e174:	4603      	mov	r3, r0
 800e176:	4619      	mov	r1, r3
 800e178:	4628      	mov	r0, r5
 800e17a:	47a0      	blx	r4
    print("']\n");
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	332c      	adds	r3, #44	; 0x2c
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	4906      	ldr	r1, [pc, #24]	; (800e1a0 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800e188:	4610      	mov	r0, r2
 800e18a:	4798      	blx	r3
 800e18c:	e000      	b.n	800e190 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800e18e:	bf00      	nop
}
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bdb0      	pop	{r4, r5, r7, pc}
 800e196:	bf00      	nop
 800e198:	0802415c 	.word	0x0802415c
 800e19c:	0802417c 	.word	0x0802417c
 800e1a0:	08024138 	.word	0x08024138

0800e1a4 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800e1a4:	b590      	push	{r4, r7, lr}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f103 0414 	add.w	r4, r3, #20
 800e1b4:	f107 0308 	add.w	r3, r7, #8
 800e1b8:	6839      	ldr	r1, [r7, #0]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f004 fd53 	bl	8012c66 <_ZNK10UtestShell8getGroupEv>
 800e1c0:	f107 0308 	add.w	r3, r7, #8
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f7fe fbaf 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800e1cc:	f107 0308 	add.w	r3, r7, #8
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7fe fef6 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	332c      	adds	r3, #44	; 0x2c
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	490c      	ldr	r1, [pc, #48]	; (800e214 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800e1e2:	4610      	mov	r0, r2
 800e1e4:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	3314      	adds	r3, #20
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fe febc 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	4619      	mov	r1, r3
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f000 f853 	bl	800e2a0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	332c      	adds	r3, #44	; 0x2c
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4904      	ldr	r1, [pc, #16]	; (800e218 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800e206:	4610      	mov	r0, r2
 800e208:	4798      	blx	r3
}
 800e20a:	bf00      	nop
 800e20c:	3714      	adds	r7, #20
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd90      	pop	{r4, r7, pc}
 800e212:	bf00      	nop
 800e214:	0802418c 	.word	0x0802418c
 800e218:	08024138 	.word	0x08024138

0800e21c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800e21c:	b590      	push	{r4, r7, lr}
 800e21e:	b085      	sub	sp, #20
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f103 0414 	add.w	r4, r3, #20
 800e22c:	f107 0308 	add.w	r3, r7, #8
 800e230:	4918      	ldr	r1, [pc, #96]	; (800e294 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800e232:	4618      	mov	r0, r3
 800e234:	f7fe fb0d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800e238:	f107 0308 	add.w	r3, r7, #8
 800e23c:	4619      	mov	r1, r3
 800e23e:	4620      	mov	r0, r4
 800e240:	f7fe fecb 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 800e244:	4603      	mov	r3, r0
 800e246:	461c      	mov	r4, r3
 800e248:	f107 0308 	add.w	r3, r7, #8
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7fe feb8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800e252:	2c00      	cmp	r4, #0
 800e254:	d11a      	bne.n	800e28c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	332c      	adds	r3, #44	; 0x2c
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	490d      	ldr	r1, [pc, #52]	; (800e298 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800e262:	4610      	mov	r0, r2
 800e264:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	3314      	adds	r3, #20
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fe fe7c 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800e270:	4603      	mov	r3, r0
 800e272:	4619      	mov	r1, r3
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 f813 	bl	800e2a0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	332c      	adds	r3, #44	; 0x2c
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4905      	ldr	r1, [pc, #20]	; (800e29c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800e286:	4610      	mov	r0, r2
 800e288:	4798      	blx	r3
 800e28a:	e000      	b.n	800e28e <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800e28c:	bf00      	nop
}
 800e28e:	3714      	adds	r7, #20
 800e290:	46bd      	mov	sp, r7
 800e292:	bd90      	pop	{r4, r7, pc}
 800e294:	08024114 	.word	0x08024114
 800e298:	080241b0 	.word	0x080241b0
 800e29c:	08024138 	.word	0x08024138

0800e2a0 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
    while (*s) {
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d03f      	beq.n	800e332 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	2b27      	cmp	r3, #39	; 0x27
 800e2b8:	d00b      	beq.n	800e2d2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	2b7c      	cmp	r3, #124	; 0x7c
 800e2c0:	d007      	beq.n	800e2d2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	2b5b      	cmp	r3, #91	; 0x5b
 800e2c8:	d003      	beq.n	800e2d2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	2b5d      	cmp	r3, #93	; 0x5d
 800e2d0:	d107      	bne.n	800e2e2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800e2d2:	237c      	movs	r3, #124	; 0x7c
 800e2d4:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	73bb      	strb	r3, [r7, #14]
 800e2e0:	e01a      	b.n	800e318 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	2b0d      	cmp	r3, #13
 800e2e8:	d106      	bne.n	800e2f8 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800e2ea:	237c      	movs	r3, #124	; 0x7c
 800e2ec:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800e2ee:	2372      	movs	r3, #114	; 0x72
 800e2f0:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	73bb      	strb	r3, [r7, #14]
 800e2f6:	e00f      	b.n	800e318 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	2b0a      	cmp	r3, #10
 800e2fe:	d106      	bne.n	800e30e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800e300:	237c      	movs	r3, #124	; 0x7c
 800e302:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800e304:	236e      	movs	r3, #110	; 0x6e
 800e306:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800e308:	2300      	movs	r3, #0
 800e30a:	73bb      	strb	r3, [r7, #14]
 800e30c:	e004      	b.n	800e318 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800e314:	2300      	movs	r3, #0
 800e316:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	3328      	adds	r3, #40	; 0x28
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f107 010c 	add.w	r1, r7, #12
 800e326:	4610      	mov	r0, r2
 800e328:	4798      	blx	r3
        s++;
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	3301      	adds	r3, #1
 800e32e:	603b      	str	r3, [r7, #0]
    while (*s) {
 800e330:	e7bb      	b.n	800e2aa <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800e332:	bf00      	nop
 800e334:	3710      	adds	r7, #16
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
	...

0800e33c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800e33c:	b5b0      	push	{r4, r5, r7, lr}
 800e33e:	b08a      	sub	sp, #40	; 0x28
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	332c      	adds	r3, #44	; 0x2c
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4968      	ldr	r1, [pc, #416]	; (800e4f4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800e352:	4610      	mov	r0, r2
 800e354:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	3310      	adds	r3, #16
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f107 0208 	add.w	r2, r7, #8
 800e362:	6839      	ldr	r1, [r7, #0]
 800e364:	4610      	mov	r0, r2
 800e366:	4798      	blx	r3
 800e368:	f107 0308 	add.w	r3, r7, #8
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7fe fdfb 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800e372:	4603      	mov	r3, r0
 800e374:	4619      	mov	r1, r3
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f7ff ff92 	bl	800e2a0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e37c:	f107 0308 	add.w	r3, r7, #8
 800e380:	4618      	mov	r0, r3
 800e382:	f7fe fe1e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    print("' message='");
 800e386:	687a      	ldr	r2, [r7, #4]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	332c      	adds	r3, #44	; 0x2c
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4959      	ldr	r1, [pc, #356]	; (800e4f8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800e392:	4610      	mov	r0, r2
 800e394:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800e396:	6838      	ldr	r0, [r7, #0]
 800e398:	f000 fa15 	bl	800e7c6 <_ZNK11TestFailure17isOutsideTestFileEv>
 800e39c:	4603      	mov	r3, r0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d105      	bne.n	800e3ae <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800e3a2:	6838      	ldr	r0, [r7, #0]
 800e3a4:	f000 fa21 	bl	800e7ea <_ZNK11TestFailure18isInHelperFunctionEv>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d001      	beq.n	800e3b2 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	e000      	b.n	800e3b4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d042      	beq.n	800e43e <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	332c      	adds	r3, #44	; 0x2c
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	494e      	ldr	r1, [pc, #312]	; (800e4fc <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800e3c4:	4610      	mov	r0, r2
 800e3c6:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800e3c8:	687d      	ldr	r5, [r7, #4]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	332c      	adds	r3, #44	; 0x2c
 800e3d0:	681c      	ldr	r4, [r3, #0]
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	331c      	adds	r3, #28
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f107 0210 	add.w	r2, r7, #16
 800e3de:	6839      	ldr	r1, [r7, #0]
 800e3e0:	4610      	mov	r0, r2
 800e3e2:	4798      	blx	r3
 800e3e4:	f107 0310 	add.w	r3, r7, #16
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7fe fdbd 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	47a0      	blx	r4
 800e3f6:	f107 0310 	add.w	r3, r7, #16
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fe fde1 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        print(":");
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	332c      	adds	r3, #44	; 0x2c
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	493d      	ldr	r1, [pc, #244]	; (800e500 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800e40c:	4610      	mov	r0, r2
 800e40e:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800e410:	687d      	ldr	r5, [r7, #4]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	3334      	adds	r3, #52	; 0x34
 800e418:	681c      	ldr	r4, [r3, #0]
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	3320      	adds	r3, #32
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	6838      	ldr	r0, [r7, #0]
 800e424:	4798      	blx	r3
 800e426:	4603      	mov	r3, r0
 800e428:	4619      	mov	r1, r3
 800e42a:	4628      	mov	r0, r5
 800e42c:	47a0      	blx	r4
        print("): ");
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	332c      	adds	r3, #44	; 0x2c
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	4932      	ldr	r1, [pc, #200]	; (800e504 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800e43a:	4610      	mov	r0, r2
 800e43c:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	3308      	adds	r3, #8
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f107 0218 	add.w	r2, r7, #24
 800e44a:	6839      	ldr	r1, [r7, #0]
 800e44c:	4610      	mov	r0, r2
 800e44e:	4798      	blx	r3
 800e450:	f107 0318 	add.w	r3, r7, #24
 800e454:	4618      	mov	r0, r3
 800e456:	f7fe fd87 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800e45a:	4603      	mov	r3, r0
 800e45c:	4619      	mov	r1, r3
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f7ff ff1e 	bl	800e2a0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e464:	f107 0318 	add.w	r3, r7, #24
 800e468:	4618      	mov	r0, r3
 800e46a:	f7fe fdaa 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    print(":");
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	332c      	adds	r3, #44	; 0x2c
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4921      	ldr	r1, [pc, #132]	; (800e500 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800e47a:	4610      	mov	r0, r2
 800e47c:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800e47e:	687d      	ldr	r5, [r7, #4]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	3334      	adds	r3, #52	; 0x34
 800e486:	681c      	ldr	r4, [r3, #0]
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	3314      	adds	r3, #20
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	6838      	ldr	r0, [r7, #0]
 800e492:	4798      	blx	r3
 800e494:	4603      	mov	r3, r0
 800e496:	4619      	mov	r1, r3
 800e498:	4628      	mov	r0, r5
 800e49a:	47a0      	blx	r4

    print("' details='");
 800e49c:	687a      	ldr	r2, [r7, #4]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	332c      	adds	r3, #44	; 0x2c
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	4918      	ldr	r1, [pc, #96]	; (800e508 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800e4a8:	4610      	mov	r0, r2
 800e4aa:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	3318      	adds	r3, #24
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f107 0220 	add.w	r2, r7, #32
 800e4b8:	6839      	ldr	r1, [r7, #0]
 800e4ba:	4610      	mov	r0, r2
 800e4bc:	4798      	blx	r3
 800e4be:	f107 0320 	add.w	r3, r7, #32
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7fe fd50 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f7ff fee7 	bl	800e2a0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e4d2:	f107 0320 	add.w	r3, r7, #32
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fe fd73 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800e4dc:	687a      	ldr	r2, [r7, #4]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	332c      	adds	r3, #44	; 0x2c
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4909      	ldr	r1, [pc, #36]	; (800e50c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800e4e8:	4610      	mov	r0, r2
 800e4ea:	4798      	blx	r3
}
 800e4ec:	bf00      	nop
 800e4ee:	3728      	adds	r7, #40	; 0x28
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bdb0      	pop	{r4, r5, r7, pc}
 800e4f4:	080241d4 	.word	0x080241d4
 800e4f8:	080241f4 	.word	0x080241f4
 800e4fc:	08024200 	.word	0x08024200
 800e500:	08024210 	.word	0x08024210
 800e504:	08024214 	.word	0x08024214
 800e508:	08024218 	.word	0x08024218
 800e50c:	08024138 	.word	0x08024138

0800e510 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
 800e516:	60f8      	str	r0, [r7, #12]
 800e518:	60b9      	str	r1, [r7, #8]
 800e51a:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800e51c:	4a1a      	ldr	r2, [pc, #104]	; (800e588 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	601a      	str	r2, [r3, #0]
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	3314      	adds	r3, #20
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	68fa      	ldr	r2, [r7, #12]
 800e52c:	3204      	adds	r2, #4
 800e52e:	68b9      	ldr	r1, [r7, #8]
 800e530:	4610      	mov	r0, r2
 800e532:	4798      	blx	r3
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	330c      	adds	r3, #12
 800e538:	68b9      	ldr	r1, [r7, #8]
 800e53a:	4618      	mov	r0, r3
 800e53c:	f004 fb84 	bl	8012c48 <_ZNK10UtestShell7getNameEv>
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	3314      	adds	r3, #20
 800e544:	68b9      	ldr	r1, [r7, #8]
 800e546:	4618      	mov	r0, r3
 800e548:	f004 fc4f 	bl	8012dea <_ZNK10UtestShell7getFileEv>
 800e54c:	68b8      	ldr	r0, [r7, #8]
 800e54e:	f004 fc5b 	bl	8012e08 <_ZNK10UtestShell13getLineNumberEv>
 800e552:	4602      	mov	r2, r0
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	61da      	str	r2, [r3, #28]
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	3320      	adds	r3, #32
 800e55c:	68b9      	ldr	r1, [r7, #8]
 800e55e:	4618      	mov	r0, r3
 800e560:	f004 fc43 	bl	8012dea <_ZNK10UtestShell7getFileEv>
 800e564:	68b8      	ldr	r0, [r7, #8]
 800e566:	f004 fc4f 	bl	8012e08 <_ZNK10UtestShell13getLineNumberEv>
 800e56a:	4602      	mov	r2, r0
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	629a      	str	r2, [r3, #40]	; 0x28
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	332c      	adds	r3, #44	; 0x2c
 800e574:	6879      	ldr	r1, [r7, #4]
 800e576:	4618      	mov	r0, r3
 800e578:	f7fe f9bf 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
{
}
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	4618      	mov	r0, r3
 800e580:	3710      	adds	r7, #16
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	08027fc8 	.word	0x08027fc8

0800e58c <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	60b9      	str	r1, [r7, #8]
 800e596:	607a      	str	r2, [r7, #4]
 800e598:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800e59a:	4a19      	ldr	r2, [pc, #100]	; (800e600 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	601a      	str	r2, [r3, #0]
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	3314      	adds	r3, #20
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	3204      	adds	r2, #4
 800e5ac:	68b9      	ldr	r1, [r7, #8]
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	4798      	blx	r3
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	330c      	adds	r3, #12
 800e5b6:	68b9      	ldr	r1, [r7, #8]
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f004 fb45 	bl	8012c48 <_ZNK10UtestShell7getNameEv>
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	3314      	adds	r3, #20
 800e5c2:	6879      	ldr	r1, [r7, #4]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7fe f944 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	683a      	ldr	r2, [r7, #0]
 800e5ce:	61da      	str	r2, [r3, #28]
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	3320      	adds	r3, #32
 800e5d4:	68b9      	ldr	r1, [r7, #8]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f004 fc07 	bl	8012dea <_ZNK10UtestShell7getFileEv>
 800e5dc:	68b8      	ldr	r0, [r7, #8]
 800e5de:	f004 fc13 	bl	8012e08 <_ZNK10UtestShell13getLineNumberEv>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	629a      	str	r2, [r3, #40]	; 0x28
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	332c      	adds	r3, #44	; 0x2c
 800e5ec:	4905      	ldr	r1, [pc, #20]	; (800e604 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7fe f92f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
{
}
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3710      	adds	r7, #16
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	08027fc8 	.word	0x08027fc8
 800e604:	08024224 	.word	0x08024224

0800e608 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800e612:	4a1e      	ldr	r2, [pc, #120]	; (800e68c <_ZN11TestFailureC1ERKS_+0x84>)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	601a      	str	r2, [r3, #0]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	1d1a      	adds	r2, r3, #4
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	3304      	adds	r3, #4
 800e620:	4619      	mov	r1, r3
 800e622:	4610      	mov	r0, r2
 800e624:	f7fe f969 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f103 020c 	add.w	r2, r3, #12
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	330c      	adds	r3, #12
 800e632:	4619      	mov	r1, r3
 800e634:	4610      	mov	r0, r2
 800e636:	f7fe f960 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f103 0214 	add.w	r2, r3, #20
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	3314      	adds	r3, #20
 800e644:	4619      	mov	r1, r3
 800e646:	4610      	mov	r0, r2
 800e648:	f7fe f957 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	69da      	ldr	r2, [r3, #28]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	61da      	str	r2, [r3, #28]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f103 0220 	add.w	r2, r3, #32
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	3320      	adds	r3, #32
 800e65e:	4619      	mov	r1, r3
 800e660:	4610      	mov	r0, r2
 800e662:	f7fe f94a 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	629a      	str	r2, [r3, #40]	; 0x28
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	332c      	adds	r3, #44	; 0x2c
 800e678:	4619      	mov	r1, r3
 800e67a:	4610      	mov	r0, r2
 800e67c:	f7fe f93d 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
{
}
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	4618      	mov	r0, r3
 800e684:	3708      	adds	r7, #8
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	08027fc8 	.word	0x08027fc8

0800e690 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	4a10      	ldr	r2, [pc, #64]	; (800e6dc <_ZN11TestFailureD1Ev+0x4c>)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	601a      	str	r2, [r3, #0]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	332c      	adds	r3, #44	; 0x2c
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7fe fc8d 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	3320      	adds	r3, #32
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7fe fc88 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	3314      	adds	r3, #20
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fe fc83 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	330c      	adds	r3, #12
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7fe fc7e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	3304      	adds	r3, #4
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7fe fc79 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
{
}
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3708      	adds	r7, #8
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	08027fc8 	.word	0x08027fc8

0800e6e0 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
}
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f7ff ffd1 	bl	800e690 <_ZN11TestFailureD1Ev>
 800e6ee:	2134      	movs	r1, #52	; 0x34
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f7fb fcff 	bl	800a0f4 <_ZdlPvj>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
    return fileName_;
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	3314      	adds	r3, #20
 800e70e:	4619      	mov	r1, r3
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f7fe f8f2 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
}
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	3708      	adds	r7, #8
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800e71e:	b580      	push	{r7, lr}
 800e720:	b082      	sub	sp, #8
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
 800e726:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	3320      	adds	r3, #32
 800e72c:	4619      	mov	r1, r3
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f7fe f8e3 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
}
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	3708      	adds	r7, #8
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b082      	sub	sp, #8
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
    return testName_;
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	3304      	adds	r3, #4
 800e74a:	4619      	mov	r1, r3
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f7fe f8d4 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
}
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	3708      	adds	r7, #8
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b082      	sub	sp, #8
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
 800e762:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	330c      	adds	r3, #12
 800e768:	4619      	mov	r1, r3
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f7fe f8c5 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
}
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	3708      	adds	r7, #8
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	69db      	ldr	r3, [r3, #28]
}
 800e784:	4618      	mov	r0, r3
 800e786:	370c      	adds	r7, #12
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr

0800e790 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	370c      	adds	r7, #12
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr

0800e7a8 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
    return message_;
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	332c      	adds	r3, #44	; 0x2c
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7fe f89e 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
}
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	3708      	adds	r7, #8
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b082      	sub	sp, #8
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f103 0220 	add.w	r2, r3, #32
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	3314      	adds	r3, #20
 800e7d8:	4619      	mov	r1, r3
 800e7da:	4610      	mov	r0, r2
 800e7dc:	f7fe fc42 	bl	800d064 <_ZneRK12SimpleStringS1_>
 800e7e0:	4603      	mov	r3, r0
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3708      	adds	r7, #8
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}

0800e7ea <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800e7ea:	b480      	push	{r7}
 800e7ec:	b083      	sub	sp, #12
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	69da      	ldr	r2, [r3, #28]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	bf34      	ite	cc
 800e7fe:	2301      	movcc	r3, #1
 800e800:	2300      	movcs	r3, #0
 800e802:	b2db      	uxtb	r3, r3
}
 800e804:	4618      	mov	r0, r3
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800e810:	b590      	push	{r4, r7, lr}
 800e812:	b085      	sub	sp, #20
 800e814:	af00      	add	r7, sp, #0
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	607a      	str	r2, [r7, #4]
 800e81c:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f7fe fba2 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800e824:	4604      	mov	r4, r0
 800e826:	6838      	ldr	r0, [r7, #0]
 800e828:	f7fe fb9e 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800e82c:	4603      	mov	r3, r0
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	4622      	mov	r2, r4
 800e832:	4903      	ldr	r1, [pc, #12]	; (800e840 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800e834:	f7ff f8cc 	bl	800d9d0 <_Z16StringFromFormatPKcz>
}
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	3714      	adds	r7, #20
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd90      	pop	{r4, r7, pc}
 800e840:	08024230 	.word	0x08024230

0800e844 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800e844:	b590      	push	{r4, r7, lr}
 800e846:	b097      	sub	sp, #92	; 0x5c
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	607a      	str	r2, [r7, #4]
 800e850:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800e852:	494c      	ldr	r1, [pc, #304]	; (800e984 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800e854:	68f8      	ldr	r0, [r7, #12]
 800e856:	f7fd fffc 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800e85a:	2314      	movs	r3, #20
 800e85c:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800e85e:	230a      	movs	r3, #10
 800e860:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800e862:	f107 0320 	add.w	r3, r7, #32
 800e866:	220a      	movs	r2, #10
 800e868:	4947      	ldr	r1, [pc, #284]	; (800e988 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fe f80c 	bl	800c888 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800e870:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e874:	f107 0120 	add.w	r1, r7, #32
 800e878:	687a      	ldr	r2, [r7, #4]
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7fe fc03 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800e880:	f107 0318 	add.w	r3, r7, #24
 800e884:	f107 0220 	add.w	r2, r7, #32
 800e888:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fe fbfa 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800e892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e896:	4618      	mov	r0, r3
 800e898:	f7fe fb93 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800e89c:	f107 0310 	add.w	r3, r7, #16
 800e8a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e8a2:	493a      	ldr	r1, [pc, #232]	; (800e98c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7ff f893 	bl	800d9d0 <_Z16StringFromFormatPKcz>

    result += "\n";
 800e8aa:	4939      	ldr	r1, [pc, #228]	; (800e990 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800e8ac:	68f8      	ldr	r0, [r7, #12]
 800e8ae:	f7fe fc17 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800e8b2:	f107 0310 	add.w	r3, r7, #16
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7fe fb56 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800e8bc:	4604      	mov	r4, r0
 800e8be:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800e8c2:	f107 0118 	add.w	r1, r7, #24
 800e8c6:	2314      	movs	r3, #20
 800e8c8:	683a      	ldr	r2, [r7, #0]
 800e8ca:	f7fe fc83 	bl	800d1d4 <_ZNK12SimpleString9subStringEjj>
 800e8ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7fe fb48 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e8de:	4622      	mov	r2, r4
 800e8e0:	492c      	ldr	r1, [pc, #176]	; (800e994 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800e8e2:	f7ff f875 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 800e8e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	f7fe fbe5 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800e8f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7fe fb63 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800e8fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e900:	4618      	mov	r0, r3
 800e902:	f7fe fb5e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800e906:	f107 0310 	add.w	r3, r7, #16
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7fe fb38 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 800e910:	4603      	mov	r3, r0
 800e912:	f103 020a 	add.w	r2, r3, #10
 800e916:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e91a:	491b      	ldr	r1, [pc, #108]	; (800e988 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7fd ffb3 	bl	800c888 <_ZN12SimpleStringC1EPKcj>
 800e922:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e926:	4618      	mov	r0, r3
 800e928:	f7fe fb1e 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800e92c:	4602      	mov	r2, r0
 800e92e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e932:	4919      	ldr	r1, [pc, #100]	; (800e998 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800e934:	4618      	mov	r0, r3
 800e936:	f7ff f84b 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 800e93a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e93e:	4619      	mov	r1, r3
 800e940:	68f8      	ldr	r0, [r7, #12]
 800e942:	f7fe fbbb 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800e946:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7fe fb39 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800e950:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e954:	4618      	mov	r0, r3
 800e956:	f7fe fb34 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return result;
 800e95a:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800e95c:	f107 0310 	add.w	r3, r7, #16
 800e960:	4618      	mov	r0, r3
 800e962:	f7fe fb2e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800e966:	f107 0318 	add.w	r3, r7, #24
 800e96a:	4618      	mov	r0, r3
 800e96c:	f7fe fb29 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800e970:	f107 0320 	add.w	r3, r7, #32
 800e974:	4618      	mov	r0, r3
 800e976:	f7fe fb24 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return result;
 800e97a:	bf00      	nop
}
 800e97c:	68f8      	ldr	r0, [r7, #12]
 800e97e:	375c      	adds	r7, #92	; 0x5c
 800e980:	46bd      	mov	sp, r7
 800e982:	bd90      	pop	{r4, r7, pc}
 800e984:	08024250 	.word	0x08024250
 800e988:	08024254 	.word	0x08024254
 800e98c:	08024258 	.word	0x08024258
 800e990:	08024280 	.word	0x08024280
 800e994:	08024284 	.word	0x08024284
 800e998:	0802428c 	.word	0x0802428c

0800e99c <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800e99c:	b590      	push	{r4, r7, lr}
 800e99e:	b087      	sub	sp, #28
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800e9a8:	491a      	ldr	r1, [pc, #104]	; (800ea14 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800e9aa:	68f8      	ldr	r0, [r7, #12]
 800e9ac:	f7fd ff51 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f7fe faf5 	bl	800cfa0 <_ZNK12SimpleString7isEmptyEv>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	f083 0301 	eor.w	r3, r3, #1
 800e9bc:	b2db      	uxtb	r3, r3
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d022      	beq.n	800ea08 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800e9c2:	f107 0310 	add.w	r3, r7, #16
 800e9c6:	4914      	ldr	r1, [pc, #80]	; (800ea18 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7fd ff42 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800e9ce:	f107 0310 	add.w	r3, r7, #16
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f7fe f800 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	f083 0301 	eor.w	r3, r3, #1
 800e9e0:	b2dc      	uxtb	r4, r3
 800e9e2:	f107 0310 	add.w	r3, r7, #16
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7fe faeb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800e9ec:	2c00      	cmp	r4, #0
 800e9ee:	d003      	beq.n	800e9f8 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800e9f0:	490a      	ldr	r1, [pc, #40]	; (800ea1c <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	f7fe fb74 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800e9f8:	6879      	ldr	r1, [r7, #4]
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f7fe fb5e 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800ea00:	4907      	ldr	r1, [pc, #28]	; (800ea20 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800ea02:	68f8      	ldr	r0, [r7, #12]
 800ea04:	f7fe fb6c 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800ea08:	bf00      	nop
}
 800ea0a:	68f8      	ldr	r0, [r7, #12]
 800ea0c:	371c      	adds	r7, #28
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd90      	pop	{r4, r7, pc}
 800ea12:	bf00      	nop
 800ea14:	08024250 	.word	0x08024250
 800ea18:	08024294 	.word	0x08024294
 800ea1c:	080242a0 	.word	0x080242a0
 800ea20:	080242ac 	.word	0x080242ac

0800ea24 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800ea24:	b590      	push	{r4, r7, lr}
 800ea26:	b089      	sub	sp, #36	; 0x24
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	60f8      	str	r0, [r7, #12]
 800ea2c:	60b9      	str	r1, [r7, #8]
 800ea2e:	607a      	str	r2, [r7, #4]
 800ea30:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800ea32:	68f8      	ldr	r0, [r7, #12]
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	687a      	ldr	r2, [r7, #4]
 800ea38:	68b9      	ldr	r1, [r7, #8]
 800ea3a:	f7ff fda7 	bl	800e58c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ea3e:	4a19      	ldr	r2, [pc, #100]	; (800eaa4 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ea4a:	68f9      	ldr	r1, [r7, #12]
 800ea4c:	f107 0310 	add.w	r3, r7, #16
 800ea50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7ff ffa2 	bl	800e99c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ea58:	f107 0310 	add.w	r3, r7, #16
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	4620      	mov	r0, r4
 800ea60:	f7fd ff63 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800ea64:	f107 0310 	add.w	r3, r7, #16
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fe faaa 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ea74:	68f9      	ldr	r1, [r7, #12]
 800ea76:	f107 0018 	add.w	r0, r7, #24
 800ea7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea7e:	f7ff fec7 	bl	800e810 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ea82:	f107 0318 	add.w	r3, r7, #24
 800ea86:	4619      	mov	r1, r3
 800ea88:	4620      	mov	r0, r4
 800ea8a:	f7fe fb17 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800ea8e:	f107 0318 	add.w	r3, r7, #24
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fe fa95 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3724      	adds	r7, #36	; 0x24
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd90      	pop	{r4, r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	08027f9c 	.word	0x08027f9c

0800eaa8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800eaa8:	b5b0      	push	{r4, r5, r7, lr}
 800eaaa:	b094      	sub	sp, #80	; 0x50
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6278      	str	r0, [r7, #36]	; 0x24
 800eab0:	6239      	str	r1, [r7, #32]
 800eab2:	61fa      	str	r2, [r7, #28]
 800eab4:	61bb      	str	r3, [r7, #24]
 800eab6:	ed87 0b04 	vstr	d0, [r7, #16]
 800eaba:	ed87 1b02 	vstr	d1, [r7, #8]
 800eabe:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800eac2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	69fa      	ldr	r2, [r7, #28]
 800eac8:	6a39      	ldr	r1, [r7, #32]
 800eaca:	f7ff fd5f 	bl	800e58c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800eace:	4a4a      	ldr	r2, [pc, #296]	; (800ebf8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800ead0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ead4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eadc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eae0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7ff ff5a 	bl	800e99c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800eae8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eaec:	4619      	mov	r1, r3
 800eaee:	4620      	mov	r0, r4
 800eaf0:	f7fd ff1b 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800eaf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7fe fa62 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800eafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb00:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eb04:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800eb06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800eb0a:	2107      	movs	r1, #7
 800eb0c:	ed97 0b04 	vldr	d0, [r7, #16]
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7fe ff1b 	bl	800d94c <_Z10StringFromdi>
 800eb16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eb1a:	2107      	movs	r1, #7
 800eb1c:	ed97 0b02 	vldr	d0, [r7, #8]
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7fe ff13 	bl	800d94c <_Z10StringFromdi>
 800eb26:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800eb2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eb2e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800eb32:	4629      	mov	r1, r5
 800eb34:	f7ff fe6c 	bl	800e810 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800eb38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f7fe fabc 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800eb44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7fe fa3a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800eb4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eb52:	4618      	mov	r0, r3
 800eb54:	f7fe fa35 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800eb58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7fe fa30 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800eb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb64:	332c      	adds	r3, #44	; 0x2c
 800eb66:	4925      	ldr	r1, [pc, #148]	; (800ebfc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7fe fab9 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800eb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb70:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eb74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eb78:	2107      	movs	r1, #7
 800eb7a:	ed97 0b00 	vldr	d0, [r7]
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7fe fee4 	bl	800d94c <_Z10StringFromdi>
 800eb84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eb88:	4619      	mov	r1, r3
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f7fe fa96 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800eb90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7fe fa14 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800eb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9c:	332c      	adds	r3, #44	; 0x2c
 800eb9e:	4918      	ldr	r1, [pc, #96]	; (800ec00 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800eba0:	4618      	mov	r0, r3
 800eba2:	f7fe fa9d 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800eba6:	4b17      	ldr	r3, [pc, #92]	; (800ec04 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	ed97 0b04 	vldr	d0, [r7, #16]
 800ebae:	4798      	blx	r3
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d10f      	bne.n	800ebd6 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800ebb6:	4b13      	ldr	r3, [pc, #76]	; (800ec04 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	ed97 0b02 	vldr	d0, [r7, #8]
 800ebbe:	4798      	blx	r3
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d107      	bne.n	800ebd6 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800ebc6:	4b0f      	ldr	r3, [pc, #60]	; (800ec04 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	ed97 0b00 	vldr	d0, [r7]
 800ebce:	4798      	blx	r3
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d001      	beq.n	800ebda <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	e000      	b.n	800ebdc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800ebda:	2300      	movs	r3, #0
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d005      	beq.n	800ebec <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800ebe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe2:	332c      	adds	r3, #44	; 0x2c
 800ebe4:	4908      	ldr	r1, [pc, #32]	; (800ec08 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fe fa7a 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
}
 800ebec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3750      	adds	r7, #80	; 0x50
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bdb0      	pop	{r4, r5, r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	08027f70 	.word	0x08027f70
 800ebfc:	080242b0 	.word	0x080242b0
 800ec00:	080242c8 	.word	0x080242c8
 800ec04:	200000e8 	.word	0x200000e8
 800ec08:	080242cc 	.word	0x080242cc

0800ec0c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800ec0c:	b590      	push	{r4, r7, lr}
 800ec0e:	b093      	sub	sp, #76	; 0x4c
 800ec10:	af02      	add	r7, sp, #8
 800ec12:	60f8      	str	r0, [r7, #12]
 800ec14:	60b9      	str	r1, [r7, #8]
 800ec16:	607a      	str	r2, [r7, #4]
 800ec18:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ec1a:	68f8      	ldr	r0, [r7, #12]
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	68b9      	ldr	r1, [r7, #8]
 800ec22:	f7ff fcb3 	bl	800e58c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ec26:	4a4f      	ldr	r2, [pc, #316]	; (800ed64 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ec32:	68f9      	ldr	r1, [r7, #12]
 800ec34:	f107 0320 	add.w	r3, r7, #32
 800ec38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7ff feae 	bl	800e99c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ec40:	f107 0320 	add.w	r3, r7, #32
 800ec44:	4619      	mov	r1, r3
 800ec46:	4620      	mov	r0, r4
 800ec48:	f7fd fe6f 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800ec4c:	f107 0320 	add.w	r3, r7, #32
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7fe f9b6 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800ec56:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ec58:	f7fe f986 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	f107 0318 	add.w	r3, r7, #24
 800ec62:	4611      	mov	r1, r2
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7fe fc47 	bl	800d4f8 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800ec6a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ec6c:	f7fe f97c 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800ec70:	4602      	mov	r2, r0
 800ec72:	f107 0310 	add.w	r3, r7, #16
 800ec76:	4611      	mov	r1, r2
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fe fc3d 	bl	800d4f8 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ec84:	68f9      	ldr	r1, [r7, #12]
 800ec86:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800ec8a:	f107 0310 	add.w	r3, r7, #16
 800ec8e:	f107 0218 	add.w	r2, r7, #24
 800ec92:	f7ff fdbd 	bl	800e810 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ec96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	4620      	mov	r0, r4
 800ec9e:	f7fe fa0d 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800eca2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7fe f98b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800ecac:	2300      	movs	r3, #0
 800ecae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ecb2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ecb4:	f7fe fae9 	bl	800d28a <_ZNK12SimpleString2atEj>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	461c      	mov	r4, r3
 800ecbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ecbe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ecc0:	f7fe fae3 	bl	800d28a <_ZNK12SimpleString2atEj>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	429c      	cmp	r4, r3
 800ecc8:	bf0c      	ite	eq
 800ecca:	2301      	moveq	r3, #1
 800eccc:	2300      	movne	r3, #0
 800ecce:	b2db      	uxtb	r3, r3
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d003      	beq.n	800ecdc <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800ecd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecda:	e7e9      	b.n	800ecb0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800ecdc:	2300      	movs	r3, #0
 800ecde:	63bb      	str	r3, [r7, #56]	; 0x38
 800ece0:	f107 0310 	add.w	r3, r7, #16
 800ece4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fe facf 	bl	800d28a <_ZNK12SimpleString2atEj>
 800ecec:	4603      	mov	r3, r0
 800ecee:	461c      	mov	r4, r3
 800ecf0:	f107 0318 	add.w	r3, r7, #24
 800ecf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7fe fac7 	bl	800d28a <_ZNK12SimpleString2atEj>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	429c      	cmp	r4, r3
 800ed00:	bf0c      	ite	eq
 800ed02:	2301      	moveq	r3, #1
 800ed04:	2300      	movne	r3, #0
 800ed06:	b2db      	uxtb	r3, r3
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d003      	beq.n	800ed14 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800ed0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0e:	3301      	adds	r3, #1
 800ed10:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed12:	e7e5      	b.n	800ece0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ed1a:	68f9      	ldr	r1, [r7, #12]
 800ed1c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800ed20:	f107 0210 	add.w	r2, r7, #16
 800ed24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed26:	9300      	str	r3, [sp, #0]
 800ed28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2a:	f7ff fd8b 	bl	800e844 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800ed2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed32:	4619      	mov	r1, r3
 800ed34:	4620      	mov	r0, r4
 800ed36:	f7fe f9c1 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800ed3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7fe f93f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800ed44:	f107 0310 	add.w	r3, r7, #16
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7fe f93a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800ed4e:	f107 0318 	add.w	r3, r7, #24
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7fe f935 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3744      	adds	r7, #68	; 0x44
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd90      	pop	{r4, r7, pc}
 800ed62:	bf00      	nop
 800ed64:	08027f44 	.word	0x08027f44

0800ed68 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800ed68:	b590      	push	{r4, r7, lr}
 800ed6a:	b087      	sub	sp, #28
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	60b9      	str	r1, [r7, #8]
 800ed72:	607a      	str	r2, [r7, #4]
 800ed74:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ed76:	68f8      	ldr	r0, [r7, #12]
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	68b9      	ldr	r1, [r7, #8]
 800ed7e:	f7ff fc05 	bl	800e58c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ed82:	4a1a      	ldr	r2, [pc, #104]	; (800edec <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ed8e:	68f9      	ldr	r1, [r7, #12]
 800ed90:	f107 0310 	add.w	r3, r7, #16
 800ed94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7ff fe00 	bl	800e99c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ed9c:	f107 0310 	add.w	r3, r7, #16
 800eda0:	4619      	mov	r1, r3
 800eda2:	4620      	mov	r0, r4
 800eda4:	f7fd fdc1 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800eda8:	f107 0310 	add.w	r3, r7, #16
 800edac:	4618      	mov	r0, r3
 800edae:	f7fe f908 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	332c      	adds	r3, #44	; 0x2c
 800edb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800edb8:	4618      	mov	r0, r3
 800edba:	f7fe f97f 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	332c      	adds	r3, #44	; 0x2c
 800edc2:	490b      	ldr	r1, [pc, #44]	; (800edf0 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7fe f98b 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	332c      	adds	r3, #44	; 0x2c
 800edce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7fe f973 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	332c      	adds	r3, #44	; 0x2c
 800edda:	4906      	ldr	r1, [pc, #24]	; (800edf4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800eddc:	4618      	mov	r0, r3
 800edde:	f7fe f97f 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
}
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	4618      	mov	r0, r3
 800ede6:	371c      	adds	r7, #28
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd90      	pop	{r4, r7, pc}
 800edec:	08027f18 	.word	0x08027f18
 800edf0:	080242f0 	.word	0x080242f0
 800edf4:	080242f4 	.word	0x080242f4

0800edf8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800edf8:	b5b0      	push	{r4, r5, r7, lr}
 800edfa:	b088      	sub	sp, #32
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	60b9      	str	r1, [r7, #8]
 800ee02:	607a      	str	r2, [r7, #4]
 800ee04:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ee06:	68f8      	ldr	r0, [r7, #12]
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	68b9      	ldr	r1, [r7, #8]
 800ee0e:	f7ff fbbd 	bl	800e58c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ee12:	4a1c      	ldr	r2, [pc, #112]	; (800ee84 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ee1e:	68f9      	ldr	r1, [r7, #12]
 800ee20:	f107 0310 	add.w	r3, r7, #16
 800ee24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7ff fdb8 	bl	800e99c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ee2c:	f107 0310 	add.w	r3, r7, #16
 800ee30:	4619      	mov	r1, r3
 800ee32:	4620      	mov	r0, r4
 800ee34:	f7fd fd79 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800ee38:	f107 0310 	add.w	r3, r7, #16
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7fe f8c0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ee48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee4a:	f7fe f88d 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800ee4e:	4605      	mov	r5, r0
 800ee50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee52:	f7fe f889 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800ee56:	4603      	mov	r3, r0
 800ee58:	f107 0018 	add.w	r0, r7, #24
 800ee5c:	462a      	mov	r2, r5
 800ee5e:	490a      	ldr	r1, [pc, #40]	; (800ee88 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800ee60:	f7fe fdb6 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 800ee64:	f107 0318 	add.w	r3, r7, #24
 800ee68:	4619      	mov	r1, r3
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f7fe f926 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800ee70:	f107 0318 	add.w	r3, r7, #24
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7fe f8a4 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3720      	adds	r7, #32
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bdb0      	pop	{r4, r5, r7, pc}
 800ee84:	08027eec 	.word	0x08027eec
 800ee88:	08024300 	.word	0x08024300

0800ee8c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800ee8c:	b590      	push	{r4, r7, lr}
 800ee8e:	b087      	sub	sp, #28
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	60f8      	str	r0, [r7, #12]
 800ee94:	60b9      	str	r1, [r7, #8]
 800ee96:	607a      	str	r2, [r7, #4]
 800ee98:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	68b9      	ldr	r1, [r7, #8]
 800eea2:	f7ff fb73 	bl	800e58c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800eea6:	4a1a      	ldr	r2, [pc, #104]	; (800ef10 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eeb2:	68f9      	ldr	r1, [r7, #12]
 800eeb4:	f107 0310 	add.w	r3, r7, #16
 800eeb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7ff fd6e 	bl	800e99c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800eec0:	f107 0310 	add.w	r3, r7, #16
 800eec4:	4619      	mov	r1, r3
 800eec6:	4620      	mov	r0, r4
 800eec8:	f7fd fd2f 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800eecc:	f107 0310 	add.w	r3, r7, #16
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fe f876 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	332c      	adds	r3, #44	; 0x2c
 800eeda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eedc:	4618      	mov	r0, r3
 800eede:	f7fe f8ed 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	332c      	adds	r3, #44	; 0x2c
 800eee6:	490b      	ldr	r1, [pc, #44]	; (800ef14 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fe f8f9 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	332c      	adds	r3, #44	; 0x2c
 800eef2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7fe f8e1 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	332c      	adds	r3, #44	; 0x2c
 800eefe:	4906      	ldr	r1, [pc, #24]	; (800ef18 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7fe f8ed 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
}
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	4618      	mov	r0, r3
 800ef0a:	371c      	adds	r7, #28
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd90      	pop	{r4, r7, pc}
 800ef10:	08027ec0 	.word	0x08027ec0
 800ef14:	080242f0 	.word	0x080242f0
 800ef18:	080242f4 	.word	0x080242f4

0800ef1c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	607a      	str	r2, [r7, #4]
 800ef28:	603b      	str	r3, [r7, #0]
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	687a      	ldr	r2, [r7, #4]
 800ef30:	68b9      	ldr	r1, [r7, #8]
 800ef32:	f7ff fb2b 	bl	800e58c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ef36:	4a07      	ldr	r2, [pc, #28]	; (800ef54 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	332c      	adds	r3, #44	; 0x2c
 800ef40:	69b9      	ldr	r1, [r7, #24]
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fd fcf1 	bl	800c92a <_ZN12SimpleStringaSERKS_>
}
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	08027b7c 	.word	0x08027b7c

0800ef58 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800ef58:	b590      	push	{r4, r7, lr}
 800ef5a:	b09d      	sub	sp, #116	; 0x74
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	607a      	str	r2, [r7, #4]
 800ef64:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ef66:	68f8      	ldr	r0, [r7, #12]
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	68b9      	ldr	r1, [r7, #8]
 800ef6e:	f7ff fb0d 	bl	800e58c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ef72:	4a5d      	ldr	r2, [pc, #372]	; (800f0e8 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ef7e:	68f9      	ldr	r1, [r7, #12]
 800ef80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ef84:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7ff fd07 	bl	800e99c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ef8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ef92:	4619      	mov	r1, r3
 800ef94:	4620      	mov	r0, r4
 800ef96:	f7fd fcc8 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800ef9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7fe f80f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800efa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800efa8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800efac:	4618      	mov	r0, r3
 800efae:	f7fe fae1 	bl	800d574 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800efb2:	f107 0320 	add.w	r3, r7, #32
 800efb6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fe fada 	bl	800d574 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800efc0:	f107 0120 	add.w	r1, r7, #32
 800efc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800efc8:	2220      	movs	r2, #32
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fe f8b6 	bl	800d13c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800efd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800efd4:	4945      	ldr	r1, [pc, #276]	; (800f0ec <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7fd fc3b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800efdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800efe0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800efe4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800efe8:	4618      	mov	r0, r3
 800efea:	f7fe f84c 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800efee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eff2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7fe fbd2 	bl	800d7a0 <_Z30BracketsFormattedHexStringFroml>
 800effc:	f107 0318 	add.w	r3, r7, #24
 800f000:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f004:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f008:	4618      	mov	r0, r3
 800f00a:	f7fe f83c 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800f00e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f012:	4618      	mov	r0, r3
 800f014:	f7fd ffd5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800f018:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7fd ffd0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800f022:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f026:	4618      	mov	r0, r3
 800f028:	f7fd ffcb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f02c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f030:	492e      	ldr	r1, [pc, #184]	; (800f0ec <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800f032:	4618      	mov	r0, r3
 800f034:	f7fd fc0d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800f038:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f03c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f040:	f107 0120 	add.w	r1, r7, #32
 800f044:	4618      	mov	r0, r3
 800f046:	f7fe f81e 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800f04a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f04e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f052:	4618      	mov	r0, r3
 800f054:	f7fe fba4 	bl	800d7a0 <_Z30BracketsFormattedHexStringFroml>
 800f058:	f107 0310 	add.w	r3, r7, #16
 800f05c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f060:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f064:	4618      	mov	r0, r3
 800f066:	f7fe f80e 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800f06a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fd ffa7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800f074:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f078:	4618      	mov	r0, r3
 800f07a:	f7fd ffa2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800f07e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f082:	4618      	mov	r0, r3
 800f084:	f7fd ff9d 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f08e:	68f9      	ldr	r1, [r7, #12]
 800f090:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f094:	f107 0318 	add.w	r3, r7, #24
 800f098:	f107 0210 	add.w	r2, r7, #16
 800f09c:	f7ff fbb8 	bl	800e810 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f0a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	f7fe f808 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800f0ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7fd ff86 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f0b6:	f107 0310 	add.w	r3, r7, #16
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7fd ff81 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f0c0:	f107 0318 	add.w	r3, r7, #24
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7fd ff7c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800f0ca:	f107 0320 	add.w	r3, r7, #32
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7fd ff77 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800f0d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7fd ff72 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3774      	adds	r7, #116	; 0x74
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd90      	pop	{r4, r7, pc}
 800f0e8:	08027e94 	.word	0x08027e94
 800f0ec:	08024254 	.word	0x08024254

0800f0f0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800f0f0:	b590      	push	{r4, r7, lr}
 800f0f2:	b09d      	sub	sp, #116	; 0x74
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	607a      	str	r2, [r7, #4]
 800f0fc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	68b9      	ldr	r1, [r7, #8]
 800f106:	f7ff fa41 	bl	800e58c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f10a:	4a5d      	ldr	r2, [pc, #372]	; (800f280 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f116:	68f9      	ldr	r1, [r7, #12]
 800f118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f11c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f120:	4618      	mov	r0, r3
 800f122:	f7ff fc3b 	bl	800e99c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f126:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f12a:	4619      	mov	r1, r3
 800f12c:	4620      	mov	r0, r4
 800f12e:	f7fd fbfc 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800f132:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f136:	4618      	mov	r0, r3
 800f138:	f7fd ff43 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800f13c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f140:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f144:	4618      	mov	r0, r3
 800f146:	f7fe fc7d 	bl	800da44 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800f14a:	f107 0320 	add.w	r3, r7, #32
 800f14e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f152:	4618      	mov	r0, r3
 800f154:	f7fe fc76 	bl	800da44 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800f158:	f107 0120 	add.w	r1, r7, #32
 800f15c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f160:	2220      	movs	r2, #32
 800f162:	4618      	mov	r0, r3
 800f164:	f7fd ffea 	bl	800d13c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f168:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f16c:	4945      	ldr	r1, [pc, #276]	; (800f284 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800f16e:	4618      	mov	r0, r3
 800f170:	f7fd fb6f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800f174:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f178:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f17c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f180:	4618      	mov	r0, r3
 800f182:	f7fd ff80 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800f186:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f18a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f18e:	4618      	mov	r0, r3
 800f190:	f7fe fb22 	bl	800d7d8 <_Z30BracketsFormattedHexStringFromm>
 800f194:	f107 0318 	add.w	r3, r7, #24
 800f198:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f19c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7fd ff70 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800f1a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fd ff09 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800f1b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7fd ff04 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800f1ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7fd feff 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f1c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f1c8:	492e      	ldr	r1, [pc, #184]	; (800f284 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7fd fb41 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800f1d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f1d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f1d8:	f107 0120 	add.w	r1, r7, #32
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7fd ff52 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800f1e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f1e6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7fe faf4 	bl	800d7d8 <_Z30BracketsFormattedHexStringFromm>
 800f1f0:	f107 0310 	add.w	r3, r7, #16
 800f1f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f1f8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7fd ff42 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800f202:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f206:	4618      	mov	r0, r3
 800f208:	f7fd fedb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800f20c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f210:	4618      	mov	r0, r3
 800f212:	f7fd fed6 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800f216:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7fd fed1 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f226:	68f9      	ldr	r1, [r7, #12]
 800f228:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f22c:	f107 0318 	add.w	r3, r7, #24
 800f230:	f107 0210 	add.w	r2, r7, #16
 800f234:	f7ff faec 	bl	800e810 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f238:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f23c:	4619      	mov	r1, r3
 800f23e:	4620      	mov	r0, r4
 800f240:	f7fd ff3c 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800f244:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f248:	4618      	mov	r0, r3
 800f24a:	f7fd feba 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f24e:	f107 0310 	add.w	r3, r7, #16
 800f252:	4618      	mov	r0, r3
 800f254:	f7fd feb5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f258:	f107 0318 	add.w	r3, r7, #24
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7fd feb0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800f262:	f107 0320 	add.w	r3, r7, #32
 800f266:	4618      	mov	r0, r3
 800f268:	f7fd feab 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800f26c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f270:	4618      	mov	r0, r3
 800f272:	f7fd fea6 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	4618      	mov	r0, r3
 800f27a:	3774      	adds	r7, #116	; 0x74
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd90      	pop	{r4, r7, pc}
 800f280:	08027e68 	.word	0x08027e68
 800f284:	08024254 	.word	0x08024254

0800f288 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800f288:	b590      	push	{r4, r7, lr}
 800f28a:	b09d      	sub	sp, #116	; 0x74
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	607a      	str	r2, [r7, #4]
 800f294:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f296:	68f8      	ldr	r0, [r7, #12]
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	687a      	ldr	r2, [r7, #4]
 800f29c:	68b9      	ldr	r1, [r7, #8]
 800f29e:	f7ff f975 	bl	800e58c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f2a2:	4a5f      	ldr	r2, [pc, #380]	; (800f420 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f2ae:	68f9      	ldr	r1, [r7, #12]
 800f2b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f2b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7ff fb6f 	bl	800e99c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f2be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f2c2:	4619      	mov	r1, r3
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f7fd fb30 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800f2ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fd fe77 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800f2d4:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800f2d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2dc:	4611      	mov	r1, r2
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7fe f936 	bl	800d550 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800f2e4:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800f2e8:	f107 0320 	add.w	r3, r7, #32
 800f2ec:	4611      	mov	r1, r2
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fe f92e 	bl	800d550 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800f2f4:	f107 0120 	add.w	r1, r7, #32
 800f2f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2fc:	2220      	movs	r2, #32
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fd ff1c 	bl	800d13c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f304:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f308:	4946      	ldr	r1, [pc, #280]	; (800f424 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7fd faa1 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800f310:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f314:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f318:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7fd feb2 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800f322:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f326:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800f32a:	4611      	mov	r1, r2
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7fe fa6f 	bl	800d810 <_Z30BracketsFormattedHexStringFroma>
 800f332:	f107 0318 	add.w	r3, r7, #24
 800f336:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f33a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f33e:	4618      	mov	r0, r3
 800f340:	f7fd fea1 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800f344:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f348:	4618      	mov	r0, r3
 800f34a:	f7fd fe3a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800f34e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f352:	4618      	mov	r0, r3
 800f354:	f7fd fe35 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800f358:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7fd fe30 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f362:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f366:	492f      	ldr	r1, [pc, #188]	; (800f424 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800f368:	4618      	mov	r0, r3
 800f36a:	f7fd fa72 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 800f36e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f372:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f376:	f107 0120 	add.w	r1, r7, #32
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fd fe83 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800f380:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f384:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800f388:	4611      	mov	r1, r2
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7fe fa40 	bl	800d810 <_Z30BracketsFormattedHexStringFroma>
 800f390:	f107 0310 	add.w	r3, r7, #16
 800f394:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f398:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7fd fe72 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 800f3a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fd fe0b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800f3ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7fd fe06 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800f3b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f7fd fe01 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f3c6:	68f9      	ldr	r1, [r7, #12]
 800f3c8:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f3cc:	f107 0318 	add.w	r3, r7, #24
 800f3d0:	f107 0210 	add.w	r2, r7, #16
 800f3d4:	f7ff fa1c 	bl	800e810 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f3d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f3dc:	4619      	mov	r1, r3
 800f3de:	4620      	mov	r0, r4
 800f3e0:	f7fd fe6c 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800f3e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7fd fdea 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f3ee:	f107 0310 	add.w	r3, r7, #16
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7fd fde5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f3f8:	f107 0318 	add.w	r3, r7, #24
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7fd fde0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800f402:	f107 0320 	add.w	r3, r7, #32
 800f406:	4618      	mov	r0, r3
 800f408:	f7fd fddb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800f40c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f410:	4618      	mov	r0, r3
 800f412:	f7fd fdd6 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	4618      	mov	r0, r3
 800f41a:	3774      	adds	r7, #116	; 0x74
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd90      	pop	{r4, r7, pc}
 800f420:	08027e3c 	.word	0x08027e3c
 800f424:	08024254 	.word	0x08024254

0800f428 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800f428:	b590      	push	{r4, r7, lr}
 800f42a:	b093      	sub	sp, #76	; 0x4c
 800f42c:	af02      	add	r7, sp, #8
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	607a      	str	r2, [r7, #4]
 800f434:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f436:	68f8      	ldr	r0, [r7, #12]
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	687a      	ldr	r2, [r7, #4]
 800f43c:	68b9      	ldr	r1, [r7, #8]
 800f43e:	f7ff f8a5 	bl	800e58c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f442:	4a4a      	ldr	r2, [pc, #296]	; (800f56c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f44e:	68f9      	ldr	r1, [r7, #12]
 800f450:	f107 0320 	add.w	r3, r7, #32
 800f454:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f456:	4618      	mov	r0, r3
 800f458:	f7ff faa0 	bl	800e99c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f45c:	f107 0320 	add.w	r3, r7, #32
 800f460:	4619      	mov	r1, r3
 800f462:	4620      	mov	r0, r4
 800f464:	f7fd fa61 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800f468:	f107 0320 	add.w	r3, r7, #32
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7fd fda8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f472:	f107 0318 	add.w	r3, r7, #24
 800f476:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f478:	4618      	mov	r0, r3
 800f47a:	f7fe f83d 	bl	800d4f8 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f47e:	f107 0310 	add.w	r3, r7, #16
 800f482:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f484:	4618      	mov	r0, r3
 800f486:	f7fe f837 	bl	800d4f8 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f490:	68f9      	ldr	r1, [r7, #12]
 800f492:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f496:	f107 0310 	add.w	r3, r7, #16
 800f49a:	f107 0218 	add.w	r2, r7, #24
 800f49e:	f7ff f9b7 	bl	800e810 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f4a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	f7fd fe07 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800f4ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fd fd85 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800f4b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d046      	beq.n	800f54c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800f4be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d043      	beq.n	800f54c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f4ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4cc:	4413      	add	r3, r2
 800f4ce:	781a      	ldrb	r2, [r3, #0]
 800f4d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4d4:	440b      	add	r3, r1
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d103      	bne.n	800f4e4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800f4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4de:	3301      	adds	r3, #1
 800f4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4e2:	e7f1      	b.n	800f4c8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f4e8:	f107 0310 	add.w	r3, r7, #16
 800f4ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fd fecb 	bl	800d28a <_ZNK12SimpleString2atEj>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	461c      	mov	r4, r3
 800f4f8:	f107 0318 	add.w	r3, r7, #24
 800f4fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7fd fec3 	bl	800d28a <_ZNK12SimpleString2atEj>
 800f504:	4603      	mov	r3, r0
 800f506:	429c      	cmp	r4, r3
 800f508:	bf0c      	ite	eq
 800f50a:	2301      	moveq	r3, #1
 800f50c:	2300      	movne	r3, #0
 800f50e:	b2db      	uxtb	r3, r3
 800f510:	2b00      	cmp	r3, #0
 800f512:	d003      	beq.n	800f51c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800f514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f516:	3301      	adds	r3, #1
 800f518:	63bb      	str	r3, [r7, #56]	; 0x38
 800f51a:	e7e5      	b.n	800f4e8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f522:	68f9      	ldr	r1, [r7, #12]
 800f524:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f528:	f107 0210 	add.w	r2, r7, #16
 800f52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f52e:	9300      	str	r3, [sp, #0]
 800f530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f532:	f7ff f987 	bl	800e844 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f536:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f53a:	4619      	mov	r1, r3
 800f53c:	4620      	mov	r0, r4
 800f53e:	f7fd fdbd 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800f542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f546:	4618      	mov	r0, r3
 800f548:	f7fd fd3b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f54c:	f107 0310 	add.w	r3, r7, #16
 800f550:	4618      	mov	r0, r3
 800f552:	f7fd fd36 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f556:	f107 0318 	add.w	r3, r7, #24
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7fd fd31 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    }
}
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	4618      	mov	r0, r3
 800f564:	3744      	adds	r7, #68	; 0x44
 800f566:	46bd      	mov	sp, r7
 800f568:	bd90      	pop	{r4, r7, pc}
 800f56a:	bf00      	nop
 800f56c:	08027e10 	.word	0x08027e10

0800f570 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800f570:	b590      	push	{r4, r7, lr}
 800f572:	b093      	sub	sp, #76	; 0x4c
 800f574:	af02      	add	r7, sp, #8
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	607a      	str	r2, [r7, #4]
 800f57c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f57e:	68f8      	ldr	r0, [r7, #12]
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	687a      	ldr	r2, [r7, #4]
 800f584:	68b9      	ldr	r1, [r7, #8]
 800f586:	f7ff f801 	bl	800e58c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f58a:	4a55      	ldr	r2, [pc, #340]	; (800f6e0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f596:	68f9      	ldr	r1, [r7, #12]
 800f598:	f107 0320 	add.w	r3, r7, #32
 800f59c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7ff f9fc 	bl	800e99c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f5a4:	f107 0320 	add.w	r3, r7, #32
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f7fd f9bd 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800f5b0:	f107 0320 	add.w	r3, r7, #32
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7fd fd04 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f5ba:	f107 0318 	add.w	r3, r7, #24
 800f5be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7fd ff99 	bl	800d4f8 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f5c6:	f107 0310 	add.w	r3, r7, #16
 800f5ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7fd ff93 	bl	800d4f8 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f5d8:	68f9      	ldr	r1, [r7, #12]
 800f5da:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f5de:	f107 0310 	add.w	r3, r7, #16
 800f5e2:	f107 0218 	add.w	r2, r7, #24
 800f5e6:	f7ff f913 	bl	800e810 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f5ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	4620      	mov	r0, r4
 800f5f2:	f7fd fd63 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800f5f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7fd fce1 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800f600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f602:	2b00      	cmp	r3, #0
 800f604:	d05c      	beq.n	800f6c0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800f606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d059      	beq.n	800f6c0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800f60c:	2300      	movs	r3, #0
 800f60e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f610:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f614:	4413      	add	r3, r2
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	4618      	mov	r0, r3
 800f61a:	f7fd f824 	bl	800c666 <_ZN12SimpleString7ToLowerEc>
 800f61e:	4603      	mov	r3, r0
 800f620:	461c      	mov	r4, r3
 800f622:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f626:	4413      	add	r3, r2
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7fd f81b 	bl	800c666 <_ZN12SimpleString7ToLowerEc>
 800f630:	4603      	mov	r3, r0
 800f632:	429c      	cmp	r4, r3
 800f634:	bf0c      	ite	eq
 800f636:	2301      	moveq	r3, #1
 800f638:	2300      	movne	r3, #0
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d003      	beq.n	800f648 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800f640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f642:	3301      	adds	r3, #1
 800f644:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f646:	e7e3      	b.n	800f610 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800f648:	2300      	movs	r3, #0
 800f64a:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800f64c:	f107 0310 	add.w	r3, r7, #16
 800f650:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f652:	4618      	mov	r0, r3
 800f654:	f7fd fe19 	bl	800d28a <_ZNK12SimpleString2atEj>
 800f658:	4603      	mov	r3, r0
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fd f803 	bl	800c666 <_ZN12SimpleString7ToLowerEc>
 800f660:	4603      	mov	r3, r0
 800f662:	461c      	mov	r4, r3
 800f664:	f107 0318 	add.w	r3, r7, #24
 800f668:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7fd fe0d 	bl	800d28a <_ZNK12SimpleString2atEj>
 800f670:	4603      	mov	r3, r0
 800f672:	4618      	mov	r0, r3
 800f674:	f7fc fff7 	bl	800c666 <_ZN12SimpleString7ToLowerEc>
 800f678:	4603      	mov	r3, r0
 800f67a:	429c      	cmp	r4, r3
 800f67c:	bf0c      	ite	eq
 800f67e:	2301      	moveq	r3, #1
 800f680:	2300      	movne	r3, #0
 800f682:	b2db      	uxtb	r3, r3
 800f684:	2b00      	cmp	r3, #0
 800f686:	d003      	beq.n	800f690 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800f688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68a:	3301      	adds	r3, #1
 800f68c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f68e:	e7dd      	b.n	800f64c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f696:	68f9      	ldr	r1, [r7, #12]
 800f698:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f69c:	f107 0210 	add.w	r2, r7, #16
 800f6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6a2:	9300      	str	r3, [sp, #0]
 800f6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a6:	f7ff f8cd 	bl	800e844 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f6aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f7fd fd03 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800f6b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fd fc81 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f6c0:	f107 0310 	add.w	r3, r7, #16
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7fd fc7c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f6ca:	f107 0318 	add.w	r3, r7, #24
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7fd fc77 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    }
}
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3744      	adds	r7, #68	; 0x44
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd90      	pop	{r4, r7, pc}
 800f6de:	bf00      	nop
 800f6e0:	08027de4 	.word	0x08027de4

0800f6e4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800f6e4:	b5b0      	push	{r4, r5, r7, lr}
 800f6e6:	b092      	sub	sp, #72	; 0x48
 800f6e8:	af02      	add	r7, sp, #8
 800f6ea:	60f8      	str	r0, [r7, #12]
 800f6ec:	60b9      	str	r1, [r7, #8]
 800f6ee:	607a      	str	r2, [r7, #4]
 800f6f0:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800f6f2:	68f8      	ldr	r0, [r7, #12]
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	687a      	ldr	r2, [r7, #4]
 800f6f8:	68b9      	ldr	r1, [r7, #8]
 800f6fa:	f7fe ff47 	bl	800e58c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f6fe:	4a40      	ldr	r2, [pc, #256]	; (800f800 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f70a:	68f9      	ldr	r1, [r7, #12]
 800f70c:	f107 031c 	add.w	r3, r7, #28
 800f710:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f712:	4618      	mov	r0, r3
 800f714:	f7ff f942 	bl	800e99c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f718:	f107 031c 	add.w	r3, r7, #28
 800f71c:	4619      	mov	r1, r3
 800f71e:	4620      	mov	r0, r4
 800f720:	f7fd f903 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800f724:	f107 031c 	add.w	r3, r7, #28
 800f728:	4618      	mov	r0, r3
 800f72a:	f7fd fc4a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800f72e:	f107 0314 	add.w	r3, r7, #20
 800f732:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f734:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f736:	4618      	mov	r0, r3
 800f738:	f7fe fa4c 	bl	800dbd4 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f742:	68fd      	ldr	r5, [r7, #12]
 800f744:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f748:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f74a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f74c:	4618      	mov	r0, r3
 800f74e:	f7fe fa41 	bl	800dbd4 <_Z22StringFromBinaryOrNullPKhj>
 800f752:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f756:	f107 0314 	add.w	r3, r7, #20
 800f75a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f75e:	4629      	mov	r1, r5
 800f760:	f7ff f856 	bl	800e810 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f768:	4619      	mov	r1, r3
 800f76a:	4620      	mov	r0, r4
 800f76c:	f7fd fca6 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800f770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f774:	4618      	mov	r0, r3
 800f776:	f7fd fc24 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800f77a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f77e:	4618      	mov	r0, r3
 800f780:	f7fd fc1f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800f784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f786:	2b00      	cmp	r3, #0
 800f788:	d02f      	beq.n	800f7ea <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800f78a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d02c      	beq.n	800f7ea <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800f790:	2300      	movs	r3, #0
 800f792:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f794:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f798:	4413      	add	r3, r2
 800f79a:	781a      	ldrb	r2, [r3, #0]
 800f79c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7a0:	440b      	add	r3, r1
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d103      	bne.n	800f7b0 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800f7a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7ae:	e7f1      	b.n	800f794 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f7b6:	68f9      	ldr	r1, [r7, #12]
 800f7b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f7ba:	4613      	mov	r3, r2
 800f7bc:	005b      	lsls	r3, r3, #1
 800f7be:	4413      	add	r3, r2
 800f7c0:	1c5d      	adds	r5, r3, #1
 800f7c2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800f7c6:	f107 0214 	add.w	r2, r7, #20
 800f7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7cc:	9300      	str	r3, [sp, #0]
 800f7ce:	462b      	mov	r3, r5
 800f7d0:	f7ff f838 	bl	800e844 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f7d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f7d8:	4619      	mov	r1, r3
 800f7da:	4620      	mov	r0, r4
 800f7dc:	f7fd fc6e 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800f7e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7fd fbec 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800f7ea:	f107 0314 	add.w	r3, r7, #20
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fd fbe7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
	}
}
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3740      	adds	r7, #64	; 0x40
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bdb0      	pop	{r4, r5, r7, pc}
 800f7fe:	bf00      	nop
 800f800:	08027db8 	.word	0x08027db8

0800f804 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800f804:	b5b0      	push	{r4, r5, r7, lr}
 800f806:	b08c      	sub	sp, #48	; 0x30
 800f808:	af00      	add	r7, sp, #0
 800f80a:	60f8      	str	r0, [r7, #12]
 800f80c:	60b9      	str	r1, [r7, #8]
 800f80e:	607a      	str	r2, [r7, #4]
 800f810:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800f812:	68f8      	ldr	r0, [r7, #12]
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	68b9      	ldr	r1, [r7, #8]
 800f81a:	f7fe feb7 	bl	800e58c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f81e:	4a26      	ldr	r2, [pc, #152]	; (800f8b8 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f82a:	68f9      	ldr	r1, [r7, #12]
 800f82c:	f107 0310 	add.w	r3, r7, #16
 800f830:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f832:	4618      	mov	r0, r3
 800f834:	f7ff f8b2 	bl	800e99c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f838:	f107 0310 	add.w	r3, r7, #16
 800f83c:	4619      	mov	r1, r3
 800f83e:	4620      	mov	r0, r4
 800f840:	f7fd f873 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800f844:	f107 0310 	add.w	r3, r7, #16
 800f848:	4618      	mov	r0, r3
 800f84a:	f7fd fbba 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f854:	68fd      	ldr	r5, [r7, #12]
 800f856:	f107 0020 	add.w	r0, r7, #32
 800f85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f85c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f85e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f860:	f7fe fa24 	bl	800dcac <_Z20StringFromMaskedBitsmmj>
 800f864:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f86a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f86c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f86e:	f7fe fa1d 	bl	800dcac <_Z20StringFromMaskedBitsmmj>
 800f872:	f107 0018 	add.w	r0, r7, #24
 800f876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f87a:	f107 0220 	add.w	r2, r7, #32
 800f87e:	4629      	mov	r1, r5
 800f880:	f7fe ffc6 	bl	800e810 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f884:	f107 0318 	add.w	r3, r7, #24
 800f888:	4619      	mov	r1, r3
 800f88a:	4620      	mov	r0, r4
 800f88c:	f7fd fc16 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800f890:	f107 0318 	add.w	r3, r7, #24
 800f894:	4618      	mov	r0, r3
 800f896:	f7fd fb94 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800f89a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7fd fb8f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 800f8a4:	f107 0320 	add.w	r3, r7, #32
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7fd fb8a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3730      	adds	r7, #48	; 0x30
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bdb0      	pop	{r4, r5, r7, pc}
 800f8b8:	08027d8c 	.word	0x08027d8c

0800f8bc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800f8bc:	b590      	push	{r4, r7, lr}
 800f8be:	b089      	sub	sp, #36	; 0x24
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	60f8      	str	r0, [r7, #12]
 800f8c4:	60b9      	str	r1, [r7, #8]
 800f8c6:	607a      	str	r2, [r7, #4]
 800f8c8:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800f8ca:	68f8      	ldr	r0, [r7, #12]
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	687a      	ldr	r2, [r7, #4]
 800f8d0:	68b9      	ldr	r1, [r7, #8]
 800f8d2:	f7fe fe5b 	bl	800e58c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f8d6:	4a1a      	ldr	r2, [pc, #104]	; (800f940 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f8e2:	68f9      	ldr	r1, [r7, #12]
 800f8e4:	f107 0310 	add.w	r3, r7, #16
 800f8e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7ff f856 	bl	800e99c <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f8f0:	f107 0310 	add.w	r3, r7, #16
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	f7fd f817 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 800f8fc:	f107 0310 	add.w	r3, r7, #16
 800f900:	4618      	mov	r0, r3
 800f902:	f7fd fb5e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f90c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f90e:	f7fd fb2b 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 800f912:	4602      	mov	r2, r0
 800f914:	f107 0318 	add.w	r3, r7, #24
 800f918:	490a      	ldr	r1, [pc, #40]	; (800f944 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7fe f858 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 800f920:	f107 0318 	add.w	r3, r7, #24
 800f924:	4619      	mov	r1, r3
 800f926:	4620      	mov	r0, r4
 800f928:	f7fd fbc8 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 800f92c:	f107 0318 	add.w	r3, r7, #24
 800f930:	4618      	mov	r0, r3
 800f932:	f7fd fb46 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	4618      	mov	r0, r3
 800f93a:	3724      	adds	r7, #36	; 0x24
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd90      	pop	{r4, r7, pc}
 800f940:	08027d60 	.word	0x08027d60
 800f944:	08024324 	.word	0x08024324

0800f948 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	4a05      	ldr	r2, [pc, #20]	; (800f968 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	601a      	str	r2, [r3, #0]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	4618      	mov	r0, r3
 800f95a:	f7fe fe99 	bl	800e690 <_ZN11TestFailureD1Ev>
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	4618      	mov	r0, r3
 800f962:	3708      	adds	r7, #8
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}
 800f968:	08027d60 	.word	0x08027d60

0800f96c <_ZN25FeatureUnsupportedFailureD0Ev>:
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b082      	sub	sp, #8
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f7ff ffe7 	bl	800f948 <_ZN25FeatureUnsupportedFailureD1Ev>
 800f97a:	2134      	movs	r1, #52	; 0x34
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f7fa fbb9 	bl	800a0f4 <_ZdlPvj>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	4618      	mov	r0, r3
 800f986:	3708      	adds	r7, #8
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	4a05      	ldr	r2, [pc, #20]	; (800f9ac <_ZN16BitsEqualFailureD1Ev+0x20>)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	601a      	str	r2, [r3, #0]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7fe fe77 	bl	800e690 <_ZN11TestFailureD1Ev>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	08027d8c 	.word	0x08027d8c

0800f9b0 <_ZN16BitsEqualFailureD0Ev>:
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f7ff ffe7 	bl	800f98c <_ZN16BitsEqualFailureD1Ev>
 800f9be:	2134      	movs	r1, #52	; 0x34
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f7fa fb97 	bl	800a0f4 <_ZdlPvj>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	3708      	adds	r7, #8
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}

0800f9d0 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b082      	sub	sp, #8
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	4a05      	ldr	r2, [pc, #20]	; (800f9f0 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	601a      	str	r2, [r3, #0]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7fe fe55 	bl	800e690 <_ZN11TestFailureD1Ev>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3708      	adds	r7, #8
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}
 800f9f0:	08027db8 	.word	0x08027db8

0800f9f4 <_ZN18BinaryEqualFailureD0Ev>:
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f7ff ffe7 	bl	800f9d0 <_ZN18BinaryEqualFailureD1Ev>
 800fa02:	2134      	movs	r1, #52	; 0x34
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f7fa fb75 	bl	800a0f4 <_ZdlPvj>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3708      	adds	r7, #8
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	4a05      	ldr	r2, [pc, #20]	; (800fa34 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	601a      	str	r2, [r3, #0]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7fe fe33 	bl	800e690 <_ZN11TestFailureD1Ev>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3708      	adds	r7, #8
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}
 800fa34:	08027de4 	.word	0x08027de4

0800fa38 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b082      	sub	sp, #8
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f7ff ffe7 	bl	800fa14 <_ZN24StringEqualNoCaseFailureD1Ev>
 800fa46:	2134      	movs	r1, #52	; 0x34
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f7fa fb53 	bl	800a0f4 <_ZdlPvj>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	4618      	mov	r0, r3
 800fa52:	3708      	adds	r7, #8
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	4a05      	ldr	r2, [pc, #20]	; (800fa78 <_ZN18StringEqualFailureD1Ev+0x20>)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	601a      	str	r2, [r3, #0]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f7fe fe11 	bl	800e690 <_ZN11TestFailureD1Ev>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4618      	mov	r0, r3
 800fa72:	3708      	adds	r7, #8
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	08027e10 	.word	0x08027e10

0800fa7c <_ZN18StringEqualFailureD0Ev>:
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b082      	sub	sp, #8
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f7ff ffe7 	bl	800fa58 <_ZN18StringEqualFailureD1Ev>
 800fa8a:	2134      	movs	r1, #52	; 0x34
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f7fa fb31 	bl	800a0f4 <_ZdlPvj>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	4618      	mov	r0, r3
 800fa96:	3708      	adds	r7, #8
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	4a05      	ldr	r2, [pc, #20]	; (800fabc <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	601a      	str	r2, [r3, #0]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4618      	mov	r0, r3
 800faae:	f7fe fdef 	bl	800e690 <_ZN11TestFailureD1Ev>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	4618      	mov	r0, r3
 800fab6:	3708      	adds	r7, #8
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}
 800fabc:	08027e3c 	.word	0x08027e3c

0800fac0 <_ZN23SignedBytesEqualFailureD0Ev>:
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f7ff ffe7 	bl	800fa9c <_ZN23SignedBytesEqualFailureD1Ev>
 800face:	2134      	movs	r1, #52	; 0x34
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f7fa fb0f 	bl	800a0f4 <_ZdlPvj>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4618      	mov	r0, r3
 800fada:	3708      	adds	r7, #8
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	4a05      	ldr	r2, [pc, #20]	; (800fb00 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	601a      	str	r2, [r3, #0]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7fe fdcd 	bl	800e690 <_ZN11TestFailureD1Ev>
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	4618      	mov	r0, r3
 800fafa:	3708      	adds	r7, #8
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	08027e68 	.word	0x08027e68

0800fb04 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f7ff ffe7 	bl	800fae0 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800fb12:	2134      	movs	r1, #52	; 0x34
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f7fa faed 	bl	800a0f4 <_ZdlPvj>
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3708      	adds	r7, #8
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	4a05      	ldr	r2, [pc, #20]	; (800fb44 <_ZN17LongsEqualFailureD1Ev+0x20>)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	601a      	str	r2, [r3, #0]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	4618      	mov	r0, r3
 800fb36:	f7fe fdab 	bl	800e690 <_ZN11TestFailureD1Ev>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3708      	adds	r7, #8
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	08027e94 	.word	0x08027e94

0800fb48 <_ZN17LongsEqualFailureD0Ev>:
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f7ff ffe7 	bl	800fb24 <_ZN17LongsEqualFailureD1Ev>
 800fb56:	2134      	movs	r1, #52	; 0x34
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7fa facb 	bl	800a0f4 <_ZdlPvj>
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	4618      	mov	r0, r3
 800fb62:	3708      	adds	r7, #8
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	4a05      	ldr	r2, [pc, #20]	; (800fb88 <_ZN12CheckFailureD1Ev+0x20>)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	601a      	str	r2, [r3, #0]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7fe fd89 	bl	800e690 <_ZN11TestFailureD1Ev>
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	4618      	mov	r0, r3
 800fb82:	3708      	adds	r7, #8
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	08027ec0 	.word	0x08027ec0

0800fb8c <_ZN12CheckFailureD0Ev>:
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f7ff ffe7 	bl	800fb68 <_ZN12CheckFailureD1Ev>
 800fb9a:	2134      	movs	r1, #52	; 0x34
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f7fa faa9 	bl	800a0f4 <_ZdlPvj>
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	4618      	mov	r0, r3
 800fba6:	3708      	adds	r7, #8
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	4a05      	ldr	r2, [pc, #20]	; (800fbcc <_ZN15ContainsFailureD1Ev+0x20>)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	601a      	str	r2, [r3, #0]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7fe fd67 	bl	800e690 <_ZN11TestFailureD1Ev>
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3708      	adds	r7, #8
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}
 800fbcc:	08027eec 	.word	0x08027eec

0800fbd0 <_ZN15ContainsFailureD0Ev>:
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f7ff ffe7 	bl	800fbac <_ZN15ContainsFailureD1Ev>
 800fbde:	2134      	movs	r1, #52	; 0x34
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f7fa fa87 	bl	800a0f4 <_ZdlPvj>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3708      	adds	r7, #8
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}

0800fbf0 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b082      	sub	sp, #8
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	4a05      	ldr	r2, [pc, #20]	; (800fc10 <_ZN17ComparisonFailureD1Ev+0x20>)
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	601a      	str	r2, [r3, #0]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7fe fd45 	bl	800e690 <_ZN11TestFailureD1Ev>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3708      	adds	r7, #8
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}
 800fc10:	08027f18 	.word	0x08027f18

0800fc14 <_ZN17ComparisonFailureD0Ev>:
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f7ff ffe7 	bl	800fbf0 <_ZN17ComparisonFailureD1Ev>
 800fc22:	2134      	movs	r1, #52	; 0x34
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f7fa fa65 	bl	800a0f4 <_ZdlPvj>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3708      	adds	r7, #8
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}

0800fc34 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	4a05      	ldr	r2, [pc, #20]	; (800fc54 <_ZN17CheckEqualFailureD1Ev+0x20>)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	601a      	str	r2, [r3, #0]
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7fe fd23 	bl	800e690 <_ZN11TestFailureD1Ev>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3708      	adds	r7, #8
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	08027f44 	.word	0x08027f44

0800fc58 <_ZN17CheckEqualFailureD0Ev>:
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b082      	sub	sp, #8
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f7ff ffe7 	bl	800fc34 <_ZN17CheckEqualFailureD1Ev>
 800fc66:	2134      	movs	r1, #52	; 0x34
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7fa fa43 	bl	800a0f4 <_ZdlPvj>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	4618      	mov	r0, r3
 800fc72:	3708      	adds	r7, #8
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}

0800fc78 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	4a05      	ldr	r2, [pc, #20]	; (800fc98 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	601a      	str	r2, [r3, #0]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7fe fd01 	bl	800e690 <_ZN11TestFailureD1Ev>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	4618      	mov	r0, r3
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	08027f70 	.word	0x08027f70

0800fc9c <_ZN19DoublesEqualFailureD0Ev>:
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f7ff ffe7 	bl	800fc78 <_ZN19DoublesEqualFailureD1Ev>
 800fcaa:	2134      	movs	r1, #52	; 0x34
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f7fa fa21 	bl	800a0f4 <_ZdlPvj>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3708      	adds	r7, #8
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	4a05      	ldr	r2, [pc, #20]	; (800fcdc <_ZN13EqualsFailureD1Ev+0x20>)
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	601a      	str	r2, [r3, #0]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7fe fcdf 	bl	800e690 <_ZN11TestFailureD1Ev>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3708      	adds	r7, #8
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}
 800fcdc:	08027f9c 	.word	0x08027f9c

0800fce0 <_ZN13EqualsFailureD0Ev>:
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b082      	sub	sp, #8
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f7ff ffe7 	bl	800fcbc <_ZN13EqualsFailureD1Ev>
 800fcee:	2134      	movs	r1, #52	; 0x34
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7fa f9ff 	bl	800a0f4 <_ZdlPvj>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3708      	adds	r7, #8
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800fd00:	b5b0      	push	{r4, r5, r7, lr}
 800fd02:	b086      	sub	sp, #24
 800fd04:	af02      	add	r7, sp, #8
 800fd06:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800fd08:	4b0d      	ldr	r3, [pc, #52]	; (800fd40 <_ZL13checkedMallocj+0x40>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	4798      	blx	r3
 800fd10:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d10e      	bne.n	800fd36 <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800fd18:	f004 f97e 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 800fd1c:	4604      	mov	r4, r0
 800fd1e:	6823      	ldr	r3, [r4, #0]
 800fd20:	3368      	adds	r3, #104	; 0x68
 800fd22:	681d      	ldr	r5, [r3, #0]
 800fd24:	f004 f988 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	9300      	str	r3, [sp, #0]
 800fd2c:	2325      	movs	r3, #37	; 0x25
 800fd2e:	4a05      	ldr	r2, [pc, #20]	; (800fd44 <_ZL13checkedMallocj+0x44>)
 800fd30:	4905      	ldr	r1, [pc, #20]	; (800fd48 <_ZL13checkedMallocj+0x48>)
 800fd32:	4620      	mov	r0, r4
 800fd34:	47a8      	blx	r5
    return mem;
 800fd36:	68fb      	ldr	r3, [r7, #12]
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3710      	adds	r7, #16
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bdb0      	pop	{r4, r5, r7, pc}
 800fd40:	200000c8 	.word	0x200000c8
 800fd44:	08024398 	.word	0x08024398
 800fd48:	080243b8 	.word	0x080243b8

0800fd4c <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800fd50:	4b04      	ldr	r3, [pc, #16]	; (800fd64 <_Z22getCurrentNewAllocatorv+0x18>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d101      	bne.n	800fd5c <_Z22getCurrentNewAllocatorv+0x10>
 800fd58:	f000 f806 	bl	800fd68 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800fd5c:	4b01      	ldr	r3, [pc, #4]	; (800fd64 <_Z22getCurrentNewAllocatorv+0x18>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	20000860 	.word	0x20000860

0800fd68 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800fd6c:	f000 f810 	bl	800fd90 <_Z19defaultNewAllocatorv>
 800fd70:	4603      	mov	r3, r0
 800fd72:	4a02      	ldr	r2, [pc, #8]	; (800fd7c <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800fd74:	6013      	str	r3, [r2, #0]
}
 800fd76:	bf00      	nop
 800fd78:	bd80      	pop	{r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	20000860 	.word	0x20000860

0800fd80 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800fd80:	b580      	push	{r7, lr}
 800fd82:	af00      	add	r7, sp, #0
 800fd84:	4801      	ldr	r0, [pc, #4]	; (800fd8c <__tcf_0+0xc>)
 800fd86:	f000 f909 	bl	800ff9c <_ZN19TestMemoryAllocatorD1Ev>
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	2000086c 	.word	0x2000086c

0800fd90 <_Z19defaultNewAllocatorv>:
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800fd94:	4b13      	ldr	r3, [pc, #76]	; (800fde4 <_Z19defaultNewAllocatorv+0x54>)
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	f3bf 8f5b 	dmb	ish
 800fd9c:	b2db      	uxtb	r3, r3
 800fd9e:	f003 0301 	and.w	r3, r3, #1
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	bf0c      	ite	eq
 800fda6:	2301      	moveq	r3, #1
 800fda8:	2300      	movne	r3, #0
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d016      	beq.n	800fdde <_Z19defaultNewAllocatorv+0x4e>
 800fdb0:	480c      	ldr	r0, [pc, #48]	; (800fde4 <_Z19defaultNewAllocatorv+0x54>)
 800fdb2:	f00f fc0d 	bl	801f5d0 <__cxa_guard_acquire>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	bf14      	ite	ne
 800fdbc:	2301      	movne	r3, #1
 800fdbe:	2300      	moveq	r3, #0
 800fdc0:	b2db      	uxtb	r3, r3
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d00b      	beq.n	800fdde <_Z19defaultNewAllocatorv+0x4e>
 800fdc6:	4b08      	ldr	r3, [pc, #32]	; (800fde8 <_Z19defaultNewAllocatorv+0x58>)
 800fdc8:	4a08      	ldr	r2, [pc, #32]	; (800fdec <_Z19defaultNewAllocatorv+0x5c>)
 800fdca:	4909      	ldr	r1, [pc, #36]	; (800fdf0 <_Z19defaultNewAllocatorv+0x60>)
 800fdcc:	4809      	ldr	r0, [pc, #36]	; (800fdf4 <_Z19defaultNewAllocatorv+0x64>)
 800fdce:	f000 f8c5 	bl	800ff5c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800fdd2:	4804      	ldr	r0, [pc, #16]	; (800fde4 <_Z19defaultNewAllocatorv+0x54>)
 800fdd4:	f00f fc08 	bl	801f5e8 <__cxa_guard_release>
 800fdd8:	4807      	ldr	r0, [pc, #28]	; (800fdf8 <_Z19defaultNewAllocatorv+0x68>)
 800fdda:	f00f fc2c 	bl	801f636 <atexit>
    return &allocator;
 800fdde:	4b05      	ldr	r3, [pc, #20]	; (800fdf4 <_Z19defaultNewAllocatorv+0x64>)
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	20000880 	.word	0x20000880
 800fde8:	080243d8 	.word	0x080243d8
 800fdec:	080243e0 	.word	0x080243e0
 800fdf0:	080243e4 	.word	0x080243e4
 800fdf4:	2000086c 	.word	0x2000086c
 800fdf8:	0800fd81 	.word	0x0800fd81

0800fdfc <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800fe00:	4b04      	ldr	r3, [pc, #16]	; (800fe14 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d101      	bne.n	800fe0c <_Z27getCurrentNewArrayAllocatorv+0x10>
 800fe08:	f000 f806 	bl	800fe18 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800fe0c:	4b01      	ldr	r3, [pc, #4]	; (800fe14 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	20000864 	.word	0x20000864

0800fe18 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800fe1c:	f000 f810 	bl	800fe40 <_Z24defaultNewArrayAllocatorv>
 800fe20:	4603      	mov	r3, r0
 800fe22:	4a02      	ldr	r2, [pc, #8]	; (800fe2c <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800fe24:	6013      	str	r3, [r2, #0]
}
 800fe26:	bf00      	nop
 800fe28:	bd80      	pop	{r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	20000864 	.word	0x20000864

0800fe30 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800fe30:	b580      	push	{r7, lr}
 800fe32:	af00      	add	r7, sp, #0
 800fe34:	4801      	ldr	r0, [pc, #4]	; (800fe3c <__tcf_1+0xc>)
 800fe36:	f000 f8b1 	bl	800ff9c <_ZN19TestMemoryAllocatorD1Ev>
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	20000884 	.word	0x20000884

0800fe40 <_Z24defaultNewArrayAllocatorv>:
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800fe44:	4b13      	ldr	r3, [pc, #76]	; (800fe94 <_Z24defaultNewArrayAllocatorv+0x54>)
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	f3bf 8f5b 	dmb	ish
 800fe4c:	b2db      	uxtb	r3, r3
 800fe4e:	f003 0301 	and.w	r3, r3, #1
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	bf0c      	ite	eq
 800fe56:	2301      	moveq	r3, #1
 800fe58:	2300      	movne	r3, #0
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d016      	beq.n	800fe8e <_Z24defaultNewArrayAllocatorv+0x4e>
 800fe60:	480c      	ldr	r0, [pc, #48]	; (800fe94 <_Z24defaultNewArrayAllocatorv+0x54>)
 800fe62:	f00f fbb5 	bl	801f5d0 <__cxa_guard_acquire>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	bf14      	ite	ne
 800fe6c:	2301      	movne	r3, #1
 800fe6e:	2300      	moveq	r3, #0
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d00b      	beq.n	800fe8e <_Z24defaultNewArrayAllocatorv+0x4e>
 800fe76:	4b08      	ldr	r3, [pc, #32]	; (800fe98 <_Z24defaultNewArrayAllocatorv+0x58>)
 800fe78:	4a08      	ldr	r2, [pc, #32]	; (800fe9c <_Z24defaultNewArrayAllocatorv+0x5c>)
 800fe7a:	4909      	ldr	r1, [pc, #36]	; (800fea0 <_Z24defaultNewArrayAllocatorv+0x60>)
 800fe7c:	4809      	ldr	r0, [pc, #36]	; (800fea4 <_Z24defaultNewArrayAllocatorv+0x64>)
 800fe7e:	f000 f86d 	bl	800ff5c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800fe82:	4804      	ldr	r0, [pc, #16]	; (800fe94 <_Z24defaultNewArrayAllocatorv+0x54>)
 800fe84:	f00f fbb0 	bl	801f5e8 <__cxa_guard_release>
 800fe88:	4807      	ldr	r0, [pc, #28]	; (800fea8 <_Z24defaultNewArrayAllocatorv+0x68>)
 800fe8a:	f00f fbd4 	bl	801f636 <atexit>
    return &allocator;
 800fe8e:	4b05      	ldr	r3, [pc, #20]	; (800fea4 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	20000898 	.word	0x20000898
 800fe98:	080243fc 	.word	0x080243fc
 800fe9c:	08024408 	.word	0x08024408
 800fea0:	08024410 	.word	0x08024410
 800fea4:	20000884 	.word	0x20000884
 800fea8:	0800fe31 	.word	0x0800fe31

0800feac <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800feac:	b580      	push	{r7, lr}
 800feae:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800feb0:	4b04      	ldr	r3, [pc, #16]	; (800fec4 <_Z25getCurrentMallocAllocatorv+0x18>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d101      	bne.n	800febc <_Z25getCurrentMallocAllocatorv+0x10>
 800feb8:	f000 f806 	bl	800fec8 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800febc:	4b01      	ldr	r3, [pc, #4]	; (800fec4 <_Z25getCurrentMallocAllocatorv+0x18>)
 800febe:	681b      	ldr	r3, [r3, #0]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	bd80      	pop	{r7, pc}
 800fec4:	20000868 	.word	0x20000868

0800fec8 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800fecc:	f000 f810 	bl	800fef0 <_Z22defaultMallocAllocatorv>
 800fed0:	4603      	mov	r3, r0
 800fed2:	4a02      	ldr	r2, [pc, #8]	; (800fedc <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800fed4:	6013      	str	r3, [r2, #0]
}
 800fed6:	bf00      	nop
 800fed8:	bd80      	pop	{r7, pc}
 800feda:	bf00      	nop
 800fedc:	20000868 	.word	0x20000868

0800fee0 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800fee0:	b580      	push	{r7, lr}
 800fee2:	af00      	add	r7, sp, #0
 800fee4:	4801      	ldr	r0, [pc, #4]	; (800feec <__tcf_2+0xc>)
 800fee6:	f000 f859 	bl	800ff9c <_ZN19TestMemoryAllocatorD1Ev>
 800feea:	bd80      	pop	{r7, pc}
 800feec:	2000089c 	.word	0x2000089c

0800fef0 <_Z22defaultMallocAllocatorv>:
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800fef4:	4b13      	ldr	r3, [pc, #76]	; (800ff44 <_Z22defaultMallocAllocatorv+0x54>)
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	f3bf 8f5b 	dmb	ish
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	f003 0301 	and.w	r3, r3, #1
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	bf0c      	ite	eq
 800ff06:	2301      	moveq	r3, #1
 800ff08:	2300      	movne	r3, #0
 800ff0a:	b2db      	uxtb	r3, r3
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d016      	beq.n	800ff3e <_Z22defaultMallocAllocatorv+0x4e>
 800ff10:	480c      	ldr	r0, [pc, #48]	; (800ff44 <_Z22defaultMallocAllocatorv+0x54>)
 800ff12:	f00f fb5d 	bl	801f5d0 <__cxa_guard_acquire>
 800ff16:	4603      	mov	r3, r0
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	bf14      	ite	ne
 800ff1c:	2301      	movne	r3, #1
 800ff1e:	2300      	moveq	r3, #0
 800ff20:	b2db      	uxtb	r3, r3
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d00b      	beq.n	800ff3e <_Z22defaultMallocAllocatorv+0x4e>
 800ff26:	4b08      	ldr	r3, [pc, #32]	; (800ff48 <_Z22defaultMallocAllocatorv+0x58>)
 800ff28:	4a08      	ldr	r2, [pc, #32]	; (800ff4c <_Z22defaultMallocAllocatorv+0x5c>)
 800ff2a:	4909      	ldr	r1, [pc, #36]	; (800ff50 <_Z22defaultMallocAllocatorv+0x60>)
 800ff2c:	4809      	ldr	r0, [pc, #36]	; (800ff54 <_Z22defaultMallocAllocatorv+0x64>)
 800ff2e:	f000 f815 	bl	800ff5c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800ff32:	4804      	ldr	r0, [pc, #16]	; (800ff44 <_Z22defaultMallocAllocatorv+0x54>)
 800ff34:	f00f fb58 	bl	801f5e8 <__cxa_guard_release>
 800ff38:	4807      	ldr	r0, [pc, #28]	; (800ff58 <_Z22defaultMallocAllocatorv+0x68>)
 800ff3a:	f00f fb7c 	bl	801f636 <atexit>
    return &allocator;
 800ff3e:	4b05      	ldr	r3, [pc, #20]	; (800ff54 <_Z22defaultMallocAllocatorv+0x64>)
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	200008b0 	.word	0x200008b0
 800ff48:	0802442c 	.word	0x0802442c
 800ff4c:	08024434 	.word	0x08024434
 800ff50:	0802443c 	.word	0x0802443c
 800ff54:	2000089c 	.word	0x2000089c
 800ff58:	0800fee1 	.word	0x0800fee1

0800ff5c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800ff5c:	b480      	push	{r7}
 800ff5e:	b085      	sub	sp, #20
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	60f8      	str	r0, [r7, #12]
 800ff64:	60b9      	str	r1, [r7, #8]
 800ff66:	607a      	str	r2, [r7, #4]
 800ff68:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800ff6a:	4a0b      	ldr	r2, [pc, #44]	; (800ff98 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	601a      	str	r2, [r3, #0]
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	68ba      	ldr	r2, [r7, #8]
 800ff74:	605a      	str	r2, [r3, #4]
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	687a      	ldr	r2, [r7, #4]
 800ff7a:	609a      	str	r2, [r3, #8]
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	683a      	ldr	r2, [r7, #0]
 800ff80:	60da      	str	r2, [r3, #12]
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2200      	movs	r2, #0
 800ff86:	741a      	strb	r2, [r3, #16]
{
}
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3714      	adds	r7, #20
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr
 800ff96:	bf00      	nop
 800ff98:	08028028 	.word	0x08028028

0800ff9c <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800ff9c:	b480      	push	{r7}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	4a06      	ldr	r2, [pc, #24]	; (800ffc0 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2201      	movs	r2, #1
 800ffae:	741a      	strb	r2, [r3, #16]
}
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	370c      	adds	r7, #12
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr
 800ffbe:	bf00      	nop
 800ffc0:	08028028 	.word	0x08028028

0800ffc4 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
}
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f7ff ffe5 	bl	800ff9c <_ZN19TestMemoryAllocatorD1Ev>
 800ffd2:	2114      	movs	r1, #20
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f7fa f88d 	bl	800a0f4 <_ZdlPvj>
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3708      	adds	r7, #8
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b083      	sub	sp, #12
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	7c1b      	ldrb	r3, [r3, #16]
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	370c      	adds	r7, #12
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800fffc:	b590      	push	{r4, r7, lr}
 800fffe:	b083      	sub	sp, #12
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	3310      	adds	r3, #16
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	4798      	blx	r3
 8010012:	4604      	mov	r4, r0
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	3310      	adds	r3, #16
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	6838      	ldr	r0, [r7, #0]
 801001e:	4798      	blx	r3
 8010020:	4603      	mov	r3, r0
 8010022:	4619      	mov	r1, r3
 8010024:	4620      	mov	r0, r4
 8010026:	f7fc fa51 	bl	800c4cc <_ZN12SimpleString6StrCmpEPKcS1_>
 801002a:	4603      	mov	r3, r0
 801002c:	2b00      	cmp	r3, #0
 801002e:	bf0c      	ite	eq
 8010030:	2301      	moveq	r3, #1
 8010032:	2300      	movne	r3, #0
 8010034:	b2db      	uxtb	r3, r3
}
 8010036:	4618      	mov	r0, r3
 8010038:	370c      	adds	r7, #12
 801003a:	46bd      	mov	sp, r7
 801003c:	bd90      	pop	{r4, r7, pc}
	...

08010040 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 8010040:	b590      	push	{r4, r7, lr}
 8010042:	b083      	sub	sp, #12
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
 8010048:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	3308      	adds	r3, #8
 8010050:	681c      	ldr	r4, [r3, #0]
 8010052:	2301      	movs	r3, #1
 8010054:	4a04      	ldr	r2, [pc, #16]	; (8010068 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 8010056:	6839      	ldr	r1, [r7, #0]
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	47a0      	blx	r4
 801005c:	4603      	mov	r3, r0
}
 801005e:	4618      	mov	r0, r3
 8010060:	370c      	adds	r7, #12
 8010062:	46bd      	mov	sp, r7
 8010064:	bd90      	pop	{r4, r7, pc}
 8010066:	bf00      	nop
 8010068:	08024458 	.word	0x08024458

0801006c <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 801006c:	b590      	push	{r4, r7, lr}
 801006e:	b085      	sub	sp, #20
 8010070:	af02      	add	r7, sp, #8
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	330c      	adds	r3, #12
 801007c:	681c      	ldr	r4, [r3, #0]
 801007e:	2301      	movs	r3, #1
 8010080:	9300      	str	r3, [sp, #0]
 8010082:	4b04      	ldr	r3, [pc, #16]	; (8010094 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 8010084:	2200      	movs	r2, #0
 8010086:	6839      	ldr	r1, [r7, #0]
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	47a0      	blx	r4
}
 801008c:	bf00      	nop
 801008e:	370c      	adds	r7, #12
 8010090:	46bd      	mov	sp, r7
 8010092:	bd90      	pop	{r4, r7, pc}
 8010094:	08024458 	.word	0x08024458

08010098 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	607a      	str	r2, [r7, #4]
 80100a4:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 80100a6:	68b8      	ldr	r0, [r7, #8]
 80100a8:	f7ff fe2a 	bl	800fd00 <_ZL13checkedMallocj>
 80100ac:	4603      	mov	r3, r0
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3710      	adds	r7, #16
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
	...

080100b8 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	60f8      	str	r0, [r7, #12]
 80100c0:	60b9      	str	r1, [r7, #8]
 80100c2:	607a      	str	r2, [r7, #4]
 80100c4:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 80100c6:	4b04      	ldr	r3, [pc, #16]	; (80100d8 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	68b8      	ldr	r0, [r7, #8]
 80100cc:	4798      	blx	r3
}
 80100ce:	bf00      	nop
 80100d0:	3710      	adds	r7, #16
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}
 80100d6:	bf00      	nop
 80100d8:	200000d0 	.word	0x200000d0

080100dc <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 80100dc:	b480      	push	{r7}
 80100de:	b083      	sub	sp, #12
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
    return name_;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	685b      	ldr	r3, [r3, #4]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	689b      	ldr	r3, [r3, #8]
}
 8010100:	4618      	mov	r0, r3
 8010102:	370c      	adds	r7, #12
 8010104:	46bd      	mov	sp, r7
 8010106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010a:	4770      	bx	lr

0801010c <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 801010c:	b480      	push	{r7}
 801010e:	b083      	sub	sp, #12
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
    return free_name_;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	68db      	ldr	r3, [r3, #12]
}
 8010118:	4618      	mov	r0, r3
 801011a:	370c      	adds	r7, #12
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr

08010124 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 8010124:	b480      	push	{r7}
 8010126:	b083      	sub	sp, #12
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
    return this;
 801012c:	687b      	ldr	r3, [r7, #4]
}
 801012e:	4618      	mov	r0, r3
 8010130:	370c      	adds	r7, #12
 8010132:	46bd      	mov	sp, r7
 8010134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010138:	4770      	bx	lr
	...

0801013c <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	4a05      	ldr	r2, [pc, #20]	; (801015c <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	601a      	str	r2, [r3, #0]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	4618      	mov	r0, r3
 801014e:	f7ff ff25 	bl	800ff9c <_ZN19TestMemoryAllocatorD1Ev>
{
}
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	4618      	mov	r0, r3
 8010156:	3708      	adds	r7, #8
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}
 801015c:	08027ff4 	.word	0x08027ff4

08010160 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
}
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f7ff ffe7 	bl	801013c <_ZN20NullUnknownAllocatorD1Ev>
 801016e:	2114      	movs	r1, #20
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f7f9 ffbf 	bl	800a0f4 <_ZdlPvj>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	4618      	mov	r0, r3
 801017a:	3708      	adds	r7, #8
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}

08010180 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 8010180:	b480      	push	{r7}
 8010182:	b085      	sub	sp, #20
 8010184:	af00      	add	r7, sp, #0
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	60b9      	str	r1, [r7, #8]
 801018a:	607a      	str	r2, [r7, #4]
 801018c:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 801018e:	2300      	movs	r3, #0
}
 8010190:	4618      	mov	r0, r3
 8010192:	3714      	adds	r7, #20
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr

0801019c <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 801019c:	b480      	push	{r7}
 801019e:	b085      	sub	sp, #20
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	60b9      	str	r1, [r7, #8]
 80101a6:	607a      	str	r2, [r7, #4]
 80101a8:	603b      	str	r3, [r7, #0]
}
 80101aa:	bf00      	nop
 80101ac:	3714      	adds	r7, #20
 80101ae:	46bd      	mov	sp, r7
 80101b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b4:	4770      	bx	lr
	...

080101b8 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	4b06      	ldr	r3, [pc, #24]	; (80101dc <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 80101c4:	4a05      	ldr	r2, [pc, #20]	; (80101dc <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 80101c6:	4906      	ldr	r1, [pc, #24]	; (80101e0 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 80101c8:	f7ff fec8 	bl	800ff5c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 80101cc:	4a05      	ldr	r2, [pc, #20]	; (80101e4 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	601a      	str	r2, [r3, #0]
{
}
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	4618      	mov	r0, r3
 80101d6:	3708      	adds	r7, #8
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	0802448c 	.word	0x0802448c
 80101e0:	08024494 	.word	0x08024494
 80101e4:	08027ff4 	.word	0x08027ff4

080101e8 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 80101e8:	b580      	push	{r7, lr}
 80101ea:	af00      	add	r7, sp, #0
 80101ec:	4801      	ldr	r0, [pc, #4]	; (80101f4 <__tcf_3+0xc>)
 80101ee:	f7ff ffa5 	bl	801013c <_ZN20NullUnknownAllocatorD1Ev>
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	200008b4 	.word	0x200008b4

080101f8 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 80101fc:	4b12      	ldr	r3, [pc, #72]	; (8010248 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	f3bf 8f5b 	dmb	ish
 8010204:	b2db      	uxtb	r3, r3
 8010206:	f003 0301 	and.w	r3, r3, #1
 801020a:	2b00      	cmp	r3, #0
 801020c:	bf0c      	ite	eq
 801020e:	2301      	moveq	r3, #1
 8010210:	2300      	movne	r3, #0
 8010212:	b2db      	uxtb	r3, r3
 8010214:	2b00      	cmp	r3, #0
 8010216:	d013      	beq.n	8010240 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 8010218:	480b      	ldr	r0, [pc, #44]	; (8010248 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 801021a:	f00f f9d9 	bl	801f5d0 <__cxa_guard_acquire>
 801021e:	4603      	mov	r3, r0
 8010220:	2b00      	cmp	r3, #0
 8010222:	bf14      	ite	ne
 8010224:	2301      	movne	r3, #1
 8010226:	2300      	moveq	r3, #0
 8010228:	b2db      	uxtb	r3, r3
 801022a:	2b00      	cmp	r3, #0
 801022c:	d008      	beq.n	8010240 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 801022e:	4807      	ldr	r0, [pc, #28]	; (801024c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 8010230:	f7ff ffc2 	bl	80101b8 <_ZN20NullUnknownAllocatorC1Ev>
 8010234:	4804      	ldr	r0, [pc, #16]	; (8010248 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8010236:	f00f f9d7 	bl	801f5e8 <__cxa_guard_release>
 801023a:	4805      	ldr	r0, [pc, #20]	; (8010250 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 801023c:	f00f f9fb 	bl	801f636 <atexit>
    return &allocator;
 8010240:	4b02      	ldr	r3, [pc, #8]	; (801024c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 8010242:	4618      	mov	r0, r3
 8010244:	bd80      	pop	{r7, pc}
 8010246:	bf00      	nop
 8010248:	200008c8 	.word	0x200008c8
 801024c:	200008b4 	.word	0x200008b4
 8010250:	080101e9 	.word	0x080101e9

08010254 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 8010254:	b480      	push	{r7}
 8010256:	b083      	sub	sp, #12
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
        return testCount_;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	689b      	ldr	r3, [r3, #8]
    }
 8010260:	4618      	mov	r0, r3
 8010262:	370c      	adds	r7, #12
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr

0801026c <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 801026c:	b480      	push	{r7}
 801026e:	b083      	sub	sp, #12
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	699b      	ldr	r3, [r3, #24]
    }
 8010278:	4618      	mov	r0, r3
 801027a:	370c      	adds	r7, #12
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr

08010284 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 8010284:	b580      	push	{r7, lr}
 8010286:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 8010288:	4b05      	ldr	r3, [pc, #20]	; (80102a0 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 801028a:	781b      	ldrb	r3, [r3, #0]
 801028c:	2b02      	cmp	r3, #2
 801028e:	d103      	bne.n	8010298 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 8010290:	f004 fa4a 	bl	8014728 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 8010294:	4603      	mov	r3, r0
 8010296:	e001      	b.n	801029c <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 8010298:	4b01      	ldr	r3, [pc, #4]	; (80102a0 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 801029a:	781b      	ldrb	r3, [r3, #0]
}
 801029c:	4618      	mov	r0, r3
 801029e:	bd80      	pop	{r7, pc}
 80102a0:	20000088 	.word	0x20000088

080102a4 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 80102a4:	b480      	push	{r7}
 80102a6:	b083      	sub	sp, #12
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 80102ac:	4a0a      	ldr	r2, [pc, #40]	; (80102d8 <_ZN10TestOutputC1Ev+0x34>)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	601a      	str	r2, [r3, #0]
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2200      	movs	r2, #0
 80102b6:	605a      	str	r2, [r3, #4]
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2200      	movs	r2, #0
 80102bc:	721a      	strb	r2, [r3, #8]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2200      	movs	r2, #0
 80102c2:	725a      	strb	r2, [r3, #9]
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	4a05      	ldr	r2, [pc, #20]	; (80102dc <_ZN10TestOutputC1Ev+0x38>)
 80102c8:	60da      	str	r2, [r3, #12]
{
}
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	4618      	mov	r0, r3
 80102ce:	370c      	adds	r7, #12
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr
 80102d8:	0802812c 	.word	0x0802812c
 80102dc:	08024894 	.word	0x08024894

080102e0 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 80102e0:	b480      	push	{r7}
 80102e2:	b083      	sub	sp, #12
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	4a04      	ldr	r2, [pc, #16]	; (80102fc <_ZN10TestOutputD1Ev+0x1c>)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	601a      	str	r2, [r3, #0]
{
}
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	4618      	mov	r0, r3
 80102f2:	370c      	adds	r7, #12
 80102f4:	46bd      	mov	sp, r7
 80102f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fa:	4770      	bx	lr
 80102fc:	0802812c 	.word	0x0802812c

08010300 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 8010300:	b480      	push	{r7}
 8010302:	b083      	sub	sp, #12
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	460b      	mov	r3, r1
 801030a:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	78fa      	ldrb	r2, [r7, #3]
 8010310:	721a      	strb	r2, [r3, #8]
}
 8010312:	bf00      	nop
 8010314:	370c      	adds	r7, #12
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr

0801031e <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 801031e:	b480      	push	{r7}
 8010320:	b083      	sub	sp, #12
 8010322:	af00      	add	r7, sp, #0
 8010324:	6078      	str	r0, [r7, #4]
    color_ = true;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2201      	movs	r2, #1
 801032a:	725a      	strb	r2, [r3, #9]
}
 801032c:	bf00      	nop
 801032e:	370c      	adds	r7, #12
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	3328      	adds	r3, #40	; 0x28
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	6839      	ldr	r1, [r7, #0]
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	4798      	blx	r3
}
 8010350:	bf00      	nop
 8010352:	3708      	adds	r7, #8
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}

08010358 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 8010358:	b590      	push	{r4, r7, lr}
 801035a:	b085      	sub	sp, #20
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	332c      	adds	r3, #44	; 0x2c
 8010368:	681c      	ldr	r4, [r3, #0]
 801036a:	f107 0308 	add.w	r3, r7, #8
 801036e:	6839      	ldr	r1, [r7, #0]
 8010370:	4618      	mov	r0, r3
 8010372:	f7fd f8ff 	bl	800d574 <_Z10StringFroml>
 8010376:	f107 0308 	add.w	r3, r7, #8
 801037a:	4618      	mov	r0, r3
 801037c:	f7fc fdf4 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8010380:	4603      	mov	r3, r0
 8010382:	4619      	mov	r1, r3
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	47a0      	blx	r4
 8010388:	f107 0308 	add.w	r3, r7, #8
 801038c:	4618      	mov	r0, r3
 801038e:	f7fc fe18 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8010392:	bf00      	nop
 8010394:	3714      	adds	r7, #20
 8010396:	46bd      	mov	sp, r7
 8010398:	bd90      	pop	{r4, r7, pc}

0801039a <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 801039a:	b590      	push	{r4, r7, lr}
 801039c:	b085      	sub	sp, #20
 801039e:	af00      	add	r7, sp, #0
 80103a0:	6078      	str	r0, [r7, #4]
 80103a2:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	332c      	adds	r3, #44	; 0x2c
 80103aa:	681c      	ldr	r4, [r3, #0]
 80103ac:	f107 0308 	add.w	r3, r7, #8
 80103b0:	6839      	ldr	r1, [r7, #0]
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7fd fb34 	bl	800da20 <_Z10StringFromj>
 80103b8:	f107 0308 	add.w	r3, r7, #8
 80103bc:	4618      	mov	r0, r3
 80103be:	f7fc fdd3 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 80103c2:	4603      	mov	r3, r0
 80103c4:	4619      	mov	r1, r3
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	47a0      	blx	r4
 80103ca:	f107 0308 	add.w	r3, r7, #8
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7fc fdf7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 80103d4:	bf00      	nop
 80103d6:	3714      	adds	r7, #20
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd90      	pop	{r4, r7, pc}

080103dc <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 80103dc:	b590      	push	{r4, r7, lr}
 80103de:	b087      	sub	sp, #28
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	332c      	adds	r3, #44	; 0x2c
 80103ee:	681c      	ldr	r4, [r3, #0]
 80103f0:	f107 0310 	add.w	r3, r7, #16
 80103f4:	2106      	movs	r1, #6
 80103f6:	ed97 0b00 	vldr	d0, [r7]
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7fd faa6 	bl	800d94c <_Z10StringFromdi>
 8010400:	f107 0310 	add.w	r3, r7, #16
 8010404:	4618      	mov	r0, r3
 8010406:	f7fc fdaf 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801040a:	4603      	mov	r3, r0
 801040c:	4619      	mov	r1, r3
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	47a0      	blx	r4
 8010412:	f107 0310 	add.w	r3, r7, #16
 8010416:	4618      	mov	r0, r3
 8010418:	f7fc fdd3 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 801041c:	bf00      	nop
 801041e:	371c      	adds	r7, #28
 8010420:	46bd      	mov	sp, r7
 8010422:	bd90      	pop	{r4, r7, pc}

08010424 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
    p.print(s);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	332c      	adds	r3, #44	; 0x2c
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	6839      	ldr	r1, [r7, #0]
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	4798      	blx	r3
    return p;
 801043c:	687b      	ldr	r3, [r7, #4]
}
 801043e:	4618      	mov	r0, r3
 8010440:	3708      	adds	r7, #8
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
	...

08010448 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8010448:	b590      	push	{r4, r7, lr}
 801044a:	b085      	sub	sp, #20
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	7a1b      	ldrb	r3, [r3, #8]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d01a      	beq.n	8010490 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	332c      	adds	r3, #44	; 0x2c
 8010460:	681c      	ldr	r4, [r3, #0]
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	3314      	adds	r3, #20
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	f107 0208 	add.w	r2, r7, #8
 801046e:	6839      	ldr	r1, [r7, #0]
 8010470:	4610      	mov	r0, r2
 8010472:	4798      	blx	r3
 8010474:	f107 0308 	add.w	r3, r7, #8
 8010478:	4618      	mov	r0, r3
 801047a:	f7fc fd75 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801047e:	4603      	mov	r3, r0
 8010480:	4619      	mov	r1, r3
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	47a0      	blx	r4
 8010486:	f107 0308 	add.w	r3, r7, #8
 801048a:	4618      	mov	r0, r3
 801048c:	f7fc fd99 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	3318      	adds	r3, #24
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	6838      	ldr	r0, [r7, #0]
 801049a:	4798      	blx	r3
 801049c:	4603      	mov	r3, r0
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d007      	beq.n	80104b2 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	3344      	adds	r3, #68	; 0x44
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	4907      	ldr	r1, [pc, #28]	; (80104c8 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 80104b0:	e006      	b.n	80104c0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	3344      	adds	r3, #68	; 0x44
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	4904      	ldr	r1, [pc, #16]	; (80104cc <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	4798      	blx	r3
}
 80104c0:	bf00      	nop
 80104c2:	3714      	adds	r7, #20
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd90      	pop	{r4, r7, pc}
 80104c8:	08024894 	.word	0x08024894
 80104cc:	08024898 	.word	0x08024898

080104d0 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 80104d0:	b590      	push	{r4, r7, lr}
 80104d2:	b083      	sub	sp, #12
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	7a1b      	ldrb	r3, [r3, #8]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d019      	beq.n	8010516 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	332c      	adds	r3, #44	; 0x2c
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	4910      	ldr	r1, [pc, #64]	; (801052c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	3334      	adds	r3, #52	; 0x34
 80104f6:	681c      	ldr	r4, [r3, #0]
 80104f8:	6838      	ldr	r0, [r7, #0]
 80104fa:	f002 f845 	bl	8012588 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 80104fe:	4603      	mov	r3, r0
 8010500:	4619      	mov	r1, r3
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	47a0      	blx	r4
        print(" ms\n");
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	332c      	adds	r3, #44	; 0x2c
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	4908      	ldr	r1, [pc, #32]	; (8010530 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 8010514:	e005      	b.n	8010522 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	3358      	adds	r3, #88	; 0x58
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	4798      	blx	r3
}
 8010522:	bf00      	nop
 8010524:	370c      	adds	r7, #12
 8010526:	46bd      	mov	sp, r7
 8010528:	bd90      	pop	{r4, r7, pc}
 801052a:	bf00      	nop
 801052c:	0802489c 	.word	0x0802489c
 8010530:	080248a0 	.word	0x080248a0

08010534 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b082      	sub	sp, #8
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	332c      	adds	r3, #44	; 0x2c
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	687a      	ldr	r2, [r7, #4]
 8010546:	68d2      	ldr	r2, [r2, #12]
 8010548:	4611      	mov	r1, r2
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	1c5a      	adds	r2, r3, #1
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	605a      	str	r2, [r3, #4]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	685a      	ldr	r2, [r3, #4]
 801055c:	4b0d      	ldr	r3, [pc, #52]	; (8010594 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 801055e:	fb83 1302 	smull	r1, r3, r3, r2
 8010562:	1119      	asrs	r1, r3, #4
 8010564:	17d3      	asrs	r3, r2, #31
 8010566:	1acb      	subs	r3, r1, r3
 8010568:	2132      	movs	r1, #50	; 0x32
 801056a:	fb01 f303 	mul.w	r3, r1, r3
 801056e:	1ad3      	subs	r3, r2, r3
 8010570:	2b00      	cmp	r3, #0
 8010572:	bf0c      	ite	eq
 8010574:	2301      	moveq	r3, #1
 8010576:	2300      	movne	r3, #0
 8010578:	b2db      	uxtb	r3, r3
 801057a:	2b00      	cmp	r3, #0
 801057c:	d006      	beq.n	801058c <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	332c      	adds	r3, #44	; 0x2c
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	4904      	ldr	r1, [pc, #16]	; (8010598 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	4798      	blx	r3
}
 801058c:	bf00      	nop
 801058e:	3708      	adds	r7, #8
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}
 8010594:	51eb851f 	.word	0x51eb851f
 8010598:	080248a8 	.word	0x080248a8

0801059c <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 801059c:	b480      	push	{r7}
 801059e:	b083      	sub	sp, #12
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	683a      	ldr	r2, [r7, #0]
 80105aa:	60da      	str	r2, [r3, #12]
}
 80105ac:	bf00      	nop
 80105ae:	370c      	adds	r7, #12
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr

080105b8 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 80105b8:	b480      	push	{r7}
 80105ba:	b083      	sub	sp, #12
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
}
 80105c0:	bf00      	nop
 80105c2:	370c      	adds	r7, #12
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr

080105cc <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b083      	sub	sp, #12
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
}
 80105d6:	bf00      	nop
 80105d8:	370c      	adds	r7, #12
 80105da:	46bd      	mov	sp, r7
 80105dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e0:	4770      	bx	lr

080105e2 <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 80105e2:	b480      	push	{r7}
 80105e4:	b083      	sub	sp, #12
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	6078      	str	r0, [r7, #4]
 80105ea:	6039      	str	r1, [r7, #0]
}
 80105ec:	bf00      	nop
 80105ee:	370c      	adds	r7, #12
 80105f0:	46bd      	mov	sp, r7
 80105f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f6:	4770      	bx	lr

080105f8 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 80105f8:	b590      	push	{r4, r7, lr}
 80105fa:	b085      	sub	sp, #20
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
 8010600:	6039      	str	r1, [r7, #0]
    print("\n");
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	332c      	adds	r3, #44	; 0x2c
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	496f      	ldr	r1, [pc, #444]	; (80107c8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 8010610:	6838      	ldr	r0, [r7, #0]
 8010612:	f7f8 f83d 	bl	8008690 <_ZNK10TestResult9isFailureEv>
 8010616:	4603      	mov	r3, r0
 8010618:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 801061a:	6838      	ldr	r0, [r7, #0]
 801061c:	f7f8 f82c 	bl	8008678 <_ZNK10TestResult15getFailureCountEv>
 8010620:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 8010622:	7bfb      	ldrb	r3, [r7, #15]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d02b      	beq.n	8010680 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	7a5b      	ldrb	r3, [r3, #9]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d006      	beq.n	801063e <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	332c      	adds	r3, #44	; 0x2c
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4964      	ldr	r1, [pc, #400]	; (80107cc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	4798      	blx	r3
        }
        print("Errors (");
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	332c      	adds	r3, #44	; 0x2c
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	4962      	ldr	r1, [pc, #392]	; (80107d0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	4798      	blx	r3
        if (failureCount > 0) {
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d00e      	beq.n	8010670 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	3334      	adds	r3, #52	; 0x34
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	68b9      	ldr	r1, [r7, #8]
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	4798      	blx	r3
            print(" failures, ");
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	332c      	adds	r3, #44	; 0x2c
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	495a      	ldr	r1, [pc, #360]	; (80107d4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 801066a:	6878      	ldr	r0, [r7, #4]
 801066c:	4798      	blx	r3
 801066e:	e019      	b.n	80106a4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	332c      	adds	r3, #44	; 0x2c
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	4957      	ldr	r1, [pc, #348]	; (80107d8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	4798      	blx	r3
 801067e:	e011      	b.n	80106a4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	7a5b      	ldrb	r3, [r3, #9]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d006      	beq.n	8010696 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	332c      	adds	r3, #44	; 0x2c
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	4952      	ldr	r1, [pc, #328]	; (80107dc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	4798      	blx	r3
        }
        print("OK (");
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	332c      	adds	r3, #44	; 0x2c
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	4950      	ldr	r1, [pc, #320]	; (80107e0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	4798      	blx	r3
    }
    print(result.getTestCount());
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	3334      	adds	r3, #52	; 0x34
 80106aa:	681c      	ldr	r4, [r3, #0]
 80106ac:	6838      	ldr	r0, [r7, #0]
 80106ae:	f7ff fdd1 	bl	8010254 <_ZNK10TestResult12getTestCountEv>
 80106b2:	4603      	mov	r3, r0
 80106b4:	4619      	mov	r1, r3
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	47a0      	blx	r4
    print(" tests, ");
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	332c      	adds	r3, #44	; 0x2c
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	4948      	ldr	r1, [pc, #288]	; (80107e4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	4798      	blx	r3
    print(result.getRunCount());
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	3334      	adds	r3, #52	; 0x34
 80106ce:	681c      	ldr	r4, [r3, #0]
 80106d0:	6838      	ldr	r0, [r7, #0]
 80106d2:	f7f7 ffb9 	bl	8008648 <_ZNK10TestResult11getRunCountEv>
 80106d6:	4603      	mov	r3, r0
 80106d8:	4619      	mov	r1, r3
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	47a0      	blx	r4
    print(" ran, ");
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	332c      	adds	r3, #44	; 0x2c
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	4940      	ldr	r1, [pc, #256]	; (80107e8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	4798      	blx	r3
    print(result.getCheckCount());
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	3334      	adds	r3, #52	; 0x34
 80106f2:	681c      	ldr	r4, [r3, #0]
 80106f4:	6838      	ldr	r0, [r7, #0]
 80106f6:	f7f8 fc13 	bl	8008f20 <_ZNK10TestResult13getCheckCountEv>
 80106fa:	4603      	mov	r3, r0
 80106fc:	4619      	mov	r1, r3
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	47a0      	blx	r4
    print(" checks, ");
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	332c      	adds	r3, #44	; 0x2c
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	4938      	ldr	r1, [pc, #224]	; (80107ec <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	4798      	blx	r3
    print(result.getIgnoredCount());
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	3334      	adds	r3, #52	; 0x34
 8010716:	681c      	ldr	r4, [r3, #0]
 8010718:	6838      	ldr	r0, [r7, #0]
 801071a:	f7f7 ffa1 	bl	8008660 <_ZNK10TestResult15getIgnoredCountEv>
 801071e:	4603      	mov	r3, r0
 8010720:	4619      	mov	r1, r3
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	47a0      	blx	r4
    print(" ignored, ");
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	332c      	adds	r3, #44	; 0x2c
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	4930      	ldr	r1, [pc, #192]	; (80107f0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	4798      	blx	r3
    print(result.getFilteredOutCount());
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	3334      	adds	r3, #52	; 0x34
 801073a:	681c      	ldr	r4, [r3, #0]
 801073c:	6838      	ldr	r0, [r7, #0]
 801073e:	f7ff fd95 	bl	801026c <_ZNK10TestResult19getFilteredOutCountEv>
 8010742:	4603      	mov	r3, r0
 8010744:	4619      	mov	r1, r3
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	47a0      	blx	r4
    print(" filtered out, ");
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	332c      	adds	r3, #44	; 0x2c
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	4928      	ldr	r1, [pc, #160]	; (80107f4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	3334      	adds	r3, #52	; 0x34
 801075e:	681c      	ldr	r4, [r3, #0]
 8010760:	6838      	ldr	r0, [r7, #0]
 8010762:	f001 ff05 	bl	8012570 <_ZNK10TestResult21getTotalExecutionTimeEv>
 8010766:	4603      	mov	r3, r0
 8010768:	4619      	mov	r1, r3
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	47a0      	blx	r4
    print(" ms)");
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	332c      	adds	r3, #44	; 0x2c
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4920      	ldr	r1, [pc, #128]	; (80107f8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	4798      	blx	r3
    if (color_) {
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	7a5b      	ldrb	r3, [r3, #9]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d006      	beq.n	8010792 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	332c      	adds	r3, #44	; 0x2c
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	491b      	ldr	r1, [pc, #108]	; (80107fc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 8010792:	7bfb      	ldrb	r3, [r7, #15]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d009      	beq.n	80107ac <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d106      	bne.n	80107ac <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	332c      	adds	r3, #44	; 0x2c
 80107a4:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 80107a6:	4916      	ldr	r1, [pc, #88]	; (8010800 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	4798      	blx	r3
    }
    print("\n\n");
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	332c      	adds	r3, #44	; 0x2c
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	4913      	ldr	r1, [pc, #76]	; (8010804 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	4798      	blx	r3

    dotCount_ = 0;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2200      	movs	r2, #0
 80107be:	605a      	str	r2, [r3, #4]
}
 80107c0:	bf00      	nop
 80107c2:	3714      	adds	r7, #20
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd90      	pop	{r4, r7, pc}
 80107c8:	080248a8 	.word	0x080248a8
 80107cc:	080248ac 	.word	0x080248ac
 80107d0:	080248b4 	.word	0x080248b4
 80107d4:	080248c0 	.word	0x080248c0
 80107d8:	080248cc 	.word	0x080248cc
 80107dc:	080248dc 	.word	0x080248dc
 80107e0:	080248e4 	.word	0x080248e4
 80107e4:	080248ec 	.word	0x080248ec
 80107e8:	080248f8 	.word	0x080248f8
 80107ec:	08024900 	.word	0x08024900
 80107f0:	0802490c 	.word	0x0802490c
 80107f4:	08024918 	.word	0x08024918
 80107f8:	08024928 	.word	0x08024928
 80107fc:	08024930 	.word	0x08024930
 8010800:	08024934 	.word	0x08024934
 8010804:	080249d8 	.word	0x080249d8

08010808 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b084      	sub	sp, #16
 801080c:	af00      	add	r7, sp, #0
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	60b9      	str	r1, [r7, #8]
 8010812:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2b01      	cmp	r3, #1
 8010818:	d922      	bls.n	8010860 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	332c      	adds	r3, #44	; 0x2c
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	4911      	ldr	r1, [pc, #68]	; (8010868 <_ZN10TestOutput12printTestRunEjj+0x60>)
 8010824:	68f8      	ldr	r0, [r7, #12]
 8010826:	4798      	blx	r3
        print(number);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	3334      	adds	r3, #52	; 0x34
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	68b9      	ldr	r1, [r7, #8]
 8010832:	68f8      	ldr	r0, [r7, #12]
 8010834:	4798      	blx	r3
        print(" of ");
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	332c      	adds	r3, #44	; 0x2c
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	490b      	ldr	r1, [pc, #44]	; (801086c <_ZN10TestOutput12printTestRunEjj+0x64>)
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	4798      	blx	r3
        print(total);
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	3334      	adds	r3, #52	; 0x34
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	6879      	ldr	r1, [r7, #4]
 801084e:	68f8      	ldr	r0, [r7, #12]
 8010850:	4798      	blx	r3
        print("\n");
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	332c      	adds	r3, #44	; 0x2c
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4905      	ldr	r1, [pc, #20]	; (8010870 <_ZN10TestOutput12printTestRunEjj+0x68>)
 801085c:	68f8      	ldr	r0, [r7, #12]
 801085e:	4798      	blx	r3
    }
}
 8010860:	bf00      	nop
 8010862:	3710      	adds	r7, #16
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}
 8010868:	080249dc 	.word	0x080249dc
 801086c:	080249e8 	.word	0x080249e8
 8010870:	080248a8 	.word	0x080248a8

08010874 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b084      	sub	sp, #16
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 801087e:	6838      	ldr	r0, [r7, #0]
 8010880:	f7fd ffa1 	bl	800e7c6 <_ZNK11TestFailure17isOutsideTestFileEv>
 8010884:	4603      	mov	r3, r0
 8010886:	2b00      	cmp	r3, #0
 8010888:	d105      	bne.n	8010896 <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 801088a:	6838      	ldr	r0, [r7, #0]
 801088c:	f7fd ffad 	bl	800e7ea <_ZNK11TestFailure18isInHelperFunctionEv>
 8010890:	4603      	mov	r3, r0
 8010892:	2b00      	cmp	r3, #0
 8010894:	d001      	beq.n	801089a <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 8010896:	2301      	movs	r3, #1
 8010898:	e000      	b.n	801089c <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 801089a:	2300      	movs	r3, #0
 801089c:	2b00      	cmp	r3, #0
 801089e:	d004      	beq.n	80108aa <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 80108a0:	6839      	ldr	r1, [r7, #0]
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f000 f81d 	bl	80108e2 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 80108a8:	e003      	b.n	80108b2 <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 80108aa:	6839      	ldr	r1, [r7, #0]
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f000 f86b 	bl	8010988 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	3318      	adds	r3, #24
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f107 0208 	add.w	r2, r7, #8
 80108be:	6839      	ldr	r1, [r7, #0]
 80108c0:	4610      	mov	r0, r2
 80108c2:	4798      	blx	r3
 80108c4:	f107 0308 	add.w	r3, r7, #8
 80108c8:	4619      	mov	r1, r3
 80108ca:	6878      	ldr	r0, [r7, #4]
 80108cc:	f000 f8b2 	bl	8010a34 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 80108d0:	f107 0308 	add.w	r3, r7, #8
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7fc fb74 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 80108da:	bf00      	nop
 80108dc:	3710      	adds	r7, #16
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}

080108e2 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 80108e2:	b580      	push	{r7, lr}
 80108e4:	b088      	sub	sp, #32
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
 80108ea:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	331c      	adds	r3, #28
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f107 0208 	add.w	r2, r7, #8
 80108f8:	6839      	ldr	r1, [r7, #0]
 80108fa:	4610      	mov	r0, r2
 80108fc:	4798      	blx	r3
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	3320      	adds	r3, #32
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	6838      	ldr	r0, [r7, #0]
 8010908:	4798      	blx	r3
 801090a:	4602      	mov	r2, r0
 801090c:	f107 0308 	add.w	r3, r7, #8
 8010910:	4619      	mov	r1, r3
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f000 f8be 	bl	8010a94 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8010918:	f107 0308 	add.w	r3, r7, #8
 801091c:	4618      	mov	r0, r3
 801091e:	f7fc fb50 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	330c      	adds	r3, #12
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f107 0210 	add.w	r2, r7, #16
 801092e:	6839      	ldr	r1, [r7, #0]
 8010930:	4610      	mov	r0, r2
 8010932:	4798      	blx	r3
 8010934:	f107 0310 	add.w	r3, r7, #16
 8010938:	4619      	mov	r1, r3
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f000 f85c 	bl	80109f8 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8010940:	f107 0310 	add.w	r3, r7, #16
 8010944:	4618      	mov	r0, r3
 8010946:	f7fc fb3c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	3308      	adds	r3, #8
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	f107 0218 	add.w	r2, r7, #24
 8010956:	6839      	ldr	r1, [r7, #0]
 8010958:	4610      	mov	r0, r2
 801095a:	4798      	blx	r3
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	3314      	adds	r3, #20
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	6838      	ldr	r0, [r7, #0]
 8010966:	4798      	blx	r3
 8010968:	4602      	mov	r2, r0
 801096a:	f107 0318 	add.w	r3, r7, #24
 801096e:	4619      	mov	r1, r3
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f000 f88f 	bl	8010a94 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8010976:	f107 0318 	add.w	r3, r7, #24
 801097a:	4618      	mov	r0, r3
 801097c:	f7fc fb21 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8010980:	bf00      	nop
 8010982:	3720      	adds	r7, #32
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b086      	sub	sp, #24
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	3308      	adds	r3, #8
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	f107 0208 	add.w	r2, r7, #8
 801099e:	6839      	ldr	r1, [r7, #0]
 80109a0:	4610      	mov	r0, r2
 80109a2:	4798      	blx	r3
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	3314      	adds	r3, #20
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	6838      	ldr	r0, [r7, #0]
 80109ae:	4798      	blx	r3
 80109b0:	4602      	mov	r2, r0
 80109b2:	f107 0308 	add.w	r3, r7, #8
 80109b6:	4619      	mov	r1, r3
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f000 f86b 	bl	8010a94 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 80109be:	f107 0308 	add.w	r3, r7, #8
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fc fafd 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	330c      	adds	r3, #12
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	f107 0210 	add.w	r2, r7, #16
 80109d4:	6839      	ldr	r1, [r7, #0]
 80109d6:	4610      	mov	r0, r2
 80109d8:	4798      	blx	r3
 80109da:	f107 0310 	add.w	r3, r7, #16
 80109de:	4619      	mov	r1, r3
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f000 f809 	bl	80109f8 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 80109e6:	f107 0310 	add.w	r3, r7, #16
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7fc fae9 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 80109f0:	bf00      	nop
 80109f2:	3718      	adds	r7, #24
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 80109f8:	b590      	push	{r4, r7, lr}
 80109fa:	b083      	sub	sp, #12
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	332c      	adds	r3, #44	; 0x2c
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	4909      	ldr	r1, [pc, #36]	; (8010a30 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	4798      	blx	r3
    print(testName.asCharString());
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	332c      	adds	r3, #44	; 0x2c
 8010a16:	681c      	ldr	r4, [r3, #0]
 8010a18:	6838      	ldr	r0, [r7, #0]
 8010a1a:	f7fc faa5 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	4619      	mov	r1, r3
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	47a0      	blx	r4
}
 8010a26:	bf00      	nop
 8010a28:	370c      	adds	r7, #12
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd90      	pop	{r4, r7, pc}
 8010a2e:	bf00      	nop
 8010a30:	080249f0 	.word	0x080249f0

08010a34 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 8010a34:	b590      	push	{r4, r7, lr}
 8010a36:	b083      	sub	sp, #12
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6039      	str	r1, [r7, #0]
    print("\n");
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	332c      	adds	r3, #44	; 0x2c
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	4910      	ldr	r1, [pc, #64]	; (8010a88 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	4798      	blx	r3
    print("\t");
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	332c      	adds	r3, #44	; 0x2c
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	490d      	ldr	r1, [pc, #52]	; (8010a8c <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	4798      	blx	r3
    print(reason.asCharString());
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	332c      	adds	r3, #44	; 0x2c
 8010a60:	681c      	ldr	r4, [r3, #0]
 8010a62:	6838      	ldr	r0, [r7, #0]
 8010a64:	f7fc fa80 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	47a0      	blx	r4
    print("\n\n");
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	332c      	adds	r3, #44	; 0x2c
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	4905      	ldr	r1, [pc, #20]	; (8010a90 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	4798      	blx	r3
}
 8010a7e:	bf00      	nop
 8010a80:	370c      	adds	r7, #12
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd90      	pop	{r4, r7, pc}
 8010a86:	bf00      	nop
 8010a88:	080248a8 	.word	0x080248a8
 8010a8c:	08024a00 	.word	0x08024a00
 8010a90:	080249d8 	.word	0x080249d8

08010a94 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 8010a94:	b590      	push	{r4, r7, lr}
 8010a96:	b089      	sub	sp, #36	; 0x24
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	60f8      	str	r0, [r7, #12]
 8010a9c:	60b9      	str	r1, [r7, #8]
 8010a9e:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 8010aa0:	f7ff fbf0 	bl	8010284 <_ZN10TestOutput21getWorkingEnvironmentEv>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	bf0c      	ite	eq
 8010aaa:	2301      	moveq	r3, #1
 8010aac:	2300      	movne	r3, #0
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d015      	beq.n	8010ae0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	3354      	adds	r3, #84	; 0x54
 8010aba:	681c      	ldr	r4, [r3, #0]
 8010abc:	f107 0310 	add.w	r3, r7, #16
 8010ac0:	68b9      	ldr	r1, [r7, #8]
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7fb ff19 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 8010ac8:	f107 0310 	add.w	r3, r7, #16
 8010acc:	687a      	ldr	r2, [r7, #4]
 8010ace:	4619      	mov	r1, r3
 8010ad0:	68f8      	ldr	r0, [r7, #12]
 8010ad2:	47a0      	blx	r4
 8010ad4:	f107 0310 	add.w	r3, r7, #16
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7fc fa72 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 8010ade:	e014      	b.n	8010b0a <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	3350      	adds	r3, #80	; 0x50
 8010ae6:	681c      	ldr	r4, [r3, #0]
 8010ae8:	f107 0318 	add.w	r3, r7, #24
 8010aec:	68b9      	ldr	r1, [r7, #8]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7fb ff03 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 8010af4:	f107 0318 	add.w	r3, r7, #24
 8010af8:	687a      	ldr	r2, [r7, #4]
 8010afa:	4619      	mov	r1, r3
 8010afc:	68f8      	ldr	r0, [r7, #12]
 8010afe:	47a0      	blx	r4
 8010b00:	f107 0318 	add.w	r3, r7, #24
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7fc fa5c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8010b0a:	bf00      	nop
 8010b0c:	3724      	adds	r7, #36	; 0x24
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd90      	pop	{r4, r7, pc}
	...

08010b14 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8010b14:	b590      	push	{r4, r7, lr}
 8010b16:	b085      	sub	sp, #20
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	60b9      	str	r1, [r7, #8]
 8010b1e:	607a      	str	r2, [r7, #4]
    print("\n");
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	332c      	adds	r3, #44	; 0x2c
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	4916      	ldr	r1, [pc, #88]	; (8010b84 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 8010b2a:	68f8      	ldr	r0, [r7, #12]
 8010b2c:	4798      	blx	r3
    print(file.asCharString());
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	332c      	adds	r3, #44	; 0x2c
 8010b34:	681c      	ldr	r4, [r3, #0]
 8010b36:	68b8      	ldr	r0, [r7, #8]
 8010b38:	f7fc fa16 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	4619      	mov	r1, r3
 8010b40:	68f8      	ldr	r0, [r7, #12]
 8010b42:	47a0      	blx	r4
    print(":");
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	332c      	adds	r3, #44	; 0x2c
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	490e      	ldr	r1, [pc, #56]	; (8010b88 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 8010b4e:	68f8      	ldr	r0, [r7, #12]
 8010b50:	4798      	blx	r3
    print(lineNumber);
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	3334      	adds	r3, #52	; 0x34
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	6879      	ldr	r1, [r7, #4]
 8010b5c:	68f8      	ldr	r0, [r7, #12]
 8010b5e:	4798      	blx	r3
    print(":");
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	332c      	adds	r3, #44	; 0x2c
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	4907      	ldr	r1, [pc, #28]	; (8010b88 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 8010b6a:	68f8      	ldr	r0, [r7, #12]
 8010b6c:	4798      	blx	r3
    print(" error:");
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	332c      	adds	r3, #44	; 0x2c
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	4905      	ldr	r1, [pc, #20]	; (8010b8c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 8010b78:	68f8      	ldr	r0, [r7, #12]
 8010b7a:	4798      	blx	r3
}
 8010b7c:	bf00      	nop
 8010b7e:	3714      	adds	r7, #20
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd90      	pop	{r4, r7, pc}
 8010b84:	080248a8 	.word	0x080248a8
 8010b88:	08024a04 	.word	0x08024a04
 8010b8c:	08024a08 	.word	0x08024a08

08010b90 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8010b90:	b590      	push	{r4, r7, lr}
 8010b92:	b085      	sub	sp, #20
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	60f8      	str	r0, [r7, #12]
 8010b98:	60b9      	str	r1, [r7, #8]
 8010b9a:	607a      	str	r2, [r7, #4]
    print("\n");
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	332c      	adds	r3, #44	; 0x2c
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	4916      	ldr	r1, [pc, #88]	; (8010c00 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 8010ba6:	68f8      	ldr	r0, [r7, #12]
 8010ba8:	4798      	blx	r3
    print(file.asCharString());
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	332c      	adds	r3, #44	; 0x2c
 8010bb0:	681c      	ldr	r4, [r3, #0]
 8010bb2:	68b8      	ldr	r0, [r7, #8]
 8010bb4:	f7fc f9d8 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	4619      	mov	r1, r3
 8010bbc:	68f8      	ldr	r0, [r7, #12]
 8010bbe:	47a0      	blx	r4
    print("(");
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	332c      	adds	r3, #44	; 0x2c
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	490e      	ldr	r1, [pc, #56]	; (8010c04 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 8010bca:	68f8      	ldr	r0, [r7, #12]
 8010bcc:	4798      	blx	r3
    print(lineNumber);
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	3334      	adds	r3, #52	; 0x34
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	6879      	ldr	r1, [r7, #4]
 8010bd8:	68f8      	ldr	r0, [r7, #12]
 8010bda:	4798      	blx	r3
    print("):");
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	332c      	adds	r3, #44	; 0x2c
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	4908      	ldr	r1, [pc, #32]	; (8010c08 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 8010be6:	68f8      	ldr	r0, [r7, #12]
 8010be8:	4798      	blx	r3
    print(" error:");
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	332c      	adds	r3, #44	; 0x2c
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	4906      	ldr	r1, [pc, #24]	; (8010c0c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 8010bf4:	68f8      	ldr	r0, [r7, #12]
 8010bf6:	4798      	blx	r3
}
 8010bf8:	bf00      	nop
 8010bfa:	3714      	adds	r7, #20
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd90      	pop	{r4, r7, pc}
 8010c00:	080248a8 	.word	0x080248a8
 8010c04:	08024a10 	.word	0x08024a10
 8010c08:	08024a14 	.word	0x08024a14
 8010c0c:	08024a08 	.word	0x08024a08

08010c10 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	7a1b      	ldrb	r3, [r3, #8]
 8010c1e:	2b02      	cmp	r3, #2
 8010c20:	d106      	bne.n	8010c30 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	3328      	adds	r3, #40	; 0x28
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	6839      	ldr	r1, [r7, #0]
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	4798      	blx	r3
}
 8010c30:	bf00      	nop
 8010c32:	3708      	adds	r7, #8
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	6039      	str	r1, [r7, #0]
    while (*s) {
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d009      	beq.n	8010c5e <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 8010c4a:	4b0a      	ldr	r3, [pc, #40]	; (8010c74 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	683a      	ldr	r2, [r7, #0]
 8010c50:	7812      	ldrb	r2, [r2, #0]
 8010c52:	4610      	mov	r0, r2
 8010c54:	4798      	blx	r3
        s++;
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	3301      	adds	r3, #1
 8010c5a:	603b      	str	r3, [r7, #0]
    while (*s) {
 8010c5c:	e7f1      	b.n	8010c42 <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	334c      	adds	r3, #76	; 0x4c
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	4798      	blx	r3
}
 8010c6a:	bf00      	nop
 8010c6c:	3708      	adds	r7, #8
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
 8010c72:	bf00      	nop
 8010c74:	200000c0 	.word	0x200000c0

08010c78 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 8010c80:	4b03      	ldr	r3, [pc, #12]	; (8010c90 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	4798      	blx	r3
}
 8010c86:	bf00      	nop
 8010c88:	3708      	adds	r7, #8
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	bf00      	nop
 8010c90:	200000c4 	.word	0x200000c4

08010c94 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7ff fb00 	bl	80102a4 <_ZN10TestOutputC1Ev>
 8010ca4:	4a06      	ldr	r2, [pc, #24]	; (8010cc0 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	601a      	str	r2, [r3, #0]
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2200      	movs	r2, #0
 8010cae:	611a      	str	r2, [r3, #16]
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	615a      	str	r2, [r3, #20]
{
}
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3708      	adds	r7, #8
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}
 8010cc0:	0802805c 	.word	0x0802805c

08010cc4 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b082      	sub	sp, #8
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	4a0e      	ldr	r2, [pc, #56]	; (8010d08 <_ZN19CompositeTestOutputD1Ev+0x44>)
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	691b      	ldr	r3, [r3, #16]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d004      	beq.n	8010ce4 <_ZN19CompositeTestOutputD1Ev+0x20>
 8010cda:	681a      	ldr	r2, [r3, #0]
 8010cdc:	3204      	adds	r2, #4
 8010cde:	6812      	ldr	r2, [r2, #0]
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	4790      	blx	r2
  delete outputTwo_;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	695b      	ldr	r3, [r3, #20]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d004      	beq.n	8010cf6 <_ZN19CompositeTestOutputD1Ev+0x32>
 8010cec:	681a      	ldr	r2, [r3, #0]
 8010cee:	3204      	adds	r2, #4
 8010cf0:	6812      	ldr	r2, [r2, #0]
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7ff faf1 	bl	80102e0 <_ZN10TestOutputD1Ev>
}
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	4618      	mov	r0, r3
 8010d02:	3708      	adds	r7, #8
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}
 8010d08:	0802805c 	.word	0x0802805c

08010d0c <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
}
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f7ff ffd5 	bl	8010cc4 <_ZN19CompositeTestOutputD1Ev>
 8010d1a:	2118      	movs	r1, #24
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f7f9 f9e9 	bl	800a0f4 <_ZdlPvj>
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	4618      	mov	r0, r3
 8010d26:	3708      	adds	r7, #8
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b082      	sub	sp, #8
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	691b      	ldr	r3, [r3, #16]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d004      	beq.n	8010d48 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 8010d3e:	681a      	ldr	r2, [r3, #0]
 8010d40:	3204      	adds	r2, #4
 8010d42:	6812      	ldr	r2, [r2, #0]
 8010d44:	4618      	mov	r0, r3
 8010d46:	4790      	blx	r2
  outputOne_ = output;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	683a      	ldr	r2, [r7, #0]
 8010d4c:	611a      	str	r2, [r3, #16]
}
 8010d4e:	bf00      	nop
 8010d50:	3708      	adds	r7, #8
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}

08010d56 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 8010d56:	b580      	push	{r7, lr}
 8010d58:	b082      	sub	sp, #8
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	6078      	str	r0, [r7, #4]
 8010d5e:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	695b      	ldr	r3, [r3, #20]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d004      	beq.n	8010d72 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 8010d68:	681a      	ldr	r2, [r3, #0]
 8010d6a:	3204      	adds	r2, #4
 8010d6c:	6812      	ldr	r2, [r2, #0]
 8010d6e:	4618      	mov	r0, r3
 8010d70:	4790      	blx	r2
  outputTwo_ = output;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	683a      	ldr	r2, [r7, #0]
 8010d76:	615a      	str	r2, [r3, #20]
}
 8010d78:	bf00      	nop
 8010d7a:	3708      	adds	r7, #8
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	691b      	ldr	r3, [r3, #16]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d008      	beq.n	8010da2 <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	691a      	ldr	r2, [r3, #16]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	691b      	ldr	r3, [r3, #16]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	3308      	adds	r3, #8
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	4610      	mov	r0, r2
 8010da0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	695b      	ldr	r3, [r3, #20]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d008      	beq.n	8010dbc <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	695a      	ldr	r2, [r3, #20]
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	695b      	ldr	r3, [r3, #20]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	3308      	adds	r3, #8
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	4610      	mov	r0, r2
 8010dba:	4798      	blx	r3
}
 8010dbc:	bf00      	nop
 8010dbe:	3708      	adds	r7, #8
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	691b      	ldr	r3, [r3, #16]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d009      	beq.n	8010dea <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	691a      	ldr	r2, [r3, #16]
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	691b      	ldr	r3, [r3, #16]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	330c      	adds	r3, #12
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	6839      	ldr	r1, [r7, #0]
 8010de6:	4610      	mov	r0, r2
 8010de8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	695b      	ldr	r3, [r3, #20]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d009      	beq.n	8010e06 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	695a      	ldr	r2, [r3, #20]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	695b      	ldr	r3, [r3, #20]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	330c      	adds	r3, #12
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	6839      	ldr	r1, [r7, #0]
 8010e02:	4610      	mov	r0, r2
 8010e04:	4798      	blx	r3
}
 8010e06:	bf00      	nop
 8010e08:	3708      	adds	r7, #8
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}

08010e0e <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8010e0e:	b580      	push	{r7, lr}
 8010e10:	b082      	sub	sp, #8
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
 8010e16:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	691b      	ldr	r3, [r3, #16]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d009      	beq.n	8010e34 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	691a      	ldr	r2, [r3, #16]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	691b      	ldr	r3, [r3, #16]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	3310      	adds	r3, #16
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	6839      	ldr	r1, [r7, #0]
 8010e30:	4610      	mov	r0, r2
 8010e32:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	695b      	ldr	r3, [r3, #20]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d009      	beq.n	8010e50 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	695a      	ldr	r2, [r3, #20]
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	695b      	ldr	r3, [r3, #20]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	3310      	adds	r3, #16
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	6839      	ldr	r1, [r7, #0]
 8010e4c:	4610      	mov	r0, r2
 8010e4e:	4798      	blx	r3
}
 8010e50:	bf00      	nop
 8010e52:	3708      	adds	r7, #8
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}

08010e58 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b082      	sub	sp, #8
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	691b      	ldr	r3, [r3, #16]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d009      	beq.n	8010e7e <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	691a      	ldr	r2, [r3, #16]
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	691b      	ldr	r3, [r3, #16]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	3314      	adds	r3, #20
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	6839      	ldr	r1, [r7, #0]
 8010e7a:	4610      	mov	r0, r2
 8010e7c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	695b      	ldr	r3, [r3, #20]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d009      	beq.n	8010e9a <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	695a      	ldr	r2, [r3, #20]
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	695b      	ldr	r3, [r3, #20]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	3314      	adds	r3, #20
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	6839      	ldr	r1, [r7, #0]
 8010e96:	4610      	mov	r0, r2
 8010e98:	4798      	blx	r3
}
 8010e9a:	bf00      	nop
 8010e9c:	3708      	adds	r7, #8
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}

08010ea2 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 8010ea2:	b580      	push	{r7, lr}
 8010ea4:	b082      	sub	sp, #8
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
 8010eaa:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	691b      	ldr	r3, [r3, #16]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d009      	beq.n	8010ec8 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	691a      	ldr	r2, [r3, #16]
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	691b      	ldr	r3, [r3, #16]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	3318      	adds	r3, #24
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	6839      	ldr	r1, [r7, #0]
 8010ec4:	4610      	mov	r0, r2
 8010ec6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	695b      	ldr	r3, [r3, #20]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d009      	beq.n	8010ee4 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	695a      	ldr	r2, [r3, #20]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	695b      	ldr	r3, [r3, #20]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	3318      	adds	r3, #24
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	6839      	ldr	r1, [r7, #0]
 8010ee0:	4610      	mov	r0, r2
 8010ee2:	4798      	blx	r3
}
 8010ee4:	bf00      	nop
 8010ee6:	3708      	adds	r7, #8
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}

08010eec <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	691b      	ldr	r3, [r3, #16]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d009      	beq.n	8010f12 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	691a      	ldr	r2, [r3, #16]
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	691b      	ldr	r3, [r3, #16]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	331c      	adds	r3, #28
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	6839      	ldr	r1, [r7, #0]
 8010f0e:	4610      	mov	r0, r2
 8010f10:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	695b      	ldr	r3, [r3, #20]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d009      	beq.n	8010f2e <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	695a      	ldr	r2, [r3, #20]
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	695b      	ldr	r3, [r3, #20]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	331c      	adds	r3, #28
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	6839      	ldr	r1, [r7, #0]
 8010f2a:	4610      	mov	r0, r2
 8010f2c:	4798      	blx	r3
}
 8010f2e:	bf00      	nop
 8010f30:	3708      	adds	r7, #8
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}

08010f36 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 8010f36:	b580      	push	{r7, lr}
 8010f38:	b082      	sub	sp, #8
 8010f3a:	af00      	add	r7, sp, #0
 8010f3c:	6078      	str	r0, [r7, #4]
 8010f3e:	460b      	mov	r3, r1
 8010f40:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	691b      	ldr	r3, [r3, #16]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d009      	beq.n	8010f5e <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	691a      	ldr	r2, [r3, #16]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	691b      	ldr	r3, [r3, #16]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	3320      	adds	r3, #32
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	78f9      	ldrb	r1, [r7, #3]
 8010f5a:	4610      	mov	r0, r2
 8010f5c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	695b      	ldr	r3, [r3, #20]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d009      	beq.n	8010f7a <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	695a      	ldr	r2, [r3, #20]
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	695b      	ldr	r3, [r3, #20]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	3320      	adds	r3, #32
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	78f9      	ldrb	r1, [r7, #3]
 8010f76:	4610      	mov	r0, r2
 8010f78:	4798      	blx	r3
}
 8010f7a:	bf00      	nop
 8010f7c:	3708      	adds	r7, #8
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}

08010f82 <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 8010f82:	b580      	push	{r7, lr}
 8010f84:	b082      	sub	sp, #8
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	691b      	ldr	r3, [r3, #16]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d008      	beq.n	8010fa4 <_ZN19CompositeTestOutput5colorEv+0x22>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	691a      	ldr	r2, [r3, #16]
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	691b      	ldr	r3, [r3, #16]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	3324      	adds	r3, #36	; 0x24
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	4610      	mov	r0, r2
 8010fa2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	695b      	ldr	r3, [r3, #20]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d008      	beq.n	8010fbe <_ZN19CompositeTestOutput5colorEv+0x3c>
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	695a      	ldr	r2, [r3, #20]
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	695b      	ldr	r3, [r3, #20]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	3324      	adds	r3, #36	; 0x24
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	4610      	mov	r0, r2
 8010fbc:	4798      	blx	r3
}
 8010fbe:	bf00      	nop
 8010fc0:	3708      	adds	r7, #8
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}

08010fc6 <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 8010fc6:	b580      	push	{r7, lr}
 8010fc8:	b082      	sub	sp, #8
 8010fca:	af00      	add	r7, sp, #0
 8010fcc:	6078      	str	r0, [r7, #4]
 8010fce:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	691b      	ldr	r3, [r3, #16]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d009      	beq.n	8010fec <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	691a      	ldr	r2, [r3, #16]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	691b      	ldr	r3, [r3, #16]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	3328      	adds	r3, #40	; 0x28
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	6839      	ldr	r1, [r7, #0]
 8010fe8:	4610      	mov	r0, r2
 8010fea:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	695b      	ldr	r3, [r3, #20]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d009      	beq.n	8011008 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	695a      	ldr	r2, [r3, #20]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	695b      	ldr	r3, [r3, #20]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	3328      	adds	r3, #40	; 0x28
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	6839      	ldr	r1, [r7, #0]
 8011004:	4610      	mov	r0, r2
 8011006:	4798      	blx	r3
}
 8011008:	bf00      	nop
 801100a:	3708      	adds	r7, #8
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}

08011010 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	691b      	ldr	r3, [r3, #16]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d009      	beq.n	8011036 <_ZN19CompositeTestOutput5printEPKc+0x26>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	691a      	ldr	r2, [r3, #16]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	691b      	ldr	r3, [r3, #16]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	332c      	adds	r3, #44	; 0x2c
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	6839      	ldr	r1, [r7, #0]
 8011032:	4610      	mov	r0, r2
 8011034:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	695b      	ldr	r3, [r3, #20]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d009      	beq.n	8011052 <_ZN19CompositeTestOutput5printEPKc+0x42>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	695a      	ldr	r2, [r3, #20]
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	695b      	ldr	r3, [r3, #20]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	332c      	adds	r3, #44	; 0x2c
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	6839      	ldr	r1, [r7, #0]
 801104e:	4610      	mov	r0, r2
 8011050:	4798      	blx	r3
}
 8011052:	bf00      	nop
 8011054:	3708      	adds	r7, #8
 8011056:	46bd      	mov	sp, r7
 8011058:	bd80      	pop	{r7, pc}

0801105a <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 801105a:	b580      	push	{r7, lr}
 801105c:	b082      	sub	sp, #8
 801105e:	af00      	add	r7, sp, #0
 8011060:	6078      	str	r0, [r7, #4]
 8011062:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	691b      	ldr	r3, [r3, #16]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d009      	beq.n	8011080 <_ZN19CompositeTestOutput5printEl+0x26>
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	691a      	ldr	r2, [r3, #16]
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	691b      	ldr	r3, [r3, #16]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	3330      	adds	r3, #48	; 0x30
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	6839      	ldr	r1, [r7, #0]
 801107c:	4610      	mov	r0, r2
 801107e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	695b      	ldr	r3, [r3, #20]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d009      	beq.n	801109c <_ZN19CompositeTestOutput5printEl+0x42>
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	695a      	ldr	r2, [r3, #20]
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	695b      	ldr	r3, [r3, #20]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	3330      	adds	r3, #48	; 0x30
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	6839      	ldr	r1, [r7, #0]
 8011098:	4610      	mov	r0, r2
 801109a:	4798      	blx	r3
}
 801109c:	bf00      	nop
 801109e:	3708      	adds	r7, #8
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}

080110a4 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b082      	sub	sp, #8
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
 80110ac:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	691b      	ldr	r3, [r3, #16]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d009      	beq.n	80110ca <_ZN19CompositeTestOutput5printEj+0x26>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	691a      	ldr	r2, [r3, #16]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	691b      	ldr	r3, [r3, #16]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	3334      	adds	r3, #52	; 0x34
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	6839      	ldr	r1, [r7, #0]
 80110c6:	4610      	mov	r0, r2
 80110c8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	695b      	ldr	r3, [r3, #20]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d009      	beq.n	80110e6 <_ZN19CompositeTestOutput5printEj+0x42>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	695a      	ldr	r2, [r3, #20]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	695b      	ldr	r3, [r3, #20]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	3334      	adds	r3, #52	; 0x34
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	6839      	ldr	r1, [r7, #0]
 80110e2:	4610      	mov	r0, r2
 80110e4:	4798      	blx	r3
}
 80110e6:	bf00      	nop
 80110e8:	3708      	adds	r7, #8
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}

080110ee <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 80110ee:	b580      	push	{r7, lr}
 80110f0:	b084      	sub	sp, #16
 80110f2:	af00      	add	r7, sp, #0
 80110f4:	60f8      	str	r0, [r7, #12]
 80110f6:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	691b      	ldr	r3, [r3, #16]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d00a      	beq.n	8011118 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	691a      	ldr	r2, [r3, #16]
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	691b      	ldr	r3, [r3, #16]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	3338      	adds	r3, #56	; 0x38
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	ed97 0b00 	vldr	d0, [r7]
 8011114:	4610      	mov	r0, r2
 8011116:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	695b      	ldr	r3, [r3, #20]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d00a      	beq.n	8011136 <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	695a      	ldr	r2, [r3, #20]
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	695b      	ldr	r3, [r3, #20]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	3338      	adds	r3, #56	; 0x38
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	ed97 0b00 	vldr	d0, [r7]
 8011132:	4610      	mov	r0, r2
 8011134:	4798      	blx	r3
}
 8011136:	bf00      	nop
 8011138:	3710      	adds	r7, #16
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}

0801113e <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 801113e:	b580      	push	{r7, lr}
 8011140:	b082      	sub	sp, #8
 8011142:	af00      	add	r7, sp, #0
 8011144:	6078      	str	r0, [r7, #4]
 8011146:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	691b      	ldr	r3, [r3, #16]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d009      	beq.n	8011164 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	691a      	ldr	r2, [r3, #16]
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	691b      	ldr	r3, [r3, #16]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	333c      	adds	r3, #60	; 0x3c
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	6839      	ldr	r1, [r7, #0]
 8011160:	4610      	mov	r0, r2
 8011162:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	695b      	ldr	r3, [r3, #20]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d009      	beq.n	8011180 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	695a      	ldr	r2, [r3, #20]
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	695b      	ldr	r3, [r3, #20]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	333c      	adds	r3, #60	; 0x3c
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	6839      	ldr	r1, [r7, #0]
 801117c:	4610      	mov	r0, r2
 801117e:	4798      	blx	r3
}
 8011180:	bf00      	nop
 8011182:	3708      	adds	r7, #8
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}

08011188 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b082      	sub	sp, #8
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	691b      	ldr	r3, [r3, #16]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d009      	beq.n	80111ae <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	691a      	ldr	r2, [r3, #16]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	691b      	ldr	r3, [r3, #16]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	3344      	adds	r3, #68	; 0x44
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	6839      	ldr	r1, [r7, #0]
 80111aa:	4610      	mov	r0, r2
 80111ac:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	695b      	ldr	r3, [r3, #20]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d009      	beq.n	80111ca <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	695a      	ldr	r2, [r3, #20]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	695b      	ldr	r3, [r3, #20]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	3344      	adds	r3, #68	; 0x44
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	6839      	ldr	r1, [r7, #0]
 80111c6:	4610      	mov	r0, r2
 80111c8:	4798      	blx	r3
}
 80111ca:	bf00      	nop
 80111cc:	3708      	adds	r7, #8
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}

080111d2 <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 80111d2:	b580      	push	{r7, lr}
 80111d4:	b082      	sub	sp, #8
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	691b      	ldr	r3, [r3, #16]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d008      	beq.n	80111f4 <_ZN19CompositeTestOutput5flushEv+0x22>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	691a      	ldr	r2, [r3, #16]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	691b      	ldr	r3, [r3, #16]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	334c      	adds	r3, #76	; 0x4c
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	4610      	mov	r0, r2
 80111f2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	695b      	ldr	r3, [r3, #20]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d008      	beq.n	801120e <_ZN19CompositeTestOutput5flushEv+0x3c>
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	695a      	ldr	r2, [r3, #20]
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	695b      	ldr	r3, [r3, #20]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	334c      	adds	r3, #76	; 0x4c
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	4610      	mov	r0, r2
 801120c:	4798      	blx	r3
}
 801120e:	bf00      	nop
 8011210:	3708      	adds	r7, #8
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}

08011216 <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 8011216:	b480      	push	{r7}
 8011218:	b085      	sub	sp, #20
 801121a:	af00      	add	r7, sp, #0
 801121c:	60f8      	str	r0, [r7, #12]
 801121e:	60b9      	str	r1, [r7, #8]
 8011220:	607a      	str	r2, [r7, #4]
    }
 8011222:	bf00      	nop
 8011224:	3714      	adds	r7, #20
 8011226:	46bd      	mov	sp, r7
 8011228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122c:	4770      	bx	lr

0801122e <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 801122e:	b480      	push	{r7}
 8011230:	b085      	sub	sp, #20
 8011232:	af00      	add	r7, sp, #0
 8011234:	60f8      	str	r0, [r7, #12]
 8011236:	60b9      	str	r1, [r7, #8]
 8011238:	607a      	str	r2, [r7, #4]
    }
 801123a:	bf00      	nop
 801123c:	3714      	adds	r7, #20
 801123e:	46bd      	mov	sp, r7
 8011240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011244:	4770      	bx	lr
	...

08011248 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 8011248:	b580      	push	{r7, lr}
 801124a:	b082      	sub	sp, #8
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 8011252:	4a0b      	ldr	r2, [pc, #44]	; (8011280 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	601a      	str	r2, [r3, #0]
 8011258:	f000 f9ce 	bl	80115f8 <_ZN14NullTestPlugin8instanceEv>
 801125c:	4602      	mov	r2, r0
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	605a      	str	r2, [r3, #4]
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	3308      	adds	r3, #8
 8011266:	6839      	ldr	r1, [r7, #0]
 8011268:	4618      	mov	r0, r3
 801126a:	f7fb fb46 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2201      	movs	r2, #1
 8011272:	741a      	strb	r2, [r3, #16]
{
}
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	4618      	mov	r0, r3
 8011278:	3708      	adds	r7, #8
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}
 801127e:	bf00      	nop
 8011280:	08028218 	.word	0x08028218

08011284 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 8011284:	b580      	push	{r7, lr}
 8011286:	b082      	sub	sp, #8
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 801128e:	4a0a      	ldr	r2, [pc, #40]	; (80112b8 <_ZN10TestPluginC1EPS_+0x34>)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	601a      	str	r2, [r3, #0]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	683a      	ldr	r2, [r7, #0]
 8011298:	605a      	str	r2, [r3, #4]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	3308      	adds	r3, #8
 801129e:	4907      	ldr	r1, [pc, #28]	; (80112bc <_ZN10TestPluginC1EPS_+0x38>)
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7fb fad6 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	2201      	movs	r2, #1
 80112aa:	741a      	strb	r2, [r3, #16]
{
}
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	4618      	mov	r0, r3
 80112b0:	3708      	adds	r7, #8
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}
 80112b6:	bf00      	nop
 80112b8:	08028218 	.word	0x08028218
 80112bc:	08024a18 	.word	0x08024a18

080112c0 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b082      	sub	sp, #8
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
 80112c8:	4a06      	ldr	r2, [pc, #24]	; (80112e4 <_ZN10TestPluginD1Ev+0x24>)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	601a      	str	r2, [r3, #0]
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	3308      	adds	r3, #8
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7fb fe75 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
{
}
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	4618      	mov	r0, r3
 80112dc:	3708      	adds	r7, #8
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
 80112e2:	bf00      	nop
 80112e4:	08028218 	.word	0x08028218

080112e8 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
}
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f7ff ffe5 	bl	80112c0 <_ZN10TestPluginD1Ev>
 80112f6:	2114      	movs	r1, #20
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f7f8 fefb 	bl	800a0f4 <_ZdlPvj>
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	4618      	mov	r0, r3
 8011302:	3708      	adds	r7, #8
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 8011308:	b480      	push	{r7}
 801130a:	b083      	sub	sp, #12
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	683a      	ldr	r2, [r7, #0]
 8011316:	605a      	str	r2, [r3, #4]
    return this;
 8011318:	687b      	ldr	r3, [r7, #4]
}
 801131a:	4618      	mov	r0, r3
 801131c:	370c      	adds	r7, #12
 801131e:	46bd      	mov	sp, r7
 8011320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011324:	4770      	bx	lr

08011326 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 8011326:	b580      	push	{r7, lr}
 8011328:	b084      	sub	sp, #16
 801132a:	af00      	add	r7, sp, #0
 801132c:	60f8      	str	r0, [r7, #12]
 801132e:	60b9      	str	r1, [r7, #8]
 8011330:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	7c1b      	ldrb	r3, [r3, #16]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d007      	beq.n	801134a <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	3308      	adds	r3, #8
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	687a      	ldr	r2, [r7, #4]
 8011344:	68b9      	ldr	r1, [r7, #8]
 8011346:	68f8      	ldr	r0, [r7, #12]
 8011348:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	6858      	ldr	r0, [r3, #4]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	3314      	adds	r3, #20
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	687a      	ldr	r2, [r7, #4]
 801135a:	68b9      	ldr	r1, [r7, #8]
 801135c:	4798      	blx	r3
}
 801135e:	bf00      	nop
 8011360:	3710      	adds	r7, #16
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}

08011366 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 8011366:	b580      	push	{r7, lr}
 8011368:	b084      	sub	sp, #16
 801136a:	af00      	add	r7, sp, #0
 801136c:	60f8      	str	r0, [r7, #12]
 801136e:	60b9      	str	r1, [r7, #8]
 8011370:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	6858      	ldr	r0, [r3, #4]
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	3318      	adds	r3, #24
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	68b9      	ldr	r1, [r7, #8]
 8011384:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	7c1b      	ldrb	r3, [r3, #16]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d007      	beq.n	801139e <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	330c      	adds	r3, #12
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	687a      	ldr	r2, [r7, #4]
 8011398:	68b9      	ldr	r1, [r7, #8]
 801139a:	68f8      	ldr	r0, [r7, #12]
 801139c:	4798      	blx	r3
}
 801139e:	bf00      	nop
 80113a0:	3710      	adds	r7, #16
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}

080113a6 <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 80113a6:	b590      	push	{r4, r7, lr}
 80113a8:	b085      	sub	sp, #20
 80113aa:	af00      	add	r7, sp, #0
 80113ac:	60f8      	str	r0, [r7, #12]
 80113ae:	60b9      	str	r1, [r7, #8]
 80113b0:	607a      	str	r2, [r7, #4]
 80113b2:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	331c      	adds	r3, #28
 80113ba:	681c      	ldr	r4, [r3, #0]
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	687a      	ldr	r2, [r7, #4]
 80113c0:	68b9      	ldr	r1, [r7, #8]
 80113c2:	68f8      	ldr	r0, [r7, #12]
 80113c4:	47a0      	blx	r4
 80113c6:	4603      	mov	r3, r0
}
 80113c8:	4618      	mov	r0, r3
 80113ca:	3714      	adds	r7, #20
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd90      	pop	{r4, r7, pc}

080113d0 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 80113d0:	b590      	push	{r4, r7, lr}
 80113d2:	b085      	sub	sp, #20
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	60f8      	str	r0, [r7, #12]
 80113d8:	60b9      	str	r1, [r7, #8]
 80113da:	607a      	str	r2, [r7, #4]
 80113dc:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	3310      	adds	r3, #16
 80113e4:	681c      	ldr	r4, [r3, #0]
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	687a      	ldr	r2, [r7, #4]
 80113ea:	68b9      	ldr	r1, [r7, #8]
 80113ec:	68f8      	ldr	r0, [r7, #12]
 80113ee:	47a0      	blx	r4
 80113f0:	4603      	mov	r3, r0
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d001      	beq.n	80113fa <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 80113f6:	2301      	movs	r3, #1
 80113f8:	e011      	b.n	801141e <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	685b      	ldr	r3, [r3, #4]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d00c      	beq.n	801141c <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	6858      	ldr	r0, [r3, #4]
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	331c      	adds	r3, #28
 801140e:	681c      	ldr	r4, [r3, #0]
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	687a      	ldr	r2, [r7, #4]
 8011414:	68b9      	ldr	r1, [r7, #8]
 8011416:	47a0      	blx	r4
 8011418:	4603      	mov	r3, r0
 801141a:	e000      	b.n	801141e <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 801141c:	2300      	movs	r3, #0
}
 801141e:	4618      	mov	r0, r3
 8011420:	3714      	adds	r7, #20
 8011422:	46bd      	mov	sp, r7
 8011424:	bd90      	pop	{r4, r7, pc}

08011426 <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 8011426:	b480      	push	{r7}
 8011428:	b083      	sub	sp, #12
 801142a:	af00      	add	r7, sp, #0
 801142c:	6078      	str	r0, [r7, #4]
    return name_;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	3308      	adds	r3, #8
}
 8011432:	4618      	mov	r0, r3
 8011434:	370c      	adds	r7, #12
 8011436:	46bd      	mov	sp, r7
 8011438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143c:	4770      	bx	lr

0801143e <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 801143e:	b580      	push	{r7, lr}
 8011440:	b082      	sub	sp, #8
 8011442:	af00      	add	r7, sp, #0
 8011444:	6078      	str	r0, [r7, #4]
 8011446:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	3308      	adds	r3, #8
 801144c:	4619      	mov	r1, r3
 801144e:	6838      	ldr	r0, [r7, #0]
 8011450:	f7fb fdc3 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8011454:	4603      	mov	r3, r0
 8011456:	2b00      	cmp	r3, #0
 8011458:	d001      	beq.n	801145e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	e00d      	b.n	801147a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d007      	beq.n	8011476 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	6839      	ldr	r1, [r7, #0]
 801146c:	4618      	mov	r0, r3
 801146e:	f7ff ffe6 	bl	801143e <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8011472:	4603      	mov	r3, r0
 8011474:	e001      	b.n	801147a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	685b      	ldr	r3, [r3, #4]
}
 801147a:	4618      	mov	r0, r3
 801147c:	3708      	adds	r7, #8
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}

08011482 <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 8011482:	b480      	push	{r7}
 8011484:	b083      	sub	sp, #12
 8011486:	af00      	add	r7, sp, #0
 8011488:	6078      	str	r0, [r7, #4]
    return next_;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	685b      	ldr	r3, [r3, #4]
}
 801148e:	4618      	mov	r0, r3
 8011490:	370c      	adds	r7, #12
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr

0801149a <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 801149a:	b580      	push	{r7, lr}
 801149c:	b084      	sub	sp, #16
 801149e:	af00      	add	r7, sp, #0
 80114a0:	6078      	str	r0, [r7, #4]
 80114a2:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 80114a4:	2300      	movs	r3, #0
 80114a6:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	685b      	ldr	r3, [r3, #4]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d00e      	beq.n	80114ce <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	4618      	mov	r0, r3
 80114b6:	f7ff ffb6 	bl	8011426 <_ZN10TestPlugin7getNameEv>
 80114ba:	4603      	mov	r3, r0
 80114bc:	6839      	ldr	r1, [r7, #0]
 80114be:	4618      	mov	r0, r3
 80114c0:	f7fb fd8b 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d001      	beq.n	80114ce <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 80114ca:	2301      	movs	r3, #1
 80114cc:	e000      	b.n	80114d0 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 80114ce:	2300      	movs	r3, #0
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d007      	beq.n	80114e4 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	685b      	ldr	r3, [r3, #4]
 80114d8:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	685a      	ldr	r2, [r3, #4]
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	605a      	str	r2, [r3, #4]
    }
    return removed;
 80114e4:	68fb      	ldr	r3, [r7, #12]
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	3710      	adds	r7, #16
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}

080114ee <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 80114ee:	b480      	push	{r7}
 80114f0:	b083      	sub	sp, #12
 80114f2:	af00      	add	r7, sp, #0
 80114f4:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	2200      	movs	r2, #0
 80114fa:	741a      	strb	r2, [r3, #16]
}
 80114fc:	bf00      	nop
 80114fe:	370c      	adds	r7, #12
 8011500:	46bd      	mov	sp, r7
 8011502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011506:	4770      	bx	lr

08011508 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 8011508:	b480      	push	{r7}
 801150a:	b083      	sub	sp, #12
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2201      	movs	r2, #1
 8011514:	741a      	strb	r2, [r3, #16]
}
 8011516:	bf00      	nop
 8011518:	370c      	adds	r7, #12
 801151a:	46bd      	mov	sp, r7
 801151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011520:	4770      	bx	lr

08011522 <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 8011522:	b480      	push	{r7}
 8011524:	b083      	sub	sp, #12
 8011526:	af00      	add	r7, sp, #0
 8011528:	6078      	str	r0, [r7, #4]
    return enabled_;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	7c1b      	ldrb	r3, [r3, #16]
}
 801152e:	4618      	mov	r0, r3
 8011530:	370c      	adds	r7, #12
 8011532:	46bd      	mov	sp, r7
 8011534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011538:	4770      	bx	lr
	...

0801153c <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 801153c:	b580      	push	{r7, lr}
 801153e:	b082      	sub	sp, #8
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6839      	ldr	r1, [r7, #0]
 801154a:	4618      	mov	r0, r3
 801154c:	f7ff fe7c 	bl	8011248 <_ZN10TestPluginC1ERK12SimpleString>
 8011550:	4a05      	ldr	r2, [pc, #20]	; (8011568 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 8011556:	4b05      	ldr	r3, [pc, #20]	; (801156c <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 8011558:	2200      	movs	r2, #0
 801155a:	601a      	str	r2, [r3, #0]
}
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	4618      	mov	r0, r3
 8011560:	3708      	adds	r7, #8
 8011562:	46bd      	mov	sp, r7
 8011564:	bd80      	pop	{r7, pc}
 8011566:	bf00      	nop
 8011568:	080281d4 	.word	0x080281d4
 801156c:	200008cc 	.word	0x200008cc

08011570 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 8011570:	b480      	push	{r7}
 8011572:	b087      	sub	sp, #28
 8011574:	af00      	add	r7, sp, #0
 8011576:	60f8      	str	r0, [r7, #12]
 8011578:	60b9      	str	r1, [r7, #8]
 801157a:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 801157c:	4b0e      	ldr	r3, [pc, #56]	; (80115b8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	3b01      	subs	r3, #1
 8011582:	617b      	str	r3, [r7, #20]
 8011584:	697b      	ldr	r3, [r7, #20]
 8011586:	2b00      	cmp	r3, #0
 8011588:	db0d      	blt.n	80115a6 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 801158a:	4a0c      	ldr	r2, [pc, #48]	; (80115bc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011592:	490a      	ldr	r1, [pc, #40]	; (80115bc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	00db      	lsls	r3, r3, #3
 8011598:	440b      	add	r3, r1
 801159a:	685b      	ldr	r3, [r3, #4]
 801159c:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 801159e:	697b      	ldr	r3, [r7, #20]
 80115a0:	3b01      	subs	r3, #1
 80115a2:	617b      	str	r3, [r7, #20]
 80115a4:	e7ee      	b.n	8011584 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 80115a6:	4b04      	ldr	r3, [pc, #16]	; (80115b8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 80115a8:	2200      	movs	r2, #0
 80115aa:	601a      	str	r2, [r3, #0]
}
 80115ac:	bf00      	nop
 80115ae:	371c      	adds	r7, #28
 80115b0:	46bd      	mov	sp, r7
 80115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b6:	4770      	bx	lr
 80115b8:	200008cc 	.word	0x200008cc
 80115bc:	200008d0 	.word	0x200008d0

080115c0 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b082      	sub	sp, #8
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2100      	movs	r1, #0
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7ff fe59 	bl	8011284 <_ZN10TestPluginC1EPS_>
 80115d2:	4a04      	ldr	r2, [pc, #16]	; (80115e4 <_ZN14NullTestPluginC1Ev+0x24>)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	601a      	str	r2, [r3, #0]
{
}
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	4618      	mov	r0, r3
 80115dc:	3708      	adds	r7, #8
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}
 80115e2:	bf00      	nop
 80115e4:	08028190 	.word	0x08028190

080115e8 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 80115e8:	b580      	push	{r7, lr}
 80115ea:	af00      	add	r7, sp, #0
 80115ec:	4801      	ldr	r0, [pc, #4]	; (80115f4 <__tcf_0+0xc>)
 80115ee:	f000 f849 	bl	8011684 <_ZN14NullTestPluginD1Ev>
 80115f2:	bd80      	pop	{r7, pc}
 80115f4:	200009d0 	.word	0x200009d0

080115f8 <_ZN14NullTestPlugin8instanceEv>:
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 80115fc:	4b12      	ldr	r3, [pc, #72]	; (8011648 <_ZN14NullTestPlugin8instanceEv+0x50>)
 80115fe:	781b      	ldrb	r3, [r3, #0]
 8011600:	f3bf 8f5b 	dmb	ish
 8011604:	b2db      	uxtb	r3, r3
 8011606:	f003 0301 	and.w	r3, r3, #1
 801160a:	2b00      	cmp	r3, #0
 801160c:	bf0c      	ite	eq
 801160e:	2301      	moveq	r3, #1
 8011610:	2300      	movne	r3, #0
 8011612:	b2db      	uxtb	r3, r3
 8011614:	2b00      	cmp	r3, #0
 8011616:	d013      	beq.n	8011640 <_ZN14NullTestPlugin8instanceEv+0x48>
 8011618:	480b      	ldr	r0, [pc, #44]	; (8011648 <_ZN14NullTestPlugin8instanceEv+0x50>)
 801161a:	f00d ffd9 	bl	801f5d0 <__cxa_guard_acquire>
 801161e:	4603      	mov	r3, r0
 8011620:	2b00      	cmp	r3, #0
 8011622:	bf14      	ite	ne
 8011624:	2301      	movne	r3, #1
 8011626:	2300      	moveq	r3, #0
 8011628:	b2db      	uxtb	r3, r3
 801162a:	2b00      	cmp	r3, #0
 801162c:	d008      	beq.n	8011640 <_ZN14NullTestPlugin8instanceEv+0x48>
 801162e:	4807      	ldr	r0, [pc, #28]	; (801164c <_ZN14NullTestPlugin8instanceEv+0x54>)
 8011630:	f7ff ffc6 	bl	80115c0 <_ZN14NullTestPluginC1Ev>
 8011634:	4804      	ldr	r0, [pc, #16]	; (8011648 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8011636:	f00d ffd7 	bl	801f5e8 <__cxa_guard_release>
 801163a:	4805      	ldr	r0, [pc, #20]	; (8011650 <_ZN14NullTestPlugin8instanceEv+0x58>)
 801163c:	f00d fffb 	bl	801f636 <atexit>
    return &_instance;
 8011640:	4b02      	ldr	r3, [pc, #8]	; (801164c <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 8011642:	4618      	mov	r0, r3
 8011644:	bd80      	pop	{r7, pc}
 8011646:	bf00      	nop
 8011648:	200009e4 	.word	0x200009e4
 801164c:	200009d0 	.word	0x200009d0
 8011650:	080115e9 	.word	0x080115e9

08011654 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 8011654:	b480      	push	{r7}
 8011656:	b085      	sub	sp, #20
 8011658:	af00      	add	r7, sp, #0
 801165a:	60f8      	str	r0, [r7, #12]
 801165c:	60b9      	str	r1, [r7, #8]
 801165e:	607a      	str	r2, [r7, #4]
}
 8011660:	bf00      	nop
 8011662:	3714      	adds	r7, #20
 8011664:	46bd      	mov	sp, r7
 8011666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166a:	4770      	bx	lr

0801166c <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 801166c:	b480      	push	{r7}
 801166e:	b085      	sub	sp, #20
 8011670:	af00      	add	r7, sp, #0
 8011672:	60f8      	str	r0, [r7, #12]
 8011674:	60b9      	str	r1, [r7, #8]
 8011676:	607a      	str	r2, [r7, #4]
}
 8011678:	bf00      	nop
 801167a:	3714      	adds	r7, #20
 801167c:	46bd      	mov	sp, r7
 801167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011682:	4770      	bx	lr

08011684 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
 801168c:	4a05      	ldr	r2, [pc, #20]	; (80116a4 <_ZN14NullTestPluginD1Ev+0x20>)
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	601a      	str	r2, [r3, #0]
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	4618      	mov	r0, r3
 8011696:	f7ff fe13 	bl	80112c0 <_ZN10TestPluginD1Ev>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	4618      	mov	r0, r3
 801169e:	3708      	adds	r7, #8
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}
 80116a4:	08028190 	.word	0x08028190

080116a8 <_ZN14NullTestPluginD0Ev>:
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f7ff ffe7 	bl	8011684 <_ZN14NullTestPluginD1Ev>
 80116b6:	2114      	movs	r1, #20
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f7f8 fd1b 	bl	800a0f4 <_ZdlPvj>
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	4618      	mov	r0, r3
 80116c2:	3708      	adds	r7, #8
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 80116d0:	4a0f      	ldr	r2, [pc, #60]	; (8011710 <_ZN12TestRegistryC1Ev+0x48>)
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	601a      	str	r2, [r3, #0]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	2200      	movs	r2, #0
 80116da:	605a      	str	r2, [r3, #4]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2200      	movs	r2, #0
 80116e0:	609a      	str	r2, [r3, #8]
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2200      	movs	r2, #0
 80116e6:	60da      	str	r2, [r3, #12]
 80116e8:	f7ff ff86 	bl	80115f8 <_ZN14NullTestPlugin8instanceEv>
 80116ec:	4602      	mov	r2, r0
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	611a      	str	r2, [r3, #16]
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2200      	movs	r2, #0
 80116f6:	751a      	strb	r2, [r3, #20]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2200      	movs	r2, #0
 80116fc:	619a      	str	r2, [r3, #24]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2200      	movs	r2, #0
 8011702:	771a      	strb	r2, [r3, #28]
{
}
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	4618      	mov	r0, r3
 8011708:	3708      	adds	r7, #8
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	0802825c 	.word	0x0802825c

08011714 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 8011714:	b480      	push	{r7}
 8011716:	b083      	sub	sp, #12
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	4a04      	ldr	r2, [pc, #16]	; (8011730 <_ZN12TestRegistryD1Ev+0x1c>)
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	601a      	str	r2, [r3, #0]
{
}
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	4618      	mov	r0, r3
 8011726:	370c      	adds	r7, #12
 8011728:	46bd      	mov	sp, r7
 801172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172e:	4770      	bx	lr
 8011730:	0802825c 	.word	0x0802825c

08011734 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
}
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f7ff ffe9 	bl	8011714 <_ZN12TestRegistryD1Ev>
 8011742:	2120      	movs	r1, #32
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f7f8 fcd5 	bl	800a0f4 <_ZdlPvj>
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	4618      	mov	r0, r3
 801174e:	3708      	adds	r7, #8
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}

08011754 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b082      	sub	sp, #8
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 801175e:	683b      	ldr	r3, [r7, #0]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	3308      	adds	r3, #8
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	6852      	ldr	r2, [r2, #4]
 801176a:	4611      	mov	r1, r2
 801176c:	6838      	ldr	r0, [r7, #0]
 801176e:	4798      	blx	r3
 8011770:	4602      	mov	r2, r0
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	605a      	str	r2, [r3, #4]
}
 8011776:	bf00      	nop
 8011778:	3708      	adds	r7, #8
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}

0801177e <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 801177e:	b580      	push	{r7, lr}
 8011780:	b084      	sub	sp, #16
 8011782:	af00      	add	r7, sp, #0
 8011784:	6078      	str	r0, [r7, #4]
 8011786:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 8011788:	2301      	movs	r3, #1
 801178a:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	3308      	adds	r3, #8
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	6838      	ldr	r0, [r7, #0]
 8011796:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	60bb      	str	r3, [r7, #8]
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d05c      	beq.n	801185e <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	7d1b      	ldrb	r3, [r3, #20]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d005      	beq.n	80117b8 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	3380      	adds	r3, #128	; 0x80
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	68b8      	ldr	r0, [r7, #8]
 80117b6:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	7f1b      	ldrb	r3, [r3, #28]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d005      	beq.n	80117cc <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	3384      	adds	r3, #132	; 0x84
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	68b8      	ldr	r0, [r7, #8]
 80117ca:	4798      	blx	r3

        if (groupStart) {
 80117cc:	7bfb      	ldrb	r3, [r7, #15]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d008      	beq.n	80117e4 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	3310      	adds	r3, #16
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	68b9      	ldr	r1, [r7, #8]
 80117dc:	6838      	ldr	r0, [r7, #0]
 80117de:	4798      	blx	r3
            groupStart = false;
 80117e0:	2300      	movs	r3, #0
 80117e2:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	3320      	adds	r3, #32
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	6838      	ldr	r0, [r7, #0]
 80117ee:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 80117f0:	683a      	ldr	r2, [r7, #0]
 80117f2:	68b9      	ldr	r1, [r7, #8]
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f000 fb79 	bl	8011eec <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 80117fa:	4603      	mov	r3, r0
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d016      	beq.n	801182e <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	3318      	adds	r3, #24
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	68b9      	ldr	r1, [r7, #8]
 801180a:	6838      	ldr	r0, [r7, #0]
 801180c:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	3390      	adds	r3, #144	; 0x90
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	687a      	ldr	r2, [r7, #4]
 8011818:	6911      	ldr	r1, [r2, #16]
 801181a:	683a      	ldr	r2, [r7, #0]
 801181c:	68b8      	ldr	r0, [r7, #8]
 801181e:	4798      	blx	r3
            result.currentTestEnded(test);
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	331c      	adds	r3, #28
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	68b9      	ldr	r1, [r7, #8]
 801182a:	6838      	ldr	r0, [r7, #0]
 801182c:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 801182e:	68b9      	ldr	r1, [r7, #8]
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	f000 fa5b 	bl	8011cec <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 8011836:	4603      	mov	r3, r0
 8011838:	2b00      	cmp	r3, #0
 801183a:	d008      	beq.n	801184e <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 801183c:	2301      	movs	r3, #1
 801183e:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	3314      	adds	r3, #20
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	68b9      	ldr	r1, [r7, #8]
 801184a:	6838      	ldr	r0, [r7, #0]
 801184c:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	330c      	adds	r3, #12
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	68b8      	ldr	r0, [r7, #8]
 8011858:	4798      	blx	r3
 801185a:	60b8      	str	r0, [r7, #8]
 801185c:	e79f      	b.n	801179e <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	330c      	adds	r3, #12
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	6838      	ldr	r0, [r7, #0]
 8011868:	4798      	blx	r3
    currentRepetition_++;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	699b      	ldr	r3, [r3, #24]
 801186e:	1c5a      	adds	r2, r3, #1
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	619a      	str	r2, [r3, #24]
}
 8011874:	bf00      	nop
 8011876:	3710      	adds	r7, #16
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 801187c:	b590      	push	{r4, r7, lr}
 801187e:	b08f      	sub	sp, #60	; 0x3c
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 8011886:	f107 0314 	add.w	r3, r7, #20
 801188a:	4953      	ldr	r1, [pc, #332]	; (80119d8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 801188c:	4618      	mov	r0, r3
 801188e:	f7fa ffe0 	bl	800c852 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	637b      	str	r3, [r7, #52]	; 0x34
 8011898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801189a:	2b00      	cmp	r3, #0
 801189c:	d04d      	beq.n	801193a <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 801189e:	f107 030c 	add.w	r3, r7, #12
 80118a2:	494d      	ldr	r1, [pc, #308]	; (80119d8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 80118a4:	4618      	mov	r0, r3
 80118a6:	f7fa ffd4 	bl	800c852 <_ZN12SimpleStringC1EPKc>
        gname += "#";
 80118aa:	f107 030c 	add.w	r3, r7, #12
 80118ae:	494b      	ldr	r1, [pc, #300]	; (80119dc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7fb fc15 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 80118b6:	f107 031c 	add.w	r3, r7, #28
 80118ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80118bc:	4618      	mov	r0, r3
 80118be:	f001 f9d2 	bl	8012c66 <_ZNK10UtestShell8getGroupEv>
 80118c2:	f107 021c 	add.w	r2, r7, #28
 80118c6:	f107 030c 	add.w	r3, r7, #12
 80118ca:	4611      	mov	r1, r2
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7fb fbf5 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 80118d2:	f107 031c 	add.w	r3, r7, #28
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7fb fb73 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        gname += "#";
 80118dc:	f107 030c 	add.w	r3, r7, #12
 80118e0:	493e      	ldr	r1, [pc, #248]	; (80119dc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 80118e2:	4618      	mov	r0, r3
 80118e4:	f7fb fbfc 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 80118e8:	f107 020c 	add.w	r2, r7, #12
 80118ec:	f107 0314 	add.w	r3, r7, #20
 80118f0:	4611      	mov	r1, r2
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7fb f82b 	bl	800c94e <_ZNK12SimpleString8containsERKS_>
 80118f8:	4603      	mov	r3, r0
 80118fa:	f083 0301 	eor.w	r3, r3, #1
 80118fe:	b2db      	uxtb	r3, r3
 8011900:	2b00      	cmp	r3, #0
 8011902:	d00d      	beq.n	8011920 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 8011904:	f107 020c 	add.w	r2, r7, #12
 8011908:	f107 0314 	add.w	r3, r7, #20
 801190c:	4611      	mov	r1, r2
 801190e:	4618      	mov	r0, r3
 8011910:	f7fb fbd4 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 8011914:	f107 0314 	add.w	r3, r7, #20
 8011918:	4931      	ldr	r1, [pc, #196]	; (80119e0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 801191a:	4618      	mov	r0, r3
 801191c:	f7fb fbe0 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 8011920:	f107 030c 	add.w	r3, r7, #12
 8011924:	4618      	mov	r0, r3
 8011926:	f7fb fb4c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801192a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	330c      	adds	r3, #12
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011934:	4798      	blx	r3
 8011936:	6378      	str	r0, [r7, #52]	; 0x34
 8011938:	e7ae      	b.n	8011898 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 801193a:	f107 0314 	add.w	r3, r7, #20
 801193e:	4a26      	ldr	r2, [pc, #152]	; (80119d8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011940:	4926      	ldr	r1, [pc, #152]	; (80119dc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011942:	4618      	mov	r0, r3
 8011944:	f7fb f99a 	bl	800cc7c <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 8011948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801194c:	4924      	ldr	r1, [pc, #144]	; (80119e0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 801194e:	4618      	mov	r0, r3
 8011950:	f7fa ff7f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8011954:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011958:	f107 0314 	add.w	r3, r7, #20
 801195c:	4611      	mov	r1, r2
 801195e:	4618      	mov	r0, r3
 8011960:	f7fb f874 	bl	800ca4c <_ZNK12SimpleString8endsWithERKS_>
 8011964:	4603      	mov	r3, r0
 8011966:	461c      	mov	r4, r3
 8011968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801196c:	4618      	mov	r0, r3
 801196e:	f7fb fb28 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8011972:	2c00      	cmp	r4, #0
 8011974:	d01a      	beq.n	80119ac <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 8011976:	f107 0314 	add.w	r3, r7, #20
 801197a:	4618      	mov	r0, r3
 801197c:	f7fb fb00 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 8011980:	4603      	mov	r3, r0
 8011982:	3b01      	subs	r3, #1
 8011984:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8011988:	f107 0114 	add.w	r1, r7, #20
 801198c:	2200      	movs	r2, #0
 801198e:	f7fb fc21 	bl	800d1d4 <_ZNK12SimpleString9subStringEjj>
 8011992:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011996:	f107 0314 	add.w	r3, r7, #20
 801199a:	4611      	mov	r1, r2
 801199c:	4618      	mov	r0, r3
 801199e:	f7fa ffc4 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 80119a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fb fb0b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	3338      	adds	r3, #56	; 0x38
 80119b2:	681c      	ldr	r4, [r3, #0]
 80119b4:	f107 0314 	add.w	r3, r7, #20
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7fb fad5 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 80119be:	4603      	mov	r3, r0
 80119c0:	4619      	mov	r1, r3
 80119c2:	6838      	ldr	r0, [r7, #0]
 80119c4:	47a0      	blx	r4
    SimpleString groupList;
 80119c6:	f107 0314 	add.w	r3, r7, #20
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7fb faf9 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 80119d0:	bf00      	nop
 80119d2:	373c      	adds	r7, #60	; 0x3c
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd90      	pop	{r4, r7, pc}
 80119d8:	08024a68 	.word	0x08024a68
 80119dc:	08024a6c 	.word	0x08024a6c
 80119e0:	08024a70 	.word	0x08024a70

080119e4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 80119e4:	b590      	push	{r4, r7, lr}
 80119e6:	b091      	sub	sp, #68	; 0x44
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 80119ee:	f107 0314 	add.w	r3, r7, #20
 80119f2:	4964      	ldr	r1, [pc, #400]	; (8011b84 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7fa ff2c 	bl	800c852 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d06e      	beq.n	8011ae4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 8011a06:	683a      	ldr	r2, [r7, #0]
 8011a08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f000 fa6e 	bl	8011eec <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8011a10:	4603      	mov	r3, r0
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d05e      	beq.n	8011ad4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 8011a16:	f107 030c 	add.w	r3, r7, #12
 8011a1a:	495a      	ldr	r1, [pc, #360]	; (8011b84 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7fa ff18 	bl	800c852 <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 8011a22:	f107 030c 	add.w	r3, r7, #12
 8011a26:	4958      	ldr	r1, [pc, #352]	; (8011b88 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7fb fb59 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 8011a2e:	f107 031c 	add.w	r3, r7, #28
 8011a32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011a34:	4618      	mov	r0, r3
 8011a36:	f001 f916 	bl	8012c66 <_ZNK10UtestShell8getGroupEv>
 8011a3a:	f107 021c 	add.w	r2, r7, #28
 8011a3e:	f107 030c 	add.w	r3, r7, #12
 8011a42:	4611      	mov	r1, r2
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7fb fb39 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 8011a4a:	f107 031c 	add.w	r3, r7, #28
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7fb fab7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 8011a54:	f107 030c 	add.w	r3, r7, #12
 8011a58:	494c      	ldr	r1, [pc, #304]	; (8011b8c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f7fb fb40 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 8011a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011a64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011a66:	4618      	mov	r0, r3
 8011a68:	f001 f8ee 	bl	8012c48 <_ZNK10UtestShell7getNameEv>
 8011a6c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011a70:	f107 030c 	add.w	r3, r7, #12
 8011a74:	4611      	mov	r1, r2
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7fb fb20 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 8011a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7fb fa9e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 8011a86:	f107 030c 	add.w	r3, r7, #12
 8011a8a:	493f      	ldr	r1, [pc, #252]	; (8011b88 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7fb fb27 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 8011a92:	f107 020c 	add.w	r2, r7, #12
 8011a96:	f107 0314 	add.w	r3, r7, #20
 8011a9a:	4611      	mov	r1, r2
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7fa ff56 	bl	800c94e <_ZNK12SimpleString8containsERKS_>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	f083 0301 	eor.w	r3, r3, #1
 8011aa8:	b2db      	uxtb	r3, r3
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d00d      	beq.n	8011aca <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 8011aae:	f107 020c 	add.w	r2, r7, #12
 8011ab2:	f107 0314 	add.w	r3, r7, #20
 8011ab6:	4611      	mov	r1, r2
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7fb faff 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 8011abe:	f107 0314 	add.w	r3, r7, #20
 8011ac2:	4933      	ldr	r1, [pc, #204]	; (8011b90 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7fb fb0b 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 8011aca:	f107 030c 	add.w	r3, r7, #12
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7fb fa77 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	330c      	adds	r3, #12
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011ade:	4798      	blx	r3
 8011ae0:	63f8      	str	r0, [r7, #60]	; 0x3c
 8011ae2:	e78d      	b.n	8011a00 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 8011ae4:	f107 0314 	add.w	r3, r7, #20
 8011ae8:	4a26      	ldr	r2, [pc, #152]	; (8011b84 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8011aea:	4927      	ldr	r1, [pc, #156]	; (8011b88 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8011aec:	4618      	mov	r0, r3
 8011aee:	f7fb f8c5 	bl	800cc7c <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 8011af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011af6:	4926      	ldr	r1, [pc, #152]	; (8011b90 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8011af8:	4618      	mov	r0, r3
 8011afa:	f7fa feaa 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8011afe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011b02:	f107 0314 	add.w	r3, r7, #20
 8011b06:	4611      	mov	r1, r2
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7fa ff9f 	bl	800ca4c <_ZNK12SimpleString8endsWithERKS_>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	461c      	mov	r4, r3
 8011b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7fb fa53 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8011b1c:	2c00      	cmp	r4, #0
 8011b1e:	d01a      	beq.n	8011b56 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 8011b20:	f107 0314 	add.w	r3, r7, #20
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7fb fa2b 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	3b01      	subs	r3, #1
 8011b2e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8011b32:	f107 0114 	add.w	r1, r7, #20
 8011b36:	2200      	movs	r2, #0
 8011b38:	f7fb fb4c 	bl	800d1d4 <_ZNK12SimpleString9subStringEjj>
 8011b3c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011b40:	f107 0314 	add.w	r3, r7, #20
 8011b44:	4611      	mov	r1, r2
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7fa feef 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 8011b4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011b50:	4618      	mov	r0, r3
 8011b52:	f7fb fa36 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	3338      	adds	r3, #56	; 0x38
 8011b5c:	681c      	ldr	r4, [r3, #0]
 8011b5e:	f107 0314 	add.w	r3, r7, #20
 8011b62:	4618      	mov	r0, r3
 8011b64:	f7fb fa00 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	4619      	mov	r1, r3
 8011b6c:	6838      	ldr	r0, [r7, #0]
 8011b6e:	47a0      	blx	r4
    SimpleString groupAndNameList;
 8011b70:	f107 0314 	add.w	r3, r7, #20
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7fb fa24 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8011b7a:	bf00      	nop
 8011b7c:	3744      	adds	r7, #68	; 0x44
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd90      	pop	{r4, r7, pc}
 8011b82:	bf00      	nop
 8011b84:	08024a68 	.word	0x08024a68
 8011b88:	08024a6c 	.word	0x08024a6c
 8011b8c:	08024a74 	.word	0x08024a74
 8011b90:	08024a70 	.word	0x08024a70

08011b94 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 8011b94:	b590      	push	{r4, r7, lr}
 8011b96:	b091      	sub	sp, #68	; 0x44
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
 8011b9c:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 8011b9e:	f107 0314 	add.w	r3, r7, #20
 8011ba2:	494f      	ldr	r1, [pc, #316]	; (8011ce0 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f7fa fe54 	bl	800c852 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	685b      	ldr	r3, [r3, #4]
 8011bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d07d      	beq.n	8011cb2 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 8011bb6:	f107 030c 	add.w	r3, r7, #12
 8011bba:	4949      	ldr	r1, [pc, #292]	; (8011ce0 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7fa fe48 	bl	800c852 <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 8011bc2:	f107 031c 	add.w	r3, r7, #28
 8011bc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f001 f84c 	bl	8012c66 <_ZNK10UtestShell8getGroupEv>
 8011bce:	f107 021c 	add.w	r2, r7, #28
 8011bd2:	f107 030c 	add.w	r3, r7, #12
 8011bd6:	4611      	mov	r1, r2
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f7fb fa6f 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 8011bde:	f107 031c 	add.w	r3, r7, #28
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7fb f9ed 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8011be8:	f107 030c 	add.w	r3, r7, #12
 8011bec:	493d      	ldr	r1, [pc, #244]	; (8011ce4 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7fb fa76 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 8011bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011bf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f001 f824 	bl	8012c48 <_ZNK10UtestShell7getNameEv>
 8011c00:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011c04:	f107 030c 	add.w	r3, r7, #12
 8011c08:	4611      	mov	r1, r2
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7fb fa56 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 8011c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7fb f9d4 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8011c1a:	f107 030c 	add.w	r3, r7, #12
 8011c1e:	4931      	ldr	r1, [pc, #196]	; (8011ce4 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8011c20:	4618      	mov	r0, r3
 8011c22:	f7fb fa5d 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 8011c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f001 f8dc 	bl	8012dea <_ZNK10UtestShell7getFileEv>
 8011c32:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011c36:	f107 030c 	add.w	r3, r7, #12
 8011c3a:	4611      	mov	r1, r2
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7fb fa3d 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 8011c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7fb f9bb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8011c4c:	f107 030c 	add.w	r3, r7, #12
 8011c50:	4924      	ldr	r1, [pc, #144]	; (8011ce4 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7fb fa44 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 8011c58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011c5a:	f001 f8d5 	bl	8012e08 <_ZNK10UtestShell13getLineNumberEv>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	461a      	mov	r2, r3
 8011c62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011c66:	4920      	ldr	r1, [pc, #128]	; (8011ce8 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7fb feb1 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 8011c6e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011c72:	f107 030c 	add.w	r3, r7, #12
 8011c76:	4611      	mov	r1, r2
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7fb fa1f 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 8011c7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011c82:	4618      	mov	r0, r3
 8011c84:	f7fb f99d 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 8011c88:	f107 020c 	add.w	r2, r7, #12
 8011c8c:	f107 0314 	add.w	r3, r7, #20
 8011c90:	4611      	mov	r1, r2
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7fb fa12 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 8011c98:	f107 030c 	add.w	r3, r7, #12
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f7fb f990 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	330c      	adds	r3, #12
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011cac:	4798      	blx	r3
 8011cae:	63f8      	str	r0, [r7, #60]	; 0x3c
 8011cb0:	e77e      	b.n	8011bb0 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	3338      	adds	r3, #56	; 0x38
 8011cb8:	681c      	ldr	r4, [r3, #0]
 8011cba:	f107 0314 	add.w	r3, r7, #20
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7fb f952 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	4619      	mov	r1, r3
 8011cc8:	6838      	ldr	r0, [r7, #0]
 8011cca:	47a0      	blx	r4
    SimpleString testLocations;
 8011ccc:	f107 0314 	add.w	r3, r7, #20
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f7fb f976 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8011cd6:	bf00      	nop
 8011cd8:	3744      	adds	r7, #68	; 0x44
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd90      	pop	{r4, r7, pc}
 8011cde:	bf00      	nop
 8011ce0:	08024a68 	.word	0x08024a68
 8011ce4:	08024a74 	.word	0x08024a74
 8011ce8:	08024a78 	.word	0x08024a78

08011cec <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 8011cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cee:	b087      	sub	sp, #28
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 8011cf6:	2400      	movs	r4, #0
 8011cf8:	2500      	movs	r5, #0
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d028      	beq.n	8011d52 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	330c      	adds	r3, #12
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	6838      	ldr	r0, [r7, #0]
 8011d0a:	4798      	blx	r3
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d01f      	beq.n	8011d52 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8011d12:	f107 0308 	add.w	r3, r7, #8
 8011d16:	6839      	ldr	r1, [r7, #0]
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f000 ffa4 	bl	8012c66 <_ZNK10UtestShell8getGroupEv>
 8011d1e:	2401      	movs	r4, #1
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	330c      	adds	r3, #12
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	6838      	ldr	r0, [r7, #0]
 8011d2a:	4798      	blx	r3
 8011d2c:	4602      	mov	r2, r0
 8011d2e:	f107 0310 	add.w	r3, r7, #16
 8011d32:	4611      	mov	r1, r2
 8011d34:	4618      	mov	r0, r3
 8011d36:	f000 ff96 	bl	8012c66 <_ZNK10UtestShell8getGroupEv>
 8011d3a:	2501      	movs	r5, #1
 8011d3c:	f107 0210 	add.w	r2, r7, #16
 8011d40:	f107 0308 	add.w	r3, r7, #8
 8011d44:	4611      	mov	r1, r2
 8011d46:	4618      	mov	r0, r3
 8011d48:	f7fb f98c 	bl	800d064 <_ZneRK12SimpleStringS1_>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d001      	beq.n	8011d56 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 8011d52:	2601      	movs	r6, #1
 8011d54:	e000      	b.n	8011d58 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 8011d56:	2600      	movs	r6, #0
 8011d58:	2d00      	cmp	r5, #0
 8011d5a:	d004      	beq.n	8011d66 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 8011d5c:	f107 0310 	add.w	r3, r7, #16
 8011d60:	4618      	mov	r0, r3
 8011d62:	f7fb f92e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8011d66:	2c00      	cmp	r4, #0
 8011d68:	d004      	beq.n	8011d74 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 8011d6a:	f107 0308 	add.w	r3, r7, #8
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7fb f927 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8011d74:	4633      	mov	r3, r6
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	371c      	adds	r7, #28
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011d7e <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 8011d7e:	b580      	push	{r7, lr}
 8011d80:	b082      	sub	sp, #8
 8011d82:	af00      	add	r7, sp, #0
 8011d84:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	685b      	ldr	r3, [r3, #4]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d00a      	beq.n	8011da4 <_ZN12TestRegistry10countTestsEv+0x26>
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	685a      	ldr	r2, [r3, #4]
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	3310      	adds	r3, #16
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	4610      	mov	r0, r2
 8011d9e:	4798      	blx	r3
 8011da0:	4603      	mov	r3, r0
 8011da2:	e000      	b.n	8011da6 <_ZN12TestRegistry10countTestsEv+0x28>
 8011da4:	2300      	movs	r3, #0
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3708      	adds	r7, #8
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}
	...

08011db0 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 8011db0:	b580      	push	{r7, lr}
 8011db2:	af00      	add	r7, sp, #0
 8011db4:	4801      	ldr	r0, [pc, #4]	; (8011dbc <__tcf_0+0xc>)
 8011db6:	f7ff fcad 	bl	8011714 <_ZN12TestRegistryD1Ev>
 8011dba:	bd80      	pop	{r7, pc}
 8011dbc:	200009ec 	.word	0x200009ec

08011dc0 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 8011dc4:	4b15      	ldr	r3, [pc, #84]	; (8011e1c <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	f3bf 8f5b 	dmb	ish
 8011dcc:	b2db      	uxtb	r3, r3
 8011dce:	f003 0301 	and.w	r3, r3, #1
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	bf0c      	ite	eq
 8011dd6:	2301      	moveq	r3, #1
 8011dd8:	2300      	movne	r3, #0
 8011dda:	b2db      	uxtb	r3, r3
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d013      	beq.n	8011e08 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8011de0:	480e      	ldr	r0, [pc, #56]	; (8011e1c <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8011de2:	f00d fbf5 	bl	801f5d0 <__cxa_guard_acquire>
 8011de6:	4603      	mov	r3, r0
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	bf14      	ite	ne
 8011dec:	2301      	movne	r3, #1
 8011dee:	2300      	moveq	r3, #0
 8011df0:	b2db      	uxtb	r3, r3
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d008      	beq.n	8011e08 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8011df6:	480a      	ldr	r0, [pc, #40]	; (8011e20 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 8011df8:	f7ff fc66 	bl	80116c8 <_ZN12TestRegistryC1Ev>
 8011dfc:	4807      	ldr	r0, [pc, #28]	; (8011e1c <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8011dfe:	f00d fbf3 	bl	801f5e8 <__cxa_guard_release>
 8011e02:	4808      	ldr	r0, [pc, #32]	; (8011e24 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 8011e04:	f00d fc17 	bl	801f636 <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 8011e08:	4b07      	ldr	r3, [pc, #28]	; (8011e28 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d002      	beq.n	8011e16 <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 8011e10:	4b05      	ldr	r3, [pc, #20]	; (8011e28 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	e000      	b.n	8011e18 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 8011e16:	4b02      	ldr	r3, [pc, #8]	; (8011e20 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	bd80      	pop	{r7, pc}
 8011e1c:	20000a0c 	.word	0x20000a0c
 8011e20:	200009ec 	.word	0x200009ec
 8011e24:	08011db1 	.word	0x08011db1
 8011e28:	200009e8 	.word	0x200009e8

08011e2c <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 8011e2c:	b480      	push	{r7}
 8011e2e:	b083      	sub	sp, #12
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 8011e36:	4a04      	ldr	r2, [pc, #16]	; (8011e48 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	6013      	str	r3, [r2, #0]
}
 8011e3c:	bf00      	nop
 8011e3e:	370c      	adds	r7, #12
 8011e40:	46bd      	mov	sp, r7
 8011e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e46:	4770      	bx	lr
 8011e48:	200009e8 	.word	0x200009e8

08011e4c <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b082      	sub	sp, #8
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	685b      	ldr	r3, [r3, #4]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d00a      	beq.n	8011e72 <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	685a      	ldr	r2, [r3, #4]
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	685b      	ldr	r3, [r3, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	330c      	adds	r3, #12
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	4610      	mov	r0, r2
 8011e6c:	4798      	blx	r3
 8011e6e:	4603      	mov	r3, r0
 8011e70:	e000      	b.n	8011e74 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 8011e72:	2300      	movs	r3, #0
 8011e74:	687a      	ldr	r2, [r7, #4]
 8011e76:	6053      	str	r3, [r2, #4]

}
 8011e78:	bf00      	nop
 8011e7a:	3708      	adds	r7, #8
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}

08011e80 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 8011e80:	b480      	push	{r7}
 8011e82:	b083      	sub	sp, #12
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
 8011e88:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	683a      	ldr	r2, [r7, #0]
 8011e8e:	609a      	str	r2, [r3, #8]
}
 8011e90:	bf00      	nop
 8011e92:	370c      	adds	r7, #12
 8011e94:	46bd      	mov	sp, r7
 8011e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9a:	4770      	bx	lr

08011e9c <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	b083      	sub	sp, #12
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	683a      	ldr	r2, [r7, #0]
 8011eaa:	60da      	str	r2, [r3, #12]
}
 8011eac:	bf00      	nop
 8011eae:	370c      	adds	r7, #12
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb6:	4770      	bx	lr

08011eb8 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 8011eb8:	b480      	push	{r7}
 8011eba:	b083      	sub	sp, #12
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2201      	movs	r2, #1
 8011ec4:	771a      	strb	r2, [r3, #28]
}
 8011ec6:	bf00      	nop
 8011ec8:	370c      	adds	r7, #12
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed0:	4770      	bx	lr

08011ed2 <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 8011ed2:	b480      	push	{r7}
 8011ed4:	b083      	sub	sp, #12
 8011ed6:	af00      	add	r7, sp, #0
 8011ed8:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2201      	movs	r2, #1
 8011ede:	751a      	strb	r2, [r3, #20]
}
 8011ee0:	bf00      	nop
 8011ee2:	370c      	adds	r7, #12
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eea:	4770      	bx	lr

08011eec <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b084      	sub	sp, #16
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	60f8      	str	r0, [r7, #12]
 8011ef4:	60b9      	str	r1, [r7, #8]
 8011ef6:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	68d9      	ldr	r1, [r3, #12]
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	689b      	ldr	r3, [r3, #8]
 8011f00:	461a      	mov	r2, r3
 8011f02:	68b8      	ldr	r0, [r7, #8]
 8011f04:	f000 ffbb 	bl	8012e7e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d001      	beq.n	8011f12 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 8011f0e:	2301      	movs	r3, #1
 8011f10:	e006      	b.n	8011f20 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	332c      	adds	r3, #44	; 0x2c
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	4798      	blx	r3
        return false;
 8011f1e:	2300      	movs	r3, #0
    }
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	3710      	adds	r7, #16
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}

08011f28 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b082      	sub	sp, #8
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 8011f30:	f7ff fb62 	bl	80115f8 <_ZN14NullTestPlugin8instanceEv>
 8011f34:	4602      	mov	r2, r0
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	611a      	str	r2, [r3, #16]
}
 8011f3a:	bf00      	nop
 8011f3c:	3708      	adds	r7, #8
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}

08011f42 <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 8011f42:	b580      	push	{r7, lr}
 8011f44:	b082      	sub	sp, #8
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
 8011f4a:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	3324      	adds	r3, #36	; 0x24
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	6912      	ldr	r2, [r2, #16]
 8011f58:	4611      	mov	r1, r2
 8011f5a:	6838      	ldr	r0, [r7, #0]
 8011f5c:	4798      	blx	r3
 8011f5e:	4602      	mov	r2, r0
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	611a      	str	r2, [r3, #16]
}
 8011f64:	bf00      	nop
 8011f66:	3708      	adds	r7, #8
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}

08011f6c <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b083      	sub	sp, #12
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	691b      	ldr	r3, [r3, #16]
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	370c      	adds	r7, #12
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr

08011f84 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b082      	sub	sp, #8
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
 8011f8c:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	691b      	ldr	r3, [r3, #16]
 8011f92:	6839      	ldr	r1, [r7, #0]
 8011f94:	4618      	mov	r0, r3
 8011f96:	f7ff fa52 	bl	801143e <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8011f9a:	4603      	mov	r3, r0
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	3708      	adds	r7, #8
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
 8011fac:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	691a      	ldr	r2, [r3, #16]
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	691b      	ldr	r3, [r3, #16]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	3328      	adds	r3, #40	; 0x28
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	6839      	ldr	r1, [r7, #0]
 8011fbe:	4610      	mov	r0, r2
 8011fc0:	4798      	blx	r3
 8011fc2:	4602      	mov	r2, r0
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	691b      	ldr	r3, [r3, #16]
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	bf0c      	ite	eq
 8011fcc:	2301      	moveq	r3, #1
 8011fce:	2300      	movne	r3, #0
 8011fd0:	b2db      	uxtb	r3, r3
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d00b      	beq.n	8011fee <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	691a      	ldr	r2, [r3, #16]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	691b      	ldr	r3, [r3, #16]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	332c      	adds	r3, #44	; 0x2c
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	4610      	mov	r0, r2
 8011fe6:	4798      	blx	r3
 8011fe8:	4602      	mov	r2, r0
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	691b      	ldr	r3, [r3, #16]
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7ff fa17 	bl	8011426 <_ZN10TestPlugin7getNameEv>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	6839      	ldr	r1, [r7, #0]
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7fa ffec 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8012002:	4603      	mov	r3, r0
 8012004:	2b00      	cmp	r3, #0
 8012006:	d00b      	beq.n	8012020 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	691a      	ldr	r2, [r3, #16]
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	691b      	ldr	r3, [r3, #16]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	332c      	adds	r3, #44	; 0x2c
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	4610      	mov	r0, r2
 8012018:	4798      	blx	r3
 801201a:	4602      	mov	r2, r0
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	691a      	ldr	r2, [r3, #16]
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	691b      	ldr	r3, [r3, #16]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	3328      	adds	r3, #40	; 0x28
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	6839      	ldr	r1, [r7, #0]
 8012030:	4610      	mov	r0, r2
 8012032:	4798      	blx	r3
}
 8012034:	bf00      	nop
 8012036:	3708      	adds	r7, #8
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}

0801203c <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b084      	sub	sp, #16
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
    int count = 0;
 8012044:	2300      	movs	r3, #0
 8012046:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	691b      	ldr	r3, [r3, #16]
 801204c:	60bb      	str	r3, [r7, #8]
 801204e:	f7ff fad3 	bl	80115f8 <_ZN14NullTestPlugin8instanceEv>
 8012052:	4602      	mov	r2, r0
 8012054:	68bb      	ldr	r3, [r7, #8]
 8012056:	4293      	cmp	r3, r2
 8012058:	bf14      	ite	ne
 801205a:	2301      	movne	r3, #1
 801205c:	2300      	moveq	r3, #0
 801205e:	b2db      	uxtb	r3, r3
 8012060:	2b00      	cmp	r3, #0
 8012062:	d00a      	beq.n	801207a <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	3301      	adds	r3, #1
 8012068:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	332c      	adds	r3, #44	; 0x2c
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	68b8      	ldr	r0, [r7, #8]
 8012074:	4798      	blx	r3
 8012076:	60b8      	str	r0, [r7, #8]
 8012078:	e7e9      	b.n	801204e <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 801207a:	68fb      	ldr	r3, [r7, #12]
}
 801207c:	4618      	mov	r0, r3
 801207e:	3710      	adds	r7, #16
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}

08012084 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 8012084:	b480      	push	{r7}
 8012086:	b083      	sub	sp, #12
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
    return tests_;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	685b      	ldr	r3, [r3, #4]
}
 8012090:	4618      	mov	r0, r3
 8012092:	370c      	adds	r7, #12
 8012094:	46bd      	mov	sp, r7
 8012096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209a:	4770      	bx	lr

0801209c <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b084      	sub	sp, #16
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
 80120a4:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	334c      	adds	r3, #76	; 0x4c
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	6878      	ldr	r0, [r7, #4]
 80120b0:	4798      	blx	r3
 80120b2:	4602      	mov	r2, r0
 80120b4:	f107 0308 	add.w	r3, r7, #8
 80120b8:	4611      	mov	r1, r2
 80120ba:	4618      	mov	r0, r3
 80120bc:	f002 f8f8 	bl	80142b0 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 80120c0:	f107 0308 	add.w	r3, r7, #8
 80120c4:	6839      	ldr	r1, [r7, #0]
 80120c6:	4618      	mov	r0, r3
 80120c8:	f002 f980 	bl	80143cc <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 80120cc:	f107 0308 	add.w	r3, r7, #8
 80120d0:	4618      	mov	r0, r3
 80120d2:	f002 fa13 	bl	80144fc <_ZNK22UtestShellPointerArray12getFirstTestEv>
 80120d6:	4602      	mov	r2, r0
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 80120dc:	f107 0308 	add.w	r3, r7, #8
 80120e0:	4618      	mov	r0, r3
 80120e2:	f002 f939 	bl	8014358 <_ZN22UtestShellPointerArrayD1Ev>
}
 80120e6:	bf00      	nop
 80120e8:	3710      	adds	r7, #16
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}

080120ee <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 80120ee:	b580      	push	{r7, lr}
 80120f0:	b084      	sub	sp, #16
 80120f2:	af00      	add	r7, sp, #0
 80120f4:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	334c      	adds	r3, #76	; 0x4c
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	4798      	blx	r3
 8012102:	4602      	mov	r2, r0
 8012104:	f107 0308 	add.w	r3, r7, #8
 8012108:	4611      	mov	r1, r2
 801210a:	4618      	mov	r0, r3
 801210c:	f002 f8d0 	bl	80142b0 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 8012110:	f107 0308 	add.w	r3, r7, #8
 8012114:	4618      	mov	r0, r3
 8012116:	f002 f995 	bl	8014444 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 801211a:	f107 0308 	add.w	r3, r7, #8
 801211e:	4618      	mov	r0, r3
 8012120:	f002 f9ec 	bl	80144fc <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8012124:	4602      	mov	r2, r0
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 801212a:	f107 0308 	add.w	r3, r7, #8
 801212e:	4618      	mov	r0, r3
 8012130:	f002 f912 	bl	8014358 <_ZN22UtestShellPointerArrayD1Ev>
}
 8012134:	bf00      	nop
 8012136:	3710      	adds	r7, #16
 8012138:	46bd      	mov	sp, r7
 801213a:	bd80      	pop	{r7, pc}

0801213c <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b084      	sub	sp, #16
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
 8012144:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	685b      	ldr	r3, [r3, #4]
 801214a:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d00b      	beq.n	801216a <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	330c      	adds	r3, #12
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	68f8      	ldr	r0, [r7, #12]
 801215c:	4798      	blx	r3
 801215e:	4602      	mov	r2, r0
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	4293      	cmp	r3, r2
 8012164:	d001      	beq.n	801216a <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8012166:	2301      	movs	r3, #1
 8012168:	e000      	b.n	801216c <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 801216a:	2300      	movs	r3, #0
 801216c:	2b00      	cmp	r3, #0
 801216e:	d007      	beq.n	8012180 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	330c      	adds	r3, #12
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	68f8      	ldr	r0, [r7, #12]
 801217a:	4798      	blx	r3
 801217c:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 801217e:	e7e5      	b.n	801214c <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 8012180:	68fb      	ldr	r3, [r7, #12]
}
 8012182:	4618      	mov	r0, r3
 8012184:	3710      	adds	r7, #16
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}

0801218a <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 801218a:	b590      	push	{r4, r7, lr}
 801218c:	b087      	sub	sp, #28
 801218e:	af00      	add	r7, sp, #0
 8012190:	6078      	str	r0, [r7, #4]
 8012192:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	685b      	ldr	r3, [r3, #4]
 8012198:	617b      	str	r3, [r7, #20]
    while (current) {
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d01e      	beq.n	80121de <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 80121a0:	f107 030c 	add.w	r3, r7, #12
 80121a4:	6979      	ldr	r1, [r7, #20]
 80121a6:	4618      	mov	r0, r3
 80121a8:	f000 fd4e 	bl	8012c48 <_ZNK10UtestShell7getNameEv>
 80121ac:	f107 030c 	add.w	r3, r7, #12
 80121b0:	6839      	ldr	r1, [r7, #0]
 80121b2:	4618      	mov	r0, r3
 80121b4:	f7fa ff11 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 80121b8:	4603      	mov	r3, r0
 80121ba:	461c      	mov	r4, r3
 80121bc:	f107 030c 	add.w	r3, r7, #12
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7fa fefe 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80121c6:	2c00      	cmp	r4, #0
 80121c8:	d001      	beq.n	80121ce <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	e008      	b.n	80121e0 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 80121ce:	697b      	ldr	r3, [r7, #20]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	330c      	adds	r3, #12
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	6978      	ldr	r0, [r7, #20]
 80121d8:	4798      	blx	r3
 80121da:	6178      	str	r0, [r7, #20]
    while (current) {
 80121dc:	e7dd      	b.n	801219a <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 80121de:	2300      	movs	r3, #0
}
 80121e0:	4618      	mov	r0, r3
 80121e2:	371c      	adds	r7, #28
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd90      	pop	{r4, r7, pc}

080121e8 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 80121e8:	b590      	push	{r4, r7, lr}
 80121ea:	b087      	sub	sp, #28
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
 80121f0:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	685b      	ldr	r3, [r3, #4]
 80121f6:	617b      	str	r3, [r7, #20]
    while (current) {
 80121f8:	697b      	ldr	r3, [r7, #20]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d01e      	beq.n	801223c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 80121fe:	f107 030c 	add.w	r3, r7, #12
 8012202:	6979      	ldr	r1, [r7, #20]
 8012204:	4618      	mov	r0, r3
 8012206:	f000 fd2e 	bl	8012c66 <_ZNK10UtestShell8getGroupEv>
 801220a:	f107 030c 	add.w	r3, r7, #12
 801220e:	6839      	ldr	r1, [r7, #0]
 8012210:	4618      	mov	r0, r3
 8012212:	f7fa fee2 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8012216:	4603      	mov	r3, r0
 8012218:	461c      	mov	r4, r3
 801221a:	f107 030c 	add.w	r3, r7, #12
 801221e:	4618      	mov	r0, r3
 8012220:	f7fa fecf 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8012224:	2c00      	cmp	r4, #0
 8012226:	d001      	beq.n	801222c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 8012228:	697b      	ldr	r3, [r7, #20]
 801222a:	e008      	b.n	801223e <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 801222c:	697b      	ldr	r3, [r7, #20]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	330c      	adds	r3, #12
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	6978      	ldr	r0, [r7, #20]
 8012236:	4798      	blx	r3
 8012238:	6178      	str	r0, [r7, #20]
    while (current) {
 801223a:	e7dd      	b.n	80121f8 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 801223c:	2300      	movs	r3, #0
}
 801223e:	4618      	mov	r0, r3
 8012240:	371c      	adds	r7, #28
 8012242:	46bd      	mov	sp, r7
 8012244:	bd90      	pop	{r4, r7, pc}
	...

08012248 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 8012248:	b480      	push	{r7}
 801224a:	b083      	sub	sp, #12
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 8012252:	4a18      	ldr	r2, [pc, #96]	; (80122b4 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	601a      	str	r2, [r3, #0]
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	683a      	ldr	r2, [r7, #0]
 801225c:	605a      	str	r2, [r3, #4]
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2200      	movs	r2, #0
 8012262:	609a      	str	r2, [r3, #8]
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2200      	movs	r2, #0
 8012268:	60da      	str	r2, [r3, #12]
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2200      	movs	r2, #0
 801226e:	611a      	str	r2, [r3, #16]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	2200      	movs	r2, #0
 8012274:	615a      	str	r2, [r3, #20]
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	2200      	movs	r2, #0
 801227a:	619a      	str	r2, [r3, #24]
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	2200      	movs	r2, #0
 8012280:	61da      	str	r2, [r3, #28]
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2200      	movs	r2, #0
 8012286:	621a      	str	r2, [r3, #32]
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2200      	movs	r2, #0
 801228c:	625a      	str	r2, [r3, #36]	; 0x24
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	2200      	movs	r2, #0
 8012292:	629a      	str	r2, [r3, #40]	; 0x28
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2200      	movs	r2, #0
 8012298:	62da      	str	r2, [r3, #44]	; 0x2c
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	2200      	movs	r2, #0
 801229e:	631a      	str	r2, [r3, #48]	; 0x30
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2200      	movs	r2, #0
 80122a4:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	4618      	mov	r0, r3
 80122aa:	370c      	adds	r7, #12
 80122ac:	46bd      	mov	sp, r7
 80122ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b2:	4770      	bx	lr
 80122b4:	080282c8 	.word	0x080282c8

080122b8 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 80122b8:	b480      	push	{r7}
 80122ba:	b083      	sub	sp, #12
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
 80122c0:	4a04      	ldr	r2, [pc, #16]	; (80122d4 <_ZN10TestResultD1Ev+0x1c>)
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	601a      	str	r2, [r3, #0]
{
}
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	4618      	mov	r0, r3
 80122ca:	370c      	adds	r7, #12
 80122cc:	46bd      	mov	sp, r7
 80122ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d2:	4770      	bx	lr
 80122d4:	080282c8 	.word	0x080282c8

080122d8 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 80122d8:	b580      	push	{r7, lr}
 80122da:	b082      	sub	sp, #8
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
}
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f7ff ffe9 	bl	80122b8 <_ZN10TestResultD1Ev>
 80122e6:	2138      	movs	r1, #56	; 0x38
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f7f7 ff03 	bl	800a0f4 <_ZdlPvj>
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	4618      	mov	r0, r3
 80122f2:	3708      	adds	r7, #8
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}

080122f8 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b082      	sub	sp, #8
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	685a      	ldr	r2, [r3, #4]
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	685b      	ldr	r3, [r3, #4]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	3318      	adds	r3, #24
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	6839      	ldr	r1, [r7, #0]
 8012312:	4610      	mov	r0, r2
 8012314:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8012316:	4b05      	ldr	r3, [pc, #20]	; (801232c <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	4798      	blx	r3
 801231c:	4603      	mov	r3, r0
 801231e:	461a      	mov	r2, r3
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	631a      	str	r2, [r3, #48]	; 0x30
}
 8012324:	bf00      	nop
 8012326:	3708      	adds	r7, #8
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}
 801232c:	200000a8 	.word	0x200000a8

08012330 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b082      	sub	sp, #8
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
 8012338:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 801233a:	4b0c      	ldr	r3, [pc, #48]	; (801236c <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	4798      	blx	r3
 8012340:	4603      	mov	r3, r0
 8012342:	461a      	mov	r2, r3
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012348:	1ad2      	subs	r2, r2, r3
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	685a      	ldr	r2, [r3, #4]
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	685b      	ldr	r3, [r3, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	331c      	adds	r3, #28
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	6879      	ldr	r1, [r7, #4]
 801235e:	4610      	mov	r0, r2
 8012360:	4798      	blx	r3
}
 8012362:	bf00      	nop
 8012364:	3708      	adds	r7, #8
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}
 801236a:	bf00      	nop
 801236c:	200000a8 	.word	0x200000a8

08012370 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b082      	sub	sp, #8
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
 8012378:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	685a      	ldr	r2, [r3, #4]
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	3310      	adds	r3, #16
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	6839      	ldr	r1, [r7, #0]
 801238a:	4610      	mov	r0, r2
 801238c:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 801238e:	4b05      	ldr	r3, [pc, #20]	; (80123a4 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	4798      	blx	r3
 8012394:	4603      	mov	r3, r0
 8012396:	461a      	mov	r2, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801239c:	bf00      	nop
 801239e:	3708      	adds	r7, #8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}
 80123a4:	200000a8 	.word	0x200000a8

080123a8 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b082      	sub	sp, #8
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	6039      	str	r1, [r7, #0]
    output_.print(text);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	685a      	ldr	r2, [r3, #4]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	685b      	ldr	r3, [r3, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	332c      	adds	r3, #44	; 0x2c
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	6839      	ldr	r1, [r7, #0]
 80123c2:	4610      	mov	r0, r2
 80123c4:	4798      	blx	r3
}
 80123c6:	bf00      	nop
 80123c8:	3708      	adds	r7, #8
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}

080123ce <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 80123ce:	b580      	push	{r7, lr}
 80123d0:	b082      	sub	sp, #8
 80123d2:	af00      	add	r7, sp, #0
 80123d4:	6078      	str	r0, [r7, #4]
 80123d6:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	685a      	ldr	r2, [r3, #4]
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	685b      	ldr	r3, [r3, #4]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	3348      	adds	r3, #72	; 0x48
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	6839      	ldr	r1, [r7, #0]
 80123e8:	4610      	mov	r0, r2
 80123ea:	4798      	blx	r3
}
 80123ec:	bf00      	nop
 80123ee:	3708      	adds	r7, #8
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}

080123f4 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 80123fe:	4b0c      	ldr	r3, [pc, #48]	; (8012430 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	4798      	blx	r3
 8012404:	4603      	mov	r3, r0
 8012406:	461a      	mov	r2, r3
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801240c:	1ad2      	subs	r2, r2, r3
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	685a      	ldr	r2, [r3, #4]
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	685b      	ldr	r3, [r3, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	3314      	adds	r3, #20
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	6879      	ldr	r1, [r7, #4]
 8012422:	4610      	mov	r0, r2
 8012424:	4798      	blx	r3

}
 8012426:	bf00      	nop
 8012428:	3708      	adds	r7, #8
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}
 801242e:	bf00      	nop
 8012430:	200000a8 	.word	0x200000a8

08012434 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
 801243c:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	685a      	ldr	r2, [r3, #4]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	333c      	adds	r3, #60	; 0x3c
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	6839      	ldr	r1, [r7, #0]
 801244e:	4610      	mov	r0, r2
 8012450:	4798      	blx	r3
    failureCount_++;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	695b      	ldr	r3, [r3, #20]
 8012456:	1c5a      	adds	r2, r3, #1
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	615a      	str	r2, [r3, #20]
}
 801245c:	bf00      	nop
 801245e:	3708      	adds	r7, #8
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 8012464:	b480      	push	{r7}
 8012466:	b083      	sub	sp, #12
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
    testCount_++;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	689b      	ldr	r3, [r3, #8]
 8012470:	1c5a      	adds	r2, r3, #1
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	609a      	str	r2, [r3, #8]
}
 8012476:	bf00      	nop
 8012478:	370c      	adds	r7, #12
 801247a:	46bd      	mov	sp, r7
 801247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012480:	4770      	bx	lr

08012482 <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 8012482:	b480      	push	{r7}
 8012484:	b083      	sub	sp, #12
 8012486:	af00      	add	r7, sp, #0
 8012488:	6078      	str	r0, [r7, #4]
    runCount_++;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	68db      	ldr	r3, [r3, #12]
 801248e:	1c5a      	adds	r2, r3, #1
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	60da      	str	r2, [r3, #12]
}
 8012494:	bf00      	nop
 8012496:	370c      	adds	r7, #12
 8012498:	46bd      	mov	sp, r7
 801249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249e:	4770      	bx	lr

080124a0 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 80124a0:	b480      	push	{r7}
 80124a2:	b083      	sub	sp, #12
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
    checkCount_++;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	691b      	ldr	r3, [r3, #16]
 80124ac:	1c5a      	adds	r2, r3, #1
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	611a      	str	r2, [r3, #16]
}
 80124b2:	bf00      	nop
 80124b4:	370c      	adds	r7, #12
 80124b6:	46bd      	mov	sp, r7
 80124b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124bc:	4770      	bx	lr

080124be <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 80124be:	b480      	push	{r7}
 80124c0:	b083      	sub	sp, #12
 80124c2:	af00      	add	r7, sp, #0
 80124c4:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	699b      	ldr	r3, [r3, #24]
 80124ca:	1c5a      	adds	r2, r3, #1
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	619a      	str	r2, [r3, #24]
}
 80124d0:	bf00      	nop
 80124d2:	370c      	adds	r7, #12
 80124d4:	46bd      	mov	sp, r7
 80124d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124da:	4770      	bx	lr

080124dc <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 80124dc:	b480      	push	{r7}
 80124de:	b083      	sub	sp, #12
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	69db      	ldr	r3, [r3, #28]
 80124e8:	1c5a      	adds	r2, r3, #1
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	61da      	str	r2, [r3, #28]
}
 80124ee:	bf00      	nop
 80124f0:	370c      	adds	r7, #12
 80124f2:	46bd      	mov	sp, r7
 80124f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f8:	4770      	bx	lr
	...

080124fc <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b082      	sub	sp, #8
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8012504:	4b09      	ldr	r3, [pc, #36]	; (801252c <_ZN10TestResult12testsStartedEv+0x30>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	4798      	blx	r3
 801250a:	4603      	mov	r3, r0
 801250c:	461a      	mov	r2, r3
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	685a      	ldr	r2, [r3, #4]
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	685b      	ldr	r3, [r3, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	3308      	adds	r3, #8
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	4610      	mov	r0, r2
 8012522:	4798      	blx	r3
}
 8012524:	bf00      	nop
 8012526:	3708      	adds	r7, #8
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}
 801252c:	200000a8 	.word	0x200000a8

08012530 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b084      	sub	sp, #16
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 8012538:	4b0c      	ldr	r3, [pc, #48]	; (801256c <_ZN10TestResult10testsEndedEv+0x3c>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	4798      	blx	r3
 801253e:	4603      	mov	r3, r0
 8012540:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012546:	68fa      	ldr	r2, [r7, #12]
 8012548:	1ad2      	subs	r2, r2, r3
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	685a      	ldr	r2, [r3, #4]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	685b      	ldr	r3, [r3, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	330c      	adds	r3, #12
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	6879      	ldr	r1, [r7, #4]
 801255e:	4610      	mov	r0, r2
 8012560:	4798      	blx	r3
}
 8012562:	bf00      	nop
 8012564:	3710      	adds	r7, #16
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}
 801256a:	bf00      	nop
 801256c:	200000a8 	.word	0x200000a8

08012570 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 8012570:	b480      	push	{r7}
 8012572:	b083      	sub	sp, #12
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6a1b      	ldr	r3, [r3, #32]
}
 801257c:	4618      	mov	r0, r3
 801257e:	370c      	adds	r7, #12
 8012580:	46bd      	mov	sp, r7
 8012582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012586:	4770      	bx	lr

08012588 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 8012588:	b480      	push	{r7}
 801258a:	b083      	sub	sp, #12
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8012594:	4618      	mov	r0, r3
 8012596:	370c      	adds	r7, #12
 8012598:	46bd      	mov	sp, r7
 801259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259e:	4770      	bx	lr

080125a0 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 80125a0:	b480      	push	{r7}
 80125a2:	b083      	sub	sp, #12
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	370c      	adds	r7, #12
 80125b0:	46bd      	mov	sp, r7
 80125b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b6:	4770      	bx	lr

080125b8 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 80125b8:	b590      	push	{r4, r7, lr}
 80125ba:	b087      	sub	sp, #28
 80125bc:	af00      	add	r7, sp, #0
 80125be:	ed87 0b04 	vstr	d0, [r7, #16]
 80125c2:	ed87 1b02 	vstr	d1, [r7, #8]
 80125c6:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 80125ca:	4b2c      	ldr	r3, [pc, #176]	; (801267c <_Z13doubles_equalddd+0xc4>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	ed97 0b04 	vldr	d0, [r7, #16]
 80125d2:	4798      	blx	r3
 80125d4:	4603      	mov	r3, r0
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d10f      	bne.n	80125fa <_Z13doubles_equalddd+0x42>
 80125da:	4b28      	ldr	r3, [pc, #160]	; (801267c <_Z13doubles_equalddd+0xc4>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	ed97 0b02 	vldr	d0, [r7, #8]
 80125e2:	4798      	blx	r3
 80125e4:	4603      	mov	r3, r0
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d107      	bne.n	80125fa <_Z13doubles_equalddd+0x42>
 80125ea:	4b24      	ldr	r3, [pc, #144]	; (801267c <_Z13doubles_equalddd+0xc4>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	ed97 0b00 	vldr	d0, [r7]
 80125f2:	4798      	blx	r3
 80125f4:	4603      	mov	r3, r0
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d001      	beq.n	80125fe <_Z13doubles_equalddd+0x46>
 80125fa:	2301      	movs	r3, #1
 80125fc:	e000      	b.n	8012600 <_Z13doubles_equalddd+0x48>
 80125fe:	2300      	movs	r3, #0
 8012600:	2b00      	cmp	r3, #0
 8012602:	d001      	beq.n	8012608 <_Z13doubles_equalddd+0x50>
        return false;
 8012604:	2300      	movs	r3, #0
 8012606:	e035      	b.n	8012674 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8012608:	4b1d      	ldr	r3, [pc, #116]	; (8012680 <_Z13doubles_equalddd+0xc8>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	ed97 0b04 	vldr	d0, [r7, #16]
 8012610:	4798      	blx	r3
 8012612:	4603      	mov	r3, r0
 8012614:	2b00      	cmp	r3, #0
 8012616:	d009      	beq.n	801262c <_Z13doubles_equalddd+0x74>
 8012618:	4b19      	ldr	r3, [pc, #100]	; (8012680 <_Z13doubles_equalddd+0xc8>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	ed97 0b02 	vldr	d0, [r7, #8]
 8012620:	4798      	blx	r3
 8012622:	4603      	mov	r3, r0
 8012624:	2b00      	cmp	r3, #0
 8012626:	d001      	beq.n	801262c <_Z13doubles_equalddd+0x74>
 8012628:	2301      	movs	r3, #1
 801262a:	e000      	b.n	801262e <_Z13doubles_equalddd+0x76>
 801262c:	2300      	movs	r3, #0
 801262e:	2b00      	cmp	r3, #0
 8012630:	d001      	beq.n	8012636 <_Z13doubles_equalddd+0x7e>
    {
        return true;
 8012632:	2301      	movs	r3, #1
 8012634:	e01e      	b.n	8012674 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 8012636:	4b13      	ldr	r3, [pc, #76]	; (8012684 <_Z13doubles_equalddd+0xcc>)
 8012638:	681c      	ldr	r4, [r3, #0]
 801263a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801263e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012642:	f7ed fe61 	bl	8000308 <__aeabi_dsub>
 8012646:	4602      	mov	r2, r0
 8012648:	460b      	mov	r3, r1
 801264a:	ec43 2b17 	vmov	d7, r2, r3
 801264e:	eeb0 0a47 	vmov.f32	s0, s14
 8012652:	eef0 0a67 	vmov.f32	s1, s15
 8012656:	47a0      	blx	r4
 8012658:	ec53 2b10 	vmov	r2, r3, d0
 801265c:	2101      	movs	r1, #1
 801265e:	460c      	mov	r4, r1
 8012660:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012664:	f7ee f87c 	bl	8000760 <__aeabi_dcmpge>
 8012668:	4603      	mov	r3, r0
 801266a:	2b00      	cmp	r3, #0
 801266c:	d101      	bne.n	8012672 <_Z13doubles_equalddd+0xba>
 801266e:	2300      	movs	r3, #0
 8012670:	461c      	mov	r4, r3
 8012672:	b2e3      	uxtb	r3, r4
}
 8012674:	4618      	mov	r0, r3
 8012676:	371c      	adds	r7, #28
 8012678:	46bd      	mov	sp, r7
 801267a:	bd90      	pop	{r4, r7, pc}
 801267c:	200000e8 	.word	0x200000e8
 8012680:	200000ec 	.word	0x200000ec
 8012684:	200000dc 	.word	0x200000dc

08012688 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 8012688:	b480      	push	{r7}
 801268a:	b083      	sub	sp, #12
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	332c      	adds	r3, #44	; 0x2c
    }
 8012694:	4618      	mov	r0, r3
 8012696:	370c      	adds	r7, #12
 8012698:	46bd      	mov	sp, r7
 801269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269e:	4770      	bx	lr

080126a0 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
    {
 80126a8:	4a0a      	ldr	r2, [pc, #40]	; (80126d4 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	601a      	str	r2, [r3, #0]
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	332c      	adds	r3, #44	; 0x2c
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7ff fe00 	bl	80122b8 <_ZN10TestResultD1Ev>
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	331c      	adds	r3, #28
 80126bc:	4618      	mov	r0, r3
 80126be:	f7f6 f815 	bl	80086ec <_ZN17ConsoleTestOutputD1Ev>
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	4618      	mov	r0, r3
 80126c6:	f000 f943 	bl	8012950 <_ZN10UtestShellD1Ev>
    }
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	4618      	mov	r0, r3
 80126ce:	3708      	adds	r7, #8
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bd80      	pop	{r7, pc}
 80126d4:	08028310 	.word	0x08028310

080126d8 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 80126d8:	b580      	push	{r7, lr}
 80126da:	b082      	sub	sp, #8
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
    }
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f7ff ffdd 	bl	80126a0 <_ZN22OutsideTestRunnerUTestD1Ev>
 80126e6:	2164      	movs	r1, #100	; 0x64
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f7f7 fd03 	bl	800a0f4 <_ZdlPvj>
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	4618      	mov	r0, r3
 80126f2:	3708      	adds	r7, #8
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b084      	sub	sp, #16
 80126fc:	af02      	add	r7, sp, #8
 80126fe:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	2300      	movs	r3, #0
 8012704:	9300      	str	r3, [sp, #0]
 8012706:	4b0d      	ldr	r3, [pc, #52]	; (801273c <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8012708:	4a0d      	ldr	r2, [pc, #52]	; (8012740 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 801270a:	490e      	ldr	r1, [pc, #56]	; (8012744 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 801270c:	f000 f8f8 	bl	8012900 <_ZN10UtestShellC1EPKcS1_S1_j>
 8012710:	4a0d      	ldr	r2, [pc, #52]	; (8012748 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	601a      	str	r2, [r3, #0]
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	331c      	adds	r3, #28
 801271a:	4618      	mov	r0, r3
 801271c:	f7f5 ffd4 	bl	80086c8 <_ZN17ConsoleTestOutputC1Ev>
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	331c      	adds	r3, #28
 801272a:	4619      	mov	r1, r3
 801272c:	4610      	mov	r0, r2
 801272e:	f7ff fd8b 	bl	8012248 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	4618      	mov	r0, r3
 8012736:	3708      	adds	r7, #8
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}
 801273c:	08024a7c 	.word	0x08024a7c
 8012740:	08024a8c 	.word	0x08024a8c
 8012744:	08024acc 	.word	0x08024acc
 8012748:	08028310 	.word	0x08028310

0801274c <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 801274c:	b580      	push	{r7, lr}
 801274e:	af00      	add	r7, sp, #0
 8012750:	4801      	ldr	r0, [pc, #4]	; (8012758 <__tcf_0+0xc>)
 8012752:	f7ff ffa5 	bl	80126a0 <_ZN22OutsideTestRunnerUTestD1Ev>
 8012756:	bd80      	pop	{r7, pc}
 8012758:	20000a10 	.word	0x20000a10

0801275c <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 801275c:	b580      	push	{r7, lr}
 801275e:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 8012760:	4b12      	ldr	r3, [pc, #72]	; (80127ac <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	f3bf 8f5b 	dmb	ish
 8012768:	b2db      	uxtb	r3, r3
 801276a:	f003 0301 	and.w	r3, r3, #1
 801276e:	2b00      	cmp	r3, #0
 8012770:	bf0c      	ite	eq
 8012772:	2301      	moveq	r3, #1
 8012774:	2300      	movne	r3, #0
 8012776:	b2db      	uxtb	r3, r3
 8012778:	2b00      	cmp	r3, #0
 801277a:	d013      	beq.n	80127a4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 801277c:	480b      	ldr	r0, [pc, #44]	; (80127ac <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 801277e:	f00c ff27 	bl	801f5d0 <__cxa_guard_acquire>
 8012782:	4603      	mov	r3, r0
 8012784:	2b00      	cmp	r3, #0
 8012786:	bf14      	ite	ne
 8012788:	2301      	movne	r3, #1
 801278a:	2300      	moveq	r3, #0
 801278c:	b2db      	uxtb	r3, r3
 801278e:	2b00      	cmp	r3, #0
 8012790:	d008      	beq.n	80127a4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8012792:	4807      	ldr	r0, [pc, #28]	; (80127b0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 8012794:	f7ff ffb0 	bl	80126f8 <_ZN22OutsideTestRunnerUTestC1Ev>
 8012798:	4804      	ldr	r0, [pc, #16]	; (80127ac <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 801279a:	f00c ff25 	bl	801f5e8 <__cxa_guard_release>
 801279e:	4805      	ldr	r0, [pc, #20]	; (80127b4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 80127a0:	f00c ff49 	bl	801f636 <atexit>
    return instance_;
 80127a4:	4b02      	ldr	r3, [pc, #8]	; (80127b0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	bd80      	pop	{r7, pc}
 80127aa:	bf00      	nop
 80127ac:	20000a74 	.word	0x20000a74
 80127b0:	20000a10 	.word	0x20000a10
 80127b4:	0801274d 	.word	0x0801274d

080127b8 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b082      	sub	sp, #8
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	330c      	adds	r3, #12
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	4798      	blx	r3
    }
 80127cc:	bf00      	nop
 80127ce:	3708      	adds	r7, #8
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}

080127d4 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b082      	sub	sp, #8
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	3314      	adds	r3, #20
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	4798      	blx	r3
    }
 80127e8:	bf00      	nop
 80127ea:	3708      	adds	r7, #8
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b082      	sub	sp, #8
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	3310      	adds	r3, #16
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	4798      	blx	r3
    }
 8012804:	bf00      	nop
 8012806:	3708      	adds	r7, #8
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 801280c:	b480      	push	{r7}
 801280e:	b085      	sub	sp, #20
 8012810:	af00      	add	r7, sp, #0
 8012812:	60f8      	str	r0, [r7, #12]
 8012814:	60b9      	str	r1, [r7, #8]
 8012816:	607a      	str	r2, [r7, #4]
 8012818:	603b      	str	r3, [r7, #0]
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	68ba      	ldr	r2, [r7, #8]
 801281e:	601a      	str	r2, [r3, #0]
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	687a      	ldr	r2, [r7, #4]
 8012824:	605a      	str	r2, [r3, #4]
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	683a      	ldr	r2, [r7, #0]
 801282a:	609a      	str	r2, [r3, #8]
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	4618      	mov	r0, r3
 8012830:	3714      	adds	r7, #20
 8012832:	46bd      	mov	sp, r7
 8012834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012838:	4770      	bx	lr

0801283a <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 801283a:	b580      	push	{r7, lr}
 801283c:	b086      	sub	sp, #24
 801283e:	af00      	add	r7, sp, #0
 8012840:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 801284c:	697b      	ldr	r3, [r7, #20]
 801284e:	685b      	ldr	r3, [r3, #4]
 8012850:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8012852:	697b      	ldr	r3, [r7, #20]
 8012854:	689b      	ldr	r3, [r3, #8]
 8012856:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 8012858:	693b      	ldr	r3, [r7, #16]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	3394      	adds	r3, #148	; 0x94
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	68ba      	ldr	r2, [r7, #8]
 8012862:	68f9      	ldr	r1, [r7, #12]
 8012864:	6938      	ldr	r0, [r7, #16]
 8012866:	4798      	blx	r3
    }
 8012868:	bf00      	nop
 801286a:	3718      	adds	r7, #24
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}

08012870 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 8012870:	b580      	push	{r7, lr}
 8012872:	b086      	sub	sp, #24
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	685b      	ldr	r3, [r3, #4]
 8012886:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	689b      	ldr	r3, [r3, #8]
 801288c:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 801288e:	4b05      	ldr	r3, [pc, #20]	; (80128a4 <helperDoRunOneTestSeperateProcess+0x34>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	68ba      	ldr	r2, [r7, #8]
 8012894:	68f9      	ldr	r1, [r7, #12]
 8012896:	6938      	ldr	r0, [r7, #16]
 8012898:	4798      	blx	r3
    }
 801289a:	bf00      	nop
 801289c:	3718      	adds	r7, #24
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}
 80128a2:	bf00      	nop
 80128a4:	2000009c 	.word	0x2000009c

080128a8 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 80128a8:	b480      	push	{r7}
 80128aa:	b083      	sub	sp, #12
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 80128b0:	4a0f      	ldr	r2, [pc, #60]	; (80128f0 <_ZN10UtestShellC1Ev+0x48>)
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	601a      	str	r2, [r3, #0]
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	4a0e      	ldr	r2, [pc, #56]	; (80128f4 <_ZN10UtestShellC1Ev+0x4c>)
 80128ba:	605a      	str	r2, [r3, #4]
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	4a0e      	ldr	r2, [pc, #56]	; (80128f8 <_ZN10UtestShellC1Ev+0x50>)
 80128c0:	609a      	str	r2, [r3, #8]
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	4a0d      	ldr	r2, [pc, #52]	; (80128fc <_ZN10UtestShellC1Ev+0x54>)
 80128c6:	60da      	str	r2, [r3, #12]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2200      	movs	r2, #0
 80128cc:	611a      	str	r2, [r3, #16]
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2200      	movs	r2, #0
 80128d2:	615a      	str	r2, [r3, #20]
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	2200      	movs	r2, #0
 80128d8:	761a      	strb	r2, [r3, #24]
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2200      	movs	r2, #0
 80128de:	765a      	strb	r2, [r3, #25]
{
}
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	4618      	mov	r0, r3
 80128e4:	370c      	adds	r7, #12
 80128e6:	46bd      	mov	sp, r7
 80128e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ec:	4770      	bx	lr
 80128ee:	bf00      	nop
 80128f0:	080283d0 	.word	0x080283d0
 80128f4:	08024b18 	.word	0x08024b18
 80128f8:	08024b2c 	.word	0x08024b2c
 80128fc:	08024b3c 	.word	0x08024b3c

08012900 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8012900:	b480      	push	{r7}
 8012902:	b085      	sub	sp, #20
 8012904:	af00      	add	r7, sp, #0
 8012906:	60f8      	str	r0, [r7, #12]
 8012908:	60b9      	str	r1, [r7, #8]
 801290a:	607a      	str	r2, [r7, #4]
 801290c:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 801290e:	4a0f      	ldr	r2, [pc, #60]	; (801294c <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	601a      	str	r2, [r3, #0]
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	68ba      	ldr	r2, [r7, #8]
 8012918:	605a      	str	r2, [r3, #4]
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	687a      	ldr	r2, [r7, #4]
 801291e:	609a      	str	r2, [r3, #8]
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	683a      	ldr	r2, [r7, #0]
 8012924:	60da      	str	r2, [r3, #12]
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	69ba      	ldr	r2, [r7, #24]
 801292a:	611a      	str	r2, [r3, #16]
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	2200      	movs	r2, #0
 8012930:	615a      	str	r2, [r3, #20]
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	2200      	movs	r2, #0
 8012936:	761a      	strb	r2, [r3, #24]
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	2200      	movs	r2, #0
 801293c:	765a      	strb	r2, [r3, #25]
{
}
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	4618      	mov	r0, r3
 8012942:	3714      	adds	r7, #20
 8012944:	46bd      	mov	sp, r7
 8012946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294a:	4770      	bx	lr
 801294c:	080283d0 	.word	0x080283d0

08012950 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 8012950:	b480      	push	{r7}
 8012952:	b083      	sub	sp, #12
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	4a04      	ldr	r2, [pc, #16]	; (801296c <_ZN10UtestShellD1Ev+0x1c>)
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	601a      	str	r2, [r3, #0]
{
}
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	4618      	mov	r0, r3
 8012962:	370c      	adds	r7, #12
 8012964:	46bd      	mov	sp, r7
 8012966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296a:	4770      	bx	lr
 801296c:	080283d0 	.word	0x080283d0

08012970 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 8012970:	b580      	push	{r7, lr}
 8012972:	b082      	sub	sp, #8
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
}
 8012978:	6878      	ldr	r0, [r7, #4]
 801297a:	f7ff ffe9 	bl	8012950 <_ZN10UtestShellD1Ev>
 801297e:	211c      	movs	r1, #28
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f7f7 fbb7 	bl	800a0f4 <_ZdlPvj>
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	4618      	mov	r0, r3
 801298a:	3708      	adds	r7, #8
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}

08012990 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b082      	sub	sp, #8
 8012994:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 8012996:	2300      	movs	r3, #0
 8012998:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	3310      	adds	r3, #16
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	6878      	ldr	r0, [r7, #4]
 80129a4:	4798      	blx	r3
}
 80129a6:	bf00      	nop
 80129a8:	3708      	adds	r7, #8
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}
	...

080129b0 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 80129b4:	4b02      	ldr	r3, [pc, #8]	; (80129c0 <_ZN10UtestShell5crashEv+0x10>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	4798      	blx	r3
}
 80129ba:	bf00      	nop
 80129bc:	bd80      	pop	{r7, pc}
 80129be:	bf00      	nop
 80129c0:	20000098 	.word	0x20000098

080129c4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b088      	sub	sp, #32
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	60f8      	str	r0, [r7, #12]
 80129cc:	60b9      	str	r1, [r7, #8]
 80129ce:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	2200      	movs	r2, #0
 80129d4:	765a      	strb	r2, [r3, #25]
    result.countRun();
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	3324      	adds	r3, #36	; 0x24
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 80129e2:	f107 0014 	add.w	r0, r7, #20
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	68ba      	ldr	r2, [r7, #8]
 80129ea:	68f9      	ldr	r1, [r7, #12]
 80129ec:	f7ff ff0e 	bl	801280c <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	337c      	adds	r3, #124	; 0x7c
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	68f8      	ldr	r0, [r7, #12]
 80129fa:	4798      	blx	r3
 80129fc:	4603      	mov	r3, r0
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d007      	beq.n	8012a12 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 8012a02:	4b09      	ldr	r3, [pc, #36]	; (8012a28 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	f107 0214 	add.w	r2, r7, #20
 8012a0a:	4611      	mov	r1, r2
 8012a0c:	4807      	ldr	r0, [pc, #28]	; (8012a2c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 8012a0e:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8012a10:	e006      	b.n	8012a20 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 8012a12:	4b05      	ldr	r3, [pc, #20]	; (8012a28 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	f107 0214 	add.w	r2, r7, #20
 8012a1a:	4611      	mov	r1, r2
 8012a1c:	4804      	ldr	r0, [pc, #16]	; (8012a30 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 8012a1e:	4798      	blx	r3
}
 8012a20:	bf00      	nop
 8012a22:	3720      	adds	r7, #32
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	200000a4 	.word	0x200000a4
 8012a2c:	08012871 	.word	0x08012871
 8012a30:	0801283b 	.word	0x0801283b

08012a34 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 8012a34:	b590      	push	{r4, r7, lr}
 8012a36:	b083      	sub	sp, #12
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
    return new Utest();
 8012a3c:	22d3      	movs	r2, #211	; 0xd3
 8012a3e:	4906      	ldr	r1, [pc, #24]	; (8012a58 <_ZN10UtestShell10createTestEv+0x24>)
 8012a40:	2004      	movs	r0, #4
 8012a42:	f7f7 fb43 	bl	800a0cc <_ZnwjPKci>
 8012a46:	4604      	mov	r4, r0
 8012a48:	4620      	mov	r0, r4
 8012a4a:	f001 fb0f 	bl	801406c <_ZN5UtestC1Ev>
 8012a4e:	4623      	mov	r3, r4
}
 8012a50:	4618      	mov	r0, r3
 8012a52:	370c      	adds	r7, #12
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd90      	pop	{r4, r7, pc}
 8012a58:	08024b4c 	.word	0x08024b4c

08012a5c <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b082      	sub	sp, #8
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	6039      	str	r1, [r7, #0]
    delete test;
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d004      	beq.n	8012a76 <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 8012a6c:	681a      	ldr	r2, [r3, #0]
 8012a6e:	3204      	adds	r2, #4
 8012a70:	6812      	ldr	r2, [r2, #0]
 8012a72:	4618      	mov	r0, r3
 8012a74:	4790      	blx	r2
}
 8012a76:	bf00      	nop
 8012a78:	3708      	adds	r7, #8
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}
	...

08012a80 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b088      	sub	sp, #32
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	60f8      	str	r0, [r7, #12]
 8012a88:	60b9      	str	r1, [r7, #8]
 8012a8a:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	333c      	adds	r3, #60	; 0x3c
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	4940      	ldr	r1, [pc, #256]	; (8012b98 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	3314      	adds	r3, #20
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	687a      	ldr	r2, [r7, #4]
 8012aa4:	68f9      	ldr	r1, [r7, #12]
 8012aa6:	68b8      	ldr	r0, [r7, #8]
 8012aa8:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	333c      	adds	r3, #60	; 0x3c
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	493a      	ldr	r1, [pc, #232]	; (8012b9c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 8012ab4:	6878      	ldr	r0, [r7, #4]
 8012ab6:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 8012ab8:	f001 faae 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8012abc:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 8012abe:	68f8      	ldr	r0, [r7, #12]
 8012ac0:	f001 fa90 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8012ac4:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 8012ac6:	6879      	ldr	r1, [r7, #4]
 8012ac8:	68f8      	ldr	r0, [r7, #12]
 8012aca:	f001 fa6b 	bl	8013fa4 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 8012ace:	68f9      	ldr	r1, [r7, #12]
 8012ad0:	68f8      	ldr	r0, [r7, #12]
 8012ad2:	f001 fa77 	bl	8013fc4 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	333c      	adds	r3, #60	; 0x3c
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	4930      	ldr	r1, [pc, #192]	; (8012ba0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8012ae0:	6878      	ldr	r0, [r7, #4]
 8012ae2:	4798      	blx	r3
    Utest* testToRun = createTest();
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	3388      	adds	r3, #136	; 0x88
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	68f8      	ldr	r0, [r7, #12]
 8012aee:	4798      	blx	r3
 8012af0:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	333c      	adds	r3, #60	; 0x3c
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	492a      	ldr	r1, [pc, #168]	; (8012ba4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	333c      	adds	r3, #60	; 0x3c
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	4927      	ldr	r1, [pc, #156]	; (8012ba8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	4798      	blx	r3
    testToRun->run();
 8012b0e:	697b      	ldr	r3, [r7, #20]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	3308      	adds	r3, #8
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	6978      	ldr	r0, [r7, #20]
 8012b18:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	333c      	adds	r3, #60	; 0x3c
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	4922      	ldr	r1, [pc, #136]	; (8012bac <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8012b28:	69f9      	ldr	r1, [r7, #28]
 8012b2a:	68f8      	ldr	r0, [r7, #12]
 8012b2c:	f001 fa4a 	bl	8013fc4 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8012b30:	69b9      	ldr	r1, [r7, #24]
 8012b32:	68f8      	ldr	r0, [r7, #12]
 8012b34:	f001 fa36 	bl	8013fa4 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	333c      	adds	r3, #60	; 0x3c
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	491b      	ldr	r1, [pc, #108]	; (8012bb0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	4798      	blx	r3
    destroyTest(testToRun);
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	338c      	adds	r3, #140	; 0x8c
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	6979      	ldr	r1, [r7, #20]
 8012b50:	68f8      	ldr	r0, [r7, #12]
 8012b52:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	333c      	adds	r3, #60	; 0x3c
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	4915      	ldr	r1, [pc, #84]	; (8012bb4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	333c      	adds	r3, #60	; 0x3c
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	4913      	ldr	r1, [pc, #76]	; (8012bb8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	3318      	adds	r3, #24
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	687a      	ldr	r2, [r7, #4]
 8012b7a:	68f9      	ldr	r1, [r7, #12]
 8012b7c:	68b8      	ldr	r0, [r7, #8]
 8012b7e:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	333c      	adds	r3, #60	; 0x3c
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	490c      	ldr	r1, [pc, #48]	; (8012bbc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	4798      	blx	r3
}
 8012b8e:	bf00      	nop
 8012b90:	3720      	adds	r7, #32
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}
 8012b96:	bf00      	nop
 8012b98:	08024b60 	.word	0x08024b60
 8012b9c:	08024b84 	.word	0x08024b84
 8012ba0:	08024ba4 	.word	0x08024ba4
 8012ba4:	08024bc0 	.word	0x08024bc0
 8012ba8:	08024bdc 	.word	0x08024bdc
 8012bac:	08024bf8 	.word	0x08024bf8
 8012bb0:	08024c10 	.word	0x08024c10
 8012bb4:	08024c2c 	.word	0x08024c2c
 8012bb8:	08024c48 	.word	0x08024c48
 8012bbc:	08024c6c 	.word	0x08024c6c

08012bc0 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 8012bc0:	b480      	push	{r7}
 8012bc2:	b083      	sub	sp, #12
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
    return next_;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	695b      	ldr	r3, [r3, #20]
}
 8012bcc:	4618      	mov	r0, r3
 8012bce:	370c      	adds	r7, #12
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd6:	4770      	bx	lr

08012bd8 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 8012bd8:	b480      	push	{r7}
 8012bda:	b083      	sub	sp, #12
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
 8012be0:	6039      	str	r1, [r7, #0]
    next_ = test;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	683a      	ldr	r2, [r7, #0]
 8012be6:	615a      	str	r2, [r3, #20]
    return this;
 8012be8:	687b      	ldr	r3, [r7, #4]
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	370c      	adds	r7, #12
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf4:	4770      	bx	lr

08012bf6 <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 8012bf6:	b580      	push	{r7, lr}
 8012bf8:	b082      	sub	sp, #8
 8012bfa:	af00      	add	r7, sp, #0
 8012bfc:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	695b      	ldr	r3, [r3, #20]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d00b      	beq.n	8012c1e <_ZN10UtestShell10countTestsEv+0x28>
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	695a      	ldr	r2, [r3, #20]
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	695b      	ldr	r3, [r3, #20]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	3310      	adds	r3, #16
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	4610      	mov	r0, r2
 8012c16:	4798      	blx	r3
 8012c18:	4603      	mov	r3, r0
 8012c1a:	3301      	adds	r3, #1
 8012c1c:	e000      	b.n	8012c20 <_ZN10UtestShell10countTestsEv+0x2a>
 8012c1e:	2301      	movs	r3, #1
}
 8012c20:	4618      	mov	r0, r3
 8012c22:	3708      	adds	r7, #8
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}

08012c28 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b082      	sub	sp, #8
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
 8012c30:	6039      	str	r1, [r7, #0]
    return "TEST";
 8012c32:	4904      	ldr	r1, [pc, #16]	; (8012c44 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 8012c34:	6878      	ldr	r0, [r7, #4]
 8012c36:	f7f9 fe0c 	bl	800c852 <_ZN12SimpleStringC1EPKc>
}
 8012c3a:	6878      	ldr	r0, [r7, #4]
 8012c3c:	3708      	adds	r7, #8
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}
 8012c42:	bf00      	nop
 8012c44:	08024c90 	.word	0x08024c90

08012c48 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
 8012c50:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	689b      	ldr	r3, [r3, #8]
 8012c56:	4619      	mov	r1, r3
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f7f9 fdfa 	bl	800c852 <_ZN12SimpleStringC1EPKc>
}
 8012c5e:	6878      	ldr	r0, [r7, #4]
 8012c60:	3708      	adds	r7, #8
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd80      	pop	{r7, pc}

08012c66 <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 8012c66:	b580      	push	{r7, lr}
 8012c68:	b082      	sub	sp, #8
 8012c6a:	af00      	add	r7, sp, #0
 8012c6c:	6078      	str	r0, [r7, #4]
 8012c6e:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	685b      	ldr	r3, [r3, #4]
 8012c74:	4619      	mov	r1, r3
 8012c76:	6878      	ldr	r0, [r7, #4]
 8012c78:	f7f9 fdeb 	bl	800c852 <_ZN12SimpleStringC1EPKc>
}
 8012c7c:	6878      	ldr	r0, [r7, #4]
 8012c7e:	3708      	adds	r7, #8
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd80      	pop	{r7, pc}

08012c84 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b082      	sub	sp, #8
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
 8012c8c:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	33a0      	adds	r3, #160	; 0xa0
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	687a      	ldr	r2, [r7, #4]
 8012c98:	6839      	ldr	r1, [r7, #0]
 8012c9a:	4610      	mov	r0, r2
 8012c9c:	4798      	blx	r3
    formattedName += "(";
 8012c9e:	490e      	ldr	r1, [pc, #56]	; (8012cd8 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f7fa fa1d 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	4619      	mov	r1, r3
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	f7fa fa17 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 8012cb2:	490a      	ldr	r1, [pc, #40]	; (8012cdc <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f7fa fa13 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 8012cba:	683b      	ldr	r3, [r7, #0]
 8012cbc:	689b      	ldr	r3, [r3, #8]
 8012cbe:	4619      	mov	r1, r3
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f7fa fa0d 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 8012cc6:	4906      	ldr	r1, [pc, #24]	; (8012ce0 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 8012cc8:	6878      	ldr	r0, [r7, #4]
 8012cca:	f7fa fa09 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 8012cce:	bf00      	nop
}
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	3708      	adds	r7, #8
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}
 8012cd8:	08024c98 	.word	0x08024c98
 8012cdc:	08024c9c 	.word	0x08024c9c
 8012ce0:	08024ca0 	.word	0x08024ca0

08012ce4 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8012ce4:	b480      	push	{r7}
 8012ce6:	b083      	sub	sp, #12
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	7e5b      	ldrb	r3, [r3, #25]
}
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	370c      	adds	r7, #12
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfa:	4770      	bx	lr

08012cfc <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b082      	sub	sp, #8
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f001 f96d 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	681a      	ldr	r2, [r3, #0]
 8012d0e:	3228      	adds	r2, #40	; 0x28
 8012d10:	6812      	ldr	r2, [r2, #0]
 8012d12:	4618      	mov	r0, r3
 8012d14:	4790      	blx	r2
}
 8012d16:	bf00      	nop
 8012d18:	3708      	adds	r7, #8
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}

08012d1e <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 8012d1e:	b480      	push	{r7}
 8012d20:	b083      	sub	sp, #12
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	6078      	str	r0, [r7, #4]
    return true;
 8012d26:	2301      	movs	r3, #1
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	370c      	adds	r7, #12
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d32:	4770      	bx	lr

08012d34 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 8012d34:	b480      	push	{r7}
 8012d36:	b083      	sub	sp, #12
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	7e1b      	ldrb	r3, [r3, #24]
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	370c      	adds	r7, #12
 8012d44:	46bd      	mov	sp, r7
 8012d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4a:	4770      	bx	lr

08012d4c <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8012d4c:	b480      	push	{r7}
 8012d4e:	b083      	sub	sp, #12
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	2201      	movs	r2, #1
 8012d58:	761a      	strb	r2, [r3, #24]
}
 8012d5a:	bf00      	nop
 8012d5c:	370c      	adds	r7, #12
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d64:	4770      	bx	lr

08012d66 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 8012d66:	b480      	push	{r7}
 8012d68:	b083      	sub	sp, #12
 8012d6a:	af00      	add	r7, sp, #0
 8012d6c:	6078      	str	r0, [r7, #4]

}
 8012d6e:	bf00      	nop
 8012d70:	370c      	adds	r7, #12
 8012d72:	46bd      	mov	sp, r7
 8012d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d78:	4770      	bx	lr

08012d7a <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 8012d7a:	b480      	push	{r7}
 8012d7c:	b083      	sub	sp, #12
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	6078      	str	r0, [r7, #4]
 8012d82:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	683a      	ldr	r2, [r7, #0]
 8012d88:	60da      	str	r2, [r3, #12]
}
 8012d8a:	bf00      	nop
 8012d8c:	370c      	adds	r7, #12
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d94:	4770      	bx	lr

08012d96 <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 8012d96:	b480      	push	{r7}
 8012d98:	b083      	sub	sp, #12
 8012d9a:	af00      	add	r7, sp, #0
 8012d9c:	6078      	str	r0, [r7, #4]
 8012d9e:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	683a      	ldr	r2, [r7, #0]
 8012da4:	611a      	str	r2, [r3, #16]
}
 8012da6:	bf00      	nop
 8012da8:	370c      	adds	r7, #12
 8012daa:	46bd      	mov	sp, r7
 8012dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db0:	4770      	bx	lr

08012db2 <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 8012db2:	b480      	push	{r7}
 8012db4:	b083      	sub	sp, #12
 8012db6:	af00      	add	r7, sp, #0
 8012db8:	6078      	str	r0, [r7, #4]
 8012dba:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	683a      	ldr	r2, [r7, #0]
 8012dc0:	605a      	str	r2, [r3, #4]
}
 8012dc2:	bf00      	nop
 8012dc4:	370c      	adds	r7, #12
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dcc:	4770      	bx	lr

08012dce <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 8012dce:	b480      	push	{r7}
 8012dd0:	b083      	sub	sp, #12
 8012dd2:	af00      	add	r7, sp, #0
 8012dd4:	6078      	str	r0, [r7, #4]
 8012dd6:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	683a      	ldr	r2, [r7, #0]
 8012ddc:	609a      	str	r2, [r3, #8]
}
 8012dde:	bf00      	nop
 8012de0:	370c      	adds	r7, #12
 8012de2:	46bd      	mov	sp, r7
 8012de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de8:	4770      	bx	lr

08012dea <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8012dea:	b580      	push	{r7, lr}
 8012dec:	b082      	sub	sp, #8
 8012dee:	af00      	add	r7, sp, #0
 8012df0:	6078      	str	r0, [r7, #4]
 8012df2:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	68db      	ldr	r3, [r3, #12]
 8012df8:	4619      	mov	r1, r3
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f7f9 fd29 	bl	800c852 <_ZN12SimpleStringC1EPKc>
}
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	3708      	adds	r7, #8
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}

08012e08 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8012e08:	b480      	push	{r7}
 8012e0a:	b083      	sub	sp, #12
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	691b      	ldr	r3, [r3, #16]
}
 8012e14:	4618      	mov	r0, r3
 8012e16:	370c      	adds	r7, #12
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1e:	4770      	bx	lr

08012e20 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 8012e20:	b590      	push	{r4, r7, lr}
 8012e22:	b087      	sub	sp, #28
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	60f8      	str	r0, [r7, #12]
 8012e28:	60b9      	str	r1, [r7, #8]
 8012e2a:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d101      	bne.n	8012e36 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 8012e32:	2301      	movs	r3, #1
 8012e34:	e01f      	b.n	8012e76 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d01b      	beq.n	8012e74 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8012e3c:	f107 0310 	add.w	r3, r7, #16
 8012e40:	68b9      	ldr	r1, [r7, #8]
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7f9 fd05 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8012e48:	f107 0310 	add.w	r3, r7, #16
 8012e4c:	4619      	mov	r1, r3
 8012e4e:	6878      	ldr	r0, [r7, #4]
 8012e50:	f00c fb91 	bl	801f576 <_ZNK10TestFilter5matchERK12SimpleString>
 8012e54:	4603      	mov	r3, r0
 8012e56:	461c      	mov	r4, r3
 8012e58:	f107 0310 	add.w	r3, r7, #16
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f7fa f8b0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8012e62:	2c00      	cmp	r4, #0
 8012e64:	d001      	beq.n	8012e6a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 8012e66:	2301      	movs	r3, #1
 8012e68:	e005      	b.n	8012e76 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f00c fb5d 	bl	801f52a <_ZNK10TestFilter7getNextEv>
 8012e70:	6078      	str	r0, [r7, #4]
 8012e72:	e7e0      	b.n	8012e36 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 8012e74:	2300      	movs	r3, #0
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	371c      	adds	r7, #28
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd90      	pop	{r4, r7, pc}

08012e7e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 8012e7e:	b580      	push	{r7, lr}
 8012e80:	b084      	sub	sp, #16
 8012e82:	af00      	add	r7, sp, #0
 8012e84:	60f8      	str	r0, [r7, #12]
 8012e86:	60b9      	str	r1, [r7, #8]
 8012e88:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	685b      	ldr	r3, [r3, #4]
 8012e8e:	68ba      	ldr	r2, [r7, #8]
 8012e90:	4619      	mov	r1, r3
 8012e92:	68f8      	ldr	r0, [r7, #12]
 8012e94:	f7ff ffc4 	bl	8012e20 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d00b      	beq.n	8012eb6 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	689b      	ldr	r3, [r3, #8]
 8012ea2:	687a      	ldr	r2, [r7, #4]
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	68f8      	ldr	r0, [r7, #12]
 8012ea8:	f7ff ffba 	bl	8012e20 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8012eac:	4603      	mov	r3, r0
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d001      	beq.n	8012eb6 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8012eb2:	2301      	movs	r3, #1
 8012eb4:	e000      	b.n	8012eb8 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 8012eb6:	2300      	movs	r3, #0
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3710      	adds	r7, #16
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd80      	pop	{r7, pc}

08012ec0 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 8012ec0:	b590      	push	{r4, r7, lr}
 8012ec2:	b083      	sub	sp, #12
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	339c      	adds	r3, #156	; 0x9c
 8012ed0:	681c      	ldr	r4, [r3, #0]
 8012ed2:	f001 f8b1 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	461a      	mov	r2, r3
 8012eda:	6839      	ldr	r1, [r7, #0]
 8012edc:	6878      	ldr	r0, [r7, #4]
 8012ede:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8012ee0:	bf00      	nop
 8012ee2:	370c      	adds	r7, #12
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd90      	pop	{r4, r7, pc}

08012ee8 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b084      	sub	sp, #16
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	60f8      	str	r0, [r7, #12]
 8012ef0:	60b9      	str	r1, [r7, #8]
 8012ef2:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	2201      	movs	r2, #1
 8012ef8:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8012efa:	68f8      	ldr	r0, [r7, #12]
 8012efc:	f001 f872 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8012f00:	4603      	mov	r3, r0
 8012f02:	681a      	ldr	r2, [r3, #0]
 8012f04:	3234      	adds	r2, #52	; 0x34
 8012f06:	6812      	ldr	r2, [r2, #0]
 8012f08:	68b9      	ldr	r1, [r7, #8]
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	4790      	blx	r2
    terminator.exitCurrentTest();
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8012f18:	bf00      	nop
 8012f1a:	3710      	adds	r7, #16
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}

08012f20 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b082      	sub	sp, #8
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	6838      	ldr	r0, [r7, #0]
 8012f32:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8012f34:	bf00      	nop
 8012f36:	3708      	adds	r7, #8
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}

08012f3c <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012f3c:	b590      	push	{r4, r7, lr}
 8012f3e:	b09d      	sub	sp, #116	; 0x74
 8012f40:	af04      	add	r7, sp, #16
 8012f42:	60f8      	str	r0, [r7, #12]
 8012f44:	607a      	str	r2, [r7, #4]
 8012f46:	603b      	str	r3, [r7, #0]
 8012f48:	460b      	mov	r3, r1
 8012f4a:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8012f4c:	68f8      	ldr	r0, [r7, #12]
 8012f4e:	f001 f849 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8012f52:	4603      	mov	r3, r0
 8012f54:	681a      	ldr	r2, [r3, #0]
 8012f56:	3228      	adds	r2, #40	; 0x28
 8012f58:	6812      	ldr	r2, [r2, #0]
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	4790      	blx	r2
    if (!condition)
 8012f5e:	7afb      	ldrb	r3, [r7, #11]
 8012f60:	f083 0301 	eor.w	r3, r3, #1
 8012f64:	b2db      	uxtb	r3, r3
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d03f      	beq.n	8012fea <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	339c      	adds	r3, #156	; 0x9c
 8012f70:	681c      	ldr	r4, [r3, #0]
 8012f72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012f76:	6879      	ldr	r1, [r7, #4]
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7f9 fc6a 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8012f7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012f82:	6839      	ldr	r1, [r7, #0]
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7f9 fc64 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8012f8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012f8e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7f9 fc5e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8012f96:	f107 0014 	add.w	r0, r7, #20
 8012f9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012f9e:	9302      	str	r3, [sp, #8]
 8012fa0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012fa4:	9301      	str	r3, [sp, #4]
 8012fa6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012faa:	9300      	str	r3, [sp, #0]
 8012fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012fae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012fb0:	68f9      	ldr	r1, [r7, #12]
 8012fb2:	f7fb ff6b 	bl	800ee8c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8012fb6:	f107 0314 	add.w	r3, r7, #20
 8012fba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012fbc:	4619      	mov	r1, r3
 8012fbe:	68f8      	ldr	r0, [r7, #12]
 8012fc0:	47a0      	blx	r4
 8012fc2:	f107 0314 	add.w	r3, r7, #20
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f7fc fdce 	bl	800fb68 <_ZN12CheckFailureD1Ev>
 8012fcc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f7f9 fff6 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8012fd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7f9 fff1 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8012fe0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7f9 ffec 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8012fea:	bf00      	nop
 8012fec:	3764      	adds	r7, #100	; 0x64
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd90      	pop	{r4, r7, pc}

08012ff2 <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012ff2:	b590      	push	{r4, r7, lr}
 8012ff4:	b097      	sub	sp, #92	; 0x5c
 8012ff6:	af02      	add	r7, sp, #8
 8012ff8:	60f8      	str	r0, [r7, #12]
 8012ffa:	60b9      	str	r1, [r7, #8]
 8012ffc:	607a      	str	r2, [r7, #4]
 8012ffe:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013000:	68f8      	ldr	r0, [r7, #12]
 8013002:	f000 ffef 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8013006:	4603      	mov	r3, r0
 8013008:	681a      	ldr	r2, [r3, #0]
 801300a:	3228      	adds	r2, #40	; 0x28
 801300c:	6812      	ldr	r2, [r2, #0]
 801300e:	4618      	mov	r0, r3
 8013010:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	339c      	adds	r3, #156	; 0x9c
 8013018:	681c      	ldr	r4, [r3, #0]
 801301a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801301e:	68b9      	ldr	r1, [r7, #8]
 8013020:	4618      	mov	r0, r3
 8013022:	f7f9 fc16 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013026:	f107 0014 	add.w	r0, r7, #20
 801302a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801302e:	9300      	str	r3, [sp, #0]
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	687a      	ldr	r2, [r7, #4]
 8013034:	68f9      	ldr	r1, [r7, #12]
 8013036:	f7fb ff71 	bl	800ef1c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 801303a:	f107 0314 	add.w	r3, r7, #20
 801303e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013040:	4619      	mov	r1, r3
 8013042:	68f8      	ldr	r0, [r7, #12]
 8013044:	47a0      	blx	r4
 8013046:	f107 0314 	add.w	r3, r7, #20
 801304a:	4618      	mov	r0, r3
 801304c:	f7f7 fc16 	bl	800a87c <_ZN11FailFailureD1Ev>
 8013050:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013054:	4618      	mov	r0, r3
 8013056:	f7f9 ffb4 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 801305a:	bf00      	nop
 801305c:	3754      	adds	r7, #84	; 0x54
 801305e:	46bd      	mov	sp, r7
 8013060:	bd90      	pop	{r4, r7, pc}

08013062 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013062:	b590      	push	{r4, r7, lr}
 8013064:	b0a7      	sub	sp, #156	; 0x9c
 8013066:	af04      	add	r7, sp, #16
 8013068:	60f8      	str	r0, [r7, #12]
 801306a:	60b9      	str	r1, [r7, #8]
 801306c:	607a      	str	r2, [r7, #4]
 801306e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013070:	68f8      	ldr	r0, [r7, #12]
 8013072:	f000 ffb7 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8013076:	4603      	mov	r3, r0
 8013078:	681a      	ldr	r2, [r3, #0]
 801307a:	3228      	adds	r2, #40	; 0x28
 801307c:	6812      	ldr	r2, [r2, #0]
 801307e:	4618      	mov	r0, r3
 8013080:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d102      	bne.n	801308e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 8013088:	68bb      	ldr	r3, [r7, #8]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d068      	beq.n	8013160 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d002      	beq.n	801309a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d12a      	bne.n	80130f0 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	339c      	adds	r3, #156	; 0x9c
 80130a0:	681c      	ldr	r4, [r3, #0]
 80130a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80130a6:	6839      	ldr	r1, [r7, #0]
 80130a8:	4618      	mov	r0, r3
 80130aa:	f7f9 fbd2 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80130ae:	f107 0010 	add.w	r0, r7, #16
 80130b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80130b6:	9302      	str	r3, [sp, #8]
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	9301      	str	r3, [sp, #4]
 80130bc:	68bb      	ldr	r3, [r7, #8]
 80130be:	9300      	str	r3, [sp, #0]
 80130c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80130c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80130c8:	68f9      	ldr	r1, [r7, #12]
 80130ca:	f7fc f9ad 	bl	800f428 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80130ce:	f107 0310 	add.w	r3, r7, #16
 80130d2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80130d6:	4619      	mov	r1, r3
 80130d8:	68f8      	ldr	r0, [r7, #12]
 80130da:	47a0      	blx	r4
 80130dc:	f107 0310 	add.w	r3, r7, #16
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7fc fcb9 	bl	800fa58 <_ZN18StringEqualFailureD1Ev>
 80130e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7f9 ff69 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 80130f0:	6879      	ldr	r1, [r7, #4]
 80130f2:	68b8      	ldr	r0, [r7, #8]
 80130f4:	f7f9 f9ea 	bl	800c4cc <_ZN12SimpleString6StrCmpEPKcS1_>
 80130f8:	4603      	mov	r3, r0
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	bf14      	ite	ne
 80130fe:	2301      	movne	r3, #1
 8013100:	2300      	moveq	r3, #0
 8013102:	b2db      	uxtb	r3, r3
 8013104:	2b00      	cmp	r3, #0
 8013106:	d02c      	beq.n	8013162 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	339c      	adds	r3, #156	; 0x9c
 801310e:	681c      	ldr	r4, [r3, #0]
 8013110:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013114:	6839      	ldr	r1, [r7, #0]
 8013116:	4618      	mov	r0, r3
 8013118:	f7f9 fb9b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801311c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8013120:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013124:	9302      	str	r3, [sp, #8]
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	9301      	str	r3, [sp, #4]
 801312a:	68bb      	ldr	r3, [r7, #8]
 801312c:	9300      	str	r3, [sp, #0]
 801312e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013132:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013136:	68f9      	ldr	r1, [r7, #12]
 8013138:	f7fc f976 	bl	800f428 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801313c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013140:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8013144:	4619      	mov	r1, r3
 8013146:	68f8      	ldr	r0, [r7, #12]
 8013148:	47a0      	blx	r4
 801314a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801314e:	4618      	mov	r0, r3
 8013150:	f7fc fc82 	bl	800fa58 <_ZN18StringEqualFailureD1Ev>
 8013154:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013158:	4618      	mov	r0, r3
 801315a:	f7f9 ff32 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801315e:	e000      	b.n	8013162 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013160:	bf00      	nop
}
 8013162:	378c      	adds	r7, #140	; 0x8c
 8013164:	46bd      	mov	sp, r7
 8013166:	bd90      	pop	{r4, r7, pc}

08013168 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013168:	b590      	push	{r4, r7, lr}
 801316a:	b0a7      	sub	sp, #156	; 0x9c
 801316c:	af04      	add	r7, sp, #16
 801316e:	60f8      	str	r0, [r7, #12]
 8013170:	60b9      	str	r1, [r7, #8]
 8013172:	607a      	str	r2, [r7, #4]
 8013174:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013176:	68f8      	ldr	r0, [r7, #12]
 8013178:	f000 ff34 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 801317c:	4603      	mov	r3, r0
 801317e:	681a      	ldr	r2, [r3, #0]
 8013180:	3228      	adds	r2, #40	; 0x28
 8013182:	6812      	ldr	r2, [r2, #0]
 8013184:	4618      	mov	r0, r3
 8013186:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d102      	bne.n	8013194 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d06b      	beq.n	801326c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d002      	beq.n	80131a0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d12b      	bne.n	80131f8 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	339c      	adds	r3, #156	; 0x9c
 80131a6:	681c      	ldr	r4, [r3, #0]
 80131a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80131ac:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7f9 fb4e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80131b6:	f107 0010 	add.w	r0, r7, #16
 80131ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80131be:	9302      	str	r3, [sp, #8]
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	9301      	str	r3, [sp, #4]
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	9300      	str	r3, [sp, #0]
 80131c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80131cc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80131d0:	68f9      	ldr	r1, [r7, #12]
 80131d2:	f7fc f929 	bl	800f428 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80131d6:	f107 0310 	add.w	r3, r7, #16
 80131da:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80131de:	4619      	mov	r1, r3
 80131e0:	68f8      	ldr	r0, [r7, #12]
 80131e2:	47a0      	blx	r4
 80131e4:	f107 0310 	add.w	r3, r7, #16
 80131e8:	4618      	mov	r0, r3
 80131ea:	f7fc fc35 	bl	800fa58 <_ZN18StringEqualFailureD1Ev>
 80131ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80131f2:	4618      	mov	r0, r3
 80131f4:	f7f9 fee5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 80131f8:	683a      	ldr	r2, [r7, #0]
 80131fa:	6879      	ldr	r1, [r7, #4]
 80131fc:	68b8      	ldr	r0, [r7, #8]
 80131fe:	f7f9 f9a4 	bl	800c54a <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8013202:	4603      	mov	r3, r0
 8013204:	2b00      	cmp	r3, #0
 8013206:	bf14      	ite	ne
 8013208:	2301      	movne	r3, #1
 801320a:	2300      	moveq	r3, #0
 801320c:	b2db      	uxtb	r3, r3
 801320e:	2b00      	cmp	r3, #0
 8013210:	d02d      	beq.n	801326e <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	339c      	adds	r3, #156	; 0x9c
 8013218:	681c      	ldr	r4, [r3, #0]
 801321a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801321e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013222:	4618      	mov	r0, r3
 8013224:	f7f9 fb15 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013228:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801322c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013230:	9302      	str	r3, [sp, #8]
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	9301      	str	r3, [sp, #4]
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	9300      	str	r3, [sp, #0]
 801323a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801323e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013242:	68f9      	ldr	r1, [r7, #12]
 8013244:	f7fc f8f0 	bl	800f428 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013248:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801324c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013250:	4619      	mov	r1, r3
 8013252:	68f8      	ldr	r0, [r7, #12]
 8013254:	47a0      	blx	r4
 8013256:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801325a:	4618      	mov	r0, r3
 801325c:	f7fc fbfc 	bl	800fa58 <_ZN18StringEqualFailureD1Ev>
 8013260:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013264:	4618      	mov	r0, r3
 8013266:	f7f9 feac 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801326a:	e000      	b.n	801326e <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801326c:	bf00      	nop
}
 801326e:	378c      	adds	r7, #140	; 0x8c
 8013270:	46bd      	mov	sp, r7
 8013272:	bd90      	pop	{r4, r7, pc}

08013274 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8013274:	b590      	push	{r4, r7, lr}
 8013276:	b0ab      	sub	sp, #172	; 0xac
 8013278:	af04      	add	r7, sp, #16
 801327a:	60f8      	str	r0, [r7, #12]
 801327c:	60b9      	str	r1, [r7, #8]
 801327e:	607a      	str	r2, [r7, #4]
 8013280:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013282:	68f8      	ldr	r0, [r7, #12]
 8013284:	f000 feae 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8013288:	4603      	mov	r3, r0
 801328a:	681a      	ldr	r2, [r3, #0]
 801328c:	3228      	adds	r2, #40	; 0x28
 801328e:	6812      	ldr	r2, [r2, #0]
 8013290:	4618      	mov	r0, r3
 8013292:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d102      	bne.n	80132a0 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d07c      	beq.n	801339a <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d002      	beq.n	80132ac <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d128      	bne.n	80132fe <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	3398      	adds	r3, #152	; 0x98
 80132b2:	681c      	ldr	r4, [r3, #0]
 80132b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80132b8:	6839      	ldr	r1, [r7, #0]
 80132ba:	4618      	mov	r0, r3
 80132bc:	f7f9 fac9 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80132c0:	f107 0010 	add.w	r0, r7, #16
 80132c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80132c8:	9302      	str	r3, [sp, #8]
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	9301      	str	r3, [sp, #4]
 80132ce:	68bb      	ldr	r3, [r7, #8]
 80132d0:	9300      	str	r3, [sp, #0]
 80132d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80132d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80132da:	68f9      	ldr	r1, [r7, #12]
 80132dc:	f7fc f948 	bl	800f570 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80132e0:	f107 0310 	add.w	r3, r7, #16
 80132e4:	4619      	mov	r1, r3
 80132e6:	68f8      	ldr	r0, [r7, #12]
 80132e8:	47a0      	blx	r4
 80132ea:	f107 0310 	add.w	r3, r7, #16
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7fc fb90 	bl	800fa14 <_ZN24StringEqualNoCaseFailureD1Ev>
 80132f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80132f8:	4618      	mov	r0, r3
 80132fa:	f7f9 fe62 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 80132fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013302:	68b9      	ldr	r1, [r7, #8]
 8013304:	4618      	mov	r0, r3
 8013306:	f7f9 faa4 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801330a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801330e:	6879      	ldr	r1, [r7, #4]
 8013310:	4618      	mov	r0, r3
 8013312:	f7f9 fa9e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013316:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801331a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801331e:	4611      	mov	r1, r2
 8013320:	4618      	mov	r0, r3
 8013322:	f7f9 fe75 	bl	800d010 <_ZNK12SimpleString12equalsNoCaseERKS_>
 8013326:	4603      	mov	r3, r0
 8013328:	f083 0301 	eor.w	r3, r3, #1
 801332c:	b2dc      	uxtb	r4, r3
 801332e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013332:	4618      	mov	r0, r3
 8013334:	f7f9 fe45 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013338:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801333c:	4618      	mov	r0, r3
 801333e:	f7f9 fe40 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013342:	2c00      	cmp	r4, #0
 8013344:	d02a      	beq.n	801339c <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	3398      	adds	r3, #152	; 0x98
 801334c:	681c      	ldr	r4, [r3, #0]
 801334e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013352:	6839      	ldr	r1, [r7, #0]
 8013354:	4618      	mov	r0, r3
 8013356:	f7f9 fa7c 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801335a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 801335e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013362:	9302      	str	r3, [sp, #8]
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	9301      	str	r3, [sp, #4]
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	9300      	str	r3, [sp, #0]
 801336c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013370:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013374:	68f9      	ldr	r1, [r7, #12]
 8013376:	f7fc f8fb 	bl	800f570 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801337a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801337e:	4619      	mov	r1, r3
 8013380:	68f8      	ldr	r0, [r7, #12]
 8013382:	47a0      	blx	r4
 8013384:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013388:	4618      	mov	r0, r3
 801338a:	f7fc fb43 	bl	800fa14 <_ZN24StringEqualNoCaseFailureD1Ev>
 801338e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013392:	4618      	mov	r0, r3
 8013394:	f7f9 fe15 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013398:	e000      	b.n	801339c <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801339a:	bf00      	nop
}
 801339c:	379c      	adds	r7, #156	; 0x9c
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd90      	pop	{r4, r7, pc}

080133a2 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80133a2:	b590      	push	{r4, r7, lr}
 80133a4:	b0b3      	sub	sp, #204	; 0xcc
 80133a6:	af04      	add	r7, sp, #16
 80133a8:	60f8      	str	r0, [r7, #12]
 80133aa:	60b9      	str	r1, [r7, #8]
 80133ac:	607a      	str	r2, [r7, #4]
 80133ae:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80133b0:	68f8      	ldr	r0, [r7, #12]
 80133b2:	f000 fe17 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 80133b6:	4603      	mov	r3, r0
 80133b8:	681a      	ldr	r2, [r3, #0]
 80133ba:	3228      	adds	r2, #40	; 0x28
 80133bc:	6812      	ldr	r2, [r2, #0]
 80133be:	4618      	mov	r0, r3
 80133c0:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d103      	bne.n	80133d0 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	f000 80ad 	beq.w	801352a <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d002      	beq.n	80133dc <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d140      	bne.n	801345e <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	3398      	adds	r3, #152	; 0x98
 80133e2:	681c      	ldr	r4, [r3, #0]
 80133e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80133e8:	68b9      	ldr	r1, [r7, #8]
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7f9 fa31 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80133f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80133f4:	6879      	ldr	r1, [r7, #4]
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7f9 fa2b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80133fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013400:	6839      	ldr	r1, [r7, #0]
 8013402:	4618      	mov	r0, r3
 8013404:	f7f9 fa25 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013408:	f107 0010 	add.w	r0, r7, #16
 801340c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013410:	9302      	str	r3, [sp, #8]
 8013412:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013416:	9301      	str	r3, [sp, #4]
 8013418:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801341c:	9300      	str	r3, [sp, #0]
 801341e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013422:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013426:	68f9      	ldr	r1, [r7, #12]
 8013428:	f7fb fce6 	bl	800edf8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801342c:	f107 0310 	add.w	r3, r7, #16
 8013430:	4619      	mov	r1, r3
 8013432:	68f8      	ldr	r0, [r7, #12]
 8013434:	47a0      	blx	r4
 8013436:	f107 0310 	add.w	r3, r7, #16
 801343a:	4618      	mov	r0, r3
 801343c:	f7fc fbb6 	bl	800fbac <_ZN15ContainsFailureD1Ev>
 8013440:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013444:	4618      	mov	r0, r3
 8013446:	f7f9 fdbc 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801344a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801344e:	4618      	mov	r0, r3
 8013450:	f7f9 fdb7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013454:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013458:	4618      	mov	r0, r3
 801345a:	f7f9 fdb2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 801345e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013462:	6879      	ldr	r1, [r7, #4]
 8013464:	4618      	mov	r0, r3
 8013466:	f7f9 f9f4 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801346a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801346e:	68b9      	ldr	r1, [r7, #8]
 8013470:	4618      	mov	r0, r3
 8013472:	f7f9 f9ee 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013476:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801347a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801347e:	4611      	mov	r1, r2
 8013480:	4618      	mov	r0, r3
 8013482:	f7f9 fa64 	bl	800c94e <_ZNK12SimpleString8containsERKS_>
 8013486:	4603      	mov	r3, r0
 8013488:	f083 0301 	eor.w	r3, r3, #1
 801348c:	b2dc      	uxtb	r4, r3
 801348e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013492:	4618      	mov	r0, r3
 8013494:	f7f9 fd95 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013498:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801349c:	4618      	mov	r0, r3
 801349e:	f7f9 fd90 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80134a2:	2c00      	cmp	r4, #0
 80134a4:	d042      	beq.n	801352c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	3398      	adds	r3, #152	; 0x98
 80134ac:	681c      	ldr	r4, [r3, #0]
 80134ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80134b2:	68b9      	ldr	r1, [r7, #8]
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7f9 f9cc 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80134ba:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80134be:	6879      	ldr	r1, [r7, #4]
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7f9 f9c6 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80134c6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80134ca:	6839      	ldr	r1, [r7, #0]
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7f9 f9c0 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80134d2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80134d6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80134da:	9302      	str	r3, [sp, #8]
 80134dc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80134e0:	9301      	str	r3, [sp, #4]
 80134e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80134e6:	9300      	str	r3, [sp, #0]
 80134e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80134ec:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80134f0:	68f9      	ldr	r1, [r7, #12]
 80134f2:	f7fb fc81 	bl	800edf8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80134f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80134fa:	4619      	mov	r1, r3
 80134fc:	68f8      	ldr	r0, [r7, #12]
 80134fe:	47a0      	blx	r4
 8013500:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013504:	4618      	mov	r0, r3
 8013506:	f7fc fb51 	bl	800fbac <_ZN15ContainsFailureD1Ev>
 801350a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801350e:	4618      	mov	r0, r3
 8013510:	f7f9 fd57 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013514:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013518:	4618      	mov	r0, r3
 801351a:	f7f9 fd52 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801351e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013522:	4618      	mov	r0, r3
 8013524:	f7f9 fd4d 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013528:	e000      	b.n	801352c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801352a:	bf00      	nop
}
 801352c:	37bc      	adds	r7, #188	; 0xbc
 801352e:	46bd      	mov	sp, r7
 8013530:	bd90      	pop	{r4, r7, pc}

08013532 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8013532:	b590      	push	{r4, r7, lr}
 8013534:	b0b3      	sub	sp, #204	; 0xcc
 8013536:	af04      	add	r7, sp, #16
 8013538:	60f8      	str	r0, [r7, #12]
 801353a:	60b9      	str	r1, [r7, #8]
 801353c:	607a      	str	r2, [r7, #4]
 801353e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013540:	68f8      	ldr	r0, [r7, #12]
 8013542:	f000 fd4f 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8013546:	4603      	mov	r3, r0
 8013548:	681a      	ldr	r2, [r3, #0]
 801354a:	3228      	adds	r2, #40	; 0x28
 801354c:	6812      	ldr	r2, [r2, #0]
 801354e:	4618      	mov	r0, r3
 8013550:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d103      	bne.n	8013560 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8013558:	68bb      	ldr	r3, [r7, #8]
 801355a:	2b00      	cmp	r3, #0
 801355c:	f000 80ad 	beq.w	80136ba <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d002      	beq.n	801356c <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d140      	bne.n	80135ee <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	3398      	adds	r3, #152	; 0x98
 8013572:	681c      	ldr	r4, [r3, #0]
 8013574:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013578:	68b9      	ldr	r1, [r7, #8]
 801357a:	4618      	mov	r0, r3
 801357c:	f7f9 f969 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013580:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013584:	6879      	ldr	r1, [r7, #4]
 8013586:	4618      	mov	r0, r3
 8013588:	f7f9 f963 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801358c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013590:	6839      	ldr	r1, [r7, #0]
 8013592:	4618      	mov	r0, r3
 8013594:	f7f9 f95d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013598:	f107 0010 	add.w	r0, r7, #16
 801359c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80135a0:	9302      	str	r3, [sp, #8]
 80135a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80135a6:	9301      	str	r3, [sp, #4]
 80135a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80135ac:	9300      	str	r3, [sp, #0]
 80135ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80135b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80135b6:	68f9      	ldr	r1, [r7, #12]
 80135b8:	f7fb fc1e 	bl	800edf8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80135bc:	f107 0310 	add.w	r3, r7, #16
 80135c0:	4619      	mov	r1, r3
 80135c2:	68f8      	ldr	r0, [r7, #12]
 80135c4:	47a0      	blx	r4
 80135c6:	f107 0310 	add.w	r3, r7, #16
 80135ca:	4618      	mov	r0, r3
 80135cc:	f7fc faee 	bl	800fbac <_ZN15ContainsFailureD1Ev>
 80135d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7f9 fcf4 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80135da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80135de:	4618      	mov	r0, r3
 80135e0:	f7f9 fcef 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80135e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80135e8:	4618      	mov	r0, r3
 80135ea:	f7f9 fcea 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 80135ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80135f2:	6879      	ldr	r1, [r7, #4]
 80135f4:	4618      	mov	r0, r3
 80135f6:	f7f9 f92c 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80135fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80135fe:	68b9      	ldr	r1, [r7, #8]
 8013600:	4618      	mov	r0, r3
 8013602:	f7f9 f926 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013606:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801360a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801360e:	4611      	mov	r1, r2
 8013610:	4618      	mov	r0, r3
 8013612:	f7f9 f9b7 	bl	800c984 <_ZNK12SimpleString14containsNoCaseERKS_>
 8013616:	4603      	mov	r3, r0
 8013618:	f083 0301 	eor.w	r3, r3, #1
 801361c:	b2dc      	uxtb	r4, r3
 801361e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013622:	4618      	mov	r0, r3
 8013624:	f7f9 fccd 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013628:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801362c:	4618      	mov	r0, r3
 801362e:	f7f9 fcc8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013632:	2c00      	cmp	r4, #0
 8013634:	d042      	beq.n	80136bc <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	3398      	adds	r3, #152	; 0x98
 801363c:	681c      	ldr	r4, [r3, #0]
 801363e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013642:	68b9      	ldr	r1, [r7, #8]
 8013644:	4618      	mov	r0, r3
 8013646:	f7f9 f904 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801364a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801364e:	6879      	ldr	r1, [r7, #4]
 8013650:	4618      	mov	r0, r3
 8013652:	f7f9 f8fe 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013656:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801365a:	6839      	ldr	r1, [r7, #0]
 801365c:	4618      	mov	r0, r3
 801365e:	f7f9 f8f8 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013662:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8013666:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801366a:	9302      	str	r3, [sp, #8]
 801366c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013670:	9301      	str	r3, [sp, #4]
 8013672:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013676:	9300      	str	r3, [sp, #0]
 8013678:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801367c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013680:	68f9      	ldr	r1, [r7, #12]
 8013682:	f7fb fbb9 	bl	800edf8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013686:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801368a:	4619      	mov	r1, r3
 801368c:	68f8      	ldr	r0, [r7, #12]
 801368e:	47a0      	blx	r4
 8013690:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013694:	4618      	mov	r0, r3
 8013696:	f7fc fa89 	bl	800fbac <_ZN15ContainsFailureD1Ev>
 801369a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801369e:	4618      	mov	r0, r3
 80136a0:	f7f9 fc8f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80136a4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7f9 fc8a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80136ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7f9 fc85 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80136b8:	e000      	b.n	80136bc <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80136ba:	bf00      	nop
}
 80136bc:	37bc      	adds	r7, #188	; 0xbc
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd90      	pop	{r4, r7, pc}

080136c2 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80136c2:	b590      	push	{r4, r7, lr}
 80136c4:	b099      	sub	sp, #100	; 0x64
 80136c6:	af04      	add	r7, sp, #16
 80136c8:	60f8      	str	r0, [r7, #12]
 80136ca:	60b9      	str	r1, [r7, #8]
 80136cc:	607a      	str	r2, [r7, #4]
 80136ce:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80136d0:	68f8      	ldr	r0, [r7, #12]
 80136d2:	f000 fc87 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 80136d6:	4603      	mov	r3, r0
 80136d8:	681a      	ldr	r2, [r3, #0]
 80136da:	3228      	adds	r2, #40	; 0x28
 80136dc:	6812      	ldr	r2, [r2, #0]
 80136de:	4618      	mov	r0, r3
 80136e0:	4790      	blx	r2
    if (expected != actual)
 80136e2:	68ba      	ldr	r2, [r7, #8]
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	429a      	cmp	r2, r3
 80136e8:	d027      	beq.n	801373a <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	339c      	adds	r3, #156	; 0x9c
 80136f0:	681c      	ldr	r4, [r3, #0]
 80136f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80136f6:	6839      	ldr	r1, [r7, #0]
 80136f8:	4618      	mov	r0, r3
 80136fa:	f7f9 f8aa 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80136fe:	f107 0014 	add.w	r0, r7, #20
 8013702:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013706:	9302      	str	r3, [sp, #8]
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	9301      	str	r3, [sp, #4]
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	9300      	str	r3, [sp, #0]
 8013710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013712:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013714:	68f9      	ldr	r1, [r7, #12]
 8013716:	f7fb fc1f 	bl	800ef58 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 801371a:	f107 0314 	add.w	r3, r7, #20
 801371e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013720:	4619      	mov	r1, r3
 8013722:	68f8      	ldr	r0, [r7, #12]
 8013724:	47a0      	blx	r4
 8013726:	f107 0314 	add.w	r3, r7, #20
 801372a:	4618      	mov	r0, r3
 801372c:	f7fc f9fa 	bl	800fb24 <_ZN17LongsEqualFailureD1Ev>
 8013730:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013734:	4618      	mov	r0, r3
 8013736:	f7f9 fc44 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 801373a:	bf00      	nop
 801373c:	3754      	adds	r7, #84	; 0x54
 801373e:	46bd      	mov	sp, r7
 8013740:	bd90      	pop	{r4, r7, pc}

08013742 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013742:	b590      	push	{r4, r7, lr}
 8013744:	b099      	sub	sp, #100	; 0x64
 8013746:	af04      	add	r7, sp, #16
 8013748:	60f8      	str	r0, [r7, #12]
 801374a:	60b9      	str	r1, [r7, #8]
 801374c:	607a      	str	r2, [r7, #4]
 801374e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013750:	68f8      	ldr	r0, [r7, #12]
 8013752:	f000 fc47 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8013756:	4603      	mov	r3, r0
 8013758:	681a      	ldr	r2, [r3, #0]
 801375a:	3228      	adds	r2, #40	; 0x28
 801375c:	6812      	ldr	r2, [r2, #0]
 801375e:	4618      	mov	r0, r3
 8013760:	4790      	blx	r2
    if (expected != actual)
 8013762:	68ba      	ldr	r2, [r7, #8]
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	429a      	cmp	r2, r3
 8013768:	d027      	beq.n	80137ba <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	339c      	adds	r3, #156	; 0x9c
 8013770:	681c      	ldr	r4, [r3, #0]
 8013772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013776:	6839      	ldr	r1, [r7, #0]
 8013778:	4618      	mov	r0, r3
 801377a:	f7f9 f86a 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801377e:	f107 0014 	add.w	r0, r7, #20
 8013782:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013786:	9302      	str	r3, [sp, #8]
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	9301      	str	r3, [sp, #4]
 801378c:	68bb      	ldr	r3, [r7, #8]
 801378e:	9300      	str	r3, [sp, #0]
 8013790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013792:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013794:	68f9      	ldr	r1, [r7, #12]
 8013796:	f7fb fcab 	bl	800f0f0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 801379a:	f107 0314 	add.w	r3, r7, #20
 801379e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80137a0:	4619      	mov	r1, r3
 80137a2:	68f8      	ldr	r0, [r7, #12]
 80137a4:	47a0      	blx	r4
 80137a6:	f107 0314 	add.w	r3, r7, #20
 80137aa:	4618      	mov	r0, r3
 80137ac:	f7fc f998 	bl	800fae0 <_ZN25UnsignedLongsEqualFailureD1Ev>
 80137b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7f9 fc04 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 80137ba:	bf00      	nop
 80137bc:	3754      	adds	r7, #84	; 0x54
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd90      	pop	{r4, r7, pc}
	...

080137c4 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80137c4:	b082      	sub	sp, #8
 80137c6:	b590      	push	{r4, r7, lr}
 80137c8:	b099      	sub	sp, #100	; 0x64
 80137ca:	af02      	add	r7, sp, #8
 80137cc:	60f8      	str	r0, [r7, #12]
 80137ce:	1d38      	adds	r0, r7, #4
 80137d0:	e880 0006 	stmia.w	r0, {r1, r2}
 80137d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 80137d6:	68f8      	ldr	r0, [r7, #12]
 80137d8:	f000 fc04 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 80137dc:	4603      	mov	r3, r0
 80137de:	681a      	ldr	r2, [r3, #0]
 80137e0:	3228      	adds	r2, #40	; 0x28
 80137e2:	6812      	ldr	r2, [r2, #0]
 80137e4:	4618      	mov	r0, r3
 80137e6:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	339c      	adds	r3, #156	; 0x9c
 80137ee:	681c      	ldr	r4, [r3, #0]
 80137f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80137f4:	4919      	ldr	r1, [pc, #100]	; (801385c <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 80137f6:	4618      	mov	r0, r3
 80137f8:	f7f9 f82b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80137fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013800:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013802:	4618      	mov	r0, r3
 8013804:	f7f9 f825 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013808:	f107 0014 	add.w	r0, r7, #20
 801380c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013810:	9301      	str	r3, [sp, #4]
 8013812:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013816:	9300      	str	r3, [sp, #0]
 8013818:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801381a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801381c:	68f9      	ldr	r1, [r7, #12]
 801381e:	f7fc f84d 	bl	800f8bc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8013822:	f107 0314 	add.w	r3, r7, #20
 8013826:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801382a:	4619      	mov	r1, r3
 801382c:	68f8      	ldr	r0, [r7, #12]
 801382e:	47a0      	blx	r4
 8013830:	f107 0314 	add.w	r3, r7, #20
 8013834:	4618      	mov	r0, r3
 8013836:	f7fc f887 	bl	800f948 <_ZN25FeatureUnsupportedFailureD1Ev>
 801383a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801383e:	4618      	mov	r0, r3
 8013840:	f7f9 fbbf 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013844:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013848:	4618      	mov	r0, r3
 801384a:	f7f9 fbba 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
#endif
}
 801384e:	bf00      	nop
 8013850:	375c      	adds	r7, #92	; 0x5c
 8013852:	46bd      	mov	sp, r7
 8013854:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8013858:	b002      	add	sp, #8
 801385a:	4770      	bx	lr
 801385c:	08024ca4 	.word	0x08024ca4

08013860 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013860:	b082      	sub	sp, #8
 8013862:	b590      	push	{r4, r7, lr}
 8013864:	b099      	sub	sp, #100	; 0x64
 8013866:	af02      	add	r7, sp, #8
 8013868:	60f8      	str	r0, [r7, #12]
 801386a:	1d38      	adds	r0, r7, #4
 801386c:	e880 0006 	stmia.w	r0, {r1, r2}
 8013870:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8013872:	68f8      	ldr	r0, [r7, #12]
 8013874:	f000 fbb6 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8013878:	4603      	mov	r3, r0
 801387a:	681a      	ldr	r2, [r3, #0]
 801387c:	3228      	adds	r2, #40	; 0x28
 801387e:	6812      	ldr	r2, [r2, #0]
 8013880:	4618      	mov	r0, r3
 8013882:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	339c      	adds	r3, #156	; 0x9c
 801388a:	681c      	ldr	r4, [r3, #0]
 801388c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013890:	4919      	ldr	r1, [pc, #100]	; (80138f8 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 8013892:	4618      	mov	r0, r3
 8013894:	f7f8 ffdd 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013898:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801389c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801389e:	4618      	mov	r0, r3
 80138a0:	f7f8 ffd7 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80138a4:	f107 0014 	add.w	r0, r7, #20
 80138a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80138ac:	9301      	str	r3, [sp, #4]
 80138ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80138b2:	9300      	str	r3, [sp, #0]
 80138b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80138b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80138b8:	68f9      	ldr	r1, [r7, #12]
 80138ba:	f7fb ffff 	bl	800f8bc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 80138be:	f107 0314 	add.w	r3, r7, #20
 80138c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80138c6:	4619      	mov	r1, r3
 80138c8:	68f8      	ldr	r0, [r7, #12]
 80138ca:	47a0      	blx	r4
 80138cc:	f107 0314 	add.w	r3, r7, #20
 80138d0:	4618      	mov	r0, r3
 80138d2:	f7fc f839 	bl	800f948 <_ZN25FeatureUnsupportedFailureD1Ev>
 80138d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80138da:	4618      	mov	r0, r3
 80138dc:	f7f9 fb71 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80138e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80138e4:	4618      	mov	r0, r3
 80138e6:	f7f9 fb6c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
#endif
}
 80138ea:	bf00      	nop
 80138ec:	375c      	adds	r7, #92	; 0x5c
 80138ee:	46bd      	mov	sp, r7
 80138f0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80138f4:	b002      	add	sp, #8
 80138f6:	4770      	bx	lr
 80138f8:	08024ca4 	.word	0x08024ca4

080138fc <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80138fc:	b590      	push	{r4, r7, lr}
 80138fe:	b099      	sub	sp, #100	; 0x64
 8013900:	af04      	add	r7, sp, #16
 8013902:	60f8      	str	r0, [r7, #12]
 8013904:	607b      	str	r3, [r7, #4]
 8013906:	460b      	mov	r3, r1
 8013908:	72fb      	strb	r3, [r7, #11]
 801390a:	4613      	mov	r3, r2
 801390c:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 801390e:	68f8      	ldr	r0, [r7, #12]
 8013910:	f000 fb68 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8013914:	4603      	mov	r3, r0
 8013916:	681a      	ldr	r2, [r3, #0]
 8013918:	3228      	adds	r2, #40	; 0x28
 801391a:	6812      	ldr	r2, [r2, #0]
 801391c:	4618      	mov	r0, r3
 801391e:	4790      	blx	r2
    if (expected != actual)
 8013920:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8013924:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8013928:	429a      	cmp	r2, r3
 801392a:	d029      	beq.n	8013980 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	339c      	adds	r3, #156	; 0x9c
 8013932:	681c      	ldr	r4, [r3, #0]
 8013934:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013938:	6879      	ldr	r1, [r7, #4]
 801393a:	4618      	mov	r0, r3
 801393c:	f7f8 ff89 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013940:	f107 0014 	add.w	r0, r7, #20
 8013944:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013948:	9302      	str	r3, [sp, #8]
 801394a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 801394e:	9301      	str	r3, [sp, #4]
 8013950:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013954:	9300      	str	r3, [sp, #0]
 8013956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013958:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801395a:	68f9      	ldr	r1, [r7, #12]
 801395c:	f7fb fc94 	bl	800f288 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 8013960:	f107 0314 	add.w	r3, r7, #20
 8013964:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013966:	4619      	mov	r1, r3
 8013968:	68f8      	ldr	r0, [r7, #12]
 801396a:	47a0      	blx	r4
 801396c:	f107 0314 	add.w	r3, r7, #20
 8013970:	4618      	mov	r0, r3
 8013972:	f7fc f893 	bl	800fa9c <_ZN23SignedBytesEqualFailureD1Ev>
 8013976:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801397a:	4618      	mov	r0, r3
 801397c:	f7f9 fb21 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8013980:	bf00      	nop
 8013982:	3754      	adds	r7, #84	; 0x54
 8013984:	46bd      	mov	sp, r7
 8013986:	bd90      	pop	{r4, r7, pc}

08013988 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013988:	b590      	push	{r4, r7, lr}
 801398a:	b09d      	sub	sp, #116	; 0x74
 801398c:	af04      	add	r7, sp, #16
 801398e:	60f8      	str	r0, [r7, #12]
 8013990:	60b9      	str	r1, [r7, #8]
 8013992:	607a      	str	r2, [r7, #4]
 8013994:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013996:	68f8      	ldr	r0, [r7, #12]
 8013998:	f000 fb24 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 801399c:	4603      	mov	r3, r0
 801399e:	681a      	ldr	r2, [r3, #0]
 80139a0:	3228      	adds	r2, #40	; 0x28
 80139a2:	6812      	ldr	r2, [r2, #0]
 80139a4:	4618      	mov	r0, r3
 80139a6:	4790      	blx	r2
    if (expected != actual)
 80139a8:	68ba      	ldr	r2, [r7, #8]
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	429a      	cmp	r2, r3
 80139ae:	d03f      	beq.n	8013a30 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	339c      	adds	r3, #156	; 0x9c
 80139b6:	681c      	ldr	r4, [r3, #0]
 80139b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139bc:	68b9      	ldr	r1, [r7, #8]
 80139be:	4618      	mov	r0, r3
 80139c0:	f7f9 fdea 	bl	800d598 <_Z10StringFromPKv>
 80139c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80139c8:	6879      	ldr	r1, [r7, #4]
 80139ca:	4618      	mov	r0, r3
 80139cc:	f7f9 fde4 	bl	800d598 <_Z10StringFromPKv>
 80139d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80139d4:	6839      	ldr	r1, [r7, #0]
 80139d6:	4618      	mov	r0, r3
 80139d8:	f7f8 ff3b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80139dc:	f107 0014 	add.w	r0, r7, #20
 80139e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80139e4:	9302      	str	r3, [sp, #8]
 80139e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80139ea:	9301      	str	r3, [sp, #4]
 80139ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139f0:	9300      	str	r3, [sp, #0]
 80139f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80139f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80139f6:	68f9      	ldr	r1, [r7, #12]
 80139f8:	f7fb f814 	bl	800ea24 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80139fc:	f107 0314 	add.w	r3, r7, #20
 8013a00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013a02:	4619      	mov	r1, r3
 8013a04:	68f8      	ldr	r0, [r7, #12]
 8013a06:	47a0      	blx	r4
 8013a08:	f107 0314 	add.w	r3, r7, #20
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f7fc f955 	bl	800fcbc <_ZN13EqualsFailureD1Ev>
 8013a12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013a16:	4618      	mov	r0, r3
 8013a18:	f7f9 fad3 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013a1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7f9 face 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013a26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f7f9 fac9 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8013a30:	bf00      	nop
 8013a32:	3764      	adds	r7, #100	; 0x64
 8013a34:	46bd      	mov	sp, r7
 8013a36:	bd90      	pop	{r4, r7, pc}

08013a38 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013a38:	b590      	push	{r4, r7, lr}
 8013a3a:	b09d      	sub	sp, #116	; 0x74
 8013a3c:	af04      	add	r7, sp, #16
 8013a3e:	60f8      	str	r0, [r7, #12]
 8013a40:	60b9      	str	r1, [r7, #8]
 8013a42:	607a      	str	r2, [r7, #4]
 8013a44:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013a46:	68f8      	ldr	r0, [r7, #12]
 8013a48:	f000 facc 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	681a      	ldr	r2, [r3, #0]
 8013a50:	3228      	adds	r2, #40	; 0x28
 8013a52:	6812      	ldr	r2, [r2, #0]
 8013a54:	4618      	mov	r0, r3
 8013a56:	4790      	blx	r2
    if (expected != actual)
 8013a58:	68ba      	ldr	r2, [r7, #8]
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	429a      	cmp	r2, r3
 8013a5e:	d03f      	beq.n	8013ae0 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	339c      	adds	r3, #156	; 0x9c
 8013a66:	681c      	ldr	r4, [r3, #0]
 8013a68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a6c:	68b9      	ldr	r1, [r7, #8]
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f7f9 fdbc 	bl	800d5ec <_Z10StringFromPFvvE>
 8013a74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a78:	6879      	ldr	r1, [r7, #4]
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f7f9 fdb6 	bl	800d5ec <_Z10StringFromPFvvE>
 8013a80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013a84:	6839      	ldr	r1, [r7, #0]
 8013a86:	4618      	mov	r0, r3
 8013a88:	f7f8 fee3 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013a8c:	f107 0014 	add.w	r0, r7, #20
 8013a90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013a94:	9302      	str	r3, [sp, #8]
 8013a96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a9a:	9301      	str	r3, [sp, #4]
 8013a9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013aa0:	9300      	str	r3, [sp, #0]
 8013aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013aa4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013aa6:	68f9      	ldr	r1, [r7, #12]
 8013aa8:	f7fa ffbc 	bl	800ea24 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013aac:	f107 0314 	add.w	r3, r7, #20
 8013ab0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013ab2:	4619      	mov	r1, r3
 8013ab4:	68f8      	ldr	r0, [r7, #12]
 8013ab6:	47a0      	blx	r4
 8013ab8:	f107 0314 	add.w	r3, r7, #20
 8013abc:	4618      	mov	r0, r3
 8013abe:	f7fc f8fd 	bl	800fcbc <_ZN13EqualsFailureD1Ev>
 8013ac2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7f9 fa7b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013acc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7f9 fa76 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013ad6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7f9 fa71 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8013ae0:	bf00      	nop
 8013ae2:	3764      	adds	r7, #100	; 0x64
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	bd90      	pop	{r4, r7, pc}

08013ae8 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013ae8:	b590      	push	{r4, r7, lr}
 8013aea:	b09d      	sub	sp, #116	; 0x74
 8013aec:	af02      	add	r7, sp, #8
 8013aee:	6278      	str	r0, [r7, #36]	; 0x24
 8013af0:	ed87 0b06 	vstr	d0, [r7, #24]
 8013af4:	ed87 1b04 	vstr	d1, [r7, #16]
 8013af8:	ed87 2b02 	vstr	d2, [r7, #8]
 8013afc:	6239      	str	r1, [r7, #32]
 8013afe:	607a      	str	r2, [r7, #4]
 8013b00:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013b02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b04:	f000 fa6e 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	681a      	ldr	r2, [r3, #0]
 8013b0c:	3228      	adds	r2, #40	; 0x28
 8013b0e:	6812      	ldr	r2, [r2, #0]
 8013b10:	4618      	mov	r0, r3
 8013b12:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8013b14:	ed97 2b02 	vldr	d2, [r7, #8]
 8013b18:	ed97 1b04 	vldr	d1, [r7, #16]
 8013b1c:	ed97 0b06 	vldr	d0, [r7, #24]
 8013b20:	f7fe fd4a 	bl	80125b8 <_Z13doubles_equalddd>
 8013b24:	4603      	mov	r3, r0
 8013b26:	f083 0301 	eor.w	r3, r3, #1
 8013b2a:	b2db      	uxtb	r3, r3
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d029      	beq.n	8013b84 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8013b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	339c      	adds	r3, #156	; 0x9c
 8013b36:	681c      	ldr	r4, [r3, #0]
 8013b38:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013b3c:	6a39      	ldr	r1, [r7, #32]
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7f8 fe87 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013b44:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8013b48:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013b4c:	9300      	str	r3, [sp, #0]
 8013b4e:	ed97 2b02 	vldr	d2, [r7, #8]
 8013b52:	ed97 1b04 	vldr	d1, [r7, #16]
 8013b56:	ed97 0b06 	vldr	d0, [r7, #24]
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	687a      	ldr	r2, [r7, #4]
 8013b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b60:	f7fa ffa2 	bl	800eaa8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 8013b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b6e:	47a0      	blx	r4
 8013b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b74:	4618      	mov	r0, r3
 8013b76:	f7fc f87f 	bl	800fc78 <_ZN19DoublesEqualFailureD1Ev>
 8013b7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7f9 fa1f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8013b84:	bf00      	nop
 8013b86:	376c      	adds	r7, #108	; 0x6c
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd90      	pop	{r4, r7, pc}

08013b8c <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013b8c:	b590      	push	{r4, r7, lr}
 8013b8e:	b0a7      	sub	sp, #156	; 0x9c
 8013b90:	af04      	add	r7, sp, #16
 8013b92:	60f8      	str	r0, [r7, #12]
 8013b94:	60b9      	str	r1, [r7, #8]
 8013b96:	607a      	str	r2, [r7, #4]
 8013b98:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013b9a:	68f8      	ldr	r0, [r7, #12]
 8013b9c:	f000 fa22 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	681a      	ldr	r2, [r3, #0]
 8013ba4:	3228      	adds	r2, #40	; 0x28
 8013ba6:	6812      	ldr	r2, [r2, #0]
 8013ba8:	4618      	mov	r0, r3
 8013baa:	4790      	blx	r2
	if (length == 0) return;
 8013bac:	683b      	ldr	r3, [r7, #0]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d075      	beq.n	8013c9e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d102      	bne.n	8013bbe <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 8013bb8:	68bb      	ldr	r3, [r7, #8]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d071      	beq.n	8013ca2 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d002      	beq.n	8013bca <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 8013bc4:	68bb      	ldr	r3, [r7, #8]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d12d      	bne.n	8013c26 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	339c      	adds	r3, #156	; 0x9c
 8013bd0:	681c      	ldr	r4, [r3, #0]
 8013bd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013bd6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f7f8 fe39 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013be0:	f107 0010 	add.w	r0, r7, #16
 8013be4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013be8:	9303      	str	r3, [sp, #12]
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	9302      	str	r3, [sp, #8]
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	9301      	str	r3, [sp, #4]
 8013bf2:	68bb      	ldr	r3, [r7, #8]
 8013bf4:	9300      	str	r3, [sp, #0]
 8013bf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013bfa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013bfe:	68f9      	ldr	r1, [r7, #12]
 8013c00:	f7fb fd70 	bl	800f6e4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8013c04:	f107 0310 	add.w	r3, r7, #16
 8013c08:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013c0c:	4619      	mov	r1, r3
 8013c0e:	68f8      	ldr	r0, [r7, #12]
 8013c10:	47a0      	blx	r4
 8013c12:	f107 0310 	add.w	r3, r7, #16
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7fb feda 	bl	800f9d0 <_ZN18BinaryEqualFailureD1Ev>
 8013c1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7f9 f9ce 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 8013c26:	683a      	ldr	r2, [r7, #0]
 8013c28:	6879      	ldr	r1, [r7, #4]
 8013c2a:	68b8      	ldr	r0, [r7, #8]
 8013c2c:	f7f8 fd30 	bl	800c690 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8013c30:	4603      	mov	r3, r0
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	bf14      	ite	ne
 8013c36:	2301      	movne	r3, #1
 8013c38:	2300      	moveq	r3, #0
 8013c3a:	b2db      	uxtb	r3, r3
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d031      	beq.n	8013ca4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	339c      	adds	r3, #156	; 0x9c
 8013c46:	681c      	ldr	r4, [r3, #0]
 8013c48:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013c4c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7f8 fdfe 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013c56:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8013c5a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013c5e:	9303      	str	r3, [sp, #12]
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	9302      	str	r3, [sp, #8]
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	9301      	str	r3, [sp, #4]
 8013c68:	68bb      	ldr	r3, [r7, #8]
 8013c6a:	9300      	str	r3, [sp, #0]
 8013c6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013c70:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013c74:	68f9      	ldr	r1, [r7, #12]
 8013c76:	f7fb fd35 	bl	800f6e4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8013c7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013c7e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013c82:	4619      	mov	r1, r3
 8013c84:	68f8      	ldr	r0, [r7, #12]
 8013c86:	47a0      	blx	r4
 8013c88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f7fb fe9f 	bl	800f9d0 <_ZN18BinaryEqualFailureD1Ev>
 8013c92:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7f9 f993 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013c9c:	e002      	b.n	8013ca4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 8013c9e:	bf00      	nop
 8013ca0:	e000      	b.n	8013ca4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013ca2:	bf00      	nop
}
 8013ca4:	378c      	adds	r7, #140	; 0x8c
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd90      	pop	{r4, r7, pc}

08013caa <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013caa:	b590      	push	{r4, r7, lr}
 8013cac:	b09b      	sub	sp, #108	; 0x6c
 8013cae:	af06      	add	r7, sp, #24
 8013cb0:	60f8      	str	r0, [r7, #12]
 8013cb2:	60b9      	str	r1, [r7, #8]
 8013cb4:	607a      	str	r2, [r7, #4]
 8013cb6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013cb8:	68f8      	ldr	r0, [r7, #12]
 8013cba:	f000 f993 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	681a      	ldr	r2, [r3, #0]
 8013cc2:	3228      	adds	r2, #40	; 0x28
 8013cc4:	6812      	ldr	r2, [r2, #0]
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 8013cca:	68ba      	ldr	r2, [r7, #8]
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	405a      	eors	r2, r3
 8013cd0:	683b      	ldr	r3, [r7, #0]
 8013cd2:	4013      	ands	r3, r2
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d02b      	beq.n	8013d30 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	339c      	adds	r3, #156	; 0x9c
 8013cde:	681c      	ldr	r4, [r3, #0]
 8013ce0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ce4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f7f8 fdb3 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013cec:	f107 0014 	add.w	r0, r7, #20
 8013cf0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013cf4:	9304      	str	r3, [sp, #16]
 8013cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013cf8:	9303      	str	r3, [sp, #12]
 8013cfa:	683b      	ldr	r3, [r7, #0]
 8013cfc:	9302      	str	r3, [sp, #8]
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	9301      	str	r3, [sp, #4]
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	9300      	str	r3, [sp, #0]
 8013d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013d0a:	68f9      	ldr	r1, [r7, #12]
 8013d0c:	f7fb fd7a 	bl	800f804 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 8013d10:	f107 0314 	add.w	r3, r7, #20
 8013d14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013d16:	4619      	mov	r1, r3
 8013d18:	68f8      	ldr	r0, [r7, #12]
 8013d1a:	47a0      	blx	r4
 8013d1c:	f107 0314 	add.w	r3, r7, #20
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7fb fe33 	bl	800f98c <_ZN16BitsEqualFailureD1Ev>
 8013d26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f7f9 f949 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8013d30:	bf00      	nop
 8013d32:	3754      	adds	r7, #84	; 0x54
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd90      	pop	{r4, r7, pc}

08013d38 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8013d38:	b590      	push	{r4, r7, lr}
 8013d3a:	b09d      	sub	sp, #116	; 0x74
 8013d3c:	af04      	add	r7, sp, #16
 8013d3e:	60f8      	str	r0, [r7, #12]
 8013d40:	607a      	str	r2, [r7, #4]
 8013d42:	603b      	str	r3, [r7, #0]
 8013d44:	460b      	mov	r3, r1
 8013d46:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8013d48:	68f8      	ldr	r0, [r7, #12]
 8013d4a:	f000 f94b 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	681a      	ldr	r2, [r3, #0]
 8013d52:	3228      	adds	r2, #40	; 0x28
 8013d54:	6812      	ldr	r2, [r2, #0]
 8013d56:	4618      	mov	r0, r3
 8013d58:	4790      	blx	r2
    if (failed)
 8013d5a:	7afb      	ldrb	r3, [r7, #11]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d03f      	beq.n	8013de0 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	339c      	adds	r3, #156	; 0x9c
 8013d66:	681c      	ldr	r4, [r3, #0]
 8013d68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013d6c:	6879      	ldr	r1, [r7, #4]
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f7f8 fd6f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013d74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013d78:	6839      	ldr	r1, [r7, #0]
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f7f8 fd69 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013d80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013d84:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013d86:	4618      	mov	r0, r3
 8013d88:	f7f8 fd63 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013d8c:	f107 0014 	add.w	r0, r7, #20
 8013d90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013d94:	9302      	str	r3, [sp, #8]
 8013d96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013d9a:	9301      	str	r3, [sp, #4]
 8013d9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013da0:	9300      	str	r3, [sp, #0]
 8013da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013da4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013da6:	68f9      	ldr	r1, [r7, #12]
 8013da8:	f7fa ff30 	bl	800ec0c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013dac:	f107 0314 	add.w	r3, r7, #20
 8013db0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013db2:	4619      	mov	r1, r3
 8013db4:	68f8      	ldr	r0, [r7, #12]
 8013db6:	47a0      	blx	r4
 8013db8:	f107 0314 	add.w	r3, r7, #20
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f7fb ff39 	bl	800fc34 <_ZN17CheckEqualFailureD1Ev>
 8013dc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f7f9 f8fb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013dcc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	f7f9 f8f6 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013dd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7f9 f8f1 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8013de0:	bf00      	nop
 8013de2:	3764      	adds	r7, #100	; 0x64
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bd90      	pop	{r4, r7, pc}

08013de8 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8013de8:	b590      	push	{r4, r7, lr}
 8013dea:	b09d      	sub	sp, #116	; 0x74
 8013dec:	af04      	add	r7, sp, #16
 8013dee:	60f8      	str	r0, [r7, #12]
 8013df0:	607a      	str	r2, [r7, #4]
 8013df2:	603b      	str	r3, [r7, #0]
 8013df4:	460b      	mov	r3, r1
 8013df6:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8013df8:	68f8      	ldr	r0, [r7, #12]
 8013dfa:	f000 f8f3 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	681a      	ldr	r2, [r3, #0]
 8013e02:	3228      	adds	r2, #40	; 0x28
 8013e04:	6812      	ldr	r2, [r2, #0]
 8013e06:	4618      	mov	r0, r3
 8013e08:	4790      	blx	r2
    if (!comparison)
 8013e0a:	7afb      	ldrb	r3, [r7, #11]
 8013e0c:	f083 0301 	eor.w	r3, r3, #1
 8013e10:	b2db      	uxtb	r3, r3
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d03f      	beq.n	8013e96 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	339c      	adds	r3, #156	; 0x9c
 8013e1c:	681c      	ldr	r4, [r3, #0]
 8013e1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e22:	6879      	ldr	r1, [r7, #4]
 8013e24:	4618      	mov	r0, r3
 8013e26:	f7f8 fd14 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013e2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013e2e:	6839      	ldr	r1, [r7, #0]
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7f8 fd0e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013e36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e3a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f7f8 fd08 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8013e42:	f107 0014 	add.w	r0, r7, #20
 8013e46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e4a:	9302      	str	r3, [sp, #8]
 8013e4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013e50:	9301      	str	r3, [sp, #4]
 8013e52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e56:	9300      	str	r3, [sp, #0]
 8013e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013e5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013e5c:	68f9      	ldr	r1, [r7, #12]
 8013e5e:	f7fa ff83 	bl	800ed68 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013e62:	f107 0314 	add.w	r3, r7, #20
 8013e66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013e68:	4619      	mov	r1, r3
 8013e6a:	68f8      	ldr	r0, [r7, #12]
 8013e6c:	47a0      	blx	r4
 8013e6e:	f107 0314 	add.w	r3, r7, #20
 8013e72:	4618      	mov	r0, r3
 8013e74:	f7fb febc 	bl	800fbf0 <_ZN17ComparisonFailureD1Ev>
 8013e78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	f7f9 f8a0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013e82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013e86:	4618      	mov	r0, r3
 8013e88:	f7f9 f89b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8013e8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e90:	4618      	mov	r0, r3
 8013e92:	f7f9 f896 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8013e96:	bf00      	nop
 8013e98:	3764      	adds	r7, #100	; 0x64
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bd90      	pop	{r4, r7, pc}
	...

08013ea0 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 8013ea0:	b5b0      	push	{r4, r5, r7, lr}
 8013ea2:	b088      	sub	sp, #32
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	60f8      	str	r0, [r7, #12]
 8013ea8:	60b9      	str	r1, [r7, #8]
 8013eaa:	607a      	str	r2, [r7, #4]
 8013eac:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 8013eae:	f107 0310 	add.w	r3, r7, #16
 8013eb2:	4924      	ldr	r1, [pc, #144]	; (8013f44 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7f8 fccc 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8013eba:	f107 0310 	add.w	r3, r7, #16
 8013ebe:	6879      	ldr	r1, [r7, #4]
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f7f9 f90d 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 8013ec6:	f107 0310 	add.w	r3, r7, #16
 8013eca:	491f      	ldr	r1, [pc, #124]	; (8013f48 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f7f9 f907 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 8013ed2:	f107 0318 	add.w	r3, r7, #24
 8013ed6:	6839      	ldr	r1, [r7, #0]
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f7f9 fda1 	bl	800da20 <_Z10StringFromj>
 8013ede:	f107 0218 	add.w	r2, r7, #24
 8013ee2:	f107 0310 	add.w	r3, r7, #16
 8013ee6:	4611      	mov	r1, r2
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7f9 f8e7 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 8013eee:	f107 0318 	add.w	r3, r7, #24
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f7f9 f865 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8013ef8:	f107 0310 	add.w	r3, r7, #16
 8013efc:	4913      	ldr	r1, [pc, #76]	; (8013f4c <_ZN10UtestShell5printEPKcS1_j+0xac>)
 8013efe:	4618      	mov	r0, r3
 8013f00:	f7f9 f8ee 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8013f04:	f107 0310 	add.w	r3, r7, #16
 8013f08:	68b9      	ldr	r1, [r7, #8]
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f7f9 f8e8 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8013f10:	68f8      	ldr	r0, [r7, #12]
 8013f12:	f000 f867 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8013f16:	4604      	mov	r4, r0
 8013f18:	6823      	ldr	r3, [r4, #0]
 8013f1a:	3338      	adds	r3, #56	; 0x38
 8013f1c:	681d      	ldr	r5, [r3, #0]
 8013f1e:	f107 0310 	add.w	r3, r7, #16
 8013f22:	4618      	mov	r0, r3
 8013f24:	f7f9 f820 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8013f28:	4603      	mov	r3, r0
 8013f2a:	4619      	mov	r1, r3
 8013f2c:	4620      	mov	r0, r4
 8013f2e:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8013f30:	f107 0310 	add.w	r3, r7, #16
 8013f34:	4618      	mov	r0, r3
 8013f36:	f7f9 f844 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8013f3a:	bf00      	nop
 8013f3c:	3720      	adds	r7, #32
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bdb0      	pop	{r4, r5, r7, pc}
 8013f42:	bf00      	nop
 8013f44:	08024cbc 	.word	0x08024cbc
 8013f48:	08024cc0 	.word	0x08024cc0
 8013f4c:	08024cc4 	.word	0x08024cc4

08013f50 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 8013f50:	b590      	push	{r4, r7, lr}
 8013f52:	b085      	sub	sp, #20
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	60f8      	str	r0, [r7, #12]
 8013f58:	60b9      	str	r1, [r7, #8]
 8013f5a:	607a      	str	r2, [r7, #4]
 8013f5c:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	3370      	adds	r3, #112	; 0x70
 8013f64:	681c      	ldr	r4, [r3, #0]
 8013f66:	68b8      	ldr	r0, [r7, #8]
 8013f68:	f7f8 fffe 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 8013f6c:	4601      	mov	r1, r0
 8013f6e:	683b      	ldr	r3, [r7, #0]
 8013f70:	687a      	ldr	r2, [r7, #4]
 8013f72:	68f8      	ldr	r0, [r7, #12]
 8013f74:	47a0      	blx	r4
}
 8013f76:	bf00      	nop
 8013f78:	3714      	adds	r7, #20
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd90      	pop	{r4, r7, pc}

08013f7e <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 8013f7e:	b580      	push	{r7, lr}
 8013f80:	b082      	sub	sp, #8
 8013f82:	af00      	add	r7, sp, #0
 8013f84:	6078      	str	r0, [r7, #4]
 8013f86:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f000 f82b 	bl	8013fe4 <_ZN10UtestShell13getTestResultEv>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	681a      	ldr	r2, [r3, #0]
 8013f92:	323c      	adds	r2, #60	; 0x3c
 8013f94:	6812      	ldr	r2, [r2, #0]
 8013f96:	6839      	ldr	r1, [r7, #0]
 8013f98:	4618      	mov	r0, r3
 8013f9a:	4790      	blx	r2
}
 8013f9c:	bf00      	nop
 8013f9e:	3708      	adds	r7, #8
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bd80      	pop	{r7, pc}

08013fa4 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8013fa4:	b480      	push	{r7}
 8013fa6:	b083      	sub	sp, #12
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
 8013fac:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8013fae:	4a04      	ldr	r2, [pc, #16]	; (8013fc0 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	6013      	str	r3, [r2, #0]
}
 8013fb4:	bf00      	nop
 8013fb6:	370c      	adds	r7, #12
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fbe:	4770      	bx	lr
 8013fc0:	20000a78 	.word	0x20000a78

08013fc4 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8013fc4:	b480      	push	{r7}
 8013fc6:	b083      	sub	sp, #12
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
 8013fcc:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8013fce:	4a04      	ldr	r2, [pc, #16]	; (8013fe0 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	6013      	str	r3, [r2, #0]
}
 8013fd4:	bf00      	nop
 8013fd6:	370c      	adds	r7, #12
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fde:	4770      	bx	lr
 8013fe0:	20000a7c 	.word	0x20000a7c

08013fe4 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b082      	sub	sp, #8
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8013fec:	4b09      	ldr	r3, [pc, #36]	; (8014014 <_ZN10UtestShell13getTestResultEv+0x30>)
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d109      	bne.n	8014008 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8013ff4:	f7fe fbb2 	bl	801275c <_ZN22OutsideTestRunnerUTest8instanceEv>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	681a      	ldr	r2, [r3, #0]
 8013ffc:	32a4      	adds	r2, #164	; 0xa4
 8013ffe:	6812      	ldr	r2, [r2, #0]
 8014000:	4618      	mov	r0, r3
 8014002:	4790      	blx	r2
 8014004:	4603      	mov	r3, r0
 8014006:	e001      	b.n	801400c <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8014008:	4b02      	ldr	r3, [pc, #8]	; (8014014 <_ZN10UtestShell13getTestResultEv+0x30>)
 801400a:	681b      	ldr	r3, [r3, #0]
}
 801400c:	4618      	mov	r0, r3
 801400e:	3708      	adds	r7, #8
 8014010:	46bd      	mov	sp, r7
 8014012:	bd80      	pop	{r7, pc}
 8014014:	20000a78 	.word	0x20000a78

08014018 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8014018:	b580      	push	{r7, lr}
 801401a:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 801401c:	4b05      	ldr	r3, [pc, #20]	; (8014034 <_ZN10UtestShell10getCurrentEv+0x1c>)
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d103      	bne.n	801402c <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8014024:	f7fe fb9a 	bl	801275c <_ZN22OutsideTestRunnerUTest8instanceEv>
 8014028:	4603      	mov	r3, r0
 801402a:	e001      	b.n	8014030 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 801402c:	4b01      	ldr	r3, [pc, #4]	; (8014034 <_ZN10UtestShell10getCurrentEv+0x1c>)
 801402e:	681b      	ldr	r3, [r3, #0]
}
 8014030:	4618      	mov	r0, r3
 8014032:	bd80      	pop	{r7, pc}
 8014034:	20000a7c 	.word	0x20000a7c

08014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8014038:	b480      	push	{r7}
 801403a:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 801403c:	4b03      	ldr	r3, [pc, #12]	; (801404c <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 801403e:	681b      	ldr	r3, [r3, #0]
}
 8014040:	4618      	mov	r0, r3
 8014042:	46bd      	mov	sp, r7
 8014044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014048:	4770      	bx	lr
 801404a:	bf00      	nop
 801404c:	20000094 	.word	0x20000094

08014050 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 8014050:	b480      	push	{r7}
 8014052:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 8014054:	4b03      	ldr	r3, [pc, #12]	; (8014064 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 8014056:	4a04      	ldr	r2, [pc, #16]	; (8014068 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8014058:	601a      	str	r2, [r3, #0]
}
 801405a:	bf00      	nop
 801405c:	46bd      	mov	sp, r7
 801405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014062:	4770      	bx	lr
 8014064:	20000094 	.word	0x20000094
 8014068:	20000090 	.word	0x20000090

0801406c <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 801406c:	b480      	push	{r7}
 801406e:	b083      	sub	sp, #12
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
 8014074:	4a04      	ldr	r2, [pc, #16]	; (8014088 <_ZN5UtestC1Ev+0x1c>)
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	601a      	str	r2, [r3, #0]
{
}
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	4618      	mov	r0, r3
 801407e:	370c      	adds	r7, #12
 8014080:	46bd      	mov	sp, r7
 8014082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014086:	4770      	bx	lr
 8014088:	080284cc 	.word	0x080284cc

0801408c <_ZN5UtestD1Ev>:

Utest::~Utest()
 801408c:	b480      	push	{r7}
 801408e:	b083      	sub	sp, #12
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
 8014094:	4a04      	ldr	r2, [pc, #16]	; (80140a8 <_ZN5UtestD1Ev+0x1c>)
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	601a      	str	r2, [r3, #0]
{
}
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	4618      	mov	r0, r3
 801409e:	370c      	adds	r7, #12
 80140a0:	46bd      	mov	sp, r7
 80140a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a6:	4770      	bx	lr
 80140a8:	080284cc 	.word	0x080284cc

080140ac <_ZN5UtestD0Ev>:
Utest::~Utest()
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b082      	sub	sp, #8
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
}
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f7ff ffe9 	bl	801408c <_ZN5UtestD1Ev>
 80140ba:	2104      	movs	r1, #4
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f7f6 f819 	bl	800a0f4 <_ZdlPvj>
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	4618      	mov	r0, r3
 80140c6:	3708      	adds	r7, #8
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}

080140cc <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b082      	sub	sp, #8
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 80140d4:	4b0d      	ldr	r3, [pc, #52]	; (801410c <_ZN5Utest3runEv+0x40>)
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	6879      	ldr	r1, [r7, #4]
 80140da:	480d      	ldr	r0, [pc, #52]	; (8014110 <_ZN5Utest3runEv+0x44>)
 80140dc:	4798      	blx	r3
 80140de:	4603      	mov	r3, r0
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	bf14      	ite	ne
 80140e4:	2301      	movne	r3, #1
 80140e6:	2300      	moveq	r3, #0
 80140e8:	b2db      	uxtb	r3, r3
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d004      	beq.n	80140f8 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 80140ee:	4b07      	ldr	r3, [pc, #28]	; (801410c <_ZN5Utest3runEv+0x40>)
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	6879      	ldr	r1, [r7, #4]
 80140f4:	4807      	ldr	r0, [pc, #28]	; (8014114 <_ZN5Utest3runEv+0x48>)
 80140f6:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 80140f8:	4b04      	ldr	r3, [pc, #16]	; (801410c <_ZN5Utest3runEv+0x40>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	6879      	ldr	r1, [r7, #4]
 80140fe:	4806      	ldr	r0, [pc, #24]	; (8014118 <_ZN5Utest3runEv+0x4c>)
 8014100:	4798      	blx	r3
}
 8014102:	bf00      	nop
 8014104:	3708      	adds	r7, #8
 8014106:	46bd      	mov	sp, r7
 8014108:	bd80      	pop	{r7, pc}
 801410a:	bf00      	nop
 801410c:	200000a4 	.word	0x200000a4
 8014110:	080127b9 	.word	0x080127b9
 8014114:	080127d5 	.word	0x080127d5
 8014118:	080127f1 	.word	0x080127f1

0801411c <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 801411c:	b480      	push	{r7}
 801411e:	b083      	sub	sp, #12
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
}
 8014124:	bf00      	nop
 8014126:	370c      	adds	r7, #12
 8014128:	46bd      	mov	sp, r7
 801412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801412e:	4770      	bx	lr

08014130 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8014130:	b480      	push	{r7}
 8014132:	b083      	sub	sp, #12
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
}
 8014138:	bf00      	nop
 801413a:	370c      	adds	r7, #12
 801413c:	46bd      	mov	sp, r7
 801413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014142:	4770      	bx	lr

08014144 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 8014144:	b480      	push	{r7}
 8014146:	b083      	sub	sp, #12
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
}
 801414c:	bf00      	nop
 801414e:	370c      	adds	r7, #12
 8014150:	46bd      	mov	sp, r7
 8014152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014156:	4770      	bx	lr

08014158 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 8014158:	b480      	push	{r7}
 801415a:	b083      	sub	sp, #12
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
 8014160:	4a04      	ldr	r2, [pc, #16]	; (8014174 <_ZN14TestTerminatorD1Ev+0x1c>)
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	601a      	str	r2, [r3, #0]
{
}
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	4618      	mov	r0, r3
 801416a:	370c      	adds	r7, #12
 801416c:	46bd      	mov	sp, r7
 801416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014172:	4770      	bx	lr
 8014174:	080284b8 	.word	0x080284b8

08014178 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b084      	sub	sp, #16
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 8014180:	2300      	movs	r3, #0
 8014182:	60fb      	str	r3, [r7, #12]
 8014184:	f107 030c 	add.w	r3, r7, #12
 8014188:	4618      	mov	r0, r3
 801418a:	f7f6 f975 	bl	800a478 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 801418e:	f107 030c 	add.w	r3, r7, #12
 8014192:	4618      	mov	r0, r3
 8014194:	f000 f82c 	bl	80141f0 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8014198:	f107 030c 	add.w	r3, r7, #12
 801419c:	4618      	mov	r0, r3
 801419e:	f000 f835 	bl	801420c <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 80141a2:	bf00      	nop
 80141a4:	3710      	adds	r7, #16
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}
	...

080141ac <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
 80141b4:	4a05      	ldr	r2, [pc, #20]	; (80141cc <_ZN20NormalTestTerminatorD1Ev+0x20>)
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	601a      	str	r2, [r3, #0]
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	4618      	mov	r0, r3
 80141be:	f7ff ffcb 	bl	8014158 <_ZN14TestTerminatorD1Ev>
{
}
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	4618      	mov	r0, r3
 80141c6:	3708      	adds	r7, #8
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bd80      	pop	{r7, pc}
 80141cc:	080284a4 	.word	0x080284a4

080141d0 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b082      	sub	sp, #8
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
}
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f7ff ffe7 	bl	80141ac <_ZN20NormalTestTerminatorD1Ev>
 80141de:	2104      	movs	r1, #4
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f7f5 ff87 	bl	800a0f4 <_ZdlPvj>
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	4618      	mov	r0, r3
 80141ea:	3708      	adds	r7, #8
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}

080141f0 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b082      	sub	sp, #8
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 80141f8:	4b03      	ldr	r3, [pc, #12]	; (8014208 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	4798      	blx	r3
} // LCOV_EXCL_LINE
 80141fe:	bf00      	nop
 8014200:	3708      	adds	r7, #8
 8014202:	46bd      	mov	sp, r7
 8014204:	bd80      	pop	{r7, pc}
 8014206:	bf00      	nop
 8014208:	200000a0 	.word	0x200000a0

0801420c <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 801420c:	b580      	push	{r7, lr}
 801420e:	b082      	sub	sp, #8
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
 8014214:	4a05      	ldr	r2, [pc, #20]	; (801422c <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	601a      	str	r2, [r3, #0]
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	4618      	mov	r0, r3
 801421e:	f7ff ff9b 	bl	8014158 <_ZN14TestTerminatorD1Ev>
{
}
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	4618      	mov	r0, r3
 8014226:	3708      	adds	r7, #8
 8014228:	46bd      	mov	sp, r7
 801422a:	bd80      	pop	{r7, pc}
 801422c:	08028490 	.word	0x08028490

08014230 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8014230:	b580      	push	{r7, lr}
 8014232:	b082      	sub	sp, #8
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
}
 8014238:	6878      	ldr	r0, [r7, #4]
 801423a:	f7ff ffe7 	bl	801420c <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 801423e:	2104      	movs	r1, #4
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	f7f5 ff57 	bl	800a0f4 <_ZdlPvj>
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	4618      	mov	r0, r3
 801424a:	3708      	adds	r7, #8
 801424c:	46bd      	mov	sp, r7
 801424e:	bd80      	pop	{r7, pc}

08014250 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 8014258:	f7fe fbaa 	bl	80129b0 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	4618      	mov	r0, r3
 8014260:	f7ff ff8a 	bl	8014178 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8014264:	bf00      	nop
 8014266:	3708      	adds	r7, #8
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}

0801426c <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 801426c:	b580      	push	{r7, lr}
 801426e:	b082      	sub	sp, #8
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
 8014274:	4a05      	ldr	r2, [pc, #20]	; (801428c <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	601a      	str	r2, [r3, #0]
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	4618      	mov	r0, r3
 801427e:	f7ff ff95 	bl	80141ac <_ZN20NormalTestTerminatorD1Ev>
{
}
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	4618      	mov	r0, r3
 8014286:	3708      	adds	r7, #8
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}
 801428c:	0802847c 	.word	0x0802847c

08014290 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
}
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f7ff ffe7 	bl	801426c <_ZN22CrashingTestTerminatorD1Ev>
 801429e:	2104      	movs	r1, #4
 80142a0:	6878      	ldr	r0, [r7, #4]
 80142a2:	f7f5 ff27 	bl	800a0f4 <_ZdlPvj>
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	4618      	mov	r0, r3
 80142aa:	3708      	adds	r7, #8
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd80      	pop	{r7, pc}

080142b0 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b084      	sub	sp, #16
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	2200      	movs	r2, #0
 80142be:	601a      	str	r2, [r3, #0]
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	2200      	movs	r2, #0
 80142c4:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 80142c6:	683b      	ldr	r3, [r7, #0]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d007      	beq.n	80142dc <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	3310      	adds	r3, #16
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	6838      	ldr	r0, [r7, #0]
 80142d6:	4798      	blx	r3
 80142d8:	4603      	mov	r3, r0
 80142da:	e000      	b.n	80142de <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 80142dc:	2300      	movs	r3, #0
 80142de:	687a      	ldr	r2, [r7, #4]
 80142e0:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	685b      	ldr	r3, [r3, #4]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d02d      	beq.n	8014346 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	685b      	ldr	r3, [r3, #4]
 80142ee:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80142f2:	4293      	cmp	r3, r2
 80142f4:	d201      	bcs.n	80142fa <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 80142f6:	009b      	lsls	r3, r3, #2
 80142f8:	e001      	b.n	80142fe <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 80142fa:	f04f 33ff 	mov.w	r3, #4294967295
 80142fe:	f240 3237 	movw	r2, #823	; 0x337
 8014302:	4914      	ldr	r1, [pc, #80]	; (8014354 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8014304:	4618      	mov	r0, r3
 8014306:	f7f5 ff05 	bl	800a114 <_ZnajPKci>
 801430a:	4602      	mov	r2, r0
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8014310:	683b      	ldr	r3, [r7, #0]
 8014312:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8014314:	2300      	movs	r3, #0
 8014316:	60bb      	str	r3, [r7, #8]
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	685b      	ldr	r3, [r3, #4]
 801431c:	68ba      	ldr	r2, [r7, #8]
 801431e:	429a      	cmp	r2, r3
 8014320:	d212      	bcs.n	8014348 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	681a      	ldr	r2, [r3, #0]
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	009b      	lsls	r3, r3, #2
 801432a:	4413      	add	r3, r2
 801432c:	68fa      	ldr	r2, [r7, #12]
 801432e:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	330c      	adds	r3, #12
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	68f8      	ldr	r0, [r7, #12]
 801433a:	4798      	blx	r3
 801433c:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801433e:	68bb      	ldr	r3, [r7, #8]
 8014340:	3301      	adds	r3, #1
 8014342:	60bb      	str	r3, [r7, #8]
 8014344:	e7e8      	b.n	8014318 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 8014346:	bf00      	nop
    }
}
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	4618      	mov	r0, r3
 801434c:	3710      	adds	r7, #16
 801434e:	46bd      	mov	sp, r7
 8014350:	bd80      	pop	{r7, pc}
 8014352:	bf00      	nop
 8014354:	08024b4c 	.word	0x08024b4c

08014358 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 8014358:	b580      	push	{r7, lr}
 801435a:	b082      	sub	sp, #8
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d004      	beq.n	8014372 <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	4618      	mov	r0, r3
 801436e:	f7f5 fee5 	bl	800a13c <_ZdaPv>
}
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	4618      	mov	r0, r3
 8014376:	3708      	adds	r7, #8
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}

0801437c <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 801437c:	b480      	push	{r7}
 801437e:	b087      	sub	sp, #28
 8014380:	af00      	add	r7, sp, #0
 8014382:	60f8      	str	r0, [r7, #12]
 8014384:	60b9      	str	r1, [r7, #8]
 8014386:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	681a      	ldr	r2, [r3, #0]
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	009b      	lsls	r3, r3, #2
 8014390:	4413      	add	r3, r2
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	681a      	ldr	r2, [r3, #0]
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	009b      	lsls	r3, r3, #2
 801439e:	4413      	add	r3, r2
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	681a      	ldr	r2, [r3, #0]
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	009b      	lsls	r3, r3, #2
 80143ac:	4413      	add	r3, r2
 80143ae:	697a      	ldr	r2, [r7, #20]
 80143b0:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	681a      	ldr	r2, [r3, #0]
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	009b      	lsls	r3, r3, #2
 80143ba:	4413      	add	r3, r2
 80143bc:	693a      	ldr	r2, [r7, #16]
 80143be:	601a      	str	r2, [r3, #0]
}
 80143c0:	bf00      	nop
 80143c2:	371c      	adds	r7, #28
 80143c4:	46bd      	mov	sp, r7
 80143c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ca:	4770      	bx	lr

080143cc <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b084      	sub	sp, #16
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d028      	beq.n	8014430 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 80143de:	4b17      	ldr	r3, [pc, #92]	; (801443c <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	6838      	ldr	r0, [r7, #0]
 80143e4:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	685b      	ldr	r3, [r3, #4]
 80143ea:	3b01      	subs	r3, #1
 80143ec:	60fb      	str	r3, [r7, #12]
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d019      	beq.n	8014428 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	685b      	ldr	r3, [r3, #4]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d01b      	beq.n	8014434 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 80143fc:	4b10      	ldr	r3, [pc, #64]	; (8014440 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	4798      	blx	r3
 8014402:	4603      	mov	r3, r0
 8014404:	461a      	mov	r2, r3
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	3301      	adds	r3, #1
 801440a:	fbb2 f1f3 	udiv	r1, r2, r3
 801440e:	fb03 f301 	mul.w	r3, r3, r1
 8014412:	1ad3      	subs	r3, r2, r3
 8014414:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 8014416:	68ba      	ldr	r2, [r7, #8]
 8014418:	68f9      	ldr	r1, [r7, #12]
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	f7ff ffae 	bl	801437c <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	3b01      	subs	r3, #1
 8014424:	60fb      	str	r3, [r7, #12]
 8014426:	e7e2      	b.n	80143ee <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8014428:	6878      	ldr	r0, [r7, #4]
 801442a:	f000 f834 	bl	8014496 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 801442e:	e002      	b.n	8014436 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8014430:	bf00      	nop
 8014432:	e000      	b.n	8014436 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8014434:	bf00      	nop
}
 8014436:	3710      	adds	r7, #16
 8014438:	46bd      	mov	sp, r7
 801443a:	bd80      	pop	{r7, pc}
 801443c:	200000e0 	.word	0x200000e0
 8014440:	200000e4 	.word	0x200000e4

08014444 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b086      	sub	sp, #24
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	685b      	ldr	r3, [r3, #4]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d01c      	beq.n	801448e <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	685b      	ldr	r3, [r3, #4]
 8014458:	085b      	lsrs	r3, r3, #1
 801445a:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 801445c:	2300      	movs	r3, #0
 801445e:	617b      	str	r3, [r7, #20]
 8014460:	697a      	ldr	r2, [r7, #20]
 8014462:	693b      	ldr	r3, [r7, #16]
 8014464:	429a      	cmp	r2, r3
 8014466:	d20e      	bcs.n	8014486 <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	685a      	ldr	r2, [r3, #4]
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	1ad3      	subs	r3, r2, r3
 8014470:	3b01      	subs	r3, #1
 8014472:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8014474:	68fa      	ldr	r2, [r7, #12]
 8014476:	6979      	ldr	r1, [r7, #20]
 8014478:	6878      	ldr	r0, [r7, #4]
 801447a:	f7ff ff7f 	bl	801437c <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 801447e:	697b      	ldr	r3, [r7, #20]
 8014480:	3301      	adds	r3, #1
 8014482:	617b      	str	r3, [r7, #20]
 8014484:	e7ec      	b.n	8014460 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f000 f805 	bl	8014496 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 801448c:	e000      	b.n	8014490 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 801448e:	bf00      	nop
}
 8014490:	3718      	adds	r7, #24
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}

08014496 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 8014496:	b580      	push	{r7, lr}
 8014498:	b084      	sub	sp, #16
 801449a:	af00      	add	r7, sp, #0
 801449c:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 801449e:	2300      	movs	r3, #0
 80144a0:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80144a2:	2300      	movs	r3, #0
 80144a4:	60bb      	str	r3, [r7, #8]
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	685b      	ldr	r3, [r3, #4]
 80144aa:	68ba      	ldr	r2, [r7, #8]
 80144ac:	429a      	cmp	r2, r3
 80144ae:	d221      	bcs.n	80144f4 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	681a      	ldr	r2, [r3, #0]
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	6859      	ldr	r1, [r3, #4]
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	1acb      	subs	r3, r1, r3
 80144bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80144c0:	3b01      	subs	r3, #1
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	4413      	add	r3, r2
 80144c6:	6818      	ldr	r0, [r3, #0]
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681a      	ldr	r2, [r3, #0]
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	6859      	ldr	r1, [r3, #4]
 80144d0:	68bb      	ldr	r3, [r7, #8]
 80144d2:	1acb      	subs	r3, r1, r3
 80144d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80144d8:	3b01      	subs	r3, #1
 80144da:	009b      	lsls	r3, r3, #2
 80144dc:	4413      	add	r3, r2
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	3308      	adds	r3, #8
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	68f9      	ldr	r1, [r7, #12]
 80144e8:	4798      	blx	r3
 80144ea:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	3301      	adds	r3, #1
 80144f0:	60bb      	str	r3, [r7, #8]
 80144f2:	e7d8      	b.n	80144a6 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 80144f4:	bf00      	nop
 80144f6:	3710      	adds	r7, #16
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}

080144fc <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b082      	sub	sp, #8
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
    return get(0);
 8014504:	2100      	movs	r1, #0
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f000 f805 	bl	8014516 <_ZNK22UtestShellPointerArray3getEj>
 801450c:	4603      	mov	r3, r0
}
 801450e:	4618      	mov	r0, r3
 8014510:	3708      	adds	r7, #8
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}

08014516 <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 8014516:	b480      	push	{r7}
 8014518:	b083      	sub	sp, #12
 801451a:	af00      	add	r7, sp, #0
 801451c:	6078      	str	r0, [r7, #4]
 801451e:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	685b      	ldr	r3, [r3, #4]
 8014524:	683a      	ldr	r2, [r7, #0]
 8014526:	429a      	cmp	r2, r3
 8014528:	d301      	bcc.n	801452e <_ZNK22UtestShellPointerArray3getEj+0x18>
 801452a:	2300      	movs	r3, #0
 801452c:	e005      	b.n	801453a <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	681a      	ldr	r2, [r3, #0]
 8014532:	683b      	ldr	r3, [r7, #0]
 8014534:	009b      	lsls	r3, r3, #2
 8014536:	4413      	add	r3, r2
 8014538:	681b      	ldr	r3, [r3, #0]
}
 801453a:	4618      	mov	r0, r3
 801453c:	370c      	adds	r7, #12
 801453e:	46bd      	mov	sp, r7
 8014540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014544:	4770      	bx	lr
	...

08014548 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 8014548:	b580      	push	{r7, lr}
 801454a:	b084      	sub	sp, #16
 801454c:	af00      	add	r7, sp, #0
 801454e:	60f8      	str	r0, [r7, #12]
 8014550:	60b9      	str	r1, [r7, #8]
 8014552:	607a      	str	r2, [r7, #4]
 8014554:	603b      	str	r3, [r7, #0]
 8014556:	4a10      	ldr	r2, [pc, #64]	; (8014598 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 801455c:	6879      	ldr	r1, [r7, #4]
 801455e:	68b8      	ldr	r0, [r7, #8]
 8014560:	f7fe fc27 	bl	8012db2 <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 8014564:	6839      	ldr	r1, [r7, #0]
 8014566:	68b8      	ldr	r0, [r7, #8]
 8014568:	f7fe fc31 	bl	8012dce <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 801456c:	69b9      	ldr	r1, [r7, #24]
 801456e:	68b8      	ldr	r0, [r7, #8]
 8014570:	f7fe fc03 	bl	8012d7a <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 8014574:	69f9      	ldr	r1, [r7, #28]
 8014576:	68b8      	ldr	r0, [r7, #8]
 8014578:	f7fe fc0d 	bl	8012d96 <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 801457c:	f7fd fc20 	bl	8011dc0 <_ZN12TestRegistry18getCurrentRegistryEv>
 8014580:	4603      	mov	r3, r0
 8014582:	681a      	ldr	r2, [r3, #0]
 8014584:	3208      	adds	r2, #8
 8014586:	6812      	ldr	r2, [r2, #0]
 8014588:	68b9      	ldr	r1, [r7, #8]
 801458a:	4618      	mov	r0, r3
 801458c:	4790      	blx	r2
}
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	4618      	mov	r0, r3
 8014592:	3710      	adds	r7, #16
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}
 8014598:	080283c0 	.word	0x080283c0

0801459c <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 801459c:	b480      	push	{r7}
 801459e:	b083      	sub	sp, #12
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	4a04      	ldr	r2, [pc, #16]	; (80145b8 <_ZN13TestInstallerD1Ev+0x1c>)
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	601a      	str	r2, [r3, #0]
{
}
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	4618      	mov	r0, r3
 80145ae:	370c      	adds	r7, #12
 80145b0:	46bd      	mov	sp, r7
 80145b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b6:	4770      	bx	lr
 80145b8:	080283c0 	.word	0x080283c0

080145bc <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 80145bc:	b580      	push	{r7, lr}
 80145be:	b082      	sub	sp, #8
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
}
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f7ff ffe9 	bl	801459c <_ZN13TestInstallerD1Ev>
 80145ca:	2104      	movs	r1, #4
 80145cc:	6878      	ldr	r0, [r7, #4]
 80145ce:	f7f5 fd91 	bl	800a0f4 <_ZdlPvj>
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	4618      	mov	r0, r3
 80145d6:	3708      	adds	r7, #8
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}

080145dc <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 80145dc:	b580      	push	{r7, lr}
 80145de:	b082      	sub	sp, #8
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
 80145e4:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d10a      	bne.n	8014602 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80145f2:	4293      	cmp	r3, r2
 80145f4:	d105      	bne.n	8014602 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80145f6:	4805      	ldr	r0, [pc, #20]	; (801460c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80145f8:	f7ff fe38 	bl	801426c <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 80145fc:	4804      	ldr	r0, [pc, #16]	; (8014610 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80145fe:	f7ff fdd5 	bl	80141ac <_ZN20NormalTestTerminatorD1Ev>
}
 8014602:	bf00      	nop
 8014604:	3708      	adds	r7, #8
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}
 801460a:	bf00      	nop
 801460c:	20000090 	.word	0x20000090
 8014610:	2000008c 	.word	0x2000008c

08014614 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8014614:	b580      	push	{r7, lr}
 8014616:	af00      	add	r7, sp, #0
 8014618:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801461c:	2001      	movs	r0, #1
 801461e:	f7ff ffdd 	bl	80145dc <_Z41__static_initialization_and_destruction_0ii>
 8014622:	bd80      	pop	{r7, pc}

08014624 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8014624:	b580      	push	{r7, lr}
 8014626:	af00      	add	r7, sp, #0
 8014628:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801462c:	2000      	movs	r0, #0
 801462e:	f7ff ffd5 	bl	80145dc <_Z41__static_initialization_and_destruction_0ii>
 8014632:	bd80      	pop	{r7, pc}

08014634 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8014634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014636:	b083      	sub	sp, #12
 8014638:	af00      	add	r7, sp, #0
 801463a:	ed87 0b00 	vstr	d0, [r7]
 801463e:	683c      	ldr	r4, [r7, #0]
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8014646:	2301      	movs	r3, #1
 8014648:	461e      	mov	r6, r3
 801464a:	f04f 32ff 	mov.w	r2, #4294967295
 801464e:	4b10      	ldr	r3, [pc, #64]	; (8014690 <_ZSt5isinfd+0x5c>)
 8014650:	4620      	mov	r0, r4
 8014652:	4629      	mov	r1, r5
 8014654:	f7ec f898 	bl	8000788 <__aeabi_dcmpun>
 8014658:	4603      	mov	r3, r0
 801465a:	2b00      	cmp	r3, #0
 801465c:	d10b      	bne.n	8014676 <_ZSt5isinfd+0x42>
 801465e:	f04f 32ff 	mov.w	r2, #4294967295
 8014662:	4b0b      	ldr	r3, [pc, #44]	; (8014690 <_ZSt5isinfd+0x5c>)
 8014664:	4620      	mov	r0, r4
 8014666:	4629      	mov	r1, r5
 8014668:	f7ec f870 	bl	800074c <__aeabi_dcmple>
 801466c:	4603      	mov	r3, r0
 801466e:	2b00      	cmp	r3, #0
 8014670:	d101      	bne.n	8014676 <_ZSt5isinfd+0x42>
 8014672:	2300      	movs	r3, #0
 8014674:	461e      	mov	r6, r3
 8014676:	b2f3      	uxtb	r3, r6
 8014678:	f083 0301 	eor.w	r3, r3, #1
 801467c:	b2db      	uxtb	r3, r3
 801467e:	2b00      	cmp	r3, #0
 8014680:	bf14      	ite	ne
 8014682:	2301      	movne	r3, #1
 8014684:	2300      	moveq	r3, #0
 8014686:	b2db      	uxtb	r3, r3
 8014688:	4618      	mov	r0, r3
 801468a:	370c      	adds	r7, #12
 801468c:	46bd      	mov	sp, r7
 801468e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014690:	7fefffff 	.word	0x7fefffff

08014694 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8014694:	b590      	push	{r4, r7, lr}
 8014696:	b083      	sub	sp, #12
 8014698:	af00      	add	r7, sp, #0
 801469a:	ed87 0b00 	vstr	d0, [r7]
 801469e:	2301      	movs	r3, #1
 80146a0:	461c      	mov	r4, r3
 80146a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80146a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80146aa:	f7ec f86d 	bl	8000788 <__aeabi_dcmpun>
 80146ae:	4603      	mov	r3, r0
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d101      	bne.n	80146b8 <_ZSt5isnand+0x24>
 80146b4:	2300      	movs	r3, #0
 80146b6:	461c      	mov	r4, r3
 80146b8:	b2e3      	uxtb	r3, r4
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	bf14      	ite	ne
 80146be:	2301      	movne	r3, #1
 80146c0:	2300      	moveq	r3, #0
 80146c2:	b2db      	uxtb	r3, r3
 80146c4:	4618      	mov	r0, r3
 80146c6:	370c      	adds	r7, #12
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd90      	pop	{r4, r7, pc}

080146cc <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 80146cc:	b590      	push	{r4, r7, lr}
 80146ce:	b095      	sub	sp, #84	; 0x54
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	60f8      	str	r0, [r7, #12]
 80146d4:	60b9      	str	r1, [r7, #8]
 80146d6:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	3334      	adds	r3, #52	; 0x34
 80146de:	681c      	ldr	r4, [r3, #0]
 80146e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80146e4:	490f      	ldr	r1, [pc, #60]	; (8014724 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 80146e6:	4618      	mov	r0, r3
 80146e8:	f7f8 f8b3 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80146ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80146f0:	f107 0314 	add.w	r3, r7, #20
 80146f4:	68f9      	ldr	r1, [r7, #12]
 80146f6:	4618      	mov	r0, r3
 80146f8:	f7f9 ff0a 	bl	800e510 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 80146fc:	f107 0314 	add.w	r3, r7, #20
 8014700:	4619      	mov	r1, r3
 8014702:	6878      	ldr	r0, [r7, #4]
 8014704:	47a0      	blx	r4
 8014706:	f107 0314 	add.w	r3, r7, #20
 801470a:	4618      	mov	r0, r3
 801470c:	f7f9 ffc0 	bl	800e690 <_ZN11TestFailureD1Ev>
 8014710:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014714:	4618      	mov	r0, r3
 8014716:	f7f8 fc54 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 801471a:	bf00      	nop
 801471c:	3754      	adds	r7, #84	; 0x54
 801471e:	46bd      	mov	sp, r7
 8014720:	bd90      	pop	{r4, r7, pc}
 8014722:	bf00      	nop
 8014724:	08024cd4 	.word	0x08024cd4

08014728 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8014728:	b480      	push	{r7}
 801472a:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 801472c:	2301      	movs	r3, #1
}
 801472e:	4618      	mov	r0, r3
 8014730:	46bd      	mov	sp, r7
 8014732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014736:	4770      	bx	lr

08014738 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b082      	sub	sp, #8
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
 8014740:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 8014742:	4b13      	ldr	r3, [pc, #76]	; (8014790 <PlatformSpecificSetJmpImplementation+0x58>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	225c      	movs	r2, #92	; 0x5c
 8014748:	fb02 f303 	mul.w	r3, r2, r3
 801474c:	4a11      	ldr	r2, [pc, #68]	; (8014794 <PlatformSpecificSetJmpImplementation+0x5c>)
 801474e:	4413      	add	r3, r2
 8014750:	4618      	mov	r0, r3
 8014752:	f7eb fd65 	bl	8000220 <setjmp>
 8014756:	4603      	mov	r3, r0
 8014758:	2b00      	cmp	r3, #0
 801475a:	bf0c      	ite	eq
 801475c:	2301      	moveq	r3, #1
 801475e:	2300      	movne	r3, #0
 8014760:	b2db      	uxtb	r3, r3
 8014762:	2b00      	cmp	r3, #0
 8014764:	d00e      	beq.n	8014784 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 8014766:	4b0a      	ldr	r3, [pc, #40]	; (8014790 <PlatformSpecificSetJmpImplementation+0x58>)
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	3301      	adds	r3, #1
 801476c:	4a08      	ldr	r2, [pc, #32]	; (8014790 <PlatformSpecificSetJmpImplementation+0x58>)
 801476e:	6013      	str	r3, [r2, #0]
        function(data);
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	6838      	ldr	r0, [r7, #0]
 8014774:	4798      	blx	r3
        jmp_buf_index--;
 8014776:	4b06      	ldr	r3, [pc, #24]	; (8014790 <PlatformSpecificSetJmpImplementation+0x58>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	3b01      	subs	r3, #1
 801477c:	4a04      	ldr	r2, [pc, #16]	; (8014790 <PlatformSpecificSetJmpImplementation+0x58>)
 801477e:	6013      	str	r3, [r2, #0]
        return 1;
 8014780:	2301      	movs	r3, #1
 8014782:	e000      	b.n	8014786 <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 8014784:	2300      	movs	r3, #0
}
 8014786:	4618      	mov	r0, r3
 8014788:	3708      	adds	r7, #8
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}
 801478e:	bf00      	nop
 8014790:	20000e18 	.word	0x20000e18
 8014794:	20000a80 	.word	0x20000a80

08014798 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 8014798:	b580      	push	{r7, lr}
 801479a:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 801479c:	4b07      	ldr	r3, [pc, #28]	; (80147bc <PlatformSpecificLongJmpImplementation+0x24>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	3b01      	subs	r3, #1
 80147a2:	4a06      	ldr	r2, [pc, #24]	; (80147bc <PlatformSpecificLongJmpImplementation+0x24>)
 80147a4:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 80147a6:	4b05      	ldr	r3, [pc, #20]	; (80147bc <PlatformSpecificLongJmpImplementation+0x24>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	225c      	movs	r2, #92	; 0x5c
 80147ac:	fb02 f303 	mul.w	r3, r2, r3
 80147b0:	4a03      	ldr	r2, [pc, #12]	; (80147c0 <PlatformSpecificLongJmpImplementation+0x28>)
 80147b2:	4413      	add	r3, r2
 80147b4:	2101      	movs	r1, #1
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7eb fd38 	bl	800022c <longjmp>
 80147bc:	20000e18 	.word	0x20000e18
 80147c0:	20000a80 	.word	0x20000a80

080147c4 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 80147c4:	b480      	push	{r7}
 80147c6:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 80147c8:	2300      	movs	r3, #0
#endif
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	46bd      	mov	sp, r7
 80147ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d2:	4770      	bx	lr

080147d4 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b084      	sub	sp, #16
 80147d8:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 80147da:	2000      	movs	r0, #0
 80147dc:	f00e ec4c 	blx	8023078 <__time_veneer>
 80147e0:	4602      	mov	r2, r0
 80147e2:	460b      	mov	r3, r1
 80147e4:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 80147e8:	463b      	mov	r3, r7
 80147ea:	4618      	mov	r0, r3
 80147ec:	f00b fb78 	bl	801fee0 <localtime>
 80147f0:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	4a04      	ldr	r2, [pc, #16]	; (8014808 <TimeStringImplementation+0x34>)
 80147f6:	2150      	movs	r1, #80	; 0x50
 80147f8:	4804      	ldr	r0, [pc, #16]	; (801480c <TimeStringImplementation+0x38>)
 80147fa:	f00c fc79 	bl	80210f0 <strftime>
    return dateTime;
 80147fe:	4b03      	ldr	r3, [pc, #12]	; (801480c <TimeStringImplementation+0x38>)
}
 8014800:	4618      	mov	r0, r3
 8014802:	3710      	adds	r7, #16
 8014804:	46bd      	mov	sp, r7
 8014806:	bd80      	pop	{r7, pc}
 8014808:	08024d10 	.word	0x08024d10
 801480c:	20000e1c 	.word	0x20000e1c

08014810 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b082      	sub	sp, #8
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 801481a:	6839      	ldr	r1, [r7, #0]
 801481c:	6878      	ldr	r0, [r7, #4]
 801481e:	f00b f995 	bl	801fb4c <fopen>
 8014822:	4603      	mov	r3, r0
#endif
}
 8014824:	4618      	mov	r0, r3
 8014826:	3708      	adds	r7, #8
 8014828:	46bd      	mov	sp, r7
 801482a:	bd80      	pop	{r7, pc}

0801482c <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b082      	sub	sp, #8
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
 8014834:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8014836:	6839      	ldr	r1, [r7, #0]
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f00b f9f5 	bl	801fc28 <fputs>
}
 801483e:	bf00      	nop
 8014840:	3708      	adds	r7, #8
 8014842:	46bd      	mov	sp, r7
 8014844:	bd80      	pop	{r7, pc}

08014846 <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 8014846:	b580      	push	{r7, lr}
 8014848:	b082      	sub	sp, #8
 801484a:	af00      	add	r7, sp, #0
 801484c:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 801484e:	6878      	ldr	r0, [r7, #4]
 8014850:	f00a ff76 	bl	801f740 <fclose>
}
 8014854:	bf00      	nop
 8014856:	3708      	adds	r7, #8
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}

0801485c <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 801485c:	b580      	push	{r7, lr}
 801485e:	af00      	add	r7, sp, #0
  fflush(stdout);
 8014860:	4b03      	ldr	r3, [pc, #12]	; (8014870 <PlatformSpecificFlushImplementation+0x14>)
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	689b      	ldr	r3, [r3, #8]
 8014866:	4618      	mov	r0, r3
 8014868:	f00b f834 	bl	801f8d4 <fflush>
}
 801486c:	bf00      	nop
 801486e:	bd80      	pop	{r7, pc}
 8014870:	20000108 	.word	0x20000108

08014874 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b082      	sub	sp, #8
 8014878:	af00      	add	r7, sp, #0
 801487a:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 801487e:	ed97 0b00 	vldr	d0, [r7]
 8014882:	f7ff ff07 	bl	8014694 <_ZSt5isnand>
 8014886:	4603      	mov	r3, r0
}
 8014888:	4618      	mov	r0, r3
 801488a:	3708      	adds	r7, #8
 801488c:	46bd      	mov	sp, r7
 801488e:	bd80      	pop	{r7, pc}

08014890 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b082      	sub	sp, #8
 8014894:	af00      	add	r7, sp, #0
 8014896:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 801489a:	ed97 0b00 	vldr	d0, [r7]
 801489e:	f7ff fec9 	bl	8014634 <_ZSt5isinfd>
 80148a2:	4603      	mov	r3, r0
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	3708      	adds	r7, #8
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}

080148ac <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 80148ac:	b480      	push	{r7}
 80148ae:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 80148b0:	2300      	movs	r3, #0
#endif

}
 80148b2:	4618      	mov	r0, r3
 80148b4:	46bd      	mov	sp, r7
 80148b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ba:	4770      	bx	lr

080148bc <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 80148bc:	b480      	push	{r7}
 80148be:	b083      	sub	sp, #12
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
}
 80148c4:	bf00      	nop
 80148c6:	370c      	adds	r7, #12
 80148c8:	46bd      	mov	sp, r7
 80148ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ce:	4770      	bx	lr

080148d0 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 80148d0:	b480      	push	{r7}
 80148d2:	b083      	sub	sp, #12
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
}
 80148d8:	bf00      	nop
 80148da:	370c      	adds	r7, #12
 80148dc:	46bd      	mov	sp, r7
 80148de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e2:	4770      	bx	lr

080148e4 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 80148e4:	b480      	push	{r7}
 80148e6:	b083      	sub	sp, #12
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
}
 80148ec:	bf00      	nop
 80148ee:	370c      	adds	r7, #12
 80148f0:	46bd      	mov	sp, r7
 80148f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f6:	4770      	bx	lr

080148f8 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b084      	sub	sp, #16
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	60f8      	str	r0, [r7, #12]
 8014900:	60b9      	str	r1, [r7, #8]
 8014902:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8014904:	4a25      	ldr	r2, [pc, #148]	; (801499c <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	601a      	str	r2, [r3, #0]
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	68ba      	ldr	r2, [r7, #8]
 801490e:	605a      	str	r2, [r3, #4]
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	609a      	str	r2, [r3, #8]
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	2200      	movs	r2, #0
 801491a:	731a      	strb	r2, [r3, #12]
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	2200      	movs	r2, #0
 8014920:	735a      	strb	r2, [r3, #13]
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	2200      	movs	r2, #0
 8014926:	739a      	strb	r2, [r3, #14]
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	2200      	movs	r2, #0
 801492c:	73da      	strb	r2, [r3, #15]
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	2200      	movs	r2, #0
 8014932:	741a      	strb	r2, [r3, #16]
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	2200      	movs	r2, #0
 8014938:	745a      	strb	r2, [r3, #17]
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	2200      	movs	r2, #0
 801493e:	749a      	strb	r2, [r3, #18]
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	2200      	movs	r2, #0
 8014944:	74da      	strb	r2, [r3, #19]
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	2200      	movs	r2, #0
 801494a:	751a      	strb	r2, [r3, #20]
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	2200      	movs	r2, #0
 8014950:	755a      	strb	r2, [r3, #21]
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	2200      	movs	r2, #0
 8014956:	759a      	strb	r2, [r3, #22]
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	2200      	movs	r2, #0
 801495c:	75da      	strb	r2, [r3, #23]
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	2200      	movs	r2, #0
 8014962:	761a      	strb	r2, [r3, #24]
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	2201      	movs	r2, #1
 8014968:	61da      	str	r2, [r3, #28]
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	2200      	movs	r2, #0
 801496e:	621a      	str	r2, [r3, #32]
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	2200      	movs	r2, #0
 8014974:	625a      	str	r2, [r3, #36]	; 0x24
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	2200      	movs	r2, #0
 801497a:	629a      	str	r2, [r3, #40]	; 0x28
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	2200      	movs	r2, #0
 8014980:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	3330      	adds	r3, #48	; 0x30
 8014988:	4905      	ldr	r1, [pc, #20]	; (80149a0 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 801498a:	4618      	mov	r0, r3
 801498c:	f7f7 ff61 	bl	800c852 <_ZN12SimpleStringC1EPKc>
{
}
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	4618      	mov	r0, r3
 8014994:	3710      	adds	r7, #16
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}
 801499a:	bf00      	nop
 801499c:	080284ec 	.word	0x080284ec
 80149a0:	08024d24 	.word	0x08024d24

080149a4 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b082      	sub	sp, #8
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	4618      	mov	r0, r3
 80149b0:	f7f8 fb07 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	4618      	mov	r0, r3
 80149b8:	3708      	adds	r7, #8
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd80      	pop	{r7, pc}
	...

080149c0 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 80149c0:	b590      	push	{r4, r7, lr}
 80149c2:	b085      	sub	sp, #20
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	6078      	str	r0, [r7, #4]
 80149c8:	4a20      	ldr	r2, [pc, #128]	; (8014a4c <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d015      	beq.n	8014a02 <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149da:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149e0:	4618      	mov	r0, r3
 80149e2:	f00a fda2 	bl	801f52a <_ZNK10TestFilter7getNextEv>
 80149e6:	4602      	mov	r2, r0
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 80149ec:	68fc      	ldr	r4, [r7, #12]
 80149ee:	2c00      	cmp	r4, #0
 80149f0:	d0ed      	beq.n	80149ce <_ZN20CommandLineArgumentsD1Ev+0xe>
 80149f2:	4620      	mov	r0, r4
 80149f4:	f7ff ffd6 	bl	80149a4 <_ZN10TestFilterD1Ev>
 80149f8:	2110      	movs	r1, #16
 80149fa:	4620      	mov	r0, r4
 80149fc:	f7f5 fb7a 	bl	800a0f4 <_ZdlPvj>
    while(groupFilters_) {
 8014a00:	e7e5      	b.n	80149ce <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d015      	beq.n	8014a36 <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a0e:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a14:	4618      	mov	r0, r3
 8014a16:	f00a fd88 	bl	801f52a <_ZNK10TestFilter7getNextEv>
 8014a1a:	4602      	mov	r2, r0
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8014a20:	68bc      	ldr	r4, [r7, #8]
 8014a22:	2c00      	cmp	r4, #0
 8014a24:	d0ed      	beq.n	8014a02 <_ZN20CommandLineArgumentsD1Ev+0x42>
 8014a26:	4620      	mov	r0, r4
 8014a28:	f7ff ffbc 	bl	80149a4 <_ZN10TestFilterD1Ev>
 8014a2c:	2110      	movs	r1, #16
 8014a2e:	4620      	mov	r0, r4
 8014a30:	f7f5 fb60 	bl	800a0f4 <_ZdlPvj>
    while(nameFilters_) {
 8014a34:	e7e5      	b.n	8014a02 <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	3330      	adds	r3, #48	; 0x30
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	f7f8 fac1 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    }
}
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	4618      	mov	r0, r3
 8014a44:	3714      	adds	r7, #20
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd90      	pop	{r4, r7, pc}
 8014a4a:	bf00      	nop
 8014a4c:	080284ec 	.word	0x080284ec

08014a50 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b082      	sub	sp, #8
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
}
 8014a58:	6878      	ldr	r0, [r7, #4]
 8014a5a:	f7ff ffb1 	bl	80149c0 <_ZN20CommandLineArgumentsD1Ev>
 8014a5e:	2138      	movs	r1, #56	; 0x38
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	f7f5 fb47 	bl	800a0f4 <_ZdlPvj>
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	4618      	mov	r0, r3
 8014a6a:	3708      	adds	r7, #8
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}

08014a70 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 8014a70:	b5b0      	push	{r4, r5, r7, lr}
 8014a72:	b0be      	sub	sp, #248	; 0xf8
 8014a74:	af02      	add	r7, sp, #8
 8014a76:	6078      	str	r0, [r7, #4]
 8014a78:	6039      	str	r1, [r7, #0]
 8014a7a:	2400      	movs	r4, #0
    bool correctParameters = true;
 8014a7c:	2301      	movs	r3, #1
 8014a7e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 8014a82:	2301      	movs	r3, #1
 8014a84:	613b      	str	r3, [r7, #16]
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	685a      	ldr	r2, [r3, #4]
 8014a8a:	693b      	ldr	r3, [r7, #16]
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	f340 83a4 	ble.w	80151da <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	689a      	ldr	r2, [r3, #8]
 8014a96:	693b      	ldr	r3, [r7, #16]
 8014a98:	009b      	lsls	r3, r3, #2
 8014a9a:	4413      	add	r3, r2
 8014a9c:	681a      	ldr	r2, [r3, #0]
 8014a9e:	f107 0308 	add.w	r3, r7, #8
 8014aa2:	4611      	mov	r1, r2
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	f7f7 fed4 	bl	800c852 <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8014aaa:	f107 0314 	add.w	r3, r7, #20
 8014aae:	49c8      	ldr	r1, [pc, #800]	; (8014dd0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7f7 fece 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014ab6:	f107 0214 	add.w	r2, r7, #20
 8014aba:	f107 0308 	add.w	r3, r7, #8
 8014abe:	4611      	mov	r1, r2
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7f8 fa8a 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	461d      	mov	r5, r3
 8014aca:	f107 0314 	add.w	r3, r7, #20
 8014ace:	4618      	mov	r0, r3
 8014ad0:	f7f8 fa77 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014ad4:	2d00      	cmp	r5, #0
 8014ad6:	d006      	beq.n	8014ae6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2201      	movs	r2, #1
 8014adc:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014ae4:	e366      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 8014ae6:	f107 031c 	add.w	r3, r7, #28
 8014aea:	49ba      	ldr	r1, [pc, #744]	; (8014dd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8014aec:	4618      	mov	r0, r3
 8014aee:	f7f7 feb0 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014af2:	f107 021c 	add.w	r2, r7, #28
 8014af6:	f107 0308 	add.w	r3, r7, #8
 8014afa:	4611      	mov	r1, r2
 8014afc:	4618      	mov	r0, r3
 8014afe:	f7f8 fa6c 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8014b02:	4603      	mov	r3, r0
 8014b04:	461d      	mov	r5, r3
 8014b06:	f107 031c 	add.w	r3, r7, #28
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7f8 fa59 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014b10:	2d00      	cmp	r5, #0
 8014b12:	d003      	beq.n	8014b1c <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	2201      	movs	r2, #1
 8014b18:	735a      	strb	r2, [r3, #13]
 8014b1a:	e34b      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8014b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b20:	49ad      	ldr	r1, [pc, #692]	; (8014dd8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 8014b22:	4618      	mov	r0, r3
 8014b24:	f7f7 fe95 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014b28:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014b2c:	f107 0308 	add.w	r3, r7, #8
 8014b30:	4611      	mov	r1, r2
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7f8 fa51 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	461d      	mov	r5, r3
 8014b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b40:	4618      	mov	r0, r3
 8014b42:	f7f8 fa3e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014b46:	2d00      	cmp	r5, #0
 8014b48:	d003      	beq.n	8014b52 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	2201      	movs	r2, #1
 8014b4e:	739a      	strb	r2, [r3, #14]
 8014b50:	e330      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 8014b52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014b56:	49a1      	ldr	r1, [pc, #644]	; (8014ddc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f7f7 fe7a 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014b5e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014b62:	f107 0308 	add.w	r3, r7, #8
 8014b66:	4611      	mov	r1, r2
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f7f8 fa36 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	461d      	mov	r5, r3
 8014b72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014b76:	4618      	mov	r0, r3
 8014b78:	f7f8 fa23 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014b7c:	2d00      	cmp	r5, #0
 8014b7e:	d003      	beq.n	8014b88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	2201      	movs	r2, #1
 8014b84:	73da      	strb	r2, [r3, #15]
 8014b86:	e315      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 8014b88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014b8c:	4994      	ldr	r1, [pc, #592]	; (8014de0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 8014b8e:	4618      	mov	r0, r3
 8014b90:	f7f7 fe5f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014b94:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8014b98:	f107 0308 	add.w	r3, r7, #8
 8014b9c:	4611      	mov	r1, r2
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f7f8 fa1b 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	461d      	mov	r5, r3
 8014ba8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014bac:	4618      	mov	r0, r3
 8014bae:	f7f8 fa08 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014bb2:	2d00      	cmp	r5, #0
 8014bb4:	d003      	beq.n	8014bbe <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	2201      	movs	r2, #1
 8014bba:	741a      	strb	r2, [r3, #16]
 8014bbc:	e2fa      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 8014bbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014bc2:	4988      	ldr	r1, [pc, #544]	; (8014de4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7f7 fe44 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014bca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8014bce:	f107 0308 	add.w	r3, r7, #8
 8014bd2:	4611      	mov	r1, r2
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7f8 fa00 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	461d      	mov	r5, r3
 8014bde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014be2:	4618      	mov	r0, r3
 8014be4:	f7f8 f9ed 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014be8:	2d00      	cmp	r5, #0
 8014bea:	d003      	beq.n	8014bf4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2201      	movs	r2, #1
 8014bf0:	755a      	strb	r2, [r3, #21]
 8014bf2:	e2df      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8014bf4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014bf8:	497b      	ldr	r1, [pc, #492]	; (8014de8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7f7 fe29 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014c00:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8014c04:	f107 0308 	add.w	r3, r7, #8
 8014c08:	4611      	mov	r1, r2
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f7f8 f9e5 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8014c10:	4603      	mov	r3, r0
 8014c12:	461d      	mov	r5, r3
 8014c14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014c18:	4618      	mov	r0, r3
 8014c1a:	f7f8 f9d2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014c1e:	2d00      	cmp	r5, #0
 8014c20:	d003      	beq.n	8014c2a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	2201      	movs	r2, #1
 8014c26:	745a      	strb	r2, [r3, #17]
 8014c28:	e2c4      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8014c2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014c2e:	496f      	ldr	r1, [pc, #444]	; (8014dec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8014c30:	4618      	mov	r0, r3
 8014c32:	f7f7 fe0e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014c36:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8014c3a:	f107 0308 	add.w	r3, r7, #8
 8014c3e:	4611      	mov	r1, r2
 8014c40:	4618      	mov	r0, r3
 8014c42:	f7f8 f9ca 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8014c46:	4603      	mov	r3, r0
 8014c48:	461d      	mov	r5, r3
 8014c4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7f8 f9b7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014c54:	2d00      	cmp	r5, #0
 8014c56:	d003      	beq.n	8014c60 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2201      	movs	r2, #1
 8014c5c:	749a      	strb	r2, [r3, #18]
 8014c5e:	e2a9      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 8014c60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014c64:	4962      	ldr	r1, [pc, #392]	; (8014df0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7f7 fdf3 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014c6c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8014c70:	f107 0308 	add.w	r3, r7, #8
 8014c74:	4611      	mov	r1, r2
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7f8 f9af 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	461d      	mov	r5, r3
 8014c80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014c84:	4618      	mov	r0, r3
 8014c86:	f7f8 f99c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014c8a:	2d00      	cmp	r5, #0
 8014c8c:	d003      	beq.n	8014c96 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	2201      	movs	r2, #1
 8014c92:	74da      	strb	r2, [r3, #19]
 8014c94:	e28e      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 8014c96:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014c9a:	4956      	ldr	r1, [pc, #344]	; (8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	f7f7 fdd8 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014ca2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8014ca6:	f107 0308 	add.w	r3, r7, #8
 8014caa:	4611      	mov	r1, r2
 8014cac:	4618      	mov	r0, r3
 8014cae:	f7f8 f994 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	461d      	mov	r5, r3
 8014cb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7f8 f981 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014cc0:	2d00      	cmp	r5, #0
 8014cc2:	d003      	beq.n	8014ccc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2201      	movs	r2, #1
 8014cc8:	751a      	strb	r2, [r3, #20]
 8014cca:	e273      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8014ccc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014cd0:	4949      	ldr	r1, [pc, #292]	; (8014df8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f7f7 fdbd 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014cd8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8014cdc:	f107 0308 	add.w	r3, r7, #8
 8014ce0:	4611      	mov	r1, r2
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f7f8 f979 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	461d      	mov	r5, r3
 8014cec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f7f8 f966 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014cf6:	2d00      	cmp	r5, #0
 8014cf8:	d003      	beq.n	8014d02 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	2201      	movs	r2, #1
 8014cfe:	759a      	strb	r2, [r3, #22]
 8014d00:	e258      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 8014d02:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014d06:	493d      	ldr	r1, [pc, #244]	; (8014dfc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f7f7 fda2 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014d0e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8014d12:	f107 0308 	add.w	r3, r7, #8
 8014d16:	4611      	mov	r1, r2
 8014d18:	4618      	mov	r0, r3
 8014d1a:	f7f7 fe5e 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 8014d1e:	4603      	mov	r3, r0
 8014d20:	461d      	mov	r5, r3
 8014d22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014d26:	4618      	mov	r0, r3
 8014d28:	f7f8 f94b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014d2c:	2d00      	cmp	r5, #0
 8014d2e:	d009      	beq.n	8014d44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	6859      	ldr	r1, [r3, #4]
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	689a      	ldr	r2, [r3, #8]
 8014d38:	f107 0310 	add.w	r3, r7, #16
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	f000 fb33 	bl	80153a8 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 8014d42:	e237      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 8014d44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014d48:	492d      	ldr	r1, [pc, #180]	; (8014e00 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f7f7 fd81 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014d50:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8014d54:	f107 0308 	add.w	r3, r7, #8
 8014d58:	4611      	mov	r1, r2
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7f7 fe3d 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 8014d60:	4603      	mov	r3, r0
 8014d62:	461d      	mov	r5, r3
 8014d64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7f8 f92a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014d6e:	2d00      	cmp	r5, #0
 8014d70:	d009      	beq.n	8014d86 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	6859      	ldr	r1, [r3, #4]
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	689a      	ldr	r2, [r3, #8]
 8014d7a:	f107 0310 	add.w	r3, r7, #16
 8014d7e:	6878      	ldr	r0, [r7, #4]
 8014d80:	f000 fc40 	bl	8015604 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 8014d84:	e216      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 8014d86:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8014d8a:	491e      	ldr	r1, [pc, #120]	; (8014e04 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f7f7 fd60 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014d92:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8014d96:	f107 0308 	add.w	r3, r7, #8
 8014d9a:	4611      	mov	r1, r2
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f7f7 fe1c 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 8014da2:	4603      	mov	r3, r0
 8014da4:	461d      	mov	r5, r3
 8014da6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7f8 f909 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014db0:	2d00      	cmp	r5, #0
 8014db2:	d029      	beq.n	8014e08 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	6859      	ldr	r1, [r3, #4]
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	689a      	ldr	r2, [r3, #8]
 8014dbc:	f107 0310 	add.w	r3, r7, #16
 8014dc0:	6878      	ldr	r0, [r7, #4]
 8014dc2:	f000 fc61 	bl	8015688 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014dcc:	e1f2      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8014dce:	bf00      	nop
 8014dd0:	08024d28 	.word	0x08024d28
 8014dd4:	08024d2c 	.word	0x08024d2c
 8014dd8:	08024d30 	.word	0x08024d30
 8014ddc:	08024d34 	.word	0x08024d34
 8014de0:	08024d38 	.word	0x08024d38
 8014de4:	08024d3c 	.word	0x08024d3c
 8014de8:	08024d40 	.word	0x08024d40
 8014dec:	08024d44 	.word	0x08024d44
 8014df0:	08024d48 	.word	0x08024d48
 8014df4:	08024d4c 	.word	0x08024d4c
 8014df8:	08024d50 	.word	0x08024d50
 8014dfc:	08024d54 	.word	0x08024d54
 8014e00:	08024d58 	.word	0x08024d58
 8014e04:	08024d5c 	.word	0x08024d5c
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8014e08:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014e0c:	49b9      	ldr	r1, [pc, #740]	; (80150f4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8014e0e:	4618      	mov	r0, r3
 8014e10:	f7f7 fd1f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014e14:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8014e18:	f107 0308 	add.w	r3, r7, #8
 8014e1c:	4611      	mov	r1, r2
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7f7 fddb 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 8014e24:	4603      	mov	r3, r0
 8014e26:	461d      	mov	r5, r3
 8014e28:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7f8 f8c8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014e32:	2d00      	cmp	r5, #0
 8014e34:	d009      	beq.n	8014e4a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	6859      	ldr	r1, [r3, #4]
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	689a      	ldr	r2, [r3, #8]
 8014e3e:	f107 0310 	add.w	r3, r7, #16
 8014e42:	6878      	ldr	r0, [r7, #4]
 8014e44:	f000 fccc 	bl	80157e0 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8014e48:	e1b4      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8014e4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014e4e:	49aa      	ldr	r1, [pc, #680]	; (80150f8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 8014e50:	4618      	mov	r0, r3
 8014e52:	f7f7 fcfe 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014e56:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8014e5a:	f107 0308 	add.w	r3, r7, #8
 8014e5e:	4611      	mov	r1, r2
 8014e60:	4618      	mov	r0, r3
 8014e62:	f7f7 fdba 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 8014e66:	4603      	mov	r3, r0
 8014e68:	461d      	mov	r5, r3
 8014e6a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f7f8 f8a7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014e74:	2d00      	cmp	r5, #0
 8014e76:	d009      	beq.n	8014e8c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	6859      	ldr	r1, [r3, #4]
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	689a      	ldr	r2, [r3, #8]
 8014e80:	f107 0310 	add.w	r3, r7, #16
 8014e84:	6878      	ldr	r0, [r7, #4]
 8014e86:	f000 fcf1 	bl	801586c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 8014e8a:	e193      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 8014e8c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014e90:	499a      	ldr	r1, [pc, #616]	; (80150fc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 8014e92:	4618      	mov	r0, r3
 8014e94:	f7f7 fcdd 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014e98:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8014e9c:	f107 0308 	add.w	r3, r7, #8
 8014ea0:	4611      	mov	r1, r2
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f7f7 fd99 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	461d      	mov	r5, r3
 8014eac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7f8 f886 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014eb6:	2d00      	cmp	r5, #0
 8014eb8:	d009      	beq.n	8014ece <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	6859      	ldr	r1, [r3, #4]
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	689a      	ldr	r2, [r3, #8]
 8014ec2:	f107 0310 	add.w	r3, r7, #16
 8014ec6:	6878      	ldr	r0, [r7, #4]
 8014ec8:	f000 fd16 	bl	80158f8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8014ecc:	e172      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8014ece:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014ed2:	498b      	ldr	r1, [pc, #556]	; (8015100 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f7f7 fcbc 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014eda:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8014ede:	f107 0308 	add.w	r3, r7, #8
 8014ee2:	4611      	mov	r1, r2
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f7f7 fd78 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 8014eea:	4603      	mov	r3, r0
 8014eec:	461d      	mov	r5, r3
 8014eee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	f7f8 f865 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014ef8:	2d00      	cmp	r5, #0
 8014efa:	d009      	beq.n	8014f10 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	6859      	ldr	r1, [r3, #4]
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	689a      	ldr	r2, [r3, #8]
 8014f04:	f107 0310 	add.w	r3, r7, #16
 8014f08:	6878      	ldr	r0, [r7, #4]
 8014f0a:	f000 fd3d 	bl	8015988 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8014f0e:	e151      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8014f10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014f14:	497b      	ldr	r1, [pc, #492]	; (8015104 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8014f16:	4618      	mov	r0, r3
 8014f18:	f7f7 fc9b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014f1c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8014f20:	f107 0308 	add.w	r3, r7, #8
 8014f24:	4611      	mov	r1, r2
 8014f26:	4618      	mov	r0, r3
 8014f28:	f7f7 fd57 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	461d      	mov	r5, r3
 8014f30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014f34:	4618      	mov	r0, r3
 8014f36:	f7f8 f844 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014f3a:	2d00      	cmp	r5, #0
 8014f3c:	d009      	beq.n	8014f52 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	6859      	ldr	r1, [r3, #4]
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	689a      	ldr	r2, [r3, #8]
 8014f46:	f107 0310 	add.w	r3, r7, #16
 8014f4a:	6878      	ldr	r0, [r7, #4]
 8014f4c:	f000 fd5e 	bl	8015a0c <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8014f50:	e130      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 8014f52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014f56:	496c      	ldr	r1, [pc, #432]	; (8015108 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f7f7 fc7a 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014f5e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8014f62:	f107 0308 	add.w	r3, r7, #8
 8014f66:	4611      	mov	r1, r2
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f7f7 fd36 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 8014f6e:	4603      	mov	r3, r0
 8014f70:	461d      	mov	r5, r3
 8014f72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014f76:	4618      	mov	r0, r3
 8014f78:	f7f8 f823 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014f7c:	2d00      	cmp	r5, #0
 8014f7e:	d009      	beq.n	8014f94 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	6859      	ldr	r1, [r3, #4]
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	689a      	ldr	r2, [r3, #8]
 8014f88:	f107 0310 	add.w	r3, r7, #16
 8014f8c:	6878      	ldr	r0, [r7, #4]
 8014f8e:	f000 fd83 	bl	8015a98 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 8014f92:	e10f      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8014f94:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8014f98:	495c      	ldr	r1, [pc, #368]	; (801510c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f7f7 fc59 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014fa0:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8014fa4:	f107 0308 	add.w	r3, r7, #8
 8014fa8:	4611      	mov	r1, r2
 8014faa:	4618      	mov	r0, r3
 8014fac:	f7f7 fd15 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	461d      	mov	r5, r3
 8014fb4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f7f8 f802 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8014fbe:	2d00      	cmp	r5, #0
 8014fc0:	d009      	beq.n	8014fd6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	6859      	ldr	r1, [r3, #4]
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	689a      	ldr	r2, [r3, #8]
 8014fca:	f107 0310 	add.w	r3, r7, #16
 8014fce:	6878      	ldr	r0, [r7, #4]
 8014fd0:	f000 fda8 	bl	8015b24 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8014fd4:	e0ee      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8014fd6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014fda:	494d      	ldr	r1, [pc, #308]	; (8015110 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7f7 fc38 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8014fe2:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8014fe6:	f107 0308 	add.w	r3, r7, #8
 8014fea:	4611      	mov	r1, r2
 8014fec:	4618      	mov	r0, r3
 8014fee:	f7f7 fcf4 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	461d      	mov	r5, r3
 8014ff6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f7f7 ffe1 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8015000:	2d00      	cmp	r5, #0
 8015002:	d00c      	beq.n	801501e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	6859      	ldr	r1, [r3, #4]
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	689a      	ldr	r2, [r3, #8]
 801500c:	f107 0310 	add.w	r3, r7, #16
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f000 fa29 	bl	8015468 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8015016:	4603      	mov	r3, r0
 8015018:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801501c:	e0ca      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 801501e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8015022:	493c      	ldr	r1, [pc, #240]	; (8015114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8015024:	4618      	mov	r0, r3
 8015026:	f7f7 fc14 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801502a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801502e:	f107 0308 	add.w	r3, r7, #8
 8015032:	4611      	mov	r1, r2
 8015034:	4618      	mov	r0, r3
 8015036:	f7f7 fcd0 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 801503a:	4603      	mov	r3, r0
 801503c:	461d      	mov	r5, r3
 801503e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8015042:	4618      	mov	r0, r3
 8015044:	f7f7 ffbd 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8015048:	2d00      	cmp	r5, #0
 801504a:	d00b      	beq.n	8015064 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	6859      	ldr	r1, [r3, #4]
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	689a      	ldr	r2, [r3, #8]
 8015054:	f107 0310 	add.w	r3, r7, #16
 8015058:	482e      	ldr	r0, [pc, #184]	; (8015114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 801505a:	9000      	str	r0, [sp, #0]
 801505c:	6878      	ldr	r0, [r7, #4]
 801505e:	f000 fda9 	bl	8015bb4 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8015062:	e0a7      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8015064:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015068:	492b      	ldr	r1, [pc, #172]	; (8015118 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 801506a:	4618      	mov	r0, r3
 801506c:	f7f7 fbf1 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8015070:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8015074:	f107 0308 	add.w	r3, r7, #8
 8015078:	4611      	mov	r1, r2
 801507a:	4618      	mov	r0, r3
 801507c:	f7f7 fcad 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 8015080:	4603      	mov	r3, r0
 8015082:	461d      	mov	r5, r3
 8015084:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015088:	4618      	mov	r0, r3
 801508a:	f7f7 ff9a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801508e:	2d00      	cmp	r5, #0
 8015090:	d00b      	beq.n	80150aa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	6859      	ldr	r1, [r3, #4]
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	689a      	ldr	r2, [r3, #8]
 801509a:	f107 0310 	add.w	r3, r7, #16
 801509e:	481e      	ldr	r0, [pc, #120]	; (8015118 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 80150a0:	9000      	str	r0, [sp, #0]
 80150a2:	6878      	ldr	r0, [r7, #4]
 80150a4:	f000 fd86 	bl	8015bb4 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 80150a8:	e084      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 80150aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80150ae:	491b      	ldr	r1, [pc, #108]	; (801511c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 80150b0:	4618      	mov	r0, r3
 80150b2:	f7f7 fbce 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80150b6:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80150ba:	f107 0308 	add.w	r3, r7, #8
 80150be:	4611      	mov	r1, r2
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7f7 fc8a 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 80150c6:	4603      	mov	r3, r0
 80150c8:	461d      	mov	r5, r3
 80150ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80150ce:	4618      	mov	r0, r3
 80150d0:	f7f7 ff77 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80150d4:	2d00      	cmp	r5, #0
 80150d6:	d023      	beq.n	8015120 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	6859      	ldr	r1, [r3, #4]
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	689a      	ldr	r2, [r3, #8]
 80150e0:	f107 0310 	add.w	r3, r7, #16
 80150e4:	6878      	ldr	r0, [r7, #4]
 80150e6:	f000 fe3b 	bl	8015d60 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 80150ea:	4603      	mov	r3, r0
 80150ec:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80150f0:	e060      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 80150f2:	bf00      	nop
 80150f4:	08024d60 	.word	0x08024d60
 80150f8:	08024d64 	.word	0x08024d64
 80150fc:	08024d68 	.word	0x08024d68
 8015100:	08024d70 	.word	0x08024d70
 8015104:	08024d74 	.word	0x08024d74
 8015108:	08024d78 	.word	0x08024d78
 801510c:	08024d7c 	.word	0x08024d7c
 8015110:	08024d84 	.word	0x08024d84
 8015114:	08024d88 	.word	0x08024d88
 8015118:	08024d90 	.word	0x08024d90
 801511c:	08024da0 	.word	0x08024da0
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8015120:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8015124:	4930      	ldr	r1, [pc, #192]	; (80151e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 8015126:	4618      	mov	r0, r3
 8015128:	f7f7 fb93 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801512c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8015130:	f107 0308 	add.w	r3, r7, #8
 8015134:	4611      	mov	r1, r2
 8015136:	4618      	mov	r0, r3
 8015138:	f7f7 fc4f 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 801513c:	4603      	mov	r3, r0
 801513e:	461d      	mov	r5, r3
 8015140:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8015144:	4618      	mov	r0, r3
 8015146:	f7f7 ff3c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801514a:	2d00      	cmp	r5, #0
 801514c:	d00e      	beq.n	801516c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 801514e:	683b      	ldr	r3, [r7, #0]
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	331c      	adds	r3, #28
 8015154:	681d      	ldr	r5, [r3, #0]
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	6859      	ldr	r1, [r3, #4]
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	689a      	ldr	r2, [r3, #8]
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	6838      	ldr	r0, [r7, #0]
 8015162:	47a8      	blx	r5
 8015164:	4603      	mov	r3, r0
 8015166:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801516a:	e023      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 801516c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8015170:	491e      	ldr	r1, [pc, #120]	; (80151ec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 8015172:	4618      	mov	r0, r3
 8015174:	f7f7 fb6d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8015178:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801517c:	f107 0308 	add.w	r3, r7, #8
 8015180:	4611      	mov	r1, r2
 8015182:	4618      	mov	r0, r3
 8015184:	f7f7 fc29 	bl	800c9da <_ZNK12SimpleString10startsWithERKS_>
 8015188:	4603      	mov	r3, r0
 801518a:	461d      	mov	r5, r3
 801518c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8015190:	4618      	mov	r0, r3
 8015192:	f7f7 ff16 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8015196:	2d00      	cmp	r5, #0
 8015198:	d009      	beq.n	80151ae <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	6859      	ldr	r1, [r3, #4]
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	689a      	ldr	r2, [r3, #8]
 80151a2:	f107 0310 	add.w	r3, r7, #16
 80151a6:	6878      	ldr	r0, [r7, #4]
 80151a8:	f000 fd98 	bl	8015cdc <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 80151ac:	e002      	b.n	80151b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 80151ae:	2300      	movs	r3, #0
 80151b0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 80151b4:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d102      	bne.n	80151c2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 80151bc:	2400      	movs	r4, #0
 80151be:	2500      	movs	r5, #0
 80151c0:	e000      	b.n	80151c4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 80151c2:	2501      	movs	r5, #1
 80151c4:	f107 0308 	add.w	r3, r7, #8
 80151c8:	4618      	mov	r0, r3
 80151ca:	f7f7 fefa 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80151ce:	2d01      	cmp	r5, #1
 80151d0:	d104      	bne.n	80151dc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 80151d2:	693b      	ldr	r3, [r7, #16]
 80151d4:	3301      	adds	r3, #1
 80151d6:	613b      	str	r3, [r7, #16]
 80151d8:	e455      	b.n	8014a86 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 80151da:	2401      	movs	r4, #1
 80151dc:	4623      	mov	r3, r4
}
 80151de:	4618      	mov	r0, r3
 80151e0:	37f0      	adds	r7, #240	; 0xf0
 80151e2:	46bd      	mov	sp, r7
 80151e4:	bdb0      	pop	{r4, r5, r7, pc}
 80151e6:	bf00      	nop
 80151e8:	08024d38 	.word	0x08024d38
 80151ec:	08024da4 	.word	0x08024da4

080151f0 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 80151f0:	b480      	push	{r7}
 80151f2:	b083      	sub	sp, #12
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 80151f8:	4b03      	ldr	r3, [pc, #12]	; (8015208 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	370c      	adds	r7, #12
 80151fe:	46bd      	mov	sp, r7
 8015200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015204:	4770      	bx	lr
 8015206:	bf00      	nop
 8015208:	08024da8 	.word	0x08024da8

0801520c <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 801520c:	b480      	push	{r7}
 801520e:	b083      	sub	sp, #12
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8015214:	4b03      	ldr	r3, [pc, #12]	; (8015224 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 8015216:	4618      	mov	r0, r3
 8015218:	370c      	adds	r7, #12
 801521a:	46bd      	mov	sp, r7
 801521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015220:	4770      	bx	lr
 8015222:	bf00      	nop
 8015224:	08024ed8 	.word	0x08024ed8

08015228 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8015228:	b480      	push	{r7}
 801522a:	b083      	sub	sp, #12
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	7b1b      	ldrb	r3, [r3, #12]
}
 8015234:	4618      	mov	r0, r3
 8015236:	370c      	adds	r7, #12
 8015238:	46bd      	mov	sp, r7
 801523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523e:	4770      	bx	lr

08015240 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8015240:	b480      	push	{r7}
 8015242:	b083      	sub	sp, #12
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
    return verbose_;
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	7b5b      	ldrb	r3, [r3, #13]
}
 801524c:	4618      	mov	r0, r3
 801524e:	370c      	adds	r7, #12
 8015250:	46bd      	mov	sp, r7
 8015252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015256:	4770      	bx	lr

08015258 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8015258:	b480      	push	{r7}
 801525a:	b083      	sub	sp, #12
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	7b9b      	ldrb	r3, [r3, #14]
}
 8015264:	4618      	mov	r0, r3
 8015266:	370c      	adds	r7, #12
 8015268:	46bd      	mov	sp, r7
 801526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526e:	4770      	bx	lr

08015270 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8015270:	b480      	push	{r7}
 8015272:	b083      	sub	sp, #12
 8015274:	af00      	add	r7, sp, #0
 8015276:	6078      	str	r0, [r7, #4]
    return color_;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	7bdb      	ldrb	r3, [r3, #15]
}
 801527c:	4618      	mov	r0, r3
 801527e:	370c      	adds	r7, #12
 8015280:	46bd      	mov	sp, r7
 8015282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015286:	4770      	bx	lr

08015288 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 8015288:	b480      	push	{r7}
 801528a:	b083      	sub	sp, #12
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	7c5b      	ldrb	r3, [r3, #17]
}
 8015294:	4618      	mov	r0, r3
 8015296:	370c      	adds	r7, #12
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr

080152a0 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 80152a0:	b480      	push	{r7}
 80152a2:	b083      	sub	sp, #12
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	7c9b      	ldrb	r3, [r3, #18]
}
 80152ac:	4618      	mov	r0, r3
 80152ae:	370c      	adds	r7, #12
 80152b0:	46bd      	mov	sp, r7
 80152b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b6:	4770      	bx	lr

080152b8 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 80152b8:	b480      	push	{r7}
 80152ba:	b083      	sub	sp, #12
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	7cdb      	ldrb	r3, [r3, #19]
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	370c      	adds	r7, #12
 80152c8:	46bd      	mov	sp, r7
 80152ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ce:	4770      	bx	lr

080152d0 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 80152d0:	b480      	push	{r7}
 80152d2:	b083      	sub	sp, #12
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	7d1b      	ldrb	r3, [r3, #20]
}
 80152dc:	4618      	mov	r0, r3
 80152de:	370c      	adds	r7, #12
 80152e0:	46bd      	mov	sp, r7
 80152e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e6:	4770      	bx	lr

080152e8 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 80152e8:	b480      	push	{r7}
 80152ea:	b083      	sub	sp, #12
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	7c1b      	ldrb	r3, [r3, #16]
}
 80152f4:	4618      	mov	r0, r3
 80152f6:	370c      	adds	r7, #12
 80152f8:	46bd      	mov	sp, r7
 80152fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fe:	4770      	bx	lr

08015300 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8015300:	b480      	push	{r7}
 8015302:	b083      	sub	sp, #12
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
    return repeat_;
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	69db      	ldr	r3, [r3, #28]
}
 801530c:	4618      	mov	r0, r3
 801530e:	370c      	adds	r7, #12
 8015310:	46bd      	mov	sp, r7
 8015312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015316:	4770      	bx	lr

08015318 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8015318:	b480      	push	{r7}
 801531a:	b083      	sub	sp, #12
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
    return reversing_;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	7d5b      	ldrb	r3, [r3, #21]
}
 8015324:	4618      	mov	r0, r3
 8015326:	370c      	adds	r7, #12
 8015328:	46bd      	mov	sp, r7
 801532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532e:	4770      	bx	lr

08015330 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8015330:	b480      	push	{r7}
 8015332:	b083      	sub	sp, #12
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	7d9b      	ldrb	r3, [r3, #22]
}
 801533c:	4618      	mov	r0, r3
 801533e:	370c      	adds	r7, #12
 8015340:	46bd      	mov	sp, r7
 8015342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015346:	4770      	bx	lr

08015348 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 8015348:	b480      	push	{r7}
 801534a:	b083      	sub	sp, #12
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	7ddb      	ldrb	r3, [r3, #23]
}
 8015354:	4618      	mov	r0, r3
 8015356:	370c      	adds	r7, #12
 8015358:	46bd      	mov	sp, r7
 801535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535e:	4770      	bx	lr

08015360 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8015360:	b480      	push	{r7}
 8015362:	b083      	sub	sp, #12
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	6a1b      	ldr	r3, [r3, #32]
}
 801536c:	4618      	mov	r0, r3
 801536e:	370c      	adds	r7, #12
 8015370:	46bd      	mov	sp, r7
 8015372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015376:	4770      	bx	lr

08015378 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8015378:	b480      	push	{r7}
 801537a:	b083      	sub	sp, #12
 801537c:	af00      	add	r7, sp, #0
 801537e:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8015384:	4618      	mov	r0, r3
 8015386:	370c      	adds	r7, #12
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr

08015390 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8015390:	b480      	push	{r7}
 8015392:	b083      	sub	sp, #12
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801539c:	4618      	mov	r0, r3
 801539e:	370c      	adds	r7, #12
 80153a0:	46bd      	mov	sp, r7
 80153a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a6:	4770      	bx	lr

080153a8 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b086      	sub	sp, #24
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	60f8      	str	r0, [r7, #12]
 80153b0:	60b9      	str	r1, [r7, #8]
 80153b2:	607a      	str	r2, [r7, #4]
 80153b4:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	2200      	movs	r2, #0
 80153ba:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	009b      	lsls	r3, r3, #2
 80153c2:	687a      	ldr	r2, [r7, #4]
 80153c4:	4413      	add	r3, r2
 80153c6:	681a      	ldr	r2, [r3, #0]
 80153c8:	f107 0310 	add.w	r3, r7, #16
 80153cc:	4611      	mov	r1, r2
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7f7 fa3f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 80153d4:	f107 0310 	add.w	r3, r7, #16
 80153d8:	4618      	mov	r0, r3
 80153da:	f7f7 fdd1 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 80153de:	4603      	mov	r3, r0
 80153e0:	2b02      	cmp	r3, #2
 80153e2:	bf8c      	ite	hi
 80153e4:	2301      	movhi	r3, #1
 80153e6:	2300      	movls	r3, #0
 80153e8:	b2db      	uxtb	r3, r3
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d00e      	beq.n	801540c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 80153ee:	683b      	ldr	r3, [r7, #0]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	009b      	lsls	r3, r3, #2
 80153f4:	687a      	ldr	r2, [r7, #4]
 80153f6:	4413      	add	r3, r2
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	3302      	adds	r3, #2
 80153fc:	4618      	mov	r0, r3
 80153fe:	f7f7 f824 	bl	800c44a <_ZN12SimpleString4AtoIEPKc>
 8015402:	4603      	mov	r3, r0
 8015404:	461a      	mov	r2, r3
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	61da      	str	r2, [r3, #28]
 801540a:	e01c      	b.n	8015446 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 801540c:	683b      	ldr	r3, [r7, #0]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	3301      	adds	r3, #1
 8015412:	68ba      	ldr	r2, [r7, #8]
 8015414:	429a      	cmp	r2, r3
 8015416:	dd16      	ble.n	8015446 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	3301      	adds	r3, #1
 801541e:	009b      	lsls	r3, r3, #2
 8015420:	687a      	ldr	r2, [r7, #4]
 8015422:	4413      	add	r3, r2
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	4618      	mov	r0, r3
 8015428:	f7f7 f80f 	bl	800c44a <_ZN12SimpleString4AtoIEPKc>
 801542c:	4603      	mov	r3, r0
 801542e:	461a      	mov	r2, r3
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	69db      	ldr	r3, [r3, #28]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d004      	beq.n	8015446 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	1c5a      	adds	r2, r3, #1
 8015442:	683b      	ldr	r3, [r7, #0]
 8015444:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	69db      	ldr	r3, [r3, #28]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d102      	bne.n	8015454 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	2202      	movs	r2, #2
 8015452:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8015454:	f107 0310 	add.w	r3, r7, #16
 8015458:	4618      	mov	r0, r3
 801545a:	f7f7 fdb2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

}
 801545e:	bf00      	nop
 8015460:	3718      	adds	r7, #24
 8015462:	46bd      	mov	sp, r7
 8015464:	bd80      	pop	{r7, pc}
	...

08015468 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8015468:	b590      	push	{r4, r7, lr}
 801546a:	b089      	sub	sp, #36	; 0x24
 801546c:	af00      	add	r7, sp, #0
 801546e:	60f8      	str	r0, [r7, #12]
 8015470:	60b9      	str	r1, [r7, #8]
 8015472:	607a      	str	r2, [r7, #4]
 8015474:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	2201      	movs	r2, #1
 801547a:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 801547c:	4b34      	ldr	r3, [pc, #208]	; (8015550 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	4798      	blx	r3
 8015482:	4603      	mov	r3, r0
 8015484:	461a      	mov	r2, r3
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	6a1b      	ldr	r3, [r3, #32]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d104      	bne.n	801549c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	6a1b      	ldr	r3, [r3, #32]
 8015496:	1c5a      	adds	r2, r3, #1
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	009b      	lsls	r3, r3, #2
 80154a2:	687a      	ldr	r2, [r7, #4]
 80154a4:	4413      	add	r3, r2
 80154a6:	681a      	ldr	r2, [r3, #0]
 80154a8:	f107 0314 	add.w	r3, r7, #20
 80154ac:	4611      	mov	r1, r2
 80154ae:	4618      	mov	r0, r3
 80154b0:	f7f7 f9cf 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 80154b4:	f107 0314 	add.w	r3, r7, #20
 80154b8:	4618      	mov	r0, r3
 80154ba:	f7f7 fd61 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 80154be:	4603      	mov	r3, r0
 80154c0:	2b02      	cmp	r3, #2
 80154c2:	bf8c      	ite	hi
 80154c4:	2301      	movhi	r3, #1
 80154c6:	2300      	movls	r3, #0
 80154c8:	b2db      	uxtb	r3, r3
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d010      	beq.n	80154f0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	2201      	movs	r2, #1
 80154d2:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 80154d4:	683b      	ldr	r3, [r7, #0]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	009b      	lsls	r3, r3, #2
 80154da:	687a      	ldr	r2, [r7, #4]
 80154dc:	4413      	add	r3, r2
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	3302      	adds	r3, #2
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7f6 ff78 	bl	800c3d8 <_ZN12SimpleString4AtoUEPKc>
 80154e8:	4602      	mov	r2, r0
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	621a      	str	r2, [r3, #32]
 80154ee:	e01e      	b.n	801552e <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	3301      	adds	r3, #1
 80154f6:	68ba      	ldr	r2, [r7, #8]
 80154f8:	429a      	cmp	r2, r3
 80154fa:	dd18      	ble.n	801552e <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 80154fc:	683b      	ldr	r3, [r7, #0]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	3301      	adds	r3, #1
 8015502:	009b      	lsls	r3, r3, #2
 8015504:	687a      	ldr	r2, [r7, #4]
 8015506:	4413      	add	r3, r2
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	4618      	mov	r0, r3
 801550c:	f7f6 ff64 	bl	800c3d8 <_ZN12SimpleString4AtoUEPKc>
 8015510:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 8015512:	69fb      	ldr	r3, [r7, #28]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d00a      	beq.n	801552e <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	2201      	movs	r2, #1
 801551c:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	69fa      	ldr	r2, [r7, #28]
 8015522:	621a      	str	r2, [r3, #32]
            i++;
 8015524:	683b      	ldr	r3, [r7, #0]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	1c5a      	adds	r2, r3, #1
 801552a:	683b      	ldr	r3, [r7, #0]
 801552c:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	6a1b      	ldr	r3, [r3, #32]
 8015532:	2b00      	cmp	r3, #0
 8015534:	bf14      	ite	ne
 8015536:	2301      	movne	r3, #1
 8015538:	2300      	moveq	r3, #0
 801553a:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 801553c:	f107 0314 	add.w	r3, r7, #20
 8015540:	4618      	mov	r0, r3
 8015542:	f7f7 fd3e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 8015546:	4623      	mov	r3, r4
}
 8015548:	4618      	mov	r0, r3
 801554a:	3724      	adds	r7, #36	; 0x24
 801554c:	46bd      	mov	sp, r7
 801554e:	bd90      	pop	{r4, r7, pc}
 8015550:	200000a8 	.word	0x200000a8

08015554 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b088      	sub	sp, #32
 8015558:	af00      	add	r7, sp, #0
 801555a:	60f8      	str	r0, [r7, #12]
 801555c:	60b9      	str	r1, [r7, #8]
 801555e:	607a      	str	r2, [r7, #4]
 8015560:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 8015562:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015564:	f7f7 fd0c 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 8015568:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 801556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	009b      	lsls	r3, r3, #2
 8015570:	683a      	ldr	r2, [r7, #0]
 8015572:	4413      	add	r3, r2
 8015574:	681a      	ldr	r2, [r3, #0]
 8015576:	f107 0314 	add.w	r3, r7, #20
 801557a:	4611      	mov	r1, r2
 801557c:	4618      	mov	r0, r3
 801557e:	f7f7 f968 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 8015582:	f107 0314 	add.w	r3, r7, #20
 8015586:	4618      	mov	r0, r3
 8015588:	f7f7 fcfa 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 801558c:	4602      	mov	r2, r0
 801558e:	69fb      	ldr	r3, [r7, #28]
 8015590:	4293      	cmp	r3, r2
 8015592:	bf34      	ite	cc
 8015594:	2301      	movcc	r3, #1
 8015596:	2300      	movcs	r3, #0
 8015598:	b2db      	uxtb	r3, r3
 801559a:	2b00      	cmp	r3, #0
 801559c:	d00c      	beq.n	80155b8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 801559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	009b      	lsls	r3, r3, #2
 80155a4:	683a      	ldr	r2, [r7, #0]
 80155a6:	4413      	add	r3, r2
 80155a8:	681a      	ldr	r2, [r3, #0]
 80155aa:	69fb      	ldr	r3, [r7, #28]
 80155ac:	4413      	add	r3, r2
 80155ae:	4619      	mov	r1, r3
 80155b0:	68f8      	ldr	r0, [r7, #12]
 80155b2:	f7f7 f94e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80155b6:	e019      	b.n	80155ec <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 80155b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	3301      	adds	r3, #1
 80155be:	687a      	ldr	r2, [r7, #4]
 80155c0:	429a      	cmp	r2, r3
 80155c2:	dd0f      	ble.n	80155e4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 80155c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	1c5a      	adds	r2, r3, #1
 80155ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155cc:	601a      	str	r2, [r3, #0]
 80155ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	009b      	lsls	r3, r3, #2
 80155d4:	683a      	ldr	r2, [r7, #0]
 80155d6:	4413      	add	r3, r2
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	4619      	mov	r1, r3
 80155dc:	68f8      	ldr	r0, [r7, #12]
 80155de:	f7f7 f938 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80155e2:	e003      	b.n	80155ec <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 80155e4:	4906      	ldr	r1, [pc, #24]	; (8015600 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 80155e6:	68f8      	ldr	r0, [r7, #12]
 80155e8:	f7f7 f933 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 80155ec:	f107 0314 	add.w	r3, r7, #20
 80155f0:	4618      	mov	r0, r3
 80155f2:	f7f7 fce6 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 80155f6:	68f8      	ldr	r0, [r7, #12]
 80155f8:	3720      	adds	r7, #32
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}
 80155fe:	bf00      	nop
 8015600:	08024d24 	.word	0x08024d24

08015604 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8015604:	b5b0      	push	{r4, r5, r7, lr}
 8015606:	b08c      	sub	sp, #48	; 0x30
 8015608:	af02      	add	r7, sp, #8
 801560a:	60f8      	str	r0, [r7, #12]
 801560c:	60b9      	str	r1, [r7, #8]
 801560e:	607a      	str	r2, [r7, #4]
 8015610:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8015612:	f107 031c 	add.w	r3, r7, #28
 8015616:	491a      	ldr	r1, [pc, #104]	; (8015680 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8015618:	4618      	mov	r0, r3
 801561a:	f7f7 f91a 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801561e:	f107 0014 	add.w	r0, r7, #20
 8015622:	f107 031c 	add.w	r3, r7, #28
 8015626:	9301      	str	r3, [sp, #4]
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	9300      	str	r3, [sp, #0]
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	68ba      	ldr	r2, [r7, #8]
 8015630:	68f9      	ldr	r1, [r7, #12]
 8015632:	f7ff ff8f 	bl	8015554 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015636:	f107 0514 	add.w	r5, r7, #20
 801563a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801563e:	4911      	ldr	r1, [pc, #68]	; (8015684 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8015640:	2010      	movs	r0, #16
 8015642:	f7f4 fd43 	bl	800a0cc <_ZnwjPKci>
 8015646:	4604      	mov	r4, r0
 8015648:	4629      	mov	r1, r5
 801564a:	4620      	mov	r0, r4
 801564c:	f009 ff3e 	bl	801f4cc <_ZN10TestFilterC1ERK12SimpleString>
 8015650:	627c      	str	r4, [r7, #36]	; 0x24
 8015652:	f107 0314 	add.w	r3, r7, #20
 8015656:	4618      	mov	r0, r3
 8015658:	f7f7 fcb3 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801565c:	f107 031c 	add.w	r3, r7, #28
 8015660:	4618      	mov	r0, r3
 8015662:	f7f7 fcae 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801566a:	4619      	mov	r1, r3
 801566c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801566e:	f009 ff4d 	bl	801f50c <_ZN10TestFilter3addEPS_>
 8015672:	4602      	mov	r2, r0
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015678:	bf00      	nop
 801567a:	3728      	adds	r7, #40	; 0x28
 801567c:	46bd      	mov	sp, r7
 801567e:	bdb0      	pop	{r4, r5, r7, pc}
 8015680:	08024d58 	.word	0x08024d58
 8015684:	080256ec 	.word	0x080256ec

08015688 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 8015688:	b5b0      	push	{r4, r5, r7, lr}
 801568a:	b092      	sub	sp, #72	; 0x48
 801568c:	af02      	add	r7, sp, #8
 801568e:	60f8      	str	r0, [r7, #12]
 8015690:	60b9      	str	r1, [r7, #8]
 8015692:	607a      	str	r2, [r7, #4]
 8015694:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8015696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801569a:	494e      	ldr	r1, [pc, #312]	; (80157d4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 801569c:	4618      	mov	r0, r3
 801569e:	f7f7 f8d8 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80156a2:	f107 0020 	add.w	r0, r7, #32
 80156a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80156aa:	9301      	str	r3, [sp, #4]
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	9300      	str	r3, [sp, #0]
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	68ba      	ldr	r2, [r7, #8]
 80156b4:	68f9      	ldr	r1, [r7, #12]
 80156b6:	f7ff ff4d 	bl	8015554 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80156ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80156be:	4618      	mov	r0, r3
 80156c0:	f7f7 fc7f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 80156c4:	f107 0310 	add.w	r3, r7, #16
 80156c8:	4618      	mov	r0, r3
 80156ca:	f7f8 fb8f 	bl	800ddec <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 80156ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80156d2:	4941      	ldr	r1, [pc, #260]	; (80157d8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 80156d4:	4618      	mov	r0, r3
 80156d6:	f7f7 f8bc 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80156da:	f107 0210 	add.w	r2, r7, #16
 80156de:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80156e2:	f107 0320 	add.w	r3, r7, #32
 80156e6:	4618      	mov	r0, r3
 80156e8:	f7f7 fa1f 	bl	800cb2a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 80156ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80156f0:	4618      	mov	r0, r3
 80156f2:	f7f7 fc66 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 80156f6:	f107 0310 	add.w	r3, r7, #16
 80156fa:	4618      	mov	r0, r3
 80156fc:	f7f8 fc1b 	bl	800df36 <_ZNK22SimpleStringCollection4sizeEv>
 8015700:	4603      	mov	r3, r0
 8015702:	2b02      	cmp	r3, #2
 8015704:	bf14      	ite	ne
 8015706:	2301      	movne	r3, #1
 8015708:	2300      	moveq	r3, #0
 801570a:	b2db      	uxtb	r3, r3
 801570c:	2b00      	cmp	r3, #0
 801570e:	d001      	beq.n	8015714 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8015710:	2400      	movs	r4, #0
 8015712:	e04f      	b.n	80157b4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8015714:	f107 0310 	add.w	r3, r7, #16
 8015718:	2100      	movs	r1, #0
 801571a:	4618      	mov	r0, r3
 801571c:	f7f8 fc18 	bl	800df50 <_ZN22SimpleStringCollectionixEj>
 8015720:	4604      	mov	r4, r0
 8015722:	f107 0310 	add.w	r3, r7, #16
 8015726:	2100      	movs	r1, #0
 8015728:	4618      	mov	r0, r3
 801572a:	f7f8 fc11 	bl	800df50 <_ZN22SimpleStringCollectionixEj>
 801572e:	4603      	mov	r3, r0
 8015730:	4618      	mov	r0, r3
 8015732:	f7f7 fc25 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 8015736:	4603      	mov	r3, r0
 8015738:	3b01      	subs	r3, #1
 801573a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801573e:	2200      	movs	r2, #0
 8015740:	4621      	mov	r1, r4
 8015742:	f7f7 fd47 	bl	800d1d4 <_ZNK12SimpleString9subStringEjj>
 8015746:	f107 0538 	add.w	r5, r7, #56	; 0x38
 801574a:	f44f 728f 	mov.w	r2, #286	; 0x11e
 801574e:	4923      	ldr	r1, [pc, #140]	; (80157dc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8015750:	2010      	movs	r0, #16
 8015752:	f7f4 fcbb 	bl	800a0cc <_ZnwjPKci>
 8015756:	4604      	mov	r4, r0
 8015758:	4629      	mov	r1, r5
 801575a:	4620      	mov	r0, r4
 801575c:	f009 feb6 	bl	801f4cc <_ZN10TestFilterC1ERK12SimpleString>
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015764:	4619      	mov	r1, r3
 8015766:	4620      	mov	r0, r4
 8015768:	f009 fed0 	bl	801f50c <_ZN10TestFilter3addEPS_>
 801576c:	4602      	mov	r2, r0
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	625a      	str	r2, [r3, #36]	; 0x24
 8015772:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015776:	4618      	mov	r0, r3
 8015778:	f7f7 fc23 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 801577c:	f107 0310 	add.w	r3, r7, #16
 8015780:	2101      	movs	r1, #1
 8015782:	4618      	mov	r0, r3
 8015784:	f7f8 fbe4 	bl	800df50 <_ZN22SimpleStringCollectionixEj>
 8015788:	4605      	mov	r5, r0
 801578a:	f240 121f 	movw	r2, #287	; 0x11f
 801578e:	4913      	ldr	r1, [pc, #76]	; (80157dc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8015790:	2010      	movs	r0, #16
 8015792:	f7f4 fc9b 	bl	800a0cc <_ZnwjPKci>
 8015796:	4604      	mov	r4, r0
 8015798:	4629      	mov	r1, r5
 801579a:	4620      	mov	r0, r4
 801579c:	f009 fe96 	bl	801f4cc <_ZN10TestFilterC1ERK12SimpleString>
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157a4:	4619      	mov	r1, r3
 80157a6:	4620      	mov	r0, r4
 80157a8:	f009 feb0 	bl	801f50c <_ZN10TestFilter3addEPS_>
 80157ac:	4602      	mov	r2, r0
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 80157b2:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 80157b4:	f107 0310 	add.w	r3, r7, #16
 80157b8:	4618      	mov	r0, r3
 80157ba:	f7f8 fb8b 	bl	800ded4 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80157be:	f107 0320 	add.w	r3, r7, #32
 80157c2:	4618      	mov	r0, r3
 80157c4:	f7f7 fbfd 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80157c8:	4623      	mov	r3, r4
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	3740      	adds	r7, #64	; 0x40
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bdb0      	pop	{r4, r5, r7, pc}
 80157d2:	bf00      	nop
 80157d4:	08024d5c 	.word	0x08024d5c
 80157d8:	0802570c 	.word	0x0802570c
 80157dc:	080256ec 	.word	0x080256ec

080157e0 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 80157e0:	b5b0      	push	{r4, r5, r7, lr}
 80157e2:	b08c      	sub	sp, #48	; 0x30
 80157e4:	af02      	add	r7, sp, #8
 80157e6:	60f8      	str	r0, [r7, #12]
 80157e8:	60b9      	str	r1, [r7, #8]
 80157ea:	607a      	str	r2, [r7, #4]
 80157ec:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 80157ee:	f107 031c 	add.w	r3, r7, #28
 80157f2:	491c      	ldr	r1, [pc, #112]	; (8015864 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 80157f4:	4618      	mov	r0, r3
 80157f6:	f7f7 f82c 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80157fa:	f107 0014 	add.w	r0, r7, #20
 80157fe:	f107 031c 	add.w	r3, r7, #28
 8015802:	9301      	str	r3, [sp, #4]
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	9300      	str	r3, [sp, #0]
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	68ba      	ldr	r2, [r7, #8]
 801580c:	68f9      	ldr	r1, [r7, #12]
 801580e:	f7ff fea1 	bl	8015554 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015812:	f107 0514 	add.w	r5, r7, #20
 8015816:	f240 1225 	movw	r2, #293	; 0x125
 801581a:	4913      	ldr	r1, [pc, #76]	; (8015868 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 801581c:	2010      	movs	r0, #16
 801581e:	f7f4 fc55 	bl	800a0cc <_ZnwjPKci>
 8015822:	4604      	mov	r4, r0
 8015824:	4629      	mov	r1, r5
 8015826:	4620      	mov	r0, r4
 8015828:	f009 fe50 	bl	801f4cc <_ZN10TestFilterC1ERK12SimpleString>
 801582c:	627c      	str	r4, [r7, #36]	; 0x24
 801582e:	f107 0314 	add.w	r3, r7, #20
 8015832:	4618      	mov	r0, r3
 8015834:	f7f7 fbc5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8015838:	f107 031c 	add.w	r3, r7, #28
 801583c:	4618      	mov	r0, r3
 801583e:	f7f7 fbc0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8015842:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015844:	f009 fe7d 	bl	801f542 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801584c:	4619      	mov	r1, r3
 801584e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015850:	f009 fe5c 	bl	801f50c <_ZN10TestFilter3addEPS_>
 8015854:	4602      	mov	r2, r0
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	625a      	str	r2, [r3, #36]	; 0x24
}
 801585a:	bf00      	nop
 801585c:	3728      	adds	r7, #40	; 0x28
 801585e:	46bd      	mov	sp, r7
 8015860:	bdb0      	pop	{r4, r5, r7, pc}
 8015862:	bf00      	nop
 8015864:	08024d60 	.word	0x08024d60
 8015868:	080256ec 	.word	0x080256ec

0801586c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 801586c:	b5b0      	push	{r4, r5, r7, lr}
 801586e:	b08c      	sub	sp, #48	; 0x30
 8015870:	af02      	add	r7, sp, #8
 8015872:	60f8      	str	r0, [r7, #12]
 8015874:	60b9      	str	r1, [r7, #8]
 8015876:	607a      	str	r2, [r7, #4]
 8015878:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 801587a:	f107 031c 	add.w	r3, r7, #28
 801587e:	491c      	ldr	r1, [pc, #112]	; (80158f0 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8015880:	4618      	mov	r0, r3
 8015882:	f7f6 ffe6 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8015886:	f107 0014 	add.w	r0, r7, #20
 801588a:	f107 031c 	add.w	r3, r7, #28
 801588e:	9301      	str	r3, [sp, #4]
 8015890:	683b      	ldr	r3, [r7, #0]
 8015892:	9300      	str	r3, [sp, #0]
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	68ba      	ldr	r2, [r7, #8]
 8015898:	68f9      	ldr	r1, [r7, #12]
 801589a:	f7ff fe5b 	bl	8015554 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801589e:	f107 0514 	add.w	r5, r7, #20
 80158a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80158a6:	4913      	ldr	r1, [pc, #76]	; (80158f4 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 80158a8:	2010      	movs	r0, #16
 80158aa:	f7f4 fc0f 	bl	800a0cc <_ZnwjPKci>
 80158ae:	4604      	mov	r4, r0
 80158b0:	4629      	mov	r1, r5
 80158b2:	4620      	mov	r0, r4
 80158b4:	f009 fe0a 	bl	801f4cc <_ZN10TestFilterC1ERK12SimpleString>
 80158b8:	627c      	str	r4, [r7, #36]	; 0x24
 80158ba:	f107 0314 	add.w	r3, r7, #20
 80158be:	4618      	mov	r0, r3
 80158c0:	f7f7 fb7f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80158c4:	f107 031c 	add.w	r3, r7, #28
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7f7 fb7a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 80158ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80158d0:	f009 fe44 	bl	801f55c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158d8:	4619      	mov	r1, r3
 80158da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80158dc:	f009 fe16 	bl	801f50c <_ZN10TestFilter3addEPS_>
 80158e0:	4602      	mov	r2, r0
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80158e6:	bf00      	nop
 80158e8:	3728      	adds	r7, #40	; 0x28
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bdb0      	pop	{r4, r5, r7, pc}
 80158ee:	bf00      	nop
 80158f0:	08024d64 	.word	0x08024d64
 80158f4:	080256ec 	.word	0x080256ec

080158f8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 80158f8:	b5b0      	push	{r4, r5, r7, lr}
 80158fa:	b08c      	sub	sp, #48	; 0x30
 80158fc:	af02      	add	r7, sp, #8
 80158fe:	60f8      	str	r0, [r7, #12]
 8015900:	60b9      	str	r1, [r7, #8]
 8015902:	607a      	str	r2, [r7, #4]
 8015904:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8015906:	f107 031c 	add.w	r3, r7, #28
 801590a:	491d      	ldr	r1, [pc, #116]	; (8015980 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 801590c:	4618      	mov	r0, r3
 801590e:	f7f6 ffa0 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8015912:	f107 0014 	add.w	r0, r7, #20
 8015916:	f107 031c 	add.w	r3, r7, #28
 801591a:	9301      	str	r3, [sp, #4]
 801591c:	683b      	ldr	r3, [r7, #0]
 801591e:	9300      	str	r3, [sp, #0]
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	68ba      	ldr	r2, [r7, #8]
 8015924:	68f9      	ldr	r1, [r7, #12]
 8015926:	f7ff fe15 	bl	8015554 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801592a:	f107 0514 	add.w	r5, r7, #20
 801592e:	f240 1233 	movw	r2, #307	; 0x133
 8015932:	4914      	ldr	r1, [pc, #80]	; (8015984 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8015934:	2010      	movs	r0, #16
 8015936:	f7f4 fbc9 	bl	800a0cc <_ZnwjPKci>
 801593a:	4604      	mov	r4, r0
 801593c:	4629      	mov	r1, r5
 801593e:	4620      	mov	r0, r4
 8015940:	f009 fdc4 	bl	801f4cc <_ZN10TestFilterC1ERK12SimpleString>
 8015944:	627c      	str	r4, [r7, #36]	; 0x24
 8015946:	f107 0314 	add.w	r3, r7, #20
 801594a:	4618      	mov	r0, r3
 801594c:	f7f7 fb39 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8015950:	f107 031c 	add.w	r3, r7, #28
 8015954:	4618      	mov	r0, r3
 8015956:	f7f7 fb34 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 801595a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801595c:	f009 fdf1 	bl	801f542 <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8015960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015962:	f009 fdfb 	bl	801f55c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801596a:	4619      	mov	r1, r3
 801596c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801596e:	f009 fdcd 	bl	801f50c <_ZN10TestFilter3addEPS_>
 8015972:	4602      	mov	r2, r0
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015978:	bf00      	nop
 801597a:	3728      	adds	r7, #40	; 0x28
 801597c:	46bd      	mov	sp, r7
 801597e:	bdb0      	pop	{r4, r5, r7, pc}
 8015980:	08024d68 	.word	0x08024d68
 8015984:	080256ec 	.word	0x080256ec

08015988 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 8015988:	b5b0      	push	{r4, r5, r7, lr}
 801598a:	b08c      	sub	sp, #48	; 0x30
 801598c:	af02      	add	r7, sp, #8
 801598e:	60f8      	str	r0, [r7, #12]
 8015990:	60b9      	str	r1, [r7, #8]
 8015992:	607a      	str	r2, [r7, #4]
 8015994:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 8015996:	f107 031c 	add.w	r3, r7, #28
 801599a:	491a      	ldr	r1, [pc, #104]	; (8015a04 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 801599c:	4618      	mov	r0, r3
 801599e:	f7f6 ff58 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80159a2:	f107 0014 	add.w	r0, r7, #20
 80159a6:	f107 031c 	add.w	r3, r7, #28
 80159aa:	9301      	str	r3, [sp, #4]
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	9300      	str	r3, [sp, #0]
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	68ba      	ldr	r2, [r7, #8]
 80159b4:	68f9      	ldr	r1, [r7, #12]
 80159b6:	f7ff fdcd 	bl	8015554 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80159ba:	f107 0514 	add.w	r5, r7, #20
 80159be:	f240 123b 	movw	r2, #315	; 0x13b
 80159c2:	4911      	ldr	r1, [pc, #68]	; (8015a08 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 80159c4:	2010      	movs	r0, #16
 80159c6:	f7f4 fb81 	bl	800a0cc <_ZnwjPKci>
 80159ca:	4604      	mov	r4, r0
 80159cc:	4629      	mov	r1, r5
 80159ce:	4620      	mov	r0, r4
 80159d0:	f009 fd7c 	bl	801f4cc <_ZN10TestFilterC1ERK12SimpleString>
 80159d4:	627c      	str	r4, [r7, #36]	; 0x24
 80159d6:	f107 0314 	add.w	r3, r7, #20
 80159da:	4618      	mov	r0, r3
 80159dc:	f7f7 faf1 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80159e0:	f107 031c 	add.w	r3, r7, #28
 80159e4:	4618      	mov	r0, r3
 80159e6:	f7f7 faec 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159ee:	4619      	mov	r1, r3
 80159f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80159f2:	f009 fd8b 	bl	801f50c <_ZN10TestFilter3addEPS_>
 80159f6:	4602      	mov	r2, r0
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80159fc:	bf00      	nop
 80159fe:	3728      	adds	r7, #40	; 0x28
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bdb0      	pop	{r4, r5, r7, pc}
 8015a04:	08024d70 	.word	0x08024d70
 8015a08:	080256ec 	.word	0x080256ec

08015a0c <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8015a0c:	b5b0      	push	{r4, r5, r7, lr}
 8015a0e:	b08c      	sub	sp, #48	; 0x30
 8015a10:	af02      	add	r7, sp, #8
 8015a12:	60f8      	str	r0, [r7, #12]
 8015a14:	60b9      	str	r1, [r7, #8]
 8015a16:	607a      	str	r2, [r7, #4]
 8015a18:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8015a1a:	f107 031c 	add.w	r3, r7, #28
 8015a1e:	491c      	ldr	r1, [pc, #112]	; (8015a90 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8015a20:	4618      	mov	r0, r3
 8015a22:	f7f6 ff16 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8015a26:	f107 0014 	add.w	r0, r7, #20
 8015a2a:	f107 031c 	add.w	r3, r7, #28
 8015a2e:	9301      	str	r3, [sp, #4]
 8015a30:	683b      	ldr	r3, [r7, #0]
 8015a32:	9300      	str	r3, [sp, #0]
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	68ba      	ldr	r2, [r7, #8]
 8015a38:	68f9      	ldr	r1, [r7, #12]
 8015a3a:	f7ff fd8b 	bl	8015554 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015a3e:	f107 0514 	add.w	r5, r7, #20
 8015a42:	f240 1241 	movw	r2, #321	; 0x141
 8015a46:	4913      	ldr	r1, [pc, #76]	; (8015a94 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8015a48:	2010      	movs	r0, #16
 8015a4a:	f7f4 fb3f 	bl	800a0cc <_ZnwjPKci>
 8015a4e:	4604      	mov	r4, r0
 8015a50:	4629      	mov	r1, r5
 8015a52:	4620      	mov	r0, r4
 8015a54:	f009 fd3a 	bl	801f4cc <_ZN10TestFilterC1ERK12SimpleString>
 8015a58:	627c      	str	r4, [r7, #36]	; 0x24
 8015a5a:	f107 0314 	add.w	r3, r7, #20
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f7f7 faaf 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8015a64:	f107 031c 	add.w	r3, r7, #28
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f7f7 faaa 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 8015a6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a70:	f009 fd67 	bl	801f542 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a78:	4619      	mov	r1, r3
 8015a7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a7c:	f009 fd46 	bl	801f50c <_ZN10TestFilter3addEPS_>
 8015a80:	4602      	mov	r2, r0
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015a86:	bf00      	nop
 8015a88:	3728      	adds	r7, #40	; 0x28
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8015a8e:	bf00      	nop
 8015a90:	08024d74 	.word	0x08024d74
 8015a94:	080256ec 	.word	0x080256ec

08015a98 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 8015a98:	b5b0      	push	{r4, r5, r7, lr}
 8015a9a:	b08c      	sub	sp, #48	; 0x30
 8015a9c:	af02      	add	r7, sp, #8
 8015a9e:	60f8      	str	r0, [r7, #12]
 8015aa0:	60b9      	str	r1, [r7, #8]
 8015aa2:	607a      	str	r2, [r7, #4]
 8015aa4:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 8015aa6:	f107 031c 	add.w	r3, r7, #28
 8015aaa:	491c      	ldr	r1, [pc, #112]	; (8015b1c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7f6 fed0 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8015ab2:	f107 0014 	add.w	r0, r7, #20
 8015ab6:	f107 031c 	add.w	r3, r7, #28
 8015aba:	9301      	str	r3, [sp, #4]
 8015abc:	683b      	ldr	r3, [r7, #0]
 8015abe:	9300      	str	r3, [sp, #0]
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	68ba      	ldr	r2, [r7, #8]
 8015ac4:	68f9      	ldr	r1, [r7, #12]
 8015ac6:	f7ff fd45 	bl	8015554 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015aca:	f107 0514 	add.w	r5, r7, #20
 8015ace:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015ad2:	4913      	ldr	r1, [pc, #76]	; (8015b20 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8015ad4:	2010      	movs	r0, #16
 8015ad6:	f7f4 faf9 	bl	800a0cc <_ZnwjPKci>
 8015ada:	4604      	mov	r4, r0
 8015adc:	4629      	mov	r1, r5
 8015ade:	4620      	mov	r0, r4
 8015ae0:	f009 fcf4 	bl	801f4cc <_ZN10TestFilterC1ERK12SimpleString>
 8015ae4:	627c      	str	r4, [r7, #36]	; 0x24
 8015ae6:	f107 0314 	add.w	r3, r7, #20
 8015aea:	4618      	mov	r0, r3
 8015aec:	f7f7 fa69 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8015af0:	f107 031c 	add.w	r3, r7, #28
 8015af4:	4618      	mov	r0, r3
 8015af6:	f7f7 fa64 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8015afa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015afc:	f009 fd2e 	bl	801f55c <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b04:	4619      	mov	r1, r3
 8015b06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b08:	f009 fd00 	bl	801f50c <_ZN10TestFilter3addEPS_>
 8015b0c:	4602      	mov	r2, r0
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015b12:	bf00      	nop
 8015b14:	3728      	adds	r7, #40	; 0x28
 8015b16:	46bd      	mov	sp, r7
 8015b18:	bdb0      	pop	{r4, r5, r7, pc}
 8015b1a:	bf00      	nop
 8015b1c:	08024d78 	.word	0x08024d78
 8015b20:	080256ec 	.word	0x080256ec

08015b24 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8015b24:	b5b0      	push	{r4, r5, r7, lr}
 8015b26:	b08c      	sub	sp, #48	; 0x30
 8015b28:	af02      	add	r7, sp, #8
 8015b2a:	60f8      	str	r0, [r7, #12]
 8015b2c:	60b9      	str	r1, [r7, #8]
 8015b2e:	607a      	str	r2, [r7, #4]
 8015b30:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 8015b32:	f107 031c 	add.w	r3, r7, #28
 8015b36:	491d      	ldr	r1, [pc, #116]	; (8015bac <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8015b38:	4618      	mov	r0, r3
 8015b3a:	f7f6 fe8a 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8015b3e:	f107 0014 	add.w	r0, r7, #20
 8015b42:	f107 031c 	add.w	r3, r7, #28
 8015b46:	9301      	str	r3, [sp, #4]
 8015b48:	683b      	ldr	r3, [r7, #0]
 8015b4a:	9300      	str	r3, [sp, #0]
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	68ba      	ldr	r2, [r7, #8]
 8015b50:	68f9      	ldr	r1, [r7, #12]
 8015b52:	f7ff fcff 	bl	8015554 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015b56:	f107 0514 	add.w	r5, r7, #20
 8015b5a:	f240 124f 	movw	r2, #335	; 0x14f
 8015b5e:	4914      	ldr	r1, [pc, #80]	; (8015bb0 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8015b60:	2010      	movs	r0, #16
 8015b62:	f7f4 fab3 	bl	800a0cc <_ZnwjPKci>
 8015b66:	4604      	mov	r4, r0
 8015b68:	4629      	mov	r1, r5
 8015b6a:	4620      	mov	r0, r4
 8015b6c:	f009 fcae 	bl	801f4cc <_ZN10TestFilterC1ERK12SimpleString>
 8015b70:	627c      	str	r4, [r7, #36]	; 0x24
 8015b72:	f107 0314 	add.w	r3, r7, #20
 8015b76:	4618      	mov	r0, r3
 8015b78:	f7f7 fa23 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8015b7c:	f107 031c 	add.w	r3, r7, #28
 8015b80:	4618      	mov	r0, r3
 8015b82:	f7f7 fa1e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8015b86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b88:	f009 fce8 	bl	801f55c <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 8015b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b8e:	f009 fcd8 	bl	801f542 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b96:	4619      	mov	r1, r3
 8015b98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b9a:	f009 fcb7 	bl	801f50c <_ZN10TestFilter3addEPS_>
 8015b9e:	4602      	mov	r2, r0
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015ba4:	bf00      	nop
 8015ba6:	3728      	adds	r7, #40	; 0x28
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bdb0      	pop	{r4, r5, r7, pc}
 8015bac:	08024d7c 	.word	0x08024d7c
 8015bb0:	080256ec 	.word	0x080256ec

08015bb4 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 8015bb4:	b5b0      	push	{r4, r5, r7, lr}
 8015bb6:	b092      	sub	sp, #72	; 0x48
 8015bb8:	af02      	add	r7, sp, #8
 8015bba:	60f8      	str	r0, [r7, #12]
 8015bbc:	60b9      	str	r1, [r7, #8]
 8015bbe:	607a      	str	r2, [r7, #4]
 8015bc0:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8015bc2:	f107 0320 	add.w	r3, r7, #32
 8015bc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015bc8:	4618      	mov	r0, r3
 8015bca:	f7f6 fe42 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8015bce:	f107 0018 	add.w	r0, r7, #24
 8015bd2:	f107 0320 	add.w	r3, r7, #32
 8015bd6:	9301      	str	r3, [sp, #4]
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	9300      	str	r3, [sp, #0]
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	68ba      	ldr	r2, [r7, #8]
 8015be0:	68f9      	ldr	r1, [r7, #12]
 8015be2:	f7ff fcb7 	bl	8015554 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015be6:	f107 0320 	add.w	r3, r7, #32
 8015bea:	4618      	mov	r0, r3
 8015bec:	f7f7 f9e9 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8015bf0:	f107 0010 	add.w	r0, r7, #16
 8015bf4:	f107 0118 	add.w	r1, r7, #24
 8015bf8:	2329      	movs	r3, #41	; 0x29
 8015bfa:	222c      	movs	r2, #44	; 0x2c
 8015bfc:	f7f7 fb92 	bl	800d324 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8015c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015c04:	f107 0110 	add.w	r1, r7, #16
 8015c08:	2202      	movs	r2, #2
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f7f7 fb2c 	bl	800d268 <_ZNK12SimpleString9subStringEj>
 8015c10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015c14:	f107 0310 	add.w	r3, r7, #16
 8015c18:	4611      	mov	r1, r2
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	f7f6 fe85 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 8015c20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015c24:	4618      	mov	r0, r3
 8015c26:	f7f7 f9cc 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8015c2a:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8015c2e:	492a      	ldr	r1, [pc, #168]	; (8015cd8 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8015c30:	2010      	movs	r0, #16
 8015c32:	f7f4 fa4b 	bl	800a0cc <_ZnwjPKci>
 8015c36:	4604      	mov	r4, r0
 8015c38:	f107 0310 	add.w	r3, r7, #16
 8015c3c:	4619      	mov	r1, r3
 8015c3e:	4620      	mov	r0, r4
 8015c40:	f009 fc44 	bl	801f4cc <_ZN10TestFilterC1ERK12SimpleString>
 8015c44:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 8015c46:	f107 0318 	add.w	r3, r7, #24
 8015c4a:	2100      	movs	r1, #0
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f7f7 fb1c 	bl	800d28a <_ZNK12SimpleString2atEj>
 8015c52:	4603      	mov	r3, r0
 8015c54:	461a      	mov	r2, r3
 8015c56:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8015c5a:	f107 0118 	add.w	r1, r7, #24
 8015c5e:	232c      	movs	r3, #44	; 0x2c
 8015c60:	f7f7 fb60 	bl	800d324 <_ZNK12SimpleString17subStringFromTillEcc>
 8015c64:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8015c68:	f240 125b 	movw	r2, #347	; 0x15b
 8015c6c:	491a      	ldr	r1, [pc, #104]	; (8015cd8 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8015c6e:	2010      	movs	r0, #16
 8015c70:	f7f4 fa2c 	bl	800a0cc <_ZnwjPKci>
 8015c74:	4604      	mov	r4, r0
 8015c76:	4629      	mov	r1, r5
 8015c78:	4620      	mov	r0, r4
 8015c7a:	f009 fc27 	bl	801f4cc <_ZN10TestFilterC1ERK12SimpleString>
 8015c7e:	63bc      	str	r4, [r7, #56]	; 0x38
 8015c80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015c84:	4618      	mov	r0, r3
 8015c86:	f7f7 f99c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 8015c8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015c8c:	f009 fc59 	bl	801f542 <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 8015c90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015c92:	f009 fc56 	bl	801f542 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c9a:	4619      	mov	r1, r3
 8015c9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015c9e:	f009 fc35 	bl	801f50c <_ZN10TestFilter3addEPS_>
 8015ca2:	4602      	mov	r2, r0
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cac:	4619      	mov	r1, r3
 8015cae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015cb0:	f009 fc2c 	bl	801f50c <_ZN10TestFilter3addEPS_>
 8015cb4:	4602      	mov	r2, r0
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8015cba:	f107 0310 	add.w	r3, r7, #16
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f7f7 f97f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8015cc4:	f107 0318 	add.w	r3, r7, #24
 8015cc8:	4618      	mov	r0, r3
 8015cca:	f7f7 f97a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8015cce:	bf00      	nop
 8015cd0:	3740      	adds	r7, #64	; 0x40
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8015cd6:	bf00      	nop
 8015cd8:	080256ec 	.word	0x080256ec

08015cdc <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8015cdc:	b590      	push	{r4, r7, lr}
 8015cde:	b08b      	sub	sp, #44	; 0x2c
 8015ce0:	af02      	add	r7, sp, #8
 8015ce2:	60f8      	str	r0, [r7, #12]
 8015ce4:	60b9      	str	r1, [r7, #8]
 8015ce6:	607a      	str	r2, [r7, #4]
 8015ce8:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8015cea:	f107 0318 	add.w	r3, r7, #24
 8015cee:	491b      	ldr	r1, [pc, #108]	; (8015d5c <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f7f6 fdae 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8015cf6:	f107 0010 	add.w	r0, r7, #16
 8015cfa:	f107 0318 	add.w	r3, r7, #24
 8015cfe:	9301      	str	r3, [sp, #4]
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	9300      	str	r3, [sp, #0]
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	68ba      	ldr	r2, [r7, #8]
 8015d08:	68f9      	ldr	r1, [r7, #12]
 8015d0a:	f7ff fc23 	bl	8015554 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015d0e:	f107 0318 	add.w	r3, r7, #24
 8015d12:	4618      	mov	r0, r3
 8015d14:	f7f7 f955 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8015d18:	f107 0310 	add.w	r3, r7, #16
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f7f7 f92f 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 8015d22:	4603      	mov	r3, r0
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	bf0c      	ite	eq
 8015d28:	2301      	moveq	r3, #1
 8015d2a:	2300      	movne	r3, #0
 8015d2c:	b2db      	uxtb	r3, r3
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d001      	beq.n	8015d36 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 8015d32:	2400      	movs	r4, #0
 8015d34:	e008      	b.n	8015d48 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	3330      	adds	r3, #48	; 0x30
 8015d3a:	f107 0210 	add.w	r2, r7, #16
 8015d3e:	4611      	mov	r1, r2
 8015d40:	4618      	mov	r0, r3
 8015d42:	f7f6 fdf2 	bl	800c92a <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8015d46:	2401      	movs	r4, #1
 8015d48:	f107 0310 	add.w	r3, r7, #16
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	f7f7 f938 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8015d52:	2c01      	cmp	r4, #1
}
 8015d54:	3724      	adds	r7, #36	; 0x24
 8015d56:	46bd      	mov	sp, r7
 8015d58:	bd90      	pop	{r4, r7, pc}
 8015d5a:	bf00      	nop
 8015d5c:	08024da4 	.word	0x08024da4

08015d60 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8015d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d62:	b093      	sub	sp, #76	; 0x4c
 8015d64:	af02      	add	r7, sp, #8
 8015d66:	60f8      	str	r0, [r7, #12]
 8015d68:	60b9      	str	r1, [r7, #8]
 8015d6a:	607a      	str	r2, [r7, #4]
 8015d6c:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8015d6e:	f107 0318 	add.w	r3, r7, #24
 8015d72:	4953      	ldr	r1, [pc, #332]	; (8015ec0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 8015d74:	4618      	mov	r0, r3
 8015d76:	f7f6 fd6c 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8015d7a:	f107 0010 	add.w	r0, r7, #16
 8015d7e:	f107 0318 	add.w	r3, r7, #24
 8015d82:	9301      	str	r3, [sp, #4]
 8015d84:	683b      	ldr	r3, [r7, #0]
 8015d86:	9300      	str	r3, [sp, #0]
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	68ba      	ldr	r2, [r7, #8]
 8015d8c:	68f9      	ldr	r1, [r7, #12]
 8015d8e:	f7ff fbe1 	bl	8015554 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015d92:	f107 0318 	add.w	r3, r7, #24
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7f7 f913 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8015d9c:	f107 0310 	add.w	r3, r7, #16
 8015da0:	4618      	mov	r0, r3
 8015da2:	f7f7 f8ed 	bl	800cf80 <_ZNK12SimpleString4sizeEv>
 8015da6:	4603      	mov	r3, r0
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	bf0c      	ite	eq
 8015dac:	2301      	moveq	r3, #1
 8015dae:	2300      	movne	r3, #0
 8015db0:	b2db      	uxtb	r3, r3
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d001      	beq.n	8015dba <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 8015db6:	2400      	movs	r4, #0
 8015db8:	e078      	b.n	8015eac <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8015dba:	2500      	movs	r5, #0
 8015dbc:	f107 0320 	add.w	r3, r7, #32
 8015dc0:	4940      	ldr	r1, [pc, #256]	; (8015ec4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7f6 fd45 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8015dc8:	2601      	movs	r6, #1
 8015dca:	f107 0220 	add.w	r2, r7, #32
 8015dce:	f107 0310 	add.w	r3, r7, #16
 8015dd2:	4611      	mov	r1, r2
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f7f7 f900 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d111      	bne.n	8015e04 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8015de0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015de4:	4938      	ldr	r1, [pc, #224]	; (8015ec8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7f6 fd33 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8015dec:	2501      	movs	r5, #1
 8015dee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015df2:	f107 0310 	add.w	r3, r7, #16
 8015df6:	4611      	mov	r1, r2
 8015df8:	4618      	mov	r0, r3
 8015dfa:	f7f7 f8ee 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8015dfe:	4603      	mov	r3, r0
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d001      	beq.n	8015e08 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8015e04:	2401      	movs	r4, #1
 8015e06:	e000      	b.n	8015e0a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8015e08:	2400      	movs	r4, #0
 8015e0a:	2d00      	cmp	r5, #0
 8015e0c:	d004      	beq.n	8015e18 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8015e0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015e12:	4618      	mov	r0, r3
 8015e14:	f7f7 f8d5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8015e18:	2e00      	cmp	r6, #0
 8015e1a:	d004      	beq.n	8015e26 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8015e1c:	f107 0320 	add.w	r3, r7, #32
 8015e20:	4618      	mov	r0, r3
 8015e22:	f7f7 f8ce 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8015e26:	2c00      	cmp	r4, #0
 8015e28:	d005      	beq.n	8015e36 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	2200      	movs	r2, #0
 8015e2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8015e32:	2401      	movs	r4, #1
 8015e34:	e03a      	b.n	8015eac <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8015e36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015e3a:	4924      	ldr	r1, [pc, #144]	; (8015ecc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	f7f6 fd08 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8015e42:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015e46:	f107 0310 	add.w	r3, r7, #16
 8015e4a:	4611      	mov	r1, r2
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	f7f7 f8c4 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8015e52:	4603      	mov	r3, r0
 8015e54:	461c      	mov	r4, r3
 8015e56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f7f7 f8b1 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8015e60:	2c00      	cmp	r4, #0
 8015e62:	d005      	beq.n	8015e70 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	2201      	movs	r2, #1
 8015e68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8015e6c:	2401      	movs	r4, #1
 8015e6e:	e01d      	b.n	8015eac <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8015e70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015e74:	4916      	ldr	r1, [pc, #88]	; (8015ed0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8015e76:	4618      	mov	r0, r3
 8015e78:	f7f6 fceb 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8015e7c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8015e80:	f107 0310 	add.w	r3, r7, #16
 8015e84:	4611      	mov	r1, r2
 8015e86:	4618      	mov	r0, r3
 8015e88:	f7f7 f8a7 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	461c      	mov	r4, r3
 8015e90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015e94:	4618      	mov	r0, r3
 8015e96:	f7f7 f894 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8015e9a:	2c00      	cmp	r4, #0
 8015e9c:	d005      	beq.n	8015eaa <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	2202      	movs	r2, #2
 8015ea2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8015ea6:	2401      	movs	r4, #1
 8015ea8:	e000      	b.n	8015eac <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8015eaa:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8015eac:	f107 0310 	add.w	r3, r7, #16
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f7f7 f886 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8015eb6:	4623      	mov	r3, r4
}
 8015eb8:	4618      	mov	r0, r3
 8015eba:	3744      	adds	r7, #68	; 0x44
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ec0:	08024da0 	.word	0x08024da0
 8015ec4:	08025710 	.word	0x08025710
 8015ec8:	08025718 	.word	0x08025718
 8015ecc:	08025720 	.word	0x08025720
 8015ed0:	08025728 	.word	0x08025728

08015ed4 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8015ed4:	b480      	push	{r7}
 8015ed6:	b083      	sub	sp, #12
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015ee2:	2b01      	cmp	r3, #1
 8015ee4:	bf0c      	ite	eq
 8015ee6:	2301      	moveq	r3, #1
 8015ee8:	2300      	movne	r3, #0
 8015eea:	b2db      	uxtb	r3, r3
}
 8015eec:	4618      	mov	r0, r3
 8015eee:	370c      	adds	r7, #12
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef6:	4770      	bx	lr

08015ef8 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8015ef8:	b480      	push	{r7}
 8015efa:	b083      	sub	sp, #12
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015f06:	2b02      	cmp	r3, #2
 8015f08:	bf0c      	ite	eq
 8015f0a:	2301      	moveq	r3, #1
 8015f0c:	2300      	movne	r3, #0
 8015f0e:	b2db      	uxtb	r3, r3
}
 8015f10:	4618      	mov	r0, r3
 8015f12:	370c      	adds	r7, #12
 8015f14:	46bd      	mov	sp, r7
 8015f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1a:	4770      	bx	lr

08015f1c <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8015f1c:	b480      	push	{r7}
 8015f1e:	b083      	sub	sp, #12
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
    return packageName_;
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	3330      	adds	r3, #48	; 0x30
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	370c      	adds	r7, #12
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f32:	4770      	bx	lr

08015f34 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8015f34:	b480      	push	{r7}
 8015f36:	b083      	sub	sp, #12
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	2200      	movs	r2, #0
 8015f40:	601a      	str	r2, [r3, #0]
    {}
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	4618      	mov	r0, r3
 8015f46:	370c      	adds	r7, #12
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4e:	4770      	bx	lr

08015f50 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8015f50:	b480      	push	{r7}
 8015f52:	b083      	sub	sp, #12
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015f5e:	2200      	movs	r2, #0
 8015f60:	601a      	str	r2, [r3, #0]
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015f68:	3304      	adds	r3, #4
 8015f6a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8015f6e:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2200      	movs	r2, #0
 8015f74:	701a      	strb	r2, [r3, #0]
}
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	4618      	mov	r0, r3
 8015f7a:	370c      	adds	r7, #12
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f82:	4770      	bx	lr

08015f84 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8015f84:	b480      	push	{r7}
 8015f86:	b083      	sub	sp, #12
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015f92:	2200      	movs	r2, #0
 8015f94:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	2200      	movs	r2, #0
 8015f9a:	701a      	strb	r2, [r3, #0]
}
 8015f9c:	bf00      	nop
 8015f9e:	370c      	adds	r7, #12
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa6:	4770      	bx	lr

08015fa8 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8015fa8:	b40e      	push	{r1, r2, r3}
 8015faa:	b590      	push	{r4, r7, lr}
 8015fac:	b086      	sub	sp, #24
 8015fae:	af00      	add	r7, sp, #0
 8015fb0:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015fb8:	3304      	adds	r3, #4
 8015fba:	681a      	ldr	r2, [r3, #0]
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	1ad3      	subs	r3, r2, r3
 8015fc6:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8015fc8:	697b      	ldr	r3, [r7, #20]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d032      	beq.n	8016034 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8015fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015fd2:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8015fd4:	4b1b      	ldr	r3, [pc, #108]	; (8016044 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8015fd6:	681c      	ldr	r4, [r3, #0]
 8015fd8:	687a      	ldr	r2, [r7, #4]
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	18d0      	adds	r0, r2, r3
 8015fe4:	697b      	ldr	r3, [r7, #20]
 8015fe6:	1c59      	adds	r1, r3, #1
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fec:	47a0      	blx	r4
 8015fee:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8015ff0:	693b      	ldr	r3, [r7, #16]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	dd09      	ble.n	801600a <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ffc:	681a      	ldr	r2, [r3, #0]
 8015ffe:	693b      	ldr	r3, [r7, #16]
 8016000:	441a      	add	r2, r3
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016008:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016010:	681a      	ldr	r2, [r3, #0]
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016018:	3304      	adds	r3, #4
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	429a      	cmp	r2, r3
 801601e:	d90a      	bls.n	8016036 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016026:	3304      	adds	r3, #4
 8016028:	681a      	ldr	r2, [r3, #0]
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016030:	601a      	str	r2, [r3, #0]
 8016032:	e000      	b.n	8016036 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8016034:	bf00      	nop
    va_end(arguments);
}
 8016036:	3718      	adds	r7, #24
 8016038:	46bd      	mov	sp, r7
 801603a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801603e:	b003      	add	sp, #12
 8016040:	4770      	bx	lr
 8016042:	bf00      	nop
 8016044:	200000b0 	.word	0x200000b0

08016048 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b08c      	sub	sp, #48	; 0x30
 801604c:	af00      	add	r7, sp, #0
 801604e:	60f8      	str	r0, [r7, #12]
 8016050:	60b9      	str	r1, [r7, #8]
 8016052:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8016054:	68bb      	ldr	r3, [r7, #8]
 8016056:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8016058:	2310      	movs	r3, #16
 801605a:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 801605c:	2300      	movs	r3, #0
 801605e:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8016060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	429a      	cmp	r2, r3
 8016066:	d273      	bcs.n	8016150 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8016068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801606a:	493b      	ldr	r1, [pc, #236]	; (8016158 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 801606c:	68f8      	ldr	r0, [r7, #12]
 801606e:	f7ff ff9b 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8016072:	687a      	ldr	r2, [r7, #4]
 8016074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016076:	1ad3      	subs	r3, r2, r3
 8016078:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 801607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801607c:	2b10      	cmp	r3, #16
 801607e:	d901      	bls.n	8016084 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8016080:	2310      	movs	r3, #16
 8016082:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8016084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016086:	f1c3 0310 	rsb	r3, r3, #16
 801608a:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 801608c:	2300      	movs	r3, #0
 801608e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016094:	429a      	cmp	r2, r3
 8016096:	d215      	bcs.n	80160c4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8016098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801609c:	4413      	add	r3, r2
 801609e:	69fa      	ldr	r2, [r7, #28]
 80160a0:	4413      	add	r3, r2
 80160a2:	781b      	ldrb	r3, [r3, #0]
 80160a4:	461a      	mov	r2, r3
 80160a6:	492d      	ldr	r1, [pc, #180]	; (801615c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 80160a8:	68f8      	ldr	r0, [r7, #12]
 80160aa:	f7ff ff7d 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 80160ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160b0:	2b07      	cmp	r3, #7
 80160b2:	d103      	bne.n	80160bc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 80160b4:	492a      	ldr	r1, [pc, #168]	; (8016160 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 80160b6:	68f8      	ldr	r0, [r7, #12]
 80160b8:	f7ff ff76 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80160bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160be:	3301      	adds	r3, #1
 80160c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80160c2:	e7e5      	b.n	8016090 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 80160c4:	2300      	movs	r3, #0
 80160c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80160c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80160ca:	697b      	ldr	r3, [r7, #20]
 80160cc:	429a      	cmp	r2, r3
 80160ce:	d207      	bcs.n	80160e0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 80160d0:	4924      	ldr	r1, [pc, #144]	; (8016164 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 80160d2:	68f8      	ldr	r0, [r7, #12]
 80160d4:	f7ff ff68 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 80160d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160da:	3301      	adds	r3, #1
 80160dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80160de:	e7f3      	b.n	80160c8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 80160e0:	697b      	ldr	r3, [r7, #20]
 80160e2:	2b08      	cmp	r3, #8
 80160e4:	d903      	bls.n	80160ee <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 80160e6:	491e      	ldr	r1, [pc, #120]	; (8016160 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 80160e8:	68f8      	ldr	r0, [r7, #12]
 80160ea:	f7ff ff5d 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 80160ee:	491e      	ldr	r1, [pc, #120]	; (8016168 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 80160f0:	68f8      	ldr	r0, [r7, #12]
 80160f2:	f7ff ff59 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80160f6:	2300      	movs	r3, #0
 80160f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80160fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80160fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160fe:	429a      	cmp	r2, r3
 8016100:	d21d      	bcs.n	801613e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8016102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016106:	4413      	add	r3, r2
 8016108:	69fa      	ldr	r2, [r7, #28]
 801610a:	4413      	add	r3, r2
 801610c:	781b      	ldrb	r3, [r3, #0]
 801610e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8016112:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016116:	2b1f      	cmp	r3, #31
 8016118:	d903      	bls.n	8016122 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 801611a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801611e:	2b7e      	cmp	r3, #126	; 0x7e
 8016120:	d902      	bls.n	8016128 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8016122:	232e      	movs	r3, #46	; 0x2e
 8016124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8016128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801612c:	461a      	mov	r2, r3
 801612e:	490f      	ldr	r1, [pc, #60]	; (801616c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8016130:	68f8      	ldr	r0, [r7, #12]
 8016132:	f7ff ff39 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8016136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016138:	3301      	adds	r3, #1
 801613a:	62bb      	str	r3, [r7, #40]	; 0x28
 801613c:	e7dd      	b.n	80160fa <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 801613e:	490c      	ldr	r1, [pc, #48]	; (8016170 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8016140:	68f8      	ldr	r0, [r7, #12]
 8016142:	f7ff ff31 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8016146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801614a:	4413      	add	r3, r2
 801614c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 801614e:	e787      	b.n	8016060 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8016150:	bf00      	nop
 8016152:	3730      	adds	r7, #48	; 0x30
 8016154:	46bd      	mov	sp, r7
 8016156:	bd80      	pop	{r7, pc}
 8016158:	08025740 	.word	0x08025740
 801615c:	0802574c 	.word	0x0802574c
 8016160:	08025754 	.word	0x08025754
 8016164:	08025758 	.word	0x08025758
 8016168:	0802575c 	.word	0x0802575c
 801616c:	08025760 	.word	0x08025760
 8016170:	08025764 	.word	0x08025764

08016174 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8016174:	b480      	push	{r7}
 8016176:	b083      	sub	sp, #12
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
    return buffer_;
 801617c:	687b      	ldr	r3, [r7, #4]
}
 801617e:	4618      	mov	r0, r3
 8016180:	370c      	adds	r7, #12
 8016182:	46bd      	mov	sp, r7
 8016184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016188:	4770      	bx	lr

0801618a <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 801618a:	b480      	push	{r7}
 801618c:	b083      	sub	sp, #12
 801618e:	af00      	add	r7, sp, #0
 8016190:	6078      	str	r0, [r7, #4]
 8016192:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801619a:	3304      	adds	r3, #4
 801619c:	683a      	ldr	r2, [r7, #0]
 801619e:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80161a6:	3304      	adds	r3, #4
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80161ae:	d306      	bcc.n	80161be <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80161b6:	3304      	adds	r3, #4
 80161b8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80161bc:	601a      	str	r2, [r3, #0]
}
 80161be:	bf00      	nop
 80161c0:	370c      	adds	r7, #12
 80161c2:	46bd      	mov	sp, r7
 80161c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c8:	4770      	bx	lr

080161ca <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 80161ca:	b480      	push	{r7}
 80161cc:	b083      	sub	sp, #12
 80161ce:	af00      	add	r7, sp, #0
 80161d0:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80161d8:	3304      	adds	r3, #4
 80161da:	f640 72ff 	movw	r2, #4095	; 0xfff
 80161de:	601a      	str	r2, [r3, #0]
}
 80161e0:	bf00      	nop
 80161e2:	370c      	adds	r7, #12
 80161e4:	46bd      	mov	sp, r7
 80161e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ea:	4770      	bx	lr

080161ec <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 80161ec:	b480      	push	{r7}
 80161ee:	b083      	sub	sp, #12
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80161fa:	681a      	ldr	r2, [r3, #0]
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016202:	3304      	adds	r3, #4
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	429a      	cmp	r2, r3
 8016208:	bf2c      	ite	cs
 801620a:	2301      	movcs	r3, #1
 801620c:	2300      	movcc	r3, #0
 801620e:	b2db      	uxtb	r3, r3
}
 8016210:	4618      	mov	r0, r3
 8016212:	370c      	adds	r7, #12
 8016214:	46bd      	mov	sp, r7
 8016216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801621a:	4770      	bx	lr

0801621c <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 801621c:	b580      	push	{r7, lr}
 801621e:	b082      	sub	sp, #8
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	2200      	movs	r2, #0
 8016228:	601a      	str	r2, [r3, #0]
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	2200      	movs	r2, #0
 801622e:	711a      	strb	r2, [r3, #4]
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	3308      	adds	r3, #8
 8016234:	4618      	mov	r0, r3
 8016236:	f7ff fe8b 	bl	8015f50 <_ZN18SimpleStringBufferC1Ev>
{
}
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	4618      	mov	r0, r3
 801623e:	3708      	adds	r7, #8
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}

08016244 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8016244:	b5b0      	push	{r4, r5, r7, lr}
 8016246:	b086      	sub	sp, #24
 8016248:	af02      	add	r7, sp, #8
 801624a:	60f8      	str	r0, [r7, #12]
 801624c:	60b9      	str	r1, [r7, #8]
 801624e:	607a      	str	r2, [r7, #4]
 8016250:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	f103 0408 	add.w	r4, r3, #8
 8016258:	687d      	ldr	r5, [r7, #4]
 801625a:	6a3b      	ldr	r3, [r7, #32]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	3314      	adds	r3, #20
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	6a38      	ldr	r0, [r7, #32]
 8016264:	4798      	blx	r3
 8016266:	4603      	mov	r3, r0
 8016268:	9301      	str	r3, [sp, #4]
 801626a:	683b      	ldr	r3, [r7, #0]
 801626c:	9300      	str	r3, [sp, #0]
 801626e:	462b      	mov	r3, r5
 8016270:	68ba      	ldr	r2, [r7, #8]
 8016272:	4904      	ldr	r1, [pc, #16]	; (8016284 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8016274:	4620      	mov	r0, r4
 8016276:	f7ff fe97 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801627a:	bf00      	nop
 801627c:	3710      	adds	r7, #16
 801627e:	46bd      	mov	sp, r7
 8016280:	bdb0      	pop	{r4, r5, r7, pc}
 8016282:	bf00      	nop
 8016284:	08025768 	.word	0x08025768

08016288 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8016288:	b5b0      	push	{r4, r5, r7, lr}
 801628a:	b086      	sub	sp, #24
 801628c:	af02      	add	r7, sp, #8
 801628e:	60f8      	str	r0, [r7, #12]
 8016290:	60b9      	str	r1, [r7, #8]
 8016292:	607a      	str	r2, [r7, #4]
 8016294:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	f103 0408 	add.w	r4, r3, #8
 801629c:	687d      	ldr	r5, [r7, #4]
 801629e:	683b      	ldr	r3, [r7, #0]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	3318      	adds	r3, #24
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	6838      	ldr	r0, [r7, #0]
 80162a8:	4798      	blx	r3
 80162aa:	4603      	mov	r3, r0
 80162ac:	9300      	str	r3, [sp, #0]
 80162ae:	462b      	mov	r3, r5
 80162b0:	68ba      	ldr	r2, [r7, #8]
 80162b2:	4904      	ldr	r1, [pc, #16]	; (80162c4 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 80162b4:	4620      	mov	r0, r4
 80162b6:	f7ff fe77 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80162ba:	bf00      	nop
 80162bc:	3710      	adds	r7, #16
 80162be:	46bd      	mov	sp, r7
 80162c0:	bdb0      	pop	{r4, r5, r7, pc}
 80162c2:	bf00      	nop
 80162c4:	080257a0 	.word	0x080257a0

080162c8 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b082      	sub	sp, #8
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	3308      	adds	r3, #8
 80162d4:	4903      	ldr	r1, [pc, #12]	; (80162e4 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 80162d6:	4618      	mov	r0, r3
 80162d8:	f7ff fe66 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80162dc:	bf00      	nop
 80162de:	3708      	adds	r7, #8
 80162e0:	46bd      	mov	sp, r7
 80162e2:	bd80      	pop	{r7, pc}
 80162e4:	080257d0 	.word	0x080257d0

080162e8 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b084      	sub	sp, #16
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	2200      	movs	r2, #0
 80162f4:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	2200      	movs	r2, #0
 80162fa:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 80162fc:	2367      	movs	r3, #103	; 0x67
 80162fe:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	f203 1311 	addw	r3, r3, #273	; 0x111
 8016306:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	f103 0208 	add.w	r2, r3, #8
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8016314:	4619      	mov	r1, r3
 8016316:	4610      	mov	r0, r2
 8016318:	f7ff ff37 	bl	801618a <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 801631c:	bf00      	nop
 801631e:	3710      	adds	r7, #16
 8016320:	46bd      	mov	sp, r7
 8016322:	bd80      	pop	{r7, pc}

08016324 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8016324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016326:	b089      	sub	sp, #36	; 0x24
 8016328:	af04      	add	r7, sp, #16
 801632a:	60f8      	str	r0, [r7, #12]
 801632c:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d102      	bne.n	801633c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 8016336:	68f8      	ldr	r0, [r7, #12]
 8016338:	f000 f882 	bl	8016440 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	1c5a      	adds	r2, r3, #1
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	f103 0508 	add.w	r5, r3, #8
 801634c:	68bb      	ldr	r3, [r7, #8]
 801634e:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016350:	68bb      	ldr	r3, [r7, #8]
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016356:	68bb      	ldr	r3, [r7, #8]
 8016358:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 801635a:	68bb      	ldr	r3, [r7, #8]
 801635c:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801635e:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016360:	68bb      	ldr	r3, [r7, #8]
 8016362:	695a      	ldr	r2, [r3, #20]
 8016364:	68bb      	ldr	r3, [r7, #8]
 8016366:	695b      	ldr	r3, [r3, #20]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	3314      	adds	r3, #20
 801636c:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801636e:	4610      	mov	r0, r2
 8016370:	4798      	blx	r3
 8016372:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016374:	68bb      	ldr	r3, [r7, #8]
 8016376:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016378:	9303      	str	r3, [sp, #12]
 801637a:	9202      	str	r2, [sp, #8]
 801637c:	683a      	ldr	r2, [r7, #0]
 801637e:	9201      	str	r2, [sp, #4]
 8016380:	9400      	str	r4, [sp, #0]
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	4632      	mov	r2, r6
 8016386:	4915      	ldr	r1, [pc, #84]	; (80163dc <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8016388:	4628      	mov	r0, r5
 801638a:	f7ff fe0d 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	f103 0008 	add.w	r0, r3, #8
 8016394:	68bb      	ldr	r3, [r7, #8]
 8016396:	6899      	ldr	r1, [r3, #8]
 8016398:	68bb      	ldr	r3, [r7, #8]
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	461a      	mov	r2, r3
 801639e:	f7ff fe53 	bl	8016048 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 80163a2:	68bb      	ldr	r3, [r7, #8]
 80163a4:	695a      	ldr	r2, [r3, #20]
 80163a6:	68bb      	ldr	r3, [r7, #8]
 80163a8:	695b      	ldr	r3, [r3, #20]
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	3314      	adds	r3, #20
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	4610      	mov	r0, r2
 80163b2:	4798      	blx	r3
 80163b4:	4603      	mov	r3, r0
 80163b6:	490a      	ldr	r1, [pc, #40]	; (80163e0 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 80163b8:	4618      	mov	r0, r3
 80163ba:	f7f6 f887 	bl	800c4cc <_ZN12SimpleString6StrCmpEPKcS1_>
 80163be:	4603      	mov	r3, r0
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	bf0c      	ite	eq
 80163c4:	2301      	moveq	r3, #1
 80163c6:	2300      	movne	r3, #0
 80163c8:	b2db      	uxtb	r3, r3
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d002      	beq.n	80163d4 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	2201      	movs	r2, #1
 80163d2:	711a      	strb	r2, [r3, #4]
}
 80163d4:	bf00      	nop
 80163d6:	3714      	adds	r7, #20
 80163d8:	46bd      	mov	sp, r7
 80163da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163dc:	080257f0 	.word	0x080257f0
 80163e0:	08025850 	.word	0x08025850

080163e4 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b084      	sub	sp, #16
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d103      	bne.n	80163fc <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f7ff ff67 	bl	80162c8 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 80163fa:	e01e      	b.n	801643a <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	3308      	adds	r3, #8
 8016400:	4618      	mov	r0, r3
 8016402:	f7ff fef3 	bl	80161ec <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8016406:	4603      	mov	r3, r0
 8016408:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	3308      	adds	r3, #8
 801640e:	4618      	mov	r0, r3
 8016410:	f7ff fedb 	bl	80161ca <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8016414:	7bfb      	ldrb	r3, [r7, #15]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d002      	beq.n	8016420 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	f000 f820 	bl	8016460 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	4619      	mov	r1, r3
 8016426:	6878      	ldr	r0, [r7, #4]
 8016428:	f000 f82a 	bl	8016480 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	791b      	ldrb	r3, [r3, #4]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d002      	beq.n	801643a <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8016434:	6878      	ldr	r0, [r7, #4]
 8016436:	f000 f839 	bl	80164ac <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 801643a:	3710      	adds	r7, #16
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}

08016440 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b082      	sub	sp, #8
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	3308      	adds	r3, #8
 801644c:	4903      	ldr	r1, [pc, #12]	; (801645c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 801644e:	4618      	mov	r0, r3
 8016450:	f7ff fdaa 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016454:	bf00      	nop
 8016456:	3708      	adds	r7, #8
 8016458:	46bd      	mov	sp, r7
 801645a:	bd80      	pop	{r7, pc}
 801645c:	08025858 	.word	0x08025858

08016460 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b082      	sub	sp, #8
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	3308      	adds	r3, #8
 801646c:	4903      	ldr	r1, [pc, #12]	; (801647c <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 801646e:	4618      	mov	r0, r3
 8016470:	f7ff fd9a 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016474:	bf00      	nop
 8016476:	3708      	adds	r7, #8
 8016478:	46bd      	mov	sp, r7
 801647a:	bd80      	pop	{r7, pc}
 801647c:	08025870 	.word	0x08025870

08016480 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8016480:	b580      	push	{r7, lr}
 8016482:	b082      	sub	sp, #8
 8016484:	af00      	add	r7, sp, #0
 8016486:	6078      	str	r0, [r7, #4]
 8016488:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	f103 0008 	add.w	r0, r3, #8
 8016490:	683b      	ldr	r3, [r7, #0]
 8016492:	4a04      	ldr	r2, [pc, #16]	; (80164a4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8016494:	4904      	ldr	r1, [pc, #16]	; (80164a8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 8016496:	f7ff fd87 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801649a:	bf00      	nop
 801649c:	3708      	adds	r7, #8
 801649e:	46bd      	mov	sp, r7
 80164a0:	bd80      	pop	{r7, pc}
 80164a2:	bf00      	nop
 80164a4:	080258b8 	.word	0x080258b8
 80164a8:	080258d0 	.word	0x080258d0

080164ac <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b082      	sub	sp, #8
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	3308      	adds	r3, #8
 80164b8:	4903      	ldr	r1, [pc, #12]	; (80164c8 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 80164ba:	4618      	mov	r0, r3
 80164bc:	f7ff fd74 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80164c0:	bf00      	nop
 80164c2:	3708      	adds	r7, #8
 80164c4:	46bd      	mov	sp, r7
 80164c6:	bd80      	pop	{r7, pc}
 80164c8:	080258d8 	.word	0x080258d8

080164cc <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b08a      	sub	sp, #40	; 0x28
 80164d0:	af06      	add	r7, sp, #24
 80164d2:	60f8      	str	r0, [r7, #12]
 80164d4:	60b9      	str	r1, [r7, #8]
 80164d6:	607a      	str	r2, [r7, #4]
 80164d8:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 80164da:	f7f9 fe8d 	bl	80101f8 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 80164de:	4602      	mov	r2, r0
 80164e0:	69bb      	ldr	r3, [r7, #24]
 80164e2:	9305      	str	r3, [sp, #20]
 80164e4:	683b      	ldr	r3, [r7, #0]
 80164e6:	9304      	str	r3, [sp, #16]
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	9303      	str	r3, [sp, #12]
 80164ec:	68bb      	ldr	r3, [r7, #8]
 80164ee:	9302      	str	r3, [sp, #8]
 80164f0:	9201      	str	r2, [sp, #4]
 80164f2:	2300      	movs	r3, #0
 80164f4:	9300      	str	r3, [sp, #0]
 80164f6:	2300      	movs	r3, #0
 80164f8:	4a04      	ldr	r2, [pc, #16]	; (801650c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 80164fa:	4905      	ldr	r1, [pc, #20]	; (8016510 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 80164fc:	68f8      	ldr	r0, [r7, #12]
 80164fe:	f000 f855 	bl	80165ac <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016502:	bf00      	nop
 8016504:	3710      	adds	r7, #16
 8016506:	46bd      	mov	sp, r7
 8016508:	bd80      	pop	{r7, pc}
 801650a:	bf00      	nop
 801650c:	08025734 	.word	0x08025734
 8016510:	080259ec 	.word	0x080259ec

08016514 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016514:	b590      	push	{r4, r7, lr}
 8016516:	b08b      	sub	sp, #44	; 0x2c
 8016518:	af06      	add	r7, sp, #24
 801651a:	60f8      	str	r0, [r7, #12]
 801651c:	60b9      	str	r1, [r7, #8]
 801651e:	607a      	str	r2, [r7, #4]
 8016520:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8016522:	68bb      	ldr	r3, [r7, #8]
 8016524:	68d8      	ldr	r0, [r3, #12]
 8016526:	68bb      	ldr	r3, [r7, #8]
 8016528:	691c      	ldr	r4, [r3, #16]
 801652a:	68bb      	ldr	r3, [r7, #8]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	68ba      	ldr	r2, [r7, #8]
 8016530:	6952      	ldr	r2, [r2, #20]
 8016532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016534:	9105      	str	r1, [sp, #20]
 8016536:	6a39      	ldr	r1, [r7, #32]
 8016538:	9104      	str	r1, [sp, #16]
 801653a:	6839      	ldr	r1, [r7, #0]
 801653c:	9103      	str	r1, [sp, #12]
 801653e:	6879      	ldr	r1, [r7, #4]
 8016540:	9102      	str	r1, [sp, #8]
 8016542:	9201      	str	r2, [sp, #4]
 8016544:	9300      	str	r3, [sp, #0]
 8016546:	4623      	mov	r3, r4
 8016548:	4602      	mov	r2, r0
 801654a:	4904      	ldr	r1, [pc, #16]	; (801655c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 801654c:	68f8      	ldr	r0, [r7, #12]
 801654e:	f000 f82d 	bl	80165ac <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016552:	bf00      	nop
 8016554:	3714      	adds	r7, #20
 8016556:	46bd      	mov	sp, r7
 8016558:	bd90      	pop	{r4, r7, pc}
 801655a:	bf00      	nop
 801655c:	08025a10 	.word	0x08025a10

08016560 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016560:	b590      	push	{r4, r7, lr}
 8016562:	b08b      	sub	sp, #44	; 0x2c
 8016564:	af06      	add	r7, sp, #24
 8016566:	60f8      	str	r0, [r7, #12]
 8016568:	60b9      	str	r1, [r7, #8]
 801656a:	607a      	str	r2, [r7, #4]
 801656c:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 801656e:	68bb      	ldr	r3, [r7, #8]
 8016570:	68d8      	ldr	r0, [r3, #12]
 8016572:	68bb      	ldr	r3, [r7, #8]
 8016574:	691c      	ldr	r4, [r3, #16]
 8016576:	68bb      	ldr	r3, [r7, #8]
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	68ba      	ldr	r2, [r7, #8]
 801657c:	6952      	ldr	r2, [r2, #20]
 801657e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016580:	9105      	str	r1, [sp, #20]
 8016582:	6a39      	ldr	r1, [r7, #32]
 8016584:	9104      	str	r1, [sp, #16]
 8016586:	6839      	ldr	r1, [r7, #0]
 8016588:	9103      	str	r1, [sp, #12]
 801658a:	6879      	ldr	r1, [r7, #4]
 801658c:	9102      	str	r1, [sp, #8]
 801658e:	9201      	str	r2, [sp, #4]
 8016590:	9300      	str	r3, [sp, #0]
 8016592:	4623      	mov	r3, r4
 8016594:	4602      	mov	r2, r0
 8016596:	4904      	ldr	r1, [pc, #16]	; (80165a8 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8016598:	68f8      	ldr	r0, [r7, #12]
 801659a:	f000 f807 	bl	80165ac <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801659e:	bf00      	nop
 80165a0:	3714      	adds	r7, #20
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bd90      	pop	{r4, r7, pc}
 80165a6:	bf00      	nop
 80165a8:	08025a38 	.word	0x08025a38

080165ac <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80165ac:	b590      	push	{r4, r7, lr}
 80165ae:	b087      	sub	sp, #28
 80165b0:	af02      	add	r7, sp, #8
 80165b2:	60f8      	str	r0, [r7, #12]
 80165b4:	60b9      	str	r1, [r7, #8]
 80165b6:	607a      	str	r2, [r7, #4]
 80165b8:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	3308      	adds	r3, #8
 80165be:	68ba      	ldr	r2, [r7, #8]
 80165c0:	4910      	ldr	r1, [pc, #64]	; (8016604 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 80165c2:	4618      	mov	r0, r3
 80165c4:	f7ff fcf0 	bl	8015fa8 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 80165c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ca:	9300      	str	r3, [sp, #0]
 80165cc:	6a3b      	ldr	r3, [r7, #32]
 80165ce:	683a      	ldr	r2, [r7, #0]
 80165d0:	6879      	ldr	r1, [r7, #4]
 80165d2:	68f8      	ldr	r0, [r7, #12]
 80165d4:	f7ff fe36 	bl	8016244 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 80165d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80165de:	68f8      	ldr	r0, [r7, #12]
 80165e0:	f7ff fe52 	bl	8016288 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 80165e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	3308      	adds	r3, #8
 80165ea:	681c      	ldr	r4, [r3, #0]
 80165ec:	68f8      	ldr	r0, [r7, #12]
 80165ee:	f000 f80b 	bl	8016608 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 80165f2:	4603      	mov	r3, r0
 80165f4:	4619      	mov	r1, r3
 80165f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80165f8:	47a0      	blx	r4
}
 80165fa:	bf00      	nop
 80165fc:	3714      	adds	r7, #20
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd90      	pop	{r4, r7, pc}
 8016602:	bf00      	nop
 8016604:	08025a64 	.word	0x08025a64

08016608 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b082      	sub	sp, #8
 801660c:	af00      	add	r7, sp, #0
 801660e:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	3308      	adds	r3, #8
 8016614:	4618      	mov	r0, r3
 8016616:	f7ff fdad 	bl	8016174 <_ZN18SimpleStringBuffer8toStringEv>
 801661a:	4603      	mov	r3, r0
}
 801661c:	4618      	mov	r0, r3
 801661e:	3708      	adds	r7, #8
 8016620:	46bd      	mov	sp, r7
 8016622:	bd80      	pop	{r7, pc}

08016624 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b082      	sub	sp, #8
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	3308      	adds	r3, #8
 8016630:	4618      	mov	r0, r3
 8016632:	f7ff fca7 	bl	8015f84 <_ZN18SimpleStringBuffer5clearEv>
}
 8016636:	bf00      	nop
 8016638:	3708      	adds	r7, #8
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}

0801663e <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 801663e:	b480      	push	{r7}
 8016640:	b085      	sub	sp, #20
 8016642:	af00      	add	r7, sp, #0
 8016644:	60f8      	str	r0, [r7, #12]
 8016646:	60b9      	str	r1, [r7, #8]
 8016648:	607a      	str	r2, [r7, #4]
 801664a:	603b      	str	r3, [r7, #0]
    number_ = number;
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	687a      	ldr	r2, [r7, #4]
 8016650:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	68ba      	ldr	r2, [r7, #8]
 8016656:	609a      	str	r2, [r3, #8]
    size_ = size;
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	683a      	ldr	r2, [r7, #0]
 801665c:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	69ba      	ldr	r2, [r7, #24]
 8016662:	615a      	str	r2, [r3, #20]
    period_ = period;
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	7f3a      	ldrb	r2, [r7, #28]
 8016668:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8016670:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016676:	60da      	str	r2, [r3, #12]
    line_ = line;
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801667c:	611a      	str	r2, [r3, #16]
}
 801667e:	bf00      	nop
 8016680:	3714      	adds	r7, #20
 8016682:	46bd      	mov	sp, r7
 8016684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016688:	4770      	bx	lr

0801668a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 801668a:	b480      	push	{r7}
 801668c:	b085      	sub	sp, #20
 801668e:	af00      	add	r7, sp, #0
 8016690:	60f8      	str	r0, [r7, #12]
 8016692:	60b9      	str	r1, [r7, #8]
 8016694:	4613      	mov	r3, r2
 8016696:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8016698:	79fb      	ldrb	r3, [r7, #7]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d00b      	beq.n	80166b6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 801669e:	68bb      	ldr	r3, [r7, #8]
 80166a0:	7e1b      	ldrb	r3, [r3, #24]
 80166a2:	79fa      	ldrb	r2, [r7, #7]
 80166a4:	429a      	cmp	r2, r3
 80166a6:	d006      	beq.n	80166b6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80166a8:	68bb      	ldr	r3, [r7, #8]
 80166aa:	7e1b      	ldrb	r3, [r3, #24]
 80166ac:	2b01      	cmp	r3, #1
 80166ae:	d004      	beq.n	80166ba <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80166b0:	79fb      	ldrb	r3, [r7, #7]
 80166b2:	2b02      	cmp	r3, #2
 80166b4:	d101      	bne.n	80166ba <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80166b6:	2301      	movs	r3, #1
 80166b8:	e000      	b.n	80166bc <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 80166ba:	2300      	movs	r3, #0
}
 80166bc:	4618      	mov	r0, r3
 80166be:	3714      	adds	r7, #20
 80166c0:	46bd      	mov	sp, r7
 80166c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c6:	4770      	bx	lr

080166c8 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 80166c8:	b480      	push	{r7}
 80166ca:	b083      	sub	sp, #12
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
 80166d0:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	681a      	ldr	r2, [r3, #0]
 80166d6:	683b      	ldr	r3, [r7, #0]
 80166d8:	61da      	str	r2, [r3, #28]
    head_ = node;
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	683a      	ldr	r2, [r7, #0]
 80166de:	601a      	str	r2, [r3, #0]
}
 80166e0:	bf00      	nop
 80166e2:	370c      	adds	r7, #12
 80166e4:	46bd      	mov	sp, r7
 80166e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ea:	4770      	bx	lr

080166ec <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 80166ec:	b480      	push	{r7}
 80166ee:	b085      	sub	sp, #20
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
 80166f4:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 80166fc:	2300      	movs	r3, #0
 80166fe:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d019      	beq.n	801673a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	689b      	ldr	r3, [r3, #8]
 801670a:	683a      	ldr	r2, [r7, #0]
 801670c:	429a      	cmp	r2, r3
 801670e:	d10e      	bne.n	801672e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8016710:	68bb      	ldr	r3, [r7, #8]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d005      	beq.n	8016722 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	69da      	ldr	r2, [r3, #28]
 801671a:	68bb      	ldr	r3, [r7, #8]
 801671c:	61da      	str	r2, [r3, #28]
                return cur;
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	e00c      	b.n	801673c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	69da      	ldr	r2, [r3, #28]
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	601a      	str	r2, [r3, #0]
                return cur;
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	e006      	b.n	801673c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	69db      	ldr	r3, [r3, #28]
 8016736:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8016738:	e7e2      	b.n	8016700 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 801673a:	2300      	movs	r3, #0
}
 801673c:	4618      	mov	r0, r3
 801673e:	3714      	adds	r7, #20
 8016740:	46bd      	mov	sp, r7
 8016742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016746:	4770      	bx	lr

08016748 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8016748:	b480      	push	{r7}
 801674a:	b085      	sub	sp, #20
 801674c:	af00      	add	r7, sp, #0
 801674e:	6078      	str	r0, [r7, #4]
 8016750:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d00a      	beq.n	8016774 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	689b      	ldr	r3, [r3, #8]
 8016762:	683a      	ldr	r2, [r7, #0]
 8016764:	429a      	cmp	r2, r3
 8016766:	d101      	bne.n	801676c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	e004      	b.n	8016776 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	69db      	ldr	r3, [r3, #28]
 8016770:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8016772:	e7f1      	b.n	8016758 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8016774:	2300      	movs	r3, #0
}
 8016776:	4618      	mov	r0, r3
 8016778:	3714      	adds	r7, #20
 801677a:	46bd      	mov	sp, r7
 801677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016780:	4770      	bx	lr

08016782 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8016782:	b580      	push	{r7, lr}
 8016784:	b086      	sub	sp, #24
 8016786:	af00      	add	r7, sp, #0
 8016788:	60f8      	str	r0, [r7, #12]
 801678a:	60b9      	str	r1, [r7, #8]
 801678c:	4613      	mov	r3, r2
 801678e:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8016790:	68bb      	ldr	r3, [r7, #8]
 8016792:	617b      	str	r3, [r7, #20]
 8016794:	697b      	ldr	r3, [r7, #20]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d00e      	beq.n	80167b8 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 801679a:	79fb      	ldrb	r3, [r7, #7]
 801679c:	461a      	mov	r2, r3
 801679e:	6979      	ldr	r1, [r7, #20]
 80167a0:	68f8      	ldr	r0, [r7, #12]
 80167a2:	f7ff ff72 	bl	801668a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80167a6:	4603      	mov	r3, r0
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d001      	beq.n	80167b0 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 80167ac:	697b      	ldr	r3, [r7, #20]
 80167ae:	e004      	b.n	80167ba <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	69db      	ldr	r3, [r3, #28]
 80167b4:	617b      	str	r3, [r7, #20]
 80167b6:	e7ed      	b.n	8016794 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 80167b8:	2300      	movs	r3, #0
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3718      	adds	r7, #24
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}

080167c2 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 80167c2:	b580      	push	{r7, lr}
 80167c4:	b082      	sub	sp, #8
 80167c6:	af00      	add	r7, sp, #0
 80167c8:	6078      	str	r0, [r7, #4]
 80167ca:	460b      	mov	r3, r1
 80167cc:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	78fa      	ldrb	r2, [r7, #3]
 80167d4:	4619      	mov	r1, r3
 80167d6:	6878      	ldr	r0, [r7, #4]
 80167d8:	f7ff ffd3 	bl	8016782 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80167dc:	4603      	mov	r3, r0
}
 80167de:	4618      	mov	r0, r3
 80167e0:	3708      	adds	r7, #8
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd80      	pop	{r7, pc}

080167e6 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80167e6:	b580      	push	{r7, lr}
 80167e8:	b084      	sub	sp, #16
 80167ea:	af00      	add	r7, sp, #0
 80167ec:	60f8      	str	r0, [r7, #12]
 80167ee:	60b9      	str	r1, [r7, #8]
 80167f0:	4613      	mov	r3, r2
 80167f2:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 80167f4:	68bb      	ldr	r3, [r7, #8]
 80167f6:	69db      	ldr	r3, [r3, #28]
 80167f8:	79fa      	ldrb	r2, [r7, #7]
 80167fa:	4619      	mov	r1, r3
 80167fc:	68f8      	ldr	r0, [r7, #12]
 80167fe:	f7ff ffc0 	bl	8016782 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016802:	4603      	mov	r3, r0
}
 8016804:	4618      	mov	r0, r3
 8016806:	3710      	adds	r7, #16
 8016808:	46bd      	mov	sp, r7
 801680a:	bd80      	pop	{r7, pc}

0801680c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b084      	sub	sp, #16
 8016810:	af00      	add	r7, sp, #0
 8016812:	6078      	str	r0, [r7, #4]
 8016814:	460b      	mov	r3, r1
 8016816:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8016818:	2300      	movs	r3, #0
 801681a:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	60bb      	str	r3, [r7, #8]
 8016822:	68bb      	ldr	r3, [r7, #8]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d00f      	beq.n	8016848 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8016828:	78fb      	ldrb	r3, [r7, #3]
 801682a:	461a      	mov	r2, r3
 801682c:	68b9      	ldr	r1, [r7, #8]
 801682e:	6878      	ldr	r0, [r7, #4]
 8016830:	f7ff ff2b 	bl	801668a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016834:	4603      	mov	r3, r0
 8016836:	2b00      	cmp	r3, #0
 8016838:	d002      	beq.n	8016840 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	3301      	adds	r3, #1
 801683e:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8016840:	68bb      	ldr	r3, [r7, #8]
 8016842:	69db      	ldr	r3, [r3, #28]
 8016844:	60bb      	str	r3, [r7, #8]
 8016846:	e7ec      	b.n	8016822 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8016848:	68fb      	ldr	r3, [r7, #12]
}
 801684a:	4618      	mov	r0, r3
 801684c:	3710      	adds	r7, #16
 801684e:	46bd      	mov	sp, r7
 8016850:	bd80      	pop	{r7, pc}
	...

08016854 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8016854:	b480      	push	{r7}
 8016856:	b083      	sub	sp, #12
 8016858:	af00      	add	r7, sp, #0
 801685a:	6078      	str	r0, [r7, #4]
 801685c:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 801685e:	6839      	ldr	r1, [r7, #0]
 8016860:	4b09      	ldr	r3, [pc, #36]	; (8016888 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 8016862:	fba3 2301 	umull	r2, r3, r3, r1
 8016866:	1aca      	subs	r2, r1, r3
 8016868:	0852      	lsrs	r2, r2, #1
 801686a:	4413      	add	r3, r2
 801686c:	099a      	lsrs	r2, r3, #6
 801686e:	4613      	mov	r3, r2
 8016870:	00db      	lsls	r3, r3, #3
 8016872:	4413      	add	r3, r2
 8016874:	00db      	lsls	r3, r3, #3
 8016876:	4413      	add	r3, r2
 8016878:	1aca      	subs	r2, r1, r3
 801687a:	4613      	mov	r3, r2
}
 801687c:	4618      	mov	r0, r3
 801687e:	370c      	adds	r7, #12
 8016880:	46bd      	mov	sp, r7
 8016882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016886:	4770      	bx	lr
 8016888:	c0e07039 	.word	0xc0e07039

0801688c <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b082      	sub	sp, #8
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
 8016894:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 8016896:	683b      	ldr	r3, [r7, #0]
 8016898:	689b      	ldr	r3, [r3, #8]
 801689a:	4619      	mov	r1, r3
 801689c:	6878      	ldr	r0, [r7, #4]
 801689e:	f7ff ffd9 	bl	8016854 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80168a2:	4603      	mov	r3, r0
 80168a4:	009b      	lsls	r3, r3, #2
 80168a6:	687a      	ldr	r2, [r7, #4]
 80168a8:	4413      	add	r3, r2
 80168aa:	6839      	ldr	r1, [r7, #0]
 80168ac:	4618      	mov	r0, r3
 80168ae:	f7ff ff0b 	bl	80166c8 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 80168b2:	bf00      	nop
 80168b4:	3708      	adds	r7, #8
 80168b6:	46bd      	mov	sp, r7
 80168b8:	bd80      	pop	{r7, pc}

080168ba <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 80168ba:	b580      	push	{r7, lr}
 80168bc:	b082      	sub	sp, #8
 80168be:	af00      	add	r7, sp, #0
 80168c0:	6078      	str	r0, [r7, #4]
 80168c2:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 80168c4:	6839      	ldr	r1, [r7, #0]
 80168c6:	6878      	ldr	r0, [r7, #4]
 80168c8:	f7ff ffc4 	bl	8016854 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80168cc:	4603      	mov	r3, r0
 80168ce:	009b      	lsls	r3, r3, #2
 80168d0:	687a      	ldr	r2, [r7, #4]
 80168d2:	4413      	add	r3, r2
 80168d4:	6839      	ldr	r1, [r7, #0]
 80168d6:	4618      	mov	r0, r3
 80168d8:	f7ff ff08 	bl	80166ec <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 80168dc:	4603      	mov	r3, r0
}
 80168de:	4618      	mov	r0, r3
 80168e0:	3708      	adds	r7, #8
 80168e2:	46bd      	mov	sp, r7
 80168e4:	bd80      	pop	{r7, pc}

080168e6 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 80168e6:	b580      	push	{r7, lr}
 80168e8:	b082      	sub	sp, #8
 80168ea:	af00      	add	r7, sp, #0
 80168ec:	6078      	str	r0, [r7, #4]
 80168ee:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 80168f0:	6839      	ldr	r1, [r7, #0]
 80168f2:	6878      	ldr	r0, [r7, #4]
 80168f4:	f7ff ffae 	bl	8016854 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80168f8:	4603      	mov	r3, r0
 80168fa:	009b      	lsls	r3, r3, #2
 80168fc:	687a      	ldr	r2, [r7, #4]
 80168fe:	4413      	add	r3, r2
 8016900:	6839      	ldr	r1, [r7, #0]
 8016902:	4618      	mov	r0, r3
 8016904:	f7ff ff20 	bl	8016748 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8016908:	4603      	mov	r3, r0
}
 801690a:	4618      	mov	r0, r3
 801690c:	3708      	adds	r7, #8
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}

08016912 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8016912:	b580      	push	{r7, lr}
 8016914:	b084      	sub	sp, #16
 8016916:	af00      	add	r7, sp, #0
 8016918:	6078      	str	r0, [r7, #4]
 801691a:	460b      	mov	r3, r1
 801691c:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 801691e:	2300      	movs	r3, #0
 8016920:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8016922:	2300      	movs	r3, #0
 8016924:	60bb      	str	r3, [r7, #8]
 8016926:	68bb      	ldr	r3, [r7, #8]
 8016928:	2b48      	cmp	r3, #72	; 0x48
 801692a:	dc10      	bgt.n	801694e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 801692c:	68bb      	ldr	r3, [r7, #8]
 801692e:	009b      	lsls	r3, r3, #2
 8016930:	687a      	ldr	r2, [r7, #4]
 8016932:	4413      	add	r3, r2
 8016934:	78fa      	ldrb	r2, [r7, #3]
 8016936:	4611      	mov	r1, r2
 8016938:	4618      	mov	r0, r3
 801693a:	f7ff ff67 	bl	801680c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 801693e:	4602      	mov	r2, r0
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	4413      	add	r3, r2
 8016944:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8016946:	68bb      	ldr	r3, [r7, #8]
 8016948:	3301      	adds	r3, #1
 801694a:	60bb      	str	r3, [r7, #8]
 801694c:	e7eb      	b.n	8016926 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 801694e:	68fb      	ldr	r3, [r7, #12]
}
 8016950:	4618      	mov	r0, r3
 8016952:	3710      	adds	r7, #16
 8016954:	46bd      	mov	sp, r7
 8016956:	bd80      	pop	{r7, pc}

08016958 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b084      	sub	sp, #16
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
 8016960:	460b      	mov	r3, r1
 8016962:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8016964:	2300      	movs	r3, #0
 8016966:	60fb      	str	r3, [r7, #12]
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	2b48      	cmp	r3, #72	; 0x48
 801696c:	dc12      	bgt.n	8016994 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	009b      	lsls	r3, r3, #2
 8016972:	687a      	ldr	r2, [r7, #4]
 8016974:	4413      	add	r3, r2
 8016976:	78fa      	ldrb	r2, [r7, #3]
 8016978:	4611      	mov	r1, r2
 801697a:	4618      	mov	r0, r3
 801697c:	f7ff ff21 	bl	80167c2 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8016980:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 8016982:	68bb      	ldr	r3, [r7, #8]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d001      	beq.n	801698c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 8016988:	68bb      	ldr	r3, [r7, #8]
 801698a:	e004      	b.n	8016996 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	3301      	adds	r3, #1
 8016990:	60fb      	str	r3, [r7, #12]
 8016992:	e7e9      	b.n	8016968 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8016994:	2300      	movs	r3, #0
}
 8016996:	4618      	mov	r0, r3
 8016998:	3710      	adds	r7, #16
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}

0801699e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 801699e:	b580      	push	{r7, lr}
 80169a0:	b086      	sub	sp, #24
 80169a2:	af00      	add	r7, sp, #0
 80169a4:	60f8      	str	r0, [r7, #12]
 80169a6:	60b9      	str	r1, [r7, #8]
 80169a8:	4613      	mov	r3, r2
 80169aa:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 80169ac:	68bb      	ldr	r3, [r7, #8]
 80169ae:	689b      	ldr	r3, [r3, #8]
 80169b0:	4619      	mov	r1, r3
 80169b2:	68f8      	ldr	r0, [r7, #12]
 80169b4:	f7ff ff4e 	bl	8016854 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80169b8:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 80169ba:	697b      	ldr	r3, [r7, #20]
 80169bc:	009b      	lsls	r3, r3, #2
 80169be:	68fa      	ldr	r2, [r7, #12]
 80169c0:	4413      	add	r3, r2
 80169c2:	79fa      	ldrb	r2, [r7, #7]
 80169c4:	68b9      	ldr	r1, [r7, #8]
 80169c6:	4618      	mov	r0, r3
 80169c8:	f7ff ff0d 	bl	80167e6 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80169cc:	6138      	str	r0, [r7, #16]
    if (node) return node;
 80169ce:	693b      	ldr	r3, [r7, #16]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d001      	beq.n	80169d8 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 80169d4:	693b      	ldr	r3, [r7, #16]
 80169d6:	e019      	b.n	8016a0c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 80169d8:	697b      	ldr	r3, [r7, #20]
 80169da:	3301      	adds	r3, #1
 80169dc:	617b      	str	r3, [r7, #20]
 80169de:	697b      	ldr	r3, [r7, #20]
 80169e0:	2b48      	cmp	r3, #72	; 0x48
 80169e2:	d812      	bhi.n	8016a0a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 80169e4:	697b      	ldr	r3, [r7, #20]
 80169e6:	009b      	lsls	r3, r3, #2
 80169e8:	68fa      	ldr	r2, [r7, #12]
 80169ea:	4413      	add	r3, r2
 80169ec:	79fa      	ldrb	r2, [r7, #7]
 80169ee:	4611      	mov	r1, r2
 80169f0:	4618      	mov	r0, r3
 80169f2:	f7ff fee6 	bl	80167c2 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80169f6:	6138      	str	r0, [r7, #16]
        if (node) return node;
 80169f8:	693b      	ldr	r3, [r7, #16]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d001      	beq.n	8016a02 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 80169fe:	693b      	ldr	r3, [r7, #16]
 8016a00:	e004      	b.n	8016a0c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8016a02:	697b      	ldr	r3, [r7, #20]
 8016a04:	3301      	adds	r3, #1
 8016a06:	617b      	str	r3, [r7, #20]
 8016a08:	e7e9      	b.n	80169de <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8016a0a:	2300      	movs	r3, #0
}
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	3718      	adds	r7, #24
 8016a10:	46bd      	mov	sp, r7
 8016a12:	bd80      	pop	{r7, pc}

08016a14 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8016a14:	b5b0      	push	{r4, r5, r7, lr}
 8016a16:	b082      	sub	sp, #8
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2448      	movs	r4, #72	; 0x48
 8016a20:	461d      	mov	r5, r3
 8016a22:	2c00      	cmp	r4, #0
 8016a24:	db05      	blt.n	8016a32 <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8016a26:	4628      	mov	r0, r5
 8016a28:	f7ff fa84 	bl	8015f34 <_ZN22MemoryLeakDetectorListC1Ev>
 8016a2c:	3504      	adds	r5, #4
 8016a2e:	3c01      	subs	r4, #1
 8016a30:	e7f7      	b.n	8016a22 <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	4618      	mov	r0, r3
 8016a36:	3708      	adds	r7, #8
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	bdb0      	pop	{r4, r5, r7, pc}

08016a3c <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8016a3c:	b590      	push	{r4, r7, lr}
 8016a3e:	b083      	sub	sp, #12
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	6078      	str	r0, [r7, #4]
 8016a44:	6039      	str	r1, [r7, #0]
 8016a46:	4a1d      	ldr	r2, [pc, #116]	; (8016abc <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	601a      	str	r2, [r3, #0]
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	330c      	adds	r3, #12
 8016a50:	4618      	mov	r0, r3
 8016a52:	f7ff fbe3 	bl	801621c <_ZN28MemoryLeakOutputStringBufferC1Ev>
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016a5c:	331c      	adds	r3, #28
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f7ff ffd8 	bl	8016a14 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016a6a:	2201      	movs	r2, #1
 8016a6c:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016a74:	3304      	adds	r3, #4
 8016a76:	2201      	movs	r2, #1
 8016a78:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	2201      	movs	r2, #1
 8016a7e:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016a86:	3308      	adds	r3, #8
 8016a88:	2200      	movs	r2, #0
 8016a8a:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	683a      	ldr	r2, [r7, #0]
 8016a90:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 8016a92:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8016a96:	490a      	ldr	r1, [pc, #40]	; (8016ac0 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 8016a98:	2004      	movs	r0, #4
 8016a9a:	f7f3 fb17 	bl	800a0cc <_ZnwjPKci>
 8016a9e:	4604      	mov	r4, r0
 8016aa0:	4620      	mov	r0, r4
 8016aa2:	f7f5 fbe7 	bl	800c274 <_ZN11SimpleMutexC1Ev>
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016aac:	330c      	adds	r3, #12
 8016aae:	601c      	str	r4, [r3, #0]
}
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	370c      	adds	r7, #12
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bd90      	pop	{r4, r7, pc}
 8016aba:	bf00      	nop
 8016abc:	08028500 	.word	0x08028500
 8016ac0:	08025a68 	.word	0x08025a68

08016ac4 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8016ac4:	b590      	push	{r4, r7, lr}
 8016ac6:	b083      	sub	sp, #12
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	6078      	str	r0, [r7, #4]
 8016acc:	4a0e      	ldr	r2, [pc, #56]	; (8016b08 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016ad8:	330c      	adds	r3, #12
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d00d      	beq.n	8016afc <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016ae6:	330c      	adds	r3, #12
 8016ae8:	681c      	ldr	r4, [r3, #0]
 8016aea:	2c00      	cmp	r4, #0
 8016aec:	d006      	beq.n	8016afc <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8016aee:	4620      	mov	r0, r4
 8016af0:	f7f5 fbd2 	bl	800c298 <_ZN11SimpleMutexD1Ev>
 8016af4:	2104      	movs	r1, #4
 8016af6:	4620      	mov	r0, r4
 8016af8:	f7f3 fafc 	bl	800a0f4 <_ZdlPvj>
    }
}
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	4618      	mov	r0, r3
 8016b00:	370c      	adds	r7, #12
 8016b02:	46bd      	mov	sp, r7
 8016b04:	bd90      	pop	{r4, r7, pc}
 8016b06:	bf00      	nop
 8016b08:	08028500 	.word	0x08028500

08016b0c <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b082      	sub	sp, #8
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
}
 8016b14:	6878      	ldr	r0, [r7, #4]
 8016b16:	f7ff ffd5 	bl	8016ac4 <_ZN18MemoryLeakDetectorD1Ev>
 8016b1a:	f241 1150 	movw	r1, #4432	; 0x1150
 8016b1e:	6878      	ldr	r0, [r7, #4]
 8016b20:	f7f3 fae8 	bl	800a0f4 <_ZdlPvj>
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	4618      	mov	r0, r3
 8016b28:	3708      	adds	r7, #8
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	bd80      	pop	{r7, pc}

08016b2e <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8016b2e:	b580      	push	{r7, lr}
 8016b30:	b082      	sub	sp, #8
 8016b32:	af00      	add	r7, sp, #0
 8016b34:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	330c      	adds	r3, #12
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f7ff fd72 	bl	8016624 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	2203      	movs	r2, #3
 8016b44:	721a      	strb	r2, [r3, #8]
}
 8016b46:	bf00      	nop
 8016b48:	3708      	adds	r7, #8
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	bd80      	pop	{r7, pc}

08016b4e <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8016b4e:	b480      	push	{r7}
 8016b50:	b083      	sub	sp, #12
 8016b52:	af00      	add	r7, sp, #0
 8016b54:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	2202      	movs	r2, #2
 8016b5a:	721a      	strb	r2, [r3, #8]
}
 8016b5c:	bf00      	nop
 8016b5e:	370c      	adds	r7, #12
 8016b60:	46bd      	mov	sp, r7
 8016b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b66:	4770      	bx	lr

08016b68 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8016b68:	b480      	push	{r7}
 8016b6a:	b083      	sub	sp, #12
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	2202      	movs	r2, #2
 8016b74:	721a      	strb	r2, [r3, #8]
}
 8016b76:	bf00      	nop
 8016b78:	370c      	adds	r7, #12
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b80:	4770      	bx	lr

08016b82 <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 8016b82:	b480      	push	{r7}
 8016b84:	b083      	sub	sp, #12
 8016b86:	af00      	add	r7, sp, #0
 8016b88:	6078      	str	r0, [r7, #4]
    return mutex_;
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016b90:	330c      	adds	r3, #12
 8016b92:	681b      	ldr	r3, [r3, #0]
}
 8016b94:	4618      	mov	r0, r3
 8016b96:	370c      	adds	r7, #12
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b9e:	4770      	bx	lr

08016ba0 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8016ba0:	b480      	push	{r7}
 8016ba2:	b083      	sub	sp, #12
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	f023 0303 	bic.w	r3, r3, #3
 8016bae:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	370c      	adds	r7, #12
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bba:	4770      	bx	lr

08016bbc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b082      	sub	sp, #8
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	6078      	str	r0, [r7, #4]
 8016bc4:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	3303      	adds	r3, #3
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f7ff ffe8 	bl	8016ba0 <_ZL31calculateVoidPointerAlignedSizej>
 8016bd0:	4603      	mov	r3, r0
}
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	3708      	adds	r7, #8
 8016bd6:	46bd      	mov	sp, r7
 8016bd8:	bd80      	pop	{r7, pc}

08016bda <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8016bda:	b580      	push	{r7, lr}
 8016bdc:	b084      	sub	sp, #16
 8016bde:	af00      	add	r7, sp, #0
 8016be0:	60f8      	str	r0, [r7, #12]
 8016be2:	60b9      	str	r1, [r7, #8]
 8016be4:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8016be6:	6879      	ldr	r1, [r7, #4]
 8016be8:	68f8      	ldr	r0, [r7, #12]
 8016bea:	f7ff ffe7 	bl	8016bbc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016bee:	4602      	mov	r2, r0
 8016bf0:	68bb      	ldr	r3, [r7, #8]
 8016bf2:	4413      	add	r3, r2
}
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	3710      	adds	r7, #16
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}

08016bfc <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b08a      	sub	sp, #40	; 0x28
 8016c00:	af06      	add	r7, sp, #24
 8016c02:	60f8      	str	r0, [r7, #12]
 8016c04:	60b9      	str	r1, [r7, #8]
 8016c06:	607a      	str	r2, [r7, #4]
 8016c08:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016c10:	3304      	adds	r3, #4
 8016c12:	681a      	ldr	r2, [r3, #0]
 8016c14:	1c51      	adds	r1, r2, #1
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016c1c:	3304      	adds	r3, #4
 8016c1e:	6019      	str	r1, [r3, #0]
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	7a19      	ldrb	r1, [r3, #8]
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016c2a:	3308      	adds	r3, #8
 8016c2c:	781b      	ldrb	r3, [r3, #0]
 8016c2e:	6a38      	ldr	r0, [r7, #32]
 8016c30:	9004      	str	r0, [sp, #16]
 8016c32:	69f8      	ldr	r0, [r7, #28]
 8016c34:	9003      	str	r0, [sp, #12]
 8016c36:	9302      	str	r3, [sp, #8]
 8016c38:	9101      	str	r1, [sp, #4]
 8016c3a:	69bb      	ldr	r3, [r7, #24]
 8016c3c:	9300      	str	r3, [sp, #0]
 8016c3e:	683b      	ldr	r3, [r7, #0]
 8016c40:	6879      	ldr	r1, [r7, #4]
 8016c42:	68b8      	ldr	r0, [r7, #8]
 8016c44:	f7ff fcfb 	bl	801663e <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8016c48:	68bb      	ldr	r3, [r7, #8]
 8016c4a:	689a      	ldr	r2, [r3, #8]
 8016c4c:	68bb      	ldr	r3, [r7, #8]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	4413      	add	r3, r2
 8016c52:	4619      	mov	r1, r3
 8016c54:	68f8      	ldr	r0, [r7, #12]
 8016c56:	f000 f861 	bl	8016d1c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016c60:	331c      	adds	r3, #28
 8016c62:	68b9      	ldr	r1, [r7, #8]
 8016c64:	4618      	mov	r0, r3
 8016c66:	f7ff fe11 	bl	801688c <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8016c6a:	bf00      	nop
 8016c6c:	3710      	adds	r7, #16
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	bd80      	pop	{r7, pc}

08016c72 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8016c72:	b580      	push	{r7, lr}
 8016c74:	b08a      	sub	sp, #40	; 0x28
 8016c76:	af04      	add	r7, sp, #16
 8016c78:	60f8      	str	r0, [r7, #12]
 8016c7a:	60b9      	str	r1, [r7, #8]
 8016c7c:	607a      	str	r2, [r7, #4]
 8016c7e:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8016c80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016c84:	9302      	str	r3, [sp, #8]
 8016c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c88:	9301      	str	r3, [sp, #4]
 8016c8a:	6a3b      	ldr	r3, [r7, #32]
 8016c8c:	9300      	str	r3, [sp, #0]
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	687a      	ldr	r2, [r7, #4]
 8016c92:	68b9      	ldr	r1, [r7, #8]
 8016c94:	68f8      	ldr	r0, [r7, #12]
 8016c96:	f000 f96f 	bl	8016f78 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8016c9a:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8016c9c:	697b      	ldr	r3, [r7, #20]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d101      	bne.n	8016ca6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	e017      	b.n	8016cd6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 8016ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016caa:	9300      	str	r3, [sp, #0]
 8016cac:	697b      	ldr	r3, [r7, #20]
 8016cae:	683a      	ldr	r2, [r7, #0]
 8016cb0:	68b9      	ldr	r1, [r7, #8]
 8016cb2:	68f8      	ldr	r0, [r7, #12]
 8016cb4:	f000 f98a 	bl	8016fcc <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8016cb8:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8016cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cbc:	9302      	str	r3, [sp, #8]
 8016cbe:	6a3b      	ldr	r3, [r7, #32]
 8016cc0:	9301      	str	r3, [sp, #4]
 8016cc2:	68bb      	ldr	r3, [r7, #8]
 8016cc4:	9300      	str	r3, [sp, #0]
 8016cc6:	683b      	ldr	r3, [r7, #0]
 8016cc8:	697a      	ldr	r2, [r7, #20]
 8016cca:	6939      	ldr	r1, [r7, #16]
 8016ccc:	68f8      	ldr	r0, [r7, #12]
 8016cce:	f7ff ff95 	bl	8016bfc <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	689b      	ldr	r3, [r3, #8]
}
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	3718      	adds	r7, #24
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	bd80      	pop	{r7, pc}
	...

08016ce0 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b084      	sub	sp, #16
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
 8016ce8:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016cf0:	331c      	adds	r3, #28
 8016cf2:	6839      	ldr	r1, [r7, #0]
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f7ff fdf6 	bl	80168e6 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8016cfa:	60f8      	str	r0, [r7, #12]
  if (node)
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d006      	beq.n	8016d10 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 8016d02:	4b05      	ldr	r3, [pc, #20]	; (8016d18 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	68fa      	ldr	r2, [r7, #12]
 8016d08:	6812      	ldr	r2, [r2, #0]
 8016d0a:	21cd      	movs	r1, #205	; 0xcd
 8016d0c:	6838      	ldr	r0, [r7, #0]
 8016d0e:	4798      	blx	r3
#endif
}
 8016d10:	bf00      	nop
 8016d12:	3710      	adds	r7, #16
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd80      	pop	{r7, pc}
 8016d18:	200000d8 	.word	0x200000d8

08016d1c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8016d1c:	b480      	push	{r7}
 8016d1e:	b085      	sub	sp, #20
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	6078      	str	r0, [r7, #4]
 8016d24:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8016d26:	2300      	movs	r3, #0
 8016d28:	60fb      	str	r3, [r7, #12]
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	2b02      	cmp	r3, #2
 8016d2e:	d812      	bhi.n	8016d56 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8016d30:	68f9      	ldr	r1, [r7, #12]
 8016d32:	4b0c      	ldr	r3, [pc, #48]	; (8016d64 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8016d34:	fba3 2301 	umull	r2, r3, r3, r1
 8016d38:	085a      	lsrs	r2, r3, #1
 8016d3a:	4613      	mov	r3, r2
 8016d3c:	005b      	lsls	r3, r3, #1
 8016d3e:	4413      	add	r3, r2
 8016d40:	1aca      	subs	r2, r1, r3
 8016d42:	6839      	ldr	r1, [r7, #0]
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	440b      	add	r3, r1
 8016d48:	4907      	ldr	r1, [pc, #28]	; (8016d68 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8016d4a:	5c8a      	ldrb	r2, [r1, r2]
 8016d4c:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	3301      	adds	r3, #1
 8016d52:	60fb      	str	r3, [r7, #12]
 8016d54:	e7e9      	b.n	8016d2a <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8016d56:	bf00      	nop
 8016d58:	3714      	adds	r7, #20
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d60:	4770      	bx	lr
 8016d62:	bf00      	nop
 8016d64:	aaaaaaab 	.word	0xaaaaaaab
 8016d68:	080284f4 	.word	0x080284f4

08016d6c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8016d6c:	b480      	push	{r7}
 8016d6e:	b085      	sub	sp, #20
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
 8016d74:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8016d76:	2300      	movs	r3, #0
 8016d78:	60fb      	str	r3, [r7, #12]
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	2b02      	cmp	r3, #2
 8016d7e:	d816      	bhi.n	8016dae <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8016d80:	683a      	ldr	r2, [r7, #0]
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	4413      	add	r3, r2
 8016d86:	7818      	ldrb	r0, [r3, #0]
 8016d88:	68f9      	ldr	r1, [r7, #12]
 8016d8a:	4b0c      	ldr	r3, [pc, #48]	; (8016dbc <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8016d8c:	fba3 2301 	umull	r2, r3, r3, r1
 8016d90:	085a      	lsrs	r2, r3, #1
 8016d92:	4613      	mov	r3, r2
 8016d94:	005b      	lsls	r3, r3, #1
 8016d96:	4413      	add	r3, r2
 8016d98:	1aca      	subs	r2, r1, r3
 8016d9a:	4b09      	ldr	r3, [pc, #36]	; (8016dc0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8016d9c:	5c9b      	ldrb	r3, [r3, r2]
 8016d9e:	4298      	cmp	r0, r3
 8016da0:	d001      	beq.n	8016da6 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 8016da2:	2300      	movs	r3, #0
 8016da4:	e004      	b.n	8016db0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	3301      	adds	r3, #1
 8016daa:	60fb      	str	r3, [r7, #12]
 8016dac:	e7e5      	b.n	8016d7a <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8016dae:	2301      	movs	r3, #1
}
 8016db0:	4618      	mov	r0, r3
 8016db2:	3714      	adds	r7, #20
 8016db4:	46bd      	mov	sp, r7
 8016db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dba:	4770      	bx	lr
 8016dbc:	aaaaaaab 	.word	0xaaaaaaab
 8016dc0:	080284f4 	.word	0x080284f4

08016dc4 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b084      	sub	sp, #16
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	60f8      	str	r0, [r7, #12]
 8016dcc:	60b9      	str	r1, [r7, #8]
 8016dce:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8016dd0:	68ba      	ldr	r2, [r7, #8]
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	429a      	cmp	r2, r3
 8016dd6:	d101      	bne.n	8016ddc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8016dd8:	2301      	movs	r3, #1
 8016dda:	e013      	b.n	8016e04 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016de2:	781b      	ldrb	r3, [r3, #0]
 8016de4:	f083 0301 	eor.w	r3, r3, #1
 8016de8:	b2db      	uxtb	r3, r3
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d001      	beq.n	8016df2 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8016dee:	2301      	movs	r3, #1
 8016df0:	e008      	b.n	8016e04 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	331c      	adds	r3, #28
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	68b9      	ldr	r1, [r7, #8]
 8016dfc:	6878      	ldr	r0, [r7, #4]
 8016dfe:	4798      	blx	r3
 8016e00:	4603      	mov	r3, r0
 8016e02:	bf00      	nop
}
 8016e04:	4618      	mov	r0, r3
 8016e06:	3710      	adds	r7, #16
 8016e08:	46bd      	mov	sp, r7
 8016e0a:	bd80      	pop	{r7, pc}

08016e0c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8016e0c:	b590      	push	{r4, r7, lr}
 8016e0e:	b087      	sub	sp, #28
 8016e10:	af02      	add	r7, sp, #8
 8016e12:	60f8      	str	r0, [r7, #12]
 8016e14:	60b9      	str	r1, [r7, #8]
 8016e16:	607a      	str	r2, [r7, #4]
 8016e18:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8016e1a:	68bb      	ldr	r3, [r7, #8]
 8016e1c:	695a      	ldr	r2, [r3, #20]
 8016e1e:	68bb      	ldr	r3, [r7, #8]
 8016e20:	695b      	ldr	r3, [r3, #20]
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	3328      	adds	r3, #40	; 0x28
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	4610      	mov	r0, r2
 8016e2a:	4798      	blx	r3
 8016e2c:	4604      	mov	r4, r0
 8016e2e:	6a3b      	ldr	r3, [r7, #32]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	3328      	adds	r3, #40	; 0x28
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	6a38      	ldr	r0, [r7, #32]
 8016e38:	4798      	blx	r3
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	461a      	mov	r2, r3
 8016e3e:	4621      	mov	r1, r4
 8016e40:	68f8      	ldr	r0, [r7, #12]
 8016e42:	f7ff ffbf 	bl	8016dc4 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8016e46:	4603      	mov	r3, r0
 8016e48:	f083 0301 	eor.w	r3, r3, #1
 8016e4c:	b2db      	uxtb	r3, r3
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d014      	beq.n	8016e7c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	f103 040c 	add.w	r4, r3, #12
 8016e58:	6a3b      	ldr	r3, [r7, #32]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	3328      	adds	r3, #40	; 0x28
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	6a38      	ldr	r0, [r7, #32]
 8016e62:	4798      	blx	r3
 8016e64:	4602      	mov	r2, r0
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	685b      	ldr	r3, [r3, #4]
 8016e6a:	9301      	str	r3, [sp, #4]
 8016e6c:	9200      	str	r2, [sp, #0]
 8016e6e:	683b      	ldr	r3, [r7, #0]
 8016e70:	687a      	ldr	r2, [r7, #4]
 8016e72:	68b9      	ldr	r1, [r7, #8]
 8016e74:	4620      	mov	r0, r4
 8016e76:	f7ff fb4d 	bl	8016514 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8016e7a:	e02e      	b.n	8016eda <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8016e7c:	68bb      	ldr	r3, [r7, #8]
 8016e7e:	689a      	ldr	r2, [r3, #8]
 8016e80:	68bb      	ldr	r3, [r7, #8]
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	4413      	add	r3, r2
 8016e86:	4619      	mov	r1, r3
 8016e88:	68f8      	ldr	r0, [r7, #12]
 8016e8a:	f7ff ff6f 	bl	8016d6c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8016e8e:	4603      	mov	r3, r0
 8016e90:	f083 0301 	eor.w	r3, r3, #1
 8016e94:	b2db      	uxtb	r3, r3
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d014      	beq.n	8016ec4 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	f103 040c 	add.w	r4, r3, #12
 8016ea0:	6a3b      	ldr	r3, [r7, #32]
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	3328      	adds	r3, #40	; 0x28
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	6a38      	ldr	r0, [r7, #32]
 8016eaa:	4798      	blx	r3
 8016eac:	4602      	mov	r2, r0
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	685b      	ldr	r3, [r3, #4]
 8016eb2:	9301      	str	r3, [sp, #4]
 8016eb4:	9200      	str	r2, [sp, #0]
 8016eb6:	683b      	ldr	r3, [r7, #0]
 8016eb8:	687a      	ldr	r2, [r7, #4]
 8016eba:	68b9      	ldr	r1, [r7, #8]
 8016ebc:	4620      	mov	r0, r4
 8016ebe:	f7ff fb4f 	bl	8016560 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8016ec2:	e00a      	b.n	8016eda <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8016ec4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d006      	beq.n	8016eda <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8016ecc:	6a3b      	ldr	r3, [r7, #32]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	3324      	adds	r3, #36	; 0x24
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	68b9      	ldr	r1, [r7, #8]
 8016ed6:	6a38      	ldr	r0, [r7, #32]
 8016ed8:	4798      	blx	r3
}
 8016eda:	bf00      	nop
 8016edc:	3714      	adds	r7, #20
 8016ede:	46bd      	mov	sp, r7
 8016ee0:	bd90      	pop	{r4, r7, pc}
	...

08016ee4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8016ee4:	b580      	push	{r7, lr}
 8016ee6:	b086      	sub	sp, #24
 8016ee8:	af02      	add	r7, sp, #8
 8016eea:	60f8      	str	r0, [r7, #12]
 8016eec:	60b9      	str	r1, [r7, #8]
 8016eee:	607a      	str	r2, [r7, #4]
 8016ef0:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8016ef2:	4b08      	ldr	r3, [pc, #32]	; (8016f14 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8016ef4:	681a      	ldr	r2, [r3, #0]
 8016ef6:	78fb      	ldrb	r3, [r7, #3]
 8016ef8:	9301      	str	r3, [sp, #4]
 8016efa:	2300      	movs	r3, #0
 8016efc:	9300      	str	r3, [sp, #0]
 8016efe:	4613      	mov	r3, r2
 8016f00:	687a      	ldr	r2, [r7, #4]
 8016f02:	68b9      	ldr	r1, [r7, #8]
 8016f04:	68f8      	ldr	r0, [r7, #12]
 8016f06:	f000 f87f 	bl	8017008 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8016f0a:	4603      	mov	r3, r0
}
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	3710      	adds	r7, #16
 8016f10:	46bd      	mov	sp, r7
 8016f12:	bd80      	pop	{r7, pc}
 8016f14:	20000100 	.word	0x20000100

08016f18 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8016f18:	b590      	push	{r4, r7, lr}
 8016f1a:	b085      	sub	sp, #20
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	60f8      	str	r0, [r7, #12]
 8016f20:	60b9      	str	r1, [r7, #8]
 8016f22:	607a      	str	r2, [r7, #4]
 8016f24:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8016f26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d00e      	beq.n	8016f4c <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8016f2e:	68bb      	ldr	r3, [r7, #8]
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	3308      	adds	r3, #8
 8016f34:	681c      	ldr	r4, [r3, #0]
 8016f36:	6879      	ldr	r1, [r7, #4]
 8016f38:	68f8      	ldr	r0, [r7, #12]
 8016f3a:	f7ff fe3f 	bl	8016bbc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016f3e:	4601      	mov	r1, r0
 8016f40:	6a3b      	ldr	r3, [r7, #32]
 8016f42:	683a      	ldr	r2, [r7, #0]
 8016f44:	68b8      	ldr	r0, [r7, #8]
 8016f46:	47a0      	blx	r4
 8016f48:	4603      	mov	r3, r0
 8016f4a:	e010      	b.n	8016f6e <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8016f4c:	68bb      	ldr	r3, [r7, #8]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	3308      	adds	r3, #8
 8016f52:	681c      	ldr	r4, [r3, #0]
 8016f54:	6879      	ldr	r1, [r7, #4]
 8016f56:	68f8      	ldr	r0, [r7, #12]
 8016f58:	f7ff fe30 	bl	8016bbc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	f103 0120 	add.w	r1, r3, #32
 8016f62:	6a3b      	ldr	r3, [r7, #32]
 8016f64:	683a      	ldr	r2, [r7, #0]
 8016f66:	68b8      	ldr	r0, [r7, #8]
 8016f68:	47a0      	blx	r4
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	bf00      	nop
}
 8016f6e:	4618      	mov	r0, r3
 8016f70:	3714      	adds	r7, #20
 8016f72:	46bd      	mov	sp, r7
 8016f74:	bd90      	pop	{r4, r7, pc}
	...

08016f78 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8016f78:	b590      	push	{r4, r7, lr}
 8016f7a:	b085      	sub	sp, #20
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	60f8      	str	r0, [r7, #12]
 8016f80:	60b9      	str	r1, [r7, #8]
 8016f82:	607a      	str	r2, [r7, #4]
 8016f84:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8016f86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d00b      	beq.n	8016fa6 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8016f8e:	4b0e      	ldr	r3, [pc, #56]	; (8016fc8 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8016f90:	681c      	ldr	r4, [r3, #0]
 8016f92:	6839      	ldr	r1, [r7, #0]
 8016f94:	68f8      	ldr	r0, [r7, #12]
 8016f96:	f7ff fe11 	bl	8016bbc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	4619      	mov	r1, r3
 8016f9e:	6878      	ldr	r0, [r7, #4]
 8016fa0:	47a0      	blx	r4
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	e00c      	b.n	8016fc0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8016fa6:	4b08      	ldr	r3, [pc, #32]	; (8016fc8 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8016fa8:	681c      	ldr	r4, [r3, #0]
 8016faa:	6839      	ldr	r1, [r7, #0]
 8016fac:	68f8      	ldr	r0, [r7, #12]
 8016fae:	f7ff fe05 	bl	8016bbc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	3320      	adds	r3, #32
 8016fb6:	4619      	mov	r1, r3
 8016fb8:	6878      	ldr	r0, [r7, #4]
 8016fba:	47a0      	blx	r4
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	bf00      	nop
}
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	3714      	adds	r7, #20
 8016fc4:	46bd      	mov	sp, r7
 8016fc6:	bd90      	pop	{r4, r7, pc}
 8016fc8:	200000cc 	.word	0x200000cc

08016fcc <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b084      	sub	sp, #16
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	60f8      	str	r0, [r7, #12]
 8016fd4:	60b9      	str	r1, [r7, #8]
 8016fd6:	607a      	str	r2, [r7, #4]
 8016fd8:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8016fda:	7e3b      	ldrb	r3, [r7, #24]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d008      	beq.n	8016ff2 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8016fe0:	68bb      	ldr	r3, [r7, #8]
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	3320      	adds	r3, #32
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	2120      	movs	r1, #32
 8016fea:	68b8      	ldr	r0, [r7, #8]
 8016fec:	4798      	blx	r3
 8016fee:	4603      	mov	r3, r0
 8016ff0:	e006      	b.n	8017000 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8016ff2:	687a      	ldr	r2, [r7, #4]
 8016ff4:	6839      	ldr	r1, [r7, #0]
 8016ff6:	68f8      	ldr	r0, [r7, #12]
 8016ff8:	f7ff fdef 	bl	8016bda <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	bf00      	nop
}
 8017000:	4618      	mov	r0, r3
 8017002:	3710      	adds	r7, #16
 8017004:	46bd      	mov	sp, r7
 8017006:	bd80      	pop	{r7, pc}

08017008 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017008:	b580      	push	{r7, lr}
 801700a:	b08a      	sub	sp, #40	; 0x28
 801700c:	af04      	add	r7, sp, #16
 801700e:	60f8      	str	r0, [r7, #12]
 8017010:	60b9      	str	r1, [r7, #8]
 8017012:	607a      	str	r2, [r7, #4]
 8017014:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8017016:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801701a:	9301      	str	r3, [sp, #4]
 801701c:	6a3b      	ldr	r3, [r7, #32]
 801701e:	9300      	str	r3, [sp, #0]
 8017020:	683b      	ldr	r3, [r7, #0]
 8017022:	687a      	ldr	r2, [r7, #4]
 8017024:	68b9      	ldr	r1, [r7, #8]
 8017026:	68f8      	ldr	r0, [r7, #12]
 8017028:	f7ff ff76 	bl	8016f18 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 801702c:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 801702e:	697b      	ldr	r3, [r7, #20]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d101      	bne.n	8017038 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8017034:	2300      	movs	r3, #0
 8017036:	e017      	b.n	8017068 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8017038:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801703c:	9300      	str	r3, [sp, #0]
 801703e:	697b      	ldr	r3, [r7, #20]
 8017040:	687a      	ldr	r2, [r7, #4]
 8017042:	68b9      	ldr	r1, [r7, #8]
 8017044:	68f8      	ldr	r0, [r7, #12]
 8017046:	f7ff ffc1 	bl	8016fcc <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 801704a:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 801704c:	6a3b      	ldr	r3, [r7, #32]
 801704e:	9302      	str	r3, [sp, #8]
 8017050:	683b      	ldr	r3, [r7, #0]
 8017052:	9301      	str	r3, [sp, #4]
 8017054:	68bb      	ldr	r3, [r7, #8]
 8017056:	9300      	str	r3, [sp, #0]
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	697a      	ldr	r2, [r7, #20]
 801705c:	6939      	ldr	r1, [r7, #16]
 801705e:	68f8      	ldr	r0, [r7, #12]
 8017060:	f7ff fdcc 	bl	8016bfc <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8017064:	693b      	ldr	r3, [r7, #16]
 8017066:	689b      	ldr	r3, [r3, #8]
}
 8017068:	4618      	mov	r0, r3
 801706a:	3718      	adds	r7, #24
 801706c:	46bd      	mov	sp, r7
 801706e:	bd80      	pop	{r7, pc}

08017070 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017070:	b590      	push	{r4, r7, lr}
 8017072:	b089      	sub	sp, #36	; 0x24
 8017074:	af02      	add	r7, sp, #8
 8017076:	60f8      	str	r0, [r7, #12]
 8017078:	60b9      	str	r1, [r7, #8]
 801707a:	607a      	str	r2, [r7, #4]
 801707c:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d03a      	beq.n	80170fa <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801708a:	331c      	adds	r3, #28
 801708c:	6879      	ldr	r1, [r7, #4]
 801708e:	4618      	mov	r0, r3
 8017090:	f7ff fc13 	bl	80168ba <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8017094:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8017096:	697b      	ldr	r3, [r7, #20]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d10b      	bne.n	80170b4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	f103 000c 	add.w	r0, r3, #12
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	685b      	ldr	r3, [r3, #4]
 80170a6:	9300      	str	r3, [sp, #0]
 80170a8:	68bb      	ldr	r3, [r7, #8]
 80170aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80170ac:	6839      	ldr	r1, [r7, #0]
 80170ae:	f7ff fa0d 	bl	80164cc <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 80170b2:	e023      	b.n	80170fc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 80170b4:	68b8      	ldr	r0, [r7, #8]
 80170b6:	f7f8 ff95 	bl	800ffe4 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 80170ba:	4603      	mov	r3, r0
 80170bc:	f083 0301 	eor.w	r3, r3, #1
 80170c0:	b2db      	uxtb	r3, r3
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d01a      	beq.n	80170fc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 80170c6:	697b      	ldr	r3, [r7, #20]
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 80170cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80170d0:	9301      	str	r3, [sp, #4]
 80170d2:	68bb      	ldr	r3, [r7, #8]
 80170d4:	9300      	str	r3, [sp, #0]
 80170d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d8:	683a      	ldr	r2, [r7, #0]
 80170da:	6979      	ldr	r1, [r7, #20]
 80170dc:	68f8      	ldr	r0, [r7, #12]
 80170de:	f7ff fe95 	bl	8016e0c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 80170e2:	68bb      	ldr	r3, [r7, #8]
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	330c      	adds	r3, #12
 80170e8:	681c      	ldr	r4, [r3, #0]
 80170ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170ec:	9300      	str	r3, [sp, #0]
 80170ee:	683b      	ldr	r3, [r7, #0]
 80170f0:	693a      	ldr	r2, [r7, #16]
 80170f2:	6879      	ldr	r1, [r7, #4]
 80170f4:	68b8      	ldr	r0, [r7, #8]
 80170f6:	47a0      	blx	r4
 80170f8:	e000      	b.n	80170fc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 80170fa:	bf00      	nop
    }
}
 80170fc:	371c      	adds	r7, #28
 80170fe:	46bd      	mov	sp, r7
 8017100:	bd90      	pop	{r4, r7, pc}
	...

08017104 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8017104:	b580      	push	{r7, lr}
 8017106:	b086      	sub	sp, #24
 8017108:	af02      	add	r7, sp, #8
 801710a:	60f8      	str	r0, [r7, #12]
 801710c:	60b9      	str	r1, [r7, #8]
 801710e:	607a      	str	r2, [r7, #4]
 8017110:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8017112:	4b08      	ldr	r3, [pc, #32]	; (8017134 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8017114:	681a      	ldr	r2, [r3, #0]
 8017116:	78fb      	ldrb	r3, [r7, #3]
 8017118:	9301      	str	r3, [sp, #4]
 801711a:	2300      	movs	r3, #0
 801711c:	9300      	str	r3, [sp, #0]
 801711e:	4613      	mov	r3, r2
 8017120:	687a      	ldr	r2, [r7, #4]
 8017122:	68b9      	ldr	r1, [r7, #8]
 8017124:	68f8      	ldr	r0, [r7, #12]
 8017126:	f7ff ffa3 	bl	8017070 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 801712a:	bf00      	nop
 801712c:	3710      	adds	r7, #16
 801712e:	46bd      	mov	sp, r7
 8017130:	bd80      	pop	{r7, pc}
 8017132:	bf00      	nop
 8017134:	20000100 	.word	0x20000100

08017138 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017138:	b580      	push	{r7, lr}
 801713a:	b08a      	sub	sp, #40	; 0x28
 801713c:	af04      	add	r7, sp, #16
 801713e:	60f8      	str	r0, [r7, #12]
 8017140:	60b9      	str	r1, [r7, #8]
 8017142:	607a      	str	r2, [r7, #4]
 8017144:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d023      	beq.n	8017194 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017152:	331c      	adds	r3, #28
 8017154:	6879      	ldr	r1, [r7, #4]
 8017156:	4618      	mov	r0, r3
 8017158:	f7ff fbaf 	bl	80168ba <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 801715c:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 801715e:	697b      	ldr	r3, [r7, #20]
 8017160:	2b00      	cmp	r3, #0
 8017162:	d10c      	bne.n	801717e <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	f103 000c 	add.w	r0, r3, #12
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	685b      	ldr	r3, [r3, #4]
 801716e:	9300      	str	r3, [sp, #0]
 8017170:	68bb      	ldr	r3, [r7, #8]
 8017172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017174:	6a39      	ldr	r1, [r7, #32]
 8017176:	f7ff f9a9 	bl	80164cc <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 801717a:	2300      	movs	r3, #0
 801717c:	e019      	b.n	80171b2 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 801717e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017182:	9301      	str	r3, [sp, #4]
 8017184:	68bb      	ldr	r3, [r7, #8]
 8017186:	9300      	str	r3, [sp, #0]
 8017188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801718a:	6a3a      	ldr	r2, [r7, #32]
 801718c:	6979      	ldr	r1, [r7, #20]
 801718e:	68f8      	ldr	r0, [r7, #12]
 8017190:	f7ff fe3c 	bl	8016e0c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8017194:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017198:	9302      	str	r3, [sp, #8]
 801719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801719c:	9301      	str	r3, [sp, #4]
 801719e:	6a3b      	ldr	r3, [r7, #32]
 80171a0:	9300      	str	r3, [sp, #0]
 80171a2:	683b      	ldr	r3, [r7, #0]
 80171a4:	687a      	ldr	r2, [r7, #4]
 80171a6:	68b9      	ldr	r1, [r7, #8]
 80171a8:	68f8      	ldr	r0, [r7, #12]
 80171aa:	f7ff fd62 	bl	8016c72 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 80171ae:	4603      	mov	r3, r0
 80171b0:	bf00      	nop
}
 80171b2:	4618      	mov	r0, r3
 80171b4:	3718      	adds	r7, #24
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}

080171ba <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 80171ba:	b580      	push	{r7, lr}
 80171bc:	b084      	sub	sp, #16
 80171be:	af00      	add	r7, sp, #0
 80171c0:	6078      	str	r0, [r7, #4]
 80171c2:	460b      	mov	r3, r1
 80171c4:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80171cc:	331c      	adds	r3, #28
 80171ce:	78fa      	ldrb	r2, [r7, #3]
 80171d0:	4611      	mov	r1, r2
 80171d2:	4618      	mov	r0, r3
 80171d4:	f7ff fbc0 	bl	8016958 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 80171d8:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	330c      	adds	r3, #12
 80171de:	4618      	mov	r0, r3
 80171e0:	f7ff f882 	bl	80162e8 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d010      	beq.n	801720c <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	330c      	adds	r3, #12
 80171ee:	68f9      	ldr	r1, [r7, #12]
 80171f0:	4618      	mov	r0, r3
 80171f2:	f7ff f897 	bl	8016324 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80171fc:	331c      	adds	r3, #28
 80171fe:	78fa      	ldrb	r2, [r7, #3]
 8017200:	68f9      	ldr	r1, [r7, #12]
 8017202:	4618      	mov	r0, r3
 8017204:	f7ff fbcb 	bl	801699e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017208:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801720a:	e7eb      	b.n	80171e4 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	330c      	adds	r3, #12
 8017210:	4618      	mov	r0, r3
 8017212:	f7ff f8e7 	bl	80163e4 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8017216:	bf00      	nop
 8017218:	3710      	adds	r7, #16
 801721a:	46bd      	mov	sp, r7
 801721c:	bd80      	pop	{r7, pc}

0801721e <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 801721e:	b580      	push	{r7, lr}
 8017220:	b082      	sub	sp, #8
 8017222:	af00      	add	r7, sp, #0
 8017224:	6078      	str	r0, [r7, #4]
 8017226:	460b      	mov	r3, r1
 8017228:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 801722a:	78fb      	ldrb	r3, [r7, #3]
 801722c:	4619      	mov	r1, r3
 801722e:	6878      	ldr	r0, [r7, #4]
 8017230:	f7ff ffc3 	bl	80171ba <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	330c      	adds	r3, #12
 8017238:	4618      	mov	r0, r3
 801723a:	f7ff f9e5 	bl	8016608 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 801723e:	4603      	mov	r3, r0
}
 8017240:	4618      	mov	r0, r3
 8017242:	3708      	adds	r7, #8
 8017244:	46bd      	mov	sp, r7
 8017246:	bd80      	pop	{r7, pc}

08017248 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8017248:	b580      	push	{r7, lr}
 801724a:	b084      	sub	sp, #16
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017256:	331c      	adds	r3, #28
 8017258:	2103      	movs	r1, #3
 801725a:	4618      	mov	r0, r3
 801725c:	f7ff fb7c 	bl	8016958 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8017260:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d011      	beq.n	801728c <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	7e1b      	ldrb	r3, [r3, #24]
 801726c:	2b03      	cmp	r3, #3
 801726e:	d102      	bne.n	8017276 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	2202      	movs	r2, #2
 8017274:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801727c:	331c      	adds	r3, #28
 801727e:	2203      	movs	r2, #3
 8017280:	68f9      	ldr	r1, [r7, #12]
 8017282:	4618      	mov	r0, r3
 8017284:	f7ff fb8b 	bl	801699e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017288:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801728a:	e7ea      	b.n	8017262 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 801728c:	bf00      	nop
 801728e:	3710      	adds	r7, #16
 8017290:	46bd      	mov	sp, r7
 8017292:	bd80      	pop	{r7, pc}

08017294 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8017294:	b580      	push	{r7, lr}
 8017296:	b082      	sub	sp, #8
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
 801729c:	460b      	mov	r3, r1
 801729e:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80172a6:	331c      	adds	r3, #28
 80172a8:	78fa      	ldrb	r2, [r7, #3]
 80172aa:	4611      	mov	r1, r2
 80172ac:	4618      	mov	r0, r3
 80172ae:	f7ff fb30 	bl	8016912 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 80172b2:	4603      	mov	r3, r0
}
 80172b4:	4618      	mov	r0, r3
 80172b6:	3708      	adds	r7, #8
 80172b8:	46bd      	mov	sp, r7
 80172ba:	bd80      	pop	{r7, pc}

080172bc <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 80172bc:	b580      	push	{r7, lr}
 80172be:	b084      	sub	sp, #16
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	60f8      	str	r0, [r7, #12]
 80172c4:	60b9      	str	r1, [r7, #8]
 80172c6:	607a      	str	r2, [r7, #4]
 80172c8:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	68b9      	ldr	r1, [r7, #8]
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7f5 fb13 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	3308      	adds	r3, #8
 80172d8:	6879      	ldr	r1, [r7, #4]
 80172da:	4618      	mov	r0, r3
 80172dc:	f7f5 fb0d 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	683a      	ldr	r2, [r7, #0]
 80172e4:	611a      	str	r2, [r3, #16]
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	2200      	movs	r2, #0
 80172ea:	615a      	str	r2, [r3, #20]
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	4618      	mov	r0, r3
 80172f0:	3710      	adds	r7, #16
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}

080172f6 <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 80172f6:	b480      	push	{r7}
 80172f8:	b083      	sub	sp, #12
 80172fa:	af00      	add	r7, sp, #0
 80172fc:	6078      	str	r0, [r7, #4]
 80172fe:	6039      	str	r1, [r7, #0]
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	4618      	mov	r0, r3
 8017304:	370c      	adds	r7, #12
 8017306:	46bd      	mov	sp, r7
 8017308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801730c:	4770      	bx	lr

0801730e <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 801730e:	b480      	push	{r7}
 8017310:	b083      	sub	sp, #12
 8017312:	af00      	add	r7, sp, #0
 8017314:	6078      	str	r0, [r7, #4]
 8017316:	6039      	str	r1, [r7, #0]
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	4618      	mov	r0, r3
 801731c:	370c      	adds	r7, #12
 801731e:	46bd      	mov	sp, r7
 8017320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017324:	4770      	bx	lr

08017326 <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8017326:	b480      	push	{r7}
 8017328:	b085      	sub	sp, #20
 801732a:	af00      	add	r7, sp, #0
 801732c:	60f8      	str	r0, [r7, #12]
 801732e:	60b9      	str	r1, [r7, #8]
 8017330:	4613      	mov	r3, r2
 8017332:	71fb      	strb	r3, [r7, #7]
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	4618      	mov	r0, r3
 8017338:	3714      	adds	r7, #20
 801733a:	46bd      	mov	sp, r7
 801733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017340:	4770      	bx	lr

08017342 <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8017342:	b480      	push	{r7}
 8017344:	b085      	sub	sp, #20
 8017346:	af00      	add	r7, sp, #0
 8017348:	60f8      	str	r0, [r7, #12]
 801734a:	60b9      	str	r1, [r7, #8]
 801734c:	607a      	str	r2, [r7, #4]
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	4618      	mov	r0, r3
 8017352:	3714      	adds	r7, #20
 8017354:	46bd      	mov	sp, r7
 8017356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801735a:	4770      	bx	lr

0801735c <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 801735c:	b480      	push	{r7}
 801735e:	b085      	sub	sp, #20
 8017360:	af00      	add	r7, sp, #0
 8017362:	60f8      	str	r0, [r7, #12]
 8017364:	60b9      	str	r1, [r7, #8]
 8017366:	607a      	str	r2, [r7, #4]
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	4618      	mov	r0, r3
 801736c:	3714      	adds	r7, #20
 801736e:	46bd      	mov	sp, r7
 8017370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017374:	4770      	bx	lr

08017376 <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8017376:	b480      	push	{r7}
 8017378:	b085      	sub	sp, #20
 801737a:	af00      	add	r7, sp, #0
 801737c:	60f8      	str	r0, [r7, #12]
 801737e:	60b9      	str	r1, [r7, #8]
 8017380:	607a      	str	r2, [r7, #4]
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	4618      	mov	r0, r3
 8017386:	3714      	adds	r7, #20
 8017388:	46bd      	mov	sp, r7
 801738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801738e:	4770      	bx	lr

08017390 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8017390:	b480      	push	{r7}
 8017392:	b085      	sub	sp, #20
 8017394:	af00      	add	r7, sp, #0
 8017396:	60f8      	str	r0, [r7, #12]
 8017398:	60b9      	str	r1, [r7, #8]
 801739a:	607a      	str	r2, [r7, #4]
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	4618      	mov	r0, r3
 80173a0:	3714      	adds	r7, #20
 80173a2:	46bd      	mov	sp, r7
 80173a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a8:	4770      	bx	lr

080173aa <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 80173aa:	b480      	push	{r7}
 80173ac:	b085      	sub	sp, #20
 80173ae:	af00      	add	r7, sp, #0
 80173b0:	60f8      	str	r0, [r7, #12]
 80173b2:	60b9      	str	r1, [r7, #8]
 80173b4:	4639      	mov	r1, r7
 80173b6:	e881 000c 	stmia.w	r1, {r2, r3}
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	4618      	mov	r0, r3
 80173be:	3714      	adds	r7, #20
 80173c0:	46bd      	mov	sp, r7
 80173c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c6:	4770      	bx	lr

080173c8 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 80173c8:	b480      	push	{r7}
 80173ca:	b085      	sub	sp, #20
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	60f8      	str	r0, [r7, #12]
 80173d0:	60b9      	str	r1, [r7, #8]
 80173d2:	4639      	mov	r1, r7
 80173d4:	e881 000c 	stmia.w	r1, {r2, r3}
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	4618      	mov	r0, r3
 80173dc:	3714      	adds	r7, #20
 80173de:	46bd      	mov	sp, r7
 80173e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e4:	4770      	bx	lr

080173e6 <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 80173e6:	b480      	push	{r7}
 80173e8:	b085      	sub	sp, #20
 80173ea:	af00      	add	r7, sp, #0
 80173ec:	60f8      	str	r0, [r7, #12]
 80173ee:	60b9      	str	r1, [r7, #8]
 80173f0:	ed87 0b00 	vstr	d0, [r7]
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	4618      	mov	r0, r3
 80173f8:	3714      	adds	r7, #20
 80173fa:	46bd      	mov	sp, r7
 80173fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017400:	4770      	bx	lr

08017402 <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8017402:	b480      	push	{r7}
 8017404:	b085      	sub	sp, #20
 8017406:	af00      	add	r7, sp, #0
 8017408:	60f8      	str	r0, [r7, #12]
 801740a:	60b9      	str	r1, [r7, #8]
 801740c:	607a      	str	r2, [r7, #4]
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	4618      	mov	r0, r3
 8017412:	3714      	adds	r7, #20
 8017414:	46bd      	mov	sp, r7
 8017416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801741a:	4770      	bx	lr

0801741c <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 801741c:	b480      	push	{r7}
 801741e:	b085      	sub	sp, #20
 8017420:	af00      	add	r7, sp, #0
 8017422:	60f8      	str	r0, [r7, #12]
 8017424:	60b9      	str	r1, [r7, #8]
 8017426:	607a      	str	r2, [r7, #4]
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	4618      	mov	r0, r3
 801742c:	3714      	adds	r7, #20
 801742e:	46bd      	mov	sp, r7
 8017430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017434:	4770      	bx	lr

08017436 <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8017436:	b480      	push	{r7}
 8017438:	b085      	sub	sp, #20
 801743a:	af00      	add	r7, sp, #0
 801743c:	60f8      	str	r0, [r7, #12]
 801743e:	60b9      	str	r1, [r7, #8]
 8017440:	607a      	str	r2, [r7, #4]
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	4618      	mov	r0, r3
 8017446:	3714      	adds	r7, #20
 8017448:	46bd      	mov	sp, r7
 801744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801744e:	4770      	bx	lr

08017450 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8017450:	b480      	push	{r7}
 8017452:	b085      	sub	sp, #20
 8017454:	af00      	add	r7, sp, #0
 8017456:	60f8      	str	r0, [r7, #12]
 8017458:	60b9      	str	r1, [r7, #8]
 801745a:	607a      	str	r2, [r7, #4]
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	4618      	mov	r0, r3
 8017460:	3714      	adds	r7, #20
 8017462:	46bd      	mov	sp, r7
 8017464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017468:	4770      	bx	lr

0801746a <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 801746a:	b480      	push	{r7}
 801746c:	b085      	sub	sp, #20
 801746e:	af00      	add	r7, sp, #0
 8017470:	60f8      	str	r0, [r7, #12]
 8017472:	60b9      	str	r1, [r7, #8]
 8017474:	607a      	str	r2, [r7, #4]
 8017476:	603b      	str	r3, [r7, #0]
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	4618      	mov	r0, r3
 801747c:	3714      	adds	r7, #20
 801747e:	46bd      	mov	sp, r7
 8017480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017484:	4770      	bx	lr

08017486 <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8017486:	b480      	push	{r7}
 8017488:	b085      	sub	sp, #20
 801748a:	af00      	add	r7, sp, #0
 801748c:	60f8      	str	r0, [r7, #12]
 801748e:	60b9      	str	r1, [r7, #8]
 8017490:	607a      	str	r2, [r7, #4]
 8017492:	603b      	str	r3, [r7, #0]
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	4618      	mov	r0, r3
 8017498:	3714      	adds	r7, #20
 801749a:	46bd      	mov	sp, r7
 801749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a0:	4770      	bx	lr

080174a2 <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 80174a2:	b480      	push	{r7}
 80174a4:	b085      	sub	sp, #20
 80174a6:	af00      	add	r7, sp, #0
 80174a8:	60f8      	str	r0, [r7, #12]
 80174aa:	60b9      	str	r1, [r7, #8]
 80174ac:	607a      	str	r2, [r7, #4]
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	4618      	mov	r0, r3
 80174b2:	3714      	adds	r7, #20
 80174b4:	46bd      	mov	sp, r7
 80174b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ba:	4770      	bx	lr

080174bc <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 80174bc:	b480      	push	{r7}
 80174be:	b085      	sub	sp, #20
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	60f8      	str	r0, [r7, #12]
 80174c4:	60b9      	str	r1, [r7, #8]
 80174c6:	607a      	str	r2, [r7, #4]
 80174c8:	603b      	str	r3, [r7, #0]
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	4618      	mov	r0, r3
 80174ce:	3714      	adds	r7, #20
 80174d0:	46bd      	mov	sp, r7
 80174d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d6:	4770      	bx	lr

080174d8 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 80174d8:	b480      	push	{r7}
 80174da:	b083      	sub	sp, #12
 80174dc:	af00      	add	r7, sp, #0
 80174de:	6078      	str	r0, [r7, #4]
 80174e0:	2300      	movs	r3, #0
 80174e2:	4618      	mov	r0, r3
 80174e4:	370c      	adds	r7, #12
 80174e6:	46bd      	mov	sp, r7
 80174e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ec:	4770      	bx	lr
	...

080174f0 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b084      	sub	sp, #16
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
 80174f8:	6039      	str	r1, [r7, #0]
 80174fa:	f107 0308 	add.w	r3, r7, #8
 80174fe:	4909      	ldr	r1, [pc, #36]	; (8017524 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8017500:	4618      	mov	r0, r3
 8017502:	f7f5 f9a6 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8017506:	f107 0308 	add.w	r3, r7, #8
 801750a:	4619      	mov	r1, r3
 801750c:	6878      	ldr	r0, [r7, #4]
 801750e:	f005 fec5 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
 8017512:	f107 0308 	add.w	r3, r7, #8
 8017516:	4618      	mov	r0, r3
 8017518:	f7f5 fd53 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801751c:	6878      	ldr	r0, [r7, #4]
 801751e:	3710      	adds	r7, #16
 8017520:	46bd      	mov	sp, r7
 8017522:	bd80      	pop	{r7, pc}
 8017524:	08025a88 	.word	0x08025a88

08017528 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8017528:	b480      	push	{r7}
 801752a:	b083      	sub	sp, #12
 801752c:	af00      	add	r7, sp, #0
 801752e:	6078      	str	r0, [r7, #4]
 8017530:	460b      	mov	r3, r1
 8017532:	70fb      	strb	r3, [r7, #3]
 8017534:	78fb      	ldrb	r3, [r7, #3]
 8017536:	4618      	mov	r0, r3
 8017538:	370c      	adds	r7, #12
 801753a:	46bd      	mov	sp, r7
 801753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017540:	4770      	bx	lr

08017542 <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 8017542:	b480      	push	{r7}
 8017544:	b083      	sub	sp, #12
 8017546:	af00      	add	r7, sp, #0
 8017548:	6078      	str	r0, [r7, #4]
 801754a:	2300      	movs	r3, #0
 801754c:	4618      	mov	r0, r3
 801754e:	370c      	adds	r7, #12
 8017550:	46bd      	mov	sp, r7
 8017552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017556:	4770      	bx	lr

08017558 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 8017558:	b480      	push	{r7}
 801755a:	b083      	sub	sp, #12
 801755c:	af00      	add	r7, sp, #0
 801755e:	6078      	str	r0, [r7, #4]
 8017560:	2300      	movs	r3, #0
 8017562:	4618      	mov	r0, r3
 8017564:	370c      	adds	r7, #12
 8017566:	46bd      	mov	sp, r7
 8017568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756c:	4770      	bx	lr

0801756e <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 801756e:	b480      	push	{r7}
 8017570:	b083      	sub	sp, #12
 8017572:	af00      	add	r7, sp, #0
 8017574:	6078      	str	r0, [r7, #4]
 8017576:	6039      	str	r1, [r7, #0]
 8017578:	683b      	ldr	r3, [r7, #0]
 801757a:	4618      	mov	r0, r3
 801757c:	370c      	adds	r7, #12
 801757e:	46bd      	mov	sp, r7
 8017580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017584:	4770      	bx	lr

08017586 <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 8017586:	b480      	push	{r7}
 8017588:	b083      	sub	sp, #12
 801758a:	af00      	add	r7, sp, #0
 801758c:	6078      	str	r0, [r7, #4]
 801758e:	2300      	movs	r3, #0
 8017590:	4618      	mov	r0, r3
 8017592:	370c      	adds	r7, #12
 8017594:	46bd      	mov	sp, r7
 8017596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801759a:	4770      	bx	lr

0801759c <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 801759c:	b480      	push	{r7}
 801759e:	b083      	sub	sp, #12
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	6078      	str	r0, [r7, #4]
 80175a4:	6039      	str	r1, [r7, #0]
 80175a6:	683b      	ldr	r3, [r7, #0]
 80175a8:	4618      	mov	r0, r3
 80175aa:	370c      	adds	r7, #12
 80175ac:	46bd      	mov	sp, r7
 80175ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b2:	4770      	bx	lr

080175b4 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 80175b4:	b480      	push	{r7}
 80175b6:	b083      	sub	sp, #12
 80175b8:	af00      	add	r7, sp, #0
 80175ba:	6078      	str	r0, [r7, #4]
 80175bc:	2300      	movs	r3, #0
 80175be:	4618      	mov	r0, r3
 80175c0:	370c      	adds	r7, #12
 80175c2:	46bd      	mov	sp, r7
 80175c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c8:	4770      	bx	lr

080175ca <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 80175ca:	b480      	push	{r7}
 80175cc:	b083      	sub	sp, #12
 80175ce:	af00      	add	r7, sp, #0
 80175d0:	6078      	str	r0, [r7, #4]
 80175d2:	6039      	str	r1, [r7, #0]
 80175d4:	683b      	ldr	r3, [r7, #0]
 80175d6:	4618      	mov	r0, r3
 80175d8:	370c      	adds	r7, #12
 80175da:	46bd      	mov	sp, r7
 80175dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e0:	4770      	bx	lr

080175e2 <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 80175e2:	b580      	push	{r7, lr}
 80175e4:	b082      	sub	sp, #8
 80175e6:	af00      	add	r7, sp, #0
 80175e8:	6078      	str	r0, [r7, #4]
 80175ea:	6039      	str	r1, [r7, #0]
 80175ec:	2100      	movs	r1, #0
 80175ee:	6878      	ldr	r0, [r7, #4]
 80175f0:	f7f3 f972 	bl	800a8d8 <_ZN18cpputest_ulonglongC1Ei>
 80175f4:	6878      	ldr	r0, [r7, #4]
 80175f6:	3708      	adds	r7, #8
 80175f8:	46bd      	mov	sp, r7
 80175fa:	bd80      	pop	{r7, pc}

080175fc <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 80175fc:	b480      	push	{r7}
 80175fe:	b085      	sub	sp, #20
 8017600:	af00      	add	r7, sp, #0
 8017602:	60f8      	str	r0, [r7, #12]
 8017604:	60b9      	str	r1, [r7, #8]
 8017606:	4639      	mov	r1, r7
 8017608:	e881 000c 	stmia.w	r1, {r2, r3}
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	461a      	mov	r2, r3
 8017610:	463b      	mov	r3, r7
 8017612:	cb03      	ldmia	r3!, {r0, r1}
 8017614:	6010      	str	r0, [r2, #0]
 8017616:	6051      	str	r1, [r2, #4]
 8017618:	68f8      	ldr	r0, [r7, #12]
 801761a:	3714      	adds	r7, #20
 801761c:	46bd      	mov	sp, r7
 801761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017622:	4770      	bx	lr

08017624 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
 801762c:	6039      	str	r1, [r7, #0]
 801762e:	2100      	movs	r1, #0
 8017630:	6878      	ldr	r0, [r7, #4]
 8017632:	f7f3 f945 	bl	800a8c0 <_ZN17cpputest_longlongC1Ei>
 8017636:	6878      	ldr	r0, [r7, #4]
 8017638:	3708      	adds	r7, #8
 801763a:	46bd      	mov	sp, r7
 801763c:	bd80      	pop	{r7, pc}

0801763e <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 801763e:	b480      	push	{r7}
 8017640:	b085      	sub	sp, #20
 8017642:	af00      	add	r7, sp, #0
 8017644:	60f8      	str	r0, [r7, #12]
 8017646:	60b9      	str	r1, [r7, #8]
 8017648:	4639      	mov	r1, r7
 801764a:	e881 000c 	stmia.w	r1, {r2, r3}
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	461a      	mov	r2, r3
 8017652:	463b      	mov	r3, r7
 8017654:	cb03      	ldmia	r3!, {r0, r1}
 8017656:	6010      	str	r0, [r2, #0]
 8017658:	6051      	str	r1, [r2, #4]
 801765a:	68f8      	ldr	r0, [r7, #12]
 801765c:	3714      	adds	r7, #20
 801765e:	46bd      	mov	sp, r7
 8017660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017664:	4770      	bx	lr

08017666 <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 8017666:	b480      	push	{r7}
 8017668:	b083      	sub	sp, #12
 801766a:	af00      	add	r7, sp, #0
 801766c:	6078      	str	r0, [r7, #4]
 801766e:	2300      	movs	r3, #0
 8017670:	4618      	mov	r0, r3
 8017672:	370c      	adds	r7, #12
 8017674:	46bd      	mov	sp, r7
 8017676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767a:	4770      	bx	lr

0801767c <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 801767c:	b480      	push	{r7}
 801767e:	b083      	sub	sp, #12
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
 8017684:	6039      	str	r1, [r7, #0]
 8017686:	683b      	ldr	r3, [r7, #0]
 8017688:	4618      	mov	r0, r3
 801768a:	370c      	adds	r7, #12
 801768c:	46bd      	mov	sp, r7
 801768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017692:	4770      	bx	lr

08017694 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 8017694:	b480      	push	{r7}
 8017696:	b083      	sub	sp, #12
 8017698:	af00      	add	r7, sp, #0
 801769a:	6078      	str	r0, [r7, #4]
 801769c:	f04f 0200 	mov.w	r2, #0
 80176a0:	f04f 0300 	mov.w	r3, #0
 80176a4:	ec43 2b17 	vmov	d7, r2, r3
 80176a8:	eeb0 0a47 	vmov.f32	s0, s14
 80176ac:	eef0 0a67 	vmov.f32	s1, s15
 80176b0:	370c      	adds	r7, #12
 80176b2:	46bd      	mov	sp, r7
 80176b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b8:	4770      	bx	lr

080176ba <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 80176ba:	b480      	push	{r7}
 80176bc:	b085      	sub	sp, #20
 80176be:	af00      	add	r7, sp, #0
 80176c0:	60f8      	str	r0, [r7, #12]
 80176c2:	ed87 0b00 	vstr	d0, [r7]
 80176c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80176ca:	ec43 2b17 	vmov	d7, r2, r3
 80176ce:	eeb0 0a47 	vmov.f32	s0, s14
 80176d2:	eef0 0a67 	vmov.f32	s1, s15
 80176d6:	3714      	adds	r7, #20
 80176d8:	46bd      	mov	sp, r7
 80176da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176de:	4770      	bx	lr

080176e0 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 80176e0:	b480      	push	{r7}
 80176e2:	b083      	sub	sp, #12
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
 80176e8:	4b03      	ldr	r3, [pc, #12]	; (80176f8 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 80176ea:	4618      	mov	r0, r3
 80176ec:	370c      	adds	r7, #12
 80176ee:	46bd      	mov	sp, r7
 80176f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f4:	4770      	bx	lr
 80176f6:	bf00      	nop
 80176f8:	08025a88 	.word	0x08025a88

080176fc <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 80176fc:	b480      	push	{r7}
 80176fe:	b083      	sub	sp, #12
 8017700:	af00      	add	r7, sp, #0
 8017702:	6078      	str	r0, [r7, #4]
 8017704:	6039      	str	r1, [r7, #0]
 8017706:	683b      	ldr	r3, [r7, #0]
 8017708:	4618      	mov	r0, r3
 801770a:	370c      	adds	r7, #12
 801770c:	46bd      	mov	sp, r7
 801770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017712:	4770      	bx	lr

08017714 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8017714:	b480      	push	{r7}
 8017716:	b083      	sub	sp, #12
 8017718:	af00      	add	r7, sp, #0
 801771a:	6078      	str	r0, [r7, #4]
 801771c:	2300      	movs	r3, #0
 801771e:	4618      	mov	r0, r3
 8017720:	370c      	adds	r7, #12
 8017722:	46bd      	mov	sp, r7
 8017724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017728:	4770      	bx	lr

0801772a <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 801772a:	b480      	push	{r7}
 801772c:	b083      	sub	sp, #12
 801772e:	af00      	add	r7, sp, #0
 8017730:	6078      	str	r0, [r7, #4]
 8017732:	6039      	str	r1, [r7, #0]
 8017734:	683b      	ldr	r3, [r7, #0]
 8017736:	4618      	mov	r0, r3
 8017738:	370c      	adds	r7, #12
 801773a:	46bd      	mov	sp, r7
 801773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017740:	4770      	bx	lr

08017742 <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 8017742:	b480      	push	{r7}
 8017744:	b083      	sub	sp, #12
 8017746:	af00      	add	r7, sp, #0
 8017748:	6078      	str	r0, [r7, #4]
 801774a:	2300      	movs	r3, #0
 801774c:	4618      	mov	r0, r3
 801774e:	370c      	adds	r7, #12
 8017750:	46bd      	mov	sp, r7
 8017752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017756:	4770      	bx	lr

08017758 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8017758:	b480      	push	{r7}
 801775a:	b083      	sub	sp, #12
 801775c:	af00      	add	r7, sp, #0
 801775e:	6078      	str	r0, [r7, #4]
 8017760:	6039      	str	r1, [r7, #0]
 8017762:	683b      	ldr	r3, [r7, #0]
 8017764:	4618      	mov	r0, r3
 8017766:	370c      	adds	r7, #12
 8017768:	46bd      	mov	sp, r7
 801776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801776e:	4770      	bx	lr

08017770 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8017770:	b480      	push	{r7}
 8017772:	b083      	sub	sp, #12
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
 8017778:	2300      	movs	r3, #0
 801777a:	4618      	mov	r0, r3
 801777c:	370c      	adds	r7, #12
 801777e:	46bd      	mov	sp, r7
 8017780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017784:	4770      	bx	lr

08017786 <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 8017786:	b480      	push	{r7}
 8017788:	b083      	sub	sp, #12
 801778a:	af00      	add	r7, sp, #0
 801778c:	6078      	str	r0, [r7, #4]
 801778e:	6039      	str	r1, [r7, #0]
 8017790:	683b      	ldr	r3, [r7, #0]
 8017792:	4618      	mov	r0, r3
 8017794:	370c      	adds	r7, #12
 8017796:	46bd      	mov	sp, r7
 8017798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779c:	4770      	bx	lr

0801779e <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 801779e:	b480      	push	{r7}
 80177a0:	b083      	sub	sp, #12
 80177a2:	af00      	add	r7, sp, #0
 80177a4:	6078      	str	r0, [r7, #4]
 80177a6:	6039      	str	r1, [r7, #0]
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	4618      	mov	r0, r3
 80177ac:	370c      	adds	r7, #12
 80177ae:	46bd      	mov	sp, r7
 80177b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b4:	4770      	bx	lr
	...

080177b8 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 80177b8:	b480      	push	{r7}
 80177ba:	b083      	sub	sp, #12
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
 80177c0:	4a04      	ldr	r2, [pc, #16]	; (80177d4 <_ZN14MockActualCallC1Ev+0x1c>)
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	601a      	str	r2, [r3, #0]
{
}
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	4618      	mov	r0, r3
 80177ca:	370c      	adds	r7, #12
 80177cc:	46bd      	mov	sp, r7
 80177ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d2:	4770      	bx	lr
 80177d4:	080288f8 	.word	0x080288f8

080177d8 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 80177d8:	b480      	push	{r7}
 80177da:	b083      	sub	sp, #12
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]
 80177e0:	4a04      	ldr	r2, [pc, #16]	; (80177f4 <_ZN14MockActualCallD1Ev+0x1c>)
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	601a      	str	r2, [r3, #0]
{
}
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	4618      	mov	r0, r3
 80177ea:	370c      	adds	r7, #12
 80177ec:	46bd      	mov	sp, r7
 80177ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177f2:	4770      	bx	lr
 80177f4:	080288f8 	.word	0x080288f8

080177f8 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b082      	sub	sp, #8
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
 8017800:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	3304      	adds	r3, #4
 8017806:	6839      	ldr	r1, [r7, #0]
 8017808:	4618      	mov	r0, r3
 801780a:	f7f5 f88e 	bl	800c92a <_ZN12SimpleStringaSERKS_>
}
 801780e:	bf00      	nop
 8017810:	3708      	adds	r7, #8
 8017812:	46bd      	mov	sp, r7
 8017814:	bd80      	pop	{r7, pc}

08017816 <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8017816:	b580      	push	{r7, lr}
 8017818:	b082      	sub	sp, #8
 801781a:	af00      	add	r7, sp, #0
 801781c:	6078      	str	r0, [r7, #4]
 801781e:	6039      	str	r1, [r7, #0]
    return functionName_;
 8017820:	683b      	ldr	r3, [r7, #0]
 8017822:	3304      	adds	r3, #4
 8017824:	4619      	mov	r1, r3
 8017826:	6878      	ldr	r0, [r7, #4]
 8017828:	f7f5 f867 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
}
 801782c:	6878      	ldr	r0, [r7, #4]
 801782e:	3708      	adds	r7, #8
 8017830:	46bd      	mov	sp, r7
 8017832:	bd80      	pop	{r7, pc}

08017834 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8017834:	b580      	push	{r7, lr}
 8017836:	b084      	sub	sp, #16
 8017838:	af00      	add	r7, sp, #0
 801783a:	60f8      	str	r0, [r7, #12]
 801783c:	60b9      	str	r1, [r7, #8]
 801783e:	607a      	str	r2, [r7, #4]
 8017840:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	4618      	mov	r0, r3
 8017846:	f7ff ffb7 	bl	80177b8 <_ZN14MockActualCallC1Ev>
 801784a:	4a17      	ldr	r2, [pc, #92]	; (80178a8 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	601a      	str	r2, [r3, #0]
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	3304      	adds	r3, #4
 8017854:	4915      	ldr	r1, [pc, #84]	; (80178ac <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 8017856:	4618      	mov	r0, r3
 8017858:	f7f4 fffb 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	68ba      	ldr	r2, [r7, #8]
 8017860:	60da      	str	r2, [r3, #12]
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	687a      	ldr	r2, [r7, #4]
 8017866:	611a      	str	r2, [r3, #16]
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	2202      	movs	r2, #2
 801786c:	751a      	strb	r2, [r3, #20]
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	2200      	movs	r2, #0
 8017872:	755a      	strb	r2, [r3, #21]
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	2200      	movs	r2, #0
 8017878:	619a      	str	r2, [r3, #24]
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	331c      	adds	r3, #28
 801787e:	4618      	mov	r0, r3
 8017880:	f004 f814 	bl	801b8ac <_ZN21MockExpectedCallsListC1Ev>
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	683a      	ldr	r2, [r7, #0]
 8017888:	625a      	str	r2, [r3, #36]	; 0x24
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	2200      	movs	r2, #0
 801788e:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	331c      	adds	r3, #28
 8017894:	6839      	ldr	r1, [r7, #0]
 8017896:	4618      	mov	r0, r3
 8017898:	f004 f986 	bl	801bba8 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	4618      	mov	r0, r3
 80178a0:	3710      	adds	r7, #16
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd80      	pop	{r7, pc}
 80178a6:	bf00      	nop
 80178a8:	080287f8 	.word	0x080287f8
 80178ac:	08025a88 	.word	0x08025a88

080178b0 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b082      	sub	sp, #8
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
 80178b8:	4a0c      	ldr	r2, [pc, #48]	; (80178ec <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 80178be:	6878      	ldr	r0, [r7, #4]
 80178c0:	f001 fae4 	bl	8018e8c <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	331c      	adds	r3, #28
 80178c8:	4618      	mov	r0, r3
 80178ca:	f004 f803 	bl	801b8d4 <_ZN21MockExpectedCallsListD1Ev>
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	3304      	adds	r3, #4
 80178d2:	4618      	mov	r0, r3
 80178d4:	f7f5 fb75 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	4618      	mov	r0, r3
 80178dc:	f7ff ff7c 	bl	80177d8 <_ZN14MockActualCallD1Ev>
}
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	4618      	mov	r0, r3
 80178e4:	3708      	adds	r7, #8
 80178e6:	46bd      	mov	sp, r7
 80178e8:	bd80      	pop	{r7, pc}
 80178ea:	bf00      	nop
 80178ec:	080287f8 	.word	0x080287f8

080178f0 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b082      	sub	sp, #8
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	6078      	str	r0, [r7, #4]
}
 80178f8:	6878      	ldr	r0, [r7, #4]
 80178fa:	f7ff ffd9 	bl	80178b0 <_ZN21MockCheckedActualCallD1Ev>
 80178fe:	212c      	movs	r1, #44	; 0x2c
 8017900:	6878      	ldr	r0, [r7, #4]
 8017902:	f7f2 fbf7 	bl	800a0f4 <_ZdlPvj>
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	4618      	mov	r0, r3
 801790a:	3708      	adds	r7, #8
 801790c:	46bd      	mov	sp, r7
 801790e:	bd80      	pop	{r7, pc}

08017910 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8017910:	b480      	push	{r7}
 8017912:	b083      	sub	sp, #12
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
 8017918:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	683a      	ldr	r2, [r7, #0]
 801791e:	611a      	str	r2, [r3, #16]
}
 8017920:	bf00      	nop
 8017922:	370c      	adds	r7, #12
 8017924:	46bd      	mov	sp, r7
 8017926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792a:	4770      	bx	lr

0801792c <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 801792c:	b580      	push	{r7, lr}
 801792e:	b082      	sub	sp, #8
 8017930:	af00      	add	r7, sp, #0
 8017932:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	691a      	ldr	r2, [r3, #16]
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	691b      	ldr	r3, [r3, #16]
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	330c      	adds	r3, #12
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	4610      	mov	r0, r2
 8017944:	4798      	blx	r3
 8017946:	4603      	mov	r3, r0
}
 8017948:	4618      	mov	r0, r3
 801794a:	3708      	adds	r7, #8
 801794c:	46bd      	mov	sp, r7
 801794e:	bd80      	pop	{r7, pc}

08017950 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8017950:	b580      	push	{r7, lr}
 8017952:	b082      	sub	sp, #8
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]
 8017958:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	33c0      	adds	r3, #192	; 0xc0
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	6878      	ldr	r0, [r7, #4]
 8017964:	4798      	blx	r3
 8017966:	4603      	mov	r3, r0
 8017968:	f083 0301 	eor.w	r3, r3, #1
 801796c:	b2db      	uxtb	r3, r3
 801796e:	2b00      	cmp	r3, #0
 8017970:	d010      	beq.n	8017994 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	33ec      	adds	r3, #236	; 0xec
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	2101      	movs	r1, #1
 801797c:	6878      	ldr	r0, [r7, #4]
 801797e:	4798      	blx	r3
        reporter_->failTest(failure);
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	691a      	ldr	r2, [r3, #16]
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	691b      	ldr	r3, [r3, #16]
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	3308      	adds	r3, #8
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	6839      	ldr	r1, [r7, #0]
 8017990:	4610      	mov	r0, r2
 8017992:	4798      	blx	r3
    }
}
 8017994:	bf00      	nop
 8017996:	3708      	adds	r7, #8
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}

0801799c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 801799c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179a0:	b0bc      	sub	sp, #240	; 0xf0
 80179a2:	af00      	add	r7, sp, #0
 80179a4:	6078      	str	r0, [r7, #4]
 80179a6:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80179b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	f000 80f5 	beq.w	8017ba4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80179ba:	683b      	ldr	r3, [r7, #0]
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	339c      	adds	r3, #156	; 0x9c
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80179c6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80179ca:	6839      	ldr	r1, [r7, #0]
 80179cc:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 80179ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80179d2:	4618      	mov	r0, r3
 80179d4:	f006 fa6c 	bl	801deb0 <_ZNK14MockNamedValue9getCopierEv>
 80179d8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 80179dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d013      	beq.n	8017a0c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 80179e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	3308      	adds	r3, #8
 80179ec:	681c      	ldr	r4, [r3, #0]
 80179ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80179f2:	691d      	ldr	r5, [r3, #16]
 80179f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80179f8:	4618      	mov	r0, r3
 80179fa:	f006 fa29 	bl	801de50 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 80179fe:	4603      	mov	r3, r0
 8017a00:	461a      	mov	r2, r3
 8017a02:	4629      	mov	r1, r5
 8017a04:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8017a08:	47a0      	blx	r4
 8017a0a:	e0c0      	b.n	8017b8e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8017a0c:	2500      	movs	r5, #0
 8017a0e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017a12:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017a16:	4611      	mov	r1, r2
 8017a18:	4618      	mov	r0, r3
 8017a1a:	f005 ff0c 	bl	801d836 <_ZNK14MockNamedValue7getTypeEv>
 8017a1e:	2601      	movs	r6, #1
 8017a20:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8017a24:	4962      	ldr	r1, [pc, #392]	; (8017bb0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 8017a26:	4618      	mov	r0, r3
 8017a28:	f7f4 ff13 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8017a2c:	f04f 0801 	mov.w	r8, #1
 8017a30:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8017a34:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017a38:	4611      	mov	r1, r2
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	f7f5 facd 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8017a40:	4603      	mov	r3, r0
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d015      	beq.n	8017a72 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8017a46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017a4a:	f103 0408 	add.w	r4, r3, #8
 8017a4e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017a52:	4958      	ldr	r1, [pc, #352]	; (8017bb4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 8017a54:	4618      	mov	r0, r3
 8017a56:	f7f4 fefc 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8017a5a:	2501      	movs	r5, #1
 8017a5c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017a60:	4619      	mov	r1, r3
 8017a62:	4620      	mov	r0, r4
 8017a64:	f7f5 fab9 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 8017a68:	4603      	mov	r3, r0
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d001      	beq.n	8017a72 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8017a6e:	2401      	movs	r4, #1
 8017a70:	e000      	b.n	8017a74 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 8017a72:	2400      	movs	r4, #0
 8017a74:	2d00      	cmp	r5, #0
 8017a76:	d004      	beq.n	8017a82 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 8017a78:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	f7f5 faa0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8017a82:	f1b8 0f00 	cmp.w	r8, #0
 8017a86:	d004      	beq.n	8017a92 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 8017a88:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f7f5 fa98 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8017a92:	2e00      	cmp	r6, #0
 8017a94:	d004      	beq.n	8017aa0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 8017a96:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	f7f5 fa91 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8017aa0:	2c00      	cmp	r4, #0
 8017aa2:	d018      	beq.n	8017ad6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 8017aa4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	f006 f959 	bl	801dd60 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8017aae:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 8017ab2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	f006 f9e2 	bl	801de80 <_ZNK14MockNamedValue7getSizeEv>
 8017abc:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8017ac0:	4b3d      	ldr	r3, [pc, #244]	; (8017bb8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8017ac8:	6910      	ldr	r0, [r2, #16]
 8017aca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8017ace:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8017ad2:	4798      	blx	r3
 8017ad4:	e05b      	b.n	8017b8e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 8017ad6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8017ada:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017ade:	4611      	mov	r1, r2
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	f005 fe99 	bl	801d818 <_ZNK14MockNamedValue7getNameEv>
 8017ae6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8017aea:	4934      	ldr	r1, [pc, #208]	; (8017bbc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8017aec:	4618      	mov	r0, r3
 8017aee:	f7f4 feb0 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8017af2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8017af6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8017afa:	4611      	mov	r1, r2
 8017afc:	4618      	mov	r0, r3
 8017afe:	f7f5 fab1 	bl	800d064 <_ZneRK12SimpleStringS1_>
 8017b02:	4603      	mov	r3, r0
 8017b04:	461c      	mov	r4, r3
 8017b06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f7f5 fa59 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8017b10:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8017b14:	4618      	mov	r0, r3
 8017b16:	f7f5 fa54 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8017b1a:	2c00      	cmp	r4, #0
 8017b1c:	d037      	beq.n	8017b8e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8017b1e:	683b      	ldr	r3, [r7, #0]
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	339c      	adds	r3, #156	; 0x9c
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8017b2a:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8017b2e:	6839      	ldr	r1, [r7, #0]
 8017b30:	4798      	blx	r3
 8017b32:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8017b36:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8017b3a:	4611      	mov	r1, r2
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	f005 fe7a 	bl	801d836 <_ZNK14MockNamedValue7getTypeEv>
 8017b42:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8017b46:	4618      	mov	r0, r3
 8017b48:	f005 fbd2 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	33cc      	adds	r3, #204	; 0xcc
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	6878      	ldr	r0, [r7, #4]
 8017b56:	4798      	blx	r3
 8017b58:	4601      	mov	r1, r0
 8017b5a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8017b5e:	f107 030c 	add.w	r3, r7, #12
 8017b62:	4618      	mov	r0, r3
 8017b64:	f005 faee 	bl	801d144 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	33dc      	adds	r3, #220	; 0xdc
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	f107 020c 	add.w	r2, r7, #12
 8017b74:	4611      	mov	r1, r2
 8017b76:	6878      	ldr	r0, [r7, #4]
 8017b78:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8017b7a:	f107 030c 	add.w	r3, r7, #12
 8017b7e:	4618      	mov	r0, r3
 8017b80:	f001 ffe2 	bl	8019b48 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8017b84:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8017b88:	4618      	mov	r0, r3
 8017b8a:	f7f5 fa1a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8017b8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017b92:	4618      	mov	r0, r3
 8017b94:	f005 fbac 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8017b98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017b9c:	695b      	ldr	r3, [r3, #20]
 8017b9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8017ba2:	e705      	b.n	80179b0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 8017ba4:	bf00      	nop
 8017ba6:	37f0      	adds	r7, #240	; 0xf0
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bae:	bf00      	nop
 8017bb0:	08025a8c 	.word	0x08025a8c
 8017bb4:	08025a98 	.word	0x08025a98
 8017bb8:	200000d4 	.word	0x200000d4
 8017bbc:	08025a88 	.word	0x08025a88

08017bc0 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b084      	sub	sp, #16
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	331c      	adds	r3, #28
 8017bcc:	4618      	mov	r0, r3
 8017bce:	f004 f9bb 	bl	801bf48 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 8017bd2:	4602      	mov	r2, r0
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	699b      	ldr	r3, [r3, #24]
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d00f      	beq.n	8017c00 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	33d4      	adds	r3, #212	; 0xd4
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	687a      	ldr	r2, [r7, #4]
 8017bea:	6992      	ldr	r2, [r2, #24]
 8017bec:	4611      	mov	r1, r2
 8017bee:	6878      	ldr	r0, [r7, #4]
 8017bf0:	4798      	blx	r3
        callHasSucceeded();
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	33d0      	adds	r3, #208	; 0xd0
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	6878      	ldr	r0, [r7, #4]
 8017bfc:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 8017bfe:	e00f      	b.n	8017c20 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	331c      	adds	r3, #28
 8017c04:	4618      	mov	r0, r3
 8017c06:	f004 f9cc 	bl	801bfa2 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 8017c0a:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d006      	beq.n	8017c20 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	33d4      	adds	r3, #212	; 0xd4
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	68f9      	ldr	r1, [r7, #12]
 8017c1c:	6878      	ldr	r0, [r7, #4]
 8017c1e:	4798      	blx	r3
}
 8017c20:	bf00      	nop
 8017c22:	3710      	adds	r7, #16
 8017c24:	46bd      	mov	sp, r7
 8017c26:	bd80      	pop	{r7, pc}

08017c28 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 8017c28:	b580      	push	{r7, lr}
 8017c2a:	b082      	sub	sp, #8
 8017c2c:	af00      	add	r7, sp, #0
 8017c2e:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	33ec      	adds	r3, #236	; 0xec
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	2102      	movs	r1, #2
 8017c3a:	6878      	ldr	r0, [r7, #4]
 8017c3c:	4798      	blx	r3
}
 8017c3e:	bf00      	nop
 8017c40:	3708      	adds	r7, #8
 8017c42:	46bd      	mov	sp, r7
 8017c44:	bd80      	pop	{r7, pc}

08017c46 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 8017c46:	b580      	push	{r7, lr}
 8017c48:	b082      	sub	sp, #8
 8017c4a:	af00      	add	r7, sp, #0
 8017c4c:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	699b      	ldr	r3, [r3, #24]
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d00b      	beq.n	8017c6e <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	699a      	ldr	r2, [r3, #24]
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	699b      	ldr	r3, [r3, #24]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	33ec      	adds	r3, #236	; 0xec
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	4610      	mov	r0, r2
 8017c66:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	331c      	adds	r3, #28
 8017c72:	4618      	mov	r0, r3
 8017c74:	f004 f85c 	bl	801bd30 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 8017c78:	bf00      	nop
 8017c7a:	3708      	adds	r7, #8
 8017c7c:	46bd      	mov	sp, r7
 8017c7e:	bd80      	pop	{r7, pc}

08017c80 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 8017c80:	b590      	push	{r4, r7, lr}
 8017c82:	b091      	sub	sp, #68	; 0x44
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
 8017c88:	6039      	str	r1, [r7, #0]
    setName(name);
 8017c8a:	6839      	ldr	r1, [r7, #0]
 8017c8c:	6878      	ldr	r0, [r7, #4]
 8017c8e:	f7ff fdb3 	bl	80177f8 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	33ec      	adds	r3, #236	; 0xec
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	2100      	movs	r1, #0
 8017c9c:	6878      	ldr	r0, [r7, #4]
 8017c9e:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	331c      	adds	r3, #28
 8017ca4:	6839      	ldr	r1, [r7, #0]
 8017ca6:	4618      	mov	r0, r3
 8017ca8:	f003 ffec 	bl	801bc84 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	331c      	adds	r3, #28
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	f003 fe7c 	bl	801b9ae <_ZNK21MockExpectedCallsList7isEmptyEv>
 8017cb6:	4603      	mov	r3, r0
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d01d      	beq.n	8017cf8 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	33cc      	adds	r3, #204	; 0xcc
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	6878      	ldr	r0, [r7, #4]
 8017cc6:	4798      	blx	r3
 8017cc8:	4601      	mov	r1, r0
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cce:	f107 000c 	add.w	r0, r7, #12
 8017cd2:	683a      	ldr	r2, [r7, #0]
 8017cd4:	f004 fe24 	bl	801c920 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	33dc      	adds	r3, #220	; 0xdc
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	f107 020c 	add.w	r2, r7, #12
 8017ce4:	4611      	mov	r1, r2
 8017ce6:	6878      	ldr	r0, [r7, #4]
 8017ce8:	4798      	blx	r3
        return *this;
 8017cea:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8017cec:	f107 030c 	add.w	r3, r7, #12
 8017cf0:	4618      	mov	r0, r3
 8017cf2:	f001 ff4b 	bl	8019b8c <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8017cf6:	e006      	b.n	8017d06 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	33d8      	adds	r3, #216	; 0xd8
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	6878      	ldr	r0, [r7, #4]
 8017d02:	4798      	blx	r3

    return *this;
 8017d04:	687c      	ldr	r4, [r7, #4]
 8017d06:	4623      	mov	r3, r4
}
 8017d08:	4618      	mov	r0, r3
 8017d0a:	3744      	adds	r7, #68	; 0x44
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	bd90      	pop	{r4, r7, pc}

08017d10 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 8017d10:	b480      	push	{r7}
 8017d12:	b083      	sub	sp, #12
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	6078      	str	r0, [r7, #4]
 8017d18:	6039      	str	r1, [r7, #0]
    return *this;
 8017d1a:	687b      	ldr	r3, [r7, #4]
}
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	370c      	adds	r7, #12
 8017d20:	46bd      	mov	sp, r7
 8017d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d26:	4770      	bx	lr

08017d28 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 8017d28:	b590      	push	{r4, r7, lr}
 8017d2a:	b097      	sub	sp, #92	; 0x5c
 8017d2c:	af02      	add	r7, sp, #8
 8017d2e:	6078      	str	r0, [r7, #4]
 8017d30:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	33c0      	adds	r3, #192	; 0xc0
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	6878      	ldr	r0, [r7, #4]
 8017d3c:	4798      	blx	r3
 8017d3e:	4603      	mov	r3, r0
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d164      	bne.n	8017e0e <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	33ec      	adds	r3, #236	; 0xec
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	2100      	movs	r1, #0
 8017d4e:	6878      	ldr	r0, [r7, #4]
 8017d50:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	33e8      	adds	r3, #232	; 0xe8
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	6878      	ldr	r0, [r7, #4]
 8017d5c:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	331c      	adds	r3, #28
 8017d62:	6839      	ldr	r1, [r7, #0]
 8017d64:	4618      	mov	r0, r3
 8017d66:	f004 f86b 	bl	801be40 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	331c      	adds	r3, #28
 8017d6e:	4618      	mov	r0, r3
 8017d70:	f003 fe1d 	bl	801b9ae <_ZNK21MockExpectedCallsList7isEmptyEv>
 8017d74:	4603      	mov	r3, r0
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d02b      	beq.n	8017dd2 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	33cc      	adds	r3, #204	; 0xcc
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	6878      	ldr	r0, [r7, #4]
 8017d84:	4798      	blx	r3
 8017d86:	4604      	mov	r4, r0
 8017d88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017d8c:	6879      	ldr	r1, [r7, #4]
 8017d8e:	4618      	mov	r0, r3
 8017d90:	f7ff fd41 	bl	8017816 <_ZNK21MockCheckedActualCall7getNameEv>
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d98:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017d9c:	f107 000c 	add.w	r0, r7, #12
 8017da0:	9300      	str	r3, [sp, #0]
 8017da2:	683b      	ldr	r3, [r7, #0]
 8017da4:	4621      	mov	r1, r4
 8017da6:	f004 fe7f 	bl	801caa8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8017daa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017dae:	4618      	mov	r0, r3
 8017db0:	f7f5 f907 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	33dc      	adds	r3, #220	; 0xdc
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	f107 020c 	add.w	r2, r7, #12
 8017dc0:	4611      	mov	r1, r2
 8017dc2:	6878      	ldr	r0, [r7, #4]
 8017dc4:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8017dc6:	f107 030c 	add.w	r3, r7, #12
 8017dca:	4618      	mov	r0, r3
 8017dcc:	f001 ff00 	bl	8019bd0 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8017dd0:	e01e      	b.n	8017e10 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	f103 041c 	add.w	r4, r3, #28
 8017dd8:	683b      	ldr	r3, [r7, #0]
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	335c      	adds	r3, #92	; 0x5c
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017de4:	6839      	ldr	r1, [r7, #0]
 8017de6:	4610      	mov	r0, r2
 8017de8:	4798      	blx	r3
 8017dea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017dee:	4619      	mov	r1, r3
 8017df0:	4620      	mov	r0, r4
 8017df2:	f004 f9b8 	bl	801c166 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 8017df6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	f7f5 f8e1 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	33d8      	adds	r3, #216	; 0xd8
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	6878      	ldr	r0, [r7, #4]
 8017e0a:	4798      	blx	r3
 8017e0c:	e000      	b.n	8017e10 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 8017e0e:	bf00      	nop
}
 8017e10:	3754      	adds	r7, #84	; 0x54
 8017e12:	46bd      	mov	sp, r7
 8017e14:	bd90      	pop	{r4, r7, pc}

08017e16 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 8017e16:	b590      	push	{r4, r7, lr}
 8017e18:	b097      	sub	sp, #92	; 0x5c
 8017e1a:	af02      	add	r7, sp, #8
 8017e1c:	6078      	str	r0, [r7, #4]
 8017e1e:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	33c0      	adds	r3, #192	; 0xc0
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	6878      	ldr	r0, [r7, #4]
 8017e2a:	4798      	blx	r3
 8017e2c:	4603      	mov	r3, r0
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d164      	bne.n	8017efc <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	33ec      	adds	r3, #236	; 0xec
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	2100      	movs	r1, #0
 8017e3c:	6878      	ldr	r0, [r7, #4]
 8017e3e:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	33e8      	adds	r3, #232	; 0xe8
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	6878      	ldr	r0, [r7, #4]
 8017e4a:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	331c      	adds	r3, #28
 8017e50:	6839      	ldr	r1, [r7, #0]
 8017e52:	4618      	mov	r0, r3
 8017e54:	f004 f820 	bl	801be98 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	331c      	adds	r3, #28
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	f003 fda6 	bl	801b9ae <_ZNK21MockExpectedCallsList7isEmptyEv>
 8017e62:	4603      	mov	r3, r0
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d02b      	beq.n	8017ec0 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	33cc      	adds	r3, #204	; 0xcc
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	6878      	ldr	r0, [r7, #4]
 8017e72:	4798      	blx	r3
 8017e74:	4604      	mov	r4, r0
 8017e76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017e7a:	6879      	ldr	r1, [r7, #4]
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	f7ff fcca 	bl	8017816 <_ZNK21MockCheckedActualCall7getNameEv>
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e86:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017e8a:	f107 000c 	add.w	r0, r7, #12
 8017e8e:	9300      	str	r3, [sp, #0]
 8017e90:	683b      	ldr	r3, [r7, #0]
 8017e92:	4621      	mov	r1, r4
 8017e94:	f004 ff6a 	bl	801cd6c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8017e98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f7f5 f890 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	33dc      	adds	r3, #220	; 0xdc
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	f107 020c 	add.w	r2, r7, #12
 8017eae:	4611      	mov	r1, r2
 8017eb0:	6878      	ldr	r0, [r7, #4]
 8017eb2:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8017eb4:	f107 030c 	add.w	r3, r7, #12
 8017eb8:	4618      	mov	r0, r3
 8017eba:	f001 feab 	bl	8019c14 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8017ebe:	e01e      	b.n	8017efe <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	f103 041c 	add.w	r4, r3, #28
 8017ec6:	683b      	ldr	r3, [r7, #0]
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	335c      	adds	r3, #92	; 0x5c
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017ed2:	6839      	ldr	r1, [r7, #0]
 8017ed4:	4610      	mov	r0, r2
 8017ed6:	4798      	blx	r3
 8017ed8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017edc:	4619      	mov	r1, r3
 8017ede:	4620      	mov	r0, r4
 8017ee0:	f004 f95e 	bl	801c1a0 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8017ee4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017ee8:	4618      	mov	r0, r3
 8017eea:	f7f5 f86a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	33d8      	adds	r3, #216	; 0xd8
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	6878      	ldr	r0, [r7, #4]
 8017ef8:	4798      	blx	r3
 8017efa:	e000      	b.n	8017efe <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8017efc:	bf00      	nop
}
 8017efe:	3754      	adds	r7, #84	; 0x54
 8017f00:	46bd      	mov	sp, r7
 8017f02:	bd90      	pop	{r4, r7, pc}

08017f04 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8017f04:	b590      	push	{r4, r7, lr}
 8017f06:	b093      	sub	sp, #76	; 0x4c
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	60f8      	str	r0, [r7, #12]
 8017f0c:	60b9      	str	r1, [r7, #8]
 8017f0e:	4613      	mov	r3, r2
 8017f10:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 8017f12:	f107 0310 	add.w	r3, r7, #16
 8017f16:	68b9      	ldr	r1, [r7, #8]
 8017f18:	4618      	mov	r0, r3
 8017f1a:	f005 f9bf 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017f1e:	79fa      	ldrb	r2, [r7, #7]
 8017f20:	f107 0310 	add.w	r3, r7, #16
 8017f24:	4611      	mov	r1, r2
 8017f26:	4618      	mov	r0, r3
 8017f28:	f005 fa0a 	bl	801d340 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	33e0      	adds	r3, #224	; 0xe0
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	f107 0210 	add.w	r2, r7, #16
 8017f38:	4611      	mov	r1, r2
 8017f3a:	68f8      	ldr	r0, [r7, #12]
 8017f3c:	4798      	blx	r3
    return *this;
 8017f3e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017f40:	f107 0310 	add.w	r3, r7, #16
 8017f44:	4618      	mov	r0, r3
 8017f46:	f005 f9d3 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017f4a:	4623      	mov	r3, r4
}
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	374c      	adds	r7, #76	; 0x4c
 8017f50:	46bd      	mov	sp, r7
 8017f52:	bd90      	pop	{r4, r7, pc}

08017f54 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8017f54:	b590      	push	{r4, r7, lr}
 8017f56:	b093      	sub	sp, #76	; 0x4c
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	60f8      	str	r0, [r7, #12]
 8017f5c:	60b9      	str	r1, [r7, #8]
 8017f5e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017f60:	f107 0310 	add.w	r3, r7, #16
 8017f64:	68b9      	ldr	r1, [r7, #8]
 8017f66:	4618      	mov	r0, r3
 8017f68:	f005 f998 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017f6c:	f107 0310 	add.w	r3, r7, #16
 8017f70:	6879      	ldr	r1, [r7, #4]
 8017f72:	4618      	mov	r0, r3
 8017f74:	f005 fa08 	bl	801d388 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	33e0      	adds	r3, #224	; 0xe0
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	f107 0210 	add.w	r2, r7, #16
 8017f84:	4611      	mov	r1, r2
 8017f86:	68f8      	ldr	r0, [r7, #12]
 8017f88:	4798      	blx	r3
    return *this;
 8017f8a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017f8c:	f107 0310 	add.w	r3, r7, #16
 8017f90:	4618      	mov	r0, r3
 8017f92:	f005 f9ad 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017f96:	4623      	mov	r3, r4
}
 8017f98:	4618      	mov	r0, r3
 8017f9a:	374c      	adds	r7, #76	; 0x4c
 8017f9c:	46bd      	mov	sp, r7
 8017f9e:	bd90      	pop	{r4, r7, pc}

08017fa0 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 8017fa0:	b590      	push	{r4, r7, lr}
 8017fa2:	b093      	sub	sp, #76	; 0x4c
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	60f8      	str	r0, [r7, #12]
 8017fa8:	60b9      	str	r1, [r7, #8]
 8017faa:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017fac:	f107 0310 	add.w	r3, r7, #16
 8017fb0:	68b9      	ldr	r1, [r7, #8]
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	f005 f972 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017fb8:	f107 0310 	add.w	r3, r7, #16
 8017fbc:	6879      	ldr	r1, [r7, #4]
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	f005 fa04 	bl	801d3cc <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	33e0      	adds	r3, #224	; 0xe0
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	f107 0210 	add.w	r2, r7, #16
 8017fd0:	4611      	mov	r1, r2
 8017fd2:	68f8      	ldr	r0, [r7, #12]
 8017fd4:	4798      	blx	r3
    return *this;
 8017fd6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017fd8:	f107 0310 	add.w	r3, r7, #16
 8017fdc:	4618      	mov	r0, r3
 8017fde:	f005 f987 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017fe2:	4623      	mov	r3, r4
}
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	374c      	adds	r7, #76	; 0x4c
 8017fe8:	46bd      	mov	sp, r7
 8017fea:	bd90      	pop	{r4, r7, pc}

08017fec <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8017fec:	b590      	push	{r4, r7, lr}
 8017fee:	b093      	sub	sp, #76	; 0x4c
 8017ff0:	af00      	add	r7, sp, #0
 8017ff2:	60f8      	str	r0, [r7, #12]
 8017ff4:	60b9      	str	r1, [r7, #8]
 8017ff6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017ff8:	f107 0310 	add.w	r3, r7, #16
 8017ffc:	68b9      	ldr	r1, [r7, #8]
 8017ffe:	4618      	mov	r0, r3
 8018000:	f005 f94c 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018004:	f107 0310 	add.w	r3, r7, #16
 8018008:	6879      	ldr	r1, [r7, #4]
 801800a:	4618      	mov	r0, r3
 801800c:	f005 fa22 	bl	801d454 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	33e0      	adds	r3, #224	; 0xe0
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	f107 0210 	add.w	r2, r7, #16
 801801c:	4611      	mov	r1, r2
 801801e:	68f8      	ldr	r0, [r7, #12]
 8018020:	4798      	blx	r3
    return *this;
 8018022:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018024:	f107 0310 	add.w	r3, r7, #16
 8018028:	4618      	mov	r0, r3
 801802a:	f005 f961 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
    return *this;
 801802e:	4623      	mov	r3, r4
}
 8018030:	4618      	mov	r0, r3
 8018032:	374c      	adds	r7, #76	; 0x4c
 8018034:	46bd      	mov	sp, r7
 8018036:	bd90      	pop	{r4, r7, pc}

08018038 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8018038:	b590      	push	{r4, r7, lr}
 801803a:	b093      	sub	sp, #76	; 0x4c
 801803c:	af00      	add	r7, sp, #0
 801803e:	60f8      	str	r0, [r7, #12]
 8018040:	60b9      	str	r1, [r7, #8]
 8018042:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018044:	f107 0310 	add.w	r3, r7, #16
 8018048:	68b9      	ldr	r1, [r7, #8]
 801804a:	4618      	mov	r0, r3
 801804c:	f005 f926 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018050:	f107 0310 	add.w	r3, r7, #16
 8018054:	6879      	ldr	r1, [r7, #4]
 8018056:	4618      	mov	r0, r3
 8018058:	f005 f9da 	bl	801d410 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	33e0      	adds	r3, #224	; 0xe0
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	f107 0210 	add.w	r2, r7, #16
 8018068:	4611      	mov	r1, r2
 801806a:	68f8      	ldr	r0, [r7, #12]
 801806c:	4798      	blx	r3
    return *this;
 801806e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018070:	f107 0310 	add.w	r3, r7, #16
 8018074:	4618      	mov	r0, r3
 8018076:	f005 f93b 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
    return *this;
 801807a:	4623      	mov	r3, r4
}
 801807c:	4618      	mov	r0, r3
 801807e:	374c      	adds	r7, #76	; 0x4c
 8018080:	46bd      	mov	sp, r7
 8018082:	bd90      	pop	{r4, r7, pc}

08018084 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8018084:	b5b0      	push	{r4, r5, r7, lr}
 8018086:	b086      	sub	sp, #24
 8018088:	af02      	add	r7, sp, #8
 801808a:	60f8      	str	r0, [r7, #12]
 801808c:	60b9      	str	r1, [r7, #8]
 801808e:	4639      	mov	r1, r7
 8018090:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018094:	f7fb ffc0 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8018098:	4604      	mov	r4, r0
 801809a:	6823      	ldr	r3, [r4, #0]
 801809c:	3368      	adds	r3, #104	; 0x68
 801809e:	681d      	ldr	r5, [r3, #0]
 80180a0:	f7fb ffca 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80180a4:	4603      	mov	r3, r0
 80180a6:	9300      	str	r3, [sp, #0]
 80180a8:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80180ac:	4a04      	ldr	r2, [pc, #16]	; (80180c0 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 80180ae:	4905      	ldr	r1, [pc, #20]	; (80180c4 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 80180b0:	4620      	mov	r0, r4
 80180b2:	47a8      	blx	r5
    return *this;
 80180b4:	68fb      	ldr	r3, [r7, #12]
}
 80180b6:	4618      	mov	r0, r3
 80180b8:	3710      	adds	r7, #16
 80180ba:	46bd      	mov	sp, r7
 80180bc:	bdb0      	pop	{r4, r5, r7, pc}
 80180be:	bf00      	nop
 80180c0:	08025aa0 	.word	0x08025aa0
 80180c4:	08025abc 	.word	0x08025abc

080180c8 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 80180c8:	b5b0      	push	{r4, r5, r7, lr}
 80180ca:	b086      	sub	sp, #24
 80180cc:	af02      	add	r7, sp, #8
 80180ce:	60f8      	str	r0, [r7, #12]
 80180d0:	60b9      	str	r1, [r7, #8]
 80180d2:	4639      	mov	r1, r7
 80180d4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80180d8:	f7fb ff9e 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 80180dc:	4604      	mov	r4, r0
 80180de:	6823      	ldr	r3, [r4, #0]
 80180e0:	3368      	adds	r3, #104	; 0x68
 80180e2:	681d      	ldr	r5, [r3, #0]
 80180e4:	f7fb ffa8 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80180e8:	4603      	mov	r3, r0
 80180ea:	9300      	str	r3, [sp, #0]
 80180ec:	f44f 7388 	mov.w	r3, #272	; 0x110
 80180f0:	4a04      	ldr	r2, [pc, #16]	; (8018104 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 80180f2:	4905      	ldr	r1, [pc, #20]	; (8018108 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 80180f4:	4620      	mov	r0, r4
 80180f6:	47a8      	blx	r5
    return *this;
 80180f8:	68fb      	ldr	r3, [r7, #12]
}
 80180fa:	4618      	mov	r0, r3
 80180fc:	3710      	adds	r7, #16
 80180fe:	46bd      	mov	sp, r7
 8018100:	bdb0      	pop	{r4, r5, r7, pc}
 8018102:	bf00      	nop
 8018104:	08025aa0 	.word	0x08025aa0
 8018108:	08025ae8 	.word	0x08025ae8

0801810c <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 801810c:	b590      	push	{r4, r7, lr}
 801810e:	b093      	sub	sp, #76	; 0x4c
 8018110:	af00      	add	r7, sp, #0
 8018112:	60f8      	str	r0, [r7, #12]
 8018114:	60b9      	str	r1, [r7, #8]
 8018116:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 801811a:	f107 0310 	add.w	r3, r7, #16
 801811e:	68b9      	ldr	r1, [r7, #8]
 8018120:	4618      	mov	r0, r3
 8018122:	f005 f8bb 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018126:	f107 0310 	add.w	r3, r7, #16
 801812a:	ed97 0b00 	vldr	d0, [r7]
 801812e:	4618      	mov	r0, r3
 8018130:	f005 f9ee 	bl	801d510 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	33e0      	adds	r3, #224	; 0xe0
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	f107 0210 	add.w	r2, r7, #16
 8018140:	4611      	mov	r1, r2
 8018142:	68f8      	ldr	r0, [r7, #12]
 8018144:	4798      	blx	r3
    return *this;
 8018146:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018148:	f107 0310 	add.w	r3, r7, #16
 801814c:	4618      	mov	r0, r3
 801814e:	f005 f8cf 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018152:	4623      	mov	r3, r4
}
 8018154:	4618      	mov	r0, r3
 8018156:	374c      	adds	r7, #76	; 0x4c
 8018158:	46bd      	mov	sp, r7
 801815a:	bd90      	pop	{r4, r7, pc}

0801815c <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 801815c:	b590      	push	{r4, r7, lr}
 801815e:	b093      	sub	sp, #76	; 0x4c
 8018160:	af00      	add	r7, sp, #0
 8018162:	60f8      	str	r0, [r7, #12]
 8018164:	60b9      	str	r1, [r7, #8]
 8018166:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018168:	f107 0310 	add.w	r3, r7, #16
 801816c:	68b9      	ldr	r1, [r7, #8]
 801816e:	4618      	mov	r0, r3
 8018170:	f005 f894 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018174:	f107 0310 	add.w	r3, r7, #16
 8018178:	6879      	ldr	r1, [r7, #4]
 801817a:	4618      	mov	r0, r3
 801817c:	f005 fa72 	bl	801d664 <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	33e0      	adds	r3, #224	; 0xe0
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	f107 0210 	add.w	r2, r7, #16
 801818c:	4611      	mov	r1, r2
 801818e:	68f8      	ldr	r0, [r7, #12]
 8018190:	4798      	blx	r3
    return *this;
 8018192:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018194:	f107 0310 	add.w	r3, r7, #16
 8018198:	4618      	mov	r0, r3
 801819a:	f005 f8a9 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
    return *this;
 801819e:	4623      	mov	r3, r4
}
 80181a0:	4618      	mov	r0, r3
 80181a2:	374c      	adds	r7, #76	; 0x4c
 80181a4:	46bd      	mov	sp, r7
 80181a6:	bd90      	pop	{r4, r7, pc}

080181a8 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 80181a8:	b590      	push	{r4, r7, lr}
 80181aa:	b093      	sub	sp, #76	; 0x4c
 80181ac:	af00      	add	r7, sp, #0
 80181ae:	60f8      	str	r0, [r7, #12]
 80181b0:	60b9      	str	r1, [r7, #8]
 80181b2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80181b4:	f107 0310 	add.w	r3, r7, #16
 80181b8:	68b9      	ldr	r1, [r7, #8]
 80181ba:	4618      	mov	r0, r3
 80181bc:	f005 f86e 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80181c0:	f107 0310 	add.w	r3, r7, #16
 80181c4:	6879      	ldr	r1, [r7, #4]
 80181c6:	4618      	mov	r0, r3
 80181c8:	f005 f9e6 	bl	801d598 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	33e0      	adds	r3, #224	; 0xe0
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	f107 0210 	add.w	r2, r7, #16
 80181d8:	4611      	mov	r1, r2
 80181da:	68f8      	ldr	r0, [r7, #12]
 80181dc:	4798      	blx	r3
    return *this;
 80181de:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80181e0:	f107 0310 	add.w	r3, r7, #16
 80181e4:	4618      	mov	r0, r3
 80181e6:	f005 f883 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
    return *this;
 80181ea:	4623      	mov	r3, r4
}
 80181ec:	4618      	mov	r0, r3
 80181ee:	374c      	adds	r7, #76	; 0x4c
 80181f0:	46bd      	mov	sp, r7
 80181f2:	bd90      	pop	{r4, r7, pc}

080181f4 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 80181f4:	b590      	push	{r4, r7, lr}
 80181f6:	b093      	sub	sp, #76	; 0x4c
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	60f8      	str	r0, [r7, #12]
 80181fc:	60b9      	str	r1, [r7, #8]
 80181fe:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018200:	f107 0310 	add.w	r3, r7, #16
 8018204:	68b9      	ldr	r1, [r7, #8]
 8018206:	4618      	mov	r0, r3
 8018208:	f005 f848 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801820c:	f107 0310 	add.w	r3, r7, #16
 8018210:	6879      	ldr	r1, [r7, #4]
 8018212:	4618      	mov	r0, r3
 8018214:	f005 f9e2 	bl	801d5dc <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	33e0      	adds	r3, #224	; 0xe0
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	f107 0210 	add.w	r2, r7, #16
 8018224:	4611      	mov	r1, r2
 8018226:	68f8      	ldr	r0, [r7, #12]
 8018228:	4798      	blx	r3
    return *this;
 801822a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801822c:	f107 0310 	add.w	r3, r7, #16
 8018230:	4618      	mov	r0, r3
 8018232:	f005 f85d 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018236:	4623      	mov	r3, r4
}
 8018238:	4618      	mov	r0, r3
 801823a:	374c      	adds	r7, #76	; 0x4c
 801823c:	46bd      	mov	sp, r7
 801823e:	bd90      	pop	{r4, r7, pc}

08018240 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8018240:	b590      	push	{r4, r7, lr}
 8018242:	b093      	sub	sp, #76	; 0x4c
 8018244:	af00      	add	r7, sp, #0
 8018246:	60f8      	str	r0, [r7, #12]
 8018248:	60b9      	str	r1, [r7, #8]
 801824a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801824c:	f107 0310 	add.w	r3, r7, #16
 8018250:	68b9      	ldr	r1, [r7, #8]
 8018252:	4618      	mov	r0, r3
 8018254:	f005 f822 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018258:	f107 0310 	add.w	r3, r7, #16
 801825c:	6879      	ldr	r1, [r7, #4]
 801825e:	4618      	mov	r0, r3
 8018260:	f005 f9de 	bl	801d620 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	33e0      	adds	r3, #224	; 0xe0
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	f107 0210 	add.w	r2, r7, #16
 8018270:	4611      	mov	r1, r2
 8018272:	68f8      	ldr	r0, [r7, #12]
 8018274:	4798      	blx	r3
    return *this;
 8018276:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018278:	f107 0310 	add.w	r3, r7, #16
 801827c:	4618      	mov	r0, r3
 801827e:	f005 f837 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018282:	4623      	mov	r3, r4
}
 8018284:	4618      	mov	r0, r3
 8018286:	374c      	adds	r7, #76	; 0x4c
 8018288:	46bd      	mov	sp, r7
 801828a:	bd90      	pop	{r4, r7, pc}

0801828c <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801828c:	b590      	push	{r4, r7, lr}
 801828e:	b093      	sub	sp, #76	; 0x4c
 8018290:	af00      	add	r7, sp, #0
 8018292:	60f8      	str	r0, [r7, #12]
 8018294:	60b9      	str	r1, [r7, #8]
 8018296:	607a      	str	r2, [r7, #4]
 8018298:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 801829a:	f107 0310 	add.w	r3, r7, #16
 801829e:	68b9      	ldr	r1, [r7, #8]
 80182a0:	4618      	mov	r0, r3
 80182a2:	f004 fffb 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 80182a6:	f107 0310 	add.w	r3, r7, #16
 80182aa:	683a      	ldr	r2, [r7, #0]
 80182ac:	6879      	ldr	r1, [r7, #4]
 80182ae:	4618      	mov	r0, r3
 80182b0:	f005 f9fa 	bl	801d6a8 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	33e0      	adds	r3, #224	; 0xe0
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	f107 0210 	add.w	r2, r7, #16
 80182c0:	4611      	mov	r1, r2
 80182c2:	68f8      	ldr	r0, [r7, #12]
 80182c4:	4798      	blx	r3
    return *this;
 80182c6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80182c8:	f107 0310 	add.w	r3, r7, #16
 80182cc:	4618      	mov	r0, r3
 80182ce:	f005 f80f 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
    return *this;
 80182d2:	4623      	mov	r3, r4
}
 80182d4:	4618      	mov	r0, r3
 80182d6:	374c      	adds	r7, #76	; 0x4c
 80182d8:	46bd      	mov	sp, r7
 80182da:	bd90      	pop	{r4, r7, pc}

080182dc <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 80182dc:	b590      	push	{r4, r7, lr}
 80182de:	b0a1      	sub	sp, #132	; 0x84
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	60f8      	str	r0, [r7, #12]
 80182e4:	60b9      	str	r1, [r7, #8]
 80182e6:	607a      	str	r2, [r7, #4]
 80182e8:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 80182ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80182ee:	6879      	ldr	r1, [r7, #4]
 80182f0:	4618      	mov	r0, r3
 80182f2:	f004 ffd3 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 80182f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80182fa:	683a      	ldr	r2, [r7, #0]
 80182fc:	68b9      	ldr	r1, [r7, #8]
 80182fe:	4618      	mov	r0, r3
 8018300:	f005 f9f8 	bl	801d6f4 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 8018304:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018308:	4618      	mov	r0, r3
 801830a:	f005 fdc5 	bl	801de98 <_ZNK14MockNamedValue13getComparatorEv>
 801830e:	4603      	mov	r3, r0
 8018310:	2b00      	cmp	r3, #0
 8018312:	bf0c      	ite	eq
 8018314:	2301      	moveq	r3, #1
 8018316:	2300      	movne	r3, #0
 8018318:	b2db      	uxtb	r3, r3
 801831a:	2b00      	cmp	r3, #0
 801831c:	d01c      	beq.n	8018358 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	33cc      	adds	r3, #204	; 0xcc
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	68f8      	ldr	r0, [r7, #12]
 8018328:	4798      	blx	r3
 801832a:	4601      	mov	r1, r0
 801832c:	f107 0314 	add.w	r3, r7, #20
 8018330:	68ba      	ldr	r2, [r7, #8]
 8018332:	4618      	mov	r0, r3
 8018334:	f004 fed6 	bl	801d0e4 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	33dc      	adds	r3, #220	; 0xdc
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	f107 0214 	add.w	r2, r7, #20
 8018344:	4611      	mov	r1, r2
 8018346:	68f8      	ldr	r0, [r7, #12]
 8018348:	4798      	blx	r3
        return *this;
 801834a:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 801834c:	f107 0314 	add.w	r3, r7, #20
 8018350:	4618      	mov	r0, r3
 8018352:	f001 fc81 	bl	8019c58 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8018356:	e009      	b.n	801836c <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	33e0      	adds	r3, #224	; 0xe0
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018364:	4611      	mov	r1, r2
 8018366:	68f8      	ldr	r0, [r7, #12]
 8018368:	4798      	blx	r3
    return *this;
 801836a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801836c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018370:	4618      	mov	r0, r3
 8018372:	f004 ffbd 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 8018376:	4623      	mov	r3, r4
}
 8018378:	4618      	mov	r0, r3
 801837a:	3784      	adds	r7, #132	; 0x84
 801837c:	46bd      	mov	sp, r7
 801837e:	bd90      	pop	{r4, r7, pc}

08018380 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 8018380:	b590      	push	{r4, r7, lr}
 8018382:	b095      	sub	sp, #84	; 0x54
 8018384:	af00      	add	r7, sp, #0
 8018386:	60f8      	str	r0, [r7, #12]
 8018388:	60b9      	str	r1, [r7, #8]
 801838a:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	33f0      	adds	r3, #240	; 0xf0
 8018392:	681c      	ldr	r4, [r3, #0]
 8018394:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018398:	4917      	ldr	r1, [pc, #92]	; (80183f8 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 801839a:	4618      	mov	r0, r3
 801839c:	f7f4 fa59 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80183a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	68b9      	ldr	r1, [r7, #8]
 80183a8:	68f8      	ldr	r0, [r7, #12]
 80183aa:	47a0      	blx	r4
 80183ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80183b0:	4618      	mov	r0, r3
 80183b2:	f7f4 fe06 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 80183b6:	f107 0310 	add.w	r3, r7, #16
 80183ba:	68b9      	ldr	r1, [r7, #8]
 80183bc:	4618      	mov	r0, r3
 80183be:	f004 ff6d 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 80183c2:	f107 0310 	add.w	r3, r7, #16
 80183c6:	6879      	ldr	r1, [r7, #4]
 80183c8:	4618      	mov	r0, r3
 80183ca:	f005 f8e5 	bl	801d598 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	33e4      	adds	r3, #228	; 0xe4
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	f107 0210 	add.w	r2, r7, #16
 80183da:	4611      	mov	r1, r2
 80183dc:	68f8      	ldr	r0, [r7, #12]
 80183de:	4798      	blx	r3

    return *this;
 80183e0:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 80183e2:	f107 0310 	add.w	r3, r7, #16
 80183e6:	4618      	mov	r0, r3
 80183e8:	f004 ff82 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
    return *this;
 80183ec:	4623      	mov	r3, r4
}
 80183ee:	4618      	mov	r0, r3
 80183f0:	3754      	adds	r7, #84	; 0x54
 80183f2:	46bd      	mov	sp, r7
 80183f4:	bd90      	pop	{r4, r7, pc}
 80183f6:	bf00      	nop
 80183f8:	08025a98 	.word	0x08025a98

080183fc <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 80183fc:	b590      	push	{r4, r7, lr}
 80183fe:	b093      	sub	sp, #76	; 0x4c
 8018400:	af00      	add	r7, sp, #0
 8018402:	60f8      	str	r0, [r7, #12]
 8018404:	60b9      	str	r1, [r7, #8]
 8018406:	607a      	str	r2, [r7, #4]
 8018408:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	33f0      	adds	r3, #240	; 0xf0
 8018410:	681c      	ldr	r4, [r3, #0]
 8018412:	683b      	ldr	r3, [r7, #0]
 8018414:	68ba      	ldr	r2, [r7, #8]
 8018416:	6879      	ldr	r1, [r7, #4]
 8018418:	68f8      	ldr	r0, [r7, #12]
 801841a:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 801841c:	f107 0310 	add.w	r3, r7, #16
 8018420:	6879      	ldr	r1, [r7, #4]
 8018422:	4618      	mov	r0, r3
 8018424:	f004 ff3a 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 8018428:	f107 0310 	add.w	r3, r7, #16
 801842c:	683a      	ldr	r2, [r7, #0]
 801842e:	68b9      	ldr	r1, [r7, #8]
 8018430:	4618      	mov	r0, r3
 8018432:	f005 f95f 	bl	801d6f4 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	33e4      	adds	r3, #228	; 0xe4
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	f107 0210 	add.w	r2, r7, #16
 8018442:	4611      	mov	r1, r2
 8018444:	68f8      	ldr	r0, [r7, #12]
 8018446:	4798      	blx	r3

    return *this;
 8018448:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 801844a:	f107 0310 	add.w	r3, r7, #16
 801844e:	4618      	mov	r0, r3
 8018450:	f004 ff4e 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018454:	4623      	mov	r3, r4
}
 8018456:	4618      	mov	r0, r3
 8018458:	374c      	adds	r7, #76	; 0x4c
 801845a:	46bd      	mov	sp, r7
 801845c:	bd90      	pop	{r4, r7, pc}

0801845e <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 801845e:	b480      	push	{r7}
 8018460:	b083      	sub	sp, #12
 8018462:	af00      	add	r7, sp, #0
 8018464:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	7d1b      	ldrb	r3, [r3, #20]
 801846a:	2b02      	cmp	r3, #2
 801846c:	bf0c      	ite	eq
 801846e:	2301      	moveq	r3, #1
 8018470:	2300      	movne	r3, #0
 8018472:	b2db      	uxtb	r3, r3
}
 8018474:	4618      	mov	r0, r3
 8018476:	370c      	adds	r7, #12
 8018478:	46bd      	mov	sp, r7
 801847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847e:	4770      	bx	lr

08018480 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 8018480:	b480      	push	{r7}
 8018482:	b083      	sub	sp, #12
 8018484:	af00      	add	r7, sp, #0
 8018486:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	7d1b      	ldrb	r3, [r3, #20]
 801848c:	2b01      	cmp	r3, #1
 801848e:	bf0c      	ite	eq
 8018490:	2301      	moveq	r3, #1
 8018492:	2300      	movne	r3, #0
 8018494:	b2db      	uxtb	r3, r3
}
 8018496:	4618      	mov	r0, r3
 8018498:	370c      	adds	r7, #12
 801849a:	46bd      	mov	sp, r7
 801849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a0:	4770      	bx	lr
	...

080184a4 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 80184a4:	b5b0      	push	{r4, r5, r7, lr}
 80184a6:	b096      	sub	sp, #88	; 0x58
 80184a8:	af02      	add	r7, sp, #8
 80184aa:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	7d5b      	ldrb	r3, [r3, #21]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	f040 80bc 	bne.w	801862e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	2201      	movs	r2, #1
 80184ba:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	7d1b      	ldrb	r3, [r3, #20]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d014      	beq.n	80184ee <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	7d1b      	ldrb	r3, [r3, #20]
 80184c8:	2b02      	cmp	r3, #2
 80184ca:	d10a      	bne.n	80184e2 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	6998      	ldr	r0, [r3, #24]
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	699b      	ldr	r3, [r3, #24]
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	33d8      	adds	r3, #216	; 0xd8
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	687a      	ldr	r2, [r7, #4]
 80184dc:	68d2      	ldr	r2, [r2, #12]
 80184de:	4611      	mov	r1, r2
 80184e0:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	331c      	adds	r3, #28
 80184e6:	4618      	mov	r0, r3
 80184e8:	f003 fe07 	bl	801c0fa <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 80184ec:	e0a0      	b.n	8018630 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	331c      	adds	r3, #28
 80184f2:	4618      	mov	r0, r3
 80184f4:	f003 fac3 	bl	801ba7e <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 80184f8:	4603      	mov	r3, r0
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	d00f      	beq.n	801851e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 80184fe:	f7fb fd8b 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8018502:	4604      	mov	r4, r0
 8018504:	6823      	ldr	r3, [r4, #0]
 8018506:	3368      	adds	r3, #104	; 0x68
 8018508:	681d      	ldr	r5, [r3, #0]
 801850a:	f7fb fd95 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801850e:	4603      	mov	r3, r0
 8018510:	9300      	str	r3, [sp, #0]
 8018512:	f240 1385 	movw	r3, #389	; 0x185
 8018516:	4a48      	ldr	r2, [pc, #288]	; (8018638 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 8018518:	4948      	ldr	r1, [pc, #288]	; (801863c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 801851a:	4620      	mov	r0, r4
 801851c:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	331c      	adds	r3, #28
 8018522:	4618      	mov	r0, r3
 8018524:	f003 fd5f 	bl	801bfe6 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 8018528:	4602      	mov	r2, r0
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	699b      	ldr	r3, [r3, #24]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d01f      	beq.n	8018576 <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	699a      	ldr	r2, [r3, #24]
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	699b      	ldr	r3, [r3, #24]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	33e4      	adds	r3, #228	; 0xe4
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	4610      	mov	r0, r2
 8018546:	4798      	blx	r3
        callHasSucceeded();
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	33d0      	adds	r3, #208	; 0xd0
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	6878      	ldr	r0, [r7, #4]
 8018552:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	6998      	ldr	r0, [r3, #24]
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	699b      	ldr	r3, [r3, #24]
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	33d8      	adds	r3, #216	; 0xd8
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	687a      	ldr	r2, [r7, #4]
 8018564:	68d2      	ldr	r2, [r2, #12]
 8018566:	4611      	mov	r1, r2
 8018568:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	331c      	adds	r3, #28
 801856e:	4618      	mov	r0, r3
 8018570:	f003 fdc3 	bl	801c0fa <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8018574:	e05c      	b.n	8018630 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	331c      	adds	r3, #28
 801857a:	4618      	mov	r0, r3
 801857c:	f003 ffc4 	bl	801c508 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 8018580:	4603      	mov	r3, r0
 8018582:	2b00      	cmp	r3, #0
 8018584:	d029      	beq.n	80185da <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	33cc      	adds	r3, #204	; 0xcc
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	6878      	ldr	r0, [r7, #4]
 8018590:	4798      	blx	r3
 8018592:	4604      	mov	r4, r0
 8018594:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018598:	6879      	ldr	r1, [r7, #4]
 801859a:	4618      	mov	r0, r3
 801859c:	f7ff f93b 	bl	8017816 <_ZNK21MockCheckedActualCall7getNameEv>
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185a4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80185a8:	f107 000c 	add.w	r0, r7, #12
 80185ac:	4621      	mov	r1, r4
 80185ae:	f004 fd21 	bl	801cff4 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 80185b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80185b6:	4618      	mov	r0, r3
 80185b8:	f7f4 fd03 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	33dc      	adds	r3, #220	; 0xdc
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	f107 020c 	add.w	r2, r7, #12
 80185c8:	4611      	mov	r1, r2
 80185ca:	6878      	ldr	r0, [r7, #4]
 80185cc:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80185ce:	f107 030c 	add.w	r3, r7, #12
 80185d2:	4618      	mov	r0, r3
 80185d4:	f001 fb62 	bl	8019c9c <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 80185d8:	e02a      	b.n	8018630 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	33cc      	adds	r3, #204	; 0xcc
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	6878      	ldr	r0, [r7, #4]
 80185e4:	4798      	blx	r3
 80185e6:	4604      	mov	r4, r0
 80185e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80185ec:	6879      	ldr	r1, [r7, #4]
 80185ee:	4618      	mov	r0, r3
 80185f0:	f7ff f911 	bl	8017816 <_ZNK21MockCheckedActualCall7getNameEv>
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80185fc:	f107 000c 	add.w	r0, r7, #12
 8018600:	4621      	mov	r1, r4
 8018602:	f004 fe05 	bl	801d210 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8018606:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801860a:	4618      	mov	r0, r3
 801860c:	f7f4 fcd9 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	33dc      	adds	r3, #220	; 0xdc
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	f107 020c 	add.w	r2, r7, #12
 801861c:	4611      	mov	r1, r2
 801861e:	6878      	ldr	r0, [r7, #4]
 8018620:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018622:	f107 030c 	add.w	r3, r7, #12
 8018626:	4618      	mov	r0, r3
 8018628:	f001 fb5a 	bl	8019ce0 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801862c:	e000      	b.n	8018630 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 801862e:	bf00      	nop
    }
}
 8018630:	3750      	adds	r7, #80	; 0x50
 8018632:	46bd      	mov	sp, r7
 8018634:	bdb0      	pop	{r4, r5, r7, pc}
 8018636:	bf00      	nop
 8018638:	08025aa0 	.word	0x08025aa0
 801863c:	08025b08 	.word	0x08025b08

08018640 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8018640:	b480      	push	{r7}
 8018642:	b083      	sub	sp, #12
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
 8018648:	460b      	mov	r3, r1
 801864a:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	78fa      	ldrb	r2, [r7, #3]
 8018650:	751a      	strb	r2, [r3, #20]
}
 8018652:	bf00      	nop
 8018654:	370c      	adds	r7, #12
 8018656:	46bd      	mov	sp, r7
 8018658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865c:	4770      	bx	lr
	...

08018660 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 8018660:	b580      	push	{r7, lr}
 8018662:	b084      	sub	sp, #16
 8018664:	af00      	add	r7, sp, #0
 8018666:	6078      	str	r0, [r7, #4]
 8018668:	6039      	str	r1, [r7, #0]
    checkExpectations();
 801866a:	683b      	ldr	r3, [r7, #0]
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	33c4      	adds	r3, #196	; 0xc4
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	6838      	ldr	r0, [r7, #0]
 8018674:	4798      	blx	r3
    if (matchingExpectation_)
 8018676:	683b      	ldr	r3, [r7, #0]
 8018678:	699b      	ldr	r3, [r3, #24]
 801867a:	2b00      	cmp	r3, #0
 801867c:	d00a      	beq.n	8018694 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 801867e:	683b      	ldr	r3, [r7, #0]
 8018680:	6999      	ldr	r1, [r3, #24]
 8018682:	683b      	ldr	r3, [r7, #0]
 8018684:	699b      	ldr	r3, [r3, #24]
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	3394      	adds	r3, #148	; 0x94
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	687a      	ldr	r2, [r7, #4]
 801868e:	4610      	mov	r0, r2
 8018690:	4798      	blx	r3
 8018692:	e010      	b.n	80186b6 <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 8018694:	f107 0308 	add.w	r3, r7, #8
 8018698:	4909      	ldr	r1, [pc, #36]	; (80186c0 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 801869a:	4618      	mov	r0, r3
 801869c:	f7f4 f8d9 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80186a0:	f107 0308 	add.w	r3, r7, #8
 80186a4:	4619      	mov	r1, r3
 80186a6:	6878      	ldr	r0, [r7, #4]
 80186a8:	f004 fdf8 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
 80186ac:	f107 0308 	add.w	r3, r7, #8
 80186b0:	4618      	mov	r0, r3
 80186b2:	f7f4 fc86 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 80186b6:	6878      	ldr	r0, [r7, #4]
 80186b8:	3710      	adds	r7, #16
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bd80      	pop	{r7, pc}
 80186be:	bf00      	nop
 80186c0:	08025b84 	.word	0x08025b84

080186c4 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 80186c4:	b580      	push	{r7, lr}
 80186c6:	b082      	sub	sp, #8
 80186c8:	af00      	add	r7, sp, #0
 80186ca:	6078      	str	r0, [r7, #4]
 80186cc:	460b      	mov	r3, r1
 80186ce:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	3350      	adds	r3, #80	; 0x50
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	6878      	ldr	r0, [r7, #4]
 80186da:	4798      	blx	r3
 80186dc:	4603      	mov	r3, r0
 80186de:	f083 0301 	eor.w	r3, r3, #1
 80186e2:	b2db      	uxtb	r3, r3
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d001      	beq.n	80186ec <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 80186e8:	78fb      	ldrb	r3, [r7, #3]
 80186ea:	e007      	b.n	80186fc <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	335c      	adds	r3, #92	; 0x5c
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	6878      	ldr	r0, [r7, #4]
 80186f6:	4798      	blx	r3
 80186f8:	4603      	mov	r3, r0
 80186fa:	bf00      	nop
}
 80186fc:	4618      	mov	r0, r3
 80186fe:	3708      	adds	r7, #8
 8018700:	46bd      	mov	sp, r7
 8018702:	bd80      	pop	{r7, pc}

08018704 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8018704:	b590      	push	{r4, r7, lr}
 8018706:	b091      	sub	sp, #68	; 0x44
 8018708:	af00      	add	r7, sp, #0
 801870a:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	3354      	adds	r3, #84	; 0x54
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	f107 0208 	add.w	r2, r7, #8
 8018718:	6879      	ldr	r1, [r7, #4]
 801871a:	4610      	mov	r0, r2
 801871c:	4798      	blx	r3
 801871e:	f107 0308 	add.w	r3, r7, #8
 8018722:	4618      	mov	r0, r3
 8018724:	f005 f896 	bl	801d854 <_ZNK14MockNamedValue12getBoolValueEv>
 8018728:	4603      	mov	r3, r0
 801872a:	461c      	mov	r4, r3
 801872c:	bf00      	nop
 801872e:	f107 0308 	add.w	r3, r7, #8
 8018732:	4618      	mov	r0, r3
 8018734:	f004 fddc 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 8018738:	4623      	mov	r3, r4
}
 801873a:	4618      	mov	r0, r3
 801873c:	3744      	adds	r7, #68	; 0x44
 801873e:	46bd      	mov	sp, r7
 8018740:	bd90      	pop	{r4, r7, pc}

08018742 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 8018742:	b580      	push	{r7, lr}
 8018744:	b082      	sub	sp, #8
 8018746:	af00      	add	r7, sp, #0
 8018748:	6078      	str	r0, [r7, #4]
 801874a:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	3350      	adds	r3, #80	; 0x50
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	6878      	ldr	r0, [r7, #4]
 8018756:	4798      	blx	r3
 8018758:	4603      	mov	r3, r0
 801875a:	f083 0301 	eor.w	r3, r3, #1
 801875e:	b2db      	uxtb	r3, r3
 8018760:	2b00      	cmp	r3, #0
 8018762:	d001      	beq.n	8018768 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 8018764:	683b      	ldr	r3, [r7, #0]
 8018766:	e007      	b.n	8018778 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	3364      	adds	r3, #100	; 0x64
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	6878      	ldr	r0, [r7, #4]
 8018772:	4798      	blx	r3
 8018774:	4603      	mov	r3, r0
 8018776:	bf00      	nop
}
 8018778:	4618      	mov	r0, r3
 801877a:	3708      	adds	r7, #8
 801877c:	46bd      	mov	sp, r7
 801877e:	bd80      	pop	{r7, pc}

08018780 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 8018780:	b590      	push	{r4, r7, lr}
 8018782:	b091      	sub	sp, #68	; 0x44
 8018784:	af00      	add	r7, sp, #0
 8018786:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	3354      	adds	r3, #84	; 0x54
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	f107 0208 	add.w	r2, r7, #8
 8018794:	6879      	ldr	r1, [r7, #4]
 8018796:	4610      	mov	r0, r2
 8018798:	4798      	blx	r3
 801879a:	f107 0308 	add.w	r3, r7, #8
 801879e:	4618      	mov	r0, r3
 80187a0:	f005 f8d0 	bl	801d944 <_ZNK14MockNamedValue11getIntValueEv>
 80187a4:	4604      	mov	r4, r0
 80187a6:	bf00      	nop
 80187a8:	f107 0308 	add.w	r3, r7, #8
 80187ac:	4618      	mov	r0, r3
 80187ae:	f004 fd9f 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 80187b2:	4623      	mov	r3, r4
}
 80187b4:	4618      	mov	r0, r3
 80187b6:	3744      	adds	r7, #68	; 0x44
 80187b8:	46bd      	mov	sp, r7
 80187ba:	bd90      	pop	{r4, r7, pc}

080187bc <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 80187bc:	b590      	push	{r4, r7, lr}
 80187be:	b091      	sub	sp, #68	; 0x44
 80187c0:	af00      	add	r7, sp, #0
 80187c2:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	3354      	adds	r3, #84	; 0x54
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	f107 0208 	add.w	r2, r7, #8
 80187d0:	6879      	ldr	r1, [r7, #4]
 80187d2:	4610      	mov	r0, r2
 80187d4:	4798      	blx	r3
 80187d6:	f107 0308 	add.w	r3, r7, #8
 80187da:	4618      	mov	r0, r3
 80187dc:	f005 f93c 	bl	801da58 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 80187e0:	4604      	mov	r4, r0
 80187e2:	bf00      	nop
 80187e4:	f107 0308 	add.w	r3, r7, #8
 80187e8:	4618      	mov	r0, r3
 80187ea:	f004 fd81 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 80187ee:	4623      	mov	r3, r4
}
 80187f0:	4618      	mov	r0, r3
 80187f2:	3744      	adds	r7, #68	; 0x44
 80187f4:	46bd      	mov	sp, r7
 80187f6:	bd90      	pop	{r4, r7, pc}

080187f8 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b082      	sub	sp, #8
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
 8018800:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	3350      	adds	r3, #80	; 0x50
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	6878      	ldr	r0, [r7, #4]
 801880c:	4798      	blx	r3
 801880e:	4603      	mov	r3, r0
 8018810:	f083 0301 	eor.w	r3, r3, #1
 8018814:	b2db      	uxtb	r3, r3
 8018816:	2b00      	cmp	r3, #0
 8018818:	d001      	beq.n	801881e <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 801881a:	683b      	ldr	r3, [r7, #0]
 801881c:	e007      	b.n	801882e <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	3368      	adds	r3, #104	; 0x68
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	6878      	ldr	r0, [r7, #4]
 8018828:	4798      	blx	r3
 801882a:	4603      	mov	r3, r0
 801882c:	bf00      	nop
}
 801882e:	4618      	mov	r0, r3
 8018830:	3708      	adds	r7, #8
 8018832:	46bd      	mov	sp, r7
 8018834:	bd80      	pop	{r7, pc}

08018836 <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 8018836:	b590      	push	{r4, r7, lr}
 8018838:	b091      	sub	sp, #68	; 0x44
 801883a:	af00      	add	r7, sp, #0
 801883c:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	3354      	adds	r3, #84	; 0x54
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	f107 0208 	add.w	r2, r7, #8
 801884a:	6879      	ldr	r1, [r7, #4]
 801884c:	4610      	mov	r0, r2
 801884e:	4798      	blx	r3
 8018850:	f107 0308 	add.w	r3, r7, #8
 8018854:	4618      	mov	r0, r3
 8018856:	f005 f89d 	bl	801d994 <_ZNK14MockNamedValue15getLongIntValueEv>
 801885a:	4604      	mov	r4, r0
 801885c:	bf00      	nop
 801885e:	f107 0308 	add.w	r3, r7, #8
 8018862:	4618      	mov	r0, r3
 8018864:	f004 fd44 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 8018868:	4623      	mov	r3, r4
}
 801886a:	4618      	mov	r0, r3
 801886c:	3744      	adds	r7, #68	; 0x44
 801886e:	46bd      	mov	sp, r7
 8018870:	bd90      	pop	{r4, r7, pc}

08018872 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 8018872:	b580      	push	{r7, lr}
 8018874:	b082      	sub	sp, #8
 8018876:	af00      	add	r7, sp, #0
 8018878:	6078      	str	r0, [r7, #4]
 801887a:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	3350      	adds	r3, #80	; 0x50
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	6878      	ldr	r0, [r7, #4]
 8018886:	4798      	blx	r3
 8018888:	4603      	mov	r3, r0
 801888a:	f083 0301 	eor.w	r3, r3, #1
 801888e:	b2db      	uxtb	r3, r3
 8018890:	2b00      	cmp	r3, #0
 8018892:	d001      	beq.n	8018898 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 8018894:	683b      	ldr	r3, [r7, #0]
 8018896:	e007      	b.n	80188a8 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	3370      	adds	r3, #112	; 0x70
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	6878      	ldr	r0, [r7, #4]
 80188a2:	4798      	blx	r3
 80188a4:	4603      	mov	r3, r0
 80188a6:	bf00      	nop
}
 80188a8:	4618      	mov	r0, r3
 80188aa:	3708      	adds	r7, #8
 80188ac:	46bd      	mov	sp, r7
 80188ae:	bd80      	pop	{r7, pc}

080188b0 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 80188b0:	b5b0      	push	{r4, r5, r7, lr}
 80188b2:	b084      	sub	sp, #16
 80188b4:	af02      	add	r7, sp, #8
 80188b6:	6078      	str	r0, [r7, #4]
 80188b8:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 80188ba:	f7fb fbad 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 80188be:	4604      	mov	r4, r0
 80188c0:	6823      	ldr	r3, [r4, #0]
 80188c2:	3368      	adds	r3, #104	; 0x68
 80188c4:	681d      	ldr	r5, [r3, #0]
 80188c6:	f7fb fbb7 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80188ca:	4603      	mov	r3, r0
 80188cc:	9300      	str	r3, [sp, #0]
 80188ce:	f240 13fb 	movw	r3, #507	; 0x1fb
 80188d2:	4a06      	ldr	r2, [pc, #24]	; (80188ec <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 80188d4:	4906      	ldr	r1, [pc, #24]	; (80188f0 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 80188d6:	4620      	mov	r0, r4
 80188d8:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 80188da:	2100      	movs	r1, #0
 80188dc:	6878      	ldr	r0, [r7, #4]
 80188de:	f7f1 fffb 	bl	800a8d8 <_ZN18cpputest_ulonglongC1Ei>
}
 80188e2:	6878      	ldr	r0, [r7, #4]
 80188e4:	3708      	adds	r7, #8
 80188e6:	46bd      	mov	sp, r7
 80188e8:	bdb0      	pop	{r4, r5, r7, pc}
 80188ea:	bf00      	nop
 80188ec:	08025aa0 	.word	0x08025aa0
 80188f0:	08025abc 	.word	0x08025abc

080188f4 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 80188f4:	b5b0      	push	{r4, r5, r7, lr}
 80188f6:	b086      	sub	sp, #24
 80188f8:	af02      	add	r7, sp, #8
 80188fa:	60f8      	str	r0, [r7, #12]
 80188fc:	60b9      	str	r1, [r7, #8]
 80188fe:	4639      	mov	r1, r7
 8018900:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018904:	f7fb fb88 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8018908:	4604      	mov	r4, r0
 801890a:	6823      	ldr	r3, [r4, #0]
 801890c:	3368      	adds	r3, #104	; 0x68
 801890e:	681d      	ldr	r5, [r3, #0]
 8018910:	f7fb fb92 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018914:	4603      	mov	r3, r0
 8018916:	9300      	str	r3, [sp, #0]
 8018918:	f240 2301 	movw	r3, #513	; 0x201
 801891c:	4a06      	ldr	r2, [pc, #24]	; (8018938 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801891e:	4907      	ldr	r1, [pc, #28]	; (801893c <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8018920:	4620      	mov	r0, r4
 8018922:	47a8      	blx	r5
    return default_value;
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	461a      	mov	r2, r3
 8018928:	463b      	mov	r3, r7
 801892a:	cb03      	ldmia	r3!, {r0, r1}
 801892c:	6010      	str	r0, [r2, #0]
 801892e:	6051      	str	r1, [r2, #4]
}
 8018930:	68f8      	ldr	r0, [r7, #12]
 8018932:	3710      	adds	r7, #16
 8018934:	46bd      	mov	sp, r7
 8018936:	bdb0      	pop	{r4, r5, r7, pc}
 8018938:	08025aa0 	.word	0x08025aa0
 801893c:	08025abc 	.word	0x08025abc

08018940 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8018940:	b5b0      	push	{r4, r5, r7, lr}
 8018942:	b084      	sub	sp, #16
 8018944:	af02      	add	r7, sp, #8
 8018946:	6078      	str	r0, [r7, #4]
 8018948:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801894a:	f7fb fb65 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801894e:	4604      	mov	r4, r0
 8018950:	6823      	ldr	r3, [r4, #0]
 8018952:	3368      	adds	r3, #104	; 0x68
 8018954:	681d      	ldr	r5, [r3, #0]
 8018956:	f7fb fb6f 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801895a:	4603      	mov	r3, r0
 801895c:	9300      	str	r3, [sp, #0]
 801895e:	f240 2307 	movw	r3, #519	; 0x207
 8018962:	4a06      	ldr	r2, [pc, #24]	; (801897c <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 8018964:	4906      	ldr	r1, [pc, #24]	; (8018980 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 8018966:	4620      	mov	r0, r4
 8018968:	47a8      	blx	r5
    return cpputest_longlong(0);
 801896a:	2100      	movs	r1, #0
 801896c:	6878      	ldr	r0, [r7, #4]
 801896e:	f7f1 ffa7 	bl	800a8c0 <_ZN17cpputest_longlongC1Ei>
}
 8018972:	6878      	ldr	r0, [r7, #4]
 8018974:	3708      	adds	r7, #8
 8018976:	46bd      	mov	sp, r7
 8018978:	bdb0      	pop	{r4, r5, r7, pc}
 801897a:	bf00      	nop
 801897c:	08025aa0 	.word	0x08025aa0
 8018980:	08025ae8 	.word	0x08025ae8

08018984 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 8018984:	b5b0      	push	{r4, r5, r7, lr}
 8018986:	b086      	sub	sp, #24
 8018988:	af02      	add	r7, sp, #8
 801898a:	60f8      	str	r0, [r7, #12]
 801898c:	60b9      	str	r1, [r7, #8]
 801898e:	4639      	mov	r1, r7
 8018990:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018994:	f7fb fb40 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8018998:	4604      	mov	r4, r0
 801899a:	6823      	ldr	r3, [r4, #0]
 801899c:	3368      	adds	r3, #104	; 0x68
 801899e:	681d      	ldr	r5, [r3, #0]
 80189a0:	f7fb fb4a 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80189a4:	4603      	mov	r3, r0
 80189a6:	9300      	str	r3, [sp, #0]
 80189a8:	f240 230d 	movw	r3, #525	; 0x20d
 80189ac:	4a06      	ldr	r2, [pc, #24]	; (80189c8 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 80189ae:	4907      	ldr	r1, [pc, #28]	; (80189cc <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 80189b0:	4620      	mov	r0, r4
 80189b2:	47a8      	blx	r5
    return default_value;
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	461a      	mov	r2, r3
 80189b8:	463b      	mov	r3, r7
 80189ba:	cb03      	ldmia	r3!, {r0, r1}
 80189bc:	6010      	str	r0, [r2, #0]
 80189be:	6051      	str	r1, [r2, #4]
}
 80189c0:	68f8      	ldr	r0, [r7, #12]
 80189c2:	3710      	adds	r7, #16
 80189c4:	46bd      	mov	sp, r7
 80189c6:	bdb0      	pop	{r4, r5, r7, pc}
 80189c8:	08025aa0 	.word	0x08025aa0
 80189cc:	08025ae8 	.word	0x08025ae8

080189d0 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 80189d0:	b580      	push	{r7, lr}
 80189d2:	ed2d 8b02 	vpush	{d8}
 80189d6:	b090      	sub	sp, #64	; 0x40
 80189d8:	af00      	add	r7, sp, #0
 80189da:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	3354      	adds	r3, #84	; 0x54
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	f107 0208 	add.w	r2, r7, #8
 80189e8:	6879      	ldr	r1, [r7, #4]
 80189ea:	4610      	mov	r0, r2
 80189ec:	4798      	blx	r3
 80189ee:	f107 0308 	add.w	r3, r7, #8
 80189f2:	4618      	mov	r0, r3
 80189f4:	f005 f908 	bl	801dc08 <_ZNK14MockNamedValue14getDoubleValueEv>
 80189f8:	eeb0 8a40 	vmov.f32	s16, s0
 80189fc:	eef0 8a60 	vmov.f32	s17, s1
 8018a00:	bf00      	nop
 8018a02:	f107 0308 	add.w	r3, r7, #8
 8018a06:	4618      	mov	r0, r3
 8018a08:	f004 fc72 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 8018a0c:	eeb0 7a48 	vmov.f32	s14, s16
 8018a10:	eef0 7a68 	vmov.f32	s15, s17
}
 8018a14:	eeb0 0a47 	vmov.f32	s0, s14
 8018a18:	eef0 0a67 	vmov.f32	s1, s15
 8018a1c:	3740      	adds	r7, #64	; 0x40
 8018a1e:	46bd      	mov	sp, r7
 8018a20:	ecbd 8b02 	vpop	{d8}
 8018a24:	bd80      	pop	{r7, pc}

08018a26 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 8018a26:	b580      	push	{r7, lr}
 8018a28:	b084      	sub	sp, #16
 8018a2a:	af00      	add	r7, sp, #0
 8018a2c:	60f8      	str	r0, [r7, #12]
 8018a2e:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	3350      	adds	r3, #80	; 0x50
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	68f8      	ldr	r0, [r7, #12]
 8018a3c:	4798      	blx	r3
 8018a3e:	4603      	mov	r3, r0
 8018a40:	f083 0301 	eor.w	r3, r3, #1
 8018a44:	b2db      	uxtb	r3, r3
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d002      	beq.n	8018a50 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 8018a4a:	ed97 7b00 	vldr	d7, [r7]
 8018a4e:	e00a      	b.n	8018a66 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	3398      	adds	r3, #152	; 0x98
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	68f8      	ldr	r0, [r7, #12]
 8018a5a:	4798      	blx	r3
 8018a5c:	eeb0 7a40 	vmov.f32	s14, s0
 8018a60:	eef0 7a60 	vmov.f32	s15, s1
 8018a64:	bf00      	nop
}
 8018a66:	eeb0 0a47 	vmov.f32	s0, s14
 8018a6a:	eef0 0a67 	vmov.f32	s1, s15
 8018a6e:	3710      	adds	r7, #16
 8018a70:	46bd      	mov	sp, r7
 8018a72:	bd80      	pop	{r7, pc}

08018a74 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 8018a74:	b590      	push	{r4, r7, lr}
 8018a76:	b091      	sub	sp, #68	; 0x44
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	3354      	adds	r3, #84	; 0x54
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	f107 0208 	add.w	r2, r7, #8
 8018a88:	6879      	ldr	r1, [r7, #4]
 8018a8a:	4610      	mov	r0, r2
 8018a8c:	4798      	blx	r3
 8018a8e:	f107 0308 	add.w	r3, r7, #8
 8018a92:	4618      	mov	r0, r3
 8018a94:	f004 ff06 	bl	801d8a4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 8018a98:	4604      	mov	r4, r0
 8018a9a:	bf00      	nop
 8018a9c:	f107 0308 	add.w	r3, r7, #8
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	f004 fc25 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 8018aa6:	4623      	mov	r3, r4
}
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	3744      	adds	r7, #68	; 0x44
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd90      	pop	{r4, r7, pc}

08018ab0 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b082      	sub	sp, #8
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
 8018ab8:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	3350      	adds	r3, #80	; 0x50
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	6878      	ldr	r0, [r7, #4]
 8018ac4:	4798      	blx	r3
 8018ac6:	4603      	mov	r3, r0
 8018ac8:	f083 0301 	eor.w	r3, r3, #1
 8018acc:	b2db      	uxtb	r3, r3
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d001      	beq.n	8018ad6 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 8018ad2:	683b      	ldr	r3, [r7, #0]
 8018ad4:	e007      	b.n	8018ae6 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	3388      	adds	r3, #136	; 0x88
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	6878      	ldr	r0, [r7, #4]
 8018ae0:	4798      	blx	r3
 8018ae2:	4603      	mov	r3, r0
 8018ae4:	bf00      	nop
}
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	3708      	adds	r7, #8
 8018aea:	46bd      	mov	sp, r7
 8018aec:	bd80      	pop	{r7, pc}

08018aee <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 8018aee:	b580      	push	{r7, lr}
 8018af0:	b082      	sub	sp, #8
 8018af2:	af00      	add	r7, sp, #0
 8018af4:	6078      	str	r0, [r7, #4]
 8018af6:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	3350      	adds	r3, #80	; 0x50
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	6878      	ldr	r0, [r7, #4]
 8018b02:	4798      	blx	r3
 8018b04:	4603      	mov	r3, r0
 8018b06:	f083 0301 	eor.w	r3, r3, #1
 8018b0a:	b2db      	uxtb	r3, r3
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d001      	beq.n	8018b14 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 8018b10:	683b      	ldr	r3, [r7, #0]
 8018b12:	e007      	b.n	8018b24 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	33a0      	adds	r3, #160	; 0xa0
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	6878      	ldr	r0, [r7, #4]
 8018b1e:	4798      	blx	r3
 8018b20:	4603      	mov	r3, r0
 8018b22:	bf00      	nop
}
 8018b24:	4618      	mov	r0, r3
 8018b26:	3708      	adds	r7, #8
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	bd80      	pop	{r7, pc}

08018b2c <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 8018b2c:	b590      	push	{r4, r7, lr}
 8018b2e:	b091      	sub	sp, #68	; 0x44
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	3354      	adds	r3, #84	; 0x54
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	f107 0208 	add.w	r2, r7, #8
 8018b40:	6879      	ldr	r1, [r7, #4]
 8018b42:	4610      	mov	r0, r2
 8018b44:	4798      	blx	r3
 8018b46:	f107 0308 	add.w	r3, r7, #8
 8018b4a:	4618      	mov	r0, r3
 8018b4c:	f005 f8e0 	bl	801dd10 <_ZNK14MockNamedValue15getPointerValueEv>
 8018b50:	4604      	mov	r4, r0
 8018b52:	bf00      	nop
 8018b54:	f107 0308 	add.w	r3, r7, #8
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f004 fbc9 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 8018b5e:	4623      	mov	r3, r4
}
 8018b60:	4618      	mov	r0, r3
 8018b62:	3744      	adds	r7, #68	; 0x44
 8018b64:	46bd      	mov	sp, r7
 8018b66:	bd90      	pop	{r4, r7, pc}

08018b68 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 8018b68:	b590      	push	{r4, r7, lr}
 8018b6a:	b091      	sub	sp, #68	; 0x44
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	3354      	adds	r3, #84	; 0x54
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	f107 0208 	add.w	r2, r7, #8
 8018b7c:	6879      	ldr	r1, [r7, #4]
 8018b7e:	4610      	mov	r0, r2
 8018b80:	4798      	blx	r3
 8018b82:	f107 0308 	add.w	r3, r7, #8
 8018b86:	4618      	mov	r0, r3
 8018b88:	f005 f8ea 	bl	801dd60 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8018b8c:	4604      	mov	r4, r0
 8018b8e:	bf00      	nop
 8018b90:	f107 0308 	add.w	r3, r7, #8
 8018b94:	4618      	mov	r0, r3
 8018b96:	f004 fbab 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 8018b9a:	4623      	mov	r3, r4
}
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	3744      	adds	r7, #68	; 0x44
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	bd90      	pop	{r4, r7, pc}

08018ba4 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	b082      	sub	sp, #8
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	6078      	str	r0, [r7, #4]
 8018bac:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	3350      	adds	r3, #80	; 0x50
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	6878      	ldr	r0, [r7, #4]
 8018bb8:	4798      	blx	r3
 8018bba:	4603      	mov	r3, r0
 8018bbc:	f083 0301 	eor.w	r3, r3, #1
 8018bc0:	b2db      	uxtb	r3, r3
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d001      	beq.n	8018bca <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 8018bc6:	683b      	ldr	r3, [r7, #0]
 8018bc8:	e007      	b.n	8018bda <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	33a8      	adds	r3, #168	; 0xa8
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	6878      	ldr	r0, [r7, #4]
 8018bd4:	4798      	blx	r3
 8018bd6:	4603      	mov	r3, r0
 8018bd8:	bf00      	nop
}
 8018bda:	4618      	mov	r0, r3
 8018bdc:	3708      	adds	r7, #8
 8018bde:	46bd      	mov	sp, r7
 8018be0:	bd80      	pop	{r7, pc}

08018be2 <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 8018be2:	b590      	push	{r4, r7, lr}
 8018be4:	b091      	sub	sp, #68	; 0x44
 8018be6:	af00      	add	r7, sp, #0
 8018be8:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	3354      	adds	r3, #84	; 0x54
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	f107 0208 	add.w	r2, r7, #8
 8018bf6:	6879      	ldr	r1, [r7, #4]
 8018bf8:	4610      	mov	r0, r2
 8018bfa:	4798      	blx	r3
 8018bfc:	f107 0308 	add.w	r3, r7, #8
 8018c00:	4618      	mov	r0, r3
 8018c02:	f005 f8d5 	bl	801ddb0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8018c06:	4604      	mov	r4, r0
 8018c08:	bf00      	nop
 8018c0a:	f107 0308 	add.w	r3, r7, #8
 8018c0e:	4618      	mov	r0, r3
 8018c10:	f004 fb6e 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 8018c14:	4623      	mov	r3, r4
}
 8018c16:	4618      	mov	r0, r3
 8018c18:	3744      	adds	r7, #68	; 0x44
 8018c1a:	46bd      	mov	sp, r7
 8018c1c:	bd90      	pop	{r4, r7, pc}

08018c1e <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 8018c1e:	b580      	push	{r7, lr}
 8018c20:	b082      	sub	sp, #8
 8018c22:	af00      	add	r7, sp, #0
 8018c24:	6078      	str	r0, [r7, #4]
 8018c26:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	3350      	adds	r3, #80	; 0x50
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	6878      	ldr	r0, [r7, #4]
 8018c32:	4798      	blx	r3
 8018c34:	4603      	mov	r3, r0
 8018c36:	f083 0301 	eor.w	r3, r3, #1
 8018c3a:	b2db      	uxtb	r3, r3
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d001      	beq.n	8018c44 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 8018c40:	683b      	ldr	r3, [r7, #0]
 8018c42:	e007      	b.n	8018c54 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	33b0      	adds	r3, #176	; 0xb0
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	6878      	ldr	r0, [r7, #4]
 8018c4e:	4798      	blx	r3
 8018c50:	4603      	mov	r3, r0
 8018c52:	bf00      	nop
}
 8018c54:	4618      	mov	r0, r3
 8018c56:	3708      	adds	r7, #8
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	bd80      	pop	{r7, pc}

08018c5c <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	b082      	sub	sp, #8
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	6078      	str	r0, [r7, #4]
 8018c64:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	3350      	adds	r3, #80	; 0x50
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	6878      	ldr	r0, [r7, #4]
 8018c70:	4798      	blx	r3
 8018c72:	4603      	mov	r3, r0
 8018c74:	f083 0301 	eor.w	r3, r3, #1
 8018c78:	b2db      	uxtb	r3, r3
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d001      	beq.n	8018c82 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 8018c7e:	683b      	ldr	r3, [r7, #0]
 8018c80:	e007      	b.n	8018c92 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	3394      	adds	r3, #148	; 0x94
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	6878      	ldr	r0, [r7, #4]
 8018c8c:	4798      	blx	r3
 8018c8e:	4603      	mov	r3, r0
 8018c90:	bf00      	nop
}
 8018c92:	4618      	mov	r0, r3
 8018c94:	3708      	adds	r7, #8
 8018c96:	46bd      	mov	sp, r7
 8018c98:	bd80      	pop	{r7, pc}

08018c9a <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 8018c9a:	b590      	push	{r4, r7, lr}
 8018c9c:	b091      	sub	sp, #68	; 0x44
 8018c9e:	af00      	add	r7, sp, #0
 8018ca0:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	3354      	adds	r3, #84	; 0x54
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	f107 0208 	add.w	r2, r7, #8
 8018cae:	6879      	ldr	r1, [r7, #4]
 8018cb0:	4610      	mov	r0, r2
 8018cb2:	4798      	blx	r3
 8018cb4:	f107 0308 	add.w	r3, r7, #8
 8018cb8:	4618      	mov	r0, r3
 8018cba:	f005 f801 	bl	801dcc0 <_ZNK14MockNamedValue14getStringValueEv>
 8018cbe:	4604      	mov	r4, r0
 8018cc0:	bf00      	nop
 8018cc2:	f107 0308 	add.w	r3, r7, #8
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	f004 fb12 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 8018ccc:	4623      	mov	r3, r4
}
 8018cce:	4618      	mov	r0, r3
 8018cd0:	3744      	adds	r7, #68	; 0x44
 8018cd2:	46bd      	mov	sp, r7
 8018cd4:	bd90      	pop	{r4, r7, pc}

08018cd6 <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 8018cd6:	b590      	push	{r4, r7, lr}
 8018cd8:	b093      	sub	sp, #76	; 0x4c
 8018cda:	af00      	add	r7, sp, #0
 8018cdc:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	3354      	adds	r3, #84	; 0x54
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	f107 0210 	add.w	r2, r7, #16
 8018cea:	6879      	ldr	r1, [r7, #4]
 8018cec:	4610      	mov	r0, r2
 8018cee:	4798      	blx	r3
 8018cf0:	f107 0308 	add.w	r3, r7, #8
 8018cf4:	f107 0210 	add.w	r2, r7, #16
 8018cf8:	4611      	mov	r1, r2
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	f004 fd8c 	bl	801d818 <_ZNK14MockNamedValue7getNameEv>
 8018d00:	f107 0308 	add.w	r3, r7, #8
 8018d04:	4618      	mov	r0, r3
 8018d06:	f7f4 f94b 	bl	800cfa0 <_ZNK12SimpleString7isEmptyEv>
 8018d0a:	4603      	mov	r3, r0
 8018d0c:	f083 0301 	eor.w	r3, r3, #1
 8018d10:	b2dc      	uxtb	r4, r3
 8018d12:	f107 0308 	add.w	r3, r7, #8
 8018d16:	4618      	mov	r0, r3
 8018d18:	f7f4 f953 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8018d1c:	f107 0310 	add.w	r3, r7, #16
 8018d20:	4618      	mov	r0, r3
 8018d22:	f004 fae5 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 8018d26:	4623      	mov	r3, r4
}
 8018d28:	4618      	mov	r0, r3
 8018d2a:	374c      	adds	r7, #76	; 0x4c
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	bd90      	pop	{r4, r7, pc}

08018d30 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 8018d30:	b590      	push	{r4, r7, lr}
 8018d32:	b095      	sub	sp, #84	; 0x54
 8018d34:	af02      	add	r7, sp, #8
 8018d36:	6078      	str	r0, [r7, #4]
 8018d38:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	33c0      	adds	r3, #192	; 0xc0
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	6878      	ldr	r0, [r7, #4]
 8018d44:	4798      	blx	r3
 8018d46:	4603      	mov	r3, r0
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d001      	beq.n	8018d50 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 8018d4c:	687c      	ldr	r4, [r7, #4]
 8018d4e:	e053      	b.n	8018df8 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	331c      	adds	r3, #28
 8018d54:	6839      	ldr	r1, [r7, #0]
 8018d56:	4618      	mov	r0, r3
 8018d58:	f003 f8ca 	bl	801bef0 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	699b      	ldr	r3, [r3, #24]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d109      	bne.n	8018d78 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	331c      	adds	r3, #28
 8018d68:	4618      	mov	r0, r3
 8018d6a:	f002 fe20 	bl	801b9ae <_ZNK21MockExpectedCallsList7isEmptyEv>
 8018d6e:	4603      	mov	r3, r0
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d001      	beq.n	8018d78 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8018d74:	2301      	movs	r3, #1
 8018d76:	e000      	b.n	8018d7a <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 8018d78:	2300      	movs	r3, #0
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d02c      	beq.n	8018dd8 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	33cc      	adds	r3, #204	; 0xcc
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	6878      	ldr	r0, [r7, #4]
 8018d88:	4798      	blx	r3
 8018d8a:	4604      	mov	r4, r0
 8018d8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018d90:	6879      	ldr	r1, [r7, #4]
 8018d92:	4618      	mov	r0, r3
 8018d94:	f7fe fd3f 	bl	8017816 <_ZNK21MockCheckedActualCall7getNameEv>
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d9c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018da0:	f107 000c 	add.w	r0, r7, #12
 8018da4:	9300      	str	r3, [sp, #0]
 8018da6:	683b      	ldr	r3, [r7, #0]
 8018da8:	4621      	mov	r1, r4
 8018daa:	f004 f9fb 	bl	801d1a4 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 8018dae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018db2:	4618      	mov	r0, r3
 8018db4:	f7f4 f905 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	33dc      	adds	r3, #220	; 0xdc
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	f107 020c 	add.w	r2, r7, #12
 8018dc4:	4611      	mov	r1, r2
 8018dc6:	6878      	ldr	r0, [r7, #4]
 8018dc8:	4798      	blx	r3
        return *this;
 8018dca:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8018dcc:	f107 030c 	add.w	r3, r7, #12
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	f000 ffa7 	bl	8019d24 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8018dd6:	e00f      	b.n	8018df8 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	331c      	adds	r3, #28
 8018ddc:	4618      	mov	r0, r3
 8018dde:	f003 f9a7 	bl	801c130 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	699b      	ldr	r3, [r3, #24]
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d105      	bne.n	8018df6 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	33d8      	adds	r3, #216	; 0xd8
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	6878      	ldr	r0, [r7, #4]
 8018df4:	4798      	blx	r3
    }

    return *this;
 8018df6:	687c      	ldr	r4, [r7, #4]
 8018df8:	4623      	mov	r3, r4
}
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	374c      	adds	r7, #76	; 0x4c
 8018dfe:	46bd      	mov	sp, r7
 8018e00:	bd90      	pop	{r4, r7, pc}
	...

08018e04 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 8018e04:	b590      	push	{r4, r7, lr}
 8018e06:	b087      	sub	sp, #28
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	60f8      	str	r0, [r7, #12]
 8018e0c:	60b9      	str	r1, [r7, #8]
 8018e0e:	607a      	str	r2, [r7, #4]
 8018e10:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 8018e12:	f240 2282 	movw	r2, #642	; 0x282
 8018e16:	4913      	ldr	r1, [pc, #76]	; (8018e64 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8018e18:	2018      	movs	r0, #24
 8018e1a:	f7f1 f957 	bl	800a0cc <_ZnwjPKci>
 8018e1e:	4604      	mov	r4, r0
 8018e20:	683b      	ldr	r3, [r7, #0]
 8018e22:	687a      	ldr	r2, [r7, #4]
 8018e24:	68b9      	ldr	r1, [r7, #8]
 8018e26:	4620      	mov	r0, r4
 8018e28:	f7fe fa48 	bl	80172bc <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 8018e2c:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 8018e2e:	68fb      	ldr	r3, [r7, #12]
 8018e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d103      	bne.n	8018e3e <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	693a      	ldr	r2, [r7, #16]
 8018e3a:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 8018e3c:	e00d      	b.n	8018e5a <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e42:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 8018e44:	697b      	ldr	r3, [r7, #20]
 8018e46:	695b      	ldr	r3, [r3, #20]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d003      	beq.n	8018e54 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 8018e4c:	697b      	ldr	r3, [r7, #20]
 8018e4e:	695b      	ldr	r3, [r3, #20]
 8018e50:	617b      	str	r3, [r7, #20]
 8018e52:	e7f7      	b.n	8018e44 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 8018e54:	697b      	ldr	r3, [r7, #20]
 8018e56:	693a      	ldr	r2, [r7, #16]
 8018e58:	615a      	str	r2, [r3, #20]
}
 8018e5a:	bf00      	nop
 8018e5c:	371c      	adds	r7, #28
 8018e5e:	46bd      	mov	sp, r7
 8018e60:	bd90      	pop	{r4, r7, pc}
 8018e62:	bf00      	nop
 8018e64:	08025aa0 	.word	0x08025aa0

08018e68 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b082      	sub	sp, #8
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	6078      	str	r0, [r7, #4]
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	3308      	adds	r3, #8
 8018e74:	4618      	mov	r0, r3
 8018e76:	f7f4 f8a4 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	4618      	mov	r0, r3
 8018e7e:	f7f4 f8a0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	4618      	mov	r0, r3
 8018e86:	3708      	adds	r7, #8
 8018e88:	46bd      	mov	sp, r7
 8018e8a:	bd80      	pop	{r7, pc}

08018e8c <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 8018e8c:	b590      	push	{r4, r7, lr}
 8018e8e:	b085      	sub	sp, #20
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e98:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 8018e9a:	2300      	movs	r3, #0
 8018e9c:	60bb      	str	r3, [r7, #8]

    while (current) {
 8018e9e:	68fb      	ldr	r3, [r7, #12]
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d012      	beq.n	8018eca <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	695b      	ldr	r3, [r3, #20]
 8018eac:	60fb      	str	r3, [r7, #12]
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	68fa      	ldr	r2, [r7, #12]
 8018eb2:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 8018eb4:	68bc      	ldr	r4, [r7, #8]
 8018eb6:	2c00      	cmp	r4, #0
 8018eb8:	d0f1      	beq.n	8018e9e <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 8018eba:	4620      	mov	r0, r4
 8018ebc:	f7ff ffd4 	bl	8018e68 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 8018ec0:	2118      	movs	r1, #24
 8018ec2:	4620      	mov	r0, r4
 8018ec4:	f7f1 f916 	bl	800a0f4 <_ZdlPvj>
    while (current) {
 8018ec8:	e7e9      	b.n	8018e9e <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 8018eca:	bf00      	nop
 8018ecc:	3714      	adds	r7, #20
 8018ece:	46bd      	mov	sp, r7
 8018ed0:	bd90      	pop	{r4, r7, pc}
	...

08018ed4 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 8018ed4:	b580      	push	{r7, lr}
 8018ed6:	b082      	sub	sp, #8
 8018ed8:	af00      	add	r7, sp, #0
 8018eda:	6078      	str	r0, [r7, #4]
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	4618      	mov	r0, r3
 8018ee0:	f7fe fc6a 	bl	80177b8 <_ZN14MockActualCallC1Ev>
 8018ee4:	4a06      	ldr	r2, [pc, #24]	; (8018f00 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	601a      	str	r2, [r3, #0]
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	3304      	adds	r3, #4
 8018eee:	4905      	ldr	r1, [pc, #20]	; (8018f04 <_ZN19MockActualCallTraceC1Ev+0x30>)
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	f7f3 fcae 	bl	800c852 <_ZN12SimpleStringC1EPKc>
{
}
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	4618      	mov	r0, r3
 8018efa:	3708      	adds	r7, #8
 8018efc:	46bd      	mov	sp, r7
 8018efe:	bd80      	pop	{r7, pc}
 8018f00:	08028734 	.word	0x08028734
 8018f04:	08025a88 	.word	0x08025a88

08018f08 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b082      	sub	sp, #8
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
 8018f10:	4a08      	ldr	r2, [pc, #32]	; (8018f34 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	601a      	str	r2, [r3, #0]
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	3304      	adds	r3, #4
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	f7f4 f851 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	4618      	mov	r0, r3
 8018f24:	f7fe fc58 	bl	80177d8 <_ZN14MockActualCallD1Ev>
{
}
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	4618      	mov	r0, r3
 8018f2c:	3708      	adds	r7, #8
 8018f2e:	46bd      	mov	sp, r7
 8018f30:	bd80      	pop	{r7, pc}
 8018f32:	bf00      	nop
 8018f34:	08028734 	.word	0x08028734

08018f38 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b082      	sub	sp, #8
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]
}
 8018f40:	6878      	ldr	r0, [r7, #4]
 8018f42:	f7ff ffe1 	bl	8018f08 <_ZN19MockActualCallTraceD1Ev>
 8018f46:	210c      	movs	r1, #12
 8018f48:	6878      	ldr	r0, [r7, #4]
 8018f4a:	f7f1 f8d3 	bl	800a0f4 <_ZdlPvj>
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	4618      	mov	r0, r3
 8018f52:	3708      	adds	r7, #8
 8018f54:	46bd      	mov	sp, r7
 8018f56:	bd80      	pop	{r7, pc}

08018f58 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 8018f58:	b580      	push	{r7, lr}
 8018f5a:	b082      	sub	sp, #8
 8018f5c:	af00      	add	r7, sp, #0
 8018f5e:	6078      	str	r0, [r7, #4]
 8018f60:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	3304      	adds	r3, #4
 8018f66:	4907      	ldr	r1, [pc, #28]	; (8018f84 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8018f68:	4618      	mov	r0, r3
 8018f6a:	f7f4 f8b9 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	3304      	adds	r3, #4
 8018f72:	6839      	ldr	r1, [r7, #0]
 8018f74:	4618      	mov	r0, r3
 8018f76:	f7f4 f8a1 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    return *this;
 8018f7a:	687b      	ldr	r3, [r7, #4]
}
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	3708      	adds	r7, #8
 8018f80:	46bd      	mov	sp, r7
 8018f82:	bd80      	pop	{r7, pc}
 8018f84:	08025b94 	.word	0x08025b94

08018f88 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 8018f88:	b590      	push	{r4, r7, lr}
 8018f8a:	b085      	sub	sp, #20
 8018f8c:	af00      	add	r7, sp, #0
 8018f8e:	6078      	str	r0, [r7, #4]
 8018f90:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	3304      	adds	r3, #4
 8018f96:	490e      	ldr	r1, [pc, #56]	; (8018fd0 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8018f98:	4618      	mov	r0, r3
 8018f9a:	f7f4 f8a1 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	1d1c      	adds	r4, r3, #4
 8018fa2:	f107 0308 	add.w	r3, r7, #8
 8018fa6:	6839      	ldr	r1, [r7, #0]
 8018fa8:	4618      	mov	r0, r3
 8018faa:	f7f4 fd39 	bl	800da20 <_Z10StringFromj>
 8018fae:	f107 0308 	add.w	r3, r7, #8
 8018fb2:	4619      	mov	r1, r3
 8018fb4:	4620      	mov	r0, r4
 8018fb6:	f7f4 f881 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 8018fba:	f107 0308 	add.w	r3, r7, #8
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	f7f3 ffff 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return *this;
 8018fc4:	687b      	ldr	r3, [r7, #4]
}
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	3714      	adds	r7, #20
 8018fca:	46bd      	mov	sp, r7
 8018fcc:	bd90      	pop	{r4, r7, pc}
 8018fce:	bf00      	nop
 8018fd0:	08025ba4 	.word	0x08025ba4

08018fd4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8018fd4:	b580      	push	{r7, lr}
 8018fd6:	b082      	sub	sp, #8
 8018fd8:	af00      	add	r7, sp, #0
 8018fda:	6078      	str	r0, [r7, #4]
 8018fdc:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	3304      	adds	r3, #4
 8018fe2:	490a      	ldr	r1, [pc, #40]	; (801900c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	f7f4 f87b 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	3304      	adds	r3, #4
 8018fee:	6839      	ldr	r1, [r7, #0]
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	f7f4 f863 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	3304      	adds	r3, #4
 8018ffa:	4905      	ldr	r1, [pc, #20]	; (8019010 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	f7f4 f86f 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
}
 8019002:	bf00      	nop
 8019004:	3708      	adds	r7, #8
 8019006:	46bd      	mov	sp, r7
 8019008:	bd80      	pop	{r7, pc}
 801900a:	bf00      	nop
 801900c:	08025bb4 	.word	0x08025bb4
 8019010:	08025bb8 	.word	0x08025bb8

08019014 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 8019014:	b590      	push	{r4, r7, lr}
 8019016:	b087      	sub	sp, #28
 8019018:	af00      	add	r7, sp, #0
 801901a:	60f8      	str	r0, [r7, #12]
 801901c:	60b9      	str	r1, [r7, #8]
 801901e:	4613      	mov	r3, r2
 8019020:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 8019022:	68b9      	ldr	r1, [r7, #8]
 8019024:	68f8      	ldr	r0, [r7, #12]
 8019026:	f7ff ffd5 	bl	8018fd4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	1d1c      	adds	r4, r3, #4
 801902e:	f107 0310 	add.w	r3, r7, #16
 8019032:	79fa      	ldrb	r2, [r7, #7]
 8019034:	4611      	mov	r1, r2
 8019036:	4618      	mov	r0, r3
 8019038:	f7f4 fa34 	bl	800d4a4 <_Z10StringFromb>
 801903c:	f107 0310 	add.w	r3, r7, #16
 8019040:	4619      	mov	r1, r3
 8019042:	4620      	mov	r0, r4
 8019044:	f7f4 f83a 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 8019048:	f107 0310 	add.w	r3, r7, #16
 801904c:	4618      	mov	r0, r3
 801904e:	f7f3 ffb8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return *this;
 8019052:	68fb      	ldr	r3, [r7, #12]
}
 8019054:	4618      	mov	r0, r3
 8019056:	371c      	adds	r7, #28
 8019058:	46bd      	mov	sp, r7
 801905a:	bd90      	pop	{r4, r7, pc}

0801905c <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801905c:	b590      	push	{r4, r7, lr}
 801905e:	b08f      	sub	sp, #60	; 0x3c
 8019060:	af00      	add	r7, sp, #0
 8019062:	60f8      	str	r0, [r7, #12]
 8019064:	60b9      	str	r1, [r7, #8]
 8019066:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019068:	68b9      	ldr	r1, [r7, #8]
 801906a:	68f8      	ldr	r0, [r7, #12]
 801906c:	f7ff ffb2 	bl	8018fd4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	1d1c      	adds	r4, r3, #4
 8019074:	f107 0320 	add.w	r3, r7, #32
 8019078:	6879      	ldr	r1, [r7, #4]
 801907a:	4618      	mov	r0, r3
 801907c:	f7f4 fcd0 	bl	800da20 <_Z10StringFromj>
 8019080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019084:	491f      	ldr	r1, [pc, #124]	; (8019104 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 8019086:	4618      	mov	r0, r3
 8019088:	f7f3 fbe3 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801908c:	f107 0318 	add.w	r3, r7, #24
 8019090:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019094:	f107 0120 	add.w	r1, r7, #32
 8019098:	4618      	mov	r0, r3
 801909a:	f7f3 fff4 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 801909e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80190a2:	6879      	ldr	r1, [r7, #4]
 80190a4:	4618      	mov	r0, r3
 80190a6:	f7f4 fb5f 	bl	800d768 <_Z30BracketsFormattedHexStringFromj>
 80190aa:	f107 0310 	add.w	r3, r7, #16
 80190ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80190b2:	f107 0118 	add.w	r1, r7, #24
 80190b6:	4618      	mov	r0, r3
 80190b8:	f7f3 ffe5 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 80190bc:	f107 0310 	add.w	r3, r7, #16
 80190c0:	4619      	mov	r1, r3
 80190c2:	4620      	mov	r0, r4
 80190c4:	f7f3 fffa 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 80190c8:	f107 0310 	add.w	r3, r7, #16
 80190cc:	4618      	mov	r0, r3
 80190ce:	f7f3 ff78 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80190d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80190d6:	4618      	mov	r0, r3
 80190d8:	f7f3 ff73 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80190dc:	f107 0318 	add.w	r3, r7, #24
 80190e0:	4618      	mov	r0, r3
 80190e2:	f7f3 ff6e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80190e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80190ea:	4618      	mov	r0, r3
 80190ec:	f7f3 ff69 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80190f0:	f107 0320 	add.w	r3, r7, #32
 80190f4:	4618      	mov	r0, r3
 80190f6:	f7f3 ff64 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return *this;
 80190fa:	68fb      	ldr	r3, [r7, #12]
}
 80190fc:	4618      	mov	r0, r3
 80190fe:	373c      	adds	r7, #60	; 0x3c
 8019100:	46bd      	mov	sp, r7
 8019102:	bd90      	pop	{r4, r7, pc}
 8019104:	08025bb4 	.word	0x08025bb4

08019108 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 8019108:	b590      	push	{r4, r7, lr}
 801910a:	b08f      	sub	sp, #60	; 0x3c
 801910c:	af00      	add	r7, sp, #0
 801910e:	60f8      	str	r0, [r7, #12]
 8019110:	60b9      	str	r1, [r7, #8]
 8019112:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019114:	68b9      	ldr	r1, [r7, #8]
 8019116:	68f8      	ldr	r0, [r7, #12]
 8019118:	f7ff ff5c 	bl	8018fd4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	1d1c      	adds	r4, r3, #4
 8019120:	f107 0320 	add.w	r3, r7, #32
 8019124:	6879      	ldr	r1, [r7, #4]
 8019126:	4618      	mov	r0, r3
 8019128:	f7f4 fa12 	bl	800d550 <_Z10StringFromi>
 801912c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019130:	491f      	ldr	r1, [pc, #124]	; (80191b0 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 8019132:	4618      	mov	r0, r3
 8019134:	f7f3 fb8d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8019138:	f107 0318 	add.w	r3, r7, #24
 801913c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019140:	f107 0120 	add.w	r1, r7, #32
 8019144:	4618      	mov	r0, r3
 8019146:	f7f3 ff9e 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 801914a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801914e:	6879      	ldr	r1, [r7, #4]
 8019150:	4618      	mov	r0, r3
 8019152:	f7f4 faed 	bl	800d730 <_Z30BracketsFormattedHexStringFromi>
 8019156:	f107 0310 	add.w	r3, r7, #16
 801915a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801915e:	f107 0118 	add.w	r1, r7, #24
 8019162:	4618      	mov	r0, r3
 8019164:	f7f3 ff8f 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 8019168:	f107 0310 	add.w	r3, r7, #16
 801916c:	4619      	mov	r1, r3
 801916e:	4620      	mov	r0, r4
 8019170:	f7f3 ffa4 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 8019174:	f107 0310 	add.w	r3, r7, #16
 8019178:	4618      	mov	r0, r3
 801917a:	f7f3 ff22 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801917e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019182:	4618      	mov	r0, r3
 8019184:	f7f3 ff1d 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8019188:	f107 0318 	add.w	r3, r7, #24
 801918c:	4618      	mov	r0, r3
 801918e:	f7f3 ff18 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8019192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019196:	4618      	mov	r0, r3
 8019198:	f7f3 ff13 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801919c:	f107 0320 	add.w	r3, r7, #32
 80191a0:	4618      	mov	r0, r3
 80191a2:	f7f3 ff0e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return *this;
 80191a6:	68fb      	ldr	r3, [r7, #12]
}
 80191a8:	4618      	mov	r0, r3
 80191aa:	373c      	adds	r7, #60	; 0x3c
 80191ac:	46bd      	mov	sp, r7
 80191ae:	bd90      	pop	{r4, r7, pc}
 80191b0:	08025bb4 	.word	0x08025bb4

080191b4 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 80191b4:	b590      	push	{r4, r7, lr}
 80191b6:	b08f      	sub	sp, #60	; 0x3c
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	60f8      	str	r0, [r7, #12]
 80191bc:	60b9      	str	r1, [r7, #8]
 80191be:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80191c0:	68b9      	ldr	r1, [r7, #8]
 80191c2:	68f8      	ldr	r0, [r7, #12]
 80191c4:	f7ff ff06 	bl	8018fd4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	1d1c      	adds	r4, r3, #4
 80191cc:	f107 0320 	add.w	r3, r7, #32
 80191d0:	6879      	ldr	r1, [r7, #4]
 80191d2:	4618      	mov	r0, r3
 80191d4:	f7f4 fc36 	bl	800da44 <_Z10StringFromm>
 80191d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80191dc:	491f      	ldr	r1, [pc, #124]	; (801925c <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 80191de:	4618      	mov	r0, r3
 80191e0:	f7f3 fb37 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 80191e4:	f107 0318 	add.w	r3, r7, #24
 80191e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80191ec:	f107 0120 	add.w	r1, r7, #32
 80191f0:	4618      	mov	r0, r3
 80191f2:	f7f3 ff48 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 80191f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80191fa:	6879      	ldr	r1, [r7, #4]
 80191fc:	4618      	mov	r0, r3
 80191fe:	f7f4 faeb 	bl	800d7d8 <_Z30BracketsFormattedHexStringFromm>
 8019202:	f107 0310 	add.w	r3, r7, #16
 8019206:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801920a:	f107 0118 	add.w	r1, r7, #24
 801920e:	4618      	mov	r0, r3
 8019210:	f7f3 ff39 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 8019214:	f107 0310 	add.w	r3, r7, #16
 8019218:	4619      	mov	r1, r3
 801921a:	4620      	mov	r0, r4
 801921c:	f7f3 ff4e 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 8019220:	f107 0310 	add.w	r3, r7, #16
 8019224:	4618      	mov	r0, r3
 8019226:	f7f3 fecc 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801922a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801922e:	4618      	mov	r0, r3
 8019230:	f7f3 fec7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8019234:	f107 0318 	add.w	r3, r7, #24
 8019238:	4618      	mov	r0, r3
 801923a:	f7f3 fec2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801923e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019242:	4618      	mov	r0, r3
 8019244:	f7f3 febd 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 8019248:	f107 0320 	add.w	r3, r7, #32
 801924c:	4618      	mov	r0, r3
 801924e:	f7f3 feb8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return *this;
 8019252:	68fb      	ldr	r3, [r7, #12]
}
 8019254:	4618      	mov	r0, r3
 8019256:	373c      	adds	r7, #60	; 0x3c
 8019258:	46bd      	mov	sp, r7
 801925a:	bd90      	pop	{r4, r7, pc}
 801925c:	08025bb4 	.word	0x08025bb4

08019260 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 8019260:	b590      	push	{r4, r7, lr}
 8019262:	b08f      	sub	sp, #60	; 0x3c
 8019264:	af00      	add	r7, sp, #0
 8019266:	60f8      	str	r0, [r7, #12]
 8019268:	60b9      	str	r1, [r7, #8]
 801926a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801926c:	68b9      	ldr	r1, [r7, #8]
 801926e:	68f8      	ldr	r0, [r7, #12]
 8019270:	f7ff feb0 	bl	8018fd4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	1d1c      	adds	r4, r3, #4
 8019278:	f107 0320 	add.w	r3, r7, #32
 801927c:	6879      	ldr	r1, [r7, #4]
 801927e:	4618      	mov	r0, r3
 8019280:	f7f4 f978 	bl	800d574 <_Z10StringFroml>
 8019284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019288:	491f      	ldr	r1, [pc, #124]	; (8019308 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 801928a:	4618      	mov	r0, r3
 801928c:	f7f3 fae1 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8019290:	f107 0318 	add.w	r3, r7, #24
 8019294:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019298:	f107 0120 	add.w	r1, r7, #32
 801929c:	4618      	mov	r0, r3
 801929e:	f7f3 fef2 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 80192a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80192a6:	6879      	ldr	r1, [r7, #4]
 80192a8:	4618      	mov	r0, r3
 80192aa:	f7f4 fa79 	bl	800d7a0 <_Z30BracketsFormattedHexStringFroml>
 80192ae:	f107 0310 	add.w	r3, r7, #16
 80192b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80192b6:	f107 0118 	add.w	r1, r7, #24
 80192ba:	4618      	mov	r0, r3
 80192bc:	f7f3 fee3 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 80192c0:	f107 0310 	add.w	r3, r7, #16
 80192c4:	4619      	mov	r1, r3
 80192c6:	4620      	mov	r0, r4
 80192c8:	f7f3 fef8 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 80192cc:	f107 0310 	add.w	r3, r7, #16
 80192d0:	4618      	mov	r0, r3
 80192d2:	f7f3 fe76 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80192d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80192da:	4618      	mov	r0, r3
 80192dc:	f7f3 fe71 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80192e0:	f107 0318 	add.w	r3, r7, #24
 80192e4:	4618      	mov	r0, r3
 80192e6:	f7f3 fe6c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80192ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80192ee:	4618      	mov	r0, r3
 80192f0:	f7f3 fe67 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 80192f4:	f107 0320 	add.w	r3, r7, #32
 80192f8:	4618      	mov	r0, r3
 80192fa:	f7f3 fe62 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return *this;
 80192fe:	68fb      	ldr	r3, [r7, #12]
}
 8019300:	4618      	mov	r0, r3
 8019302:	373c      	adds	r7, #60	; 0x3c
 8019304:	46bd      	mov	sp, r7
 8019306:	bd90      	pop	{r4, r7, pc}
 8019308:	08025bb4 	.word	0x08025bb4

0801930c <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801930c:	b5b0      	push	{r4, r5, r7, lr}
 801930e:	b086      	sub	sp, #24
 8019310:	af02      	add	r7, sp, #8
 8019312:	60f8      	str	r0, [r7, #12]
 8019314:	60b9      	str	r1, [r7, #8]
 8019316:	4639      	mov	r1, r7
 8019318:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801931c:	f7fa fe7c 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8019320:	4604      	mov	r4, r0
 8019322:	6823      	ldr	r3, [r4, #0]
 8019324:	3368      	adds	r3, #104	; 0x68
 8019326:	681d      	ldr	r5, [r3, #0]
 8019328:	f7fa fe86 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801932c:	4603      	mov	r3, r0
 801932e:	9300      	str	r3, [sp, #0]
 8019330:	f240 23ee 	movw	r3, #750	; 0x2ee
 8019334:	4a04      	ldr	r2, [pc, #16]	; (8019348 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8019336:	4905      	ldr	r1, [pc, #20]	; (801934c <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8019338:	4620      	mov	r0, r4
 801933a:	47a8      	blx	r5
    return *this;
 801933c:	68fb      	ldr	r3, [r7, #12]
}
 801933e:	4618      	mov	r0, r3
 8019340:	3710      	adds	r7, #16
 8019342:	46bd      	mov	sp, r7
 8019344:	bdb0      	pop	{r4, r5, r7, pc}
 8019346:	bf00      	nop
 8019348:	08025aa0 	.word	0x08025aa0
 801934c:	08025abc 	.word	0x08025abc

08019350 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8019350:	b5b0      	push	{r4, r5, r7, lr}
 8019352:	b086      	sub	sp, #24
 8019354:	af02      	add	r7, sp, #8
 8019356:	60f8      	str	r0, [r7, #12]
 8019358:	60b9      	str	r1, [r7, #8]
 801935a:	4639      	mov	r1, r7
 801935c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8019360:	f7fa fe5a 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8019364:	4604      	mov	r4, r0
 8019366:	6823      	ldr	r3, [r4, #0]
 8019368:	3368      	adds	r3, #104	; 0x68
 801936a:	681d      	ldr	r5, [r3, #0]
 801936c:	f7fa fe64 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019370:	4603      	mov	r3, r0
 8019372:	9300      	str	r3, [sp, #0]
 8019374:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8019378:	4a04      	ldr	r2, [pc, #16]	; (801938c <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801937a:	4905      	ldr	r1, [pc, #20]	; (8019390 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 801937c:	4620      	mov	r0, r4
 801937e:	47a8      	blx	r5
    return *this;
 8019380:	68fb      	ldr	r3, [r7, #12]
}
 8019382:	4618      	mov	r0, r3
 8019384:	3710      	adds	r7, #16
 8019386:	46bd      	mov	sp, r7
 8019388:	bdb0      	pop	{r4, r5, r7, pc}
 801938a:	bf00      	nop
 801938c:	08025aa0 	.word	0x08025aa0
 8019390:	08025ae8 	.word	0x08025ae8

08019394 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 8019394:	b590      	push	{r4, r7, lr}
 8019396:	b087      	sub	sp, #28
 8019398:	af00      	add	r7, sp, #0
 801939a:	60f8      	str	r0, [r7, #12]
 801939c:	60b9      	str	r1, [r7, #8]
 801939e:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 80193a2:	68b9      	ldr	r1, [r7, #8]
 80193a4:	68f8      	ldr	r0, [r7, #12]
 80193a6:	f7ff fe15 	bl	8018fd4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	1d1c      	adds	r4, r3, #4
 80193ae:	f107 0310 	add.w	r3, r7, #16
 80193b2:	2106      	movs	r1, #6
 80193b4:	ed97 0b00 	vldr	d0, [r7]
 80193b8:	4618      	mov	r0, r3
 80193ba:	f7f4 fac7 	bl	800d94c <_Z10StringFromdi>
 80193be:	f107 0310 	add.w	r3, r7, #16
 80193c2:	4619      	mov	r1, r3
 80193c4:	4620      	mov	r0, r4
 80193c6:	f7f3 fe79 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 80193ca:	f107 0310 	add.w	r3, r7, #16
 80193ce:	4618      	mov	r0, r3
 80193d0:	f7f3 fdf7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return *this;
 80193d4:	68fb      	ldr	r3, [r7, #12]
}
 80193d6:	4618      	mov	r0, r3
 80193d8:	371c      	adds	r7, #28
 80193da:	46bd      	mov	sp, r7
 80193dc:	bd90      	pop	{r4, r7, pc}

080193de <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 80193de:	b590      	push	{r4, r7, lr}
 80193e0:	b087      	sub	sp, #28
 80193e2:	af00      	add	r7, sp, #0
 80193e4:	60f8      	str	r0, [r7, #12]
 80193e6:	60b9      	str	r1, [r7, #8]
 80193e8:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80193ea:	68b9      	ldr	r1, [r7, #8]
 80193ec:	68f8      	ldr	r0, [r7, #12]
 80193ee:	f7ff fdf1 	bl	8018fd4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	1d1c      	adds	r4, r3, #4
 80193f6:	f107 0310 	add.w	r3, r7, #16
 80193fa:	6879      	ldr	r1, [r7, #4]
 80193fc:	4618      	mov	r0, r3
 80193fe:	f7f4 f86d 	bl	800d4dc <_Z10StringFromPKc>
 8019402:	f107 0310 	add.w	r3, r7, #16
 8019406:	4619      	mov	r1, r3
 8019408:	4620      	mov	r0, r4
 801940a:	f7f3 fe57 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801940e:	f107 0310 	add.w	r3, r7, #16
 8019412:	4618      	mov	r0, r3
 8019414:	f7f3 fdd5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return *this;
 8019418:	68fb      	ldr	r3, [r7, #12]
}
 801941a:	4618      	mov	r0, r3
 801941c:	371c      	adds	r7, #28
 801941e:	46bd      	mov	sp, r7
 8019420:	bd90      	pop	{r4, r7, pc}

08019422 <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 8019422:	b590      	push	{r4, r7, lr}
 8019424:	b087      	sub	sp, #28
 8019426:	af00      	add	r7, sp, #0
 8019428:	60f8      	str	r0, [r7, #12]
 801942a:	60b9      	str	r1, [r7, #8]
 801942c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801942e:	68b9      	ldr	r1, [r7, #8]
 8019430:	68f8      	ldr	r0, [r7, #12]
 8019432:	f7ff fdcf 	bl	8018fd4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	1d1c      	adds	r4, r3, #4
 801943a:	f107 0310 	add.w	r3, r7, #16
 801943e:	6879      	ldr	r1, [r7, #4]
 8019440:	4618      	mov	r0, r3
 8019442:	f7f4 f8a9 	bl	800d598 <_Z10StringFromPKv>
 8019446:	f107 0310 	add.w	r3, r7, #16
 801944a:	4619      	mov	r1, r3
 801944c:	4620      	mov	r0, r4
 801944e:	f7f3 fe35 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 8019452:	f107 0310 	add.w	r3, r7, #16
 8019456:	4618      	mov	r0, r3
 8019458:	f7f3 fdb3 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return *this;
 801945c:	68fb      	ldr	r3, [r7, #12]
}
 801945e:	4618      	mov	r0, r3
 8019460:	371c      	adds	r7, #28
 8019462:	46bd      	mov	sp, r7
 8019464:	bd90      	pop	{r4, r7, pc}

08019466 <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8019466:	b590      	push	{r4, r7, lr}
 8019468:	b087      	sub	sp, #28
 801946a:	af00      	add	r7, sp, #0
 801946c:	60f8      	str	r0, [r7, #12]
 801946e:	60b9      	str	r1, [r7, #8]
 8019470:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019472:	68b9      	ldr	r1, [r7, #8]
 8019474:	68f8      	ldr	r0, [r7, #12]
 8019476:	f7ff fdad 	bl	8018fd4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	1d1c      	adds	r4, r3, #4
 801947e:	f107 0310 	add.w	r3, r7, #16
 8019482:	6879      	ldr	r1, [r7, #4]
 8019484:	4618      	mov	r0, r3
 8019486:	f7f4 f887 	bl	800d598 <_Z10StringFromPKv>
 801948a:	f107 0310 	add.w	r3, r7, #16
 801948e:	4619      	mov	r1, r3
 8019490:	4620      	mov	r0, r4
 8019492:	f7f3 fe13 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 8019496:	f107 0310 	add.w	r3, r7, #16
 801949a:	4618      	mov	r0, r3
 801949c:	f7f3 fd91 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return *this;
 80194a0:	68fb      	ldr	r3, [r7, #12]
}
 80194a2:	4618      	mov	r0, r3
 80194a4:	371c      	adds	r7, #28
 80194a6:	46bd      	mov	sp, r7
 80194a8:	bd90      	pop	{r4, r7, pc}

080194aa <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 80194aa:	b590      	push	{r4, r7, lr}
 80194ac:	b087      	sub	sp, #28
 80194ae:	af00      	add	r7, sp, #0
 80194b0:	60f8      	str	r0, [r7, #12]
 80194b2:	60b9      	str	r1, [r7, #8]
 80194b4:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80194b6:	68b9      	ldr	r1, [r7, #8]
 80194b8:	68f8      	ldr	r0, [r7, #12]
 80194ba:	f7ff fd8b 	bl	8018fd4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	1d1c      	adds	r4, r3, #4
 80194c2:	f107 0310 	add.w	r3, r7, #16
 80194c6:	6879      	ldr	r1, [r7, #4]
 80194c8:	4618      	mov	r0, r3
 80194ca:	f7f4 f88f 	bl	800d5ec <_Z10StringFromPFvvE>
 80194ce:	f107 0310 	add.w	r3, r7, #16
 80194d2:	4619      	mov	r1, r3
 80194d4:	4620      	mov	r0, r4
 80194d6:	f7f3 fdf1 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 80194da:	f107 0310 	add.w	r3, r7, #16
 80194de:	4618      	mov	r0, r3
 80194e0:	f7f3 fd6f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return *this;
 80194e4:	68fb      	ldr	r3, [r7, #12]
}
 80194e6:	4618      	mov	r0, r3
 80194e8:	371c      	adds	r7, #28
 80194ea:	46bd      	mov	sp, r7
 80194ec:	bd90      	pop	{r4, r7, pc}

080194ee <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 80194ee:	b590      	push	{r4, r7, lr}
 80194f0:	b087      	sub	sp, #28
 80194f2:	af00      	add	r7, sp, #0
 80194f4:	60f8      	str	r0, [r7, #12]
 80194f6:	60b9      	str	r1, [r7, #8]
 80194f8:	607a      	str	r2, [r7, #4]
 80194fa:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 80194fc:	68b9      	ldr	r1, [r7, #8]
 80194fe:	68f8      	ldr	r0, [r7, #12]
 8019500:	f7ff fd68 	bl	8018fd4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 8019504:	68fb      	ldr	r3, [r7, #12]
 8019506:	1d1c      	adds	r4, r3, #4
 8019508:	f107 0310 	add.w	r3, r7, #16
 801950c:	683a      	ldr	r2, [r7, #0]
 801950e:	6879      	ldr	r1, [r7, #4]
 8019510:	4618      	mov	r0, r3
 8019512:	f7f4 fbaf 	bl	800dc74 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 8019516:	f107 0310 	add.w	r3, r7, #16
 801951a:	4619      	mov	r1, r3
 801951c:	4620      	mov	r0, r4
 801951e:	f7f3 fdcd 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 8019522:	f107 0310 	add.w	r3, r7, #16
 8019526:	4618      	mov	r0, r3
 8019528:	f7f3 fd4b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return *this;
 801952c:	68fb      	ldr	r3, [r7, #12]
}
 801952e:	4618      	mov	r0, r3
 8019530:	371c      	adds	r7, #28
 8019532:	46bd      	mov	sp, r7
 8019534:	bd90      	pop	{r4, r7, pc}
	...

08019538 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 8019538:	b590      	push	{r4, r7, lr}
 801953a:	b087      	sub	sp, #28
 801953c:	af00      	add	r7, sp, #0
 801953e:	60f8      	str	r0, [r7, #12]
 8019540:	60b9      	str	r1, [r7, #8]
 8019542:	607a      	str	r2, [r7, #4]
 8019544:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	3304      	adds	r3, #4
 801954a:	4913      	ldr	r1, [pc, #76]	; (8019598 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 801954c:	4618      	mov	r0, r3
 801954e:	f7f3 fdc7 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8019552:	68fb      	ldr	r3, [r7, #12]
 8019554:	3304      	adds	r3, #4
 8019556:	68b9      	ldr	r1, [r7, #8]
 8019558:	4618      	mov	r0, r3
 801955a:	f7f3 fdaf 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801955e:	6879      	ldr	r1, [r7, #4]
 8019560:	68f8      	ldr	r0, [r7, #12]
 8019562:	f7ff fd37 	bl	8018fd4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	1d1c      	adds	r4, r3, #4
 801956a:	f107 0310 	add.w	r3, r7, #16
 801956e:	6839      	ldr	r1, [r7, #0]
 8019570:	4618      	mov	r0, r3
 8019572:	f7f4 f811 	bl	800d598 <_Z10StringFromPKv>
 8019576:	f107 0310 	add.w	r3, r7, #16
 801957a:	4619      	mov	r1, r3
 801957c:	4620      	mov	r0, r4
 801957e:	f7f3 fd9d 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 8019582:	f107 0310 	add.w	r3, r7, #16
 8019586:	4618      	mov	r0, r3
 8019588:	f7f3 fd1b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return *this;
 801958c:	68fb      	ldr	r3, [r7, #12]
}
 801958e:	4618      	mov	r0, r3
 8019590:	371c      	adds	r7, #28
 8019592:	46bd      	mov	sp, r7
 8019594:	bd90      	pop	{r4, r7, pc}
 8019596:	bf00      	nop
 8019598:	08025bb4 	.word	0x08025bb4

0801959c <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 801959c:	b590      	push	{r4, r7, lr}
 801959e:	b087      	sub	sp, #28
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	60f8      	str	r0, [r7, #12]
 80195a4:	60b9      	str	r1, [r7, #8]
 80195a6:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80195a8:	68b9      	ldr	r1, [r7, #8]
 80195aa:	68f8      	ldr	r0, [r7, #12]
 80195ac:	f7ff fd12 	bl	8018fd4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	1d1c      	adds	r4, r3, #4
 80195b4:	f107 0310 	add.w	r3, r7, #16
 80195b8:	6879      	ldr	r1, [r7, #4]
 80195ba:	4618      	mov	r0, r3
 80195bc:	f7f3 ffec 	bl	800d598 <_Z10StringFromPKv>
 80195c0:	f107 0310 	add.w	r3, r7, #16
 80195c4:	4619      	mov	r1, r3
 80195c6:	4620      	mov	r0, r4
 80195c8:	f7f3 fd78 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 80195cc:	f107 0310 	add.w	r3, r7, #16
 80195d0:	4618      	mov	r0, r3
 80195d2:	f7f3 fcf6 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return *this;
 80195d6:	68fb      	ldr	r3, [r7, #12]
}
 80195d8:	4618      	mov	r0, r3
 80195da:	371c      	adds	r7, #28
 80195dc:	46bd      	mov	sp, r7
 80195de:	bd90      	pop	{r4, r7, pc}

080195e0 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 80195e0:	b590      	push	{r4, r7, lr}
 80195e2:	b087      	sub	sp, #28
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	60f8      	str	r0, [r7, #12]
 80195e8:	60b9      	str	r1, [r7, #8]
 80195ea:	607a      	str	r2, [r7, #4]
 80195ec:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	3304      	adds	r3, #4
 80195f2:	4913      	ldr	r1, [pc, #76]	; (8019640 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 80195f4:	4618      	mov	r0, r3
 80195f6:	f7f3 fd73 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 80195fa:	68fb      	ldr	r3, [r7, #12]
 80195fc:	3304      	adds	r3, #4
 80195fe:	68b9      	ldr	r1, [r7, #8]
 8019600:	4618      	mov	r0, r3
 8019602:	f7f3 fd5b 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8019606:	6879      	ldr	r1, [r7, #4]
 8019608:	68f8      	ldr	r0, [r7, #12]
 801960a:	f7ff fce3 	bl	8018fd4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	1d1c      	adds	r4, r3, #4
 8019612:	f107 0310 	add.w	r3, r7, #16
 8019616:	6839      	ldr	r1, [r7, #0]
 8019618:	4618      	mov	r0, r3
 801961a:	f7f3 ffbd 	bl	800d598 <_Z10StringFromPKv>
 801961e:	f107 0310 	add.w	r3, r7, #16
 8019622:	4619      	mov	r1, r3
 8019624:	4620      	mov	r0, r4
 8019626:	f7f3 fd49 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801962a:	f107 0310 	add.w	r3, r7, #16
 801962e:	4618      	mov	r0, r3
 8019630:	f7f3 fcc7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return *this;
 8019634:	68fb      	ldr	r3, [r7, #12]
}
 8019636:	4618      	mov	r0, r3
 8019638:	371c      	adds	r7, #28
 801963a:	46bd      	mov	sp, r7
 801963c:	bd90      	pop	{r4, r7, pc}
 801963e:	bf00      	nop
 8019640:	08025bb4 	.word	0x08025bb4

08019644 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 8019644:	b480      	push	{r7}
 8019646:	b083      	sub	sp, #12
 8019648:	af00      	add	r7, sp, #0
 801964a:	6078      	str	r0, [r7, #4]
    return false;
 801964c:	2300      	movs	r3, #0
}
 801964e:	4618      	mov	r0, r3
 8019650:	370c      	adds	r7, #12
 8019652:	46bd      	mov	sp, r7
 8019654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019658:	4770      	bx	lr
	...

0801965c <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 801965c:	b580      	push	{r7, lr}
 801965e:	b084      	sub	sp, #16
 8019660:	af00      	add	r7, sp, #0
 8019662:	6078      	str	r0, [r7, #4]
 8019664:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 8019666:	f107 0308 	add.w	r3, r7, #8
 801966a:	4909      	ldr	r1, [pc, #36]	; (8019690 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 801966c:	4618      	mov	r0, r3
 801966e:	f7f3 f8f0 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 8019672:	f107 0308 	add.w	r3, r7, #8
 8019676:	4619      	mov	r1, r3
 8019678:	6878      	ldr	r0, [r7, #4]
 801967a:	f003 fe0f 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
 801967e:	f107 0308 	add.w	r3, r7, #8
 8019682:	4618      	mov	r0, r3
 8019684:	f7f3 fc9d 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 8019688:	6878      	ldr	r0, [r7, #4]
 801968a:	3710      	adds	r7, #16
 801968c:	46bd      	mov	sp, r7
 801968e:	bd80      	pop	{r7, pc}
 8019690:	08025a88 	.word	0x08025a88

08019694 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 8019694:	b480      	push	{r7}
 8019696:	b083      	sub	sp, #12
 8019698:	af00      	add	r7, sp, #0
 801969a:	6078      	str	r0, [r7, #4]
    return 0;
 801969c:	2300      	movs	r3, #0
}
 801969e:	4618      	mov	r0, r3
 80196a0:	370c      	adds	r7, #12
 80196a2:	46bd      	mov	sp, r7
 80196a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196a8:	4770      	bx	lr

080196aa <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 80196aa:	b480      	push	{r7}
 80196ac:	b083      	sub	sp, #12
 80196ae:	af00      	add	r7, sp, #0
 80196b0:	6078      	str	r0, [r7, #4]
    return 0;
 80196b2:	2300      	movs	r3, #0
}
 80196b4:	4618      	mov	r0, r3
 80196b6:	370c      	adds	r7, #12
 80196b8:	46bd      	mov	sp, r7
 80196ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196be:	4770      	bx	lr

080196c0 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 80196c0:	b480      	push	{r7}
 80196c2:	b083      	sub	sp, #12
 80196c4:	af00      	add	r7, sp, #0
 80196c6:	6078      	str	r0, [r7, #4]
 80196c8:	6039      	str	r1, [r7, #0]
    return 0;
 80196ca:	2300      	movs	r3, #0
}
 80196cc:	4618      	mov	r0, r3
 80196ce:	370c      	adds	r7, #12
 80196d0:	46bd      	mov	sp, r7
 80196d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196d6:	4770      	bx	lr

080196d8 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 80196d8:	b480      	push	{r7}
 80196da:	b083      	sub	sp, #12
 80196dc:	af00      	add	r7, sp, #0
 80196de:	6078      	str	r0, [r7, #4]
 80196e0:	6039      	str	r1, [r7, #0]
    return 0;
 80196e2:	2300      	movs	r3, #0
}
 80196e4:	4618      	mov	r0, r3
 80196e6:	370c      	adds	r7, #12
 80196e8:	46bd      	mov	sp, r7
 80196ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ee:	4770      	bx	lr

080196f0 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 80196f0:	b5b0      	push	{r4, r5, r7, lr}
 80196f2:	b084      	sub	sp, #16
 80196f4:	af02      	add	r7, sp, #8
 80196f6:	6078      	str	r0, [r7, #4]
 80196f8:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 80196fa:	f7fa fc8d 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 80196fe:	4604      	mov	r4, r0
 8019700:	6823      	ldr	r3, [r4, #0]
 8019702:	3368      	adds	r3, #104	; 0x68
 8019704:	681d      	ldr	r5, [r3, #0]
 8019706:	f7fa fc97 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801970a:	4603      	mov	r3, r0
 801970c:	9300      	str	r3, [sp, #0]
 801970e:	f240 3375 	movw	r3, #885	; 0x375
 8019712:	4a06      	ldr	r2, [pc, #24]	; (801972c <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 8019714:	4906      	ldr	r1, [pc, #24]	; (8019730 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 8019716:	4620      	mov	r0, r4
 8019718:	47a8      	blx	r5
    return cpputest_longlong(0);
 801971a:	2100      	movs	r1, #0
 801971c:	6878      	ldr	r0, [r7, #4]
 801971e:	f7f1 f8cf 	bl	800a8c0 <_ZN17cpputest_longlongC1Ei>
}
 8019722:	6878      	ldr	r0, [r7, #4]
 8019724:	3708      	adds	r7, #8
 8019726:	46bd      	mov	sp, r7
 8019728:	bdb0      	pop	{r4, r5, r7, pc}
 801972a:	bf00      	nop
 801972c:	08025aa0 	.word	0x08025aa0
 8019730:	08025ae8 	.word	0x08025ae8

08019734 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 8019734:	b5b0      	push	{r4, r5, r7, lr}
 8019736:	b084      	sub	sp, #16
 8019738:	af02      	add	r7, sp, #8
 801973a:	6078      	str	r0, [r7, #4]
 801973c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801973e:	f7fa fc6b 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 8019742:	4604      	mov	r4, r0
 8019744:	6823      	ldr	r3, [r4, #0]
 8019746:	3368      	adds	r3, #104	; 0x68
 8019748:	681d      	ldr	r5, [r3, #0]
 801974a:	f7fa fc75 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801974e:	4603      	mov	r3, r0
 8019750:	9300      	str	r3, [sp, #0]
 8019752:	f240 337b 	movw	r3, #891	; 0x37b
 8019756:	4a06      	ldr	r2, [pc, #24]	; (8019770 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 8019758:	4906      	ldr	r1, [pc, #24]	; (8019774 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 801975a:	4620      	mov	r0, r4
 801975c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801975e:	2100      	movs	r1, #0
 8019760:	6878      	ldr	r0, [r7, #4]
 8019762:	f7f1 f8b9 	bl	800a8d8 <_ZN18cpputest_ulonglongC1Ei>
}
 8019766:	6878      	ldr	r0, [r7, #4]
 8019768:	3708      	adds	r7, #8
 801976a:	46bd      	mov	sp, r7
 801976c:	bdb0      	pop	{r4, r5, r7, pc}
 801976e:	bf00      	nop
 8019770:	08025aa0 	.word	0x08025aa0
 8019774:	08025abc 	.word	0x08025abc

08019778 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 8019778:	b5b0      	push	{r4, r5, r7, lr}
 801977a:	b086      	sub	sp, #24
 801977c:	af02      	add	r7, sp, #8
 801977e:	60f8      	str	r0, [r7, #12]
 8019780:	60b9      	str	r1, [r7, #8]
 8019782:	4639      	mov	r1, r7
 8019784:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8019788:	f7fa fc46 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801978c:	4604      	mov	r4, r0
 801978e:	6823      	ldr	r3, [r4, #0]
 8019790:	3368      	adds	r3, #104	; 0x68
 8019792:	681d      	ldr	r5, [r3, #0]
 8019794:	f7fa fc50 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019798:	4603      	mov	r3, r0
 801979a:	9300      	str	r3, [sp, #0]
 801979c:	f240 3381 	movw	r3, #897	; 0x381
 80197a0:	4a05      	ldr	r2, [pc, #20]	; (80197b8 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 80197a2:	4906      	ldr	r1, [pc, #24]	; (80197bc <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 80197a4:	4620      	mov	r0, r4
 80197a6:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 80197a8:	2100      	movs	r1, #0
 80197aa:	68f8      	ldr	r0, [r7, #12]
 80197ac:	f7f1 f894 	bl	800a8d8 <_ZN18cpputest_ulonglongC1Ei>
}
 80197b0:	68f8      	ldr	r0, [r7, #12]
 80197b2:	3710      	adds	r7, #16
 80197b4:	46bd      	mov	sp, r7
 80197b6:	bdb0      	pop	{r4, r5, r7, pc}
 80197b8:	08025aa0 	.word	0x08025aa0
 80197bc:	08025abc 	.word	0x08025abc

080197c0 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 80197c0:	b5b0      	push	{r4, r5, r7, lr}
 80197c2:	b086      	sub	sp, #24
 80197c4:	af02      	add	r7, sp, #8
 80197c6:	60f8      	str	r0, [r7, #12]
 80197c8:	60b9      	str	r1, [r7, #8]
 80197ca:	4639      	mov	r1, r7
 80197cc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80197d0:	f7fa fc22 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 80197d4:	4604      	mov	r4, r0
 80197d6:	6823      	ldr	r3, [r4, #0]
 80197d8:	3368      	adds	r3, #104	; 0x68
 80197da:	681d      	ldr	r5, [r3, #0]
 80197dc:	f7fa fc2c 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80197e0:	4603      	mov	r3, r0
 80197e2:	9300      	str	r3, [sp, #0]
 80197e4:	f240 3387 	movw	r3, #903	; 0x387
 80197e8:	4a05      	ldr	r2, [pc, #20]	; (8019800 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 80197ea:	4906      	ldr	r1, [pc, #24]	; (8019804 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 80197ec:	4620      	mov	r0, r4
 80197ee:	47a8      	blx	r5
    return cpputest_longlong(0);
 80197f0:	2100      	movs	r1, #0
 80197f2:	68f8      	ldr	r0, [r7, #12]
 80197f4:	f7f1 f864 	bl	800a8c0 <_ZN17cpputest_longlongC1Ei>
}
 80197f8:	68f8      	ldr	r0, [r7, #12]
 80197fa:	3710      	adds	r7, #16
 80197fc:	46bd      	mov	sp, r7
 80197fe:	bdb0      	pop	{r4, r5, r7, pc}
 8019800:	08025aa0 	.word	0x08025aa0
 8019804:	08025ae8 	.word	0x08025ae8

08019808 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 8019808:	b480      	push	{r7}
 801980a:	b083      	sub	sp, #12
 801980c:	af00      	add	r7, sp, #0
 801980e:	6078      	str	r0, [r7, #4]
    return false;
 8019810:	2300      	movs	r3, #0
}
 8019812:	4618      	mov	r0, r3
 8019814:	370c      	adds	r7, #12
 8019816:	46bd      	mov	sp, r7
 8019818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801981c:	4770      	bx	lr

0801981e <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 801981e:	b480      	push	{r7}
 8019820:	b083      	sub	sp, #12
 8019822:	af00      	add	r7, sp, #0
 8019824:	6078      	str	r0, [r7, #4]
 8019826:	460b      	mov	r3, r1
 8019828:	70fb      	strb	r3, [r7, #3]
    return false;
 801982a:	2300      	movs	r3, #0
}
 801982c:	4618      	mov	r0, r3
 801982e:	370c      	adds	r7, #12
 8019830:	46bd      	mov	sp, r7
 8019832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019836:	4770      	bx	lr

08019838 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 8019838:	b480      	push	{r7}
 801983a:	b083      	sub	sp, #12
 801983c:	af00      	add	r7, sp, #0
 801983e:	6078      	str	r0, [r7, #4]
    return 0;
 8019840:	2300      	movs	r3, #0
}
 8019842:	4618      	mov	r0, r3
 8019844:	370c      	adds	r7, #12
 8019846:	46bd      	mov	sp, r7
 8019848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801984c:	4770      	bx	lr

0801984e <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 801984e:	b480      	push	{r7}
 8019850:	b083      	sub	sp, #12
 8019852:	af00      	add	r7, sp, #0
 8019854:	6078      	str	r0, [r7, #4]
    return 0.0;
 8019856:	f04f 0200 	mov.w	r2, #0
 801985a:	f04f 0300 	mov.w	r3, #0
 801985e:	ec43 2b17 	vmov	d7, r2, r3
}
 8019862:	eeb0 0a47 	vmov.f32	s0, s14
 8019866:	eef0 0a67 	vmov.f32	s1, s15
 801986a:	370c      	adds	r7, #12
 801986c:	46bd      	mov	sp, r7
 801986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019872:	4770      	bx	lr

08019874 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 8019874:	b580      	push	{r7, lr}
 8019876:	b084      	sub	sp, #16
 8019878:	af00      	add	r7, sp, #0
 801987a:	60f8      	str	r0, [r7, #12]
 801987c:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	681b      	ldr	r3, [r3, #0]
 8019884:	3398      	adds	r3, #152	; 0x98
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	68f8      	ldr	r0, [r7, #12]
 801988a:	4798      	blx	r3
 801988c:	eeb0 7a40 	vmov.f32	s14, s0
 8019890:	eef0 7a60 	vmov.f32	s15, s1
}
 8019894:	eeb0 0a47 	vmov.f32	s0, s14
 8019898:	eef0 0a67 	vmov.f32	s1, s15
 801989c:	3710      	adds	r7, #16
 801989e:	46bd      	mov	sp, r7
 80198a0:	bd80      	pop	{r7, pc}

080198a2 <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 80198a2:	b480      	push	{r7}
 80198a4:	b083      	sub	sp, #12
 80198a6:	af00      	add	r7, sp, #0
 80198a8:	6078      	str	r0, [r7, #4]
    return 0;
 80198aa:	2300      	movs	r3, #0
}
 80198ac:	4618      	mov	r0, r3
 80198ae:	370c      	adds	r7, #12
 80198b0:	46bd      	mov	sp, r7
 80198b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198b6:	4770      	bx	lr

080198b8 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 80198b8:	b480      	push	{r7}
 80198ba:	b083      	sub	sp, #12
 80198bc:	af00      	add	r7, sp, #0
 80198be:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 80198c0:	2300      	movs	r3, #0
}
 80198c2:	4618      	mov	r0, r3
 80198c4:	370c      	adds	r7, #12
 80198c6:	46bd      	mov	sp, r7
 80198c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198cc:	4770      	bx	lr

080198ce <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 80198ce:	b480      	push	{r7}
 80198d0:	b083      	sub	sp, #12
 80198d2:	af00      	add	r7, sp, #0
 80198d4:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 80198d6:	2300      	movs	r3, #0
}
 80198d8:	4618      	mov	r0, r3
 80198da:	370c      	adds	r7, #12
 80198dc:	46bd      	mov	sp, r7
 80198de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198e2:	4770      	bx	lr

080198e4 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 80198e4:	b480      	push	{r7}
 80198e6:	b083      	sub	sp, #12
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 80198ec:	2300      	movs	r3, #0
}
 80198ee:	4618      	mov	r0, r3
 80198f0:	370c      	adds	r7, #12
 80198f2:	46bd      	mov	sp, r7
 80198f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198f8:	4770      	bx	lr

080198fa <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 80198fa:	b580      	push	{r7, lr}
 80198fc:	b082      	sub	sp, #8
 80198fe:	af00      	add	r7, sp, #0
 8019900:	6078      	str	r0, [r7, #4]
 8019902:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	33a8      	adds	r3, #168	; 0xa8
 801990a:	681b      	ldr	r3, [r3, #0]
 801990c:	6878      	ldr	r0, [r7, #4]
 801990e:	4798      	blx	r3
 8019910:	4603      	mov	r3, r0
}
 8019912:	4618      	mov	r0, r3
 8019914:	3708      	adds	r7, #8
 8019916:	46bd      	mov	sp, r7
 8019918:	bd80      	pop	{r7, pc}

0801991a <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 801991a:	b580      	push	{r7, lr}
 801991c:	b082      	sub	sp, #8
 801991e:	af00      	add	r7, sp, #0
 8019920:	6078      	str	r0, [r7, #4]
 8019922:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	33a0      	adds	r3, #160	; 0xa0
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	6878      	ldr	r0, [r7, #4]
 801992e:	4798      	blx	r3
 8019930:	4603      	mov	r3, r0
}
 8019932:	4618      	mov	r0, r3
 8019934:	3708      	adds	r7, #8
 8019936:	46bd      	mov	sp, r7
 8019938:	bd80      	pop	{r7, pc}

0801993a <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 801993a:	b580      	push	{r7, lr}
 801993c:	b082      	sub	sp, #8
 801993e:	af00      	add	r7, sp, #0
 8019940:	6078      	str	r0, [r7, #4]
 8019942:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	33b0      	adds	r3, #176	; 0xb0
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	6878      	ldr	r0, [r7, #4]
 801994e:	4798      	blx	r3
 8019950:	4603      	mov	r3, r0
}
 8019952:	4618      	mov	r0, r3
 8019954:	3708      	adds	r7, #8
 8019956:	46bd      	mov	sp, r7
 8019958:	bd80      	pop	{r7, pc}
	...

0801995c <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 801995c:	b480      	push	{r7}
 801995e:	b083      	sub	sp, #12
 8019960:	af00      	add	r7, sp, #0
 8019962:	6078      	str	r0, [r7, #4]
    return "";
 8019964:	4b03      	ldr	r3, [pc, #12]	; (8019974 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 8019966:	4618      	mov	r0, r3
 8019968:	370c      	adds	r7, #12
 801996a:	46bd      	mov	sp, r7
 801996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019970:	4770      	bx	lr
 8019972:	bf00      	nop
 8019974:	08025a88 	.word	0x08025a88

08019978 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 8019978:	b580      	push	{r7, lr}
 801997a:	b082      	sub	sp, #8
 801997c:	af00      	add	r7, sp, #0
 801997e:	6078      	str	r0, [r7, #4]
 8019980:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	3394      	adds	r3, #148	; 0x94
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	6878      	ldr	r0, [r7, #4]
 801998c:	4798      	blx	r3
 801998e:	4603      	mov	r3, r0
}
 8019990:	4618      	mov	r0, r3
 8019992:	3708      	adds	r7, #8
 8019994:	46bd      	mov	sp, r7
 8019996:	bd80      	pop	{r7, pc}

08019998 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 8019998:	b480      	push	{r7}
 801999a:	b083      	sub	sp, #12
 801999c:	af00      	add	r7, sp, #0
 801999e:	6078      	str	r0, [r7, #4]
 80199a0:	6039      	str	r1, [r7, #0]
    return 0;
 80199a2:	2300      	movs	r3, #0
}
 80199a4:	4618      	mov	r0, r3
 80199a6:	370c      	adds	r7, #12
 80199a8:	46bd      	mov	sp, r7
 80199aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ae:	4770      	bx	lr

080199b0 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 80199b0:	b580      	push	{r7, lr}
 80199b2:	b082      	sub	sp, #8
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	6078      	str	r0, [r7, #4]
 80199b8:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	3388      	adds	r3, #136	; 0x88
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	6878      	ldr	r0, [r7, #4]
 80199c4:	4798      	blx	r3
 80199c6:	4603      	mov	r3, r0
}
 80199c8:	4618      	mov	r0, r3
 80199ca:	3708      	adds	r7, #8
 80199cc:	46bd      	mov	sp, r7
 80199ce:	bd80      	pop	{r7, pc}

080199d0 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 80199d0:	b590      	push	{r4, r7, lr}
 80199d2:	b085      	sub	sp, #20
 80199d4:	af00      	add	r7, sp, #0
 80199d6:	6078      	str	r0, [r7, #4]
 80199d8:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	3304      	adds	r3, #4
 80199de:	490e      	ldr	r1, [pc, #56]	; (8019a18 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 80199e0:	4618      	mov	r0, r3
 80199e2:	f7f3 fb7d 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	1d1c      	adds	r4, r3, #4
 80199ea:	f107 0308 	add.w	r3, r7, #8
 80199ee:	6839      	ldr	r1, [r7, #0]
 80199f0:	4618      	mov	r0, r3
 80199f2:	f7f3 fdd1 	bl	800d598 <_Z10StringFromPKv>
 80199f6:	f107 0308 	add.w	r3, r7, #8
 80199fa:	4619      	mov	r1, r3
 80199fc:	4620      	mov	r0, r4
 80199fe:	f7f3 fb5d 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 8019a02:	f107 0308 	add.w	r3, r7, #8
 8019a06:	4618      	mov	r0, r3
 8019a08:	f7f3 fadb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return *this;
 8019a0c:	687b      	ldr	r3, [r7, #4]
}
 8019a0e:	4618      	mov	r0, r3
 8019a10:	3714      	adds	r7, #20
 8019a12:	46bd      	mov	sp, r7
 8019a14:	bd90      	pop	{r4, r7, pc}
 8019a16:	bf00      	nop
 8019a18:	08025bbc 	.word	0x08025bbc

08019a1c <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 8019a1c:	b598      	push	{r3, r4, r7, lr}
 8019a1e:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 8019a20:	4b09      	ldr	r3, [pc, #36]	; (8019a48 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d10b      	bne.n	8019a40 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 8019a28:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8019a2c:	4907      	ldr	r1, [pc, #28]	; (8019a4c <_ZN19MockActualCallTrace8instanceEv+0x30>)
 8019a2e:	200c      	movs	r0, #12
 8019a30:	f7f0 fb4c 	bl	800a0cc <_ZnwjPKci>
 8019a34:	4604      	mov	r4, r0
 8019a36:	4620      	mov	r0, r4
 8019a38:	f7ff fa4c 	bl	8018ed4 <_ZN19MockActualCallTraceC1Ev>
 8019a3c:	4b02      	ldr	r3, [pc, #8]	; (8019a48 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019a3e:	601c      	str	r4, [r3, #0]
    return *instance_;
 8019a40:	4b01      	ldr	r3, [pc, #4]	; (8019a48 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019a42:	681b      	ldr	r3, [r3, #0]
}
 8019a44:	4618      	mov	r0, r3
 8019a46:	bd98      	pop	{r3, r4, r7, pc}
 8019a48:	20000e6c 	.word	0x20000e6c
 8019a4c:	08025aa0 	.word	0x08025aa0

08019a50 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	af00      	add	r7, sp, #0
    delete instance_;
 8019a54:	4b06      	ldr	r3, [pc, #24]	; (8019a70 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8019a56:	681b      	ldr	r3, [r3, #0]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d004      	beq.n	8019a66 <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 8019a5c:	681a      	ldr	r2, [r3, #0]
 8019a5e:	3204      	adds	r2, #4
 8019a60:	6812      	ldr	r2, [r2, #0]
 8019a62:	4618      	mov	r0, r3
 8019a64:	4790      	blx	r2
    instance_ = NULLPTR;
 8019a66:	4b02      	ldr	r3, [pc, #8]	; (8019a70 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8019a68:	2200      	movs	r2, #0
 8019a6a:	601a      	str	r2, [r3, #0]
}
 8019a6c:	bf00      	nop
 8019a6e:	bd80      	pop	{r7, pc}
 8019a70:	20000e6c 	.word	0x20000e6c

08019a74 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 8019a74:	b580      	push	{r7, lr}
 8019a76:	b082      	sub	sp, #8
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	6078      	str	r0, [r7, #4]
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	4618      	mov	r0, r3
 8019a80:	f7fd fe9a 	bl	80177b8 <_ZN14MockActualCallC1Ev>
 8019a84:	4a03      	ldr	r2, [pc, #12]	; (8019a94 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	601a      	str	r2, [r3, #0]
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	3708      	adds	r7, #8
 8019a90:	46bd      	mov	sp, r7
 8019a92:	bd80      	pop	{r7, pc}
 8019a94:	08028670 	.word	0x08028670

08019a98 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 8019a98:	b580      	push	{r7, lr}
 8019a9a:	af00      	add	r7, sp, #0
 8019a9c:	4801      	ldr	r0, [pc, #4]	; (8019aa4 <__tcf_0+0xc>)
 8019a9e:	f000 f831 	bl	8019b04 <_ZN21MockIgnoredActualCallD1Ev>
 8019aa2:	bd80      	pop	{r7, pc}
 8019aa4:	20000e70 	.word	0x20000e70

08019aa8 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 8019aa8:	b580      	push	{r7, lr}
 8019aaa:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 8019aac:	4b12      	ldr	r3, [pc, #72]	; (8019af8 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8019aae:	781b      	ldrb	r3, [r3, #0]
 8019ab0:	f3bf 8f5b 	dmb	ish
 8019ab4:	b2db      	uxtb	r3, r3
 8019ab6:	f003 0301 	and.w	r3, r3, #1
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	bf0c      	ite	eq
 8019abe:	2301      	moveq	r3, #1
 8019ac0:	2300      	movne	r3, #0
 8019ac2:	b2db      	uxtb	r3, r3
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d013      	beq.n	8019af0 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8019ac8:	480b      	ldr	r0, [pc, #44]	; (8019af8 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8019aca:	f005 fd81 	bl	801f5d0 <__cxa_guard_acquire>
 8019ace:	4603      	mov	r3, r0
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	bf14      	ite	ne
 8019ad4:	2301      	movne	r3, #1
 8019ad6:	2300      	moveq	r3, #0
 8019ad8:	b2db      	uxtb	r3, r3
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d008      	beq.n	8019af0 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8019ade:	4807      	ldr	r0, [pc, #28]	; (8019afc <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 8019ae0:	f7ff ffc8 	bl	8019a74 <_ZN21MockIgnoredActualCallC1Ev>
 8019ae4:	4804      	ldr	r0, [pc, #16]	; (8019af8 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8019ae6:	f005 fd7f 	bl	801f5e8 <__cxa_guard_release>
 8019aea:	4805      	ldr	r0, [pc, #20]	; (8019b00 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 8019aec:	f005 fda3 	bl	801f636 <atexit>
    return call;
 8019af0:	4b02      	ldr	r3, [pc, #8]	; (8019afc <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 8019af2:	4618      	mov	r0, r3
 8019af4:	bd80      	pop	{r7, pc}
 8019af6:	bf00      	nop
 8019af8:	20000e74 	.word	0x20000e74
 8019afc:	20000e70 	.word	0x20000e70
 8019b00:	08019a99 	.word	0x08019a99

08019b04 <_ZN21MockIgnoredActualCallD1Ev>:
 8019b04:	b580      	push	{r7, lr}
 8019b06:	b082      	sub	sp, #8
 8019b08:	af00      	add	r7, sp, #0
 8019b0a:	6078      	str	r0, [r7, #4]
 8019b0c:	4a05      	ldr	r2, [pc, #20]	; (8019b24 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	601a      	str	r2, [r3, #0]
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	4618      	mov	r0, r3
 8019b16:	f7fd fe5f 	bl	80177d8 <_ZN14MockActualCallD1Ev>
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	3708      	adds	r7, #8
 8019b20:	46bd      	mov	sp, r7
 8019b22:	bd80      	pop	{r7, pc}
 8019b24:	08028670 	.word	0x08028670

08019b28 <_ZN21MockIgnoredActualCallD0Ev>:
 8019b28:	b580      	push	{r7, lr}
 8019b2a:	b082      	sub	sp, #8
 8019b2c:	af00      	add	r7, sp, #0
 8019b2e:	6078      	str	r0, [r7, #4]
 8019b30:	6878      	ldr	r0, [r7, #4]
 8019b32:	f7ff ffe7 	bl	8019b04 <_ZN21MockIgnoredActualCallD1Ev>
 8019b36:	2104      	movs	r1, #4
 8019b38:	6878      	ldr	r0, [r7, #4]
 8019b3a:	f7f0 fadb 	bl	800a0f4 <_ZdlPvj>
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	4618      	mov	r0, r3
 8019b42:	3708      	adds	r7, #8
 8019b44:	46bd      	mov	sp, r7
 8019b46:	bd80      	pop	{r7, pc}

08019b48 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 8019b48:	b580      	push	{r7, lr}
 8019b4a:	b082      	sub	sp, #8
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	6078      	str	r0, [r7, #4]
 8019b50:	4a05      	ldr	r2, [pc, #20]	; (8019b68 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	601a      	str	r2, [r3, #0]
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	4618      	mov	r0, r3
 8019b5a:	f7f0 fefd 	bl	800a958 <_ZN11MockFailureD1Ev>
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	4618      	mov	r0, r3
 8019b62:	3708      	adds	r7, #8
 8019b64:	46bd      	mov	sp, r7
 8019b66:	bd80      	pop	{r7, pc}
 8019b68:	08028568 	.word	0x08028568

08019b6c <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 8019b6c:	b580      	push	{r7, lr}
 8019b6e:	b082      	sub	sp, #8
 8019b70:	af00      	add	r7, sp, #0
 8019b72:	6078      	str	r0, [r7, #4]
 8019b74:	6878      	ldr	r0, [r7, #4]
 8019b76:	f7ff ffe7 	bl	8019b48 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 8019b7a:	2134      	movs	r1, #52	; 0x34
 8019b7c:	6878      	ldr	r0, [r7, #4]
 8019b7e:	f7f0 fab9 	bl	800a0f4 <_ZdlPvj>
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	4618      	mov	r0, r3
 8019b86:	3708      	adds	r7, #8
 8019b88:	46bd      	mov	sp, r7
 8019b8a:	bd80      	pop	{r7, pc}

08019b8c <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 8019b8c:	b580      	push	{r7, lr}
 8019b8e:	b082      	sub	sp, #8
 8019b90:	af00      	add	r7, sp, #0
 8019b92:	6078      	str	r0, [r7, #4]
 8019b94:	4a05      	ldr	r2, [pc, #20]	; (8019bac <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	601a      	str	r2, [r3, #0]
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	4618      	mov	r0, r3
 8019b9e:	f7f0 fedb 	bl	800a958 <_ZN11MockFailureD1Ev>
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	3708      	adds	r7, #8
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	bd80      	pop	{r7, pc}
 8019bac:	08028644 	.word	0x08028644

08019bb0 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 8019bb0:	b580      	push	{r7, lr}
 8019bb2:	b082      	sub	sp, #8
 8019bb4:	af00      	add	r7, sp, #0
 8019bb6:	6078      	str	r0, [r7, #4]
 8019bb8:	6878      	ldr	r0, [r7, #4]
 8019bba:	f7ff ffe7 	bl	8019b8c <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8019bbe:	2134      	movs	r1, #52	; 0x34
 8019bc0:	6878      	ldr	r0, [r7, #4]
 8019bc2:	f7f0 fa97 	bl	800a0f4 <_ZdlPvj>
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	4618      	mov	r0, r3
 8019bca:	3708      	adds	r7, #8
 8019bcc:	46bd      	mov	sp, r7
 8019bce:	bd80      	pop	{r7, pc}

08019bd0 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 8019bd0:	b580      	push	{r7, lr}
 8019bd2:	b082      	sub	sp, #8
 8019bd4:	af00      	add	r7, sp, #0
 8019bd6:	6078      	str	r0, [r7, #4]
 8019bd8:	4a05      	ldr	r2, [pc, #20]	; (8019bf0 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	601a      	str	r2, [r3, #0]
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	4618      	mov	r0, r3
 8019be2:	f7f0 feb9 	bl	800a958 <_ZN11MockFailureD1Ev>
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	4618      	mov	r0, r3
 8019bea:	3708      	adds	r7, #8
 8019bec:	46bd      	mov	sp, r7
 8019bee:	bd80      	pop	{r7, pc}
 8019bf0:	08028618 	.word	0x08028618

08019bf4 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 8019bf4:	b580      	push	{r7, lr}
 8019bf6:	b082      	sub	sp, #8
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	6078      	str	r0, [r7, #4]
 8019bfc:	6878      	ldr	r0, [r7, #4]
 8019bfe:	f7ff ffe7 	bl	8019bd0 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8019c02:	2134      	movs	r1, #52	; 0x34
 8019c04:	6878      	ldr	r0, [r7, #4]
 8019c06:	f7f0 fa75 	bl	800a0f4 <_ZdlPvj>
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	4618      	mov	r0, r3
 8019c0e:	3708      	adds	r7, #8
 8019c10:	46bd      	mov	sp, r7
 8019c12:	bd80      	pop	{r7, pc}

08019c14 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b082      	sub	sp, #8
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
 8019c1c:	4a05      	ldr	r2, [pc, #20]	; (8019c34 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	601a      	str	r2, [r3, #0]
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	4618      	mov	r0, r3
 8019c26:	f7f0 fe97 	bl	800a958 <_ZN11MockFailureD1Ev>
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	4618      	mov	r0, r3
 8019c2e:	3708      	adds	r7, #8
 8019c30:	46bd      	mov	sp, r7
 8019c32:	bd80      	pop	{r7, pc}
 8019c34:	080285ec 	.word	0x080285ec

08019c38 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b082      	sub	sp, #8
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]
 8019c40:	6878      	ldr	r0, [r7, #4]
 8019c42:	f7ff ffe7 	bl	8019c14 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8019c46:	2134      	movs	r1, #52	; 0x34
 8019c48:	6878      	ldr	r0, [r7, #4]
 8019c4a:	f7f0 fa53 	bl	800a0f4 <_ZdlPvj>
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	4618      	mov	r0, r3
 8019c52:	3708      	adds	r7, #8
 8019c54:	46bd      	mov	sp, r7
 8019c56:	bd80      	pop	{r7, pc}

08019c58 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 8019c58:	b580      	push	{r7, lr}
 8019c5a:	b082      	sub	sp, #8
 8019c5c:	af00      	add	r7, sp, #0
 8019c5e:	6078      	str	r0, [r7, #4]
 8019c60:	4a05      	ldr	r2, [pc, #20]	; (8019c78 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	601a      	str	r2, [r3, #0]
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	4618      	mov	r0, r3
 8019c6a:	f7f0 fe75 	bl	800a958 <_ZN11MockFailureD1Ev>
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	4618      	mov	r0, r3
 8019c72:	3708      	adds	r7, #8
 8019c74:	46bd      	mov	sp, r7
 8019c76:	bd80      	pop	{r7, pc}
 8019c78:	08028594 	.word	0x08028594

08019c7c <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	b082      	sub	sp, #8
 8019c80:	af00      	add	r7, sp, #0
 8019c82:	6078      	str	r0, [r7, #4]
 8019c84:	6878      	ldr	r0, [r7, #4]
 8019c86:	f7ff ffe7 	bl	8019c58 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8019c8a:	2134      	movs	r1, #52	; 0x34
 8019c8c:	6878      	ldr	r0, [r7, #4]
 8019c8e:	f7f0 fa31 	bl	800a0f4 <_ZdlPvj>
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	4618      	mov	r0, r3
 8019c96:	3708      	adds	r7, #8
 8019c98:	46bd      	mov	sp, r7
 8019c9a:	bd80      	pop	{r7, pc}

08019c9c <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 8019c9c:	b580      	push	{r7, lr}
 8019c9e:	b082      	sub	sp, #8
 8019ca0:	af00      	add	r7, sp, #0
 8019ca2:	6078      	str	r0, [r7, #4]
 8019ca4:	4a05      	ldr	r2, [pc, #20]	; (8019cbc <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	601a      	str	r2, [r3, #0]
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	4618      	mov	r0, r3
 8019cae:	f7f0 fe53 	bl	800a958 <_ZN11MockFailureD1Ev>
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	4618      	mov	r0, r3
 8019cb6:	3708      	adds	r7, #8
 8019cb8:	46bd      	mov	sp, r7
 8019cba:	bd80      	pop	{r7, pc}
 8019cbc:	080285c0 	.word	0x080285c0

08019cc0 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	b082      	sub	sp, #8
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	6078      	str	r0, [r7, #4]
 8019cc8:	6878      	ldr	r0, [r7, #4]
 8019cca:	f7ff ffe7 	bl	8019c9c <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8019cce:	2134      	movs	r1, #52	; 0x34
 8019cd0:	6878      	ldr	r0, [r7, #4]
 8019cd2:	f7f0 fa0f 	bl	800a0f4 <_ZdlPvj>
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	4618      	mov	r0, r3
 8019cda:	3708      	adds	r7, #8
 8019cdc:	46bd      	mov	sp, r7
 8019cde:	bd80      	pop	{r7, pc}

08019ce0 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b082      	sub	sp, #8
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	6078      	str	r0, [r7, #4]
 8019ce8:	4a05      	ldr	r2, [pc, #20]	; (8019d00 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	601a      	str	r2, [r3, #0]
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	4618      	mov	r0, r3
 8019cf2:	f7f0 fe31 	bl	800a958 <_ZN11MockFailureD1Ev>
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	4618      	mov	r0, r3
 8019cfa:	3708      	adds	r7, #8
 8019cfc:	46bd      	mov	sp, r7
 8019cfe:	bd80      	pop	{r7, pc}
 8019d00:	08028510 	.word	0x08028510

08019d04 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 8019d04:	b580      	push	{r7, lr}
 8019d06:	b082      	sub	sp, #8
 8019d08:	af00      	add	r7, sp, #0
 8019d0a:	6078      	str	r0, [r7, #4]
 8019d0c:	6878      	ldr	r0, [r7, #4]
 8019d0e:	f7ff ffe7 	bl	8019ce0 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8019d12:	2134      	movs	r1, #52	; 0x34
 8019d14:	6878      	ldr	r0, [r7, #4]
 8019d16:	f7f0 f9ed 	bl	800a0f4 <_ZdlPvj>
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	4618      	mov	r0, r3
 8019d1e:	3708      	adds	r7, #8
 8019d20:	46bd      	mov	sp, r7
 8019d22:	bd80      	pop	{r7, pc}

08019d24 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 8019d24:	b580      	push	{r7, lr}
 8019d26:	b082      	sub	sp, #8
 8019d28:	af00      	add	r7, sp, #0
 8019d2a:	6078      	str	r0, [r7, #4]
 8019d2c:	4a05      	ldr	r2, [pc, #20]	; (8019d44 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	601a      	str	r2, [r3, #0]
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	4618      	mov	r0, r3
 8019d36:	f7f0 fe0f 	bl	800a958 <_ZN11MockFailureD1Ev>
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	4618      	mov	r0, r3
 8019d3e:	3708      	adds	r7, #8
 8019d40:	46bd      	mov	sp, r7
 8019d42:	bd80      	pop	{r7, pc}
 8019d44:	0802853c 	.word	0x0802853c

08019d48 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b082      	sub	sp, #8
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	6078      	str	r0, [r7, #4]
 8019d50:	6878      	ldr	r0, [r7, #4]
 8019d52:	f7ff ffe7 	bl	8019d24 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8019d56:	2134      	movs	r1, #52	; 0x34
 8019d58:	6878      	ldr	r0, [r7, #4]
 8019d5a:	f7f0 f9cb 	bl	800a0f4 <_ZdlPvj>
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	4618      	mov	r0, r3
 8019d62:	3708      	adds	r7, #8
 8019d64:	46bd      	mov	sp, r7
 8019d66:	bd80      	pop	{r7, pc}

08019d68 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	b082      	sub	sp, #8
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	6078      	str	r0, [r7, #4]
 8019d70:	6039      	str	r1, [r7, #0]
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	3310      	adds	r3, #16
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	683a      	ldr	r2, [r7, #0]
 8019d7c:	6839      	ldr	r1, [r7, #0]
 8019d7e:	6878      	ldr	r0, [r7, #4]
 8019d80:	4798      	blx	r3
 8019d82:	4603      	mov	r3, r0
 8019d84:	4618      	mov	r0, r3
 8019d86:	3708      	adds	r7, #8
 8019d88:	46bd      	mov	sp, r7
 8019d8a:	bd80      	pop	{r7, pc}

08019d8c <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 8019d8c:	b480      	push	{r7}
 8019d8e:	b083      	sub	sp, #12
 8019d90:	af00      	add	r7, sp, #0
 8019d92:	6078      	str	r0, [r7, #4]
 8019d94:	6039      	str	r1, [r7, #0]
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	4618      	mov	r0, r3
 8019d9a:	370c      	adds	r7, #12
 8019d9c:	46bd      	mov	sp, r7
 8019d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019da2:	4770      	bx	lr

08019da4 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 8019da4:	b480      	push	{r7}
 8019da6:	b083      	sub	sp, #12
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	6078      	str	r0, [r7, #4]
 8019dac:	6039      	str	r1, [r7, #0]
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	4618      	mov	r0, r3
 8019db2:	370c      	adds	r7, #12
 8019db4:	46bd      	mov	sp, r7
 8019db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dba:	4770      	bx	lr

08019dbc <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 8019dbc:	b480      	push	{r7}
 8019dbe:	b085      	sub	sp, #20
 8019dc0:	af00      	add	r7, sp, #0
 8019dc2:	60f8      	str	r0, [r7, #12]
 8019dc4:	60b9      	str	r1, [r7, #8]
 8019dc6:	607a      	str	r2, [r7, #4]
 8019dc8:	68fb      	ldr	r3, [r7, #12]
 8019dca:	4618      	mov	r0, r3
 8019dcc:	3714      	adds	r7, #20
 8019dce:	46bd      	mov	sp, r7
 8019dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dd4:	4770      	bx	lr

08019dd6 <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8019dd6:	b480      	push	{r7}
 8019dd8:	b085      	sub	sp, #20
 8019dda:	af00      	add	r7, sp, #0
 8019ddc:	60f8      	str	r0, [r7, #12]
 8019dde:	60b9      	str	r1, [r7, #8]
 8019de0:	4613      	mov	r3, r2
 8019de2:	71fb      	strb	r3, [r7, #7]
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	4618      	mov	r0, r3
 8019de8:	3714      	adds	r7, #20
 8019dea:	46bd      	mov	sp, r7
 8019dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019df0:	4770      	bx	lr

08019df2 <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8019df2:	b480      	push	{r7}
 8019df4:	b085      	sub	sp, #20
 8019df6:	af00      	add	r7, sp, #0
 8019df8:	60f8      	str	r0, [r7, #12]
 8019dfa:	60b9      	str	r1, [r7, #8]
 8019dfc:	607a      	str	r2, [r7, #4]
 8019dfe:	68fb      	ldr	r3, [r7, #12]
 8019e00:	4618      	mov	r0, r3
 8019e02:	3714      	adds	r7, #20
 8019e04:	46bd      	mov	sp, r7
 8019e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e0a:	4770      	bx	lr

08019e0c <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 8019e0c:	b480      	push	{r7}
 8019e0e:	b085      	sub	sp, #20
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	60f8      	str	r0, [r7, #12]
 8019e14:	60b9      	str	r1, [r7, #8]
 8019e16:	607a      	str	r2, [r7, #4]
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	4618      	mov	r0, r3
 8019e1c:	3714      	adds	r7, #20
 8019e1e:	46bd      	mov	sp, r7
 8019e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e24:	4770      	bx	lr

08019e26 <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8019e26:	b480      	push	{r7}
 8019e28:	b085      	sub	sp, #20
 8019e2a:	af00      	add	r7, sp, #0
 8019e2c:	60f8      	str	r0, [r7, #12]
 8019e2e:	60b9      	str	r1, [r7, #8]
 8019e30:	607a      	str	r2, [r7, #4]
 8019e32:	68fb      	ldr	r3, [r7, #12]
 8019e34:	4618      	mov	r0, r3
 8019e36:	3714      	adds	r7, #20
 8019e38:	46bd      	mov	sp, r7
 8019e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e3e:	4770      	bx	lr

08019e40 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8019e40:	b480      	push	{r7}
 8019e42:	b085      	sub	sp, #20
 8019e44:	af00      	add	r7, sp, #0
 8019e46:	60f8      	str	r0, [r7, #12]
 8019e48:	60b9      	str	r1, [r7, #8]
 8019e4a:	607a      	str	r2, [r7, #4]
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	4618      	mov	r0, r3
 8019e50:	3714      	adds	r7, #20
 8019e52:	46bd      	mov	sp, r7
 8019e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e58:	4770      	bx	lr

08019e5a <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8019e5a:	b480      	push	{r7}
 8019e5c:	b085      	sub	sp, #20
 8019e5e:	af00      	add	r7, sp, #0
 8019e60:	60f8      	str	r0, [r7, #12]
 8019e62:	60b9      	str	r1, [r7, #8]
 8019e64:	4639      	mov	r1, r7
 8019e66:	e881 000c 	stmia.w	r1, {r2, r3}
 8019e6a:	68fb      	ldr	r3, [r7, #12]
 8019e6c:	4618      	mov	r0, r3
 8019e6e:	3714      	adds	r7, #20
 8019e70:	46bd      	mov	sp, r7
 8019e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e76:	4770      	bx	lr

08019e78 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8019e78:	b480      	push	{r7}
 8019e7a:	b085      	sub	sp, #20
 8019e7c:	af00      	add	r7, sp, #0
 8019e7e:	60f8      	str	r0, [r7, #12]
 8019e80:	60b9      	str	r1, [r7, #8]
 8019e82:	4639      	mov	r1, r7
 8019e84:	e881 000c 	stmia.w	r1, {r2, r3}
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	4618      	mov	r0, r3
 8019e8c:	3714      	adds	r7, #20
 8019e8e:	46bd      	mov	sp, r7
 8019e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e94:	4770      	bx	lr

08019e96 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8019e96:	b480      	push	{r7}
 8019e98:	b085      	sub	sp, #20
 8019e9a:	af00      	add	r7, sp, #0
 8019e9c:	60f8      	str	r0, [r7, #12]
 8019e9e:	60b9      	str	r1, [r7, #8]
 8019ea0:	ed87 0b00 	vstr	d0, [r7]
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	4618      	mov	r0, r3
 8019ea8:	3714      	adds	r7, #20
 8019eaa:	46bd      	mov	sp, r7
 8019eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eb0:	4770      	bx	lr

08019eb2 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 8019eb2:	b480      	push	{r7}
 8019eb4:	b087      	sub	sp, #28
 8019eb6:	af00      	add	r7, sp, #0
 8019eb8:	6178      	str	r0, [r7, #20]
 8019eba:	6139      	str	r1, [r7, #16]
 8019ebc:	ed87 0b02 	vstr	d0, [r7, #8]
 8019ec0:	ed87 1b00 	vstr	d1, [r7]
 8019ec4:	697b      	ldr	r3, [r7, #20]
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	371c      	adds	r7, #28
 8019eca:	46bd      	mov	sp, r7
 8019ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed0:	4770      	bx	lr

08019ed2 <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8019ed2:	b480      	push	{r7}
 8019ed4:	b085      	sub	sp, #20
 8019ed6:	af00      	add	r7, sp, #0
 8019ed8:	60f8      	str	r0, [r7, #12]
 8019eda:	60b9      	str	r1, [r7, #8]
 8019edc:	607a      	str	r2, [r7, #4]
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	4618      	mov	r0, r3
 8019ee2:	3714      	adds	r7, #20
 8019ee4:	46bd      	mov	sp, r7
 8019ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eea:	4770      	bx	lr

08019eec <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8019eec:	b480      	push	{r7}
 8019eee:	b085      	sub	sp, #20
 8019ef0:	af00      	add	r7, sp, #0
 8019ef2:	60f8      	str	r0, [r7, #12]
 8019ef4:	60b9      	str	r1, [r7, #8]
 8019ef6:	607a      	str	r2, [r7, #4]
 8019ef8:	68fb      	ldr	r3, [r7, #12]
 8019efa:	4618      	mov	r0, r3
 8019efc:	3714      	adds	r7, #20
 8019efe:	46bd      	mov	sp, r7
 8019f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f04:	4770      	bx	lr

08019f06 <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8019f06:	b480      	push	{r7}
 8019f08:	b085      	sub	sp, #20
 8019f0a:	af00      	add	r7, sp, #0
 8019f0c:	60f8      	str	r0, [r7, #12]
 8019f0e:	60b9      	str	r1, [r7, #8]
 8019f10:	607a      	str	r2, [r7, #4]
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	4618      	mov	r0, r3
 8019f16:	3714      	adds	r7, #20
 8019f18:	46bd      	mov	sp, r7
 8019f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f1e:	4770      	bx	lr

08019f20 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 8019f20:	b480      	push	{r7}
 8019f22:	b085      	sub	sp, #20
 8019f24:	af00      	add	r7, sp, #0
 8019f26:	60f8      	str	r0, [r7, #12]
 8019f28:	60b9      	str	r1, [r7, #8]
 8019f2a:	607a      	str	r2, [r7, #4]
 8019f2c:	68fb      	ldr	r3, [r7, #12]
 8019f2e:	4618      	mov	r0, r3
 8019f30:	3714      	adds	r7, #20
 8019f32:	46bd      	mov	sp, r7
 8019f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f38:	4770      	bx	lr

08019f3a <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 8019f3a:	b480      	push	{r7}
 8019f3c:	b085      	sub	sp, #20
 8019f3e:	af00      	add	r7, sp, #0
 8019f40:	60f8      	str	r0, [r7, #12]
 8019f42:	60b9      	str	r1, [r7, #8]
 8019f44:	607a      	str	r2, [r7, #4]
 8019f46:	603b      	str	r3, [r7, #0]
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	4618      	mov	r0, r3
 8019f4c:	3714      	adds	r7, #20
 8019f4e:	46bd      	mov	sp, r7
 8019f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f54:	4770      	bx	lr

08019f56 <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8019f56:	b480      	push	{r7}
 8019f58:	b085      	sub	sp, #20
 8019f5a:	af00      	add	r7, sp, #0
 8019f5c:	60f8      	str	r0, [r7, #12]
 8019f5e:	60b9      	str	r1, [r7, #8]
 8019f60:	607a      	str	r2, [r7, #4]
 8019f62:	603b      	str	r3, [r7, #0]
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	4618      	mov	r0, r3
 8019f68:	3714      	adds	r7, #20
 8019f6a:	46bd      	mov	sp, r7
 8019f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f70:	4770      	bx	lr

08019f72 <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 8019f72:	b480      	push	{r7}
 8019f74:	b085      	sub	sp, #20
 8019f76:	af00      	add	r7, sp, #0
 8019f78:	60f8      	str	r0, [r7, #12]
 8019f7a:	60b9      	str	r1, [r7, #8]
 8019f7c:	607a      	str	r2, [r7, #4]
 8019f7e:	603b      	str	r3, [r7, #0]
 8019f80:	68fb      	ldr	r3, [r7, #12]
 8019f82:	4618      	mov	r0, r3
 8019f84:	3714      	adds	r7, #20
 8019f86:	46bd      	mov	sp, r7
 8019f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f8c:	4770      	bx	lr

08019f8e <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8019f8e:	b480      	push	{r7}
 8019f90:	b085      	sub	sp, #20
 8019f92:	af00      	add	r7, sp, #0
 8019f94:	60f8      	str	r0, [r7, #12]
 8019f96:	60b9      	str	r1, [r7, #8]
 8019f98:	607a      	str	r2, [r7, #4]
 8019f9a:	603b      	str	r3, [r7, #0]
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	4618      	mov	r0, r3
 8019fa0:	3714      	adds	r7, #20
 8019fa2:	46bd      	mov	sp, r7
 8019fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fa8:	4770      	bx	lr

08019faa <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 8019faa:	b480      	push	{r7}
 8019fac:	b083      	sub	sp, #12
 8019fae:	af00      	add	r7, sp, #0
 8019fb0:	6078      	str	r0, [r7, #4]
 8019fb2:	6039      	str	r1, [r7, #0]
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	4618      	mov	r0, r3
 8019fb8:	370c      	adds	r7, #12
 8019fba:	46bd      	mov	sp, r7
 8019fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fc0:	4770      	bx	lr

08019fc2 <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 8019fc2:	b480      	push	{r7}
 8019fc4:	b083      	sub	sp, #12
 8019fc6:	af00      	add	r7, sp, #0
 8019fc8:	6078      	str	r0, [r7, #4]
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	4618      	mov	r0, r3
 8019fce:	370c      	adds	r7, #12
 8019fd0:	46bd      	mov	sp, r7
 8019fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fd6:	4770      	bx	lr

08019fd8 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 8019fd8:	b480      	push	{r7}
 8019fda:	b083      	sub	sp, #12
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	6078      	str	r0, [r7, #4]
 8019fe0:	460b      	mov	r3, r1
 8019fe2:	70fb      	strb	r3, [r7, #3]
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	4618      	mov	r0, r3
 8019fe8:	370c      	adds	r7, #12
 8019fea:	46bd      	mov	sp, r7
 8019fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ff0:	4770      	bx	lr

08019ff2 <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 8019ff2:	b480      	push	{r7}
 8019ff4:	b083      	sub	sp, #12
 8019ff6:	af00      	add	r7, sp, #0
 8019ff8:	6078      	str	r0, [r7, #4]
 8019ffa:	6039      	str	r1, [r7, #0]
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	4618      	mov	r0, r3
 801a000:	370c      	adds	r7, #12
 801a002:	46bd      	mov	sp, r7
 801a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a008:	4770      	bx	lr

0801a00a <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 801a00a:	b480      	push	{r7}
 801a00c:	b083      	sub	sp, #12
 801a00e:	af00      	add	r7, sp, #0
 801a010:	6078      	str	r0, [r7, #4]
 801a012:	6039      	str	r1, [r7, #0]
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	4618      	mov	r0, r3
 801a018:	370c      	adds	r7, #12
 801a01a:	46bd      	mov	sp, r7
 801a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a020:	4770      	bx	lr

0801a022 <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801a022:	b480      	push	{r7}
 801a024:	b083      	sub	sp, #12
 801a026:	af00      	add	r7, sp, #0
 801a028:	6078      	str	r0, [r7, #4]
 801a02a:	6039      	str	r1, [r7, #0]
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	4618      	mov	r0, r3
 801a030:	370c      	adds	r7, #12
 801a032:	46bd      	mov	sp, r7
 801a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a038:	4770      	bx	lr

0801a03a <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 801a03a:	b480      	push	{r7}
 801a03c:	b083      	sub	sp, #12
 801a03e:	af00      	add	r7, sp, #0
 801a040:	6078      	str	r0, [r7, #4]
 801a042:	6039      	str	r1, [r7, #0]
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	4618      	mov	r0, r3
 801a048:	370c      	adds	r7, #12
 801a04a:	46bd      	mov	sp, r7
 801a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a050:	4770      	bx	lr

0801a052 <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 801a052:	b480      	push	{r7}
 801a054:	b085      	sub	sp, #20
 801a056:	af00      	add	r7, sp, #0
 801a058:	60f8      	str	r0, [r7, #12]
 801a05a:	1d3b      	adds	r3, r7, #4
 801a05c:	e883 0006 	stmia.w	r3, {r1, r2}
 801a060:	68fb      	ldr	r3, [r7, #12]
 801a062:	4618      	mov	r0, r3
 801a064:	3714      	adds	r7, #20
 801a066:	46bd      	mov	sp, r7
 801a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a06c:	4770      	bx	lr

0801a06e <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 801a06e:	b480      	push	{r7}
 801a070:	b085      	sub	sp, #20
 801a072:	af00      	add	r7, sp, #0
 801a074:	60f8      	str	r0, [r7, #12]
 801a076:	1d3b      	adds	r3, r7, #4
 801a078:	e883 0006 	stmia.w	r3, {r1, r2}
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	4618      	mov	r0, r3
 801a080:	3714      	adds	r7, #20
 801a082:	46bd      	mov	sp, r7
 801a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a088:	4770      	bx	lr

0801a08a <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 801a08a:	b480      	push	{r7}
 801a08c:	b085      	sub	sp, #20
 801a08e:	af00      	add	r7, sp, #0
 801a090:	60f8      	str	r0, [r7, #12]
 801a092:	ed87 0b00 	vstr	d0, [r7]
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	4618      	mov	r0, r3
 801a09a:	3714      	adds	r7, #20
 801a09c:	46bd      	mov	sp, r7
 801a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0a2:	4770      	bx	lr

0801a0a4 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 801a0a4:	b480      	push	{r7}
 801a0a6:	b083      	sub	sp, #12
 801a0a8:	af00      	add	r7, sp, #0
 801a0aa:	6078      	str	r0, [r7, #4]
 801a0ac:	6039      	str	r1, [r7, #0]
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	370c      	adds	r7, #12
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ba:	4770      	bx	lr

0801a0bc <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 801a0bc:	b480      	push	{r7}
 801a0be:	b083      	sub	sp, #12
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	6078      	str	r0, [r7, #4]
 801a0c4:	6039      	str	r1, [r7, #0]
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	370c      	adds	r7, #12
 801a0cc:	46bd      	mov	sp, r7
 801a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d2:	4770      	bx	lr

0801a0d4 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 801a0d4:	b480      	push	{r7}
 801a0d6:	b083      	sub	sp, #12
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	6078      	str	r0, [r7, #4]
 801a0dc:	6039      	str	r1, [r7, #0]
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	370c      	adds	r7, #12
 801a0e4:	46bd      	mov	sp, r7
 801a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ea:	4770      	bx	lr

0801a0ec <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 801a0ec:	b480      	push	{r7}
 801a0ee:	b083      	sub	sp, #12
 801a0f0:	af00      	add	r7, sp, #0
 801a0f2:	6078      	str	r0, [r7, #4]
 801a0f4:	6039      	str	r1, [r7, #0]
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	370c      	adds	r7, #12
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a102:	4770      	bx	lr

0801a104 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 801a104:	b480      	push	{r7}
 801a106:	b083      	sub	sp, #12
 801a108:	af00      	add	r7, sp, #0
 801a10a:	6078      	str	r0, [r7, #4]
 801a10c:	6039      	str	r1, [r7, #0]
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	4618      	mov	r0, r3
 801a112:	370c      	adds	r7, #12
 801a114:	46bd      	mov	sp, r7
 801a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a11a:	4770      	bx	lr

0801a11c <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 801a11c:	b480      	push	{r7}
 801a11e:	b083      	sub	sp, #12
 801a120:	af00      	add	r7, sp, #0
 801a122:	6078      	str	r0, [r7, #4]
 801a124:	4a04      	ldr	r2, [pc, #16]	; (801a138 <_ZN16MockExpectedCallC1Ev+0x1c>)
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	601a      	str	r2, [r3, #0]
{
}
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	4618      	mov	r0, r3
 801a12e:	370c      	adds	r7, #12
 801a130:	46bd      	mov	sp, r7
 801a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a136:	4770      	bx	lr
 801a138:	08028c14 	.word	0x08028c14

0801a13c <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 801a13c:	b480      	push	{r7}
 801a13e:	b083      	sub	sp, #12
 801a140:	af00      	add	r7, sp, #0
 801a142:	6078      	str	r0, [r7, #4]
 801a144:	4a04      	ldr	r2, [pc, #16]	; (801a158 <_ZN16MockExpectedCallD1Ev+0x1c>)
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	601a      	str	r2, [r3, #0]
{
}
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	4618      	mov	r0, r3
 801a14e:	370c      	adds	r7, #12
 801a150:	46bd      	mov	sp, r7
 801a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a156:	4770      	bx	lr
 801a158:	08028c14 	.word	0x08028c14

0801a15c <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 801a15c:	b580      	push	{r7, lr}
 801a15e:	b082      	sub	sp, #8
 801a160:	af00      	add	r7, sp, #0
 801a162:	6078      	str	r0, [r7, #4]
 801a164:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 801a166:	683b      	ldr	r3, [r7, #0]
 801a168:	681b      	ldr	r3, [r3, #0]
 801a16a:	3358      	adds	r3, #88	; 0x58
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	687a      	ldr	r2, [r7, #4]
 801a170:	6839      	ldr	r1, [r7, #0]
 801a172:	4610      	mov	r0, r2
 801a174:	4798      	blx	r3
}
 801a176:	6878      	ldr	r0, [r7, #4]
 801a178:	3708      	adds	r7, #8
 801a17a:	46bd      	mov	sp, r7
 801a17c:	bd80      	pop	{r7, pc}

0801a17e <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 801a17e:	b580      	push	{r7, lr}
 801a180:	b082      	sub	sp, #8
 801a182:	af00      	add	r7, sp, #0
 801a184:	6078      	str	r0, [r7, #4]
 801a186:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	3304      	adds	r3, #4
 801a18c:	6839      	ldr	r1, [r7, #0]
 801a18e:	4618      	mov	r0, r3
 801a190:	f7f2 fbcb 	bl	800c92a <_ZN12SimpleStringaSERKS_>
}
 801a194:	bf00      	nop
 801a196:	3708      	adds	r7, #8
 801a198:	46bd      	mov	sp, r7
 801a19a:	bd80      	pop	{r7, pc}

0801a19c <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 801a19c:	b580      	push	{r7, lr}
 801a19e:	b082      	sub	sp, #8
 801a1a0:	af00      	add	r7, sp, #0
 801a1a2:	6078      	str	r0, [r7, #4]
 801a1a4:	6039      	str	r1, [r7, #0]
    return functionName_;
 801a1a6:	683b      	ldr	r3, [r7, #0]
 801a1a8:	3304      	adds	r3, #4
 801a1aa:	4619      	mov	r1, r3
 801a1ac:	6878      	ldr	r0, [r7, #4]
 801a1ae:	f7f2 fba4 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
}
 801a1b2:	6878      	ldr	r0, [r7, #4]
 801a1b4:	3708      	adds	r7, #8
 801a1b6:	46bd      	mov	sp, r7
 801a1b8:	bd80      	pop	{r7, pc}
	...

0801a1bc <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 801a1bc:	b590      	push	{r4, r7, lr}
 801a1be:	b085      	sub	sp, #20
 801a1c0:	af00      	add	r7, sp, #0
 801a1c2:	6078      	str	r0, [r7, #4]
 801a1c4:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	4618      	mov	r0, r3
 801a1ca:	f7ff ffa7 	bl	801a11c <_ZN16MockExpectedCallC1Ev>
 801a1ce:	4a2c      	ldr	r2, [pc, #176]	; (801a280 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	601a      	str	r2, [r3, #0]
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	3304      	adds	r3, #4
 801a1d8:	492a      	ldr	r1, [pc, #168]	; (801a284 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801a1da:	4618      	mov	r0, r3
 801a1dc:	f7f2 fb39 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	2200      	movs	r2, #0
 801a1e4:	731a      	strb	r2, [r3, #12]
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	2200      	movs	r2, #0
 801a1ea:	735a      	strb	r2, [r3, #13]
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	2200      	movs	r2, #0
 801a1f0:	611a      	str	r2, [r3, #16]
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	2200      	movs	r2, #0
 801a1f6:	615a      	str	r2, [r3, #20]
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	2200      	movs	r2, #0
 801a1fc:	761a      	strb	r2, [r3, #24]
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801a204:	f107 0308 	add.w	r3, r7, #8
 801a208:	491e      	ldr	r1, [pc, #120]	; (801a284 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801a20a:	4618      	mov	r0, r3
 801a20c:	f7f2 fb21 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801a210:	f107 0308 	add.w	r3, r7, #8
 801a214:	4619      	mov	r1, r3
 801a216:	4620      	mov	r0, r4
 801a218:	f003 f840 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
 801a21c:	f107 0308 	add.w	r3, r7, #8
 801a220:	4618      	mov	r0, r3
 801a222:	f7f2 fece 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	2200      	movs	r2, #0
 801a22a:	661a      	str	r2, [r3, #96]	; 0x60
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	2200      	movs	r2, #0
 801a230:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	2201      	movs	r2, #1
 801a238:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	2200      	movs	r2, #0
 801a240:	669a      	str	r2, [r3, #104]	; 0x68
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	683a      	ldr	r2, [r7, #0]
 801a246:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 801a248:	2246      	movs	r2, #70	; 0x46
 801a24a:	490f      	ldr	r1, [pc, #60]	; (801a288 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801a24c:	2004      	movs	r0, #4
 801a24e:	f7ef ff3d 	bl	800a0cc <_ZnwjPKci>
 801a252:	4604      	mov	r4, r0
 801a254:	4620      	mov	r0, r4
 801a256:	f004 ff34 	bl	801f0c2 <_ZN18MockNamedValueListC1Ev>
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 801a25e:	2247      	movs	r2, #71	; 0x47
 801a260:	4909      	ldr	r1, [pc, #36]	; (801a288 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801a262:	2004      	movs	r0, #4
 801a264:	f7ef ff32 	bl	800a0cc <_ZnwjPKci>
 801a268:	4604      	mov	r4, r0
 801a26a:	4620      	mov	r0, r4
 801a26c:	f004 ff29 	bl	801f0c2 <_ZN18MockNamedValueListC1Ev>
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	621c      	str	r4, [r3, #32]
}
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	4618      	mov	r0, r3
 801a278:	3714      	adds	r7, #20
 801a27a:	46bd      	mov	sp, r7
 801a27c:	bd90      	pop	{r4, r7, pc}
 801a27e:	bf00      	nop
 801a280:	08028a58 	.word	0x08028a58
 801a284:	08025bc8 	.word	0x08025bc8
 801a288:	08025bcc 	.word	0x08025bcc

0801a28c <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801a28c:	b580      	push	{r7, lr}
 801a28e:	b082      	sub	sp, #8
 801a290:	af00      	add	r7, sp, #0
 801a292:	6078      	str	r0, [r7, #4]
 801a294:	4a17      	ldr	r2, [pc, #92]	; (801a2f4 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	69db      	ldr	r3, [r3, #28]
 801a29e:	4618      	mov	r0, r3
 801a2a0:	f004 ff1d 	bl	801f0de <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	69db      	ldr	r3, [r3, #28]
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d003      	beq.n	801a2b4 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 801a2ac:	2104      	movs	r1, #4
 801a2ae:	4618      	mov	r0, r3
 801a2b0:	f7ef ff20 	bl	800a0f4 <_ZdlPvj>
    outputParameters_->clear();
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	6a1b      	ldr	r3, [r3, #32]
 801a2b8:	4618      	mov	r0, r3
 801a2ba:	f004 ff10 	bl	801f0de <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	6a1b      	ldr	r3, [r3, #32]
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d003      	beq.n	801a2ce <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 801a2c6:	2104      	movs	r1, #4
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	f7ef ff13 	bl	800a0f4 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	3328      	adds	r3, #40	; 0x28
 801a2d2:	4618      	mov	r0, r3
 801a2d4:	f003 f80c 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	3304      	adds	r3, #4
 801a2dc:	4618      	mov	r0, r3
 801a2de:	f7f2 fe70 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	4618      	mov	r0, r3
 801a2e6:	f7ff ff29 	bl	801a13c <_ZN16MockExpectedCallD1Ev>
}
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	3708      	adds	r7, #8
 801a2f0:	46bd      	mov	sp, r7
 801a2f2:	bd80      	pop	{r7, pc}
 801a2f4:	08028a58 	.word	0x08028a58

0801a2f8 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801a2f8:	b580      	push	{r7, lr}
 801a2fa:	b082      	sub	sp, #8
 801a2fc:	af00      	add	r7, sp, #0
 801a2fe:	6078      	str	r0, [r7, #4]
}
 801a300:	6878      	ldr	r0, [r7, #4]
 801a302:	f7ff ffc3 	bl	801a28c <_ZN23MockCheckedExpectedCallD1Ev>
 801a306:	2170      	movs	r1, #112	; 0x70
 801a308:	6878      	ldr	r0, [r7, #4]
 801a30a:	f7ef fef3 	bl	800a0f4 <_ZdlPvj>
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	4618      	mov	r0, r3
 801a312:	3708      	adds	r7, #8
 801a314:	46bd      	mov	sp, r7
 801a316:	bd80      	pop	{r7, pc}

0801a318 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 801a318:	b580      	push	{r7, lr}
 801a31a:	b082      	sub	sp, #8
 801a31c:	af00      	add	r7, sp, #0
 801a31e:	6078      	str	r0, [r7, #4]
 801a320:	6039      	str	r1, [r7, #0]
    setName(name);
 801a322:	6839      	ldr	r1, [r7, #0]
 801a324:	6878      	ldr	r0, [r7, #4]
 801a326:	f7ff ff2a 	bl	801a17e <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 801a32a:	687b      	ldr	r3, [r7, #4]
}
 801a32c:	4618      	mov	r0, r3
 801a32e:	3708      	adds	r7, #8
 801a330:	46bd      	mov	sp, r7
 801a332:	bd80      	pop	{r7, pc}

0801a334 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 801a334:	b590      	push	{r4, r7, lr}
 801a336:	b087      	sub	sp, #28
 801a338:	af00      	add	r7, sp, #0
 801a33a:	60f8      	str	r0, [r7, #12]
 801a33c:	60b9      	str	r1, [r7, #8]
 801a33e:	4613      	mov	r3, r2
 801a340:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a342:	225a      	movs	r2, #90	; 0x5a
 801a344:	490e      	ldr	r1, [pc, #56]	; (801a380 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 801a346:	2038      	movs	r0, #56	; 0x38
 801a348:	f7ef fec0 	bl	800a0cc <_ZnwjPKci>
 801a34c:	4604      	mov	r4, r0
 801a34e:	68b9      	ldr	r1, [r7, #8]
 801a350:	4620      	mov	r0, r4
 801a352:	f001 f851 	bl	801b3f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a356:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a358:	68fb      	ldr	r3, [r7, #12]
 801a35a:	69db      	ldr	r3, [r3, #28]
 801a35c:	6979      	ldr	r1, [r7, #20]
 801a35e:	4618      	mov	r0, r3
 801a360:	f004 fee0 	bl	801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a364:	697b      	ldr	r3, [r7, #20]
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	3308      	adds	r3, #8
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	79fa      	ldrb	r2, [r7, #7]
 801a36e:	4611      	mov	r1, r2
 801a370:	6978      	ldr	r0, [r7, #20]
 801a372:	4798      	blx	r3
    return *this;
 801a374:	68fb      	ldr	r3, [r7, #12]
}
 801a376:	4618      	mov	r0, r3
 801a378:	371c      	adds	r7, #28
 801a37a:	46bd      	mov	sp, r7
 801a37c:	bd90      	pop	{r4, r7, pc}
 801a37e:	bf00      	nop
 801a380:	08025bcc 	.word	0x08025bcc

0801a384 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801a384:	b590      	push	{r4, r7, lr}
 801a386:	b087      	sub	sp, #28
 801a388:	af00      	add	r7, sp, #0
 801a38a:	60f8      	str	r0, [r7, #12]
 801a38c:	60b9      	str	r1, [r7, #8]
 801a38e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a390:	2262      	movs	r2, #98	; 0x62
 801a392:	490e      	ldr	r1, [pc, #56]	; (801a3cc <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 801a394:	2038      	movs	r0, #56	; 0x38
 801a396:	f7ef fe99 	bl	800a0cc <_ZnwjPKci>
 801a39a:	4604      	mov	r4, r0
 801a39c:	68b9      	ldr	r1, [r7, #8]
 801a39e:	4620      	mov	r0, r4
 801a3a0:	f001 f82a 	bl	801b3f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a3a4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a3a6:	68fb      	ldr	r3, [r7, #12]
 801a3a8:	69db      	ldr	r3, [r3, #28]
 801a3aa:	6979      	ldr	r1, [r7, #20]
 801a3ac:	4618      	mov	r0, r3
 801a3ae:	f004 feb9 	bl	801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a3b2:	697b      	ldr	r3, [r7, #20]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	3310      	adds	r3, #16
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	6879      	ldr	r1, [r7, #4]
 801a3bc:	6978      	ldr	r0, [r7, #20]
 801a3be:	4798      	blx	r3
    return *this;
 801a3c0:	68fb      	ldr	r3, [r7, #12]
}
 801a3c2:	4618      	mov	r0, r3
 801a3c4:	371c      	adds	r7, #28
 801a3c6:	46bd      	mov	sp, r7
 801a3c8:	bd90      	pop	{r4, r7, pc}
 801a3ca:	bf00      	nop
 801a3cc:	08025bcc 	.word	0x08025bcc

0801a3d0 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 801a3d0:	b590      	push	{r4, r7, lr}
 801a3d2:	b087      	sub	sp, #28
 801a3d4:	af00      	add	r7, sp, #0
 801a3d6:	60f8      	str	r0, [r7, #12]
 801a3d8:	60b9      	str	r1, [r7, #8]
 801a3da:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a3dc:	226a      	movs	r2, #106	; 0x6a
 801a3de:	490e      	ldr	r1, [pc, #56]	; (801a418 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 801a3e0:	2038      	movs	r0, #56	; 0x38
 801a3e2:	f7ef fe73 	bl	800a0cc <_ZnwjPKci>
 801a3e6:	4604      	mov	r4, r0
 801a3e8:	68b9      	ldr	r1, [r7, #8]
 801a3ea:	4620      	mov	r0, r4
 801a3ec:	f001 f804 	bl	801b3f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a3f0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a3f2:	68fb      	ldr	r3, [r7, #12]
 801a3f4:	69db      	ldr	r3, [r3, #28]
 801a3f6:	6979      	ldr	r1, [r7, #20]
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	f004 fe93 	bl	801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a3fe:	697b      	ldr	r3, [r7, #20]
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	330c      	adds	r3, #12
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	6879      	ldr	r1, [r7, #4]
 801a408:	6978      	ldr	r0, [r7, #20]
 801a40a:	4798      	blx	r3
    return *this;
 801a40c:	68fb      	ldr	r3, [r7, #12]
}
 801a40e:	4618      	mov	r0, r3
 801a410:	371c      	adds	r7, #28
 801a412:	46bd      	mov	sp, r7
 801a414:	bd90      	pop	{r4, r7, pc}
 801a416:	bf00      	nop
 801a418:	08025bcc 	.word	0x08025bcc

0801a41c <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801a41c:	b590      	push	{r4, r7, lr}
 801a41e:	b087      	sub	sp, #28
 801a420:	af00      	add	r7, sp, #0
 801a422:	60f8      	str	r0, [r7, #12]
 801a424:	60b9      	str	r1, [r7, #8]
 801a426:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a428:	2272      	movs	r2, #114	; 0x72
 801a42a:	490e      	ldr	r1, [pc, #56]	; (801a464 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 801a42c:	2038      	movs	r0, #56	; 0x38
 801a42e:	f7ef fe4d 	bl	800a0cc <_ZnwjPKci>
 801a432:	4604      	mov	r4, r0
 801a434:	68b9      	ldr	r1, [r7, #8]
 801a436:	4620      	mov	r0, r4
 801a438:	f000 ffde 	bl	801b3f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a43c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	69db      	ldr	r3, [r3, #28]
 801a442:	6979      	ldr	r1, [r7, #20]
 801a444:	4618      	mov	r0, r3
 801a446:	f004 fe6d 	bl	801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a44a:	697b      	ldr	r3, [r7, #20]
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	3314      	adds	r3, #20
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	6879      	ldr	r1, [r7, #4]
 801a454:	6978      	ldr	r0, [r7, #20]
 801a456:	4798      	blx	r3
    return *this;
 801a458:	68fb      	ldr	r3, [r7, #12]
}
 801a45a:	4618      	mov	r0, r3
 801a45c:	371c      	adds	r7, #28
 801a45e:	46bd      	mov	sp, r7
 801a460:	bd90      	pop	{r4, r7, pc}
 801a462:	bf00      	nop
 801a464:	08025bcc 	.word	0x08025bcc

0801a468 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801a468:	b590      	push	{r4, r7, lr}
 801a46a:	b087      	sub	sp, #28
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	60f8      	str	r0, [r7, #12]
 801a470:	60b9      	str	r1, [r7, #8]
 801a472:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a474:	227a      	movs	r2, #122	; 0x7a
 801a476:	490e      	ldr	r1, [pc, #56]	; (801a4b0 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 801a478:	2038      	movs	r0, #56	; 0x38
 801a47a:	f7ef fe27 	bl	800a0cc <_ZnwjPKci>
 801a47e:	4604      	mov	r4, r0
 801a480:	68b9      	ldr	r1, [r7, #8]
 801a482:	4620      	mov	r0, r4
 801a484:	f000 ffb8 	bl	801b3f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a488:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	69db      	ldr	r3, [r3, #28]
 801a48e:	6979      	ldr	r1, [r7, #20]
 801a490:	4618      	mov	r0, r3
 801a492:	f004 fe47 	bl	801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a496:	697b      	ldr	r3, [r7, #20]
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	3318      	adds	r3, #24
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	6879      	ldr	r1, [r7, #4]
 801a4a0:	6978      	ldr	r0, [r7, #20]
 801a4a2:	4798      	blx	r3
    return *this;
 801a4a4:	68fb      	ldr	r3, [r7, #12]
}
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	371c      	adds	r7, #28
 801a4aa:	46bd      	mov	sp, r7
 801a4ac:	bd90      	pop	{r4, r7, pc}
 801a4ae:	bf00      	nop
 801a4b0:	08025bcc 	.word	0x08025bcc

0801a4b4 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801a4b4:	b5b0      	push	{r4, r5, r7, lr}
 801a4b6:	b086      	sub	sp, #24
 801a4b8:	af02      	add	r7, sp, #8
 801a4ba:	60f8      	str	r0, [r7, #12]
 801a4bc:	60b9      	str	r1, [r7, #8]
 801a4be:	4639      	mov	r1, r7
 801a4c0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801a4c4:	f7f9 fda8 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801a4c8:	4604      	mov	r4, r0
 801a4ca:	6823      	ldr	r3, [r4, #0]
 801a4cc:	3368      	adds	r3, #104	; 0x68
 801a4ce:	681d      	ldr	r5, [r3, #0]
 801a4d0:	f7f9 fdb2 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a4d4:	4603      	mov	r3, r0
 801a4d6:	9300      	str	r3, [sp, #0]
 801a4d8:	2396      	movs	r3, #150	; 0x96
 801a4da:	4a04      	ldr	r2, [pc, #16]	; (801a4ec <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 801a4dc:	4904      	ldr	r1, [pc, #16]	; (801a4f0 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801a4de:	4620      	mov	r0, r4
 801a4e0:	47a8      	blx	r5
    return *this;
 801a4e2:	68fb      	ldr	r3, [r7, #12]
}
 801a4e4:	4618      	mov	r0, r3
 801a4e6:	3710      	adds	r7, #16
 801a4e8:	46bd      	mov	sp, r7
 801a4ea:	bdb0      	pop	{r4, r5, r7, pc}
 801a4ec:	08025bcc 	.word	0x08025bcc
 801a4f0:	08025be8 	.word	0x08025be8

0801a4f4 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801a4f4:	b5b0      	push	{r4, r5, r7, lr}
 801a4f6:	b086      	sub	sp, #24
 801a4f8:	af02      	add	r7, sp, #8
 801a4fa:	60f8      	str	r0, [r7, #12]
 801a4fc:	60b9      	str	r1, [r7, #8]
 801a4fe:	4639      	mov	r1, r7
 801a500:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801a504:	f7f9 fd88 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801a508:	4604      	mov	r4, r0
 801a50a:	6823      	ldr	r3, [r4, #0]
 801a50c:	3368      	adds	r3, #104	; 0x68
 801a50e:	681d      	ldr	r5, [r3, #0]
 801a510:	f7f9 fd92 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a514:	4603      	mov	r3, r0
 801a516:	9300      	str	r3, [sp, #0]
 801a518:	239c      	movs	r3, #156	; 0x9c
 801a51a:	4a04      	ldr	r2, [pc, #16]	; (801a52c <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 801a51c:	4904      	ldr	r1, [pc, #16]	; (801a530 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801a51e:	4620      	mov	r0, r4
 801a520:	47a8      	blx	r5
    return *this;
 801a522:	68fb      	ldr	r3, [r7, #12]
}
 801a524:	4618      	mov	r0, r3
 801a526:	3710      	adds	r7, #16
 801a528:	46bd      	mov	sp, r7
 801a52a:	bdb0      	pop	{r4, r5, r7, pc}
 801a52c:	08025bcc 	.word	0x08025bcc
 801a530:	08025c08 	.word	0x08025c08

0801a534 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801a534:	b590      	push	{r4, r7, lr}
 801a536:	b087      	sub	sp, #28
 801a538:	af00      	add	r7, sp, #0
 801a53a:	60f8      	str	r0, [r7, #12]
 801a53c:	60b9      	str	r1, [r7, #8]
 801a53e:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a542:	22a4      	movs	r2, #164	; 0xa4
 801a544:	490e      	ldr	r1, [pc, #56]	; (801a580 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801a546:	2038      	movs	r0, #56	; 0x38
 801a548:	f7ef fdc0 	bl	800a0cc <_ZnwjPKci>
 801a54c:	4604      	mov	r4, r0
 801a54e:	68b9      	ldr	r1, [r7, #8]
 801a550:	4620      	mov	r0, r4
 801a552:	f000 ff51 	bl	801b3f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a556:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a558:	68fb      	ldr	r3, [r7, #12]
 801a55a:	69db      	ldr	r3, [r3, #28]
 801a55c:	6979      	ldr	r1, [r7, #20]
 801a55e:	4618      	mov	r0, r3
 801a560:	f004 fde0 	bl	801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a564:	697b      	ldr	r3, [r7, #20]
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	3324      	adds	r3, #36	; 0x24
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	ed97 0b00 	vldr	d0, [r7]
 801a570:	6978      	ldr	r0, [r7, #20]
 801a572:	4798      	blx	r3
    return *this;
 801a574:	68fb      	ldr	r3, [r7, #12]
}
 801a576:	4618      	mov	r0, r3
 801a578:	371c      	adds	r7, #28
 801a57a:	46bd      	mov	sp, r7
 801a57c:	bd90      	pop	{r4, r7, pc}
 801a57e:	bf00      	nop
 801a580:	08025bcc 	.word	0x08025bcc

0801a584 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801a584:	b590      	push	{r4, r7, lr}
 801a586:	b089      	sub	sp, #36	; 0x24
 801a588:	af00      	add	r7, sp, #0
 801a58a:	6178      	str	r0, [r7, #20]
 801a58c:	6139      	str	r1, [r7, #16]
 801a58e:	ed87 0b02 	vstr	d0, [r7, #8]
 801a592:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a596:	22ac      	movs	r2, #172	; 0xac
 801a598:	490f      	ldr	r1, [pc, #60]	; (801a5d8 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 801a59a:	2038      	movs	r0, #56	; 0x38
 801a59c:	f7ef fd96 	bl	800a0cc <_ZnwjPKci>
 801a5a0:	4604      	mov	r4, r0
 801a5a2:	6939      	ldr	r1, [r7, #16]
 801a5a4:	4620      	mov	r0, r4
 801a5a6:	f000 ff27 	bl	801b3f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a5aa:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 801a5ac:	697b      	ldr	r3, [r7, #20]
 801a5ae:	69db      	ldr	r3, [r3, #28]
 801a5b0:	69f9      	ldr	r1, [r7, #28]
 801a5b2:	4618      	mov	r0, r3
 801a5b4:	f004 fdb6 	bl	801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 801a5b8:	69fb      	ldr	r3, [r7, #28]
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	3328      	adds	r3, #40	; 0x28
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	ed97 1b00 	vldr	d1, [r7]
 801a5c4:	ed97 0b02 	vldr	d0, [r7, #8]
 801a5c8:	69f8      	ldr	r0, [r7, #28]
 801a5ca:	4798      	blx	r3
    return *this;
 801a5cc:	697b      	ldr	r3, [r7, #20]
}
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	3724      	adds	r7, #36	; 0x24
 801a5d2:	46bd      	mov	sp, r7
 801a5d4:	bd90      	pop	{r4, r7, pc}
 801a5d6:	bf00      	nop
 801a5d8:	08025bcc 	.word	0x08025bcc

0801a5dc <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 801a5dc:	b590      	push	{r4, r7, lr}
 801a5de:	b087      	sub	sp, #28
 801a5e0:	af00      	add	r7, sp, #0
 801a5e2:	60f8      	str	r0, [r7, #12]
 801a5e4:	60b9      	str	r1, [r7, #8]
 801a5e6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a5e8:	22b4      	movs	r2, #180	; 0xb4
 801a5ea:	490e      	ldr	r1, [pc, #56]	; (801a624 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 801a5ec:	2038      	movs	r0, #56	; 0x38
 801a5ee:	f7ef fd6d 	bl	800a0cc <_ZnwjPKci>
 801a5f2:	4604      	mov	r4, r0
 801a5f4:	68b9      	ldr	r1, [r7, #8]
 801a5f6:	4620      	mov	r0, r4
 801a5f8:	f000 fefe 	bl	801b3f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a5fc:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a5fe:	68fb      	ldr	r3, [r7, #12]
 801a600:	69db      	ldr	r3, [r3, #28]
 801a602:	6979      	ldr	r1, [r7, #20]
 801a604:	4618      	mov	r0, r3
 801a606:	f004 fd8d 	bl	801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a60a:	697b      	ldr	r3, [r7, #20]
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	3338      	adds	r3, #56	; 0x38
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	6879      	ldr	r1, [r7, #4]
 801a614:	6978      	ldr	r0, [r7, #20]
 801a616:	4798      	blx	r3
    return *this;
 801a618:	68fb      	ldr	r3, [r7, #12]
}
 801a61a:	4618      	mov	r0, r3
 801a61c:	371c      	adds	r7, #28
 801a61e:	46bd      	mov	sp, r7
 801a620:	bd90      	pop	{r4, r7, pc}
 801a622:	bf00      	nop
 801a624:	08025bcc 	.word	0x08025bcc

0801a628 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 801a628:	b590      	push	{r4, r7, lr}
 801a62a:	b087      	sub	sp, #28
 801a62c:	af00      	add	r7, sp, #0
 801a62e:	60f8      	str	r0, [r7, #12]
 801a630:	60b9      	str	r1, [r7, #8]
 801a632:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a634:	22bc      	movs	r2, #188	; 0xbc
 801a636:	490e      	ldr	r1, [pc, #56]	; (801a670 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 801a638:	2038      	movs	r0, #56	; 0x38
 801a63a:	f7ef fd47 	bl	800a0cc <_ZnwjPKci>
 801a63e:	4604      	mov	r4, r0
 801a640:	68b9      	ldr	r1, [r7, #8]
 801a642:	4620      	mov	r0, r4
 801a644:	f000 fed8 	bl	801b3f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a648:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	69db      	ldr	r3, [r3, #28]
 801a64e:	6979      	ldr	r1, [r7, #20]
 801a650:	4618      	mov	r0, r3
 801a652:	f004 fd67 	bl	801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a656:	697b      	ldr	r3, [r7, #20]
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	332c      	adds	r3, #44	; 0x2c
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	6879      	ldr	r1, [r7, #4]
 801a660:	6978      	ldr	r0, [r7, #20]
 801a662:	4798      	blx	r3
    return *this;
 801a664:	68fb      	ldr	r3, [r7, #12]
}
 801a666:	4618      	mov	r0, r3
 801a668:	371c      	adds	r7, #28
 801a66a:	46bd      	mov	sp, r7
 801a66c:	bd90      	pop	{r4, r7, pc}
 801a66e:	bf00      	nop
 801a670:	08025bcc 	.word	0x08025bcc

0801a674 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801a674:	b590      	push	{r4, r7, lr}
 801a676:	b087      	sub	sp, #28
 801a678:	af00      	add	r7, sp, #0
 801a67a:	60f8      	str	r0, [r7, #12]
 801a67c:	60b9      	str	r1, [r7, #8]
 801a67e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a680:	22c4      	movs	r2, #196	; 0xc4
 801a682:	490e      	ldr	r1, [pc, #56]	; (801a6bc <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801a684:	2038      	movs	r0, #56	; 0x38
 801a686:	f7ef fd21 	bl	800a0cc <_ZnwjPKci>
 801a68a:	4604      	mov	r4, r0
 801a68c:	68b9      	ldr	r1, [r7, #8]
 801a68e:	4620      	mov	r0, r4
 801a690:	f000 feb2 	bl	801b3f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a694:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a696:	68fb      	ldr	r3, [r7, #12]
 801a698:	69db      	ldr	r3, [r3, #28]
 801a69a:	6979      	ldr	r1, [r7, #20]
 801a69c:	4618      	mov	r0, r3
 801a69e:	f004 fd41 	bl	801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a6a2:	697b      	ldr	r3, [r7, #20]
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	3330      	adds	r3, #48	; 0x30
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	6879      	ldr	r1, [r7, #4]
 801a6ac:	6978      	ldr	r0, [r7, #20]
 801a6ae:	4798      	blx	r3
    return *this;
 801a6b0:	68fb      	ldr	r3, [r7, #12]
}
 801a6b2:	4618      	mov	r0, r3
 801a6b4:	371c      	adds	r7, #28
 801a6b6:	46bd      	mov	sp, r7
 801a6b8:	bd90      	pop	{r4, r7, pc}
 801a6ba:	bf00      	nop
 801a6bc:	08025bcc 	.word	0x08025bcc

0801a6c0 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801a6c0:	b590      	push	{r4, r7, lr}
 801a6c2:	b087      	sub	sp, #28
 801a6c4:	af00      	add	r7, sp, #0
 801a6c6:	60f8      	str	r0, [r7, #12]
 801a6c8:	60b9      	str	r1, [r7, #8]
 801a6ca:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a6cc:	22cc      	movs	r2, #204	; 0xcc
 801a6ce:	490e      	ldr	r1, [pc, #56]	; (801a708 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801a6d0:	2038      	movs	r0, #56	; 0x38
 801a6d2:	f7ef fcfb 	bl	800a0cc <_ZnwjPKci>
 801a6d6:	4604      	mov	r4, r0
 801a6d8:	68b9      	ldr	r1, [r7, #8]
 801a6da:	4620      	mov	r0, r4
 801a6dc:	f000 fe8c 	bl	801b3f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a6e0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a6e2:	68fb      	ldr	r3, [r7, #12]
 801a6e4:	69db      	ldr	r3, [r3, #28]
 801a6e6:	6979      	ldr	r1, [r7, #20]
 801a6e8:	4618      	mov	r0, r3
 801a6ea:	f004 fd1b 	bl	801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a6ee:	697b      	ldr	r3, [r7, #20]
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	3334      	adds	r3, #52	; 0x34
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	6879      	ldr	r1, [r7, #4]
 801a6f8:	6978      	ldr	r0, [r7, #20]
 801a6fa:	4798      	blx	r3
    return *this;
 801a6fc:	68fb      	ldr	r3, [r7, #12]
}
 801a6fe:	4618      	mov	r0, r3
 801a700:	371c      	adds	r7, #28
 801a702:	46bd      	mov	sp, r7
 801a704:	bd90      	pop	{r4, r7, pc}
 801a706:	bf00      	nop
 801a708:	08025bcc 	.word	0x08025bcc

0801a70c <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801a70c:	b590      	push	{r4, r7, lr}
 801a70e:	b087      	sub	sp, #28
 801a710:	af00      	add	r7, sp, #0
 801a712:	60f8      	str	r0, [r7, #12]
 801a714:	60b9      	str	r1, [r7, #8]
 801a716:	607a      	str	r2, [r7, #4]
 801a718:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a71a:	22d4      	movs	r2, #212	; 0xd4
 801a71c:	490e      	ldr	r1, [pc, #56]	; (801a758 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801a71e:	2038      	movs	r0, #56	; 0x38
 801a720:	f7ef fcd4 	bl	800a0cc <_ZnwjPKci>
 801a724:	4604      	mov	r4, r0
 801a726:	68b9      	ldr	r1, [r7, #8]
 801a728:	4620      	mov	r0, r4
 801a72a:	f000 fe65 	bl	801b3f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a72e:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a730:	68fb      	ldr	r3, [r7, #12]
 801a732:	69db      	ldr	r3, [r3, #28]
 801a734:	6979      	ldr	r1, [r7, #20]
 801a736:	4618      	mov	r0, r3
 801a738:	f004 fcf4 	bl	801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 801a73c:	697b      	ldr	r3, [r7, #20]
 801a73e:	681b      	ldr	r3, [r3, #0]
 801a740:	333c      	adds	r3, #60	; 0x3c
 801a742:	681b      	ldr	r3, [r3, #0]
 801a744:	683a      	ldr	r2, [r7, #0]
 801a746:	6879      	ldr	r1, [r7, #4]
 801a748:	6978      	ldr	r0, [r7, #20]
 801a74a:	4798      	blx	r3
    return *this;
 801a74c:	68fb      	ldr	r3, [r7, #12]
}
 801a74e:	4618      	mov	r0, r3
 801a750:	371c      	adds	r7, #28
 801a752:	46bd      	mov	sp, r7
 801a754:	bd90      	pop	{r4, r7, pc}
 801a756:	bf00      	nop
 801a758:	08025bcc 	.word	0x08025bcc

0801a75c <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801a75c:	b590      	push	{r4, r7, lr}
 801a75e:	b087      	sub	sp, #28
 801a760:	af00      	add	r7, sp, #0
 801a762:	60f8      	str	r0, [r7, #12]
 801a764:	60b9      	str	r1, [r7, #8]
 801a766:	607a      	str	r2, [r7, #4]
 801a768:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a76a:	22dc      	movs	r2, #220	; 0xdc
 801a76c:	490e      	ldr	r1, [pc, #56]	; (801a7a8 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 801a76e:	2038      	movs	r0, #56	; 0x38
 801a770:	f7ef fcac 	bl	800a0cc <_ZnwjPKci>
 801a774:	4604      	mov	r4, r0
 801a776:	6879      	ldr	r1, [r7, #4]
 801a778:	4620      	mov	r0, r4
 801a77a:	f000 fe3d 	bl	801b3f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a77e:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a780:	68fb      	ldr	r3, [r7, #12]
 801a782:	69db      	ldr	r3, [r3, #28]
 801a784:	6979      	ldr	r1, [r7, #20]
 801a786:	4618      	mov	r0, r3
 801a788:	f004 fccc 	bl	801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801a78c:	697b      	ldr	r3, [r7, #20]
 801a78e:	681b      	ldr	r3, [r3, #0]
 801a790:	3340      	adds	r3, #64	; 0x40
 801a792:	681b      	ldr	r3, [r3, #0]
 801a794:	683a      	ldr	r2, [r7, #0]
 801a796:	68b9      	ldr	r1, [r7, #8]
 801a798:	6978      	ldr	r0, [r7, #20]
 801a79a:	4798      	blx	r3
    return *this;
 801a79c:	68fb      	ldr	r3, [r7, #12]
}
 801a79e:	4618      	mov	r0, r3
 801a7a0:	371c      	adds	r7, #28
 801a7a2:	46bd      	mov	sp, r7
 801a7a4:	bd90      	pop	{r4, r7, pc}
 801a7a6:	bf00      	nop
 801a7a8:	08025bcc 	.word	0x08025bcc

0801a7ac <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 801a7ac:	b590      	push	{r4, r7, lr}
 801a7ae:	b087      	sub	sp, #28
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	60f8      	str	r0, [r7, #12]
 801a7b4:	60b9      	str	r1, [r7, #8]
 801a7b6:	607a      	str	r2, [r7, #4]
 801a7b8:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a7ba:	22e4      	movs	r2, #228	; 0xe4
 801a7bc:	4911      	ldr	r1, [pc, #68]	; (801a804 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801a7be:	2038      	movs	r0, #56	; 0x38
 801a7c0:	f7ef fc84 	bl	800a0cc <_ZnwjPKci>
 801a7c4:	4604      	mov	r4, r0
 801a7c6:	68b9      	ldr	r1, [r7, #8]
 801a7c8:	4620      	mov	r0, r4
 801a7ca:	f000 fe15 	bl	801b3f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a7ce:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801a7d0:	68fb      	ldr	r3, [r7, #12]
 801a7d2:	6a1b      	ldr	r3, [r3, #32]
 801a7d4:	6979      	ldr	r1, [r7, #20]
 801a7d6:	4618      	mov	r0, r3
 801a7d8:	f004 fca4 	bl	801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a7dc:	697b      	ldr	r3, [r7, #20]
 801a7de:	681b      	ldr	r3, [r3, #0]
 801a7e0:	3330      	adds	r3, #48	; 0x30
 801a7e2:	681b      	ldr	r3, [r3, #0]
 801a7e4:	6879      	ldr	r1, [r7, #4]
 801a7e6:	6978      	ldr	r0, [r7, #20]
 801a7e8:	4798      	blx	r3
    newParameter->setSize(size);
 801a7ea:	697b      	ldr	r3, [r7, #20]
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	3348      	adds	r3, #72	; 0x48
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	6839      	ldr	r1, [r7, #0]
 801a7f4:	6978      	ldr	r0, [r7, #20]
 801a7f6:	4798      	blx	r3
    return *this;
 801a7f8:	68fb      	ldr	r3, [r7, #12]
}
 801a7fa:	4618      	mov	r0, r3
 801a7fc:	371c      	adds	r7, #28
 801a7fe:	46bd      	mov	sp, r7
 801a800:	bd90      	pop	{r4, r7, pc}
 801a802:	bf00      	nop
 801a804:	08025bcc 	.word	0x08025bcc

0801a808 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 801a808:	b590      	push	{r4, r7, lr}
 801a80a:	b087      	sub	sp, #28
 801a80c:	af00      	add	r7, sp, #0
 801a80e:	60f8      	str	r0, [r7, #12]
 801a810:	60b9      	str	r1, [r7, #8]
 801a812:	607a      	str	r2, [r7, #4]
 801a814:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a816:	22ed      	movs	r2, #237	; 0xed
 801a818:	490e      	ldr	r1, [pc, #56]	; (801a854 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801a81a:	2038      	movs	r0, #56	; 0x38
 801a81c:	f7ef fc56 	bl	800a0cc <_ZnwjPKci>
 801a820:	4604      	mov	r4, r0
 801a822:	6879      	ldr	r1, [r7, #4]
 801a824:	4620      	mov	r0, r4
 801a826:	f000 fde7 	bl	801b3f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a82a:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801a82c:	68fb      	ldr	r3, [r7, #12]
 801a82e:	6a1b      	ldr	r3, [r3, #32]
 801a830:	6979      	ldr	r1, [r7, #20]
 801a832:	4618      	mov	r0, r3
 801a834:	f004 fc76 	bl	801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801a838:	697b      	ldr	r3, [r7, #20]
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	3340      	adds	r3, #64	; 0x40
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	683a      	ldr	r2, [r7, #0]
 801a842:	68b9      	ldr	r1, [r7, #8]
 801a844:	6978      	ldr	r0, [r7, #20]
 801a846:	4798      	blx	r3
    return *this;
 801a848:	68fb      	ldr	r3, [r7, #12]
}
 801a84a:	4618      	mov	r0, r3
 801a84c:	371c      	adds	r7, #28
 801a84e:	46bd      	mov	sp, r7
 801a850:	bd90      	pop	{r4, r7, pc}
 801a852:	bf00      	nop
 801a854:	08025bcc 	.word	0x08025bcc

0801a858 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 801a858:	b590      	push	{r4, r7, lr}
 801a85a:	b083      	sub	sp, #12
 801a85c:	af00      	add	r7, sp, #0
 801a85e:	6078      	str	r0, [r7, #4]
 801a860:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	3318      	adds	r3, #24
 801a868:	681c      	ldr	r4, [r3, #0]
 801a86a:	2300      	movs	r3, #0
 801a86c:	2200      	movs	r2, #0
 801a86e:	6839      	ldr	r1, [r7, #0]
 801a870:	6878      	ldr	r0, [r7, #4]
 801a872:	47a0      	blx	r4
 801a874:	4603      	mov	r3, r0
}
 801a876:	4618      	mov	r0, r3
 801a878:	370c      	adds	r7, #12
 801a87a:	46bd      	mov	sp, r7
 801a87c:	bd90      	pop	{r4, r7, pc}
	...

0801a880 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 801a880:	b580      	push	{r7, lr}
 801a882:	b086      	sub	sp, #24
 801a884:	af00      	add	r7, sp, #0
 801a886:	60f8      	str	r0, [r7, #12]
 801a888:	60b9      	str	r1, [r7, #8]
 801a88a:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801a88c:	68bb      	ldr	r3, [r7, #8]
 801a88e:	69db      	ldr	r3, [r3, #28]
 801a890:	6879      	ldr	r1, [r7, #4]
 801a892:	4618      	mov	r0, r3
 801a894:	f004 fc7c 	bl	801f190 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a898:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 801a89a:	697b      	ldr	r3, [r7, #20]
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d008      	beq.n	801a8b2 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 801a8a0:	697b      	ldr	r3, [r7, #20]
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	3360      	adds	r3, #96	; 0x60
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	68fa      	ldr	r2, [r7, #12]
 801a8aa:	6979      	ldr	r1, [r7, #20]
 801a8ac:	4610      	mov	r0, r2
 801a8ae:	4798      	blx	r3
 801a8b0:	e004      	b.n	801a8bc <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801a8b2:	68fb      	ldr	r3, [r7, #12]
 801a8b4:	4903      	ldr	r1, [pc, #12]	; (801a8c4 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	f7f2 fe10 	bl	800d4dc <_Z10StringFromPKc>
}
 801a8bc:	68f8      	ldr	r0, [r7, #12]
 801a8be:	3718      	adds	r7, #24
 801a8c0:	46bd      	mov	sp, r7
 801a8c2:	bd80      	pop	{r7, pc}
 801a8c4:	08025bc8 	.word	0x08025bc8

0801a8c8 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 801a8c8:	b580      	push	{r7, lr}
 801a8ca:	b084      	sub	sp, #16
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	6078      	str	r0, [r7, #4]
 801a8d0:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	69db      	ldr	r3, [r3, #28]
 801a8d6:	6839      	ldr	r1, [r7, #0]
 801a8d8:	4618      	mov	r0, r3
 801a8da:	f004 fc59 	bl	801f190 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a8de:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	bf14      	ite	ne
 801a8e6:	2301      	movne	r3, #1
 801a8e8:	2300      	moveq	r3, #0
 801a8ea:	b2db      	uxtb	r3, r3
}
 801a8ec:	4618      	mov	r0, r3
 801a8ee:	3710      	adds	r7, #16
 801a8f0:	46bd      	mov	sp, r7
 801a8f2:	bd80      	pop	{r7, pc}

0801a8f4 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801a8f4:	b580      	push	{r7, lr}
 801a8f6:	b084      	sub	sp, #16
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	6078      	str	r0, [r7, #4]
 801a8fc:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	6a1b      	ldr	r3, [r3, #32]
 801a902:	6839      	ldr	r1, [r7, #0]
 801a904:	4618      	mov	r0, r3
 801a906:	f004 fc43 	bl	801f190 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a90a:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801a90c:	68fb      	ldr	r3, [r7, #12]
 801a90e:	2b00      	cmp	r3, #0
 801a910:	bf14      	ite	ne
 801a912:	2301      	movne	r3, #1
 801a914:	2300      	moveq	r3, #0
 801a916:	b2db      	uxtb	r3, r3
}
 801a918:	4618      	mov	r0, r3
 801a91a:	3710      	adds	r7, #16
 801a91c:	46bd      	mov	sp, r7
 801a91e:	bd80      	pop	{r7, pc}

0801a920 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 801a920:	b590      	push	{r4, r7, lr}
 801a922:	b089      	sub	sp, #36	; 0x24
 801a924:	af00      	add	r7, sp, #0
 801a926:	60f8      	str	r0, [r7, #12]
 801a928:	60b9      	str	r1, [r7, #8]
 801a92a:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801a92c:	68bb      	ldr	r3, [r7, #8]
 801a92e:	69db      	ldr	r3, [r3, #28]
 801a930:	6879      	ldr	r1, [r7, #4]
 801a932:	4618      	mov	r0, r3
 801a934:	f004 fc2c 	bl	801f190 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a938:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801a93a:	2400      	movs	r4, #0
 801a93c:	69fb      	ldr	r3, [r7, #28]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d004      	beq.n	801a94c <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801a942:	69f9      	ldr	r1, [r7, #28]
 801a944:	68f8      	ldr	r0, [r7, #12]
 801a946:	f7f0 f829 	bl	800a99c <_ZN14MockNamedValueC1ERKS_>
 801a94a:	e00c      	b.n	801a966 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 801a94c:	f107 0314 	add.w	r3, r7, #20
 801a950:	490a      	ldr	r1, [pc, #40]	; (801a97c <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801a952:	4618      	mov	r0, r3
 801a954:	f7f1 ff7d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801a958:	2401      	movs	r4, #1
 801a95a:	f107 0314 	add.w	r3, r7, #20
 801a95e:	4619      	mov	r1, r3
 801a960:	68f8      	ldr	r0, [r7, #12]
 801a962:	f002 fc9b 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
 801a966:	2c00      	cmp	r4, #0
 801a968:	d004      	beq.n	801a974 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 801a96a:	f107 0314 	add.w	r3, r7, #20
 801a96e:	4618      	mov	r0, r3
 801a970:	f7f2 fb27 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 801a974:	68f8      	ldr	r0, [r7, #12]
 801a976:	3724      	adds	r7, #36	; 0x24
 801a978:	46bd      	mov	sp, r7
 801a97a:	bd90      	pop	{r4, r7, pc}
 801a97c:	08025bc8 	.word	0x08025bc8

0801a980 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 801a980:	b590      	push	{r4, r7, lr}
 801a982:	b089      	sub	sp, #36	; 0x24
 801a984:	af00      	add	r7, sp, #0
 801a986:	60f8      	str	r0, [r7, #12]
 801a988:	60b9      	str	r1, [r7, #8]
 801a98a:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801a98c:	68bb      	ldr	r3, [r7, #8]
 801a98e:	6a1b      	ldr	r3, [r3, #32]
 801a990:	6879      	ldr	r1, [r7, #4]
 801a992:	4618      	mov	r0, r3
 801a994:	f004 fbfc 	bl	801f190 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a998:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801a99a:	2400      	movs	r4, #0
 801a99c:	69fb      	ldr	r3, [r7, #28]
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	d004      	beq.n	801a9ac <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801a9a2:	69f9      	ldr	r1, [r7, #28]
 801a9a4:	68f8      	ldr	r0, [r7, #12]
 801a9a6:	f7ef fff9 	bl	800a99c <_ZN14MockNamedValueC1ERKS_>
 801a9aa:	e00c      	b.n	801a9c6 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 801a9ac:	f107 0314 	add.w	r3, r7, #20
 801a9b0:	490a      	ldr	r1, [pc, #40]	; (801a9dc <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801a9b2:	4618      	mov	r0, r3
 801a9b4:	f7f1 ff4d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801a9b8:	2401      	movs	r4, #1
 801a9ba:	f107 0314 	add.w	r3, r7, #20
 801a9be:	4619      	mov	r1, r3
 801a9c0:	68f8      	ldr	r0, [r7, #12]
 801a9c2:	f002 fc6b 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
 801a9c6:	2c00      	cmp	r4, #0
 801a9c8:	d004      	beq.n	801a9d4 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 801a9ca:	f107 0314 	add.w	r3, r7, #20
 801a9ce:	4618      	mov	r0, r3
 801a9d0:	f7f2 faf7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 801a9d4:	68f8      	ldr	r0, [r7, #12]
 801a9d6:	3724      	adds	r7, #36	; 0x24
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	bd90      	pop	{r4, r7, pc}
 801a9dc:	08025bc8 	.word	0x08025bc8

0801a9e0 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 801a9e0:	b580      	push	{r7, lr}
 801a9e2:	b084      	sub	sp, #16
 801a9e4:	af00      	add	r7, sp, #0
 801a9e6:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	69db      	ldr	r3, [r3, #28]
 801a9ec:	4618      	mov	r0, r3
 801a9ee:	f004 fbfe 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 801a9f2:	60f8      	str	r0, [r7, #12]
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d014      	beq.n	801aa24 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 801a9fa:	68f9      	ldr	r1, [r7, #12]
 801a9fc:	6878      	ldr	r0, [r7, #4]
 801a9fe:	f000 fced 	bl	801b3dc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801aa02:	4603      	mov	r3, r0
 801aa04:	4618      	mov	r0, r3
 801aa06:	f000 fd1f 	bl	801b448 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801aa0a:	4603      	mov	r3, r0
 801aa0c:	f083 0301 	eor.w	r3, r3, #1
 801aa10:	b2db      	uxtb	r3, r3
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	d001      	beq.n	801aa1a <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801aa16:	2300      	movs	r3, #0
 801aa18:	e023      	b.n	801aa62 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 801aa1a:	68f8      	ldr	r0, [r7, #12]
 801aa1c:	f004 faf0 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 801aa20:	60f8      	str	r0, [r7, #12]
 801aa22:	e7e7      	b.n	801a9f4 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	6a1b      	ldr	r3, [r3, #32]
 801aa28:	4618      	mov	r0, r3
 801aa2a:	f004 fbe0 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 801aa2e:	60f8      	str	r0, [r7, #12]
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d014      	beq.n	801aa60 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801aa36:	68f9      	ldr	r1, [r7, #12]
 801aa38:	6878      	ldr	r0, [r7, #4]
 801aa3a:	f000 fccf 	bl	801b3dc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801aa3e:	4603      	mov	r3, r0
 801aa40:	4618      	mov	r0, r3
 801aa42:	f000 fd01 	bl	801b448 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801aa46:	4603      	mov	r3, r0
 801aa48:	f083 0301 	eor.w	r3, r3, #1
 801aa4c:	b2db      	uxtb	r3, r3
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d001      	beq.n	801aa56 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801aa52:	2300      	movs	r3, #0
 801aa54:	e005      	b.n	801aa62 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801aa56:	68f8      	ldr	r0, [r7, #12]
 801aa58:	f004 fad2 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 801aa5c:	60f8      	str	r0, [r7, #12]
 801aa5e:	e7e7      	b.n	801aa30 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 801aa60:	2301      	movs	r3, #1
}
 801aa62:	4618      	mov	r0, r3
 801aa64:	3710      	adds	r7, #16
 801aa66:	46bd      	mov	sp, r7
 801aa68:	bd80      	pop	{r7, pc}

0801aa6a <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 801aa6a:	b480      	push	{r7}
 801aa6c:	b083      	sub	sp, #12
 801aa6e:	af00      	add	r7, sp, #0
 801aa70:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	2201      	movs	r2, #1
 801aa76:	731a      	strb	r2, [r3, #12]
    return *this;
 801aa78:	687b      	ldr	r3, [r7, #4]
}
 801aa7a:	4618      	mov	r0, r3
 801aa7c:	370c      	adds	r7, #12
 801aa7e:	46bd      	mov	sp, r7
 801aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa84:	4770      	bx	lr

0801aa86 <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801aa86:	b480      	push	{r7}
 801aa88:	b083      	sub	sp, #12
 801aa8a:	af00      	add	r7, sp, #0
 801aa8c:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa96:	429a      	cmp	r2, r3
 801aa98:	bf0c      	ite	eq
 801aa9a:	2301      	moveq	r3, #1
 801aa9c:	2300      	movne	r3, #0
 801aa9e:	b2db      	uxtb	r3, r3
}
 801aaa0:	4618      	mov	r0, r3
 801aaa2:	370c      	adds	r7, #12
 801aaa4:	46bd      	mov	sp, r7
 801aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaaa:	4770      	bx	lr

0801aaac <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 801aaac:	b480      	push	{r7}
 801aaae:	b083      	sub	sp, #12
 801aab0:	af00      	add	r7, sp, #0
 801aab2:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aabc:	429a      	cmp	r2, r3
 801aabe:	bf34      	ite	cc
 801aac0:	2301      	movcc	r3, #1
 801aac2:	2300      	movcs	r3, #0
 801aac4:	b2db      	uxtb	r3, r3
}
 801aac6:	4618      	mov	r0, r3
 801aac8:	370c      	adds	r7, #12
 801aaca:	46bd      	mov	sp, r7
 801aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aad0:	4770      	bx	lr

0801aad2 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801aad2:	b580      	push	{r7, lr}
 801aad4:	b082      	sub	sp, #8
 801aad6:	af00      	add	r7, sp, #0
 801aad8:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	33cc      	adds	r3, #204	; 0xcc
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	6878      	ldr	r0, [r7, #4]
 801aae4:	4798      	blx	r3
 801aae6:	4603      	mov	r3, r0
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d00c      	beq.n	801ab06 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	7b1b      	ldrb	r3, [r3, #12]
 801aaf0:	f083 0301 	eor.w	r3, r3, #1
 801aaf4:	b2db      	uxtb	r3, r3
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d103      	bne.n	801ab02 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	7b5b      	ldrb	r3, [r3, #13]
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	d001      	beq.n	801ab06 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801ab02:	2301      	movs	r3, #1
 801ab04:	e000      	b.n	801ab08 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801ab06:	2300      	movs	r3, #0
}
 801ab08:	4618      	mov	r0, r3
 801ab0a:	3708      	adds	r7, #8
 801ab0c:	46bd      	mov	sp, r7
 801ab0e:	bd80      	pop	{r7, pc}

0801ab10 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801ab10:	b580      	push	{r7, lr}
 801ab12:	b082      	sub	sp, #8
 801ab14:	af00      	add	r7, sp, #0
 801ab16:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	33d0      	adds	r3, #208	; 0xd0
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	6878      	ldr	r0, [r7, #4]
 801ab22:	4798      	blx	r3
 801ab24:	4603      	mov	r3, r0
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d006      	beq.n	801ab38 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d001      	beq.n	801ab38 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801ab34:	2301      	movs	r3, #1
 801ab36:	e000      	b.n	801ab3a <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 801ab38:	2300      	movs	r3, #0
}
 801ab3a:	4618      	mov	r0, r3
 801ab3c:	3708      	adds	r7, #8
 801ab3e:	46bd      	mov	sp, r7
 801ab40:	bd80      	pop	{r7, pc}

0801ab42 <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801ab42:	b580      	push	{r7, lr}
 801ab44:	b082      	sub	sp, #8
 801ab46:	af00      	add	r7, sp, #0
 801ab48:	6078      	str	r0, [r7, #4]
 801ab4a:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ab50:	1c5a      	adds	r2, r3, #1
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	691b      	ldr	r3, [r3, #16]
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d00c      	beq.n	801ab78 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801ab62:	683a      	ldr	r2, [r7, #0]
 801ab64:	429a      	cmp	r2, r3
 801ab66:	d304      	bcc.n	801ab72 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	695b      	ldr	r3, [r3, #20]
 801ab6c:	683a      	ldr	r2, [r7, #0]
 801ab6e:	429a      	cmp	r2, r3
 801ab70:	d902      	bls.n	801ab78 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	2201      	movs	r2, #1
 801ab76:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	33ec      	adds	r3, #236	; 0xec
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	6878      	ldr	r0, [r7, #4]
 801ab82:	4798      	blx	r3
}
 801ab84:	bf00      	nop
 801ab86:	3708      	adds	r7, #8
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	bd80      	pop	{r7, pc}

0801ab8c <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 801ab8c:	b480      	push	{r7}
 801ab8e:	b083      	sub	sp, #12
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	2201      	movs	r2, #1
 801ab98:	735a      	strb	r2, [r3, #13]
}
 801ab9a:	bf00      	nop
 801ab9c:	370c      	adds	r7, #12
 801ab9e:	46bd      	mov	sp, r7
 801aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aba4:	4770      	bx	lr

0801aba6 <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801aba6:	b480      	push	{r7}
 801aba8:	b083      	sub	sp, #12
 801abaa:	af00      	add	r7, sp, #0
 801abac:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	2201      	movs	r2, #1
 801abb2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801abb6:	bf00      	nop
 801abb8:	370c      	adds	r7, #12
 801abba:	46bd      	mov	sp, r7
 801abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abc0:	4770      	bx	lr

0801abc2 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801abc2:	b580      	push	{r7, lr}
 801abc4:	b084      	sub	sp, #16
 801abc6:	af00      	add	r7, sp, #0
 801abc8:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801abd0:	f083 0301 	eor.w	r3, r3, #1
 801abd4:	b2da      	uxtb	r2, r3
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	2200      	movs	r2, #0
 801abe0:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	69db      	ldr	r3, [r3, #28]
 801abe6:	4618      	mov	r0, r3
 801abe8:	f004 fb01 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 801abec:	60f8      	str	r0, [r7, #12]
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d00d      	beq.n	801ac10 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801abf4:	68f9      	ldr	r1, [r7, #12]
 801abf6:	6878      	ldr	r0, [r7, #4]
 801abf8:	f000 fbf0 	bl	801b3dc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801abfc:	4603      	mov	r3, r0
 801abfe:	2100      	movs	r1, #0
 801ac00:	4618      	mov	r0, r3
 801ac02:	f000 fc11 	bl	801b428 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801ac06:	68f8      	ldr	r0, [r7, #12]
 801ac08:	f004 f9fa 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 801ac0c:	60f8      	str	r0, [r7, #12]
 801ac0e:	e7ee      	b.n	801abee <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	6a1b      	ldr	r3, [r3, #32]
 801ac14:	4618      	mov	r0, r3
 801ac16:	f004 faea 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 801ac1a:	60f8      	str	r0, [r7, #12]
 801ac1c:	68fb      	ldr	r3, [r7, #12]
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d00d      	beq.n	801ac3e <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801ac22:	68f9      	ldr	r1, [r7, #12]
 801ac24:	6878      	ldr	r0, [r7, #4]
 801ac26:	f000 fbd9 	bl	801b3dc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801ac2a:	4603      	mov	r3, r0
 801ac2c:	2100      	movs	r1, #0
 801ac2e:	4618      	mov	r0, r3
 801ac30:	f000 fbfa 	bl	801b428 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801ac34:	68f8      	ldr	r0, [r7, #12]
 801ac36:	f004 f9e3 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 801ac3a:	60f8      	str	r0, [r7, #12]
 801ac3c:	e7ee      	b.n	801ac1c <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 801ac3e:	bf00      	nop
 801ac40:	3710      	adds	r7, #16
 801ac42:	46bd      	mov	sp, r7
 801ac44:	bd80      	pop	{r7, pc}

0801ac46 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801ac46:	b590      	push	{r4, r7, lr}
 801ac48:	b087      	sub	sp, #28
 801ac4a:	af00      	add	r7, sp, #0
 801ac4c:	6078      	str	r0, [r7, #4]
 801ac4e:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	69db      	ldr	r3, [r3, #28]
 801ac54:	4618      	mov	r0, r3
 801ac56:	f004 faca 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 801ac5a:	6178      	str	r0, [r7, #20]
 801ac5c:	697b      	ldr	r3, [r7, #20]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d022      	beq.n	801aca8 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801ac62:	f107 030c 	add.w	r3, r7, #12
 801ac66:	6979      	ldr	r1, [r7, #20]
 801ac68:	4618      	mov	r0, r3
 801ac6a:	f004 fa04 	bl	801f076 <_ZNK22MockNamedValueListNode7getNameEv>
 801ac6e:	f107 030c 	add.w	r3, r7, #12
 801ac72:	6839      	ldr	r1, [r7, #0]
 801ac74:	4618      	mov	r0, r3
 801ac76:	f7f2 f9b0 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801ac7a:	4603      	mov	r3, r0
 801ac7c:	461c      	mov	r4, r3
 801ac7e:	f107 030c 	add.w	r3, r7, #12
 801ac82:	4618      	mov	r0, r3
 801ac84:	f7f2 f99d 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ac88:	2c00      	cmp	r4, #0
 801ac8a:	d008      	beq.n	801ac9e <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801ac8c:	6979      	ldr	r1, [r7, #20]
 801ac8e:	6878      	ldr	r0, [r7, #4]
 801ac90:	f000 fba4 	bl	801b3dc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801ac94:	4603      	mov	r3, r0
 801ac96:	2101      	movs	r1, #1
 801ac98:	4618      	mov	r0, r3
 801ac9a:	f000 fbc5 	bl	801b428 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801ac9e:	6978      	ldr	r0, [r7, #20]
 801aca0:	f004 f9ae 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 801aca4:	6178      	str	r0, [r7, #20]
 801aca6:	e7d9      	b.n	801ac5c <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801aca8:	bf00      	nop
 801acaa:	371c      	adds	r7, #28
 801acac:	46bd      	mov	sp, r7
 801acae:	bd90      	pop	{r4, r7, pc}

0801acb0 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 801acb0:	b590      	push	{r4, r7, lr}
 801acb2:	b087      	sub	sp, #28
 801acb4:	af00      	add	r7, sp, #0
 801acb6:	6078      	str	r0, [r7, #4]
 801acb8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	6a1b      	ldr	r3, [r3, #32]
 801acbe:	4618      	mov	r0, r3
 801acc0:	f004 fa95 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 801acc4:	6178      	str	r0, [r7, #20]
 801acc6:	697b      	ldr	r3, [r7, #20]
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d022      	beq.n	801ad12 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801accc:	f107 030c 	add.w	r3, r7, #12
 801acd0:	6979      	ldr	r1, [r7, #20]
 801acd2:	4618      	mov	r0, r3
 801acd4:	f004 f9cf 	bl	801f076 <_ZNK22MockNamedValueListNode7getNameEv>
 801acd8:	f107 030c 	add.w	r3, r7, #12
 801acdc:	6839      	ldr	r1, [r7, #0]
 801acde:	4618      	mov	r0, r3
 801ace0:	f7f2 f97b 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801ace4:	4603      	mov	r3, r0
 801ace6:	461c      	mov	r4, r3
 801ace8:	f107 030c 	add.w	r3, r7, #12
 801acec:	4618      	mov	r0, r3
 801acee:	f7f2 f968 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801acf2:	2c00      	cmp	r4, #0
 801acf4:	d008      	beq.n	801ad08 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801acf6:	6979      	ldr	r1, [r7, #20]
 801acf8:	6878      	ldr	r0, [r7, #4]
 801acfa:	f000 fb6f 	bl	801b3dc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801acfe:	4603      	mov	r3, r0
 801ad00:	2101      	movs	r1, #1
 801ad02:	4618      	mov	r0, r3
 801ad04:	f000 fb90 	bl	801b428 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801ad08:	6978      	ldr	r0, [r7, #20]
 801ad0a:	f004 f979 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 801ad0e:	6178      	str	r0, [r7, #20]
 801ad10:	e7d9      	b.n	801acc6 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801ad12:	bf00      	nop
 801ad14:	371c      	adds	r7, #28
 801ad16:	46bd      	mov	sp, r7
 801ad18:	bd90      	pop	{r4, r7, pc}
	...

0801ad1c <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 801ad1c:	b580      	push	{r7, lr}
 801ad1e:	b086      	sub	sp, #24
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	60f8      	str	r0, [r7, #12]
 801ad24:	60b9      	str	r1, [r7, #8]
 801ad26:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801ad28:	68bb      	ldr	r3, [r7, #8]
 801ad2a:	69db      	ldr	r3, [r3, #28]
 801ad2c:	6879      	ldr	r1, [r7, #4]
 801ad2e:	4618      	mov	r0, r3
 801ad30:	f004 fa2e 	bl	801f190 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801ad34:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801ad36:	697b      	ldr	r3, [r7, #20]
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d005      	beq.n	801ad48 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 801ad3c:	68fb      	ldr	r3, [r7, #12]
 801ad3e:	6979      	ldr	r1, [r7, #20]
 801ad40:	4618      	mov	r0, r3
 801ad42:	f7ff fa0b 	bl	801a15c <_Z10StringFromRK14MockNamedValue>
 801ad46:	e003      	b.n	801ad50 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 801ad48:	4903      	ldr	r1, [pc, #12]	; (801ad58 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 801ad4a:	68f8      	ldr	r0, [r7, #12]
 801ad4c:	f7f1 fd81 	bl	800c852 <_ZN12SimpleStringC1EPKc>
}
 801ad50:	68f8      	ldr	r0, [r7, #12]
 801ad52:	3718      	adds	r7, #24
 801ad54:	46bd      	mov	sp, r7
 801ad56:	bd80      	pop	{r7, pc}
 801ad58:	08025c34 	.word	0x08025c34

0801ad5c <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 801ad5c:	b590      	push	{r4, r7, lr}
 801ad5e:	b087      	sub	sp, #28
 801ad60:	af00      	add	r7, sp, #0
 801ad62:	6078      	str	r0, [r7, #4]
 801ad64:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	69dc      	ldr	r4, [r3, #28]
 801ad6a:	683b      	ldr	r3, [r7, #0]
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	335c      	adds	r3, #92	; 0x5c
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	f107 020c 	add.w	r2, r7, #12
 801ad76:	6839      	ldr	r1, [r7, #0]
 801ad78:	4610      	mov	r0, r2
 801ad7a:	4798      	blx	r3
 801ad7c:	f107 030c 	add.w	r3, r7, #12
 801ad80:	4619      	mov	r1, r3
 801ad82:	4620      	mov	r0, r4
 801ad84:	f004 fa04 	bl	801f190 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801ad88:	6178      	str	r0, [r7, #20]
 801ad8a:	f107 030c 	add.w	r3, r7, #12
 801ad8e:	4618      	mov	r0, r3
 801ad90:	f7f2 f917 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801ad94:	697b      	ldr	r3, [r7, #20]
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	d00d      	beq.n	801adb6 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 801ad9a:	697b      	ldr	r3, [r7, #20]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	3350      	adds	r3, #80	; 0x50
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	6839      	ldr	r1, [r7, #0]
 801ada4:	6978      	ldr	r0, [r7, #20]
 801ada6:	4798      	blx	r3
 801ada8:	4603      	mov	r3, r0
 801adaa:	2b00      	cmp	r3, #0
 801adac:	bf14      	ite	ne
 801adae:	2301      	movne	r3, #1
 801adb0:	2300      	moveq	r3, #0
 801adb2:	b2db      	uxtb	r3, r3
 801adb4:	e006      	b.n	801adc4 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	7b1b      	ldrb	r3, [r3, #12]
 801adba:	2b00      	cmp	r3, #0
 801adbc:	bf14      	ite	ne
 801adbe:	2301      	movne	r3, #1
 801adc0:	2300      	moveq	r3, #0
 801adc2:	b2db      	uxtb	r3, r3
}
 801adc4:	4618      	mov	r0, r3
 801adc6:	371c      	adds	r7, #28
 801adc8:	46bd      	mov	sp, r7
 801adca:	bd90      	pop	{r4, r7, pc}

0801adcc <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 801adcc:	b590      	push	{r4, r7, lr}
 801adce:	b087      	sub	sp, #28
 801add0:	af00      	add	r7, sp, #0
 801add2:	6078      	str	r0, [r7, #4]
 801add4:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	6a1c      	ldr	r4, [r3, #32]
 801adda:	683b      	ldr	r3, [r7, #0]
 801addc:	681b      	ldr	r3, [r3, #0]
 801adde:	335c      	adds	r3, #92	; 0x5c
 801ade0:	681b      	ldr	r3, [r3, #0]
 801ade2:	f107 020c 	add.w	r2, r7, #12
 801ade6:	6839      	ldr	r1, [r7, #0]
 801ade8:	4610      	mov	r0, r2
 801adea:	4798      	blx	r3
 801adec:	f107 030c 	add.w	r3, r7, #12
 801adf0:	4619      	mov	r1, r3
 801adf2:	4620      	mov	r0, r4
 801adf4:	f004 f9cc 	bl	801f190 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801adf8:	6178      	str	r0, [r7, #20]
 801adfa:	f107 030c 	add.w	r3, r7, #12
 801adfe:	4618      	mov	r0, r3
 801ae00:	f7f2 f8df 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801ae04:	697b      	ldr	r3, [r7, #20]
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d00d      	beq.n	801ae26 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 801ae0a:	697b      	ldr	r3, [r7, #20]
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	3354      	adds	r3, #84	; 0x54
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	6839      	ldr	r1, [r7, #0]
 801ae14:	6978      	ldr	r0, [r7, #20]
 801ae16:	4798      	blx	r3
 801ae18:	4603      	mov	r3, r0
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	bf14      	ite	ne
 801ae1e:	2301      	movne	r3, #1
 801ae20:	2300      	moveq	r3, #0
 801ae22:	b2db      	uxtb	r3, r3
 801ae24:	e006      	b.n	801ae34 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	7b1b      	ldrb	r3, [r3, #12]
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	bf14      	ite	ne
 801ae2e:	2301      	movne	r3, #1
 801ae30:	2300      	moveq	r3, #0
 801ae32:	b2db      	uxtb	r3, r3
}
 801ae34:	4618      	mov	r0, r3
 801ae36:	371c      	adds	r7, #28
 801ae38:	46bd      	mov	sp, r7
 801ae3a:	bd90      	pop	{r4, r7, pc}

0801ae3c <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 801ae3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae3e:	b0a1      	sub	sp, #132	; 0x84
 801ae40:	af02      	add	r7, sp, #8
 801ae42:	6078      	str	r0, [r7, #4]
 801ae44:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801ae46:	49bc      	ldr	r1, [pc, #752]	; (801b138 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801ae48:	6878      	ldr	r0, [r7, #4]
 801ae4a:	f7f1 fd02 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 801ae4e:	683b      	ldr	r3, [r7, #0]
 801ae50:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	d012      	beq.n	801ae7e <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 801ae58:	683b      	ldr	r3, [r7, #0]
 801ae5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801ae5c:	f107 030c 	add.w	r3, r7, #12
 801ae60:	49b6      	ldr	r1, [pc, #728]	; (801b13c <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801ae62:	4618      	mov	r0, r3
 801ae64:	f7f2 fdb4 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 801ae68:	f107 030c 	add.w	r3, r7, #12
 801ae6c:	4619      	mov	r1, r3
 801ae6e:	6878      	ldr	r0, [r7, #4]
 801ae70:	f7f1 fd5b 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801ae74:	f107 030c 	add.w	r3, r7, #12
 801ae78:	4618      	mov	r0, r3
 801ae7a:	f7f2 f8a2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    str += getName();
 801ae7e:	f107 0314 	add.w	r3, r7, #20
 801ae82:	6839      	ldr	r1, [r7, #0]
 801ae84:	4618      	mov	r0, r3
 801ae86:	f7ff f989 	bl	801a19c <_ZNK23MockCheckedExpectedCall7getNameEv>
 801ae8a:	f107 0314 	add.w	r3, r7, #20
 801ae8e:	4619      	mov	r1, r3
 801ae90:	6878      	ldr	r0, [r7, #4]
 801ae92:	f7f2 f913 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801ae96:	f107 0314 	add.w	r3, r7, #20
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	f7f2 f891 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801aea0:	49a7      	ldr	r1, [pc, #668]	; (801b140 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801aea2:	6878      	ldr	r0, [r7, #4]
 801aea4:	f7f2 f91c 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 801aea8:	683b      	ldr	r3, [r7, #0]
 801aeaa:	691b      	ldr	r3, [r3, #16]
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d02d      	beq.n	801af0c <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801aeb0:	683b      	ldr	r3, [r7, #0]
 801aeb2:	691a      	ldr	r2, [r3, #16]
 801aeb4:	683b      	ldr	r3, [r7, #0]
 801aeb6:	695b      	ldr	r3, [r3, #20]
 801aeb8:	429a      	cmp	r2, r3
 801aeba:	d113      	bne.n	801aee4 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 801aebc:	683b      	ldr	r3, [r7, #0]
 801aebe:	691a      	ldr	r2, [r3, #16]
 801aec0:	f107 031c 	add.w	r3, r7, #28
 801aec4:	499f      	ldr	r1, [pc, #636]	; (801b144 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801aec6:	4618      	mov	r0, r3
 801aec8:	f7f2 fd82 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 801aecc:	f107 031c 	add.w	r3, r7, #28
 801aed0:	4619      	mov	r1, r3
 801aed2:	6878      	ldr	r0, [r7, #4]
 801aed4:	f7f2 f8f2 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801aed8:	f107 031c 	add.w	r3, r7, #28
 801aedc:	4618      	mov	r0, r3
 801aede:	f7f2 f870 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801aee2:	e013      	b.n	801af0c <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801aee4:	683b      	ldr	r3, [r7, #0]
 801aee6:	691a      	ldr	r2, [r3, #16]
 801aee8:	683b      	ldr	r3, [r7, #0]
 801aeea:	695b      	ldr	r3, [r3, #20]
 801aeec:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801aef0:	4995      	ldr	r1, [pc, #596]	; (801b148 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801aef2:	f7f2 fd6d 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 801aef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801aefa:	4619      	mov	r1, r3
 801aefc:	6878      	ldr	r0, [r7, #4]
 801aefe:	f7f2 f8dd 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801af02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801af06:	4618      	mov	r0, r3
 801af08:	f7f2 f85b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 801af0c:	683b      	ldr	r3, [r7, #0]
 801af0e:	69db      	ldr	r3, [r3, #28]
 801af10:	4618      	mov	r0, r3
 801af12:	f004 f96c 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 801af16:	4603      	mov	r3, r0
 801af18:	2b00      	cmp	r3, #0
 801af1a:	d109      	bne.n	801af30 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801af1c:	683b      	ldr	r3, [r7, #0]
 801af1e:	6a1b      	ldr	r3, [r3, #32]
 801af20:	4618      	mov	r0, r3
 801af22:	f004 f964 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 801af26:	4603      	mov	r3, r0
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d101      	bne.n	801af30 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801af2c:	2301      	movs	r3, #1
 801af2e:	e000      	b.n	801af32 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801af30:	2300      	movs	r3, #0
 801af32:	2b00      	cmp	r3, #0
 801af34:	d00b      	beq.n	801af4e <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801af36:	683b      	ldr	r3, [r7, #0]
 801af38:	7b1b      	ldrb	r3, [r3, #12]
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d001      	beq.n	801af42 <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 801af3e:	4b83      	ldr	r3, [pc, #524]	; (801b14c <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 801af40:	e000      	b.n	801af44 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801af42:	4b83      	ldr	r3, [pc, #524]	; (801b150 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 801af44:	4619      	mov	r1, r3
 801af46:	6878      	ldr	r0, [r7, #4]
 801af48:	f7f2 f8ca 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
 801af4c:	e0e3      	b.n	801b116 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 801af4e:	683b      	ldr	r3, [r7, #0]
 801af50:	69db      	ldr	r3, [r3, #28]
 801af52:	4618      	mov	r0, r3
 801af54:	f004 f94b 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 801af58:	6778      	str	r0, [r7, #116]	; 0x74
 801af5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d069      	beq.n	801b034 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 801af60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801af64:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801af66:	4618      	mov	r0, r3
 801af68:	f004 f898 	bl	801f09c <_ZNK22MockNamedValueListNode7getTypeEv>
 801af6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801af70:	4618      	mov	r0, r3
 801af72:	f7f1 fff9 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801af76:	4605      	mov	r5, r0
 801af78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801af7c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801af7e:	4618      	mov	r0, r3
 801af80:	f004 f879 	bl	801f076 <_ZNK22MockNamedValueListNode7getNameEv>
 801af84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801af88:	4618      	mov	r0, r3
 801af8a:	f7f1 ffed 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801af8e:	4606      	mov	r6, r0
 801af90:	683b      	ldr	r3, [r7, #0]
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	33a4      	adds	r3, #164	; 0xa4
 801af96:	681c      	ldr	r4, [r3, #0]
 801af98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801af9c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801af9e:	4618      	mov	r0, r3
 801afa0:	f004 f869 	bl	801f076 <_ZNK22MockNamedValueListNode7getNameEv>
 801afa4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801afa8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801afac:	6839      	ldr	r1, [r7, #0]
 801afae:	4618      	mov	r0, r3
 801afb0:	47a0      	blx	r4
 801afb2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801afb6:	4618      	mov	r0, r3
 801afb8:	f7f1 ffd6 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801afbc:	4603      	mov	r3, r0
 801afbe:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801afc2:	9300      	str	r3, [sp, #0]
 801afc4:	4633      	mov	r3, r6
 801afc6:	462a      	mov	r2, r5
 801afc8:	4962      	ldr	r1, [pc, #392]	; (801b154 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 801afca:	f7f2 fd01 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 801afce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801afd2:	4619      	mov	r1, r3
 801afd4:	6878      	ldr	r0, [r7, #4]
 801afd6:	f7f2 f871 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801afda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801afde:	4618      	mov	r0, r3
 801afe0:	f7f1 ffef 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801afe4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801afe8:	4618      	mov	r0, r3
 801afea:	f7f1 ffea 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801afee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801aff2:	4618      	mov	r0, r3
 801aff4:	f7f1 ffe5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801aff8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801affc:	4618      	mov	r0, r3
 801affe:	f7f1 ffe0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801b002:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b006:	4618      	mov	r0, r3
 801b008:	f7f1 ffdb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801b00c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b00e:	f003 fff7 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 801b012:	4603      	mov	r3, r0
 801b014:	2b00      	cmp	r3, #0
 801b016:	bf14      	ite	ne
 801b018:	2301      	movne	r3, #1
 801b01a:	2300      	moveq	r3, #0
 801b01c:	b2db      	uxtb	r3, r3
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d003      	beq.n	801b02a <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801b022:	494d      	ldr	r1, [pc, #308]	; (801b158 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801b024:	6878      	ldr	r0, [r7, #4]
 801b026:	f7f2 f85b 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 801b02a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b02c:	f003 ffe8 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 801b030:	6778      	str	r0, [r7, #116]	; 0x74
 801b032:	e792      	b.n	801af5a <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801b034:	683b      	ldr	r3, [r7, #0]
 801b036:	69db      	ldr	r3, [r3, #28]
 801b038:	4618      	mov	r0, r3
 801b03a:	f004 f8d8 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 801b03e:	4603      	mov	r3, r0
 801b040:	2b00      	cmp	r3, #0
 801b042:	d009      	beq.n	801b058 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801b044:	683b      	ldr	r3, [r7, #0]
 801b046:	6a1b      	ldr	r3, [r3, #32]
 801b048:	4618      	mov	r0, r3
 801b04a:	f004 f8d0 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 801b04e:	4603      	mov	r3, r0
 801b050:	2b00      	cmp	r3, #0
 801b052:	d001      	beq.n	801b058 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801b054:	2301      	movs	r3, #1
 801b056:	e000      	b.n	801b05a <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 801b058:	2300      	movs	r3, #0
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d003      	beq.n	801b066 <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 801b05e:	493e      	ldr	r1, [pc, #248]	; (801b158 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801b060:	6878      	ldr	r0, [r7, #4]
 801b062:	f7f2 f83d 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801b066:	683b      	ldr	r3, [r7, #0]
 801b068:	6a1b      	ldr	r3, [r3, #32]
 801b06a:	4618      	mov	r0, r3
 801b06c:	f004 f8bf 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 801b070:	6778      	str	r0, [r7, #116]	; 0x74
 801b072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b074:	2b00      	cmp	r3, #0
 801b076:	d046      	beq.n	801b106 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 801b078:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b07c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b07e:	4618      	mov	r0, r3
 801b080:	f004 f80c 	bl	801f09c <_ZNK22MockNamedValueListNode7getTypeEv>
 801b084:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b088:	4618      	mov	r0, r3
 801b08a:	f7f1 ff6d 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801b08e:	4604      	mov	r4, r0
 801b090:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b094:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b096:	4618      	mov	r0, r3
 801b098:	f003 ffed 	bl	801f076 <_ZNK22MockNamedValueListNode7getNameEv>
 801b09c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b0a0:	4618      	mov	r0, r3
 801b0a2:	f7f1 ff61 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801b0a6:	4603      	mov	r3, r0
 801b0a8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801b0ac:	4622      	mov	r2, r4
 801b0ae:	492b      	ldr	r1, [pc, #172]	; (801b15c <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801b0b0:	f7f2 fc8e 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 801b0b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b0b8:	4619      	mov	r1, r3
 801b0ba:	6878      	ldr	r0, [r7, #4]
 801b0bc:	f7f1 fffe 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801b0c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	f7f1 ff7c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801b0ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b0ce:	4618      	mov	r0, r3
 801b0d0:	f7f1 ff77 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801b0d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b0d8:	4618      	mov	r0, r3
 801b0da:	f7f1 ff72 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801b0de:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b0e0:	f003 ff8e 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 801b0e4:	4603      	mov	r3, r0
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	bf14      	ite	ne
 801b0ea:	2301      	movne	r3, #1
 801b0ec:	2300      	moveq	r3, #0
 801b0ee:	b2db      	uxtb	r3, r3
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	d003      	beq.n	801b0fc <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801b0f4:	4918      	ldr	r1, [pc, #96]	; (801b158 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801b0f6:	6878      	ldr	r0, [r7, #4]
 801b0f8:	f7f1 fff2 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 801b0fc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b0fe:	f003 ff7f 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 801b102:	6778      	str	r0, [r7, #116]	; 0x74
 801b104:	e7b5      	b.n	801b072 <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801b106:	683b      	ldr	r3, [r7, #0]
 801b108:	7b1b      	ldrb	r3, [r3, #12]
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d003      	beq.n	801b116 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801b10e:	4914      	ldr	r1, [pc, #80]	; (801b160 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801b110:	6878      	ldr	r0, [r7, #4]
 801b112:	f7f1 ffe5 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801b116:	683b      	ldr	r3, [r7, #0]
 801b118:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801b11a:	683b      	ldr	r3, [r7, #0]
 801b11c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801b11e:	2b01      	cmp	r3, #1
 801b120:	d101      	bne.n	801b126 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801b122:	4c05      	ldr	r4, [pc, #20]	; (801b138 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801b124:	e000      	b.n	801b128 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801b126:	4c0f      	ldr	r4, [pc, #60]	; (801b164 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801b128:	683b      	ldr	r3, [r7, #0]
 801b12a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801b12c:	683a      	ldr	r2, [r7, #0]
 801b12e:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801b130:	2a01      	cmp	r2, #1
 801b132:	d119      	bne.n	801b168 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801b134:	4a00      	ldr	r2, [pc, #0]	; (801b138 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801b136:	e018      	b.n	801b16a <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801b138:	08025bc8 	.word	0x08025bc8
 801b13c:	08025c3c 	.word	0x08025c3c
 801b140:	08025c54 	.word	0x08025c54
 801b144:	08025c5c 	.word	0x08025c5c
 801b148:	08025c7c 	.word	0x08025c7c
 801b14c:	08025ca0 	.word	0x08025ca0
 801b150:	08025cb8 	.word	0x08025cb8
 801b154:	08025cc8 	.word	0x08025cc8
 801b158:	08025cd4 	.word	0x08025cd4
 801b15c:	08025cd8 	.word	0x08025cd8
 801b160:	08025ce8 	.word	0x08025ce8
 801b164:	08025d08 	.word	0x08025d08
 801b168:	4a0c      	ldr	r2, [pc, #48]	; (801b19c <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 801b16a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801b16e:	9201      	str	r2, [sp, #4]
 801b170:	9300      	str	r3, [sp, #0]
 801b172:	4623      	mov	r3, r4
 801b174:	460a      	mov	r2, r1
 801b176:	490a      	ldr	r1, [pc, #40]	; (801b1a0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 801b178:	f7f2 fc2a 	bl	800d9d0 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801b17c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b180:	4619      	mov	r1, r3
 801b182:	6878      	ldr	r0, [r7, #4]
 801b184:	f7f1 ff9a 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801b188:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b18c:	4618      	mov	r0, r3
 801b18e:	f7f1 ff18 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    return str;
 801b192:	bf00      	nop
}
 801b194:	6878      	ldr	r0, [r7, #4]
 801b196:	377c      	adds	r7, #124	; 0x7c
 801b198:	46bd      	mov	sp, r7
 801b19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b19c:	08025d08 	.word	0x08025d08
 801b1a0:	08025d0c 	.word	0x08025d0c

0801b1a4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801b1a4:	b590      	push	{r4, r7, lr}
 801b1a6:	b095      	sub	sp, #84	; 0x54
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	6078      	str	r0, [r7, #4]
 801b1ac:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801b1ae:	496c      	ldr	r1, [pc, #432]	; (801b360 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801b1b0:	6878      	ldr	r0, [r7, #4]
 801b1b2:	f7f1 fb4e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801b1b6:	683b      	ldr	r3, [r7, #0]
 801b1b8:	69db      	ldr	r3, [r3, #28]
 801b1ba:	4618      	mov	r0, r3
 801b1bc:	f004 f817 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 801b1c0:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b1c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d05e      	beq.n	801b286 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801b1c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b1ca:	6838      	ldr	r0, [r7, #0]
 801b1cc:	f000 f906 	bl	801b3dc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b1d0:	4603      	mov	r3, r0
 801b1d2:	4618      	mov	r0, r3
 801b1d4:	f000 f938 	bl	801b448 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801b1d8:	4603      	mov	r3, r0
 801b1da:	f083 0301 	eor.w	r3, r3, #1
 801b1de:	b2db      	uxtb	r3, r3
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d04b      	beq.n	801b27c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801b1e4:	f107 030c 	add.w	r3, r7, #12
 801b1e8:	495d      	ldr	r1, [pc, #372]	; (801b360 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801b1ea:	4618      	mov	r0, r3
 801b1ec:	f7f1 fb31 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801b1f0:	f107 030c 	add.w	r3, r7, #12
 801b1f4:	4619      	mov	r1, r3
 801b1f6:	6878      	ldr	r0, [r7, #4]
 801b1f8:	f7f1 ff34 	bl	800d064 <_ZneRK12SimpleStringS1_>
 801b1fc:	4603      	mov	r3, r0
 801b1fe:	461c      	mov	r4, r3
 801b200:	f107 030c 	add.w	r3, r7, #12
 801b204:	4618      	mov	r0, r3
 801b206:	f7f1 fedc 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801b20a:	2c00      	cmp	r4, #0
 801b20c:	d003      	beq.n	801b216 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801b20e:	4955      	ldr	r1, [pc, #340]	; (801b364 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801b210:	6878      	ldr	r0, [r7, #4]
 801b212:	f7f1 ff65 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801b216:	f107 031c 	add.w	r3, r7, #28
 801b21a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b21c:	4618      	mov	r0, r3
 801b21e:	f003 ff3d 	bl	801f09c <_ZNK22MockNamedValueListNode7getTypeEv>
 801b222:	f107 031c 	add.w	r3, r7, #28
 801b226:	4618      	mov	r0, r3
 801b228:	f7f1 fe9e 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801b22c:	4604      	mov	r4, r0
 801b22e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b232:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b234:	4618      	mov	r0, r3
 801b236:	f003 ff1e 	bl	801f076 <_ZNK22MockNamedValueListNode7getNameEv>
 801b23a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b23e:	4618      	mov	r0, r3
 801b240:	f7f1 fe92 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801b244:	4603      	mov	r3, r0
 801b246:	f107 0014 	add.w	r0, r7, #20
 801b24a:	4622      	mov	r2, r4
 801b24c:	4946      	ldr	r1, [pc, #280]	; (801b368 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801b24e:	f7f2 fbbf 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 801b252:	f107 0314 	add.w	r3, r7, #20
 801b256:	4619      	mov	r1, r3
 801b258:	6878      	ldr	r0, [r7, #4]
 801b25a:	f7f1 ff2f 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801b25e:	f107 0314 	add.w	r3, r7, #20
 801b262:	4618      	mov	r0, r3
 801b264:	f7f1 fead 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801b268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b26c:	4618      	mov	r0, r3
 801b26e:	f7f1 fea8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801b272:	f107 031c 	add.w	r3, r7, #28
 801b276:	4618      	mov	r0, r3
 801b278:	f7f1 fea3 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 801b27c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b27e:	f003 febf 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 801b282:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b284:	e79d      	b.n	801b1c2 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801b286:	683b      	ldr	r3, [r7, #0]
 801b288:	6a1b      	ldr	r3, [r3, #32]
 801b28a:	4618      	mov	r0, r3
 801b28c:	f003 ffaf 	bl	801f1ee <_ZN18MockNamedValueList5beginEv>
 801b290:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b294:	2b00      	cmp	r3, #0
 801b296:	d05e      	beq.n	801b356 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 801b298:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b29a:	6838      	ldr	r0, [r7, #0]
 801b29c:	f000 f89e 	bl	801b3dc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b2a0:	4603      	mov	r3, r0
 801b2a2:	4618      	mov	r0, r3
 801b2a4:	f000 f8d0 	bl	801b448 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801b2a8:	4603      	mov	r3, r0
 801b2aa:	f083 0301 	eor.w	r3, r3, #1
 801b2ae:	b2db      	uxtb	r3, r3
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d04b      	beq.n	801b34c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801b2b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b2b8:	4929      	ldr	r1, [pc, #164]	; (801b360 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801b2ba:	4618      	mov	r0, r3
 801b2bc:	f7f1 fac9 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801b2c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b2c4:	4619      	mov	r1, r3
 801b2c6:	6878      	ldr	r0, [r7, #4]
 801b2c8:	f7f1 fecc 	bl	800d064 <_ZneRK12SimpleStringS1_>
 801b2cc:	4603      	mov	r3, r0
 801b2ce:	461c      	mov	r4, r3
 801b2d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b2d4:	4618      	mov	r0, r3
 801b2d6:	f7f1 fe74 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801b2da:	2c00      	cmp	r4, #0
 801b2dc:	d003      	beq.n	801b2e6 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801b2de:	4921      	ldr	r1, [pc, #132]	; (801b364 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801b2e0:	6878      	ldr	r0, [r7, #4]
 801b2e2:	f7f1 fefd 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801b2e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b2ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	f003 fed5 	bl	801f09c <_ZNK22MockNamedValueListNode7getTypeEv>
 801b2f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b2f6:	4618      	mov	r0, r3
 801b2f8:	f7f1 fe36 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801b2fc:	4604      	mov	r4, r0
 801b2fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b302:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b304:	4618      	mov	r0, r3
 801b306:	f003 feb6 	bl	801f076 <_ZNK22MockNamedValueListNode7getNameEv>
 801b30a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b30e:	4618      	mov	r0, r3
 801b310:	f7f1 fe2a 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801b314:	4603      	mov	r3, r0
 801b316:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b31a:	4622      	mov	r2, r4
 801b31c:	4912      	ldr	r1, [pc, #72]	; (801b368 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801b31e:	f7f2 fb57 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 801b322:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b326:	4619      	mov	r1, r3
 801b328:	6878      	ldr	r0, [r7, #4]
 801b32a:	f7f1 fec7 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801b32e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b332:	4618      	mov	r0, r3
 801b334:	f7f1 fe45 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801b338:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b33c:	4618      	mov	r0, r3
 801b33e:	f7f1 fe40 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801b342:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b346:	4618      	mov	r0, r3
 801b348:	f7f1 fe3b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801b34c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b34e:	f003 fe57 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 801b352:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b354:	e79d      	b.n	801b292 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801b356:	bf00      	nop
}
 801b358:	6878      	ldr	r0, [r7, #4]
 801b35a:	3754      	adds	r7, #84	; 0x54
 801b35c:	46bd      	mov	sp, r7
 801b35e:	bd90      	pop	{r4, r7, pc}
 801b360:	08025bc8 	.word	0x08025bc8
 801b364:	08025cd4 	.word	0x08025cd4
 801b368:	08025d34 	.word	0x08025d34

0801b36c <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801b36c:	b590      	push	{r4, r7, lr}
 801b36e:	b085      	sub	sp, #20
 801b370:	af00      	add	r7, sp, #0
 801b372:	6078      	str	r0, [r7, #4]
 801b374:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801b376:	f107 0308 	add.w	r3, r7, #8
 801b37a:	6879      	ldr	r1, [r7, #4]
 801b37c:	4618      	mov	r0, r3
 801b37e:	f7fe ff0d 	bl	801a19c <_ZNK23MockCheckedExpectedCall7getNameEv>
 801b382:	f107 0308 	add.w	r3, r7, #8
 801b386:	4619      	mov	r1, r3
 801b388:	6838      	ldr	r0, [r7, #0]
 801b38a:	f7f1 fe26 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801b38e:	4603      	mov	r3, r0
 801b390:	461c      	mov	r4, r3
 801b392:	f107 0308 	add.w	r3, r7, #8
 801b396:	4618      	mov	r0, r3
 801b398:	f7f1 fe13 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801b39c:	4623      	mov	r3, r4
}
 801b39e:	4618      	mov	r0, r3
 801b3a0:	3714      	adds	r7, #20
 801b3a2:	46bd      	mov	sp, r7
 801b3a4:	bd90      	pop	{r4, r7, pc}

0801b3a6 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801b3a6:	b480      	push	{r7}
 801b3a8:	b083      	sub	sp, #12
 801b3aa:	af00      	add	r7, sp, #0
 801b3ac:	6078      	str	r0, [r7, #4]
 801b3ae:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801b3b6:	f083 0301 	eor.w	r3, r3, #1
 801b3ba:	b2db      	uxtb	r3, r3
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d104      	bne.n	801b3ca <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b3c4:	683a      	ldr	r2, [r7, #0]
 801b3c6:	429a      	cmp	r2, r3
 801b3c8:	d101      	bne.n	801b3ce <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801b3ca:	2301      	movs	r3, #1
 801b3cc:	e000      	b.n	801b3d0 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801b3ce:	2300      	movs	r3, #0
}
 801b3d0:	4618      	mov	r0, r3
 801b3d2:	370c      	adds	r7, #12
 801b3d4:	46bd      	mov	sp, r7
 801b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3da:	4770      	bx	lr

0801b3dc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801b3dc:	b580      	push	{r7, lr}
 801b3de:	b082      	sub	sp, #8
 801b3e0:	af00      	add	r7, sp, #0
 801b3e2:	6078      	str	r0, [r7, #4]
 801b3e4:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801b3e6:	6838      	ldr	r0, [r7, #0]
 801b3e8:	f003 fe16 	bl	801f018 <_ZN22MockNamedValueListNode4itemEv>
 801b3ec:	4603      	mov	r3, r0
}
 801b3ee:	4618      	mov	r0, r3
 801b3f0:	3708      	adds	r7, #8
 801b3f2:	46bd      	mov	sp, r7
 801b3f4:	bd80      	pop	{r7, pc}
	...

0801b3f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801b3f8:	b580      	push	{r7, lr}
 801b3fa:	b082      	sub	sp, #8
 801b3fc:	af00      	add	r7, sp, #0
 801b3fe:	6078      	str	r0, [r7, #4]
 801b400:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	6839      	ldr	r1, [r7, #0]
 801b406:	4618      	mov	r0, r3
 801b408:	f001 ff48 	bl	801d29c <_ZN14MockNamedValueC1ERK12SimpleString>
 801b40c:	4a05      	ldr	r2, [pc, #20]	; (801b424 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	601a      	str	r2, [r3, #0]
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	2200      	movs	r2, #0
 801b416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	4618      	mov	r0, r3
 801b41e:	3708      	adds	r7, #8
 801b420:	46bd      	mov	sp, r7
 801b422:	bd80      	pop	{r7, pc}
 801b424:	08028b5c 	.word	0x08028b5c

0801b428 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801b428:	b480      	push	{r7}
 801b42a:	b083      	sub	sp, #12
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	6078      	str	r0, [r7, #4]
 801b430:	460b      	mov	r3, r1
 801b432:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	78fa      	ldrb	r2, [r7, #3]
 801b438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801b43c:	bf00      	nop
 801b43e:	370c      	adds	r7, #12
 801b440:	46bd      	mov	sp, r7
 801b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b446:	4770      	bx	lr

0801b448 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801b448:	b480      	push	{r7}
 801b44a:	b083      	sub	sp, #12
 801b44c:	af00      	add	r7, sp, #0
 801b44e:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801b456:	4618      	mov	r0, r3
 801b458:	370c      	adds	r7, #12
 801b45a:	46bd      	mov	sp, r7
 801b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b460:	4770      	bx	lr
	...

0801b464 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801b464:	b580      	push	{r7, lr}
 801b466:	b082      	sub	sp, #8
 801b468:	af00      	add	r7, sp, #0
 801b46a:	6078      	str	r0, [r7, #4]
 801b46c:	460b      	mov	r3, r1
 801b46e:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	3328      	adds	r3, #40	; 0x28
 801b474:	4907      	ldr	r1, [pc, #28]	; (801b494 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801b476:	4618      	mov	r0, r3
 801b478:	f002 f9b2 	bl	801d7e0 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	3328      	adds	r3, #40	; 0x28
 801b480:	78fa      	ldrb	r2, [r7, #3]
 801b482:	4611      	mov	r1, r2
 801b484:	4618      	mov	r0, r3
 801b486:	f001 ff5b 	bl	801d340 <_ZN14MockNamedValue8setValueEb>
    return *this;
 801b48a:	687b      	ldr	r3, [r7, #4]
}
 801b48c:	4618      	mov	r0, r3
 801b48e:	3708      	adds	r7, #8
 801b490:	46bd      	mov	sp, r7
 801b492:	bd80      	pop	{r7, pc}
 801b494:	08025d3c 	.word	0x08025d3c

0801b498 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801b498:	b580      	push	{r7, lr}
 801b49a:	b082      	sub	sp, #8
 801b49c:	af00      	add	r7, sp, #0
 801b49e:	6078      	str	r0, [r7, #4]
 801b4a0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	3328      	adds	r3, #40	; 0x28
 801b4a6:	4907      	ldr	r1, [pc, #28]	; (801b4c4 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801b4a8:	4618      	mov	r0, r3
 801b4aa:	f002 f999 	bl	801d7e0 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	3328      	adds	r3, #40	; 0x28
 801b4b2:	6839      	ldr	r1, [r7, #0]
 801b4b4:	4618      	mov	r0, r3
 801b4b6:	f001 ff67 	bl	801d388 <_ZN14MockNamedValue8setValueEj>
    return *this;
 801b4ba:	687b      	ldr	r3, [r7, #4]
}
 801b4bc:	4618      	mov	r0, r3
 801b4be:	3708      	adds	r7, #8
 801b4c0:	46bd      	mov	sp, r7
 801b4c2:	bd80      	pop	{r7, pc}
 801b4c4:	08025d3c 	.word	0x08025d3c

0801b4c8 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801b4c8:	b580      	push	{r7, lr}
 801b4ca:	b082      	sub	sp, #8
 801b4cc:	af00      	add	r7, sp, #0
 801b4ce:	6078      	str	r0, [r7, #4]
 801b4d0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	3328      	adds	r3, #40	; 0x28
 801b4d6:	4907      	ldr	r1, [pc, #28]	; (801b4f4 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801b4d8:	4618      	mov	r0, r3
 801b4da:	f002 f981 	bl	801d7e0 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	3328      	adds	r3, #40	; 0x28
 801b4e2:	6839      	ldr	r1, [r7, #0]
 801b4e4:	4618      	mov	r0, r3
 801b4e6:	f001 ff71 	bl	801d3cc <_ZN14MockNamedValue8setValueEi>
    return *this;
 801b4ea:	687b      	ldr	r3, [r7, #4]
}
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	3708      	adds	r7, #8
 801b4f0:	46bd      	mov	sp, r7
 801b4f2:	bd80      	pop	{r7, pc}
 801b4f4:	08025d3c 	.word	0x08025d3c

0801b4f8 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801b4f8:	b580      	push	{r7, lr}
 801b4fa:	b082      	sub	sp, #8
 801b4fc:	af00      	add	r7, sp, #0
 801b4fe:	6078      	str	r0, [r7, #4]
 801b500:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	3328      	adds	r3, #40	; 0x28
 801b506:	4907      	ldr	r1, [pc, #28]	; (801b524 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801b508:	4618      	mov	r0, r3
 801b50a:	f002 f969 	bl	801d7e0 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	3328      	adds	r3, #40	; 0x28
 801b512:	6839      	ldr	r1, [r7, #0]
 801b514:	4618      	mov	r0, r3
 801b516:	f001 ff7b 	bl	801d410 <_ZN14MockNamedValue8setValueEl>
    return *this;
 801b51a:	687b      	ldr	r3, [r7, #4]
}
 801b51c:	4618      	mov	r0, r3
 801b51e:	3708      	adds	r7, #8
 801b520:	46bd      	mov	sp, r7
 801b522:	bd80      	pop	{r7, pc}
 801b524:	08025d3c 	.word	0x08025d3c

0801b528 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801b528:	b580      	push	{r7, lr}
 801b52a:	b082      	sub	sp, #8
 801b52c:	af00      	add	r7, sp, #0
 801b52e:	6078      	str	r0, [r7, #4]
 801b530:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	3328      	adds	r3, #40	; 0x28
 801b536:	4907      	ldr	r1, [pc, #28]	; (801b554 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801b538:	4618      	mov	r0, r3
 801b53a:	f002 f951 	bl	801d7e0 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	3328      	adds	r3, #40	; 0x28
 801b542:	6839      	ldr	r1, [r7, #0]
 801b544:	4618      	mov	r0, r3
 801b546:	f001 ff85 	bl	801d454 <_ZN14MockNamedValue8setValueEm>
    return *this;
 801b54a:	687b      	ldr	r3, [r7, #4]
}
 801b54c:	4618      	mov	r0, r3
 801b54e:	3708      	adds	r7, #8
 801b550:	46bd      	mov	sp, r7
 801b552:	bd80      	pop	{r7, pc}
 801b554:	08025d3c 	.word	0x08025d3c

0801b558 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801b558:	b5b0      	push	{r4, r5, r7, lr}
 801b55a:	b086      	sub	sp, #24
 801b55c:	af02      	add	r7, sp, #8
 801b55e:	60f8      	str	r0, [r7, #12]
 801b560:	1d3b      	adds	r3, r7, #4
 801b562:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801b566:	f7f8 fd57 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801b56a:	4604      	mov	r4, r0
 801b56c:	6823      	ldr	r3, [r4, #0]
 801b56e:	3368      	adds	r3, #104	; 0x68
 801b570:	681d      	ldr	r5, [r3, #0]
 801b572:	f7f8 fd61 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b576:	4603      	mov	r3, r0
 801b578:	9300      	str	r3, [sp, #0]
 801b57a:	f240 2319 	movw	r3, #537	; 0x219
 801b57e:	4a04      	ldr	r2, [pc, #16]	; (801b590 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801b580:	4904      	ldr	r1, [pc, #16]	; (801b594 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801b582:	4620      	mov	r0, r4
 801b584:	47a8      	blx	r5
    return *this;
 801b586:	68fb      	ldr	r3, [r7, #12]
}
 801b588:	4618      	mov	r0, r3
 801b58a:	3710      	adds	r7, #16
 801b58c:	46bd      	mov	sp, r7
 801b58e:	bdb0      	pop	{r4, r5, r7, pc}
 801b590:	08025bcc 	.word	0x08025bcc
 801b594:	08025be8 	.word	0x08025be8

0801b598 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801b598:	b5b0      	push	{r4, r5, r7, lr}
 801b59a:	b086      	sub	sp, #24
 801b59c:	af02      	add	r7, sp, #8
 801b59e:	60f8      	str	r0, [r7, #12]
 801b5a0:	1d3b      	adds	r3, r7, #4
 801b5a2:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801b5a6:	f7f8 fd37 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801b5aa:	4604      	mov	r4, r0
 801b5ac:	6823      	ldr	r3, [r4, #0]
 801b5ae:	3368      	adds	r3, #104	; 0x68
 801b5b0:	681d      	ldr	r5, [r3, #0]
 801b5b2:	f7f8 fd41 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b5b6:	4603      	mov	r3, r0
 801b5b8:	9300      	str	r3, [sp, #0]
 801b5ba:	f240 231f 	movw	r3, #543	; 0x21f
 801b5be:	4a04      	ldr	r2, [pc, #16]	; (801b5d0 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801b5c0:	4904      	ldr	r1, [pc, #16]	; (801b5d4 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801b5c2:	4620      	mov	r0, r4
 801b5c4:	47a8      	blx	r5
    return *this;
 801b5c6:	68fb      	ldr	r3, [r7, #12]
}
 801b5c8:	4618      	mov	r0, r3
 801b5ca:	3710      	adds	r7, #16
 801b5cc:	46bd      	mov	sp, r7
 801b5ce:	bdb0      	pop	{r4, r5, r7, pc}
 801b5d0:	08025bcc 	.word	0x08025bcc
 801b5d4:	08025c08 	.word	0x08025c08

0801b5d8 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801b5d8:	b580      	push	{r7, lr}
 801b5da:	b082      	sub	sp, #8
 801b5dc:	af00      	add	r7, sp, #0
 801b5de:	6078      	str	r0, [r7, #4]
 801b5e0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	3328      	adds	r3, #40	; 0x28
 801b5e6:	4907      	ldr	r1, [pc, #28]	; (801b604 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801b5e8:	4618      	mov	r0, r3
 801b5ea:	f002 f8f9 	bl	801d7e0 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	3328      	adds	r3, #40	; 0x28
 801b5f2:	6839      	ldr	r1, [r7, #0]
 801b5f4:	4618      	mov	r0, r3
 801b5f6:	f002 f835 	bl	801d664 <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801b5fa:	687b      	ldr	r3, [r7, #4]
}
 801b5fc:	4618      	mov	r0, r3
 801b5fe:	3708      	adds	r7, #8
 801b600:	46bd      	mov	sp, r7
 801b602:	bd80      	pop	{r7, pc}
 801b604:	08025d3c 	.word	0x08025d3c

0801b608 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801b608:	b580      	push	{r7, lr}
 801b60a:	b084      	sub	sp, #16
 801b60c:	af00      	add	r7, sp, #0
 801b60e:	60f8      	str	r0, [r7, #12]
 801b610:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801b614:	68fb      	ldr	r3, [r7, #12]
 801b616:	3328      	adds	r3, #40	; 0x28
 801b618:	4907      	ldr	r1, [pc, #28]	; (801b638 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801b61a:	4618      	mov	r0, r3
 801b61c:	f002 f8e0 	bl	801d7e0 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b620:	68fb      	ldr	r3, [r7, #12]
 801b622:	3328      	adds	r3, #40	; 0x28
 801b624:	ed97 0b00 	vldr	d0, [r7]
 801b628:	4618      	mov	r0, r3
 801b62a:	f001 ff71 	bl	801d510 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801b62e:	68fb      	ldr	r3, [r7, #12]
}
 801b630:	4618      	mov	r0, r3
 801b632:	3710      	adds	r7, #16
 801b634:	46bd      	mov	sp, r7
 801b636:	bd80      	pop	{r7, pc}
 801b638:	08025d3c 	.word	0x08025d3c

0801b63c <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801b63c:	b580      	push	{r7, lr}
 801b63e:	b082      	sub	sp, #8
 801b640:	af00      	add	r7, sp, #0
 801b642:	6078      	str	r0, [r7, #4]
 801b644:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	3328      	adds	r3, #40	; 0x28
 801b64a:	4907      	ldr	r1, [pc, #28]	; (801b668 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801b64c:	4618      	mov	r0, r3
 801b64e:	f002 f8c7 	bl	801d7e0 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	3328      	adds	r3, #40	; 0x28
 801b656:	6839      	ldr	r1, [r7, #0]
 801b658:	4618      	mov	r0, r3
 801b65a:	f001 ff9d 	bl	801d598 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801b65e:	687b      	ldr	r3, [r7, #4]
}
 801b660:	4618      	mov	r0, r3
 801b662:	3708      	adds	r7, #8
 801b664:	46bd      	mov	sp, r7
 801b666:	bd80      	pop	{r7, pc}
 801b668:	08025d3c 	.word	0x08025d3c

0801b66c <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801b66c:	b580      	push	{r7, lr}
 801b66e:	b082      	sub	sp, #8
 801b670:	af00      	add	r7, sp, #0
 801b672:	6078      	str	r0, [r7, #4]
 801b674:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	3328      	adds	r3, #40	; 0x28
 801b67a:	4907      	ldr	r1, [pc, #28]	; (801b698 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801b67c:	4618      	mov	r0, r3
 801b67e:	f002 f8af 	bl	801d7e0 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	3328      	adds	r3, #40	; 0x28
 801b686:	6839      	ldr	r1, [r7, #0]
 801b688:	4618      	mov	r0, r3
 801b68a:	f001 ffa7 	bl	801d5dc <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801b68e:	687b      	ldr	r3, [r7, #4]
}
 801b690:	4618      	mov	r0, r3
 801b692:	3708      	adds	r7, #8
 801b694:	46bd      	mov	sp, r7
 801b696:	bd80      	pop	{r7, pc}
 801b698:	08025d3c 	.word	0x08025d3c

0801b69c <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801b69c:	b580      	push	{r7, lr}
 801b69e:	b082      	sub	sp, #8
 801b6a0:	af00      	add	r7, sp, #0
 801b6a2:	6078      	str	r0, [r7, #4]
 801b6a4:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	3328      	adds	r3, #40	; 0x28
 801b6aa:	4907      	ldr	r1, [pc, #28]	; (801b6c8 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801b6ac:	4618      	mov	r0, r3
 801b6ae:	f002 f897 	bl	801d7e0 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	3328      	adds	r3, #40	; 0x28
 801b6b6:	6839      	ldr	r1, [r7, #0]
 801b6b8:	4618      	mov	r0, r3
 801b6ba:	f001 ffb1 	bl	801d620 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801b6be:	687b      	ldr	r3, [r7, #4]
}
 801b6c0:	4618      	mov	r0, r3
 801b6c2:	3708      	adds	r7, #8
 801b6c4:	46bd      	mov	sp, r7
 801b6c6:	bd80      	pop	{r7, pc}
 801b6c8:	08025d3c 	.word	0x08025d3c

0801b6cc <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801b6cc:	b480      	push	{r7}
 801b6ce:	b083      	sub	sp, #12
 801b6d0:	af00      	add	r7, sp, #0
 801b6d2:	6078      	str	r0, [r7, #4]
 801b6d4:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	2201      	movs	r2, #1
 801b6da:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	2200      	movs	r2, #0
 801b6e2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	683a      	ldr	r2, [r7, #0]
 801b6ea:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801b6ec:	687b      	ldr	r3, [r7, #4]
}
 801b6ee:	4618      	mov	r0, r3
 801b6f0:	370c      	adds	r7, #12
 801b6f2:	46bd      	mov	sp, r7
 801b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6f8:	4770      	bx	lr

0801b6fa <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801b6fa:	b580      	push	{r7, lr}
 801b6fc:	b082      	sub	sp, #8
 801b6fe:	af00      	add	r7, sp, #0
 801b700:	6078      	str	r0, [r7, #4]
 801b702:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801b704:	683b      	ldr	r3, [r7, #0]
 801b706:	3328      	adds	r3, #40	; 0x28
 801b708:	4619      	mov	r1, r3
 801b70a:	6878      	ldr	r0, [r7, #4]
 801b70c:	f7ef f946 	bl	800a99c <_ZN14MockNamedValueC1ERKS_>
}
 801b710:	6878      	ldr	r0, [r7, #4]
 801b712:	3708      	adds	r7, #8
 801b714:	46bd      	mov	sp, r7
 801b716:	bd80      	pop	{r7, pc}

0801b718 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801b718:	b480      	push	{r7}
 801b71a:	b085      	sub	sp, #20
 801b71c:	af00      	add	r7, sp, #0
 801b71e:	60f8      	str	r0, [r7, #12]
 801b720:	60b9      	str	r1, [r7, #8]
 801b722:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801b724:	68fb      	ldr	r3, [r7, #12]
 801b726:	68ba      	ldr	r2, [r7, #8]
 801b728:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801b72a:	68fb      	ldr	r3, [r7, #12]
 801b72c:	687a      	ldr	r2, [r7, #4]
 801b72e:	615a      	str	r2, [r3, #20]
    return *this;
 801b730:	68fb      	ldr	r3, [r7, #12]
}
 801b732:	4618      	mov	r0, r3
 801b734:	3714      	adds	r7, #20
 801b736:	46bd      	mov	sp, r7
 801b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b73c:	4770      	bx	lr

0801b73e <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801b73e:	b480      	push	{r7}
 801b740:	b083      	sub	sp, #12
 801b742:	af00      	add	r7, sp, #0
 801b744:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	7e1b      	ldrb	r3, [r3, #24]
}
 801b74a:	4618      	mov	r0, r3
 801b74c:	370c      	adds	r7, #12
 801b74e:	46bd      	mov	sp, r7
 801b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b754:	4770      	bx	lr

0801b756 <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801b756:	b480      	push	{r7}
 801b758:	b083      	sub	sp, #12
 801b75a:	af00      	add	r7, sp, #0
 801b75c:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801b762:	4618      	mov	r0, r3
 801b764:	370c      	adds	r7, #12
 801b766:	46bd      	mov	sp, r7
 801b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b76c:	4770      	bx	lr
	...

0801b770 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801b770:	b580      	push	{r7, lr}
 801b772:	b082      	sub	sp, #8
 801b774:	af00      	add	r7, sp, #0
 801b776:	6078      	str	r0, [r7, #4]
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	4618      	mov	r0, r3
 801b77c:	f7fe fcce 	bl	801a11c <_ZN16MockExpectedCallC1Ev>
 801b780:	4a03      	ldr	r2, [pc, #12]	; (801b790 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	601a      	str	r2, [r3, #0]
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	4618      	mov	r0, r3
 801b78a:	3708      	adds	r7, #8
 801b78c:	46bd      	mov	sp, r7
 801b78e:	bd80      	pop	{r7, pc}
 801b790:	080289bc 	.word	0x080289bc

0801b794 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801b794:	b580      	push	{r7, lr}
 801b796:	af00      	add	r7, sp, #0
 801b798:	4801      	ldr	r0, [pc, #4]	; (801b7a0 <__tcf_0+0xc>)
 801b79a:	f000 f831 	bl	801b800 <_ZN23MockIgnoredExpectedCallD1Ev>
 801b79e:	bd80      	pop	{r7, pc}
 801b7a0:	20000e78 	.word	0x20000e78

0801b7a4 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801b7a4:	b580      	push	{r7, lr}
 801b7a6:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801b7a8:	4b12      	ldr	r3, [pc, #72]	; (801b7f4 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801b7aa:	781b      	ldrb	r3, [r3, #0]
 801b7ac:	f3bf 8f5b 	dmb	ish
 801b7b0:	b2db      	uxtb	r3, r3
 801b7b2:	f003 0301 	and.w	r3, r3, #1
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	bf0c      	ite	eq
 801b7ba:	2301      	moveq	r3, #1
 801b7bc:	2300      	movne	r3, #0
 801b7be:	b2db      	uxtb	r3, r3
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d013      	beq.n	801b7ec <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801b7c4:	480b      	ldr	r0, [pc, #44]	; (801b7f4 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801b7c6:	f003 ff03 	bl	801f5d0 <__cxa_guard_acquire>
 801b7ca:	4603      	mov	r3, r0
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	bf14      	ite	ne
 801b7d0:	2301      	movne	r3, #1
 801b7d2:	2300      	moveq	r3, #0
 801b7d4:	b2db      	uxtb	r3, r3
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d008      	beq.n	801b7ec <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801b7da:	4807      	ldr	r0, [pc, #28]	; (801b7f8 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801b7dc:	f7ff ffc8 	bl	801b770 <_ZN23MockIgnoredExpectedCallC1Ev>
 801b7e0:	4804      	ldr	r0, [pc, #16]	; (801b7f4 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801b7e2:	f003 ff01 	bl	801f5e8 <__cxa_guard_release>
 801b7e6:	4805      	ldr	r0, [pc, #20]	; (801b7fc <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801b7e8:	f003 ff25 	bl	801f636 <atexit>
    return call;
 801b7ec:	4b02      	ldr	r3, [pc, #8]	; (801b7f8 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801b7ee:	4618      	mov	r0, r3
 801b7f0:	bd80      	pop	{r7, pc}
 801b7f2:	bf00      	nop
 801b7f4:	20000e7c 	.word	0x20000e7c
 801b7f8:	20000e78 	.word	0x20000e78
 801b7fc:	0801b795 	.word	0x0801b795

0801b800 <_ZN23MockIgnoredExpectedCallD1Ev>:
 801b800:	b580      	push	{r7, lr}
 801b802:	b082      	sub	sp, #8
 801b804:	af00      	add	r7, sp, #0
 801b806:	6078      	str	r0, [r7, #4]
 801b808:	4a05      	ldr	r2, [pc, #20]	; (801b820 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	601a      	str	r2, [r3, #0]
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	4618      	mov	r0, r3
 801b812:	f7fe fc93 	bl	801a13c <_ZN16MockExpectedCallD1Ev>
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	4618      	mov	r0, r3
 801b81a:	3708      	adds	r7, #8
 801b81c:	46bd      	mov	sp, r7
 801b81e:	bd80      	pop	{r7, pc}
 801b820:	080289bc 	.word	0x080289bc

0801b824 <_ZN23MockIgnoredExpectedCallD0Ev>:
 801b824:	b580      	push	{r7, lr}
 801b826:	b082      	sub	sp, #8
 801b828:	af00      	add	r7, sp, #0
 801b82a:	6078      	str	r0, [r7, #4]
 801b82c:	6878      	ldr	r0, [r7, #4]
 801b82e:	f7ff ffe7 	bl	801b800 <_ZN23MockIgnoredExpectedCallD1Ev>
 801b832:	2104      	movs	r1, #4
 801b834:	6878      	ldr	r0, [r7, #4]
 801b836:	f7ee fc5d 	bl	800a0f4 <_ZdlPvj>
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	4618      	mov	r0, r3
 801b83e:	3708      	adds	r7, #8
 801b840:	46bd      	mov	sp, r7
 801b842:	bd80      	pop	{r7, pc}

0801b844 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801b844:	b580      	push	{r7, lr}
 801b846:	b082      	sub	sp, #8
 801b848:	af00      	add	r7, sp, #0
 801b84a:	6078      	str	r0, [r7, #4]
 801b84c:	4a05      	ldr	r2, [pc, #20]	; (801b864 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	601a      	str	r2, [r3, #0]
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	4618      	mov	r0, r3
 801b856:	f001 fd4b 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	4618      	mov	r0, r3
 801b85e:	3708      	adds	r7, #8
 801b860:	46bd      	mov	sp, r7
 801b862:	bd80      	pop	{r7, pc}
 801b864:	08028b5c 	.word	0x08028b5c

0801b868 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801b868:	b580      	push	{r7, lr}
 801b86a:	b082      	sub	sp, #8
 801b86c:	af00      	add	r7, sp, #0
 801b86e:	6078      	str	r0, [r7, #4]
 801b870:	6878      	ldr	r0, [r7, #4]
 801b872:	f7ff ffe7 	bl	801b844 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801b876:	2138      	movs	r1, #56	; 0x38
 801b878:	6878      	ldr	r0, [r7, #4]
 801b87a:	f7ee fc3b 	bl	800a0f4 <_ZdlPvj>
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	4618      	mov	r0, r3
 801b882:	3708      	adds	r7, #8
 801b884:	46bd      	mov	sp, r7
 801b886:	bd80      	pop	{r7, pc}

0801b888 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801b888:	b480      	push	{r7}
 801b88a:	b083      	sub	sp, #12
 801b88c:	af00      	add	r7, sp, #0
 801b88e:	6078      	str	r0, [r7, #4]
 801b890:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	683a      	ldr	r2, [r7, #0]
 801b896:	601a      	str	r2, [r3, #0]
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	2200      	movs	r2, #0
 801b89c:	605a      	str	r2, [r3, #4]
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	370c      	adds	r7, #12
 801b8a4:	46bd      	mov	sp, r7
 801b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8aa:	4770      	bx	lr

0801b8ac <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801b8ac:	b480      	push	{r7}
 801b8ae:	b083      	sub	sp, #12
 801b8b0:	af00      	add	r7, sp, #0
 801b8b2:	6078      	str	r0, [r7, #4]
 801b8b4:	4a06      	ldr	r2, [pc, #24]	; (801b8d0 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	601a      	str	r2, [r3, #0]
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	2200      	movs	r2, #0
 801b8be:	605a      	str	r2, [r3, #4]
{
}
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	4618      	mov	r0, r3
 801b8c4:	370c      	adds	r7, #12
 801b8c6:	46bd      	mov	sp, r7
 801b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8cc:	4770      	bx	lr
 801b8ce:	bf00      	nop
 801b8d0:	08028cb0 	.word	0x08028cb0

0801b8d4 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801b8d4:	b580      	push	{r7, lr}
 801b8d6:	b084      	sub	sp, #16
 801b8d8:	af00      	add	r7, sp, #0
 801b8da:	6078      	str	r0, [r7, #4]
 801b8dc:	4a0d      	ldr	r2, [pc, #52]	; (801b914 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	685b      	ldr	r3, [r3, #4]
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d00f      	beq.n	801b90a <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	685b      	ldr	r3, [r3, #4]
 801b8ee:	685b      	ldr	r3, [r3, #4]
 801b8f0:	60fb      	str	r3, [r7, #12]
        delete head_;
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	685b      	ldr	r3, [r3, #4]
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d003      	beq.n	801b902 <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801b8fa:	2108      	movs	r1, #8
 801b8fc:	4618      	mov	r0, r3
 801b8fe:	f7ee fbf9 	bl	800a0f4 <_ZdlPvj>
        head_ = next;
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	68fa      	ldr	r2, [r7, #12]
 801b906:	605a      	str	r2, [r3, #4]
    while (head_) {
 801b908:	e7eb      	b.n	801b8e2 <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	4618      	mov	r0, r3
 801b90e:	3710      	adds	r7, #16
 801b910:	46bd      	mov	sp, r7
 801b912:	bd80      	pop	{r7, pc}
 801b914:	08028cb0 	.word	0x08028cb0

0801b918 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801b918:	b580      	push	{r7, lr}
 801b91a:	b082      	sub	sp, #8
 801b91c:	af00      	add	r7, sp, #0
 801b91e:	6078      	str	r0, [r7, #4]
}
 801b920:	6878      	ldr	r0, [r7, #4]
 801b922:	f7ff ffd7 	bl	801b8d4 <_ZN21MockExpectedCallsListD1Ev>
 801b926:	2108      	movs	r1, #8
 801b928:	6878      	ldr	r0, [r7, #4]
 801b92a:	f7ee fbe3 	bl	800a0f4 <_ZdlPvj>
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	4618      	mov	r0, r3
 801b932:	3708      	adds	r7, #8
 801b934:	46bd      	mov	sp, r7
 801b936:	bd80      	pop	{r7, pc}

0801b938 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801b938:	b580      	push	{r7, lr}
 801b93a:	b084      	sub	sp, #16
 801b93c:	af00      	add	r7, sp, #0
 801b93e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	685b      	ldr	r3, [r3, #4]
 801b944:	60fb      	str	r3, [r7, #12]
 801b946:	68fb      	ldr	r3, [r7, #12]
 801b948:	2b00      	cmp	r3, #0
 801b94a:	d011      	beq.n	801b970 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801b94c:	68fb      	ldr	r3, [r7, #12]
 801b94e:	681a      	ldr	r2, [r3, #0]
 801b950:	68fb      	ldr	r3, [r7, #12]
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	33d4      	adds	r3, #212	; 0xd4
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	4610      	mov	r0, r2
 801b95c:	4798      	blx	r3
 801b95e:	4603      	mov	r3, r0
 801b960:	2b00      	cmp	r3, #0
 801b962:	d001      	beq.n	801b968 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801b964:	2301      	movs	r3, #1
 801b966:	e004      	b.n	801b972 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b968:	68fb      	ldr	r3, [r7, #12]
 801b96a:	685b      	ldr	r3, [r3, #4]
 801b96c:	60fb      	str	r3, [r7, #12]
 801b96e:	e7ea      	b.n	801b946 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801b970:	2300      	movs	r3, #0
}
 801b972:	4618      	mov	r0, r3
 801b974:	3710      	adds	r7, #16
 801b976:	46bd      	mov	sp, r7
 801b978:	bd80      	pop	{r7, pc}

0801b97a <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801b97a:	b480      	push	{r7}
 801b97c:	b085      	sub	sp, #20
 801b97e:	af00      	add	r7, sp, #0
 801b980:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801b982:	2300      	movs	r3, #0
 801b984:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	685b      	ldr	r3, [r3, #4]
 801b98a:	60bb      	str	r3, [r7, #8]
 801b98c:	68bb      	ldr	r3, [r7, #8]
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d006      	beq.n	801b9a0 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801b992:	68fb      	ldr	r3, [r7, #12]
 801b994:	3301      	adds	r3, #1
 801b996:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b998:	68bb      	ldr	r3, [r7, #8]
 801b99a:	685b      	ldr	r3, [r3, #4]
 801b99c:	60bb      	str	r3, [r7, #8]
 801b99e:	e7f5      	b.n	801b98c <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801b9a0:	68fb      	ldr	r3, [r7, #12]
}
 801b9a2:	4618      	mov	r0, r3
 801b9a4:	3714      	adds	r7, #20
 801b9a6:	46bd      	mov	sp, r7
 801b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ac:	4770      	bx	lr

0801b9ae <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801b9ae:	b480      	push	{r7}
 801b9b0:	b083      	sub	sp, #12
 801b9b2:	af00      	add	r7, sp, #0
 801b9b4:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	685b      	ldr	r3, [r3, #4]
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	bf0c      	ite	eq
 801b9be:	2301      	moveq	r3, #1
 801b9c0:	2300      	movne	r3, #0
 801b9c2:	b2db      	uxtb	r3, r3
}
 801b9c4:	4618      	mov	r0, r3
 801b9c6:	370c      	adds	r7, #12
 801b9c8:	46bd      	mov	sp, r7
 801b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ce:	4770      	bx	lr

0801b9d0 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801b9d0:	b580      	push	{r7, lr}
 801b9d2:	b084      	sub	sp, #16
 801b9d4:	af00      	add	r7, sp, #0
 801b9d6:	6078      	str	r0, [r7, #4]
 801b9d8:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801b9da:	2300      	movs	r3, #0
 801b9dc:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	685b      	ldr	r3, [r3, #4]
 801b9e2:	60bb      	str	r3, [r7, #8]
 801b9e4:	68bb      	ldr	r3, [r7, #8]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d01d      	beq.n	801ba26 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801b9ea:	68bb      	ldr	r3, [r7, #8]
 801b9ec:	681a      	ldr	r2, [r3, #0]
 801b9ee:	68bb      	ldr	r3, [r7, #8]
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	33b8      	adds	r3, #184	; 0xb8
 801b9f6:	681b      	ldr	r3, [r3, #0]
 801b9f8:	6839      	ldr	r1, [r7, #0]
 801b9fa:	4610      	mov	r0, r2
 801b9fc:	4798      	blx	r3
 801b9fe:	4603      	mov	r3, r0
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	d00c      	beq.n	801ba1e <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801ba04:	68bb      	ldr	r3, [r7, #8]
 801ba06:	681a      	ldr	r2, [r3, #0]
 801ba08:	68bb      	ldr	r3, [r7, #8]
 801ba0a:	681b      	ldr	r3, [r3, #0]
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	33f8      	adds	r3, #248	; 0xf8
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	4610      	mov	r0, r2
 801ba14:	4798      	blx	r3
 801ba16:	4602      	mov	r2, r0
 801ba18:	68fb      	ldr	r3, [r7, #12]
 801ba1a:	4413      	add	r3, r2
 801ba1c:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801ba1e:	68bb      	ldr	r3, [r7, #8]
 801ba20:	685b      	ldr	r3, [r3, #4]
 801ba22:	60bb      	str	r3, [r7, #8]
 801ba24:	e7de      	b.n	801b9e4 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801ba26:	68fb      	ldr	r3, [r7, #12]
}
 801ba28:	4618      	mov	r0, r3
 801ba2a:	3710      	adds	r7, #16
 801ba2c:	46bd      	mov	sp, r7
 801ba2e:	bd80      	pop	{r7, pc}

0801ba30 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801ba30:	b580      	push	{r7, lr}
 801ba32:	b084      	sub	sp, #16
 801ba34:	af00      	add	r7, sp, #0
 801ba36:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801ba38:	2300      	movs	r3, #0
 801ba3a:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	685b      	ldr	r3, [r3, #4]
 801ba40:	60bb      	str	r3, [r7, #8]
 801ba42:	68bb      	ldr	r3, [r7, #8]
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d015      	beq.n	801ba74 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801ba48:	68bb      	ldr	r3, [r7, #8]
 801ba4a:	681a      	ldr	r2, [r3, #0]
 801ba4c:	68bb      	ldr	r3, [r7, #8]
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	681b      	ldr	r3, [r3, #0]
 801ba52:	33c0      	adds	r3, #192	; 0xc0
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	4610      	mov	r0, r2
 801ba58:	4798      	blx	r3
 801ba5a:	4603      	mov	r3, r0
 801ba5c:	f083 0301 	eor.w	r3, r3, #1
 801ba60:	b2db      	uxtb	r3, r3
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d002      	beq.n	801ba6c <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801ba66:	68fb      	ldr	r3, [r7, #12]
 801ba68:	3301      	adds	r3, #1
 801ba6a:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ba6c:	68bb      	ldr	r3, [r7, #8]
 801ba6e:	685b      	ldr	r3, [r3, #4]
 801ba70:	60bb      	str	r3, [r7, #8]
 801ba72:	e7e6      	b.n	801ba42 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801ba74:	68fb      	ldr	r3, [r7, #12]
}
 801ba76:	4618      	mov	r0, r3
 801ba78:	3710      	adds	r7, #16
 801ba7a:	46bd      	mov	sp, r7
 801ba7c:	bd80      	pop	{r7, pc}

0801ba7e <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801ba7e:	b580      	push	{r7, lr}
 801ba80:	b084      	sub	sp, #16
 801ba82:	af00      	add	r7, sp, #0
 801ba84:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	685b      	ldr	r3, [r3, #4]
 801ba8a:	60fb      	str	r3, [r7, #12]
 801ba8c:	68fb      	ldr	r3, [r7, #12]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d011      	beq.n	801bab6 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801ba92:	68fb      	ldr	r3, [r7, #12]
 801ba94:	681a      	ldr	r2, [r3, #0]
 801ba96:	68fb      	ldr	r3, [r7, #12]
 801ba98:	681b      	ldr	r3, [r3, #0]
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	33c8      	adds	r3, #200	; 0xc8
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	4610      	mov	r0, r2
 801baa2:	4798      	blx	r3
 801baa4:	4603      	mov	r3, r0
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d001      	beq.n	801baae <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801baaa:	2301      	movs	r3, #1
 801baac:	e004      	b.n	801bab8 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801baae:	68fb      	ldr	r3, [r7, #12]
 801bab0:	685b      	ldr	r3, [r3, #4]
 801bab2:	60fb      	str	r3, [r7, #12]
 801bab4:	e7ea      	b.n	801ba8c <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801bab6:	2300      	movs	r3, #0
}
 801bab8:	4618      	mov	r0, r3
 801baba:	3710      	adds	r7, #16
 801babc:	46bd      	mov	sp, r7
 801babe:	bd80      	pop	{r7, pc}

0801bac0 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801bac0:	b580      	push	{r7, lr}
 801bac2:	b084      	sub	sp, #16
 801bac4:	af00      	add	r7, sp, #0
 801bac6:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	685b      	ldr	r3, [r3, #4]
 801bacc:	60fb      	str	r3, [r7, #12]
 801bace:	68fb      	ldr	r3, [r7, #12]
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	d014      	beq.n	801bafe <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801bad4:	68fb      	ldr	r3, [r7, #12]
 801bad6:	681a      	ldr	r2, [r3, #0]
 801bad8:	68fb      	ldr	r3, [r7, #12]
 801bada:	681b      	ldr	r3, [r3, #0]
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	33c0      	adds	r3, #192	; 0xc0
 801bae0:	681b      	ldr	r3, [r3, #0]
 801bae2:	4610      	mov	r0, r2
 801bae4:	4798      	blx	r3
 801bae6:	4603      	mov	r3, r0
 801bae8:	f083 0301 	eor.w	r3, r3, #1
 801baec:	b2db      	uxtb	r3, r3
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d001      	beq.n	801baf6 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801baf2:	2301      	movs	r3, #1
 801baf4:	e004      	b.n	801bb00 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	685b      	ldr	r3, [r3, #4]
 801bafa:	60fb      	str	r3, [r7, #12]
 801bafc:	e7e7      	b.n	801bace <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801bafe:	2300      	movs	r3, #0
}
 801bb00:	4618      	mov	r0, r3
 801bb02:	3710      	adds	r7, #16
 801bb04:	46bd      	mov	sp, r7
 801bb06:	bd80      	pop	{r7, pc}

0801bb08 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801bb08:	b580      	push	{r7, lr}
 801bb0a:	b084      	sub	sp, #16
 801bb0c:	af00      	add	r7, sp, #0
 801bb0e:	6078      	str	r0, [r7, #4]
 801bb10:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	685b      	ldr	r3, [r3, #4]
 801bb16:	60fb      	str	r3, [r7, #12]
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d012      	beq.n	801bb44 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801bb1e:	68fb      	ldr	r3, [r7, #12]
 801bb20:	681a      	ldr	r2, [r3, #0]
 801bb22:	68fb      	ldr	r3, [r7, #12]
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	681b      	ldr	r3, [r3, #0]
 801bb28:	33b8      	adds	r3, #184	; 0xb8
 801bb2a:	681b      	ldr	r3, [r3, #0]
 801bb2c:	6839      	ldr	r1, [r7, #0]
 801bb2e:	4610      	mov	r0, r2
 801bb30:	4798      	blx	r3
 801bb32:	4603      	mov	r3, r0
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d001      	beq.n	801bb3c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801bb38:	2301      	movs	r3, #1
 801bb3a:	e004      	b.n	801bb46 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bb3c:	68fb      	ldr	r3, [r7, #12]
 801bb3e:	685b      	ldr	r3, [r3, #4]
 801bb40:	60fb      	str	r3, [r7, #12]
 801bb42:	e7e9      	b.n	801bb18 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801bb44:	2300      	movs	r3, #0
}
 801bb46:	4618      	mov	r0, r3
 801bb48:	3710      	adds	r7, #16
 801bb4a:	46bd      	mov	sp, r7
 801bb4c:	bd80      	pop	{r7, pc}
	...

0801bb50 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801bb50:	b590      	push	{r4, r7, lr}
 801bb52:	b085      	sub	sp, #20
 801bb54:	af00      	add	r7, sp, #0
 801bb56:	6078      	str	r0, [r7, #4]
 801bb58:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801bb5a:	2273      	movs	r2, #115	; 0x73
 801bb5c:	4911      	ldr	r1, [pc, #68]	; (801bba4 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801bb5e:	2008      	movs	r0, #8
 801bb60:	f7ee fab4 	bl	800a0cc <_ZnwjPKci>
 801bb64:	4604      	mov	r4, r0
 801bb66:	6839      	ldr	r1, [r7, #0]
 801bb68:	4620      	mov	r0, r4
 801bb6a:	f7ff fe8d 	bl	801b888 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801bb6e:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	685b      	ldr	r3, [r3, #4]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d103      	bne.n	801bb80 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	68ba      	ldr	r2, [r7, #8]
 801bb7c:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801bb7e:	e00d      	b.n	801bb9c <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	685b      	ldr	r3, [r3, #4]
 801bb84:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801bb86:	68fb      	ldr	r3, [r7, #12]
 801bb88:	685b      	ldr	r3, [r3, #4]
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d003      	beq.n	801bb96 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801bb8e:	68fb      	ldr	r3, [r7, #12]
 801bb90:	685b      	ldr	r3, [r3, #4]
 801bb92:	60fb      	str	r3, [r7, #12]
 801bb94:	e7f7      	b.n	801bb86 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801bb96:	68fb      	ldr	r3, [r7, #12]
 801bb98:	68ba      	ldr	r2, [r7, #8]
 801bb9a:	605a      	str	r2, [r3, #4]
}
 801bb9c:	bf00      	nop
 801bb9e:	3714      	adds	r7, #20
 801bba0:	46bd      	mov	sp, r7
 801bba2:	bd90      	pop	{r4, r7, pc}
 801bba4:	08025d48 	.word	0x08025d48

0801bba8 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801bba8:	b580      	push	{r7, lr}
 801bbaa:	b084      	sub	sp, #16
 801bbac:	af00      	add	r7, sp, #0
 801bbae:	6078      	str	r0, [r7, #4]
 801bbb0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801bbb2:	683b      	ldr	r3, [r7, #0]
 801bbb4:	685b      	ldr	r3, [r3, #4]
 801bbb6:	60fb      	str	r3, [r7, #12]
 801bbb8:	68fb      	ldr	r3, [r7, #12]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d018      	beq.n	801bbf0 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	681a      	ldr	r2, [r3, #0]
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	681b      	ldr	r3, [r3, #0]
 801bbc8:	33c4      	adds	r3, #196	; 0xc4
 801bbca:	681b      	ldr	r3, [r3, #0]
 801bbcc:	4610      	mov	r0, r2
 801bbce:	4798      	blx	r3
 801bbd0:	4603      	mov	r3, r0
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d008      	beq.n	801bbe8 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	681b      	ldr	r3, [r3, #0]
 801bbda:	3330      	adds	r3, #48	; 0x30
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	68fa      	ldr	r2, [r7, #12]
 801bbe0:	6812      	ldr	r2, [r2, #0]
 801bbe2:	4611      	mov	r1, r2
 801bbe4:	6878      	ldr	r0, [r7, #4]
 801bbe6:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801bbe8:	68fb      	ldr	r3, [r7, #12]
 801bbea:	685b      	ldr	r3, [r3, #4]
 801bbec:	60fb      	str	r3, [r7, #12]
 801bbee:	e7e3      	b.n	801bbb8 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801bbf0:	bf00      	nop
 801bbf2:	3710      	adds	r7, #16
 801bbf4:	46bd      	mov	sp, r7
 801bbf6:	bd80      	pop	{r7, pc}

0801bbf8 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801bbf8:	b580      	push	{r7, lr}
 801bbfa:	b086      	sub	sp, #24
 801bbfc:	af00      	add	r7, sp, #0
 801bbfe:	60f8      	str	r0, [r7, #12]
 801bc00:	60b9      	str	r1, [r7, #8]
 801bc02:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	685b      	ldr	r3, [r3, #4]
 801bc08:	617b      	str	r3, [r7, #20]
 801bc0a:	697b      	ldr	r3, [r7, #20]
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d019      	beq.n	801bc44 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801bc10:	697b      	ldr	r3, [r7, #20]
 801bc12:	681a      	ldr	r2, [r3, #0]
 801bc14:	697b      	ldr	r3, [r7, #20]
 801bc16:	681b      	ldr	r3, [r3, #0]
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	33b8      	adds	r3, #184	; 0xb8
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	68b9      	ldr	r1, [r7, #8]
 801bc20:	4610      	mov	r0, r2
 801bc22:	4798      	blx	r3
 801bc24:	4603      	mov	r3, r0
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d008      	beq.n	801bc3c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801bc2a:	68fb      	ldr	r3, [r7, #12]
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	3330      	adds	r3, #48	; 0x30
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	697a      	ldr	r2, [r7, #20]
 801bc34:	6812      	ldr	r2, [r2, #0]
 801bc36:	4611      	mov	r1, r2
 801bc38:	68f8      	ldr	r0, [r7, #12]
 801bc3a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801bc3c:	697b      	ldr	r3, [r7, #20]
 801bc3e:	685b      	ldr	r3, [r3, #4]
 801bc40:	617b      	str	r3, [r7, #20]
 801bc42:	e7e2      	b.n	801bc0a <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801bc44:	bf00      	nop
 801bc46:	3718      	adds	r7, #24
 801bc48:	46bd      	mov	sp, r7
 801bc4a:	bd80      	pop	{r7, pc}

0801bc4c <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801bc4c:	b580      	push	{r7, lr}
 801bc4e:	b084      	sub	sp, #16
 801bc50:	af00      	add	r7, sp, #0
 801bc52:	6078      	str	r0, [r7, #4]
 801bc54:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801bc56:	683b      	ldr	r3, [r7, #0]
 801bc58:	685b      	ldr	r3, [r3, #4]
 801bc5a:	60fb      	str	r3, [r7, #12]
 801bc5c:	68fb      	ldr	r3, [r7, #12]
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d00c      	beq.n	801bc7c <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	3330      	adds	r3, #48	; 0x30
 801bc68:	681b      	ldr	r3, [r3, #0]
 801bc6a:	68fa      	ldr	r2, [r7, #12]
 801bc6c:	6812      	ldr	r2, [r2, #0]
 801bc6e:	4611      	mov	r1, r2
 801bc70:	6878      	ldr	r0, [r7, #4]
 801bc72:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801bc74:	68fb      	ldr	r3, [r7, #12]
 801bc76:	685b      	ldr	r3, [r3, #4]
 801bc78:	60fb      	str	r3, [r7, #12]
 801bc7a:	e7ef      	b.n	801bc5c <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801bc7c:	bf00      	nop
 801bc7e:	3710      	adds	r7, #16
 801bc80:	46bd      	mov	sp, r7
 801bc82:	bd80      	pop	{r7, pc}

0801bc84 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801bc84:	b580      	push	{r7, lr}
 801bc86:	b084      	sub	sp, #16
 801bc88:	af00      	add	r7, sp, #0
 801bc8a:	6078      	str	r0, [r7, #4]
 801bc8c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	685b      	ldr	r3, [r3, #4]
 801bc92:	60fb      	str	r3, [r7, #12]
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	d016      	beq.n	801bcc8 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801bc9a:	68fb      	ldr	r3, [r7, #12]
 801bc9c:	681a      	ldr	r2, [r3, #0]
 801bc9e:	68fb      	ldr	r3, [r7, #12]
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	33b8      	adds	r3, #184	; 0xb8
 801bca6:	681b      	ldr	r3, [r3, #0]
 801bca8:	6839      	ldr	r1, [r7, #0]
 801bcaa:	4610      	mov	r0, r2
 801bcac:	4798      	blx	r3
 801bcae:	4603      	mov	r3, r0
 801bcb0:	f083 0301 	eor.w	r3, r3, #1
 801bcb4:	b2db      	uxtb	r3, r3
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	d002      	beq.n	801bcc0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801bcba:	68fb      	ldr	r3, [r7, #12]
 801bcbc:	2200      	movs	r2, #0
 801bcbe:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bcc0:	68fb      	ldr	r3, [r7, #12]
 801bcc2:	685b      	ldr	r3, [r3, #4]
 801bcc4:	60fb      	str	r3, [r7, #12]
 801bcc6:	e7e5      	b.n	801bc94 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	3388      	adds	r3, #136	; 0x88
 801bcce:	681b      	ldr	r3, [r3, #0]
 801bcd0:	6878      	ldr	r0, [r7, #4]
 801bcd2:	4798      	blx	r3
}
 801bcd4:	bf00      	nop
 801bcd6:	3710      	adds	r7, #16
 801bcd8:	46bd      	mov	sp, r7
 801bcda:	bd80      	pop	{r7, pc}

0801bcdc <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801bcdc:	b580      	push	{r7, lr}
 801bcde:	b084      	sub	sp, #16
 801bce0:	af00      	add	r7, sp, #0
 801bce2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	685b      	ldr	r3, [r3, #4]
 801bce8:	60fb      	str	r3, [r7, #12]
 801bcea:	68fb      	ldr	r3, [r7, #12]
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d015      	beq.n	801bd1c <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801bcf0:	68fb      	ldr	r3, [r7, #12]
 801bcf2:	681a      	ldr	r2, [r3, #0]
 801bcf4:	68fb      	ldr	r3, [r7, #12]
 801bcf6:	681b      	ldr	r3, [r3, #0]
 801bcf8:	681b      	ldr	r3, [r3, #0]
 801bcfa:	33d4      	adds	r3, #212	; 0xd4
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	4610      	mov	r0, r2
 801bd00:	4798      	blx	r3
 801bd02:	4603      	mov	r3, r0
 801bd04:	f083 0301 	eor.w	r3, r3, #1
 801bd08:	b2db      	uxtb	r3, r3
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	d002      	beq.n	801bd14 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801bd0e:	68fb      	ldr	r3, [r7, #12]
 801bd10:	2200      	movs	r2, #0
 801bd12:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bd14:	68fb      	ldr	r3, [r7, #12]
 801bd16:	685b      	ldr	r3, [r3, #4]
 801bd18:	60fb      	str	r3, [r7, #12]
 801bd1a:	e7e6      	b.n	801bcea <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	3388      	adds	r3, #136	; 0x88
 801bd22:	681b      	ldr	r3, [r3, #0]
 801bd24:	6878      	ldr	r0, [r7, #4]
 801bd26:	4798      	blx	r3
}
 801bd28:	bf00      	nop
 801bd2a:	3710      	adds	r7, #16
 801bd2c:	46bd      	mov	sp, r7
 801bd2e:	bd80      	pop	{r7, pc}

0801bd30 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801bd30:	b580      	push	{r7, lr}
 801bd32:	b084      	sub	sp, #16
 801bd34:	af00      	add	r7, sp, #0
 801bd36:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	685b      	ldr	r3, [r3, #4]
 801bd3c:	60fb      	str	r3, [r7, #12]
 801bd3e:	68fb      	ldr	r3, [r7, #12]
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d01b      	beq.n	801bd7c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801bd44:	68fb      	ldr	r3, [r7, #12]
 801bd46:	681a      	ldr	r2, [r3, #0]
 801bd48:	68fb      	ldr	r3, [r7, #12]
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	681b      	ldr	r3, [r3, #0]
 801bd4e:	33c8      	adds	r3, #200	; 0xc8
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	4610      	mov	r0, r2
 801bd54:	4798      	blx	r3
 801bd56:	4603      	mov	r3, r0
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d00b      	beq.n	801bd74 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801bd5c:	68fb      	ldr	r3, [r7, #12]
 801bd5e:	681a      	ldr	r2, [r3, #0]
 801bd60:	68fb      	ldr	r3, [r7, #12]
 801bd62:	681b      	ldr	r3, [r3, #0]
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	33ec      	adds	r3, #236	; 0xec
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	4610      	mov	r0, r2
 801bd6c:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801bd6e:	68fb      	ldr	r3, [r7, #12]
 801bd70:	2200      	movs	r2, #0
 801bd72:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bd74:	68fb      	ldr	r3, [r7, #12]
 801bd76:	685b      	ldr	r3, [r3, #4]
 801bd78:	60fb      	str	r3, [r7, #12]
 801bd7a:	e7e0      	b.n	801bd3e <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	681b      	ldr	r3, [r3, #0]
 801bd80:	3388      	adds	r3, #136	; 0x88
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	6878      	ldr	r0, [r7, #4]
 801bd86:	4798      	blx	r3
}
 801bd88:	bf00      	nop
 801bd8a:	3710      	adds	r7, #16
 801bd8c:	46bd      	mov	sp, r7
 801bd8e:	bd80      	pop	{r7, pc}

0801bd90 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801bd90:	b580      	push	{r7, lr}
 801bd92:	b084      	sub	sp, #16
 801bd94:	af00      	add	r7, sp, #0
 801bd96:	6078      	str	r0, [r7, #4]
 801bd98:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	685b      	ldr	r3, [r3, #4]
 801bd9e:	60fb      	str	r3, [r7, #12]
 801bda0:	68fb      	ldr	r3, [r7, #12]
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d016      	beq.n	801bdd4 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801bda6:	68fb      	ldr	r3, [r7, #12]
 801bda8:	681a      	ldr	r2, [r3, #0]
 801bdaa:	68fb      	ldr	r3, [r7, #12]
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	33a8      	adds	r3, #168	; 0xa8
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	6839      	ldr	r1, [r7, #0]
 801bdb6:	4610      	mov	r0, r2
 801bdb8:	4798      	blx	r3
 801bdba:	4603      	mov	r3, r0
 801bdbc:	f083 0301 	eor.w	r3, r3, #1
 801bdc0:	b2db      	uxtb	r3, r3
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d002      	beq.n	801bdcc <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801bdc6:	68fb      	ldr	r3, [r7, #12]
 801bdc8:	2200      	movs	r2, #0
 801bdca:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bdcc:	68fb      	ldr	r3, [r7, #12]
 801bdce:	685b      	ldr	r3, [r3, #4]
 801bdd0:	60fb      	str	r3, [r7, #12]
 801bdd2:	e7e5      	b.n	801bda0 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	3388      	adds	r3, #136	; 0x88
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	6878      	ldr	r0, [r7, #4]
 801bdde:	4798      	blx	r3
}
 801bde0:	bf00      	nop
 801bde2:	3710      	adds	r7, #16
 801bde4:	46bd      	mov	sp, r7
 801bde6:	bd80      	pop	{r7, pc}

0801bde8 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801bde8:	b580      	push	{r7, lr}
 801bdea:	b084      	sub	sp, #16
 801bdec:	af00      	add	r7, sp, #0
 801bdee:	6078      	str	r0, [r7, #4]
 801bdf0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	685b      	ldr	r3, [r3, #4]
 801bdf6:	60fb      	str	r3, [r7, #12]
 801bdf8:	68fb      	ldr	r3, [r7, #12]
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	d016      	beq.n	801be2c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801bdfe:	68fb      	ldr	r3, [r7, #12]
 801be00:	681a      	ldr	r2, [r3, #0]
 801be02:	68fb      	ldr	r3, [r7, #12]
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	681b      	ldr	r3, [r3, #0]
 801be08:	33b0      	adds	r3, #176	; 0xb0
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	6839      	ldr	r1, [r7, #0]
 801be0e:	4610      	mov	r0, r2
 801be10:	4798      	blx	r3
 801be12:	4603      	mov	r3, r0
 801be14:	f083 0301 	eor.w	r3, r3, #1
 801be18:	b2db      	uxtb	r3, r3
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d002      	beq.n	801be24 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801be1e:	68fb      	ldr	r3, [r7, #12]
 801be20:	2200      	movs	r2, #0
 801be22:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be24:	68fb      	ldr	r3, [r7, #12]
 801be26:	685b      	ldr	r3, [r3, #4]
 801be28:	60fb      	str	r3, [r7, #12]
 801be2a:	e7e5      	b.n	801bdf8 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	681b      	ldr	r3, [r3, #0]
 801be30:	3388      	adds	r3, #136	; 0x88
 801be32:	681b      	ldr	r3, [r3, #0]
 801be34:	6878      	ldr	r0, [r7, #4]
 801be36:	4798      	blx	r3
}
 801be38:	bf00      	nop
 801be3a:	3710      	adds	r7, #16
 801be3c:	46bd      	mov	sp, r7
 801be3e:	bd80      	pop	{r7, pc}

0801be40 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801be40:	b580      	push	{r7, lr}
 801be42:	b084      	sub	sp, #16
 801be44:	af00      	add	r7, sp, #0
 801be46:	6078      	str	r0, [r7, #4]
 801be48:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	685b      	ldr	r3, [r3, #4]
 801be4e:	60fb      	str	r3, [r7, #12]
 801be50:	68fb      	ldr	r3, [r7, #12]
 801be52:	2b00      	cmp	r3, #0
 801be54:	d016      	beq.n	801be84 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801be56:	68fb      	ldr	r3, [r7, #12]
 801be58:	681a      	ldr	r2, [r3, #0]
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	33ac      	adds	r3, #172	; 0xac
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	6839      	ldr	r1, [r7, #0]
 801be66:	4610      	mov	r0, r2
 801be68:	4798      	blx	r3
 801be6a:	4603      	mov	r3, r0
 801be6c:	f083 0301 	eor.w	r3, r3, #1
 801be70:	b2db      	uxtb	r3, r3
 801be72:	2b00      	cmp	r3, #0
 801be74:	d002      	beq.n	801be7c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801be76:	68fb      	ldr	r3, [r7, #12]
 801be78:	2200      	movs	r2, #0
 801be7a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be7c:	68fb      	ldr	r3, [r7, #12]
 801be7e:	685b      	ldr	r3, [r3, #4]
 801be80:	60fb      	str	r3, [r7, #12]
 801be82:	e7e5      	b.n	801be50 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	681b      	ldr	r3, [r3, #0]
 801be88:	3388      	adds	r3, #136	; 0x88
 801be8a:	681b      	ldr	r3, [r3, #0]
 801be8c:	6878      	ldr	r0, [r7, #4]
 801be8e:	4798      	blx	r3
}
 801be90:	bf00      	nop
 801be92:	3710      	adds	r7, #16
 801be94:	46bd      	mov	sp, r7
 801be96:	bd80      	pop	{r7, pc}

0801be98 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801be98:	b580      	push	{r7, lr}
 801be9a:	b084      	sub	sp, #16
 801be9c:	af00      	add	r7, sp, #0
 801be9e:	6078      	str	r0, [r7, #4]
 801bea0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	685b      	ldr	r3, [r3, #4]
 801bea6:	60fb      	str	r3, [r7, #12]
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	2b00      	cmp	r3, #0
 801beac:	d016      	beq.n	801bedc <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801beae:	68fb      	ldr	r3, [r7, #12]
 801beb0:	681a      	ldr	r2, [r3, #0]
 801beb2:	68fb      	ldr	r3, [r7, #12]
 801beb4:	681b      	ldr	r3, [r3, #0]
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	33b4      	adds	r3, #180	; 0xb4
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	6839      	ldr	r1, [r7, #0]
 801bebe:	4610      	mov	r0, r2
 801bec0:	4798      	blx	r3
 801bec2:	4603      	mov	r3, r0
 801bec4:	f083 0301 	eor.w	r3, r3, #1
 801bec8:	b2db      	uxtb	r3, r3
 801beca:	2b00      	cmp	r3, #0
 801becc:	d002      	beq.n	801bed4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801bece:	68fb      	ldr	r3, [r7, #12]
 801bed0:	2200      	movs	r2, #0
 801bed2:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bed4:	68fb      	ldr	r3, [r7, #12]
 801bed6:	685b      	ldr	r3, [r3, #4]
 801bed8:	60fb      	str	r3, [r7, #12]
 801beda:	e7e5      	b.n	801bea8 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	681b      	ldr	r3, [r3, #0]
 801bee0:	3388      	adds	r3, #136	; 0x88
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	6878      	ldr	r0, [r7, #4]
 801bee6:	4798      	blx	r3
}
 801bee8:	bf00      	nop
 801beea:	3710      	adds	r7, #16
 801beec:	46bd      	mov	sp, r7
 801beee:	bd80      	pop	{r7, pc}

0801bef0 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801bef0:	b580      	push	{r7, lr}
 801bef2:	b084      	sub	sp, #16
 801bef4:	af00      	add	r7, sp, #0
 801bef6:	6078      	str	r0, [r7, #4]
 801bef8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	685b      	ldr	r3, [r3, #4]
 801befe:	60fb      	str	r3, [r7, #12]
 801bf00:	68fb      	ldr	r3, [r7, #12]
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d016      	beq.n	801bf34 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801bf06:	68fb      	ldr	r3, [r7, #12]
 801bf08:	681a      	ldr	r2, [r3, #0]
 801bf0a:	68fb      	ldr	r3, [r7, #12]
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	681b      	ldr	r3, [r3, #0]
 801bf10:	33bc      	adds	r3, #188	; 0xbc
 801bf12:	681b      	ldr	r3, [r3, #0]
 801bf14:	6839      	ldr	r1, [r7, #0]
 801bf16:	4610      	mov	r0, r2
 801bf18:	4798      	blx	r3
 801bf1a:	4603      	mov	r3, r0
 801bf1c:	f083 0301 	eor.w	r3, r3, #1
 801bf20:	b2db      	uxtb	r3, r3
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d002      	beq.n	801bf2c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801bf26:	68fb      	ldr	r3, [r7, #12]
 801bf28:	2200      	movs	r2, #0
 801bf2a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bf2c:	68fb      	ldr	r3, [r7, #12]
 801bf2e:	685b      	ldr	r3, [r3, #4]
 801bf30:	60fb      	str	r3, [r7, #12]
 801bf32:	e7e5      	b.n	801bf00 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	681b      	ldr	r3, [r3, #0]
 801bf38:	3388      	adds	r3, #136	; 0x88
 801bf3a:	681b      	ldr	r3, [r3, #0]
 801bf3c:	6878      	ldr	r0, [r7, #4]
 801bf3e:	4798      	blx	r3
}
 801bf40:	bf00      	nop
 801bf42:	3710      	adds	r7, #16
 801bf44:	46bd      	mov	sp, r7
 801bf46:	bd80      	pop	{r7, pc}

0801bf48 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801bf48:	b580      	push	{r7, lr}
 801bf4a:	b084      	sub	sp, #16
 801bf4c:	af00      	add	r7, sp, #0
 801bf4e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	685b      	ldr	r3, [r3, #4]
 801bf54:	60fb      	str	r3, [r7, #12]
 801bf56:	68fb      	ldr	r3, [r7, #12]
 801bf58:	2b00      	cmp	r3, #0
 801bf5a:	d01d      	beq.n	801bf98 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801bf5c:	68fb      	ldr	r3, [r7, #12]
 801bf5e:	681a      	ldr	r2, [r3, #0]
 801bf60:	68fb      	ldr	r3, [r7, #12]
 801bf62:	681b      	ldr	r3, [r3, #0]
 801bf64:	681b      	ldr	r3, [r3, #0]
 801bf66:	33c8      	adds	r3, #200	; 0xc8
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	4610      	mov	r0, r2
 801bf6c:	4798      	blx	r3
 801bf6e:	4603      	mov	r3, r0
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d00d      	beq.n	801bf90 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801bf74:	68fb      	ldr	r3, [r7, #12]
 801bf76:	681b      	ldr	r3, [r3, #0]
 801bf78:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801bf7a:	68fb      	ldr	r3, [r7, #12]
 801bf7c:	2200      	movs	r2, #0
 801bf7e:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	3388      	adds	r3, #136	; 0x88
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	6878      	ldr	r0, [r7, #4]
 801bf8a:	4798      	blx	r3
            return matchingCall;
 801bf8c:	68bb      	ldr	r3, [r7, #8]
 801bf8e:	e004      	b.n	801bf9a <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bf90:	68fb      	ldr	r3, [r7, #12]
 801bf92:	685b      	ldr	r3, [r3, #4]
 801bf94:	60fb      	str	r3, [r7, #12]
 801bf96:	e7de      	b.n	801bf56 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801bf98:	2300      	movs	r3, #0
}
 801bf9a:	4618      	mov	r0, r3
 801bf9c:	3710      	adds	r7, #16
 801bf9e:	46bd      	mov	sp, r7
 801bfa0:	bd80      	pop	{r7, pc}

0801bfa2 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801bfa2:	b580      	push	{r7, lr}
 801bfa4:	b084      	sub	sp, #16
 801bfa6:	af00      	add	r7, sp, #0
 801bfa8:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	685b      	ldr	r3, [r3, #4]
 801bfae:	60fb      	str	r3, [r7, #12]
 801bfb0:	68fb      	ldr	r3, [r7, #12]
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d012      	beq.n	801bfdc <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801bfb6:	68fb      	ldr	r3, [r7, #12]
 801bfb8:	681a      	ldr	r2, [r3, #0]
 801bfba:	68fb      	ldr	r3, [r7, #12]
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	681b      	ldr	r3, [r3, #0]
 801bfc0:	33cc      	adds	r3, #204	; 0xcc
 801bfc2:	681b      	ldr	r3, [r3, #0]
 801bfc4:	4610      	mov	r0, r2
 801bfc6:	4798      	blx	r3
 801bfc8:	4603      	mov	r3, r0
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	d002      	beq.n	801bfd4 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801bfce:	68fb      	ldr	r3, [r7, #12]
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	e004      	b.n	801bfde <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bfd4:	68fb      	ldr	r3, [r7, #12]
 801bfd6:	685b      	ldr	r3, [r3, #4]
 801bfd8:	60fb      	str	r3, [r7, #12]
 801bfda:	e7e9      	b.n	801bfb0 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801bfdc:	2300      	movs	r3, #0
}
 801bfde:	4618      	mov	r0, r3
 801bfe0:	3710      	adds	r7, #16
 801bfe2:	46bd      	mov	sp, r7
 801bfe4:	bd80      	pop	{r7, pc}

0801bfe6 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801bfe6:	b580      	push	{r7, lr}
 801bfe8:	b084      	sub	sp, #16
 801bfea:	af00      	add	r7, sp, #0
 801bfec:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	685b      	ldr	r3, [r3, #4]
 801bff2:	60fb      	str	r3, [r7, #12]
 801bff4:	68fb      	ldr	r3, [r7, #12]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d01d      	beq.n	801c036 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801bffa:	68fb      	ldr	r3, [r7, #12]
 801bffc:	681a      	ldr	r2, [r3, #0]
 801bffe:	68fb      	ldr	r3, [r7, #12]
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	681b      	ldr	r3, [r3, #0]
 801c004:	33cc      	adds	r3, #204	; 0xcc
 801c006:	681b      	ldr	r3, [r3, #0]
 801c008:	4610      	mov	r0, r2
 801c00a:	4798      	blx	r3
 801c00c:	4603      	mov	r3, r0
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d00d      	beq.n	801c02e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801c018:	68fb      	ldr	r3, [r7, #12]
 801c01a:	2200      	movs	r2, #0
 801c01c:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	681b      	ldr	r3, [r3, #0]
 801c022:	3388      	adds	r3, #136	; 0x88
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	6878      	ldr	r0, [r7, #4]
 801c028:	4798      	blx	r3
            return matchingCall;
 801c02a:	68bb      	ldr	r3, [r7, #8]
 801c02c:	e004      	b.n	801c038 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	685b      	ldr	r3, [r3, #4]
 801c032:	60fb      	str	r3, [r7, #12]
 801c034:	e7de      	b.n	801bff4 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801c036:	2300      	movs	r3, #0
}
 801c038:	4618      	mov	r0, r3
 801c03a:	3710      	adds	r7, #16
 801c03c:	46bd      	mov	sp, r7
 801c03e:	bd80      	pop	{r7, pc}

0801c040 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801c040:	b580      	push	{r7, lr}
 801c042:	b086      	sub	sp, #24
 801c044:	af00      	add	r7, sp, #0
 801c046:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	685b      	ldr	r3, [r3, #4]
 801c04c:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801c04e:	2300      	movs	r3, #0
 801c050:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801c052:	2300      	movs	r3, #0
 801c054:	60fb      	str	r3, [r7, #12]

    while (current) {
 801c056:	697b      	ldr	r3, [r7, #20]
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d024      	beq.n	801c0a6 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801c05c:	697b      	ldr	r3, [r7, #20]
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	2b00      	cmp	r3, #0
 801c062:	d11a      	bne.n	801c09a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801c064:	697b      	ldr	r3, [r7, #20]
 801c066:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801c068:	693b      	ldr	r3, [r7, #16]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d106      	bne.n	801c07c <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801c06e:	697b      	ldr	r3, [r7, #20]
 801c070:	685b      	ldr	r3, [r3, #4]
 801c072:	617b      	str	r3, [r7, #20]
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	697a      	ldr	r2, [r7, #20]
 801c078:	605a      	str	r2, [r3, #4]
 801c07a:	e006      	b.n	801c08a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801c07c:	697b      	ldr	r3, [r7, #20]
 801c07e:	685a      	ldr	r2, [r3, #4]
 801c080:	693b      	ldr	r3, [r7, #16]
 801c082:	605a      	str	r2, [r3, #4]
 801c084:	693b      	ldr	r3, [r7, #16]
 801c086:	685b      	ldr	r3, [r3, #4]
 801c088:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801c08a:	68fb      	ldr	r3, [r7, #12]
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d0e2      	beq.n	801c056 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801c090:	2108      	movs	r1, #8
 801c092:	4618      	mov	r0, r3
 801c094:	f7ee f82e 	bl	800a0f4 <_ZdlPvj>
 801c098:	e7dd      	b.n	801c056 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801c09a:	697b      	ldr	r3, [r7, #20]
 801c09c:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801c09e:	697b      	ldr	r3, [r7, #20]
 801c0a0:	685b      	ldr	r3, [r3, #4]
 801c0a2:	617b      	str	r3, [r7, #20]
    while (current) {
 801c0a4:	e7d7      	b.n	801c056 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801c0a6:	bf00      	nop
 801c0a8:	3718      	adds	r7, #24
 801c0aa:	46bd      	mov	sp, r7
 801c0ac:	bd80      	pop	{r7, pc}

0801c0ae <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801c0ae:	b580      	push	{r7, lr}
 801c0b0:	b084      	sub	sp, #16
 801c0b2:	af00      	add	r7, sp, #0
 801c0b4:	6078      	str	r0, [r7, #4]
    while (head_) {
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	685b      	ldr	r3, [r3, #4]
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d019      	beq.n	801c0f2 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801c0be:	687b      	ldr	r3, [r7, #4]
 801c0c0:	685b      	ldr	r3, [r3, #4]
 801c0c2:	685b      	ldr	r3, [r3, #4]
 801c0c4:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	685b      	ldr	r3, [r3, #4]
 801c0ca:	681b      	ldr	r3, [r3, #0]
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d004      	beq.n	801c0da <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801c0d0:	681a      	ldr	r2, [r3, #0]
 801c0d2:	3204      	adds	r2, #4
 801c0d4:	6812      	ldr	r2, [r2, #0]
 801c0d6:	4618      	mov	r0, r3
 801c0d8:	4790      	blx	r2
        delete head_;
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	685b      	ldr	r3, [r3, #4]
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d003      	beq.n	801c0ea <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801c0e2:	2108      	movs	r1, #8
 801c0e4:	4618      	mov	r0, r3
 801c0e6:	f7ee f805 	bl	800a0f4 <_ZdlPvj>
        head_ = next;
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	68fa      	ldr	r2, [r7, #12]
 801c0ee:	605a      	str	r2, [r3, #4]
    while (head_) {
 801c0f0:	e7e1      	b.n	801c0b6 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801c0f2:	bf00      	nop
 801c0f4:	3710      	adds	r7, #16
 801c0f6:	46bd      	mov	sp, r7
 801c0f8:	bd80      	pop	{r7, pc}

0801c0fa <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801c0fa:	b580      	push	{r7, lr}
 801c0fc:	b084      	sub	sp, #16
 801c0fe:	af00      	add	r7, sp, #0
 801c100:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	685b      	ldr	r3, [r3, #4]
 801c106:	60fb      	str	r3, [r7, #12]
 801c108:	68fb      	ldr	r3, [r7, #12]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d00c      	beq.n	801c128 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801c10e:	68fb      	ldr	r3, [r7, #12]
 801c110:	681a      	ldr	r2, [r3, #0]
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	681b      	ldr	r3, [r3, #0]
 801c118:	33ec      	adds	r3, #236	; 0xec
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	4610      	mov	r0, r2
 801c11e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c120:	68fb      	ldr	r3, [r7, #12]
 801c122:	685b      	ldr	r3, [r3, #4]
 801c124:	60fb      	str	r3, [r7, #12]
 801c126:	e7ef      	b.n	801c108 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801c128:	bf00      	nop
 801c12a:	3710      	adds	r7, #16
 801c12c:	46bd      	mov	sp, r7
 801c12e:	bd80      	pop	{r7, pc}

0801c130 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801c130:	b580      	push	{r7, lr}
 801c132:	b084      	sub	sp, #16
 801c134:	af00      	add	r7, sp, #0
 801c136:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	685b      	ldr	r3, [r3, #4]
 801c13c:	60fb      	str	r3, [r7, #12]
 801c13e:	68fb      	ldr	r3, [r7, #12]
 801c140:	2b00      	cmp	r3, #0
 801c142:	d00c      	beq.n	801c15e <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	681a      	ldr	r2, [r3, #0]
 801c148:	68fb      	ldr	r3, [r7, #12]
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	33e8      	adds	r3, #232	; 0xe8
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	4610      	mov	r0, r2
 801c154:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c156:	68fb      	ldr	r3, [r7, #12]
 801c158:	685b      	ldr	r3, [r3, #4]
 801c15a:	60fb      	str	r3, [r7, #12]
 801c15c:	e7ef      	b.n	801c13e <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801c15e:	bf00      	nop
 801c160:	3710      	adds	r7, #16
 801c162:	46bd      	mov	sp, r7
 801c164:	bd80      	pop	{r7, pc}

0801c166 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801c166:	b580      	push	{r7, lr}
 801c168:	b084      	sub	sp, #16
 801c16a:	af00      	add	r7, sp, #0
 801c16c:	6078      	str	r0, [r7, #4]
 801c16e:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	685b      	ldr	r3, [r3, #4]
 801c174:	60fb      	str	r3, [r7, #12]
 801c176:	68fb      	ldr	r3, [r7, #12]
 801c178:	2b00      	cmp	r3, #0
 801c17a:	d00d      	beq.n	801c198 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801c17c:	68fb      	ldr	r3, [r7, #12]
 801c17e:	681a      	ldr	r2, [r3, #0]
 801c180:	68fb      	ldr	r3, [r7, #12]
 801c182:	681b      	ldr	r3, [r3, #0]
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	33dc      	adds	r3, #220	; 0xdc
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	6839      	ldr	r1, [r7, #0]
 801c18c:	4610      	mov	r0, r2
 801c18e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c190:	68fb      	ldr	r3, [r7, #12]
 801c192:	685b      	ldr	r3, [r3, #4]
 801c194:	60fb      	str	r3, [r7, #12]
 801c196:	e7ee      	b.n	801c176 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801c198:	bf00      	nop
 801c19a:	3710      	adds	r7, #16
 801c19c:	46bd      	mov	sp, r7
 801c19e:	bd80      	pop	{r7, pc}

0801c1a0 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801c1a0:	b580      	push	{r7, lr}
 801c1a2:	b084      	sub	sp, #16
 801c1a4:	af00      	add	r7, sp, #0
 801c1a6:	6078      	str	r0, [r7, #4]
 801c1a8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	685b      	ldr	r3, [r3, #4]
 801c1ae:	60fb      	str	r3, [r7, #12]
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d00d      	beq.n	801c1d2 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801c1b6:	68fb      	ldr	r3, [r7, #12]
 801c1b8:	681a      	ldr	r2, [r3, #0]
 801c1ba:	68fb      	ldr	r3, [r7, #12]
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	681b      	ldr	r3, [r3, #0]
 801c1c0:	33e0      	adds	r3, #224	; 0xe0
 801c1c2:	681b      	ldr	r3, [r3, #0]
 801c1c4:	6839      	ldr	r1, [r7, #0]
 801c1c6:	4610      	mov	r0, r2
 801c1c8:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c1ca:	68fb      	ldr	r3, [r7, #12]
 801c1cc:	685b      	ldr	r3, [r3, #4]
 801c1ce:	60fb      	str	r3, [r7, #12]
 801c1d0:	e7ee      	b.n	801c1b0 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801c1d2:	bf00      	nop
 801c1d4:	3710      	adds	r7, #16
 801c1d6:	46bd      	mov	sp, r7
 801c1d8:	bd80      	pop	{r7, pc}
	...

0801c1dc <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801c1dc:	b590      	push	{r4, r7, lr}
 801c1de:	b087      	sub	sp, #28
 801c1e0:	af00      	add	r7, sp, #0
 801c1e2:	60f8      	str	r0, [r7, #12]
 801c1e4:	60b9      	str	r1, [r7, #8]
 801c1e6:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801c1e8:	68b9      	ldr	r1, [r7, #8]
 801c1ea:	68f8      	ldr	r0, [r7, #12]
 801c1ec:	f7f0 fb85 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801c1f0:	f107 0310 	add.w	r3, r7, #16
 801c1f4:	490f      	ldr	r1, [pc, #60]	; (801c234 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801c1f6:	4618      	mov	r0, r3
 801c1f8:	f7f0 fb2b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801c1fc:	f107 0310 	add.w	r3, r7, #16
 801c200:	4619      	mov	r1, r3
 801c202:	68f8      	ldr	r0, [r7, #12]
 801c204:	f7f0 fee9 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801c208:	4603      	mov	r3, r0
 801c20a:	461c      	mov	r4, r3
 801c20c:	f107 0310 	add.w	r3, r7, #16
 801c210:	4618      	mov	r0, r3
 801c212:	f7f0 fed6 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801c216:	2c00      	cmp	r4, #0
 801c218:	d007      	beq.n	801c22a <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801c21a:	6879      	ldr	r1, [r7, #4]
 801c21c:	68f8      	ldr	r0, [r7, #12]
 801c21e:	f7f0 ff4d 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801c222:	4905      	ldr	r1, [pc, #20]	; (801c238 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801c224:	68f8      	ldr	r0, [r7, #12]
 801c226:	f7f0 ff5b 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801c22a:	bf00      	nop
}
 801c22c:	68f8      	ldr	r0, [r7, #12]
 801c22e:	371c      	adds	r7, #28
 801c230:	46bd      	mov	sp, r7
 801c232:	bd90      	pop	{r4, r7, pc}
 801c234:	08025d6c 	.word	0x08025d6c
 801c238:	08025d70 	.word	0x08025d70

0801c23c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801c23c:	b590      	push	{r4, r7, lr}
 801c23e:	b087      	sub	sp, #28
 801c240:	af00      	add	r7, sp, #0
 801c242:	60f8      	str	r0, [r7, #12]
 801c244:	60b9      	str	r1, [r7, #8]
 801c246:	607a      	str	r2, [r7, #4]
 801c248:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801c24a:	68b9      	ldr	r1, [r7, #8]
 801c24c:	68f8      	ldr	r0, [r7, #12]
 801c24e:	f7f0 fb54 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801c252:	f107 0310 	add.w	r3, r7, #16
 801c256:	4912      	ldr	r1, [pc, #72]	; (801c2a0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801c258:	4618      	mov	r0, r3
 801c25a:	f7f0 fafa 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801c25e:	f107 0310 	add.w	r3, r7, #16
 801c262:	4619      	mov	r1, r3
 801c264:	68f8      	ldr	r0, [r7, #12]
 801c266:	f7f0 fefd 	bl	800d064 <_ZneRK12SimpleStringS1_>
 801c26a:	4603      	mov	r3, r0
 801c26c:	461c      	mov	r4, r3
 801c26e:	f107 0310 	add.w	r3, r7, #16
 801c272:	4618      	mov	r0, r3
 801c274:	f7f0 fea5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801c278:	2c00      	cmp	r4, #0
 801c27a:	d003      	beq.n	801c284 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801c27c:	4909      	ldr	r1, [pc, #36]	; (801c2a4 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801c27e:	68f8      	ldr	r0, [r7, #12]
 801c280:	f7f0 ff2e 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801c284:	6879      	ldr	r1, [r7, #4]
 801c286:	68f8      	ldr	r0, [r7, #12]
 801c288:	f7f0 ff18 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801c28c:	6839      	ldr	r1, [r7, #0]
 801c28e:	68f8      	ldr	r0, [r7, #12]
 801c290:	f7f0 ff14 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    return str;
 801c294:	bf00      	nop
}
 801c296:	68f8      	ldr	r0, [r7, #12]
 801c298:	371c      	adds	r7, #28
 801c29a:	46bd      	mov	sp, r7
 801c29c:	bd90      	pop	{r4, r7, pc}
 801c29e:	bf00      	nop
 801c2a0:	08025d6c 	.word	0x08025d6c
 801c2a4:	08025d78 	.word	0x08025d78

0801c2a8 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801c2a8:	b580      	push	{r7, lr}
 801c2aa:	b08c      	sub	sp, #48	; 0x30
 801c2ac:	af00      	add	r7, sp, #0
 801c2ae:	60f8      	str	r0, [r7, #12]
 801c2b0:	60b9      	str	r1, [r7, #8]
 801c2b2:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801c2b4:	f107 0314 	add.w	r3, r7, #20
 801c2b8:	4929      	ldr	r1, [pc, #164]	; (801c360 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	f7f0 fac9 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c2c0:	68bb      	ldr	r3, [r7, #8]
 801c2c2:	685b      	ldr	r3, [r3, #4]
 801c2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d038      	beq.n	801c33e <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801c2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2ce:	681a      	ldr	r2, [r3, #0]
 801c2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	681b      	ldr	r3, [r3, #0]
 801c2d6:	33c0      	adds	r3, #192	; 0xc0
 801c2d8:	681b      	ldr	r3, [r3, #0]
 801c2da:	4610      	mov	r0, r2
 801c2dc:	4798      	blx	r3
 801c2de:	4603      	mov	r3, r0
 801c2e0:	f083 0301 	eor.w	r3, r3, #1
 801c2e4:	b2db      	uxtb	r3, r3
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	d025      	beq.n	801c336 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801c2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2ec:	6819      	ldr	r1, [r3, #0]
 801c2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2f0:	681b      	ldr	r3, [r3, #0]
 801c2f2:	681b      	ldr	r3, [r3, #0]
 801c2f4:	33f0      	adds	r3, #240	; 0xf0
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c2fc:	4610      	mov	r0, r2
 801c2fe:	4798      	blx	r3
 801c300:	f107 001c 	add.w	r0, r7, #28
 801c304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c308:	f107 0114 	add.w	r1, r7, #20
 801c30c:	687a      	ldr	r2, [r7, #4]
 801c30e:	f7ff ff95 	bl	801c23c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c312:	f107 021c 	add.w	r2, r7, #28
 801c316:	f107 0314 	add.w	r3, r7, #20
 801c31a:	4611      	mov	r1, r2
 801c31c:	4618      	mov	r0, r3
 801c31e:	f7f0 fb04 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801c322:	f107 031c 	add.w	r3, r7, #28
 801c326:	4618      	mov	r0, r3
 801c328:	f7f0 fe4b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801c32c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c330:	4618      	mov	r0, r3
 801c332:	f7f0 fe46 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c338:	685b      	ldr	r3, [r3, #4]
 801c33a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c33c:	e7c3      	b.n	801c2c6 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c33e:	68fb      	ldr	r3, [r7, #12]
 801c340:	f107 0114 	add.w	r1, r7, #20
 801c344:	687a      	ldr	r2, [r7, #4]
 801c346:	4618      	mov	r0, r3
 801c348:	f7ff ff48 	bl	801c1dc <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801c34c:	f107 0314 	add.w	r3, r7, #20
 801c350:	4618      	mov	r0, r3
 801c352:	f7f0 fe36 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c356:	bf00      	nop
}
 801c358:	68f8      	ldr	r0, [r7, #12]
 801c35a:	3730      	adds	r7, #48	; 0x30
 801c35c:	46bd      	mov	sp, r7
 801c35e:	bd80      	pop	{r7, pc}
 801c360:	08025d6c 	.word	0x08025d6c

0801c364 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801c364:	b580      	push	{r7, lr}
 801c366:	b08c      	sub	sp, #48	; 0x30
 801c368:	af00      	add	r7, sp, #0
 801c36a:	60f8      	str	r0, [r7, #12]
 801c36c:	60b9      	str	r1, [r7, #8]
 801c36e:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801c370:	f107 0314 	add.w	r3, r7, #20
 801c374:	4928      	ldr	r1, [pc, #160]	; (801c418 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801c376:	4618      	mov	r0, r3
 801c378:	f7f0 fa6b 	bl	800c852 <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c37c:	68bb      	ldr	r3, [r7, #8]
 801c37e:	685b      	ldr	r3, [r3, #4]
 801c380:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c384:	2b00      	cmp	r3, #0
 801c386:	d035      	beq.n	801c3f4 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801c388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c38a:	681a      	ldr	r2, [r3, #0]
 801c38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c38e:	681b      	ldr	r3, [r3, #0]
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	33c0      	adds	r3, #192	; 0xc0
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	4610      	mov	r0, r2
 801c398:	4798      	blx	r3
 801c39a:	4603      	mov	r3, r0
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	d025      	beq.n	801c3ec <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801c3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3a2:	6819      	ldr	r1, [r3, #0]
 801c3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	681b      	ldr	r3, [r3, #0]
 801c3aa:	33f0      	adds	r3, #240	; 0xf0
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c3b2:	4610      	mov	r0, r2
 801c3b4:	4798      	blx	r3
 801c3b6:	f107 001c 	add.w	r0, r7, #28
 801c3ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c3be:	f107 0114 	add.w	r1, r7, #20
 801c3c2:	687a      	ldr	r2, [r7, #4]
 801c3c4:	f7ff ff3a 	bl	801c23c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c3c8:	f107 021c 	add.w	r2, r7, #28
 801c3cc:	f107 0314 	add.w	r3, r7, #20
 801c3d0:	4611      	mov	r1, r2
 801c3d2:	4618      	mov	r0, r3
 801c3d4:	f7f0 faa9 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801c3d8:	f107 031c 	add.w	r3, r7, #28
 801c3dc:	4618      	mov	r0, r3
 801c3de:	f7f0 fdf0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801c3e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c3e6:	4618      	mov	r0, r3
 801c3e8:	f7f0 fdeb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3ee:	685b      	ldr	r3, [r3, #4]
 801c3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c3f2:	e7c6      	b.n	801c382 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c3f4:	68fb      	ldr	r3, [r7, #12]
 801c3f6:	f107 0114 	add.w	r1, r7, #20
 801c3fa:	687a      	ldr	r2, [r7, #4]
 801c3fc:	4618      	mov	r0, r3
 801c3fe:	f7ff feed 	bl	801c1dc <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801c402:	f107 0314 	add.w	r3, r7, #20
 801c406:	4618      	mov	r0, r3
 801c408:	f7f0 fddb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c40c:	bf00      	nop
}
 801c40e:	68f8      	ldr	r0, [r7, #12]
 801c410:	3730      	adds	r7, #48	; 0x30
 801c412:	46bd      	mov	sp, r7
 801c414:	bd80      	pop	{r7, pc}
 801c416:	bf00      	nop
 801c418:	08025d6c 	.word	0x08025d6c

0801c41c <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801c41c:	b580      	push	{r7, lr}
 801c41e:	b08e      	sub	sp, #56	; 0x38
 801c420:	af00      	add	r7, sp, #0
 801c422:	6078      	str	r0, [r7, #4]
 801c424:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801c426:	f107 030c 	add.w	r3, r7, #12
 801c42a:	4936      	ldr	r1, [pc, #216]	; (801c504 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c42c:	4618      	mov	r0, r3
 801c42e:	f7f0 fa10 	bl	800c852 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c432:	683b      	ldr	r3, [r7, #0]
 801c434:	685b      	ldr	r3, [r3, #4]
 801c436:	637b      	str	r3, [r7, #52]	; 0x34
 801c438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d044      	beq.n	801c4c8 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801c43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c440:	681a      	ldr	r2, [r3, #0]
 801c442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	681b      	ldr	r3, [r3, #0]
 801c448:	33cc      	adds	r3, #204	; 0xcc
 801c44a:	681b      	ldr	r3, [r3, #0]
 801c44c:	4610      	mov	r0, r2
 801c44e:	4798      	blx	r3
 801c450:	4603      	mov	r3, r0
 801c452:	f083 0301 	eor.w	r3, r3, #1
 801c456:	b2db      	uxtb	r3, r3
 801c458:	2b00      	cmp	r3, #0
 801c45a:	d031      	beq.n	801c4c0 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801c45c:	f107 031c 	add.w	r3, r7, #28
 801c460:	4928      	ldr	r1, [pc, #160]	; (801c504 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c462:	4618      	mov	r0, r3
 801c464:	f7f0 f9f5 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801c468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c46a:	6819      	ldr	r1, [r3, #0]
 801c46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c46e:	681b      	ldr	r3, [r3, #0]
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	33f4      	adds	r3, #244	; 0xf4
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c47a:	4610      	mov	r0, r2
 801c47c:	4798      	blx	r3
 801c47e:	f107 0014 	add.w	r0, r7, #20
 801c482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c486:	f107 021c 	add.w	r2, r7, #28
 801c48a:	f107 010c 	add.w	r1, r7, #12
 801c48e:	f7ff fed5 	bl	801c23c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c492:	f107 0214 	add.w	r2, r7, #20
 801c496:	f107 030c 	add.w	r3, r7, #12
 801c49a:	4611      	mov	r1, r2
 801c49c:	4618      	mov	r0, r3
 801c49e:	f7f0 fa44 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801c4a2:	f107 0314 	add.w	r3, r7, #20
 801c4a6:	4618      	mov	r0, r3
 801c4a8:	f7f0 fd8b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801c4ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c4b0:	4618      	mov	r0, r3
 801c4b2:	f7f0 fd86 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801c4b6:	f107 031c 	add.w	r3, r7, #28
 801c4ba:	4618      	mov	r0, r3
 801c4bc:	f7f0 fd81 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c4c2:	685b      	ldr	r3, [r3, #4]
 801c4c4:	637b      	str	r3, [r7, #52]	; 0x34
 801c4c6:	e7b7      	b.n	801c438 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801c4c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c4cc:	490d      	ldr	r1, [pc, #52]	; (801c504 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c4ce:	4618      	mov	r0, r3
 801c4d0:	f7f0 f9bf 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801c4da:	f107 010c 	add.w	r1, r7, #12
 801c4de:	4618      	mov	r0, r3
 801c4e0:	f7ff fe7c 	bl	801c1dc <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801c4e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c4e8:	4618      	mov	r0, r3
 801c4ea:	f7f0 fd6a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801c4ee:	f107 030c 	add.w	r3, r7, #12
 801c4f2:	4618      	mov	r0, r3
 801c4f4:	f7f0 fd65 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801c4f8:	bf00      	nop
}
 801c4fa:	6878      	ldr	r0, [r7, #4]
 801c4fc:	3738      	adds	r7, #56	; 0x38
 801c4fe:	46bd      	mov	sp, r7
 801c500:	bd80      	pop	{r7, pc}
 801c502:	bf00      	nop
 801c504:	08025d6c 	.word	0x08025d6c

0801c508 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801c508:	b580      	push	{r7, lr}
 801c50a:	b084      	sub	sp, #16
 801c50c:	af00      	add	r7, sp, #0
 801c50e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	685b      	ldr	r3, [r3, #4]
 801c514:	60fb      	str	r3, [r7, #12]
 801c516:	68fb      	ldr	r3, [r7, #12]
 801c518:	2b00      	cmp	r3, #0
 801c51a:	d014      	beq.n	801c546 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	681a      	ldr	r2, [r3, #0]
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	681b      	ldr	r3, [r3, #0]
 801c524:	681b      	ldr	r3, [r3, #0]
 801c526:	33d0      	adds	r3, #208	; 0xd0
 801c528:	681b      	ldr	r3, [r3, #0]
 801c52a:	4610      	mov	r0, r2
 801c52c:	4798      	blx	r3
 801c52e:	4603      	mov	r3, r0
 801c530:	f083 0301 	eor.w	r3, r3, #1
 801c534:	b2db      	uxtb	r3, r3
 801c536:	2b00      	cmp	r3, #0
 801c538:	d001      	beq.n	801c53e <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801c53a:	2301      	movs	r3, #1
 801c53c:	e004      	b.n	801c548 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c53e:	68fb      	ldr	r3, [r7, #12]
 801c540:	685b      	ldr	r3, [r3, #4]
 801c542:	60fb      	str	r3, [r7, #12]
 801c544:	e7e7      	b.n	801c516 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801c546:	2300      	movs	r3, #0
}
 801c548:	4618      	mov	r0, r3
 801c54a:	3710      	adds	r7, #16
 801c54c:	46bd      	mov	sp, r7
 801c54e:	bd80      	pop	{r7, pc}

0801c550 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801c550:	b480      	push	{r7}
 801c552:	b083      	sub	sp, #12
 801c554:	af00      	add	r7, sp, #0
 801c556:	6078      	str	r0, [r7, #4]
 801c558:	460b      	mov	r3, r1
 801c55a:	70fb      	strb	r3, [r7, #3]
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	78fa      	ldrb	r2, [r7, #3]
 801c560:	711a      	strb	r2, [r3, #4]
 801c562:	bf00      	nop
 801c564:	370c      	adds	r7, #12
 801c566:	46bd      	mov	sp, r7
 801c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c56c:	4770      	bx	lr
	...

0801c570 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801c570:	b580      	push	{r7, lr}
 801c572:	b082      	sub	sp, #8
 801c574:	af00      	add	r7, sp, #0
 801c576:	6078      	str	r0, [r7, #4]
 801c578:	460b      	mov	r3, r1
 801c57a:	70fb      	strb	r3, [r7, #3]
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	4618      	mov	r0, r3
 801c580:	f7ed ff6a 	bl	800a458 <_ZN14TestTerminatorC1Ev>
 801c584:	4a05      	ldr	r2, [pc, #20]	; (801c59c <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	601a      	str	r2, [r3, #0]
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	78fa      	ldrb	r2, [r7, #3]
 801c58e:	711a      	strb	r2, [r3, #4]
    {
    }
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	4618      	mov	r0, r3
 801c594:	3708      	adds	r7, #8
 801c596:	46bd      	mov	sp, r7
 801c598:	bd80      	pop	{r7, pc}
 801c59a:	bf00      	nop
 801c59c:	08028d44 	.word	0x08028d44

0801c5a0 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801c5a0:	b580      	push	{r7, lr}
 801c5a2:	b082      	sub	sp, #8
 801c5a4:	af00      	add	r7, sp, #0
 801c5a6:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	791b      	ldrb	r3, [r3, #4]
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d001      	beq.n	801c5b4 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801c5b0:	f7f6 f9fe 	bl	80129b0 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801c5b4:	f7f7 fd40 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c5b8:	4603      	mov	r3, r0
 801c5ba:	681a      	ldr	r2, [r3, #0]
 801c5bc:	6812      	ldr	r2, [r2, #0]
 801c5be:	4618      	mov	r0, r3
 801c5c0:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801c5c2:	bf00      	nop
 801c5c4:	3708      	adds	r7, #8
 801c5c6:	46bd      	mov	sp, r7
 801c5c8:	bd80      	pop	{r7, pc}
	...

0801c5cc <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801c5cc:	b580      	push	{r7, lr}
 801c5ce:	b082      	sub	sp, #8
 801c5d0:	af00      	add	r7, sp, #0
 801c5d2:	6078      	str	r0, [r7, #4]
    {
 801c5d4:	4a05      	ldr	r2, [pc, #20]	; (801c5ec <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	601a      	str	r2, [r3, #0]
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	4618      	mov	r0, r3
 801c5de:	f7f7 fdbb 	bl	8014158 <_ZN14TestTerminatorD1Ev>
    }
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	4618      	mov	r0, r3
 801c5e6:	3708      	adds	r7, #8
 801c5e8:	46bd      	mov	sp, r7
 801c5ea:	bd80      	pop	{r7, pc}
 801c5ec:	08028d44 	.word	0x08028d44

0801c5f0 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801c5f0:	b580      	push	{r7, lr}
 801c5f2:	b082      	sub	sp, #8
 801c5f4:	af00      	add	r7, sp, #0
 801c5f6:	6078      	str	r0, [r7, #4]
    }
 801c5f8:	6878      	ldr	r0, [r7, #4]
 801c5fa:	f7ff ffe7 	bl	801c5cc <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801c5fe:	2108      	movs	r1, #8
 801c600:	6878      	ldr	r0, [r7, #4]
 801c602:	f7ed fd77 	bl	800a0f4 <_ZdlPvj>
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	4618      	mov	r0, r3
 801c60a:	3708      	adds	r7, #8
 801c60c:	46bd      	mov	sp, r7
 801c60e:	bd80      	pop	{r7, pc}

0801c610 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801c610:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c612:	b085      	sub	sp, #20
 801c614:	af00      	add	r7, sp, #0
 801c616:	6078      	str	r0, [r7, #4]
 801c618:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	681b      	ldr	r3, [r3, #0]
 801c61e:	330c      	adds	r3, #12
 801c620:	681b      	ldr	r3, [r3, #0]
 801c622:	6878      	ldr	r0, [r7, #4]
 801c624:	4798      	blx	r3
 801c626:	4603      	mov	r3, r0
 801c628:	681a      	ldr	r2, [r3, #0]
 801c62a:	321c      	adds	r2, #28
 801c62c:	6812      	ldr	r2, [r2, #0]
 801c62e:	4618      	mov	r0, r3
 801c630:	4790      	blx	r2
 801c632:	4603      	mov	r3, r0
 801c634:	f083 0301 	eor.w	r3, r3, #1
 801c638:	b2db      	uxtb	r3, r3
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d01d      	beq.n	801c67a <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	330c      	adds	r3, #12
 801c644:	681b      	ldr	r3, [r3, #0]
 801c646:	6878      	ldr	r0, [r7, #4]
 801c648:	4798      	blx	r3
 801c64a:	4604      	mov	r4, r0
 801c64c:	6823      	ldr	r3, [r4, #0]
 801c64e:	339c      	adds	r3, #156	; 0x9c
 801c650:	681d      	ldr	r5, [r3, #0]
 801c652:	683e      	ldr	r6, [r7, #0]
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	791a      	ldrb	r2, [r3, #4]
 801c658:	f107 0308 	add.w	r3, r7, #8
 801c65c:	4611      	mov	r1, r2
 801c65e:	4618      	mov	r0, r3
 801c660:	f7ff ff86 	bl	801c570 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801c664:	f107 0308 	add.w	r3, r7, #8
 801c668:	461a      	mov	r2, r3
 801c66a:	4631      	mov	r1, r6
 801c66c:	4620      	mov	r0, r4
 801c66e:	47a8      	blx	r5
 801c670:	f107 0308 	add.w	r3, r7, #8
 801c674:	4618      	mov	r0, r3
 801c676:	f7ff ffa9 	bl	801c5cc <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801c67a:	bf00      	nop
 801c67c:	3714      	adds	r7, #20
 801c67e:	46bd      	mov	sp, r7
 801c680:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c682 <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801c682:	b580      	push	{r7, lr}
 801c684:	b082      	sub	sp, #8
 801c686:	af00      	add	r7, sp, #0
 801c688:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801c68a:	f7f7 fcc5 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801c68e:	4603      	mov	r3, r0
}
 801c690:	4618      	mov	r0, r3
 801c692:	3708      	adds	r7, #8
 801c694:	46bd      	mov	sp, r7
 801c696:	bd80      	pop	{r7, pc}

0801c698 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801c698:	b590      	push	{r4, r7, lr}
 801c69a:	b085      	sub	sp, #20
 801c69c:	af00      	add	r7, sp, #0
 801c69e:	6078      	str	r0, [r7, #4]
 801c6a0:	6039      	str	r1, [r7, #0]
 801c6a2:	687c      	ldr	r4, [r7, #4]
 801c6a4:	f107 0308 	add.w	r3, r7, #8
 801c6a8:	490b      	ldr	r1, [pc, #44]	; (801c6d8 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801c6aa:	4618      	mov	r0, r3
 801c6ac:	f7f0 f8d1 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801c6b0:	f107 0308 	add.w	r3, r7, #8
 801c6b4:	461a      	mov	r2, r3
 801c6b6:	6839      	ldr	r1, [r7, #0]
 801c6b8:	4620      	mov	r0, r4
 801c6ba:	f7f1 ff29 	bl	800e510 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801c6be:	f107 0308 	add.w	r3, r7, #8
 801c6c2:	4618      	mov	r0, r3
 801c6c4:	f7f0 fc7d 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801c6c8:	4a04      	ldr	r2, [pc, #16]	; (801c6dc <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	601a      	str	r2, [r3, #0]
{
}
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	4618      	mov	r0, r3
 801c6d2:	3714      	adds	r7, #20
 801c6d4:	46bd      	mov	sp, r7
 801c6d6:	bd90      	pop	{r4, r7, pc}
 801c6d8:	08025d7c 	.word	0x08025d7c
 801c6dc:	08027cd0 	.word	0x08027cd0

0801c6e0 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801c6e0:	b5b0      	push	{r4, r5, r7, lr}
 801c6e2:	b08a      	sub	sp, #40	; 0x28
 801c6e4:	af00      	add	r7, sp, #0
 801c6e6:	6078      	str	r0, [r7, #4]
 801c6e8:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	332c      	adds	r3, #44	; 0x2c
 801c6ee:	492b      	ldr	r1, [pc, #172]	; (801c79c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801c6f0:	4618      	mov	r0, r3
 801c6f2:	f7f0 fcf5 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801c6fc:	683b      	ldr	r3, [r7, #0]
 801c6fe:	681b      	ldr	r3, [r3, #0]
 801c700:	337c      	adds	r3, #124	; 0x7c
 801c702:	681c      	ldr	r4, [r3, #0]
 801c704:	f107 0310 	add.w	r3, r7, #16
 801c708:	4925      	ldr	r1, [pc, #148]	; (801c7a0 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801c70a:	4618      	mov	r0, r3
 801c70c:	f7f0 f8a1 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801c710:	f107 0308 	add.w	r3, r7, #8
 801c714:	f107 0210 	add.w	r2, r7, #16
 801c718:	6839      	ldr	r1, [r7, #0]
 801c71a:	4618      	mov	r0, r3
 801c71c:	47a0      	blx	r4
 801c71e:	f107 0308 	add.w	r3, r7, #8
 801c722:	4619      	mov	r1, r3
 801c724:	4628      	mov	r0, r5
 801c726:	f7f0 fcc9 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801c72a:	f107 0308 	add.w	r3, r7, #8
 801c72e:	4618      	mov	r0, r3
 801c730:	f7f0 fc47 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801c734:	f107 0310 	add.w	r3, r7, #16
 801c738:	4618      	mov	r0, r3
 801c73a:	f7f0 fc42 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	332c      	adds	r3, #44	; 0x2c
 801c742:	4918      	ldr	r1, [pc, #96]	; (801c7a4 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801c744:	4618      	mov	r0, r3
 801c746:	f7f0 fccb 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801c750:	683b      	ldr	r3, [r7, #0]
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	3380      	adds	r3, #128	; 0x80
 801c756:	681c      	ldr	r4, [r3, #0]
 801c758:	f107 0320 	add.w	r3, r7, #32
 801c75c:	4910      	ldr	r1, [pc, #64]	; (801c7a0 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801c75e:	4618      	mov	r0, r3
 801c760:	f7f0 f877 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801c764:	f107 0318 	add.w	r3, r7, #24
 801c768:	f107 0220 	add.w	r2, r7, #32
 801c76c:	6839      	ldr	r1, [r7, #0]
 801c76e:	4618      	mov	r0, r3
 801c770:	47a0      	blx	r4
 801c772:	f107 0318 	add.w	r3, r7, #24
 801c776:	4619      	mov	r1, r3
 801c778:	4628      	mov	r0, r5
 801c77a:	f7f0 fc9f 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801c77e:	f107 0318 	add.w	r3, r7, #24
 801c782:	4618      	mov	r0, r3
 801c784:	f7f0 fc1d 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801c788:	f107 0320 	add.w	r3, r7, #32
 801c78c:	4618      	mov	r0, r3
 801c78e:	f7f0 fc18 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 801c792:	bf00      	nop
 801c794:	3728      	adds	r7, #40	; 0x28
 801c796:	46bd      	mov	sp, r7
 801c798:	bdb0      	pop	{r4, r5, r7, pc}
 801c79a:	bf00      	nop
 801c79c:	08025dcc 	.word	0x08025dcc
 801c7a0:	08025df8 	.word	0x08025df8
 801c7a4:	08025dfc 	.word	0x08025dfc

0801c7a8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801c7a8:	b590      	push	{r4, r7, lr}
 801c7aa:	b08f      	sub	sp, #60	; 0x3c
 801c7ac:	af00      	add	r7, sp, #0
 801c7ae:	60f8      	str	r0, [r7, #12]
 801c7b0:	60b9      	str	r1, [r7, #8]
 801c7b2:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801c7b4:	f107 0310 	add.w	r3, r7, #16
 801c7b8:	4618      	mov	r0, r3
 801c7ba:	f7ff f877 	bl	801b8ac <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801c7be:	f107 0310 	add.w	r3, r7, #16
 801c7c2:	687a      	ldr	r2, [r7, #4]
 801c7c4:	68b9      	ldr	r1, [r7, #8]
 801c7c6:	4618      	mov	r0, r3
 801c7c8:	f7ff fa16 	bl	801bbf8 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801c7cc:	68fb      	ldr	r3, [r7, #12]
 801c7ce:	332c      	adds	r3, #44	; 0x2c
 801c7d0:	4937      	ldr	r1, [pc, #220]	; (801c8b0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801c7d2:	4618      	mov	r0, r3
 801c7d4:	f7f0 fc84 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	332c      	adds	r3, #44	; 0x2c
 801c7dc:	68b9      	ldr	r1, [r7, #8]
 801c7de:	4618      	mov	r0, r3
 801c7e0:	f7f0 fc6c 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	332c      	adds	r3, #44	; 0x2c
 801c7e8:	4932      	ldr	r1, [pc, #200]	; (801c8b4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801c7ea:	4618      	mov	r0, r3
 801c7ec:	f7f0 fc78 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c7f6:	f107 0320 	add.w	r3, r7, #32
 801c7fa:	492f      	ldr	r1, [pc, #188]	; (801c8b8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801c7fc:	4618      	mov	r0, r3
 801c7fe:	f7f0 f828 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801c802:	f107 0318 	add.w	r3, r7, #24
 801c806:	f107 0220 	add.w	r2, r7, #32
 801c80a:	f107 0110 	add.w	r1, r7, #16
 801c80e:	4618      	mov	r0, r3
 801c810:	f7ff fd4a 	bl	801c2a8 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801c814:	f107 0318 	add.w	r3, r7, #24
 801c818:	4619      	mov	r1, r3
 801c81a:	4620      	mov	r0, r4
 801c81c:	f7f0 fc4e 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801c820:	f107 0318 	add.w	r3, r7, #24
 801c824:	4618      	mov	r0, r3
 801c826:	f7f0 fbcc 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801c82a:	f107 0320 	add.w	r3, r7, #32
 801c82e:	4618      	mov	r0, r3
 801c830:	f7f0 fbc7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801c834:	68fb      	ldr	r3, [r7, #12]
 801c836:	332c      	adds	r3, #44	; 0x2c
 801c838:	4920      	ldr	r1, [pc, #128]	; (801c8bc <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801c83a:	4618      	mov	r0, r3
 801c83c:	f7f0 fc50 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	332c      	adds	r3, #44	; 0x2c
 801c844:	68b9      	ldr	r1, [r7, #8]
 801c846:	4618      	mov	r0, r3
 801c848:	f7f0 fc38 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801c84c:	68fb      	ldr	r3, [r7, #12]
 801c84e:	332c      	adds	r3, #44	; 0x2c
 801c850:	4918      	ldr	r1, [pc, #96]	; (801c8b4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801c852:	4618      	mov	r0, r3
 801c854:	f7f0 fc44 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801c858:	68fb      	ldr	r3, [r7, #12]
 801c85a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c85e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c862:	4915      	ldr	r1, [pc, #84]	; (801c8b8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801c864:	4618      	mov	r0, r3
 801c866:	f7ef fff4 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801c86a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c86e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801c872:	f107 0110 	add.w	r1, r7, #16
 801c876:	4618      	mov	r0, r3
 801c878:	f7ff fd74 	bl	801c364 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801c87c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c880:	4619      	mov	r1, r3
 801c882:	4620      	mov	r0, r4
 801c884:	f7f0 fc1a 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801c888:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c88c:	4618      	mov	r0, r3
 801c88e:	f7f0 fb98 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801c892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c896:	4618      	mov	r0, r3
 801c898:	f7f0 fb93 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801c89c:	f107 0310 	add.w	r3, r7, #16
 801c8a0:	4618      	mov	r0, r3
 801c8a2:	f7ff f817 	bl	801b8d4 <_ZN21MockExpectedCallsListD1Ev>
}
 801c8a6:	bf00      	nop
 801c8a8:	373c      	adds	r7, #60	; 0x3c
 801c8aa:	46bd      	mov	sp, r7
 801c8ac:	bd90      	pop	{r4, r7, pc}
 801c8ae:	bf00      	nop
 801c8b0:	08025e24 	.word	0x08025e24
 801c8b4:	08025e64 	.word	0x08025e64
 801c8b8:	08025df8 	.word	0x08025df8
 801c8bc:	08025e68 	.word	0x08025e68

0801c8c0 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801c8c0:	b590      	push	{r4, r7, lr}
 801c8c2:	b087      	sub	sp, #28
 801c8c4:	af00      	add	r7, sp, #0
 801c8c6:	60f8      	str	r0, [r7, #12]
 801c8c8:	60b9      	str	r1, [r7, #8]
 801c8ca:	607a      	str	r2, [r7, #4]
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	68b9      	ldr	r1, [r7, #8]
 801c8d0:	4618      	mov	r0, r3
 801c8d2:	f7ff fee1 	bl	801c698 <_ZN11MockFailureC1EP10UtestShell>
 801c8d6:	4a10      	ldr	r2, [pc, #64]	; (801c918 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801c8d8:	68fb      	ldr	r3, [r7, #12]
 801c8da:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c8e2:	f107 0310 	add.w	r3, r7, #16
 801c8e6:	490d      	ldr	r1, [pc, #52]	; (801c91c <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801c8e8:	4618      	mov	r0, r3
 801c8ea:	f7ef ffb2 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801c8ee:	f107 0310 	add.w	r3, r7, #16
 801c8f2:	4619      	mov	r1, r3
 801c8f4:	4620      	mov	r0, r4
 801c8f6:	f7f0 f818 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801c8fa:	f107 0310 	add.w	r3, r7, #16
 801c8fe:	4618      	mov	r0, r3
 801c900:	f7f0 fb5f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	6879      	ldr	r1, [r7, #4]
 801c908:	4618      	mov	r0, r3
 801c90a:	f7ff fee9 	bl	801c6e0 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801c90e:	68fb      	ldr	r3, [r7, #12]
 801c910:	4618      	mov	r0, r3
 801c912:	371c      	adds	r7, #28
 801c914:	46bd      	mov	sp, r7
 801c916:	bd90      	pop	{r4, r7, pc}
 801c918:	08027ca4 	.word	0x08027ca4
 801c91c:	08025ea4 	.word	0x08025ea4

0801c920 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801c920:	b590      	push	{r4, r7, lr}
 801c922:	b08d      	sub	sp, #52	; 0x34
 801c924:	af00      	add	r7, sp, #0
 801c926:	60f8      	str	r0, [r7, #12]
 801c928:	60b9      	str	r1, [r7, #8]
 801c92a:	607a      	str	r2, [r7, #4]
 801c92c:	603b      	str	r3, [r7, #0]
 801c92e:	68fb      	ldr	r3, [r7, #12]
 801c930:	68b9      	ldr	r1, [r7, #8]
 801c932:	4618      	mov	r0, r3
 801c934:	f7ff feb0 	bl	801c698 <_ZN11MockFailureC1EP10UtestShell>
 801c938:	4a2f      	ldr	r2, [pc, #188]	; (801c9f8 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801c93e:	683b      	ldr	r3, [r7, #0]
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	3310      	adds	r3, #16
 801c944:	681b      	ldr	r3, [r3, #0]
 801c946:	6879      	ldr	r1, [r7, #4]
 801c948:	6838      	ldr	r0, [r7, #0]
 801c94a:	4798      	blx	r3
 801c94c:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801c94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c950:	2b00      	cmp	r3, #0
 801c952:	d027      	beq.n	801c9a4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801c954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c956:	1c5a      	adds	r2, r3, #1
 801c958:	f107 0314 	add.w	r3, r7, #20
 801c95c:	4611      	mov	r1, r2
 801c95e:	4618      	mov	r0, r3
 801c960:	f7f1 fa00 	bl	800dd64 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801c964:	68fb      	ldr	r3, [r7, #12]
 801c966:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c96a:	f107 0314 	add.w	r3, r7, #20
 801c96e:	4618      	mov	r0, r3
 801c970:	f7f0 fafa 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801c974:	4602      	mov	r2, r0
 801c976:	f107 031c 	add.w	r3, r7, #28
 801c97a:	4920      	ldr	r1, [pc, #128]	; (801c9fc <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801c97c:	4618      	mov	r0, r3
 801c97e:	f7f1 f827 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 801c982:	f107 031c 	add.w	r3, r7, #28
 801c986:	4619      	mov	r1, r3
 801c988:	4620      	mov	r0, r4
 801c98a:	f7ef ffce 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801c98e:	f107 031c 	add.w	r3, r7, #28
 801c992:	4618      	mov	r0, r3
 801c994:	f7f0 fb15 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801c998:	f107 0314 	add.w	r3, r7, #20
 801c99c:	4618      	mov	r0, r3
 801c99e:	f7f0 fb10 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801c9a2:	e013      	b.n	801c9cc <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801c9a4:	68fb      	ldr	r3, [r7, #12]
 801c9a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c9aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c9ae:	4914      	ldr	r1, [pc, #80]	; (801ca00 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	f7ef ff4e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801c9b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c9ba:	4619      	mov	r1, r3
 801c9bc:	4620      	mov	r0, r4
 801c9be:	f7ef ffb4 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801c9c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c9c6:	4618      	mov	r0, r3
 801c9c8:	f7f0 fafb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	332c      	adds	r3, #44	; 0x2c
 801c9d0:	6879      	ldr	r1, [r7, #4]
 801c9d2:	4618      	mov	r0, r3
 801c9d4:	f7f0 fb72 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	332c      	adds	r3, #44	; 0x2c
 801c9dc:	4909      	ldr	r1, [pc, #36]	; (801ca04 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801c9de:	4618      	mov	r0, r3
 801c9e0:	f7f0 fb7e 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801c9e4:	68fb      	ldr	r3, [r7, #12]
 801c9e6:	6839      	ldr	r1, [r7, #0]
 801c9e8:	4618      	mov	r0, r3
 801c9ea:	f7ff fe79 	bl	801c6e0 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801c9ee:	68fb      	ldr	r3, [r7, #12]
 801c9f0:	4618      	mov	r0, r3
 801c9f2:	3734      	adds	r7, #52	; 0x34
 801c9f4:	46bd      	mov	sp, r7
 801c9f6:	bd90      	pop	{r4, r7, pc}
 801c9f8:	08028644 	.word	0x08028644
 801c9fc:	08025ed4 	.word	0x08025ed4
 801ca00:	08025f10 	.word	0x08025f10
 801ca04:	08025e64 	.word	0x08025e64

0801ca08 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ca08:	b590      	push	{r4, r7, lr}
 801ca0a:	b089      	sub	sp, #36	; 0x24
 801ca0c:	af00      	add	r7, sp, #0
 801ca0e:	60f8      	str	r0, [r7, #12]
 801ca10:	60b9      	str	r1, [r7, #8]
 801ca12:	607a      	str	r2, [r7, #4]
 801ca14:	68fb      	ldr	r3, [r7, #12]
 801ca16:	68b9      	ldr	r1, [r7, #8]
 801ca18:	4618      	mov	r0, r3
 801ca1a:	f7ff fe3d 	bl	801c698 <_ZN11MockFailureC1EP10UtestShell>
 801ca1e:	4a1f      	ldr	r2, [pc, #124]	; (801ca9c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801ca24:	f107 0310 	add.w	r3, r7, #16
 801ca28:	4618      	mov	r0, r3
 801ca2a:	f7fe ff3f 	bl	801b8ac <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801ca2e:	f107 0310 	add.w	r3, r7, #16
 801ca32:	6879      	ldr	r1, [r7, #4]
 801ca34:	4618      	mov	r0, r3
 801ca36:	f7ff f909 	bl	801bc4c <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801ca3a:	f107 0310 	add.w	r3, r7, #16
 801ca3e:	4618      	mov	r0, r3
 801ca40:	f7ff f94c 	bl	801bcdc <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801ca44:	68fb      	ldr	r3, [r7, #12]
 801ca46:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ca4a:	f107 0318 	add.w	r3, r7, #24
 801ca4e:	4914      	ldr	r1, [pc, #80]	; (801caa0 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801ca50:	4618      	mov	r0, r3
 801ca52:	f7ef fefe 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801ca56:	f107 0318 	add.w	r3, r7, #24
 801ca5a:	4619      	mov	r1, r3
 801ca5c:	4620      	mov	r0, r4
 801ca5e:	f7ef ff64 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801ca62:	f107 0318 	add.w	r3, r7, #24
 801ca66:	4618      	mov	r0, r3
 801ca68:	f7f0 faab 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801ca6c:	68fb      	ldr	r3, [r7, #12]
 801ca6e:	332c      	adds	r3, #44	; 0x2c
 801ca70:	490c      	ldr	r1, [pc, #48]	; (801caa4 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801ca72:	4618      	mov	r0, r3
 801ca74:	f7f0 fb34 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801ca78:	68fb      	ldr	r3, [r7, #12]
 801ca7a:	f107 0210 	add.w	r2, r7, #16
 801ca7e:	4611      	mov	r1, r2
 801ca80:	4618      	mov	r0, r3
 801ca82:	f7ff fe2d 	bl	801c6e0 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801ca86:	f107 0310 	add.w	r3, r7, #16
 801ca8a:	4618      	mov	r0, r3
 801ca8c:	f7fe ff22 	bl	801b8d4 <_ZN21MockExpectedCallsListD1Ev>
}
 801ca90:	68fb      	ldr	r3, [r7, #12]
 801ca92:	4618      	mov	r0, r3
 801ca94:	3724      	adds	r7, #36	; 0x24
 801ca96:	46bd      	mov	sp, r7
 801ca98:	bd90      	pop	{r4, r7, pc}
 801ca9a:	bf00      	nop
 801ca9c:	08027c78 	.word	0x08027c78
 801caa0:	08025f3c 	.word	0x08025f3c
 801caa4:	08025e64 	.word	0x08025e64

0801caa8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801caa8:	b590      	push	{r4, r7, lr}
 801caaa:	b099      	sub	sp, #100	; 0x64
 801caac:	af00      	add	r7, sp, #0
 801caae:	60f8      	str	r0, [r7, #12]
 801cab0:	60b9      	str	r1, [r7, #8]
 801cab2:	607a      	str	r2, [r7, #4]
 801cab4:	603b      	str	r3, [r7, #0]
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	68b9      	ldr	r1, [r7, #8]
 801caba:	4618      	mov	r0, r3
 801cabc:	f7ff fdec 	bl	801c698 <_ZN11MockFailureC1EP10UtestShell>
 801cac0:	4a9e      	ldr	r2, [pc, #632]	; (801cd3c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801cac2:	68fb      	ldr	r3, [r7, #12]
 801cac4:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801cac6:	f107 0310 	add.w	r3, r7, #16
 801caca:	4618      	mov	r0, r3
 801cacc:	f7fe feee 	bl	801b8ac <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801cad0:	f107 0310 	add.w	r3, r7, #16
 801cad4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801cad6:	6879      	ldr	r1, [r7, #4]
 801cad8:	4618      	mov	r0, r3
 801cada:	f7ff f88d 	bl	801bbf8 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801cade:	683b      	ldr	r3, [r7, #0]
 801cae0:	681b      	ldr	r3, [r3, #0]
 801cae2:	335c      	adds	r3, #92	; 0x5c
 801cae4:	681b      	ldr	r3, [r3, #0]
 801cae6:	f107 0218 	add.w	r2, r7, #24
 801caea:	6839      	ldr	r1, [r7, #0]
 801caec:	4610      	mov	r0, r2
 801caee:	4798      	blx	r3
 801caf0:	f107 0218 	add.w	r2, r7, #24
 801caf4:	f107 0310 	add.w	r3, r7, #16
 801caf8:	4611      	mov	r1, r2
 801cafa:	4618      	mov	r0, r3
 801cafc:	f7ff f948 	bl	801bd90 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801cb00:	f107 0318 	add.w	r3, r7, #24
 801cb04:	4618      	mov	r0, r3
 801cb06:	f7f0 fa5c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801cb0a:	f107 0310 	add.w	r3, r7, #16
 801cb0e:	4618      	mov	r0, r3
 801cb10:	f7fe ff4d 	bl	801b9ae <_ZNK21MockExpectedCallsList7isEmptyEv>
 801cb14:	4603      	mov	r3, r0
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	d037      	beq.n	801cb8a <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801cb1a:	68fb      	ldr	r3, [r7, #12]
 801cb1c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cb20:	f107 0320 	add.w	r3, r7, #32
 801cb24:	4986      	ldr	r1, [pc, #536]	; (801cd40 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801cb26:	4618      	mov	r0, r3
 801cb28:	f7ef fe93 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801cb2c:	f107 0320 	add.w	r3, r7, #32
 801cb30:	4619      	mov	r1, r3
 801cb32:	4620      	mov	r0, r4
 801cb34:	f7ef fef9 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801cb38:	f107 0320 	add.w	r3, r7, #32
 801cb3c:	4618      	mov	r0, r3
 801cb3e:	f7f0 fa40 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801cb42:	68fb      	ldr	r3, [r7, #12]
 801cb44:	332c      	adds	r3, #44	; 0x2c
 801cb46:	6879      	ldr	r1, [r7, #4]
 801cb48:	4618      	mov	r0, r3
 801cb4a:	f7f0 fab7 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801cb4e:	68fb      	ldr	r3, [r7, #12]
 801cb50:	332c      	adds	r3, #44	; 0x2c
 801cb52:	497c      	ldr	r1, [pc, #496]	; (801cd44 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801cb54:	4618      	mov	r0, r3
 801cb56:	f7f0 fac3 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801cb5a:	68fb      	ldr	r3, [r7, #12]
 801cb5c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cb60:	683b      	ldr	r3, [r7, #0]
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	335c      	adds	r3, #92	; 0x5c
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801cb6c:	6839      	ldr	r1, [r7, #0]
 801cb6e:	4610      	mov	r0, r2
 801cb70:	4798      	blx	r3
 801cb72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cb76:	4619      	mov	r1, r3
 801cb78:	4620      	mov	r0, r4
 801cb7a:	f7f0 fa9f 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801cb7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cb82:	4618      	mov	r0, r3
 801cb84:	f7f0 fa1d 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801cb88:	e056      	b.n	801cc38 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801cb8a:	68fb      	ldr	r3, [r7, #12]
 801cb8c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cb90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cb94:	496c      	ldr	r1, [pc, #432]	; (801cd48 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801cb96:	4618      	mov	r0, r3
 801cb98:	f7ef fe5b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801cb9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cba0:	4619      	mov	r1, r3
 801cba2:	4620      	mov	r0, r4
 801cba4:	f7ef fec1 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801cba8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cbac:	4618      	mov	r0, r3
 801cbae:	f7f0 fa08 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801cbb2:	68fb      	ldr	r3, [r7, #12]
 801cbb4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cbb8:	683b      	ldr	r3, [r7, #0]
 801cbba:	681b      	ldr	r3, [r3, #0]
 801cbbc:	335c      	adds	r3, #92	; 0x5c
 801cbbe:	681b      	ldr	r3, [r3, #0]
 801cbc0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801cbc4:	6839      	ldr	r1, [r7, #0]
 801cbc6:	4610      	mov	r0, r2
 801cbc8:	4798      	blx	r3
 801cbca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cbce:	4619      	mov	r1, r3
 801cbd0:	4620      	mov	r0, r4
 801cbd2:	f7f0 fa73 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801cbd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cbda:	4618      	mov	r0, r3
 801cbdc:	f7f0 f9f1 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801cbe0:	68fb      	ldr	r3, [r7, #12]
 801cbe2:	332c      	adds	r3, #44	; 0x2c
 801cbe4:	4959      	ldr	r1, [pc, #356]	; (801cd4c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	f7f0 fa7a 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801cbec:	68fb      	ldr	r3, [r7, #12]
 801cbee:	332c      	adds	r3, #44	; 0x2c
 801cbf0:	6879      	ldr	r1, [r7, #4]
 801cbf2:	4618      	mov	r0, r3
 801cbf4:	f7f0 fa62 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801cbf8:	68fb      	ldr	r3, [r7, #12]
 801cbfa:	332c      	adds	r3, #44	; 0x2c
 801cbfc:	4954      	ldr	r1, [pc, #336]	; (801cd50 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801cbfe:	4618      	mov	r0, r3
 801cc00:	f7f0 fa6e 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801cc04:	68fb      	ldr	r3, [r7, #12]
 801cc06:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cc0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cc0e:	6839      	ldr	r1, [r7, #0]
 801cc10:	4618      	mov	r0, r3
 801cc12:	f7fd faa3 	bl	801a15c <_Z10StringFromRK14MockNamedValue>
 801cc16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cc1a:	4619      	mov	r1, r3
 801cc1c:	4620      	mov	r0, r4
 801cc1e:	f7f0 fa4d 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801cc22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cc26:	4618      	mov	r0, r3
 801cc28:	f7f0 f9cb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801cc2c:	68fb      	ldr	r3, [r7, #12]
 801cc2e:	332c      	adds	r3, #44	; 0x2c
 801cc30:	4948      	ldr	r1, [pc, #288]	; (801cd54 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801cc32:	4618      	mov	r0, r3
 801cc34:	f7f0 fa54 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801cc38:	68fb      	ldr	r3, [r7, #12]
 801cc3a:	332c      	adds	r3, #44	; 0x2c
 801cc3c:	4946      	ldr	r1, [pc, #280]	; (801cd58 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801cc3e:	4618      	mov	r0, r3
 801cc40:	f7f0 fa4e 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801cc44:	68fb      	ldr	r3, [r7, #12]
 801cc46:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801cc48:	6879      	ldr	r1, [r7, #4]
 801cc4a:	4618      	mov	r0, r3
 801cc4c:	f7ff fdac 	bl	801c7a8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801cc50:	68fb      	ldr	r3, [r7, #12]
 801cc52:	332c      	adds	r3, #44	; 0x2c
 801cc54:	4941      	ldr	r1, [pc, #260]	; (801cd5c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801cc56:	4618      	mov	r0, r3
 801cc58:	f7f0 fa42 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801cc5c:	68fb      	ldr	r3, [r7, #12]
 801cc5e:	332c      	adds	r3, #44	; 0x2c
 801cc60:	6879      	ldr	r1, [r7, #4]
 801cc62:	4618      	mov	r0, r3
 801cc64:	f7f0 fa2a 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	332c      	adds	r3, #44	; 0x2c
 801cc6c:	493a      	ldr	r1, [pc, #232]	; (801cd58 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801cc6e:	4618      	mov	r0, r3
 801cc70:	f7f0 fa36 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801cc74:	68fb      	ldr	r3, [r7, #12]
 801cc76:	332c      	adds	r3, #44	; 0x2c
 801cc78:	4939      	ldr	r1, [pc, #228]	; (801cd60 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801cc7a:	4618      	mov	r0, r3
 801cc7c:	f7f0 fa30 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801cc80:	68fb      	ldr	r3, [r7, #12]
 801cc82:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cc86:	683b      	ldr	r3, [r7, #0]
 801cc88:	681b      	ldr	r3, [r3, #0]
 801cc8a:	3360      	adds	r3, #96	; 0x60
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801cc92:	6839      	ldr	r1, [r7, #0]
 801cc94:	4610      	mov	r0, r2
 801cc96:	4798      	blx	r3
 801cc98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cc9c:	4619      	mov	r1, r3
 801cc9e:	4620      	mov	r0, r4
 801cca0:	f7f0 fa0c 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801cca4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cca8:	4618      	mov	r0, r3
 801ccaa:	f7f0 f98a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801ccae:	68fb      	ldr	r3, [r7, #12]
 801ccb0:	332c      	adds	r3, #44	; 0x2c
 801ccb2:	492c      	ldr	r1, [pc, #176]	; (801cd64 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801ccb4:	4618      	mov	r0, r3
 801ccb6:	f7f0 fa13 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801ccba:	68fb      	ldr	r3, [r7, #12]
 801ccbc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ccc0:	683b      	ldr	r3, [r7, #0]
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	335c      	adds	r3, #92	; 0x5c
 801ccc6:	681b      	ldr	r3, [r3, #0]
 801ccc8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801cccc:	6839      	ldr	r1, [r7, #0]
 801ccce:	4610      	mov	r0, r2
 801ccd0:	4798      	blx	r3
 801ccd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ccd6:	4619      	mov	r1, r3
 801ccd8:	4620      	mov	r0, r4
 801ccda:	f7f0 f9ef 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801ccde:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801cce2:	4618      	mov	r0, r3
 801cce4:	f7f0 f96d 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801cce8:	68fb      	ldr	r3, [r7, #12]
 801ccea:	332c      	adds	r3, #44	; 0x2c
 801ccec:	491e      	ldr	r1, [pc, #120]	; (801cd68 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801ccee:	4618      	mov	r0, r3
 801ccf0:	f7f0 f9f6 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801ccf4:	68fb      	ldr	r3, [r7, #12]
 801ccf6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ccfa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ccfe:	6839      	ldr	r1, [r7, #0]
 801cd00:	4618      	mov	r0, r3
 801cd02:	f7fd fa2b 	bl	801a15c <_Z10StringFromRK14MockNamedValue>
 801cd06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801cd0a:	4619      	mov	r1, r3
 801cd0c:	4620      	mov	r0, r4
 801cd0e:	f7f0 f9d5 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801cd12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801cd16:	4618      	mov	r0, r3
 801cd18:	f7f0 f953 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801cd1c:	68fb      	ldr	r3, [r7, #12]
 801cd1e:	332c      	adds	r3, #44	; 0x2c
 801cd20:	490c      	ldr	r1, [pc, #48]	; (801cd54 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801cd22:	4618      	mov	r0, r3
 801cd24:	f7f0 f9dc 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801cd28:	f107 0310 	add.w	r3, r7, #16
 801cd2c:	4618      	mov	r0, r3
 801cd2e:	f7fe fdd1 	bl	801b8d4 <_ZN21MockExpectedCallsListD1Ev>
}
 801cd32:	68fb      	ldr	r3, [r7, #12]
 801cd34:	4618      	mov	r0, r3
 801cd36:	3764      	adds	r7, #100	; 0x64
 801cd38:	46bd      	mov	sp, r7
 801cd3a:	bd90      	pop	{r4, r7, pc}
 801cd3c:	08028618 	.word	0x08028618
 801cd40:	08025f60 	.word	0x08025f60
 801cd44:	08025f98 	.word	0x08025f98
 801cd48:	08025f9c 	.word	0x08025f9c
 801cd4c:	08025fd4 	.word	0x08025fd4
 801cd50:	08025fe4 	.word	0x08025fe4
 801cd54:	08025fec 	.word	0x08025fec
 801cd58:	08025e64 	.word	0x08025e64
 801cd5c:	08025ff0 	.word	0x08025ff0
 801cd60:	08025df8 	.word	0x08025df8
 801cd64:	08026024 	.word	0x08026024
 801cd68:	08026028 	.word	0x08026028

0801cd6c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801cd6c:	b590      	push	{r4, r7, lr}
 801cd6e:	b097      	sub	sp, #92	; 0x5c
 801cd70:	af00      	add	r7, sp, #0
 801cd72:	60f8      	str	r0, [r7, #12]
 801cd74:	60b9      	str	r1, [r7, #8]
 801cd76:	607a      	str	r2, [r7, #4]
 801cd78:	603b      	str	r3, [r7, #0]
 801cd7a:	68fb      	ldr	r3, [r7, #12]
 801cd7c:	68b9      	ldr	r1, [r7, #8]
 801cd7e:	4618      	mov	r0, r3
 801cd80:	f7ff fc8a 	bl	801c698 <_ZN11MockFailureC1EP10UtestShell>
 801cd84:	4a90      	ldr	r2, [pc, #576]	; (801cfc8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801cd86:	68fb      	ldr	r3, [r7, #12]
 801cd88:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801cd8a:	f107 0310 	add.w	r3, r7, #16
 801cd8e:	4618      	mov	r0, r3
 801cd90:	f7fe fd8c 	bl	801b8ac <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801cd94:	f107 0310 	add.w	r3, r7, #16
 801cd98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cd9a:	6879      	ldr	r1, [r7, #4]
 801cd9c:	4618      	mov	r0, r3
 801cd9e:	f7fe ff2b 	bl	801bbf8 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801cda2:	683b      	ldr	r3, [r7, #0]
 801cda4:	681b      	ldr	r3, [r3, #0]
 801cda6:	335c      	adds	r3, #92	; 0x5c
 801cda8:	681b      	ldr	r3, [r3, #0]
 801cdaa:	f107 0218 	add.w	r2, r7, #24
 801cdae:	6839      	ldr	r1, [r7, #0]
 801cdb0:	4610      	mov	r0, r2
 801cdb2:	4798      	blx	r3
 801cdb4:	f107 0218 	add.w	r2, r7, #24
 801cdb8:	f107 0310 	add.w	r3, r7, #16
 801cdbc:	4611      	mov	r1, r2
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	f7ff f812 	bl	801bde8 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801cdc4:	f107 0318 	add.w	r3, r7, #24
 801cdc8:	4618      	mov	r0, r3
 801cdca:	f7f0 f8fa 	bl	800cfc2 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801cdce:	f107 0310 	add.w	r3, r7, #16
 801cdd2:	4618      	mov	r0, r3
 801cdd4:	f7fe fdeb 	bl	801b9ae <_ZNK21MockExpectedCallsList7isEmptyEv>
 801cdd8:	4603      	mov	r3, r0
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d037      	beq.n	801ce4e <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801cdde:	68fb      	ldr	r3, [r7, #12]
 801cde0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cde4:	f107 0320 	add.w	r3, r7, #32
 801cde8:	4978      	ldr	r1, [pc, #480]	; (801cfcc <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801cdea:	4618      	mov	r0, r3
 801cdec:	f7ef fd31 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801cdf0:	f107 0320 	add.w	r3, r7, #32
 801cdf4:	4619      	mov	r1, r3
 801cdf6:	4620      	mov	r0, r4
 801cdf8:	f7ef fd97 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801cdfc:	f107 0320 	add.w	r3, r7, #32
 801ce00:	4618      	mov	r0, r3
 801ce02:	f7f0 f8de 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801ce06:	68fb      	ldr	r3, [r7, #12]
 801ce08:	332c      	adds	r3, #44	; 0x2c
 801ce0a:	6879      	ldr	r1, [r7, #4]
 801ce0c:	4618      	mov	r0, r3
 801ce0e:	f7f0 f955 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801ce12:	68fb      	ldr	r3, [r7, #12]
 801ce14:	332c      	adds	r3, #44	; 0x2c
 801ce16:	496e      	ldr	r1, [pc, #440]	; (801cfd0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801ce18:	4618      	mov	r0, r3
 801ce1a:	f7f0 f961 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ce24:	683b      	ldr	r3, [r7, #0]
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	335c      	adds	r3, #92	; 0x5c
 801ce2a:	681b      	ldr	r3, [r3, #0]
 801ce2c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801ce30:	6839      	ldr	r1, [r7, #0]
 801ce32:	4610      	mov	r0, r2
 801ce34:	4798      	blx	r3
 801ce36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ce3a:	4619      	mov	r1, r3
 801ce3c:	4620      	mov	r0, r4
 801ce3e:	f7f0 f93d 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801ce42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ce46:	4618      	mov	r0, r3
 801ce48:	f7f0 f8bb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ce4c:	e059      	b.n	801cf02 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801ce4e:	68fb      	ldr	r3, [r7, #12]
 801ce50:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ce54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ce58:	495e      	ldr	r1, [pc, #376]	; (801cfd4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801ce5a:	4618      	mov	r0, r3
 801ce5c:	f7ef fcf9 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801ce60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ce64:	4619      	mov	r1, r3
 801ce66:	4620      	mov	r0, r4
 801ce68:	f7ef fd5f 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801ce6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ce70:	4618      	mov	r0, r3
 801ce72:	f7f0 f8a6 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801ce76:	68fb      	ldr	r3, [r7, #12]
 801ce78:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ce7c:	683b      	ldr	r3, [r7, #0]
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	3360      	adds	r3, #96	; 0x60
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801ce88:	6839      	ldr	r1, [r7, #0]
 801ce8a:	4610      	mov	r0, r2
 801ce8c:	4798      	blx	r3
 801ce8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ce92:	4619      	mov	r1, r3
 801ce94:	4620      	mov	r0, r4
 801ce96:	f7f0 f911 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801ce9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ce9e:	4618      	mov	r0, r3
 801cea0:	f7f0 f88f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801cea4:	68fb      	ldr	r3, [r7, #12]
 801cea6:	332c      	adds	r3, #44	; 0x2c
 801cea8:	494b      	ldr	r1, [pc, #300]	; (801cfd8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801ceaa:	4618      	mov	r0, r3
 801ceac:	f7f0 f918 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801ceb0:	68fb      	ldr	r3, [r7, #12]
 801ceb2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ceb6:	683b      	ldr	r3, [r7, #0]
 801ceb8:	681b      	ldr	r3, [r3, #0]
 801ceba:	335c      	adds	r3, #92	; 0x5c
 801cebc:	681b      	ldr	r3, [r3, #0]
 801cebe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801cec2:	6839      	ldr	r1, [r7, #0]
 801cec4:	4610      	mov	r0, r2
 801cec6:	4798      	blx	r3
 801cec8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cecc:	4619      	mov	r1, r3
 801cece:	4620      	mov	r0, r4
 801ced0:	f7f0 f8f4 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801ced4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ced8:	4618      	mov	r0, r3
 801ceda:	f7f0 f872 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	332c      	adds	r3, #44	; 0x2c
 801cee2:	493e      	ldr	r1, [pc, #248]	; (801cfdc <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801cee4:	4618      	mov	r0, r3
 801cee6:	f7f0 f8fb 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801ceea:	68fb      	ldr	r3, [r7, #12]
 801ceec:	332c      	adds	r3, #44	; 0x2c
 801ceee:	6879      	ldr	r1, [r7, #4]
 801cef0:	4618      	mov	r0, r3
 801cef2:	f7f0 f8e3 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801cef6:	68fb      	ldr	r3, [r7, #12]
 801cef8:	332c      	adds	r3, #44	; 0x2c
 801cefa:	4939      	ldr	r1, [pc, #228]	; (801cfe0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801cefc:	4618      	mov	r0, r3
 801cefe:	f7f0 f8ef 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801cf02:	68fb      	ldr	r3, [r7, #12]
 801cf04:	332c      	adds	r3, #44	; 0x2c
 801cf06:	4937      	ldr	r1, [pc, #220]	; (801cfe4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801cf08:	4618      	mov	r0, r3
 801cf0a:	f7f0 f8e9 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801cf0e:	68fb      	ldr	r3, [r7, #12]
 801cf10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cf12:	6879      	ldr	r1, [r7, #4]
 801cf14:	4618      	mov	r0, r3
 801cf16:	f7ff fc47 	bl	801c7a8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801cf1a:	68fb      	ldr	r3, [r7, #12]
 801cf1c:	332c      	adds	r3, #44	; 0x2c
 801cf1e:	4932      	ldr	r1, [pc, #200]	; (801cfe8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801cf20:	4618      	mov	r0, r3
 801cf22:	f7f0 f8dd 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801cf26:	68fb      	ldr	r3, [r7, #12]
 801cf28:	332c      	adds	r3, #44	; 0x2c
 801cf2a:	6879      	ldr	r1, [r7, #4]
 801cf2c:	4618      	mov	r0, r3
 801cf2e:	f7f0 f8c5 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801cf32:	68fb      	ldr	r3, [r7, #12]
 801cf34:	332c      	adds	r3, #44	; 0x2c
 801cf36:	492b      	ldr	r1, [pc, #172]	; (801cfe4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801cf38:	4618      	mov	r0, r3
 801cf3a:	f7f0 f8d1 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801cf3e:	68fb      	ldr	r3, [r7, #12]
 801cf40:	332c      	adds	r3, #44	; 0x2c
 801cf42:	492a      	ldr	r1, [pc, #168]	; (801cfec <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801cf44:	4618      	mov	r0, r3
 801cf46:	f7f0 f8cb 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801cf4a:	68fb      	ldr	r3, [r7, #12]
 801cf4c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cf50:	683b      	ldr	r3, [r7, #0]
 801cf52:	681b      	ldr	r3, [r3, #0]
 801cf54:	3360      	adds	r3, #96	; 0x60
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801cf5c:	6839      	ldr	r1, [r7, #0]
 801cf5e:	4610      	mov	r0, r2
 801cf60:	4798      	blx	r3
 801cf62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cf66:	4619      	mov	r1, r3
 801cf68:	4620      	mov	r0, r4
 801cf6a:	f7f0 f8a7 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801cf6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cf72:	4618      	mov	r0, r3
 801cf74:	f7f0 f825 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801cf78:	68fb      	ldr	r3, [r7, #12]
 801cf7a:	332c      	adds	r3, #44	; 0x2c
 801cf7c:	491c      	ldr	r1, [pc, #112]	; (801cff0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801cf7e:	4618      	mov	r0, r3
 801cf80:	f7f0 f8ae 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801cf84:	68fb      	ldr	r3, [r7, #12]
 801cf86:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cf8a:	683b      	ldr	r3, [r7, #0]
 801cf8c:	681b      	ldr	r3, [r3, #0]
 801cf8e:	335c      	adds	r3, #92	; 0x5c
 801cf90:	681b      	ldr	r3, [r3, #0]
 801cf92:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801cf96:	6839      	ldr	r1, [r7, #0]
 801cf98:	4610      	mov	r0, r2
 801cf9a:	4798      	blx	r3
 801cf9c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801cfa0:	4619      	mov	r1, r3
 801cfa2:	4620      	mov	r0, r4
 801cfa4:	f7f0 f88a 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801cfa8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801cfac:	4618      	mov	r0, r3
 801cfae:	f7f0 f808 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801cfb2:	f107 0310 	add.w	r3, r7, #16
 801cfb6:	4618      	mov	r0, r3
 801cfb8:	f7fe fc8c 	bl	801b8d4 <_ZN21MockExpectedCallsListD1Ev>
}
 801cfbc:	68fb      	ldr	r3, [r7, #12]
 801cfbe:	4618      	mov	r0, r3
 801cfc0:	375c      	adds	r7, #92	; 0x5c
 801cfc2:	46bd      	mov	sp, r7
 801cfc4:	bd90      	pop	{r4, r7, pc}
 801cfc6:	bf00      	nop
 801cfc8:	080285ec 	.word	0x080285ec
 801cfcc:	0802602c 	.word	0x0802602c
 801cfd0:	08025f98 	.word	0x08025f98
 801cfd4:	0802606c 	.word	0x0802606c
 801cfd8:	08026098 	.word	0x08026098
 801cfdc:	08025fd4 	.word	0x08025fd4
 801cfe0:	080260b0 	.word	0x080260b0
 801cfe4:	08025e64 	.word	0x08025e64
 801cfe8:	080260b4 	.word	0x080260b4
 801cfec:	08025df8 	.word	0x08025df8
 801cff0:	08026024 	.word	0x08026024

0801cff4 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801cff4:	b590      	push	{r4, r7, lr}
 801cff6:	b08b      	sub	sp, #44	; 0x2c
 801cff8:	af00      	add	r7, sp, #0
 801cffa:	60f8      	str	r0, [r7, #12]
 801cffc:	60b9      	str	r1, [r7, #8]
 801cffe:	607a      	str	r2, [r7, #4]
 801d000:	603b      	str	r3, [r7, #0]
 801d002:	68fb      	ldr	r3, [r7, #12]
 801d004:	68b9      	ldr	r1, [r7, #8]
 801d006:	4618      	mov	r0, r3
 801d008:	f7ff fb46 	bl	801c698 <_ZN11MockFailureC1EP10UtestShell>
 801d00c:	4a30      	ldr	r2, [pc, #192]	; (801d0d0 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801d00e:	68fb      	ldr	r3, [r7, #12]
 801d010:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801d012:	f107 0310 	add.w	r3, r7, #16
 801d016:	4618      	mov	r0, r3
 801d018:	f7fe fc48 	bl	801b8ac <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801d01c:	f107 0310 	add.w	r3, r7, #16
 801d020:	683a      	ldr	r2, [r7, #0]
 801d022:	6879      	ldr	r1, [r7, #4]
 801d024:	4618      	mov	r0, r3
 801d026:	f7fe fde7 	bl	801bbf8 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801d02a:	68fb      	ldr	r3, [r7, #12]
 801d02c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d030:	f107 0318 	add.w	r3, r7, #24
 801d034:	4927      	ldr	r1, [pc, #156]	; (801d0d4 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801d036:	4618      	mov	r0, r3
 801d038:	f7ef fc0b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d03c:	f107 0318 	add.w	r3, r7, #24
 801d040:	4619      	mov	r1, r3
 801d042:	4620      	mov	r0, r4
 801d044:	f7ef fc71 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d048:	f107 0318 	add.w	r3, r7, #24
 801d04c:	4618      	mov	r0, r3
 801d04e:	f7ef ffb8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801d052:	68fb      	ldr	r3, [r7, #12]
 801d054:	332c      	adds	r3, #44	; 0x2c
 801d056:	6879      	ldr	r1, [r7, #4]
 801d058:	4618      	mov	r0, r3
 801d05a:	f7f0 f82f 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801d05e:	68fb      	ldr	r3, [r7, #12]
 801d060:	332c      	adds	r3, #44	; 0x2c
 801d062:	491d      	ldr	r1, [pc, #116]	; (801d0d8 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801d064:	4618      	mov	r0, r3
 801d066:	f7f0 f83b 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d06a:	68fb      	ldr	r3, [r7, #12]
 801d06c:	683a      	ldr	r2, [r7, #0]
 801d06e:	6879      	ldr	r1, [r7, #4]
 801d070:	4618      	mov	r0, r3
 801d072:	f7ff fb99 	bl	801c7a8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801d076:	68fb      	ldr	r3, [r7, #12]
 801d078:	332c      	adds	r3, #44	; 0x2c
 801d07a:	4918      	ldr	r1, [pc, #96]	; (801d0dc <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801d07c:	4618      	mov	r0, r3
 801d07e:	f7f0 f82f 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801d082:	68fb      	ldr	r3, [r7, #12]
 801d084:	332c      	adds	r3, #44	; 0x2c
 801d086:	4916      	ldr	r1, [pc, #88]	; (801d0e0 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801d088:	4618      	mov	r0, r3
 801d08a:	f7f0 f829 	bl	800d0e0 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801d08e:	68fb      	ldr	r3, [r7, #12]
 801d090:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d094:	f107 0320 	add.w	r3, r7, #32
 801d098:	f107 0210 	add.w	r2, r7, #16
 801d09c:	4611      	mov	r1, r2
 801d09e:	4618      	mov	r0, r3
 801d0a0:	f7ff f9bc 	bl	801c41c <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801d0a4:	f107 0320 	add.w	r3, r7, #32
 801d0a8:	4619      	mov	r1, r3
 801d0aa:	4620      	mov	r0, r4
 801d0ac:	f7f0 f806 	bl	800d0bc <_ZN12SimpleStringpLERKS_>
 801d0b0:	f107 0320 	add.w	r3, r7, #32
 801d0b4:	4618      	mov	r0, r3
 801d0b6:	f7ef ff84 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801d0ba:	f107 0310 	add.w	r3, r7, #16
 801d0be:	4618      	mov	r0, r3
 801d0c0:	f7fe fc08 	bl	801b8d4 <_ZN21MockExpectedCallsListD1Ev>
}
 801d0c4:	68fb      	ldr	r3, [r7, #12]
 801d0c6:	4618      	mov	r0, r3
 801d0c8:	372c      	adds	r7, #44	; 0x2c
 801d0ca:	46bd      	mov	sp, r7
 801d0cc:	bd90      	pop	{r4, r7, pc}
 801d0ce:	bf00      	nop
 801d0d0:	080285c0 	.word	0x080285c0
 801d0d4:	080260f0 	.word	0x080260f0
 801d0d8:	08026120 	.word	0x08026120
 801d0dc:	08026134 	.word	0x08026134
 801d0e0:	08025df8 	.word	0x08025df8

0801d0e4 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801d0e4:	b590      	push	{r4, r7, lr}
 801d0e6:	b087      	sub	sp, #28
 801d0e8:	af00      	add	r7, sp, #0
 801d0ea:	60f8      	str	r0, [r7, #12]
 801d0ec:	60b9      	str	r1, [r7, #8]
 801d0ee:	607a      	str	r2, [r7, #4]
 801d0f0:	68fb      	ldr	r3, [r7, #12]
 801d0f2:	68b9      	ldr	r1, [r7, #8]
 801d0f4:	4618      	mov	r0, r3
 801d0f6:	f7ff facf 	bl	801c698 <_ZN11MockFailureC1EP10UtestShell>
 801d0fa:	4a10      	ldr	r2, [pc, #64]	; (801d13c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801d0fc:	68fb      	ldr	r3, [r7, #12]
 801d0fe:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801d100:	68fb      	ldr	r3, [r7, #12]
 801d102:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d106:	6878      	ldr	r0, [r7, #4]
 801d108:	f7ef ff2e 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801d10c:	4602      	mov	r2, r0
 801d10e:	f107 0310 	add.w	r3, r7, #16
 801d112:	490b      	ldr	r1, [pc, #44]	; (801d140 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801d114:	4618      	mov	r0, r3
 801d116:	f7f0 fc5b 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 801d11a:	f107 0310 	add.w	r3, r7, #16
 801d11e:	4619      	mov	r1, r3
 801d120:	4620      	mov	r0, r4
 801d122:	f7ef fc02 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d126:	f107 0310 	add.w	r3, r7, #16
 801d12a:	4618      	mov	r0, r3
 801d12c:	f7ef ff49 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 801d130:	68fb      	ldr	r3, [r7, #12]
 801d132:	4618      	mov	r0, r3
 801d134:	371c      	adds	r7, #28
 801d136:	46bd      	mov	sp, r7
 801d138:	bd90      	pop	{r4, r7, pc}
 801d13a:	bf00      	nop
 801d13c:	08028594 	.word	0x08028594
 801d140:	08026160 	.word	0x08026160

0801d144 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801d144:	b590      	push	{r4, r7, lr}
 801d146:	b087      	sub	sp, #28
 801d148:	af00      	add	r7, sp, #0
 801d14a:	60f8      	str	r0, [r7, #12]
 801d14c:	60b9      	str	r1, [r7, #8]
 801d14e:	607a      	str	r2, [r7, #4]
 801d150:	68fb      	ldr	r3, [r7, #12]
 801d152:	68b9      	ldr	r1, [r7, #8]
 801d154:	4618      	mov	r0, r3
 801d156:	f7ff fa9f 	bl	801c698 <_ZN11MockFailureC1EP10UtestShell>
 801d15a:	4a10      	ldr	r2, [pc, #64]	; (801d19c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801d15c:	68fb      	ldr	r3, [r7, #12]
 801d15e:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801d160:	68fb      	ldr	r3, [r7, #12]
 801d162:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d166:	6878      	ldr	r0, [r7, #4]
 801d168:	f7ef fefe 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801d16c:	4602      	mov	r2, r0
 801d16e:	f107 0310 	add.w	r3, r7, #16
 801d172:	490b      	ldr	r1, [pc, #44]	; (801d1a0 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801d174:	4618      	mov	r0, r3
 801d176:	f7f0 fc2b 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 801d17a:	f107 0310 	add.w	r3, r7, #16
 801d17e:	4619      	mov	r1, r3
 801d180:	4620      	mov	r0, r4
 801d182:	f7ef fbd2 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d186:	f107 0310 	add.w	r3, r7, #16
 801d18a:	4618      	mov	r0, r3
 801d18c:	f7ef ff19 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 801d190:	68fb      	ldr	r3, [r7, #12]
 801d192:	4618      	mov	r0, r3
 801d194:	371c      	adds	r7, #28
 801d196:	46bd      	mov	sp, r7
 801d198:	bd90      	pop	{r4, r7, pc}
 801d19a:	bf00      	nop
 801d19c:	08028568 	.word	0x08028568
 801d1a0:	080261b8 	.word	0x080261b8

0801d1a4 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d1a4:	b590      	push	{r4, r7, lr}
 801d1a6:	b087      	sub	sp, #28
 801d1a8:	af00      	add	r7, sp, #0
 801d1aa:	60f8      	str	r0, [r7, #12]
 801d1ac:	60b9      	str	r1, [r7, #8]
 801d1ae:	607a      	str	r2, [r7, #4]
 801d1b0:	603b      	str	r3, [r7, #0]
 801d1b2:	68fb      	ldr	r3, [r7, #12]
 801d1b4:	68b9      	ldr	r1, [r7, #8]
 801d1b6:	4618      	mov	r0, r3
 801d1b8:	f7ff fa6e 	bl	801c698 <_ZN11MockFailureC1EP10UtestShell>
 801d1bc:	4a12      	ldr	r2, [pc, #72]	; (801d208 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801d1be:	68fb      	ldr	r3, [r7, #12]
 801d1c0:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801d1c2:	68fb      	ldr	r3, [r7, #12]
 801d1c4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801d1c8:	6878      	ldr	r0, [r7, #4]
 801d1ca:	f7ef fecd 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801d1ce:	4602      	mov	r2, r0
 801d1d0:	f107 0010 	add.w	r0, r7, #16
 801d1d4:	683b      	ldr	r3, [r7, #0]
 801d1d6:	490d      	ldr	r1, [pc, #52]	; (801d20c <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801d1d8:	f7f0 fbfa 	bl	800d9d0 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801d1dc:	f107 0310 	add.w	r3, r7, #16
 801d1e0:	4619      	mov	r1, r3
 801d1e2:	4620      	mov	r0, r4
 801d1e4:	f7ef fba1 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d1e8:	f107 0310 	add.w	r3, r7, #16
 801d1ec:	4618      	mov	r0, r3
 801d1ee:	f7ef fee8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d1f2:	68fb      	ldr	r3, [r7, #12]
 801d1f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d1f6:	6879      	ldr	r1, [r7, #4]
 801d1f8:	4618      	mov	r0, r3
 801d1fa:	f7ff fad5 	bl	801c7a8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801d1fe:	68fb      	ldr	r3, [r7, #12]
 801d200:	4618      	mov	r0, r3
 801d202:	371c      	adds	r7, #28
 801d204:	46bd      	mov	sp, r7
 801d206:	bd90      	pop	{r4, r7, pc}
 801d208:	0802853c 	.word	0x0802853c
 801d20c:	08026208 	.word	0x08026208

0801d210 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d210:	b590      	push	{r4, r7, lr}
 801d212:	b087      	sub	sp, #28
 801d214:	af00      	add	r7, sp, #0
 801d216:	60f8      	str	r0, [r7, #12]
 801d218:	60b9      	str	r1, [r7, #8]
 801d21a:	607a      	str	r2, [r7, #4]
 801d21c:	603b      	str	r3, [r7, #0]
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	68b9      	ldr	r1, [r7, #8]
 801d222:	4618      	mov	r0, r3
 801d224:	f7ff fa38 	bl	801c698 <_ZN11MockFailureC1EP10UtestShell>
 801d228:	4a12      	ldr	r2, [pc, #72]	; (801d274 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801d22e:	68fb      	ldr	r3, [r7, #12]
 801d230:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d234:	6878      	ldr	r0, [r7, #4]
 801d236:	f7ef fe97 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801d23a:	4602      	mov	r2, r0
 801d23c:	f107 0310 	add.w	r3, r7, #16
 801d240:	490d      	ldr	r1, [pc, #52]	; (801d278 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801d242:	4618      	mov	r0, r3
 801d244:	f7f0 fbc4 	bl	800d9d0 <_Z16StringFromFormatPKcz>
 801d248:	f107 0310 	add.w	r3, r7, #16
 801d24c:	4619      	mov	r1, r3
 801d24e:	4620      	mov	r0, r4
 801d250:	f7ef fb6b 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d254:	f107 0310 	add.w	r3, r7, #16
 801d258:	4618      	mov	r0, r3
 801d25a:	f7ef feb2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d25e:	68fb      	ldr	r3, [r7, #12]
 801d260:	683a      	ldr	r2, [r7, #0]
 801d262:	6879      	ldr	r1, [r7, #4]
 801d264:	4618      	mov	r0, r3
 801d266:	f7ff fa9f 	bl	801c7a8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801d26a:	68fb      	ldr	r3, [r7, #12]
 801d26c:	4618      	mov	r0, r3
 801d26e:	371c      	adds	r7, #28
 801d270:	46bd      	mov	sp, r7
 801d272:	bd90      	pop	{r4, r7, pc}
 801d274:	08028510 	.word	0x08028510
 801d278:	0802626c 	.word	0x0802626c

0801d27c <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801d27c:	b480      	push	{r7}
 801d27e:	b083      	sub	sp, #12
 801d280:	af00      	add	r7, sp, #0
 801d282:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801d284:	4a04      	ldr	r2, [pc, #16]	; (801d298 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	6013      	str	r3, [r2, #0]
}
 801d28a:	bf00      	nop
 801d28c:	370c      	adds	r7, #12
 801d28e:	46bd      	mov	sp, r7
 801d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d294:	4770      	bx	lr
 801d296:	bf00      	nop
 801d298:	20000e80 	.word	0x20000e80

0801d29c <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801d29c:	b580      	push	{r7, lr}
 801d29e:	b082      	sub	sp, #8
 801d2a0:	af00      	add	r7, sp, #0
 801d2a2:	6078      	str	r0, [r7, #4]
 801d2a4:	6039      	str	r1, [r7, #0]
 801d2a6:	4a10      	ldr	r2, [pc, #64]	; (801d2e8 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	601a      	str	r2, [r3, #0]
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	3304      	adds	r3, #4
 801d2b0:	6839      	ldr	r1, [r7, #0]
 801d2b2:	4618      	mov	r0, r3
 801d2b4:	f7ef fb21 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	330c      	adds	r3, #12
 801d2bc:	490b      	ldr	r1, [pc, #44]	; (801d2ec <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801d2be:	4618      	mov	r0, r3
 801d2c0:	f7ef fac7 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d2c4:	687b      	ldr	r3, [r7, #4]
 801d2c6:	2200      	movs	r2, #0
 801d2c8:	629a      	str	r2, [r3, #40]	; 0x28
 801d2ca:	687b      	ldr	r3, [r7, #4]
 801d2cc:	2200      	movs	r2, #0
 801d2ce:	62da      	str	r2, [r3, #44]	; 0x2c
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	2200      	movs	r2, #0
 801d2d4:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	2200      	movs	r2, #0
 801d2da:	619a      	str	r2, [r3, #24]
}
 801d2dc:	687b      	ldr	r3, [r7, #4]
 801d2de:	4618      	mov	r0, r3
 801d2e0:	3708      	adds	r7, #8
 801d2e2:	46bd      	mov	sp, r7
 801d2e4:	bd80      	pop	{r7, pc}
 801d2e6:	bf00      	nop
 801d2e8:	08028d98 	.word	0x08028d98
 801d2ec:	080262bc 	.word	0x080262bc

0801d2f0 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801d2f0:	b580      	push	{r7, lr}
 801d2f2:	b082      	sub	sp, #8
 801d2f4:	af00      	add	r7, sp, #0
 801d2f6:	6078      	str	r0, [r7, #4]
 801d2f8:	4a08      	ldr	r2, [pc, #32]	; (801d31c <_ZN14MockNamedValueD1Ev+0x2c>)
 801d2fa:	687b      	ldr	r3, [r7, #4]
 801d2fc:	601a      	str	r2, [r3, #0]
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	330c      	adds	r3, #12
 801d302:	4618      	mov	r0, r3
 801d304:	f7ef fe5d 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	3304      	adds	r3, #4
 801d30c:	4618      	mov	r0, r3
 801d30e:	f7ef fe58 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
{
}
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	4618      	mov	r0, r3
 801d316:	3708      	adds	r7, #8
 801d318:	46bd      	mov	sp, r7
 801d31a:	bd80      	pop	{r7, pc}
 801d31c:	08028d98 	.word	0x08028d98

0801d320 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801d320:	b580      	push	{r7, lr}
 801d322:	b082      	sub	sp, #8
 801d324:	af00      	add	r7, sp, #0
 801d326:	6078      	str	r0, [r7, #4]
}
 801d328:	6878      	ldr	r0, [r7, #4]
 801d32a:	f7ff ffe1 	bl	801d2f0 <_ZN14MockNamedValueD1Ev>
 801d32e:	2138      	movs	r1, #56	; 0x38
 801d330:	6878      	ldr	r0, [r7, #4]
 801d332:	f7ec fedf 	bl	800a0f4 <_ZdlPvj>
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	4618      	mov	r0, r3
 801d33a:	3708      	adds	r7, #8
 801d33c:	46bd      	mov	sp, r7
 801d33e:	bd80      	pop	{r7, pc}

0801d340 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801d340:	b590      	push	{r4, r7, lr}
 801d342:	b085      	sub	sp, #20
 801d344:	af00      	add	r7, sp, #0
 801d346:	6078      	str	r0, [r7, #4]
 801d348:	460b      	mov	r3, r1
 801d34a:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	f103 040c 	add.w	r4, r3, #12
 801d352:	f107 0308 	add.w	r3, r7, #8
 801d356:	490b      	ldr	r1, [pc, #44]	; (801d384 <_ZN14MockNamedValue8setValueEb+0x44>)
 801d358:	4618      	mov	r0, r3
 801d35a:	f7ef fa7a 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d35e:	f107 0308 	add.w	r3, r7, #8
 801d362:	4619      	mov	r1, r3
 801d364:	4620      	mov	r0, r4
 801d366:	f7ef fae0 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d36a:	f107 0308 	add.w	r3, r7, #8
 801d36e:	4618      	mov	r0, r3
 801d370:	f7ef fe27 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	78fa      	ldrb	r2, [r7, #3]
 801d378:	761a      	strb	r2, [r3, #24]
}
 801d37a:	bf00      	nop
 801d37c:	3714      	adds	r7, #20
 801d37e:	46bd      	mov	sp, r7
 801d380:	bd90      	pop	{r4, r7, pc}
 801d382:	bf00      	nop
 801d384:	080262c0 	.word	0x080262c0

0801d388 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801d388:	b590      	push	{r4, r7, lr}
 801d38a:	b085      	sub	sp, #20
 801d38c:	af00      	add	r7, sp, #0
 801d38e:	6078      	str	r0, [r7, #4]
 801d390:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	f103 040c 	add.w	r4, r3, #12
 801d398:	f107 0308 	add.w	r3, r7, #8
 801d39c:	490a      	ldr	r1, [pc, #40]	; (801d3c8 <_ZN14MockNamedValue8setValueEj+0x40>)
 801d39e:	4618      	mov	r0, r3
 801d3a0:	f7ef fa57 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d3a4:	f107 0308 	add.w	r3, r7, #8
 801d3a8:	4619      	mov	r1, r3
 801d3aa:	4620      	mov	r0, r4
 801d3ac:	f7ef fabd 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d3b0:	f107 0308 	add.w	r3, r7, #8
 801d3b4:	4618      	mov	r0, r3
 801d3b6:	f7ef fe04 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801d3ba:	687b      	ldr	r3, [r7, #4]
 801d3bc:	683a      	ldr	r2, [r7, #0]
 801d3be:	619a      	str	r2, [r3, #24]
}
 801d3c0:	bf00      	nop
 801d3c2:	3714      	adds	r7, #20
 801d3c4:	46bd      	mov	sp, r7
 801d3c6:	bd90      	pop	{r4, r7, pc}
 801d3c8:	080262c8 	.word	0x080262c8

0801d3cc <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801d3cc:	b590      	push	{r4, r7, lr}
 801d3ce:	b085      	sub	sp, #20
 801d3d0:	af00      	add	r7, sp, #0
 801d3d2:	6078      	str	r0, [r7, #4]
 801d3d4:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	f103 040c 	add.w	r4, r3, #12
 801d3dc:	f107 0308 	add.w	r3, r7, #8
 801d3e0:	490a      	ldr	r1, [pc, #40]	; (801d40c <_ZN14MockNamedValue8setValueEi+0x40>)
 801d3e2:	4618      	mov	r0, r3
 801d3e4:	f7ef fa35 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d3e8:	f107 0308 	add.w	r3, r7, #8
 801d3ec:	4619      	mov	r1, r3
 801d3ee:	4620      	mov	r0, r4
 801d3f0:	f7ef fa9b 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d3f4:	f107 0308 	add.w	r3, r7, #8
 801d3f8:	4618      	mov	r0, r3
 801d3fa:	f7ef fde2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	683a      	ldr	r2, [r7, #0]
 801d402:	619a      	str	r2, [r3, #24]
}
 801d404:	bf00      	nop
 801d406:	3714      	adds	r7, #20
 801d408:	46bd      	mov	sp, r7
 801d40a:	bd90      	pop	{r4, r7, pc}
 801d40c:	080262bc 	.word	0x080262bc

0801d410 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801d410:	b590      	push	{r4, r7, lr}
 801d412:	b085      	sub	sp, #20
 801d414:	af00      	add	r7, sp, #0
 801d416:	6078      	str	r0, [r7, #4]
 801d418:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	f103 040c 	add.w	r4, r3, #12
 801d420:	f107 0308 	add.w	r3, r7, #8
 801d424:	490a      	ldr	r1, [pc, #40]	; (801d450 <_ZN14MockNamedValue8setValueEl+0x40>)
 801d426:	4618      	mov	r0, r3
 801d428:	f7ef fa13 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d42c:	f107 0308 	add.w	r3, r7, #8
 801d430:	4619      	mov	r1, r3
 801d432:	4620      	mov	r0, r4
 801d434:	f7ef fa79 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d438:	f107 0308 	add.w	r3, r7, #8
 801d43c:	4618      	mov	r0, r3
 801d43e:	f7ef fdc0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	683a      	ldr	r2, [r7, #0]
 801d446:	619a      	str	r2, [r3, #24]
}
 801d448:	bf00      	nop
 801d44a:	3714      	adds	r7, #20
 801d44c:	46bd      	mov	sp, r7
 801d44e:	bd90      	pop	{r4, r7, pc}
 801d450:	080262d8 	.word	0x080262d8

0801d454 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801d454:	b590      	push	{r4, r7, lr}
 801d456:	b085      	sub	sp, #20
 801d458:	af00      	add	r7, sp, #0
 801d45a:	6078      	str	r0, [r7, #4]
 801d45c:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	f103 040c 	add.w	r4, r3, #12
 801d464:	f107 0308 	add.w	r3, r7, #8
 801d468:	490a      	ldr	r1, [pc, #40]	; (801d494 <_ZN14MockNamedValue8setValueEm+0x40>)
 801d46a:	4618      	mov	r0, r3
 801d46c:	f7ef f9f1 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d470:	f107 0308 	add.w	r3, r7, #8
 801d474:	4619      	mov	r1, r3
 801d476:	4620      	mov	r0, r4
 801d478:	f7ef fa57 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d47c:	f107 0308 	add.w	r3, r7, #8
 801d480:	4618      	mov	r0, r3
 801d482:	f7ef fd9e 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	683a      	ldr	r2, [r7, #0]
 801d48a:	619a      	str	r2, [r3, #24]
}
 801d48c:	bf00      	nop
 801d48e:	3714      	adds	r7, #20
 801d490:	46bd      	mov	sp, r7
 801d492:	bd90      	pop	{r4, r7, pc}
 801d494:	080262e4 	.word	0x080262e4

0801d498 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801d498:	b5b0      	push	{r4, r5, r7, lr}
 801d49a:	b086      	sub	sp, #24
 801d49c:	af02      	add	r7, sp, #8
 801d49e:	60f8      	str	r0, [r7, #12]
 801d4a0:	1d3b      	adds	r3, r7, #4
 801d4a2:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801d4a6:	f7f6 fdb7 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801d4aa:	4604      	mov	r4, r0
 801d4ac:	6823      	ldr	r3, [r4, #0]
 801d4ae:	3368      	adds	r3, #104	; 0x68
 801d4b0:	681d      	ldr	r5, [r3, #0]
 801d4b2:	f7f6 fdc1 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d4b6:	4603      	mov	r3, r0
 801d4b8:	9300      	str	r3, [sp, #0]
 801d4ba:	2367      	movs	r3, #103	; 0x67
 801d4bc:	4a03      	ldr	r2, [pc, #12]	; (801d4cc <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801d4be:	4904      	ldr	r1, [pc, #16]	; (801d4d0 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801d4c0:	4620      	mov	r0, r4
 801d4c2:	47a8      	blx	r5
}
 801d4c4:	bf00      	nop
 801d4c6:	3710      	adds	r7, #16
 801d4c8:	46bd      	mov	sp, r7
 801d4ca:	bdb0      	pop	{r4, r5, r7, pc}
 801d4cc:	080262f8 	.word	0x080262f8
 801d4d0:	08026314 	.word	0x08026314

0801d4d4 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801d4d4:	b5b0      	push	{r4, r5, r7, lr}
 801d4d6:	b086      	sub	sp, #24
 801d4d8:	af02      	add	r7, sp, #8
 801d4da:	60f8      	str	r0, [r7, #12]
 801d4dc:	1d3b      	adds	r3, r7, #4
 801d4de:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801d4e2:	f7f6 fd99 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801d4e6:	4604      	mov	r4, r0
 801d4e8:	6823      	ldr	r3, [r4, #0]
 801d4ea:	3368      	adds	r3, #104	; 0x68
 801d4ec:	681d      	ldr	r5, [r3, #0]
 801d4ee:	f7f6 fda3 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d4f2:	4603      	mov	r3, r0
 801d4f4:	9300      	str	r3, [sp, #0]
 801d4f6:	236c      	movs	r3, #108	; 0x6c
 801d4f8:	4a03      	ldr	r2, [pc, #12]	; (801d508 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801d4fa:	4904      	ldr	r1, [pc, #16]	; (801d50c <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801d4fc:	4620      	mov	r0, r4
 801d4fe:	47a8      	blx	r5
}
 801d500:	bf00      	nop
 801d502:	3710      	adds	r7, #16
 801d504:	46bd      	mov	sp, r7
 801d506:	bdb0      	pop	{r4, r5, r7, pc}
 801d508:	080262f8 	.word	0x080262f8
 801d50c:	08026334 	.word	0x08026334

0801d510 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801d510:	b580      	push	{r7, lr}
 801d512:	b084      	sub	sp, #16
 801d514:	af00      	add	r7, sp, #0
 801d516:	60f8      	str	r0, [r7, #12]
 801d518:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	681b      	ldr	r3, [r3, #0]
 801d520:	3328      	adds	r3, #40	; 0x28
 801d522:	681b      	ldr	r3, [r3, #0]
 801d524:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801d538 <_ZN14MockNamedValue8setValueEd+0x28>
 801d528:	ed97 0b00 	vldr	d0, [r7]
 801d52c:	68f8      	ldr	r0, [r7, #12]
 801d52e:	4798      	blx	r3
}
 801d530:	bf00      	nop
 801d532:	3710      	adds	r7, #16
 801d534:	46bd      	mov	sp, r7
 801d536:	bd80      	pop	{r7, pc}
 801d538:	47ae147b 	.word	0x47ae147b
 801d53c:	3f747ae1 	.word	0x3f747ae1

0801d540 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801d540:	b590      	push	{r4, r7, lr}
 801d542:	b089      	sub	sp, #36	; 0x24
 801d544:	af00      	add	r7, sp, #0
 801d546:	6178      	str	r0, [r7, #20]
 801d548:	ed87 0b02 	vstr	d0, [r7, #8]
 801d54c:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801d550:	697b      	ldr	r3, [r7, #20]
 801d552:	f103 040c 	add.w	r4, r3, #12
 801d556:	f107 0318 	add.w	r3, r7, #24
 801d55a:	490e      	ldr	r1, [pc, #56]	; (801d594 <_ZN14MockNamedValue8setValueEdd+0x54>)
 801d55c:	4618      	mov	r0, r3
 801d55e:	f7ef f978 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d562:	f107 0318 	add.w	r3, r7, #24
 801d566:	4619      	mov	r1, r3
 801d568:	4620      	mov	r0, r4
 801d56a:	f7ef f9de 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d56e:	f107 0318 	add.w	r3, r7, #24
 801d572:	4618      	mov	r0, r3
 801d574:	f7ef fd25 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801d578:	6979      	ldr	r1, [r7, #20]
 801d57a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801d57e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801d582:	6979      	ldr	r1, [r7, #20]
 801d584:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d588:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801d58c:	bf00      	nop
 801d58e:	3724      	adds	r7, #36	; 0x24
 801d590:	46bd      	mov	sp, r7
 801d592:	bd90      	pop	{r4, r7, pc}
 801d594:	08026360 	.word	0x08026360

0801d598 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801d598:	b590      	push	{r4, r7, lr}
 801d59a:	b085      	sub	sp, #20
 801d59c:	af00      	add	r7, sp, #0
 801d59e:	6078      	str	r0, [r7, #4]
 801d5a0:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	f103 040c 	add.w	r4, r3, #12
 801d5a8:	f107 0308 	add.w	r3, r7, #8
 801d5ac:	490a      	ldr	r1, [pc, #40]	; (801d5d8 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801d5ae:	4618      	mov	r0, r3
 801d5b0:	f7ef f94f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d5b4:	f107 0308 	add.w	r3, r7, #8
 801d5b8:	4619      	mov	r1, r3
 801d5ba:	4620      	mov	r0, r4
 801d5bc:	f7ef f9b5 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d5c0:	f107 0308 	add.w	r3, r7, #8
 801d5c4:	4618      	mov	r0, r3
 801d5c6:	f7ef fcfc 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	683a      	ldr	r2, [r7, #0]
 801d5ce:	619a      	str	r2, [r3, #24]
}
 801d5d0:	bf00      	nop
 801d5d2:	3714      	adds	r7, #20
 801d5d4:	46bd      	mov	sp, r7
 801d5d6:	bd90      	pop	{r4, r7, pc}
 801d5d8:	08026368 	.word	0x08026368

0801d5dc <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801d5dc:	b590      	push	{r4, r7, lr}
 801d5de:	b085      	sub	sp, #20
 801d5e0:	af00      	add	r7, sp, #0
 801d5e2:	6078      	str	r0, [r7, #4]
 801d5e4:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	f103 040c 	add.w	r4, r3, #12
 801d5ec:	f107 0308 	add.w	r3, r7, #8
 801d5f0:	490a      	ldr	r1, [pc, #40]	; (801d61c <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801d5f2:	4618      	mov	r0, r3
 801d5f4:	f7ef f92d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d5f8:	f107 0308 	add.w	r3, r7, #8
 801d5fc:	4619      	mov	r1, r3
 801d5fe:	4620      	mov	r0, r4
 801d600:	f7ef f993 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d604:	f107 0308 	add.w	r3, r7, #8
 801d608:	4618      	mov	r0, r3
 801d60a:	f7ef fcda 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801d60e:	687b      	ldr	r3, [r7, #4]
 801d610:	683a      	ldr	r2, [r7, #0]
 801d612:	619a      	str	r2, [r3, #24]
}
 801d614:	bf00      	nop
 801d616:	3714      	adds	r7, #20
 801d618:	46bd      	mov	sp, r7
 801d61a:	bd90      	pop	{r4, r7, pc}
 801d61c:	08026370 	.word	0x08026370

0801d620 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801d620:	b590      	push	{r4, r7, lr}
 801d622:	b085      	sub	sp, #20
 801d624:	af00      	add	r7, sp, #0
 801d626:	6078      	str	r0, [r7, #4]
 801d628:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	f103 040c 	add.w	r4, r3, #12
 801d630:	f107 0308 	add.w	r3, r7, #8
 801d634:	490a      	ldr	r1, [pc, #40]	; (801d660 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801d636:	4618      	mov	r0, r3
 801d638:	f7ef f90b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d63c:	f107 0308 	add.w	r3, r7, #8
 801d640:	4619      	mov	r1, r3
 801d642:	4620      	mov	r0, r4
 801d644:	f7ef f971 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d648:	f107 0308 	add.w	r3, r7, #8
 801d64c:	4618      	mov	r0, r3
 801d64e:	f7ef fcb8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	683a      	ldr	r2, [r7, #0]
 801d656:	619a      	str	r2, [r3, #24]
}
 801d658:	bf00      	nop
 801d65a:	3714      	adds	r7, #20
 801d65c:	46bd      	mov	sp, r7
 801d65e:	bd90      	pop	{r4, r7, pc}
 801d660:	0802637c 	.word	0x0802637c

0801d664 <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801d664:	b590      	push	{r4, r7, lr}
 801d666:	b085      	sub	sp, #20
 801d668:	af00      	add	r7, sp, #0
 801d66a:	6078      	str	r0, [r7, #4]
 801d66c:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	f103 040c 	add.w	r4, r3, #12
 801d674:	f107 0308 	add.w	r3, r7, #8
 801d678:	490a      	ldr	r1, [pc, #40]	; (801d6a4 <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801d67a:	4618      	mov	r0, r3
 801d67c:	f7ef f8e9 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d680:	f107 0308 	add.w	r3, r7, #8
 801d684:	4619      	mov	r1, r3
 801d686:	4620      	mov	r0, r4
 801d688:	f7ef f94f 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d68c:	f107 0308 	add.w	r3, r7, #8
 801d690:	4618      	mov	r0, r3
 801d692:	f7ef fc96 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	683a      	ldr	r2, [r7, #0]
 801d69a:	619a      	str	r2, [r3, #24]
}
 801d69c:	bf00      	nop
 801d69e:	3714      	adds	r7, #20
 801d6a0:	46bd      	mov	sp, r7
 801d6a2:	bd90      	pop	{r4, r7, pc}
 801d6a4:	08026388 	.word	0x08026388

0801d6a8 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801d6a8:	b590      	push	{r4, r7, lr}
 801d6aa:	b087      	sub	sp, #28
 801d6ac:	af00      	add	r7, sp, #0
 801d6ae:	60f8      	str	r0, [r7, #12]
 801d6b0:	60b9      	str	r1, [r7, #8]
 801d6b2:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801d6b4:	68fb      	ldr	r3, [r7, #12]
 801d6b6:	f103 040c 	add.w	r4, r3, #12
 801d6ba:	f107 0310 	add.w	r3, r7, #16
 801d6be:	490c      	ldr	r1, [pc, #48]	; (801d6f0 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	f7ef f8c6 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d6c6:	f107 0310 	add.w	r3, r7, #16
 801d6ca:	4619      	mov	r1, r3
 801d6cc:	4620      	mov	r0, r4
 801d6ce:	f7ef f92c 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d6d2:	f107 0310 	add.w	r3, r7, #16
 801d6d6:	4618      	mov	r0, r3
 801d6d8:	f7ef fc73 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801d6dc:	68fb      	ldr	r3, [r7, #12]
 801d6de:	68ba      	ldr	r2, [r7, #8]
 801d6e0:	619a      	str	r2, [r3, #24]
    size_ = size;
 801d6e2:	68fb      	ldr	r3, [r7, #12]
 801d6e4:	687a      	ldr	r2, [r7, #4]
 801d6e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 801d6e8:	bf00      	nop
 801d6ea:	371c      	adds	r7, #28
 801d6ec:	46bd      	mov	sp, r7
 801d6ee:	bd90      	pop	{r4, r7, pc}
 801d6f0:	08026394 	.word	0x08026394

0801d6f4 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801d6f4:	b580      	push	{r7, lr}
 801d6f6:	b084      	sub	sp, #16
 801d6f8:	af00      	add	r7, sp, #0
 801d6fa:	60f8      	str	r0, [r7, #12]
 801d6fc:	60b9      	str	r1, [r7, #8]
 801d6fe:	607a      	str	r2, [r7, #4]
    type_ = type;
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	330c      	adds	r3, #12
 801d704:	68b9      	ldr	r1, [r7, #8]
 801d706:	4618      	mov	r0, r3
 801d708:	f7ef f90f 	bl	800c92a <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801d70c:	68fb      	ldr	r3, [r7, #12]
 801d70e:	687a      	ldr	r2, [r7, #4]
 801d710:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801d712:	4b11      	ldr	r3, [pc, #68]	; (801d758 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d714:	681b      	ldr	r3, [r3, #0]
 801d716:	2b00      	cmp	r3, #0
 801d718:	d019      	beq.n	801d74e <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801d71a:	4b0f      	ldr	r3, [pc, #60]	; (801d758 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d71c:	681a      	ldr	r2, [r3, #0]
 801d71e:	4b0e      	ldr	r3, [pc, #56]	; (801d758 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d720:	681b      	ldr	r3, [r3, #0]
 801d722:	681b      	ldr	r3, [r3, #0]
 801d724:	3314      	adds	r3, #20
 801d726:	681b      	ldr	r3, [r3, #0]
 801d728:	68b9      	ldr	r1, [r7, #8]
 801d72a:	4610      	mov	r0, r2
 801d72c:	4798      	blx	r3
 801d72e:	4602      	mov	r2, r0
 801d730:	68fb      	ldr	r3, [r7, #12]
 801d732:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801d734:	4b08      	ldr	r3, [pc, #32]	; (801d758 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d736:	681a      	ldr	r2, [r3, #0]
 801d738:	4b07      	ldr	r3, [pc, #28]	; (801d758 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d73a:	681b      	ldr	r3, [r3, #0]
 801d73c:	681b      	ldr	r3, [r3, #0]
 801d73e:	3318      	adds	r3, #24
 801d740:	681b      	ldr	r3, [r3, #0]
 801d742:	68b9      	ldr	r1, [r7, #8]
 801d744:	4610      	mov	r0, r2
 801d746:	4798      	blx	r3
 801d748:	4602      	mov	r2, r0
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801d74e:	bf00      	nop
 801d750:	3710      	adds	r7, #16
 801d752:	46bd      	mov	sp, r7
 801d754:	bd80      	pop	{r7, pc}
 801d756:	bf00      	nop
 801d758:	20000e80 	.word	0x20000e80

0801d75c <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801d75c:	b580      	push	{r7, lr}
 801d75e:	b084      	sub	sp, #16
 801d760:	af00      	add	r7, sp, #0
 801d762:	60f8      	str	r0, [r7, #12]
 801d764:	60b9      	str	r1, [r7, #8]
 801d766:	607a      	str	r2, [r7, #4]
    type_ = type;
 801d768:	68fb      	ldr	r3, [r7, #12]
 801d76a:	330c      	adds	r3, #12
 801d76c:	68b9      	ldr	r1, [r7, #8]
 801d76e:	4618      	mov	r0, r3
 801d770:	f7ef f8db 	bl	800c92a <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801d774:	68fb      	ldr	r3, [r7, #12]
 801d776:	687a      	ldr	r2, [r7, #4]
 801d778:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801d77a:	4b11      	ldr	r3, [pc, #68]	; (801d7c0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d77c:	681b      	ldr	r3, [r3, #0]
 801d77e:	2b00      	cmp	r3, #0
 801d780:	d019      	beq.n	801d7b6 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801d782:	4b0f      	ldr	r3, [pc, #60]	; (801d7c0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d784:	681a      	ldr	r2, [r3, #0]
 801d786:	4b0e      	ldr	r3, [pc, #56]	; (801d7c0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d788:	681b      	ldr	r3, [r3, #0]
 801d78a:	681b      	ldr	r3, [r3, #0]
 801d78c:	3314      	adds	r3, #20
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	68b9      	ldr	r1, [r7, #8]
 801d792:	4610      	mov	r0, r2
 801d794:	4798      	blx	r3
 801d796:	4602      	mov	r2, r0
 801d798:	68fb      	ldr	r3, [r7, #12]
 801d79a:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801d79c:	4b08      	ldr	r3, [pc, #32]	; (801d7c0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d79e:	681a      	ldr	r2, [r3, #0]
 801d7a0:	4b07      	ldr	r3, [pc, #28]	; (801d7c0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d7a2:	681b      	ldr	r3, [r3, #0]
 801d7a4:	681b      	ldr	r3, [r3, #0]
 801d7a6:	3318      	adds	r3, #24
 801d7a8:	681b      	ldr	r3, [r3, #0]
 801d7aa:	68b9      	ldr	r1, [r7, #8]
 801d7ac:	4610      	mov	r0, r2
 801d7ae:	4798      	blx	r3
 801d7b0:	4602      	mov	r2, r0
 801d7b2:	68fb      	ldr	r3, [r7, #12]
 801d7b4:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801d7b6:	bf00      	nop
 801d7b8:	3710      	adds	r7, #16
 801d7ba:	46bd      	mov	sp, r7
 801d7bc:	bd80      	pop	{r7, pc}
 801d7be:	bf00      	nop
 801d7c0:	20000e80 	.word	0x20000e80

0801d7c4 <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801d7c4:	b480      	push	{r7}
 801d7c6:	b083      	sub	sp, #12
 801d7c8:	af00      	add	r7, sp, #0
 801d7ca:	6078      	str	r0, [r7, #4]
 801d7cc:	6039      	str	r1, [r7, #0]
    size_ = size;
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	683a      	ldr	r2, [r7, #0]
 801d7d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 801d7d4:	bf00      	nop
 801d7d6:	370c      	adds	r7, #12
 801d7d8:	46bd      	mov	sp, r7
 801d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7de:	4770      	bx	lr

0801d7e0 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801d7e0:	b590      	push	{r4, r7, lr}
 801d7e2:	b085      	sub	sp, #20
 801d7e4:	af00      	add	r7, sp, #0
 801d7e6:	6078      	str	r0, [r7, #4]
 801d7e8:	6039      	str	r1, [r7, #0]
    name_ = name;
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	1d1c      	adds	r4, r3, #4
 801d7ee:	f107 0308 	add.w	r3, r7, #8
 801d7f2:	6839      	ldr	r1, [r7, #0]
 801d7f4:	4618      	mov	r0, r3
 801d7f6:	f7ef f82c 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d7fa:	f107 0308 	add.w	r3, r7, #8
 801d7fe:	4619      	mov	r1, r3
 801d800:	4620      	mov	r0, r4
 801d802:	f7ef f892 	bl	800c92a <_ZN12SimpleStringaSERKS_>
 801d806:	f107 0308 	add.w	r3, r7, #8
 801d80a:	4618      	mov	r0, r3
 801d80c:	f7ef fbd9 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
}
 801d810:	bf00      	nop
 801d812:	3714      	adds	r7, #20
 801d814:	46bd      	mov	sp, r7
 801d816:	bd90      	pop	{r4, r7, pc}

0801d818 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801d818:	b580      	push	{r7, lr}
 801d81a:	b082      	sub	sp, #8
 801d81c:	af00      	add	r7, sp, #0
 801d81e:	6078      	str	r0, [r7, #4]
 801d820:	6039      	str	r1, [r7, #0]
    return name_;
 801d822:	683b      	ldr	r3, [r7, #0]
 801d824:	3304      	adds	r3, #4
 801d826:	4619      	mov	r1, r3
 801d828:	6878      	ldr	r0, [r7, #4]
 801d82a:	f7ef f866 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
}
 801d82e:	6878      	ldr	r0, [r7, #4]
 801d830:	3708      	adds	r7, #8
 801d832:	46bd      	mov	sp, r7
 801d834:	bd80      	pop	{r7, pc}

0801d836 <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801d836:	b580      	push	{r7, lr}
 801d838:	b082      	sub	sp, #8
 801d83a:	af00      	add	r7, sp, #0
 801d83c:	6078      	str	r0, [r7, #4]
 801d83e:	6039      	str	r1, [r7, #0]
    return type_;
 801d840:	683b      	ldr	r3, [r7, #0]
 801d842:	330c      	adds	r3, #12
 801d844:	4619      	mov	r1, r3
 801d846:	6878      	ldr	r0, [r7, #4]
 801d848:	f7ef f857 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
}
 801d84c:	6878      	ldr	r0, [r7, #4]
 801d84e:	3708      	adds	r7, #8
 801d850:	46bd      	mov	sp, r7
 801d852:	bd80      	pop	{r7, pc}

0801d854 <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801d854:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d856:	b087      	sub	sp, #28
 801d858:	af04      	add	r7, sp, #16
 801d85a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801d85c:	f7f6 fbdc 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801d860:	4604      	mov	r4, r0
 801d862:	6823      	ldr	r3, [r4, #0]
 801d864:	3324      	adds	r3, #36	; 0x24
 801d866:	681d      	ldr	r5, [r3, #0]
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	330c      	adds	r3, #12
 801d86c:	4618      	mov	r0, r3
 801d86e:	f7ef fb7b 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801d872:	4606      	mov	r6, r0
 801d874:	f7f6 fbe0 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d878:	4603      	mov	r3, r0
 801d87a:	9302      	str	r3, [sp, #8]
 801d87c:	23c8      	movs	r3, #200	; 0xc8
 801d87e:	9301      	str	r3, [sp, #4]
 801d880:	4b06      	ldr	r3, [pc, #24]	; (801d89c <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801d882:	9300      	str	r3, [sp, #0]
 801d884:	2300      	movs	r3, #0
 801d886:	4632      	mov	r2, r6
 801d888:	4905      	ldr	r1, [pc, #20]	; (801d8a0 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801d88a:	4620      	mov	r0, r4
 801d88c:	47a8      	blx	r5
    return value_.boolValue_;
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	7e1b      	ldrb	r3, [r3, #24]
}
 801d892:	4618      	mov	r0, r3
 801d894:	370c      	adds	r7, #12
 801d896:	46bd      	mov	sp, r7
 801d898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d89a:	bf00      	nop
 801d89c:	080262f8 	.word	0x080262f8
 801d8a0:	080262c0 	.word	0x080262c0

0801d8a4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801d8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8a6:	b089      	sub	sp, #36	; 0x24
 801d8a8:	af04      	add	r7, sp, #16
 801d8aa:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	f103 040c 	add.w	r4, r3, #12
 801d8b2:	f107 0308 	add.w	r3, r7, #8
 801d8b6:	4920      	ldr	r1, [pc, #128]	; (801d938 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801d8b8:	4618      	mov	r0, r3
 801d8ba:	f7ee ffca 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d8be:	2501      	movs	r5, #1
 801d8c0:	f107 0308 	add.w	r3, r7, #8
 801d8c4:	4619      	mov	r1, r3
 801d8c6:	4620      	mov	r0, r4
 801d8c8:	f7ef fb87 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801d8cc:	4603      	mov	r3, r0
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	d005      	beq.n	801d8de <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801d8d2:	687b      	ldr	r3, [r7, #4]
 801d8d4:	699b      	ldr	r3, [r3, #24]
 801d8d6:	2b00      	cmp	r3, #0
 801d8d8:	db01      	blt.n	801d8de <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801d8da:	2401      	movs	r4, #1
 801d8dc:	e000      	b.n	801d8e0 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801d8de:	2400      	movs	r4, #0
 801d8e0:	2d00      	cmp	r5, #0
 801d8e2:	d004      	beq.n	801d8ee <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801d8e4:	f107 0308 	add.w	r3, r7, #8
 801d8e8:	4618      	mov	r0, r3
 801d8ea:	f7ef fb6a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801d8ee:	2c00      	cmp	r4, #0
 801d8f0:	d002      	beq.n	801d8f8 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	699b      	ldr	r3, [r3, #24]
 801d8f6:	e01a      	b.n	801d92e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801d8f8:	f7f6 fb8e 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801d8fc:	4604      	mov	r4, r0
 801d8fe:	6823      	ldr	r3, [r4, #0]
 801d900:	3324      	adds	r3, #36	; 0x24
 801d902:	681d      	ldr	r5, [r3, #0]
 801d904:	687b      	ldr	r3, [r7, #4]
 801d906:	330c      	adds	r3, #12
 801d908:	4618      	mov	r0, r3
 801d90a:	f7ef fb2d 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801d90e:	4606      	mov	r6, r0
 801d910:	f7f6 fb92 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d914:	4603      	mov	r3, r0
 801d916:	9302      	str	r3, [sp, #8]
 801d918:	23d2      	movs	r3, #210	; 0xd2
 801d91a:	9301      	str	r3, [sp, #4]
 801d91c:	4b07      	ldr	r3, [pc, #28]	; (801d93c <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801d91e:	9300      	str	r3, [sp, #0]
 801d920:	2300      	movs	r3, #0
 801d922:	4632      	mov	r2, r6
 801d924:	4906      	ldr	r1, [pc, #24]	; (801d940 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801d926:	4620      	mov	r0, r4
 801d928:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801d92a:	687b      	ldr	r3, [r7, #4]
 801d92c:	699b      	ldr	r3, [r3, #24]
    }
}
 801d92e:	4618      	mov	r0, r3
 801d930:	3714      	adds	r7, #20
 801d932:	46bd      	mov	sp, r7
 801d934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d936:	bf00      	nop
 801d938:	080262bc 	.word	0x080262bc
 801d93c:	080262f8 	.word	0x080262f8
 801d940:	080262c8 	.word	0x080262c8

0801d944 <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801d944:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d946:	b087      	sub	sp, #28
 801d948:	af04      	add	r7, sp, #16
 801d94a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801d94c:	f7f6 fb64 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801d950:	4604      	mov	r4, r0
 801d952:	6823      	ldr	r3, [r4, #0]
 801d954:	3324      	adds	r3, #36	; 0x24
 801d956:	681d      	ldr	r5, [r3, #0]
 801d958:	687b      	ldr	r3, [r7, #4]
 801d95a:	330c      	adds	r3, #12
 801d95c:	4618      	mov	r0, r3
 801d95e:	f7ef fb03 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801d962:	4606      	mov	r6, r0
 801d964:	f7f6 fb68 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d968:	4603      	mov	r3, r0
 801d96a:	9302      	str	r3, [sp, #8]
 801d96c:	23d9      	movs	r3, #217	; 0xd9
 801d96e:	9301      	str	r3, [sp, #4]
 801d970:	4b06      	ldr	r3, [pc, #24]	; (801d98c <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801d972:	9300      	str	r3, [sp, #0]
 801d974:	2300      	movs	r3, #0
 801d976:	4632      	mov	r2, r6
 801d978:	4905      	ldr	r1, [pc, #20]	; (801d990 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801d97a:	4620      	mov	r0, r4
 801d97c:	47a8      	blx	r5
    return value_.intValue_;
 801d97e:	687b      	ldr	r3, [r7, #4]
 801d980:	699b      	ldr	r3, [r3, #24]
}
 801d982:	4618      	mov	r0, r3
 801d984:	370c      	adds	r7, #12
 801d986:	46bd      	mov	sp, r7
 801d988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d98a:	bf00      	nop
 801d98c:	080262f8 	.word	0x080262f8
 801d990:	080262bc 	.word	0x080262bc

0801d994 <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801d994:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d996:	b08b      	sub	sp, #44	; 0x2c
 801d998:	af04      	add	r7, sp, #16
 801d99a:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801d99c:	687b      	ldr	r3, [r7, #4]
 801d99e:	f103 040c 	add.w	r4, r3, #12
 801d9a2:	f107 0308 	add.w	r3, r7, #8
 801d9a6:	4928      	ldr	r1, [pc, #160]	; (801da48 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801d9a8:	4618      	mov	r0, r3
 801d9aa:	f7ee ff52 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d9ae:	f107 0308 	add.w	r3, r7, #8
 801d9b2:	4619      	mov	r1, r3
 801d9b4:	4620      	mov	r0, r4
 801d9b6:	f7ef fb10 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801d9ba:	4603      	mov	r3, r0
 801d9bc:	461c      	mov	r4, r3
 801d9be:	f107 0308 	add.w	r3, r7, #8
 801d9c2:	4618      	mov	r0, r3
 801d9c4:	f7ef fafd 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801d9c8:	2c00      	cmp	r4, #0
 801d9ca:	d002      	beq.n	801d9d2 <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	699b      	ldr	r3, [r3, #24]
 801d9d0:	e035      	b.n	801da3e <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	f103 040c 	add.w	r4, r3, #12
 801d9d8:	f107 0310 	add.w	r3, r7, #16
 801d9dc:	491b      	ldr	r1, [pc, #108]	; (801da4c <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801d9de:	4618      	mov	r0, r3
 801d9e0:	f7ee ff37 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801d9e4:	f107 0310 	add.w	r3, r7, #16
 801d9e8:	4619      	mov	r1, r3
 801d9ea:	4620      	mov	r0, r4
 801d9ec:	f7ef faf5 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801d9f0:	4603      	mov	r3, r0
 801d9f2:	461c      	mov	r4, r3
 801d9f4:	f107 0310 	add.w	r3, r7, #16
 801d9f8:	4618      	mov	r0, r3
 801d9fa:	f7ef fae2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801d9fe:	2c00      	cmp	r4, #0
 801da00:	d002      	beq.n	801da08 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801da02:	687b      	ldr	r3, [r7, #4]
 801da04:	699b      	ldr	r3, [r3, #24]
 801da06:	e01a      	b.n	801da3e <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801da08:	f7f6 fb06 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801da0c:	4604      	mov	r4, r0
 801da0e:	6823      	ldr	r3, [r4, #0]
 801da10:	3324      	adds	r3, #36	; 0x24
 801da12:	681d      	ldr	r5, [r3, #0]
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	330c      	adds	r3, #12
 801da18:	4618      	mov	r0, r3
 801da1a:	f7ef faa5 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801da1e:	4606      	mov	r6, r0
 801da20:	f7f6 fb0a 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801da24:	4603      	mov	r3, r0
 801da26:	9302      	str	r3, [sp, #8]
 801da28:	23e5      	movs	r3, #229	; 0xe5
 801da2a:	9301      	str	r3, [sp, #4]
 801da2c:	4b08      	ldr	r3, [pc, #32]	; (801da50 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801da2e:	9300      	str	r3, [sp, #0]
 801da30:	2300      	movs	r3, #0
 801da32:	4632      	mov	r2, r6
 801da34:	4907      	ldr	r1, [pc, #28]	; (801da54 <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801da36:	4620      	mov	r0, r4
 801da38:	47a8      	blx	r5
        return value_.longIntValue_;
 801da3a:	687b      	ldr	r3, [r7, #4]
 801da3c:	699b      	ldr	r3, [r3, #24]
    }
}
 801da3e:	4618      	mov	r0, r3
 801da40:	371c      	adds	r7, #28
 801da42:	46bd      	mov	sp, r7
 801da44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da46:	bf00      	nop
 801da48:	080262bc 	.word	0x080262bc
 801da4c:	080262c8 	.word	0x080262c8
 801da50:	080262f8 	.word	0x080262f8
 801da54:	080262d8 	.word	0x080262d8

0801da58 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801da58:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da5a:	b08d      	sub	sp, #52	; 0x34
 801da5c:	af04      	add	r7, sp, #16
 801da5e:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	f103 040c 	add.w	r4, r3, #12
 801da66:	f107 0308 	add.w	r3, r7, #8
 801da6a:	4940      	ldr	r1, [pc, #256]	; (801db6c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801da6c:	4618      	mov	r0, r3
 801da6e:	f7ee fef0 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801da72:	f107 0308 	add.w	r3, r7, #8
 801da76:	4619      	mov	r1, r3
 801da78:	4620      	mov	r0, r4
 801da7a:	f7ef faae 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801da7e:	4603      	mov	r3, r0
 801da80:	461c      	mov	r4, r3
 801da82:	f107 0308 	add.w	r3, r7, #8
 801da86:	4618      	mov	r0, r3
 801da88:	f7ef fa9b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801da8c:	2c00      	cmp	r4, #0
 801da8e:	d002      	beq.n	801da96 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	699b      	ldr	r3, [r3, #24]
 801da94:	e066      	b.n	801db64 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	f103 040c 	add.w	r4, r3, #12
 801da9c:	f107 0310 	add.w	r3, r7, #16
 801daa0:	4933      	ldr	r1, [pc, #204]	; (801db70 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801daa2:	4618      	mov	r0, r3
 801daa4:	f7ee fed5 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801daa8:	2501      	movs	r5, #1
 801daaa:	f107 0310 	add.w	r3, r7, #16
 801daae:	4619      	mov	r1, r3
 801dab0:	4620      	mov	r0, r4
 801dab2:	f7ef fa92 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801dab6:	4603      	mov	r3, r0
 801dab8:	2b00      	cmp	r3, #0
 801daba:	d005      	beq.n	801dac8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	699b      	ldr	r3, [r3, #24]
 801dac0:	2b00      	cmp	r3, #0
 801dac2:	db01      	blt.n	801dac8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801dac4:	2401      	movs	r4, #1
 801dac6:	e000      	b.n	801daca <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801dac8:	2400      	movs	r4, #0
 801daca:	2d00      	cmp	r5, #0
 801dacc:	d004      	beq.n	801dad8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801dace:	f107 0310 	add.w	r3, r7, #16
 801dad2:	4618      	mov	r0, r3
 801dad4:	f7ef fa75 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801dad8:	2c00      	cmp	r4, #0
 801dada:	d002      	beq.n	801dae2 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	699b      	ldr	r3, [r3, #24]
 801dae0:	e040      	b.n	801db64 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801dae2:	687b      	ldr	r3, [r7, #4]
 801dae4:	f103 040c 	add.w	r4, r3, #12
 801dae8:	f107 0318 	add.w	r3, r7, #24
 801daec:	4921      	ldr	r1, [pc, #132]	; (801db74 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801daee:	4618      	mov	r0, r3
 801daf0:	f7ee feaf 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801daf4:	2501      	movs	r5, #1
 801daf6:	f107 0318 	add.w	r3, r7, #24
 801dafa:	4619      	mov	r1, r3
 801dafc:	4620      	mov	r0, r4
 801dafe:	f7ef fa6c 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801db02:	4603      	mov	r3, r0
 801db04:	2b00      	cmp	r3, #0
 801db06:	d005      	beq.n	801db14 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	699b      	ldr	r3, [r3, #24]
 801db0c:	2b00      	cmp	r3, #0
 801db0e:	db01      	blt.n	801db14 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801db10:	2401      	movs	r4, #1
 801db12:	e000      	b.n	801db16 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801db14:	2400      	movs	r4, #0
 801db16:	2d00      	cmp	r5, #0
 801db18:	d004      	beq.n	801db24 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801db1a:	f107 0318 	add.w	r3, r7, #24
 801db1e:	4618      	mov	r0, r3
 801db20:	f7ef fa4f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801db24:	2c00      	cmp	r4, #0
 801db26:	d002      	beq.n	801db2e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	699b      	ldr	r3, [r3, #24]
 801db2c:	e01a      	b.n	801db64 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801db2e:	f7f6 fa73 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801db32:	4604      	mov	r4, r0
 801db34:	6823      	ldr	r3, [r4, #0]
 801db36:	3324      	adds	r3, #36	; 0x24
 801db38:	681d      	ldr	r5, [r3, #0]
 801db3a:	687b      	ldr	r3, [r7, #4]
 801db3c:	330c      	adds	r3, #12
 801db3e:	4618      	mov	r0, r3
 801db40:	f7ef fa12 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801db44:	4606      	mov	r6, r0
 801db46:	f7f6 fa77 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801db4a:	4603      	mov	r3, r0
 801db4c:	9302      	str	r3, [sp, #8]
 801db4e:	23f4      	movs	r3, #244	; 0xf4
 801db50:	9301      	str	r3, [sp, #4]
 801db52:	4b09      	ldr	r3, [pc, #36]	; (801db78 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801db54:	9300      	str	r3, [sp, #0]
 801db56:	2300      	movs	r3, #0
 801db58:	4632      	mov	r2, r6
 801db5a:	4908      	ldr	r1, [pc, #32]	; (801db7c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801db5c:	4620      	mov	r0, r4
 801db5e:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	699b      	ldr	r3, [r3, #24]
    }
}
 801db64:	4618      	mov	r0, r3
 801db66:	3724      	adds	r7, #36	; 0x24
 801db68:	46bd      	mov	sp, r7
 801db6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db6c:	080262c8 	.word	0x080262c8
 801db70:	080262bc 	.word	0x080262bc
 801db74:	080262d8 	.word	0x080262d8
 801db78:	080262f8 	.word	0x080262f8
 801db7c:	080262e4 	.word	0x080262e4

0801db80 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801db80:	b5b0      	push	{r4, r5, r7, lr}
 801db82:	b084      	sub	sp, #16
 801db84:	af02      	add	r7, sp, #8
 801db86:	6078      	str	r0, [r7, #4]
 801db88:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801db8a:	f7f6 fa45 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801db8e:	4604      	mov	r4, r0
 801db90:	6823      	ldr	r3, [r4, #0]
 801db92:	3368      	adds	r3, #104	; 0x68
 801db94:	681d      	ldr	r5, [r3, #0]
 801db96:	f7f6 fa4f 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801db9a:	4603      	mov	r3, r0
 801db9c:	9300      	str	r3, [sp, #0]
 801db9e:	f240 1323 	movw	r3, #291	; 0x123
 801dba2:	4a06      	ldr	r2, [pc, #24]	; (801dbbc <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801dba4:	4906      	ldr	r1, [pc, #24]	; (801dbc0 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801dba6:	4620      	mov	r0, r4
 801dba8:	47a8      	blx	r5
    return cpputest_longlong(0);
 801dbaa:	2100      	movs	r1, #0
 801dbac:	6878      	ldr	r0, [r7, #4]
 801dbae:	f7ec fe87 	bl	800a8c0 <_ZN17cpputest_longlongC1Ei>
}
 801dbb2:	6878      	ldr	r0, [r7, #4]
 801dbb4:	3708      	adds	r7, #8
 801dbb6:	46bd      	mov	sp, r7
 801dbb8:	bdb0      	pop	{r4, r5, r7, pc}
 801dbba:	bf00      	nop
 801dbbc:	080262f8 	.word	0x080262f8
 801dbc0:	08026314 	.word	0x08026314

0801dbc4 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801dbc4:	b5b0      	push	{r4, r5, r7, lr}
 801dbc6:	b084      	sub	sp, #16
 801dbc8:	af02      	add	r7, sp, #8
 801dbca:	6078      	str	r0, [r7, #4]
 801dbcc:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801dbce:	f7f6 fa23 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801dbd2:	4604      	mov	r4, r0
 801dbd4:	6823      	ldr	r3, [r4, #0]
 801dbd6:	3368      	adds	r3, #104	; 0x68
 801dbd8:	681d      	ldr	r5, [r3, #0]
 801dbda:	f7f6 fa2d 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dbde:	4603      	mov	r3, r0
 801dbe0:	9300      	str	r3, [sp, #0]
 801dbe2:	f240 1329 	movw	r3, #297	; 0x129
 801dbe6:	4a06      	ldr	r2, [pc, #24]	; (801dc00 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801dbe8:	4906      	ldr	r1, [pc, #24]	; (801dc04 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801dbea:	4620      	mov	r0, r4
 801dbec:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801dbee:	2100      	movs	r1, #0
 801dbf0:	6878      	ldr	r0, [r7, #4]
 801dbf2:	f7ec fe71 	bl	800a8d8 <_ZN18cpputest_ulonglongC1Ei>
}
 801dbf6:	6878      	ldr	r0, [r7, #4]
 801dbf8:	3708      	adds	r7, #8
 801dbfa:	46bd      	mov	sp, r7
 801dbfc:	bdb0      	pop	{r4, r5, r7, pc}
 801dbfe:	bf00      	nop
 801dc00:	080262f8 	.word	0x080262f8
 801dc04:	08026334 	.word	0x08026334

0801dc08 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801dc08:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc0a:	b087      	sub	sp, #28
 801dc0c:	af04      	add	r7, sp, #16
 801dc0e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801dc10:	f7f6 fa02 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801dc14:	4604      	mov	r4, r0
 801dc16:	6823      	ldr	r3, [r4, #0]
 801dc18:	3324      	adds	r3, #36	; 0x24
 801dc1a:	681d      	ldr	r5, [r3, #0]
 801dc1c:	687b      	ldr	r3, [r7, #4]
 801dc1e:	330c      	adds	r3, #12
 801dc20:	4618      	mov	r0, r3
 801dc22:	f7ef f9a1 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801dc26:	4606      	mov	r6, r0
 801dc28:	f7f6 fa06 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dc2c:	4603      	mov	r3, r0
 801dc2e:	9302      	str	r3, [sp, #8]
 801dc30:	f240 1331 	movw	r3, #305	; 0x131
 801dc34:	9301      	str	r3, [sp, #4]
 801dc36:	4b09      	ldr	r3, [pc, #36]	; (801dc5c <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801dc38:	9300      	str	r3, [sp, #0]
 801dc3a:	2300      	movs	r3, #0
 801dc3c:	4632      	mov	r2, r6
 801dc3e:	4908      	ldr	r1, [pc, #32]	; (801dc60 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801dc40:	4620      	mov	r0, r4
 801dc42:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801dc4a:	ec43 2b17 	vmov	d7, r2, r3
}
 801dc4e:	eeb0 0a47 	vmov.f32	s0, s14
 801dc52:	eef0 0a67 	vmov.f32	s1, s15
 801dc56:	370c      	adds	r7, #12
 801dc58:	46bd      	mov	sp, r7
 801dc5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc5c:	080262f8 	.word	0x080262f8
 801dc60:	08026360 	.word	0x08026360

0801dc64 <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801dc64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc66:	b087      	sub	sp, #28
 801dc68:	af04      	add	r7, sp, #16
 801dc6a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801dc6c:	f7f6 f9d4 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801dc70:	4604      	mov	r4, r0
 801dc72:	6823      	ldr	r3, [r4, #0]
 801dc74:	3324      	adds	r3, #36	; 0x24
 801dc76:	681d      	ldr	r5, [r3, #0]
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	330c      	adds	r3, #12
 801dc7c:	4618      	mov	r0, r3
 801dc7e:	f7ef f973 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801dc82:	4606      	mov	r6, r0
 801dc84:	f7f6 f9d8 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dc88:	4603      	mov	r3, r0
 801dc8a:	9302      	str	r3, [sp, #8]
 801dc8c:	f240 1337 	movw	r3, #311	; 0x137
 801dc90:	9301      	str	r3, [sp, #4]
 801dc92:	4b09      	ldr	r3, [pc, #36]	; (801dcb8 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801dc94:	9300      	str	r3, [sp, #0]
 801dc96:	2300      	movs	r3, #0
 801dc98:	4632      	mov	r2, r6
 801dc9a:	4908      	ldr	r1, [pc, #32]	; (801dcbc <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801dc9c:	4620      	mov	r0, r4
 801dc9e:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801dca0:	687b      	ldr	r3, [r7, #4]
 801dca2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801dca6:	ec43 2b17 	vmov	d7, r2, r3
}
 801dcaa:	eeb0 0a47 	vmov.f32	s0, s14
 801dcae:	eef0 0a67 	vmov.f32	s1, s15
 801dcb2:	370c      	adds	r7, #12
 801dcb4:	46bd      	mov	sp, r7
 801dcb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dcb8:	080262f8 	.word	0x080262f8
 801dcbc:	08026360 	.word	0x08026360

0801dcc0 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801dcc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcc2:	b087      	sub	sp, #28
 801dcc4:	af04      	add	r7, sp, #16
 801dcc6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801dcc8:	f7f6 f9a6 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801dccc:	4604      	mov	r4, r0
 801dcce:	6823      	ldr	r3, [r4, #0]
 801dcd0:	3324      	adds	r3, #36	; 0x24
 801dcd2:	681d      	ldr	r5, [r3, #0]
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	330c      	adds	r3, #12
 801dcd8:	4618      	mov	r0, r3
 801dcda:	f7ef f945 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801dcde:	4606      	mov	r6, r0
 801dce0:	f7f6 f9aa 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dce4:	4603      	mov	r3, r0
 801dce6:	9302      	str	r3, [sp, #8]
 801dce8:	f240 133d 	movw	r3, #317	; 0x13d
 801dcec:	9301      	str	r3, [sp, #4]
 801dcee:	4b06      	ldr	r3, [pc, #24]	; (801dd08 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801dcf0:	9300      	str	r3, [sp, #0]
 801dcf2:	2300      	movs	r3, #0
 801dcf4:	4632      	mov	r2, r6
 801dcf6:	4905      	ldr	r1, [pc, #20]	; (801dd0c <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801dcf8:	4620      	mov	r0, r4
 801dcfa:	47a8      	blx	r5
    return value_.stringValue_;
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	699b      	ldr	r3, [r3, #24]
}
 801dd00:	4618      	mov	r0, r3
 801dd02:	370c      	adds	r7, #12
 801dd04:	46bd      	mov	sp, r7
 801dd06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd08:	080262f8 	.word	0x080262f8
 801dd0c:	08026388 	.word	0x08026388

0801dd10 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801dd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd12:	b087      	sub	sp, #28
 801dd14:	af04      	add	r7, sp, #16
 801dd16:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801dd18:	f7f6 f97e 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801dd1c:	4604      	mov	r4, r0
 801dd1e:	6823      	ldr	r3, [r4, #0]
 801dd20:	3324      	adds	r3, #36	; 0x24
 801dd22:	681d      	ldr	r5, [r3, #0]
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	330c      	adds	r3, #12
 801dd28:	4618      	mov	r0, r3
 801dd2a:	f7ef f91d 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801dd2e:	4606      	mov	r6, r0
 801dd30:	f7f6 f982 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dd34:	4603      	mov	r3, r0
 801dd36:	9302      	str	r3, [sp, #8]
 801dd38:	f240 1343 	movw	r3, #323	; 0x143
 801dd3c:	9301      	str	r3, [sp, #4]
 801dd3e:	4b06      	ldr	r3, [pc, #24]	; (801dd58 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801dd40:	9300      	str	r3, [sp, #0]
 801dd42:	2300      	movs	r3, #0
 801dd44:	4632      	mov	r2, r6
 801dd46:	4905      	ldr	r1, [pc, #20]	; (801dd5c <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801dd48:	4620      	mov	r0, r4
 801dd4a:	47a8      	blx	r5
    return value_.pointerValue_;
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	699b      	ldr	r3, [r3, #24]
}
 801dd50:	4618      	mov	r0, r3
 801dd52:	370c      	adds	r7, #12
 801dd54:	46bd      	mov	sp, r7
 801dd56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd58:	080262f8 	.word	0x080262f8
 801dd5c:	08026368 	.word	0x08026368

0801dd60 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801dd60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd62:	b087      	sub	sp, #28
 801dd64:	af04      	add	r7, sp, #16
 801dd66:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801dd68:	f7f6 f956 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801dd6c:	4604      	mov	r4, r0
 801dd6e:	6823      	ldr	r3, [r4, #0]
 801dd70:	3324      	adds	r3, #36	; 0x24
 801dd72:	681d      	ldr	r5, [r3, #0]
 801dd74:	687b      	ldr	r3, [r7, #4]
 801dd76:	330c      	adds	r3, #12
 801dd78:	4618      	mov	r0, r3
 801dd7a:	f7ef f8f5 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801dd7e:	4606      	mov	r6, r0
 801dd80:	f7f6 f95a 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dd84:	4603      	mov	r3, r0
 801dd86:	9302      	str	r3, [sp, #8]
 801dd88:	f240 1349 	movw	r3, #329	; 0x149
 801dd8c:	9301      	str	r3, [sp, #4]
 801dd8e:	4b06      	ldr	r3, [pc, #24]	; (801dda8 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801dd90:	9300      	str	r3, [sp, #0]
 801dd92:	2300      	movs	r3, #0
 801dd94:	4632      	mov	r2, r6
 801dd96:	4905      	ldr	r1, [pc, #20]	; (801ddac <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801dd98:	4620      	mov	r0, r4
 801dd9a:	47a8      	blx	r5
    return value_.pointerValue_;
 801dd9c:	687b      	ldr	r3, [r7, #4]
 801dd9e:	699b      	ldr	r3, [r3, #24]
}
 801dda0:	4618      	mov	r0, r3
 801dda2:	370c      	adds	r7, #12
 801dda4:	46bd      	mov	sp, r7
 801dda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dda8:	080262f8 	.word	0x080262f8
 801ddac:	08026370 	.word	0x08026370

0801ddb0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801ddb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ddb2:	b087      	sub	sp, #28
 801ddb4:	af04      	add	r7, sp, #16
 801ddb6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801ddb8:	f7f6 f92e 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801ddbc:	4604      	mov	r4, r0
 801ddbe:	6823      	ldr	r3, [r4, #0]
 801ddc0:	3324      	adds	r3, #36	; 0x24
 801ddc2:	681d      	ldr	r5, [r3, #0]
 801ddc4:	687b      	ldr	r3, [r7, #4]
 801ddc6:	330c      	adds	r3, #12
 801ddc8:	4618      	mov	r0, r3
 801ddca:	f7ef f8cd 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801ddce:	4606      	mov	r6, r0
 801ddd0:	f7f6 f932 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ddd4:	4603      	mov	r3, r0
 801ddd6:	9302      	str	r3, [sp, #8]
 801ddd8:	f240 134f 	movw	r3, #335	; 0x14f
 801dddc:	9301      	str	r3, [sp, #4]
 801ddde:	4b06      	ldr	r3, [pc, #24]	; (801ddf8 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801dde0:	9300      	str	r3, [sp, #0]
 801dde2:	2300      	movs	r3, #0
 801dde4:	4632      	mov	r2, r6
 801dde6:	4905      	ldr	r1, [pc, #20]	; (801ddfc <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801dde8:	4620      	mov	r0, r4
 801ddea:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	699b      	ldr	r3, [r3, #24]
}
 801ddf0:	4618      	mov	r0, r3
 801ddf2:	370c      	adds	r7, #12
 801ddf4:	46bd      	mov	sp, r7
 801ddf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ddf8:	080262f8 	.word	0x080262f8
 801ddfc:	0802637c 	.word	0x0802637c

0801de00 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801de00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de02:	b087      	sub	sp, #28
 801de04:	af04      	add	r7, sp, #16
 801de06:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801de08:	f7f6 f906 	bl	8014018 <_ZN10UtestShell10getCurrentEv>
 801de0c:	4604      	mov	r4, r0
 801de0e:	6823      	ldr	r3, [r4, #0]
 801de10:	3324      	adds	r3, #36	; 0x24
 801de12:	681d      	ldr	r5, [r3, #0]
 801de14:	687b      	ldr	r3, [r7, #4]
 801de16:	330c      	adds	r3, #12
 801de18:	4618      	mov	r0, r3
 801de1a:	f7ef f8a5 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801de1e:	4606      	mov	r6, r0
 801de20:	f7f6 f90a 	bl	8014038 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801de24:	4603      	mov	r3, r0
 801de26:	9302      	str	r3, [sp, #8]
 801de28:	f240 1355 	movw	r3, #341	; 0x155
 801de2c:	9301      	str	r3, [sp, #4]
 801de2e:	4b06      	ldr	r3, [pc, #24]	; (801de48 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801de30:	9300      	str	r3, [sp, #0]
 801de32:	2300      	movs	r3, #0
 801de34:	4632      	mov	r2, r6
 801de36:	4905      	ldr	r1, [pc, #20]	; (801de4c <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801de38:	4620      	mov	r0, r4
 801de3a:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	699b      	ldr	r3, [r3, #24]
}
 801de40:	4618      	mov	r0, r3
 801de42:	370c      	adds	r7, #12
 801de44:	46bd      	mov	sp, r7
 801de46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de48:	080262f8 	.word	0x080262f8
 801de4c:	08026394 	.word	0x08026394

0801de50 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801de50:	b480      	push	{r7}
 801de52:	b083      	sub	sp, #12
 801de54:	af00      	add	r7, sp, #0
 801de56:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	699b      	ldr	r3, [r3, #24]
}
 801de5c:	4618      	mov	r0, r3
 801de5e:	370c      	adds	r7, #12
 801de60:	46bd      	mov	sp, r7
 801de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de66:	4770      	bx	lr

0801de68 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801de68:	b480      	push	{r7}
 801de6a:	b083      	sub	sp, #12
 801de6c:	af00      	add	r7, sp, #0
 801de6e:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	699b      	ldr	r3, [r3, #24]
}
 801de74:	4618      	mov	r0, r3
 801de76:	370c      	adds	r7, #12
 801de78:	46bd      	mov	sp, r7
 801de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de7e:	4770      	bx	lr

0801de80 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801de80:	b480      	push	{r7}
 801de82:	b083      	sub	sp, #12
 801de84:	af00      	add	r7, sp, #0
 801de86:	6078      	str	r0, [r7, #4]
    return size_;
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801de8c:	4618      	mov	r0, r3
 801de8e:	370c      	adds	r7, #12
 801de90:	46bd      	mov	sp, r7
 801de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de96:	4770      	bx	lr

0801de98 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801de98:	b480      	push	{r7}
 801de9a:	b083      	sub	sp, #12
 801de9c:	af00      	add	r7, sp, #0
 801de9e:	6078      	str	r0, [r7, #4]
    return comparator_;
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801dea4:	4618      	mov	r0, r3
 801dea6:	370c      	adds	r7, #12
 801dea8:	46bd      	mov	sp, r7
 801deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deae:	4770      	bx	lr

0801deb0 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801deb0:	b480      	push	{r7}
 801deb2:	b083      	sub	sp, #12
 801deb4:	af00      	add	r7, sp, #0
 801deb6:	6078      	str	r0, [r7, #4]
    return copier_;
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801debc:	4618      	mov	r0, r3
 801debe:	370c      	adds	r7, #12
 801dec0:	46bd      	mov	sp, r7
 801dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dec6:	4770      	bx	lr

0801dec8 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801dec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801deca:	b0cd      	sub	sp, #308	; 0x134
 801decc:	af00      	add	r7, sp, #0
 801dece:	1d3b      	adds	r3, r7, #4
 801ded0:	6018      	str	r0, [r3, #0]
 801ded2:	463b      	mov	r3, r7
 801ded4:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801ded6:	2500      	movs	r5, #0
 801ded8:	1d3b      	adds	r3, r7, #4
 801deda:	681b      	ldr	r3, [r3, #0]
 801dedc:	f103 040c 	add.w	r4, r3, #12
 801dee0:	f107 0308 	add.w	r3, r7, #8
 801dee4:	49bb      	ldr	r1, [pc, #748]	; (801e1d4 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801dee6:	4618      	mov	r0, r3
 801dee8:	f7ee fcb3 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801deec:	2601      	movs	r6, #1
 801deee:	f107 0308 	add.w	r3, r7, #8
 801def2:	4619      	mov	r1, r3
 801def4:	4620      	mov	r0, r4
 801def6:	f7ef f870 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801defa:	4603      	mov	r3, r0
 801defc:	2b00      	cmp	r3, #0
 801defe:	d015      	beq.n	801df2c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801df00:	463b      	mov	r3, r7
 801df02:	681b      	ldr	r3, [r3, #0]
 801df04:	f103 040c 	add.w	r4, r3, #12
 801df08:	f107 0310 	add.w	r3, r7, #16
 801df0c:	49b2      	ldr	r1, [pc, #712]	; (801e1d8 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801df0e:	4618      	mov	r0, r3
 801df10:	f7ee fc9f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801df14:	2501      	movs	r5, #1
 801df16:	f107 0310 	add.w	r3, r7, #16
 801df1a:	4619      	mov	r1, r3
 801df1c:	4620      	mov	r0, r4
 801df1e:	f7ef f85c 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801df22:	4603      	mov	r3, r0
 801df24:	2b00      	cmp	r3, #0
 801df26:	d001      	beq.n	801df2c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801df28:	2401      	movs	r4, #1
 801df2a:	e000      	b.n	801df2e <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801df2c:	2400      	movs	r4, #0
 801df2e:	2d00      	cmp	r5, #0
 801df30:	d004      	beq.n	801df3c <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801df32:	f107 0310 	add.w	r3, r7, #16
 801df36:	4618      	mov	r0, r3
 801df38:	f7ef f843 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801df3c:	2e00      	cmp	r6, #0
 801df3e:	d004      	beq.n	801df4a <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801df40:	f107 0308 	add.w	r3, r7, #8
 801df44:	4618      	mov	r0, r3
 801df46:	f7ef f83c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801df4a:	2c00      	cmp	r4, #0
 801df4c:	d00c      	beq.n	801df68 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801df4e:	1d3b      	adds	r3, r7, #4
 801df50:	681b      	ldr	r3, [r3, #0]
 801df52:	699a      	ldr	r2, [r3, #24]
 801df54:	463b      	mov	r3, r7
 801df56:	681b      	ldr	r3, [r3, #0]
 801df58:	699b      	ldr	r3, [r3, #24]
 801df5a:	429a      	cmp	r2, r3
 801df5c:	bf0c      	ite	eq
 801df5e:	2301      	moveq	r3, #1
 801df60:	2300      	movne	r3, #0
 801df62:	b2dc      	uxtb	r4, r3
 801df64:	f000 bd60 	b.w	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801df68:	2500      	movs	r5, #0
 801df6a:	1d3b      	adds	r3, r7, #4
 801df6c:	681b      	ldr	r3, [r3, #0]
 801df6e:	f103 040c 	add.w	r4, r3, #12
 801df72:	f107 0318 	add.w	r3, r7, #24
 801df76:	4998      	ldr	r1, [pc, #608]	; (801e1d8 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801df78:	4618      	mov	r0, r3
 801df7a:	f7ee fc6a 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801df7e:	2601      	movs	r6, #1
 801df80:	f107 0318 	add.w	r3, r7, #24
 801df84:	4619      	mov	r1, r3
 801df86:	4620      	mov	r0, r4
 801df88:	f7ef f827 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801df8c:	4603      	mov	r3, r0
 801df8e:	2b00      	cmp	r3, #0
 801df90:	d015      	beq.n	801dfbe <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801df92:	463b      	mov	r3, r7
 801df94:	681b      	ldr	r3, [r3, #0]
 801df96:	f103 040c 	add.w	r4, r3, #12
 801df9a:	f107 0320 	add.w	r3, r7, #32
 801df9e:	498d      	ldr	r1, [pc, #564]	; (801e1d4 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801dfa0:	4618      	mov	r0, r3
 801dfa2:	f7ee fc56 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801dfa6:	2501      	movs	r5, #1
 801dfa8:	f107 0320 	add.w	r3, r7, #32
 801dfac:	4619      	mov	r1, r3
 801dfae:	4620      	mov	r0, r4
 801dfb0:	f7ef f813 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801dfb4:	4603      	mov	r3, r0
 801dfb6:	2b00      	cmp	r3, #0
 801dfb8:	d001      	beq.n	801dfbe <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801dfba:	2401      	movs	r4, #1
 801dfbc:	e000      	b.n	801dfc0 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801dfbe:	2400      	movs	r4, #0
 801dfc0:	2d00      	cmp	r5, #0
 801dfc2:	d004      	beq.n	801dfce <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801dfc4:	f107 0320 	add.w	r3, r7, #32
 801dfc8:	4618      	mov	r0, r3
 801dfca:	f7ee fffa 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801dfce:	2e00      	cmp	r6, #0
 801dfd0:	d004      	beq.n	801dfdc <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801dfd2:	f107 0318 	add.w	r3, r7, #24
 801dfd6:	4618      	mov	r0, r3
 801dfd8:	f7ee fff3 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801dfdc:	2c00      	cmp	r4, #0
 801dfde:	d00c      	beq.n	801dffa <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801dfe0:	1d3b      	adds	r3, r7, #4
 801dfe2:	681b      	ldr	r3, [r3, #0]
 801dfe4:	699a      	ldr	r2, [r3, #24]
 801dfe6:	463b      	mov	r3, r7
 801dfe8:	681b      	ldr	r3, [r3, #0]
 801dfea:	699b      	ldr	r3, [r3, #24]
 801dfec:	429a      	cmp	r2, r3
 801dfee:	bf0c      	ite	eq
 801dff0:	2301      	moveq	r3, #1
 801dff2:	2300      	movne	r3, #0
 801dff4:	b2dc      	uxtb	r4, r3
 801dff6:	f000 bd17 	b.w	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801dffa:	2500      	movs	r5, #0
 801dffc:	1d3b      	adds	r3, r7, #4
 801dffe:	681b      	ldr	r3, [r3, #0]
 801e000:	f103 040c 	add.w	r4, r3, #12
 801e004:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e008:	4974      	ldr	r1, [pc, #464]	; (801e1dc <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801e00a:	4618      	mov	r0, r3
 801e00c:	f7ee fc21 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e010:	2601      	movs	r6, #1
 801e012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e016:	4619      	mov	r1, r3
 801e018:	4620      	mov	r0, r4
 801e01a:	f7ee ffde 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e01e:	4603      	mov	r3, r0
 801e020:	2b00      	cmp	r3, #0
 801e022:	d015      	beq.n	801e050 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801e024:	463b      	mov	r3, r7
 801e026:	681b      	ldr	r3, [r3, #0]
 801e028:	f103 040c 	add.w	r4, r3, #12
 801e02c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e030:	4969      	ldr	r1, [pc, #420]	; (801e1d8 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e032:	4618      	mov	r0, r3
 801e034:	f7ee fc0d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e038:	2501      	movs	r5, #1
 801e03a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e03e:	4619      	mov	r1, r3
 801e040:	4620      	mov	r0, r4
 801e042:	f7ee ffca 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e046:	4603      	mov	r3, r0
 801e048:	2b00      	cmp	r3, #0
 801e04a:	d001      	beq.n	801e050 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801e04c:	2401      	movs	r4, #1
 801e04e:	e000      	b.n	801e052 <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801e050:	2400      	movs	r4, #0
 801e052:	2d00      	cmp	r5, #0
 801e054:	d004      	beq.n	801e060 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801e056:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e05a:	4618      	mov	r0, r3
 801e05c:	f7ee ffb1 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e060:	2e00      	cmp	r6, #0
 801e062:	d004      	beq.n	801e06e <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801e064:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e068:	4618      	mov	r0, r3
 801e06a:	f7ee ffaa 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e06e:	2c00      	cmp	r4, #0
 801e070:	d012      	beq.n	801e098 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801e072:	463b      	mov	r3, r7
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	699b      	ldr	r3, [r3, #24]
 801e078:	2b00      	cmp	r3, #0
 801e07a:	db0a      	blt.n	801e092 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801e07c:	1d3b      	adds	r3, r7, #4
 801e07e:	681b      	ldr	r3, [r3, #0]
 801e080:	699b      	ldr	r3, [r3, #24]
 801e082:	463a      	mov	r2, r7
 801e084:	6812      	ldr	r2, [r2, #0]
 801e086:	6992      	ldr	r2, [r2, #24]
 801e088:	4293      	cmp	r3, r2
 801e08a:	d102      	bne.n	801e092 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801e08c:	2401      	movs	r4, #1
 801e08e:	f000 bccb 	b.w	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e092:	2400      	movs	r4, #0
 801e094:	f000 bcc8 	b.w	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801e098:	2500      	movs	r5, #0
 801e09a:	1d3b      	adds	r3, r7, #4
 801e09c:	681b      	ldr	r3, [r3, #0]
 801e09e:	f103 040c 	add.w	r4, r3, #12
 801e0a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e0a6:	494c      	ldr	r1, [pc, #304]	; (801e1d8 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e0a8:	4618      	mov	r0, r3
 801e0aa:	f7ee fbd2 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e0ae:	2601      	movs	r6, #1
 801e0b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e0b4:	4619      	mov	r1, r3
 801e0b6:	4620      	mov	r0, r4
 801e0b8:	f7ee ff8f 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e0bc:	4603      	mov	r3, r0
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	d015      	beq.n	801e0ee <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801e0c2:	463b      	mov	r3, r7
 801e0c4:	681b      	ldr	r3, [r3, #0]
 801e0c6:	f103 040c 	add.w	r4, r3, #12
 801e0ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e0ce:	4943      	ldr	r1, [pc, #268]	; (801e1dc <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801e0d0:	4618      	mov	r0, r3
 801e0d2:	f7ee fbbe 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e0d6:	2501      	movs	r5, #1
 801e0d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e0dc:	4619      	mov	r1, r3
 801e0de:	4620      	mov	r0, r4
 801e0e0:	f7ee ff7b 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e0e4:	4603      	mov	r3, r0
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d001      	beq.n	801e0ee <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801e0ea:	2401      	movs	r4, #1
 801e0ec:	e000      	b.n	801e0f0 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801e0ee:	2400      	movs	r4, #0
 801e0f0:	2d00      	cmp	r5, #0
 801e0f2:	d004      	beq.n	801e0fe <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801e0f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e0f8:	4618      	mov	r0, r3
 801e0fa:	f7ee ff62 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e0fe:	2e00      	cmp	r6, #0
 801e100:	d004      	beq.n	801e10c <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801e102:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e106:	4618      	mov	r0, r3
 801e108:	f7ee ff5b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e10c:	2c00      	cmp	r4, #0
 801e10e:	d012      	beq.n	801e136 <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801e110:	1d3b      	adds	r3, r7, #4
 801e112:	681b      	ldr	r3, [r3, #0]
 801e114:	699b      	ldr	r3, [r3, #24]
 801e116:	2b00      	cmp	r3, #0
 801e118:	db0a      	blt.n	801e130 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801e11a:	1d3b      	adds	r3, r7, #4
 801e11c:	681b      	ldr	r3, [r3, #0]
 801e11e:	699b      	ldr	r3, [r3, #24]
 801e120:	463a      	mov	r2, r7
 801e122:	6812      	ldr	r2, [r2, #0]
 801e124:	6992      	ldr	r2, [r2, #24]
 801e126:	4293      	cmp	r3, r2
 801e128:	d102      	bne.n	801e130 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801e12a:	2401      	movs	r4, #1
 801e12c:	f000 bc7c 	b.w	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e130:	2400      	movs	r4, #0
 801e132:	f000 bc79 	b.w	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801e136:	2500      	movs	r5, #0
 801e138:	1d3b      	adds	r3, r7, #4
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	f103 040c 	add.w	r4, r3, #12
 801e140:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e144:	4926      	ldr	r1, [pc, #152]	; (801e1e0 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801e146:	4618      	mov	r0, r3
 801e148:	f7ee fb83 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e14c:	2601      	movs	r6, #1
 801e14e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e152:	4619      	mov	r1, r3
 801e154:	4620      	mov	r0, r4
 801e156:	f7ee ff40 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e15a:	4603      	mov	r3, r0
 801e15c:	2b00      	cmp	r3, #0
 801e15e:	d015      	beq.n	801e18c <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801e160:	463b      	mov	r3, r7
 801e162:	681b      	ldr	r3, [r3, #0]
 801e164:	f103 040c 	add.w	r4, r3, #12
 801e168:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e16c:	491a      	ldr	r1, [pc, #104]	; (801e1d8 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e16e:	4618      	mov	r0, r3
 801e170:	f7ee fb6f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e174:	2501      	movs	r5, #1
 801e176:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e17a:	4619      	mov	r1, r3
 801e17c:	4620      	mov	r0, r4
 801e17e:	f7ee ff2c 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e182:	4603      	mov	r3, r0
 801e184:	2b00      	cmp	r3, #0
 801e186:	d001      	beq.n	801e18c <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801e188:	2401      	movs	r4, #1
 801e18a:	e000      	b.n	801e18e <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801e18c:	2400      	movs	r4, #0
 801e18e:	2d00      	cmp	r5, #0
 801e190:	d004      	beq.n	801e19c <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801e192:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e196:	4618      	mov	r0, r3
 801e198:	f7ee ff13 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e19c:	2e00      	cmp	r6, #0
 801e19e:	d004      	beq.n	801e1aa <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801e1a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e1a4:	4618      	mov	r0, r3
 801e1a6:	f7ee ff0c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e1aa:	2c00      	cmp	r4, #0
 801e1ac:	d01a      	beq.n	801e1e4 <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801e1ae:	463b      	mov	r3, r7
 801e1b0:	681b      	ldr	r3, [r3, #0]
 801e1b2:	699b      	ldr	r3, [r3, #24]
 801e1b4:	2b00      	cmp	r3, #0
 801e1b6:	db0a      	blt.n	801e1ce <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801e1b8:	1d3b      	adds	r3, r7, #4
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	699b      	ldr	r3, [r3, #24]
 801e1be:	463a      	mov	r2, r7
 801e1c0:	6812      	ldr	r2, [r2, #0]
 801e1c2:	6992      	ldr	r2, [r2, #24]
 801e1c4:	4293      	cmp	r3, r2
 801e1c6:	d102      	bne.n	801e1ce <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801e1c8:	2401      	movs	r4, #1
 801e1ca:	f000 bc2d 	b.w	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e1ce:	2400      	movs	r4, #0
 801e1d0:	f000 bc2a 	b.w	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e1d4:	080262d8 	.word	0x080262d8
 801e1d8:	080262bc 	.word	0x080262bc
 801e1dc:	080262c8 	.word	0x080262c8
 801e1e0:	080262e4 	.word	0x080262e4
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801e1e4:	2500      	movs	r5, #0
 801e1e6:	1d3b      	adds	r3, r7, #4
 801e1e8:	681b      	ldr	r3, [r3, #0]
 801e1ea:	f103 040c 	add.w	r4, r3, #12
 801e1ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e1f2:	49b8      	ldr	r1, [pc, #736]	; (801e4d4 <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801e1f4:	4618      	mov	r0, r3
 801e1f6:	f7ee fb2c 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e1fa:	2601      	movs	r6, #1
 801e1fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e200:	4619      	mov	r1, r3
 801e202:	4620      	mov	r0, r4
 801e204:	f7ee fee9 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e208:	4603      	mov	r3, r0
 801e20a:	2b00      	cmp	r3, #0
 801e20c:	d015      	beq.n	801e23a <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801e20e:	463b      	mov	r3, r7
 801e210:	681b      	ldr	r3, [r3, #0]
 801e212:	f103 040c 	add.w	r4, r3, #12
 801e216:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e21a:	49af      	ldr	r1, [pc, #700]	; (801e4d8 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e21c:	4618      	mov	r0, r3
 801e21e:	f7ee fb18 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e222:	2501      	movs	r5, #1
 801e224:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e228:	4619      	mov	r1, r3
 801e22a:	4620      	mov	r0, r4
 801e22c:	f7ee fed5 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e230:	4603      	mov	r3, r0
 801e232:	2b00      	cmp	r3, #0
 801e234:	d001      	beq.n	801e23a <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801e236:	2401      	movs	r4, #1
 801e238:	e000      	b.n	801e23c <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801e23a:	2400      	movs	r4, #0
 801e23c:	2d00      	cmp	r5, #0
 801e23e:	d004      	beq.n	801e24a <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801e240:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e244:	4618      	mov	r0, r3
 801e246:	f7ee febc 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e24a:	2e00      	cmp	r6, #0
 801e24c:	d004      	beq.n	801e258 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801e24e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e252:	4618      	mov	r0, r3
 801e254:	f7ee feb5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e258:	2c00      	cmp	r4, #0
 801e25a:	d010      	beq.n	801e27e <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801e25c:	1d3b      	adds	r3, r7, #4
 801e25e:	681b      	ldr	r3, [r3, #0]
 801e260:	699b      	ldr	r3, [r3, #24]
 801e262:	2b00      	cmp	r3, #0
 801e264:	db09      	blt.n	801e27a <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801e266:	1d3b      	adds	r3, r7, #4
 801e268:	681b      	ldr	r3, [r3, #0]
 801e26a:	699b      	ldr	r3, [r3, #24]
 801e26c:	463a      	mov	r2, r7
 801e26e:	6812      	ldr	r2, [r2, #0]
 801e270:	6992      	ldr	r2, [r2, #24]
 801e272:	4293      	cmp	r3, r2
 801e274:	d101      	bne.n	801e27a <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801e276:	2401      	movs	r4, #1
 801e278:	e3d6      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e27a:	2400      	movs	r4, #0
 801e27c:	e3d4      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801e27e:	2500      	movs	r5, #0
 801e280:	1d3b      	adds	r3, r7, #4
 801e282:	681b      	ldr	r3, [r3, #0]
 801e284:	f103 040c 	add.w	r4, r3, #12
 801e288:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e28c:	4993      	ldr	r1, [pc, #588]	; (801e4dc <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e28e:	4618      	mov	r0, r3
 801e290:	f7ee fadf 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e294:	2601      	movs	r6, #1
 801e296:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e29a:	4619      	mov	r1, r3
 801e29c:	4620      	mov	r0, r4
 801e29e:	f7ee fe9c 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e2a2:	4603      	mov	r3, r0
 801e2a4:	2b00      	cmp	r3, #0
 801e2a6:	d015      	beq.n	801e2d4 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801e2a8:	463b      	mov	r3, r7
 801e2aa:	681b      	ldr	r3, [r3, #0]
 801e2ac:	f103 040c 	add.w	r4, r3, #12
 801e2b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e2b4:	498a      	ldr	r1, [pc, #552]	; (801e4e0 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801e2b6:	4618      	mov	r0, r3
 801e2b8:	f7ee facb 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e2bc:	2501      	movs	r5, #1
 801e2be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e2c2:	4619      	mov	r1, r3
 801e2c4:	4620      	mov	r0, r4
 801e2c6:	f7ee fe88 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e2ca:	4603      	mov	r3, r0
 801e2cc:	2b00      	cmp	r3, #0
 801e2ce:	d001      	beq.n	801e2d4 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801e2d0:	2401      	movs	r4, #1
 801e2d2:	e000      	b.n	801e2d6 <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801e2d4:	2400      	movs	r4, #0
 801e2d6:	2d00      	cmp	r5, #0
 801e2d8:	d004      	beq.n	801e2e4 <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801e2da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e2de:	4618      	mov	r0, r3
 801e2e0:	f7ee fe6f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e2e4:	2e00      	cmp	r6, #0
 801e2e6:	d004      	beq.n	801e2f2 <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801e2e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e2ec:	4618      	mov	r0, r3
 801e2ee:	f7ee fe68 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e2f2:	2c00      	cmp	r4, #0
 801e2f4:	d010      	beq.n	801e318 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801e2f6:	463b      	mov	r3, r7
 801e2f8:	681b      	ldr	r3, [r3, #0]
 801e2fa:	699b      	ldr	r3, [r3, #24]
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	db09      	blt.n	801e314 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801e300:	1d3b      	adds	r3, r7, #4
 801e302:	681b      	ldr	r3, [r3, #0]
 801e304:	699b      	ldr	r3, [r3, #24]
 801e306:	463a      	mov	r2, r7
 801e308:	6812      	ldr	r2, [r2, #0]
 801e30a:	6992      	ldr	r2, [r2, #24]
 801e30c:	4293      	cmp	r3, r2
 801e30e:	d101      	bne.n	801e314 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801e310:	2401      	movs	r4, #1
 801e312:	e389      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e314:	2400      	movs	r4, #0
 801e316:	e387      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801e318:	2500      	movs	r5, #0
 801e31a:	1d3b      	adds	r3, r7, #4
 801e31c:	681b      	ldr	r3, [r3, #0]
 801e31e:	f103 040c 	add.w	r4, r3, #12
 801e322:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e326:	496e      	ldr	r1, [pc, #440]	; (801e4e0 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801e328:	4618      	mov	r0, r3
 801e32a:	f7ee fa92 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e32e:	2601      	movs	r6, #1
 801e330:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e334:	4619      	mov	r1, r3
 801e336:	4620      	mov	r0, r4
 801e338:	f7ee fe4f 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e33c:	4603      	mov	r3, r0
 801e33e:	2b00      	cmp	r3, #0
 801e340:	d015      	beq.n	801e36e <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801e342:	463b      	mov	r3, r7
 801e344:	681b      	ldr	r3, [r3, #0]
 801e346:	f103 040c 	add.w	r4, r3, #12
 801e34a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e34e:	4963      	ldr	r1, [pc, #396]	; (801e4dc <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e350:	4618      	mov	r0, r3
 801e352:	f7ee fa7e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e356:	2501      	movs	r5, #1
 801e358:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e35c:	4619      	mov	r1, r3
 801e35e:	4620      	mov	r0, r4
 801e360:	f7ee fe3b 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e364:	4603      	mov	r3, r0
 801e366:	2b00      	cmp	r3, #0
 801e368:	d001      	beq.n	801e36e <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801e36a:	2401      	movs	r4, #1
 801e36c:	e000      	b.n	801e370 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801e36e:	2400      	movs	r4, #0
 801e370:	2d00      	cmp	r5, #0
 801e372:	d004      	beq.n	801e37e <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801e374:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e378:	4618      	mov	r0, r3
 801e37a:	f7ee fe22 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e37e:	2e00      	cmp	r6, #0
 801e380:	d004      	beq.n	801e38c <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801e382:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e386:	4618      	mov	r0, r3
 801e388:	f7ee fe1b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e38c:	2c00      	cmp	r4, #0
 801e38e:	d010      	beq.n	801e3b2 <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801e390:	1d3b      	adds	r3, r7, #4
 801e392:	681b      	ldr	r3, [r3, #0]
 801e394:	699b      	ldr	r3, [r3, #24]
 801e396:	2b00      	cmp	r3, #0
 801e398:	db09      	blt.n	801e3ae <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801e39a:	1d3b      	adds	r3, r7, #4
 801e39c:	681b      	ldr	r3, [r3, #0]
 801e39e:	699b      	ldr	r3, [r3, #24]
 801e3a0:	463a      	mov	r2, r7
 801e3a2:	6812      	ldr	r2, [r2, #0]
 801e3a4:	6992      	ldr	r2, [r2, #24]
 801e3a6:	4293      	cmp	r3, r2
 801e3a8:	d101      	bne.n	801e3ae <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801e3aa:	2401      	movs	r4, #1
 801e3ac:	e33c      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e3ae:	2400      	movs	r4, #0
 801e3b0:	e33a      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801e3b2:	2500      	movs	r5, #0
 801e3b4:	1d3b      	adds	r3, r7, #4
 801e3b6:	681b      	ldr	r3, [r3, #0]
 801e3b8:	f103 040c 	add.w	r4, r3, #12
 801e3bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e3c0:	4946      	ldr	r1, [pc, #280]	; (801e4dc <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e3c2:	4618      	mov	r0, r3
 801e3c4:	f7ee fa45 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e3c8:	2601      	movs	r6, #1
 801e3ca:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e3ce:	4619      	mov	r1, r3
 801e3d0:	4620      	mov	r0, r4
 801e3d2:	f7ee fe02 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e3d6:	4603      	mov	r3, r0
 801e3d8:	2b00      	cmp	r3, #0
 801e3da:	d015      	beq.n	801e408 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801e3dc:	463b      	mov	r3, r7
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	f103 040c 	add.w	r4, r3, #12
 801e3e4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e3e8:	493b      	ldr	r1, [pc, #236]	; (801e4d8 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e3ea:	4618      	mov	r0, r3
 801e3ec:	f7ee fa31 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e3f0:	2501      	movs	r5, #1
 801e3f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e3f6:	4619      	mov	r1, r3
 801e3f8:	4620      	mov	r0, r4
 801e3fa:	f7ee fdee 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e3fe:	4603      	mov	r3, r0
 801e400:	2b00      	cmp	r3, #0
 801e402:	d001      	beq.n	801e408 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801e404:	2401      	movs	r4, #1
 801e406:	e000      	b.n	801e40a <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801e408:	2400      	movs	r4, #0
 801e40a:	2d00      	cmp	r5, #0
 801e40c:	d004      	beq.n	801e418 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801e40e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e412:	4618      	mov	r0, r3
 801e414:	f7ee fdd5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e418:	2e00      	cmp	r6, #0
 801e41a:	d004      	beq.n	801e426 <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801e41c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e420:	4618      	mov	r0, r3
 801e422:	f7ee fdce 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e426:	2c00      	cmp	r4, #0
 801e428:	d00b      	beq.n	801e442 <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801e42a:	1d3b      	adds	r3, r7, #4
 801e42c:	681b      	ldr	r3, [r3, #0]
 801e42e:	699a      	ldr	r2, [r3, #24]
 801e430:	463b      	mov	r3, r7
 801e432:	681b      	ldr	r3, [r3, #0]
 801e434:	699b      	ldr	r3, [r3, #24]
 801e436:	429a      	cmp	r2, r3
 801e438:	bf0c      	ite	eq
 801e43a:	2301      	moveq	r3, #1
 801e43c:	2300      	movne	r3, #0
 801e43e:	b2dc      	uxtb	r4, r3
 801e440:	e2f2      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801e442:	2500      	movs	r5, #0
 801e444:	1d3b      	adds	r3, r7, #4
 801e446:	681b      	ldr	r3, [r3, #0]
 801e448:	f103 040c 	add.w	r4, r3, #12
 801e44c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e450:	4921      	ldr	r1, [pc, #132]	; (801e4d8 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e452:	4618      	mov	r0, r3
 801e454:	f7ee f9fd 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e458:	2601      	movs	r6, #1
 801e45a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e45e:	4619      	mov	r1, r3
 801e460:	4620      	mov	r0, r4
 801e462:	f7ee fdba 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e466:	4603      	mov	r3, r0
 801e468:	2b00      	cmp	r3, #0
 801e46a:	d015      	beq.n	801e498 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801e46c:	463b      	mov	r3, r7
 801e46e:	681b      	ldr	r3, [r3, #0]
 801e470:	f103 040c 	add.w	r4, r3, #12
 801e474:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e478:	4918      	ldr	r1, [pc, #96]	; (801e4dc <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e47a:	4618      	mov	r0, r3
 801e47c:	f7ee f9e9 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e480:	2501      	movs	r5, #1
 801e482:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e486:	4619      	mov	r1, r3
 801e488:	4620      	mov	r0, r4
 801e48a:	f7ee fda6 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e48e:	4603      	mov	r3, r0
 801e490:	2b00      	cmp	r3, #0
 801e492:	d001      	beq.n	801e498 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801e494:	2401      	movs	r4, #1
 801e496:	e000      	b.n	801e49a <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801e498:	2400      	movs	r4, #0
 801e49a:	2d00      	cmp	r5, #0
 801e49c:	d004      	beq.n	801e4a8 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801e49e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e4a2:	4618      	mov	r0, r3
 801e4a4:	f7ee fd8d 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e4a8:	2e00      	cmp	r6, #0
 801e4aa:	d004      	beq.n	801e4b6 <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801e4ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e4b0:	4618      	mov	r0, r3
 801e4b2:	f7ee fd86 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e4b6:	2c00      	cmp	r4, #0
 801e4b8:	d014      	beq.n	801e4e4 <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801e4ba:	1d3b      	adds	r3, r7, #4
 801e4bc:	681b      	ldr	r3, [r3, #0]
 801e4be:	699a      	ldr	r2, [r3, #24]
 801e4c0:	463b      	mov	r3, r7
 801e4c2:	681b      	ldr	r3, [r3, #0]
 801e4c4:	699b      	ldr	r3, [r3, #24]
 801e4c6:	429a      	cmp	r2, r3
 801e4c8:	bf0c      	ite	eq
 801e4ca:	2301      	moveq	r3, #1
 801e4cc:	2300      	movne	r3, #0
 801e4ce:	b2dc      	uxtb	r4, r3
 801e4d0:	e2aa      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e4d2:	bf00      	nop
 801e4d4:	080262bc 	.word	0x080262bc
 801e4d8:	080262e4 	.word	0x080262e4
 801e4dc:	080262c8 	.word	0x080262c8
 801e4e0:	080262d8 	.word	0x080262d8
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801e4e4:	2500      	movs	r5, #0
 801e4e6:	1d3b      	adds	r3, r7, #4
 801e4e8:	681b      	ldr	r3, [r3, #0]
 801e4ea:	f103 040c 	add.w	r4, r3, #12
 801e4ee:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e4f2:	49ae      	ldr	r1, [pc, #696]	; (801e7ac <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801e4f4:	4618      	mov	r0, r3
 801e4f6:	f7ee f9ac 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e4fa:	2601      	movs	r6, #1
 801e4fc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e500:	4619      	mov	r1, r3
 801e502:	4620      	mov	r0, r4
 801e504:	f7ee fd69 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e508:	4603      	mov	r3, r0
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	d015      	beq.n	801e53a <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801e50e:	463b      	mov	r3, r7
 801e510:	681b      	ldr	r3, [r3, #0]
 801e512:	f103 040c 	add.w	r4, r3, #12
 801e516:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e51a:	49a5      	ldr	r1, [pc, #660]	; (801e7b0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801e51c:	4618      	mov	r0, r3
 801e51e:	f7ee f998 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e522:	2501      	movs	r5, #1
 801e524:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e528:	4619      	mov	r1, r3
 801e52a:	4620      	mov	r0, r4
 801e52c:	f7ee fd55 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e530:	4603      	mov	r3, r0
 801e532:	2b00      	cmp	r3, #0
 801e534:	d001      	beq.n	801e53a <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801e536:	2401      	movs	r4, #1
 801e538:	e000      	b.n	801e53c <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801e53a:	2400      	movs	r4, #0
 801e53c:	2d00      	cmp	r5, #0
 801e53e:	d004      	beq.n	801e54a <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801e540:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e544:	4618      	mov	r0, r3
 801e546:	f7ee fd3c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e54a:	2e00      	cmp	r6, #0
 801e54c:	d004      	beq.n	801e558 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801e54e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e552:	4618      	mov	r0, r3
 801e554:	f7ee fd35 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e558:	2c00      	cmp	r4, #0
 801e55a:	d010      	beq.n	801e57e <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801e55c:	1d3b      	adds	r3, r7, #4
 801e55e:	681b      	ldr	r3, [r3, #0]
 801e560:	699b      	ldr	r3, [r3, #24]
 801e562:	2b00      	cmp	r3, #0
 801e564:	db09      	blt.n	801e57a <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801e566:	1d3b      	adds	r3, r7, #4
 801e568:	681b      	ldr	r3, [r3, #0]
 801e56a:	699b      	ldr	r3, [r3, #24]
 801e56c:	463a      	mov	r2, r7
 801e56e:	6812      	ldr	r2, [r2, #0]
 801e570:	6992      	ldr	r2, [r2, #24]
 801e572:	4293      	cmp	r3, r2
 801e574:	d101      	bne.n	801e57a <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801e576:	2401      	movs	r4, #1
 801e578:	e256      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e57a:	2400      	movs	r4, #0
 801e57c:	e254      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801e57e:	2500      	movs	r5, #0
 801e580:	1d3b      	adds	r3, r7, #4
 801e582:	681b      	ldr	r3, [r3, #0]
 801e584:	f103 040c 	add.w	r4, r3, #12
 801e588:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e58c:	4988      	ldr	r1, [pc, #544]	; (801e7b0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801e58e:	4618      	mov	r0, r3
 801e590:	f7ee f95f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e594:	2601      	movs	r6, #1
 801e596:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e59a:	4619      	mov	r1, r3
 801e59c:	4620      	mov	r0, r4
 801e59e:	f7ee fd1c 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e5a2:	4603      	mov	r3, r0
 801e5a4:	2b00      	cmp	r3, #0
 801e5a6:	d015      	beq.n	801e5d4 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801e5a8:	463b      	mov	r3, r7
 801e5aa:	681b      	ldr	r3, [r3, #0]
 801e5ac:	f103 040c 	add.w	r4, r3, #12
 801e5b0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e5b4:	497d      	ldr	r1, [pc, #500]	; (801e7ac <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801e5b6:	4618      	mov	r0, r3
 801e5b8:	f7ee f94b 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e5bc:	2501      	movs	r5, #1
 801e5be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e5c2:	4619      	mov	r1, r3
 801e5c4:	4620      	mov	r0, r4
 801e5c6:	f7ee fd08 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e5ca:	4603      	mov	r3, r0
 801e5cc:	2b00      	cmp	r3, #0
 801e5ce:	d001      	beq.n	801e5d4 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801e5d0:	2401      	movs	r4, #1
 801e5d2:	e000      	b.n	801e5d6 <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801e5d4:	2400      	movs	r4, #0
 801e5d6:	2d00      	cmp	r5, #0
 801e5d8:	d004      	beq.n	801e5e4 <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801e5da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e5de:	4618      	mov	r0, r3
 801e5e0:	f7ee fcef 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e5e4:	2e00      	cmp	r6, #0
 801e5e6:	d004      	beq.n	801e5f2 <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801e5e8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e5ec:	4618      	mov	r0, r3
 801e5ee:	f7ee fce8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e5f2:	2c00      	cmp	r4, #0
 801e5f4:	d010      	beq.n	801e618 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801e5f6:	463b      	mov	r3, r7
 801e5f8:	681b      	ldr	r3, [r3, #0]
 801e5fa:	699b      	ldr	r3, [r3, #24]
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	db09      	blt.n	801e614 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801e600:	1d3b      	adds	r3, r7, #4
 801e602:	681b      	ldr	r3, [r3, #0]
 801e604:	699b      	ldr	r3, [r3, #24]
 801e606:	463a      	mov	r2, r7
 801e608:	6812      	ldr	r2, [r2, #0]
 801e60a:	6992      	ldr	r2, [r2, #24]
 801e60c:	4293      	cmp	r3, r2
 801e60e:	d101      	bne.n	801e614 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801e610:	2401      	movs	r4, #1
 801e612:	e209      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e614:	2400      	movs	r4, #0
 801e616:	e207      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801e618:	1d3b      	adds	r3, r7, #4
 801e61a:	681b      	ldr	r3, [r3, #0]
 801e61c:	f103 020c 	add.w	r2, r3, #12
 801e620:	463b      	mov	r3, r7
 801e622:	681b      	ldr	r3, [r3, #0]
 801e624:	330c      	adds	r3, #12
 801e626:	4619      	mov	r1, r3
 801e628:	4610      	mov	r0, r2
 801e62a:	f7ee fd1b 	bl	800d064 <_ZneRK12SimpleStringS1_>
 801e62e:	4603      	mov	r3, r0
 801e630:	2b00      	cmp	r3, #0
 801e632:	d001      	beq.n	801e638 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801e634:	2400      	movs	r4, #0
 801e636:	e1f7      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801e638:	1d3b      	adds	r3, r7, #4
 801e63a:	681b      	ldr	r3, [r3, #0]
 801e63c:	f103 040c 	add.w	r4, r3, #12
 801e640:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e644:	495b      	ldr	r1, [pc, #364]	; (801e7b4 <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801e646:	4618      	mov	r0, r3
 801e648:	f7ee f903 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e64c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e650:	4619      	mov	r1, r3
 801e652:	4620      	mov	r0, r4
 801e654:	f7ee fcc1 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e658:	4603      	mov	r3, r0
 801e65a:	461c      	mov	r4, r3
 801e65c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e660:	4618      	mov	r0, r3
 801e662:	f7ee fcae 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e666:	2c00      	cmp	r4, #0
 801e668:	d00b      	beq.n	801e682 <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801e66a:	1d3b      	adds	r3, r7, #4
 801e66c:	681b      	ldr	r3, [r3, #0]
 801e66e:	7e1a      	ldrb	r2, [r3, #24]
 801e670:	463b      	mov	r3, r7
 801e672:	681b      	ldr	r3, [r3, #0]
 801e674:	7e1b      	ldrb	r3, [r3, #24]
 801e676:	429a      	cmp	r2, r3
 801e678:	bf0c      	ite	eq
 801e67a:	2301      	moveq	r3, #1
 801e67c:	2300      	movne	r3, #0
 801e67e:	b2dc      	uxtb	r4, r3
 801e680:	e1d2      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801e682:	1d3b      	adds	r3, r7, #4
 801e684:	681b      	ldr	r3, [r3, #0]
 801e686:	f103 040c 	add.w	r4, r3, #12
 801e68a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801e68e:	494a      	ldr	r1, [pc, #296]	; (801e7b8 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801e690:	4618      	mov	r0, r3
 801e692:	f7ee f8de 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e696:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801e69a:	4619      	mov	r1, r3
 801e69c:	4620      	mov	r0, r4
 801e69e:	f7ee fc9c 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e6a2:	4603      	mov	r3, r0
 801e6a4:	461c      	mov	r4, r3
 801e6a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801e6aa:	4618      	mov	r0, r3
 801e6ac:	f7ee fc89 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e6b0:	2c00      	cmp	r4, #0
 801e6b2:	d00b      	beq.n	801e6cc <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801e6b4:	1d3b      	adds	r3, r7, #4
 801e6b6:	681b      	ldr	r3, [r3, #0]
 801e6b8:	699a      	ldr	r2, [r3, #24]
 801e6ba:	463b      	mov	r3, r7
 801e6bc:	681b      	ldr	r3, [r3, #0]
 801e6be:	699b      	ldr	r3, [r3, #24]
 801e6c0:	429a      	cmp	r2, r3
 801e6c2:	bf0c      	ite	eq
 801e6c4:	2301      	moveq	r3, #1
 801e6c6:	2300      	movne	r3, #0
 801e6c8:	b2dc      	uxtb	r4, r3
 801e6ca:	e1ad      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801e6cc:	1d3b      	adds	r3, r7, #4
 801e6ce:	681b      	ldr	r3, [r3, #0]
 801e6d0:	f103 040c 	add.w	r4, r3, #12
 801e6d4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801e6d8:	4938      	ldr	r1, [pc, #224]	; (801e7bc <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801e6da:	4618      	mov	r0, r3
 801e6dc:	f7ee f8b9 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e6e0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801e6e4:	4619      	mov	r1, r3
 801e6e6:	4620      	mov	r0, r4
 801e6e8:	f7ee fc77 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e6ec:	4603      	mov	r3, r0
 801e6ee:	461c      	mov	r4, r3
 801e6f0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801e6f4:	4618      	mov	r0, r3
 801e6f6:	f7ee fc64 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e6fa:	2c00      	cmp	r4, #0
 801e6fc:	d00b      	beq.n	801e716 <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801e6fe:	1d3b      	adds	r3, r7, #4
 801e700:	681b      	ldr	r3, [r3, #0]
 801e702:	699a      	ldr	r2, [r3, #24]
 801e704:	463b      	mov	r3, r7
 801e706:	681b      	ldr	r3, [r3, #0]
 801e708:	699b      	ldr	r3, [r3, #24]
 801e70a:	429a      	cmp	r2, r3
 801e70c:	bf0c      	ite	eq
 801e70e:	2301      	moveq	r3, #1
 801e710:	2300      	movne	r3, #0
 801e712:	b2dc      	uxtb	r4, r3
 801e714:	e188      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801e716:	1d3b      	adds	r3, r7, #4
 801e718:	681b      	ldr	r3, [r3, #0]
 801e71a:	f103 040c 	add.w	r4, r3, #12
 801e71e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801e722:	4922      	ldr	r1, [pc, #136]	; (801e7ac <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801e724:	4618      	mov	r0, r3
 801e726:	f7ee f894 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e72a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801e72e:	4619      	mov	r1, r3
 801e730:	4620      	mov	r0, r4
 801e732:	f7ee fc52 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e736:	4603      	mov	r3, r0
 801e738:	461c      	mov	r4, r3
 801e73a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801e73e:	4618      	mov	r0, r3
 801e740:	f7ee fc3f 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e744:	2c00      	cmp	r4, #0
 801e746:	d00b      	beq.n	801e760 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801e748:	1d3b      	adds	r3, r7, #4
 801e74a:	681b      	ldr	r3, [r3, #0]
 801e74c:	699a      	ldr	r2, [r3, #24]
 801e74e:	463b      	mov	r3, r7
 801e750:	681b      	ldr	r3, [r3, #0]
 801e752:	699b      	ldr	r3, [r3, #24]
 801e754:	429a      	cmp	r2, r3
 801e756:	bf0c      	ite	eq
 801e758:	2301      	moveq	r3, #1
 801e75a:	2300      	movne	r3, #0
 801e75c:	b2dc      	uxtb	r4, r3
 801e75e:	e163      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801e760:	1d3b      	adds	r3, r7, #4
 801e762:	681b      	ldr	r3, [r3, #0]
 801e764:	f103 040c 	add.w	r4, r3, #12
 801e768:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801e76c:	4910      	ldr	r1, [pc, #64]	; (801e7b0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801e76e:	4618      	mov	r0, r3
 801e770:	f7ee f86f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e774:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801e778:	4619      	mov	r1, r3
 801e77a:	4620      	mov	r0, r4
 801e77c:	f7ee fc2d 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e780:	4603      	mov	r3, r0
 801e782:	461c      	mov	r4, r3
 801e784:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801e788:	4618      	mov	r0, r3
 801e78a:	f7ee fc1a 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e78e:	2c00      	cmp	r4, #0
 801e790:	d016      	beq.n	801e7c0 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801e792:	1d3b      	adds	r3, r7, #4
 801e794:	681b      	ldr	r3, [r3, #0]
 801e796:	699a      	ldr	r2, [r3, #24]
 801e798:	463b      	mov	r3, r7
 801e79a:	681b      	ldr	r3, [r3, #0]
 801e79c:	699b      	ldr	r3, [r3, #24]
 801e79e:	429a      	cmp	r2, r3
 801e7a0:	bf0c      	ite	eq
 801e7a2:	2301      	moveq	r3, #1
 801e7a4:	2300      	movne	r3, #0
 801e7a6:	b2dc      	uxtb	r4, r3
 801e7a8:	e13e      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e7aa:	bf00      	nop
 801e7ac:	080262d8 	.word	0x080262d8
 801e7b0:	080262e4 	.word	0x080262e4
 801e7b4:	080262c0 	.word	0x080262c0
 801e7b8:	080262bc 	.word	0x080262bc
 801e7bc:	080262c8 	.word	0x080262c8
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801e7c0:	1d3b      	adds	r3, r7, #4
 801e7c2:	681b      	ldr	r3, [r3, #0]
 801e7c4:	f103 040c 	add.w	r4, r3, #12
 801e7c8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801e7cc:	4999      	ldr	r1, [pc, #612]	; (801ea34 <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801e7ce:	4618      	mov	r0, r3
 801e7d0:	f7ee f83f 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e7d4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801e7d8:	4619      	mov	r1, r3
 801e7da:	4620      	mov	r0, r4
 801e7dc:	f7ee fbfd 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e7e0:	4603      	mov	r3, r0
 801e7e2:	461c      	mov	r4, r3
 801e7e4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801e7e8:	4618      	mov	r0, r3
 801e7ea:	f7ee fbea 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e7ee:	2c00      	cmp	r4, #0
 801e7f0:	d026      	beq.n	801e840 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801e7f2:	1d3b      	adds	r3, r7, #4
 801e7f4:	681b      	ldr	r3, [r3, #0]
 801e7f6:	699a      	ldr	r2, [r3, #24]
 801e7f8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e7fc:	4611      	mov	r1, r2
 801e7fe:	4618      	mov	r0, r3
 801e800:	f7ee f827 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e804:	463b      	mov	r3, r7
 801e806:	681b      	ldr	r3, [r3, #0]
 801e808:	699a      	ldr	r2, [r3, #24]
 801e80a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801e80e:	4611      	mov	r1, r2
 801e810:	4618      	mov	r0, r3
 801e812:	f7ee f81e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e816:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801e81a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e81e:	4611      	mov	r1, r2
 801e820:	4618      	mov	r0, r3
 801e822:	f7ee fbda 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e826:	4603      	mov	r3, r0
 801e828:	461c      	mov	r4, r3
 801e82a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801e82e:	4618      	mov	r0, r3
 801e830:	f7ee fbc7 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e834:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e838:	4618      	mov	r0, r3
 801e83a:	f7ee fbc2 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e83e:	e0f3      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801e840:	1d3b      	adds	r3, r7, #4
 801e842:	681b      	ldr	r3, [r3, #0]
 801e844:	f103 040c 	add.w	r4, r3, #12
 801e848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801e84c:	497a      	ldr	r1, [pc, #488]	; (801ea38 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801e84e:	4618      	mov	r0, r3
 801e850:	f7ed ffff 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801e858:	4619      	mov	r1, r3
 801e85a:	4620      	mov	r0, r4
 801e85c:	f7ee fbbd 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e860:	4603      	mov	r3, r0
 801e862:	461c      	mov	r4, r3
 801e864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801e868:	4618      	mov	r0, r3
 801e86a:	f7ee fbaa 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e86e:	2c00      	cmp	r4, #0
 801e870:	d00b      	beq.n	801e88a <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801e872:	1d3b      	adds	r3, r7, #4
 801e874:	681b      	ldr	r3, [r3, #0]
 801e876:	699a      	ldr	r2, [r3, #24]
 801e878:	463b      	mov	r3, r7
 801e87a:	681b      	ldr	r3, [r3, #0]
 801e87c:	699b      	ldr	r3, [r3, #24]
 801e87e:	429a      	cmp	r2, r3
 801e880:	bf0c      	ite	eq
 801e882:	2301      	moveq	r3, #1
 801e884:	2300      	movne	r3, #0
 801e886:	b2dc      	uxtb	r4, r3
 801e888:	e0ce      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801e88a:	1d3b      	adds	r3, r7, #4
 801e88c:	681b      	ldr	r3, [r3, #0]
 801e88e:	f103 040c 	add.w	r4, r3, #12
 801e892:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801e896:	4969      	ldr	r1, [pc, #420]	; (801ea3c <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801e898:	4618      	mov	r0, r3
 801e89a:	f7ed ffda 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e89e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801e8a2:	4619      	mov	r1, r3
 801e8a4:	4620      	mov	r0, r4
 801e8a6:	f7ee fb98 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e8aa:	4603      	mov	r3, r0
 801e8ac:	461c      	mov	r4, r3
 801e8ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801e8b2:	4618      	mov	r0, r3
 801e8b4:	f7ee fb85 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e8b8:	2c00      	cmp	r4, #0
 801e8ba:	d00b      	beq.n	801e8d4 <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801e8bc:	1d3b      	adds	r3, r7, #4
 801e8be:	681b      	ldr	r3, [r3, #0]
 801e8c0:	699a      	ldr	r2, [r3, #24]
 801e8c2:	463b      	mov	r3, r7
 801e8c4:	681b      	ldr	r3, [r3, #0]
 801e8c6:	699b      	ldr	r3, [r3, #24]
 801e8c8:	429a      	cmp	r2, r3
 801e8ca:	bf0c      	ite	eq
 801e8cc:	2301      	moveq	r3, #1
 801e8ce:	2300      	movne	r3, #0
 801e8d0:	b2dc      	uxtb	r4, r3
 801e8d2:	e0a9      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801e8d4:	1d3b      	adds	r3, r7, #4
 801e8d6:	681b      	ldr	r3, [r3, #0]
 801e8d8:	f103 040c 	add.w	r4, r3, #12
 801e8dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e8e0:	4957      	ldr	r1, [pc, #348]	; (801ea40 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801e8e2:	4618      	mov	r0, r3
 801e8e4:	f7ed ffb5 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e8e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e8ec:	4619      	mov	r1, r3
 801e8ee:	4620      	mov	r0, r4
 801e8f0:	f7ee fb73 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e8f4:	4603      	mov	r3, r0
 801e8f6:	461c      	mov	r4, r3
 801e8f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e8fc:	4618      	mov	r0, r3
 801e8fe:	f7ee fb60 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e902:	2c00      	cmp	r4, #0
 801e904:	d00b      	beq.n	801e91e <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801e906:	1d3b      	adds	r3, r7, #4
 801e908:	681b      	ldr	r3, [r3, #0]
 801e90a:	699a      	ldr	r2, [r3, #24]
 801e90c:	463b      	mov	r3, r7
 801e90e:	681b      	ldr	r3, [r3, #0]
 801e910:	699b      	ldr	r3, [r3, #24]
 801e912:	429a      	cmp	r2, r3
 801e914:	bf0c      	ite	eq
 801e916:	2301      	moveq	r3, #1
 801e918:	2300      	movne	r3, #0
 801e91a:	b2dc      	uxtb	r4, r3
 801e91c:	e084      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801e91e:	1d3b      	adds	r3, r7, #4
 801e920:	681b      	ldr	r3, [r3, #0]
 801e922:	f103 040c 	add.w	r4, r3, #12
 801e926:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801e92a:	4946      	ldr	r1, [pc, #280]	; (801ea44 <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801e92c:	4618      	mov	r0, r3
 801e92e:	f7ed ff90 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e932:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801e936:	4619      	mov	r1, r3
 801e938:	4620      	mov	r0, r4
 801e93a:	f7ee fb4e 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e93e:	4603      	mov	r3, r0
 801e940:	461c      	mov	r4, r3
 801e942:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801e946:	4618      	mov	r0, r3
 801e948:	f7ee fb3b 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e94c:	2c00      	cmp	r4, #0
 801e94e:	d01c      	beq.n	801e98a <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801e950:	1d3b      	adds	r3, r7, #4
 801e952:	681b      	ldr	r3, [r3, #0]
 801e954:	ed93 7b06 	vldr	d7, [r3, #24]
 801e958:	463b      	mov	r3, r7
 801e95a:	681b      	ldr	r3, [r3, #0]
 801e95c:	ed93 6b06 	vldr	d6, [r3, #24]
 801e960:	1d3b      	adds	r3, r7, #4
 801e962:	681b      	ldr	r3, [r3, #0]
 801e964:	ed93 5b08 	vldr	d5, [r3, #32]
 801e968:	eeb0 2a45 	vmov.f32	s4, s10
 801e96c:	eef0 2a65 	vmov.f32	s5, s11
 801e970:	eeb0 1a46 	vmov.f32	s2, s12
 801e974:	eef0 1a66 	vmov.f32	s3, s13
 801e978:	eeb0 0a47 	vmov.f32	s0, s14
 801e97c:	eef0 0a67 	vmov.f32	s1, s15
 801e980:	f7f3 fe1a 	bl	80125b8 <_Z13doubles_equalddd>
 801e984:	4603      	mov	r3, r0
 801e986:	461c      	mov	r4, r3
 801e988:	e04e      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801e98a:	1d3b      	adds	r3, r7, #4
 801e98c:	681b      	ldr	r3, [r3, #0]
 801e98e:	f103 040c 	add.w	r4, r3, #12
 801e992:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801e996:	492c      	ldr	r1, [pc, #176]	; (801ea48 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801e998:	4618      	mov	r0, r3
 801e99a:	f7ed ff5a 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801e99e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801e9a2:	4619      	mov	r1, r3
 801e9a4:	4620      	mov	r0, r4
 801e9a6:	f7ee fb18 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801e9aa:	4603      	mov	r3, r0
 801e9ac:	461c      	mov	r4, r3
 801e9ae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801e9b2:	4618      	mov	r0, r3
 801e9b4:	f7ee fb05 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801e9b8:	2c00      	cmp	r4, #0
 801e9ba:	d01c      	beq.n	801e9f6 <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801e9bc:	1d3b      	adds	r3, r7, #4
 801e9be:	681b      	ldr	r3, [r3, #0]
 801e9c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e9c2:	463b      	mov	r3, r7
 801e9c4:	681b      	ldr	r3, [r3, #0]
 801e9c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e9c8:	429a      	cmp	r2, r3
 801e9ca:	d001      	beq.n	801e9d0 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801e9cc:	2400      	movs	r4, #0
 801e9ce:	e02b      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801e9d0:	1d3b      	adds	r3, r7, #4
 801e9d2:	681b      	ldr	r3, [r3, #0]
 801e9d4:	6998      	ldr	r0, [r3, #24]
 801e9d6:	463b      	mov	r3, r7
 801e9d8:	681b      	ldr	r3, [r3, #0]
 801e9da:	6999      	ldr	r1, [r3, #24]
 801e9dc:	1d3b      	adds	r3, r7, #4
 801e9de:	681b      	ldr	r3, [r3, #0]
 801e9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e9e2:	461a      	mov	r2, r3
 801e9e4:	f7ed fe54 	bl	800c690 <_ZN12SimpleString6MemCmpEPKvS1_j>
 801e9e8:	4603      	mov	r3, r0
 801e9ea:	2b00      	cmp	r3, #0
 801e9ec:	bf0c      	ite	eq
 801e9ee:	2301      	moveq	r3, #1
 801e9f0:	2300      	movne	r3, #0
 801e9f2:	b2dc      	uxtb	r4, r3
 801e9f4:	e018      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801e9f6:	1d3b      	adds	r3, r7, #4
 801e9f8:	681b      	ldr	r3, [r3, #0]
 801e9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e9fc:	2b00      	cmp	r3, #0
 801e9fe:	d012      	beq.n	801ea26 <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801ea00:	1d3b      	adds	r3, r7, #4
 801ea02:	681b      	ldr	r3, [r3, #0]
 801ea04:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801ea06:	1d3b      	adds	r3, r7, #4
 801ea08:	681b      	ldr	r3, [r3, #0]
 801ea0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ea0c:	681b      	ldr	r3, [r3, #0]
 801ea0e:	3308      	adds	r3, #8
 801ea10:	681b      	ldr	r3, [r3, #0]
 801ea12:	1d3a      	adds	r2, r7, #4
 801ea14:	6812      	ldr	r2, [r2, #0]
 801ea16:	6991      	ldr	r1, [r2, #24]
 801ea18:	463a      	mov	r2, r7
 801ea1a:	6812      	ldr	r2, [r2, #0]
 801ea1c:	6992      	ldr	r2, [r2, #24]
 801ea1e:	4798      	blx	r3
 801ea20:	4603      	mov	r3, r0
 801ea22:	461c      	mov	r4, r3
 801ea24:	e000      	b.n	801ea28 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801ea26:	2400      	movs	r4, #0
 801ea28:	4623      	mov	r3, r4
}
 801ea2a:	4618      	mov	r0, r3
 801ea2c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801ea30:	46bd      	mov	sp, r7
 801ea32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea34:	08026388 	.word	0x08026388
 801ea38:	08026368 	.word	0x08026368
 801ea3c:	08026370 	.word	0x08026370
 801ea40:	0802637c 	.word	0x0802637c
 801ea44:	08026360 	.word	0x08026360
 801ea48:	08026394 	.word	0x08026394

0801ea4c <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801ea4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea4e:	b087      	sub	sp, #28
 801ea50:	af00      	add	r7, sp, #0
 801ea52:	6078      	str	r0, [r7, #4]
 801ea54:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801ea56:	687b      	ldr	r3, [r7, #4]
 801ea58:	f103 020c 	add.w	r2, r3, #12
 801ea5c:	683b      	ldr	r3, [r7, #0]
 801ea5e:	330c      	adds	r3, #12
 801ea60:	4619      	mov	r1, r3
 801ea62:	4610      	mov	r0, r2
 801ea64:	f7ee fab9 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801ea68:	4603      	mov	r3, r0
 801ea6a:	2b00      	cmp	r3, #0
 801ea6c:	d001      	beq.n	801ea72 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801ea6e:	2301      	movs	r3, #1
 801ea70:	e03c      	b.n	801eaec <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801ea72:	2500      	movs	r5, #0
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	f103 040c 	add.w	r4, r3, #12
 801ea7a:	f107 0308 	add.w	r3, r7, #8
 801ea7e:	491d      	ldr	r1, [pc, #116]	; (801eaf4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801ea80:	4618      	mov	r0, r3
 801ea82:	f7ed fee6 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801ea86:	2601      	movs	r6, #1
 801ea88:	f107 0308 	add.w	r3, r7, #8
 801ea8c:	4619      	mov	r1, r3
 801ea8e:	4620      	mov	r0, r4
 801ea90:	f7ee faa3 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801ea94:	4603      	mov	r3, r0
 801ea96:	2b00      	cmp	r3, #0
 801ea98:	d014      	beq.n	801eac4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801ea9a:	683b      	ldr	r3, [r7, #0]
 801ea9c:	f103 040c 	add.w	r4, r3, #12
 801eaa0:	f107 0310 	add.w	r3, r7, #16
 801eaa4:	4914      	ldr	r1, [pc, #80]	; (801eaf8 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801eaa6:	4618      	mov	r0, r3
 801eaa8:	f7ed fed3 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801eaac:	2501      	movs	r5, #1
 801eaae:	f107 0310 	add.w	r3, r7, #16
 801eab2:	4619      	mov	r1, r3
 801eab4:	4620      	mov	r0, r4
 801eab6:	f7ee fa90 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801eaba:	4603      	mov	r3, r0
 801eabc:	2b00      	cmp	r3, #0
 801eabe:	d001      	beq.n	801eac4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801eac0:	2401      	movs	r4, #1
 801eac2:	e000      	b.n	801eac6 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801eac4:	2400      	movs	r4, #0
 801eac6:	2d00      	cmp	r5, #0
 801eac8:	d004      	beq.n	801ead4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801eaca:	f107 0310 	add.w	r3, r7, #16
 801eace:	4618      	mov	r0, r3
 801ead0:	f7ee fa77 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ead4:	2e00      	cmp	r6, #0
 801ead6:	d004      	beq.n	801eae2 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801ead8:	f107 0308 	add.w	r3, r7, #8
 801eadc:	4618      	mov	r0, r3
 801eade:	f7ee fa70 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801eae2:	2c00      	cmp	r4, #0
 801eae4:	d001      	beq.n	801eaea <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801eae6:	2301      	movs	r3, #1
 801eae8:	e000      	b.n	801eaec <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801eaea:	2300      	movs	r3, #0
}
 801eaec:	4618      	mov	r0, r3
 801eaee:	371c      	adds	r7, #28
 801eaf0:	46bd      	mov	sp, r7
 801eaf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eaf4:	08026370 	.word	0x08026370
 801eaf8:	08026368 	.word	0x08026368

0801eafc <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801eafc:	b590      	push	{r4, r7, lr}
 801eafe:	b0b9      	sub	sp, #228	; 0xe4
 801eb00:	af00      	add	r7, sp, #0
 801eb02:	6078      	str	r0, [r7, #4]
 801eb04:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801eb06:	683b      	ldr	r3, [r7, #0]
 801eb08:	f103 040c 	add.w	r4, r3, #12
 801eb0c:	f107 0308 	add.w	r3, r7, #8
 801eb10:	49d4      	ldr	r1, [pc, #848]	; (801ee64 <_ZNK14MockNamedValue8toStringEv+0x368>)
 801eb12:	4618      	mov	r0, r3
 801eb14:	f7ed fe9d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801eb18:	f107 0308 	add.w	r3, r7, #8
 801eb1c:	4619      	mov	r1, r3
 801eb1e:	4620      	mov	r0, r4
 801eb20:	f7ee fa5b 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801eb24:	4603      	mov	r3, r0
 801eb26:	461c      	mov	r4, r3
 801eb28:	f107 0308 	add.w	r3, r7, #8
 801eb2c:	4618      	mov	r0, r3
 801eb2e:	f7ee fa48 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801eb32:	2c00      	cmp	r4, #0
 801eb34:	d007      	beq.n	801eb46 <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801eb36:	683b      	ldr	r3, [r7, #0]
 801eb38:	7e1a      	ldrb	r2, [r3, #24]
 801eb3a:	687b      	ldr	r3, [r7, #4]
 801eb3c:	4611      	mov	r1, r2
 801eb3e:	4618      	mov	r0, r3
 801eb40:	f7ee fcb0 	bl	800d4a4 <_Z10StringFromb>
 801eb44:	e23f      	b.n	801efc6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801eb46:	683b      	ldr	r3, [r7, #0]
 801eb48:	f103 040c 	add.w	r4, r3, #12
 801eb4c:	f107 0310 	add.w	r3, r7, #16
 801eb50:	49c5      	ldr	r1, [pc, #788]	; (801ee68 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801eb52:	4618      	mov	r0, r3
 801eb54:	f7ed fe7d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801eb58:	f107 0310 	add.w	r3, r7, #16
 801eb5c:	4619      	mov	r1, r3
 801eb5e:	4620      	mov	r0, r4
 801eb60:	f7ee fa3b 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801eb64:	4603      	mov	r3, r0
 801eb66:	461c      	mov	r4, r3
 801eb68:	f107 0310 	add.w	r3, r7, #16
 801eb6c:	4618      	mov	r0, r3
 801eb6e:	f7ee fa28 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801eb72:	2c00      	cmp	r4, #0
 801eb74:	d03b      	beq.n	801ebee <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801eb76:	683b      	ldr	r3, [r7, #0]
 801eb78:	699a      	ldr	r2, [r3, #24]
 801eb7a:	f107 0320 	add.w	r3, r7, #32
 801eb7e:	4611      	mov	r1, r2
 801eb80:	4618      	mov	r0, r3
 801eb82:	f7ee fce5 	bl	800d550 <_Z10StringFromi>
 801eb86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801eb8a:	49b8      	ldr	r1, [pc, #736]	; (801ee6c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801eb8c:	4618      	mov	r0, r3
 801eb8e:	f7ed fe60 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801eb92:	f107 0318 	add.w	r3, r7, #24
 801eb96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801eb9a:	f107 0120 	add.w	r1, r7, #32
 801eb9e:	4618      	mov	r0, r3
 801eba0:	f7ee fa71 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 801eba4:	683b      	ldr	r3, [r7, #0]
 801eba6:	699a      	ldr	r2, [r3, #24]
 801eba8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ebac:	4611      	mov	r1, r2
 801ebae:	4618      	mov	r0, r3
 801ebb0:	f7ee fdbe 	bl	800d730 <_Z30BracketsFormattedHexStringFromi>
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801ebba:	f107 0118 	add.w	r1, r7, #24
 801ebbe:	4618      	mov	r0, r3
 801ebc0:	f7ee fa61 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 801ebc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ebc8:	4618      	mov	r0, r3
 801ebca:	f7ee f9fa 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ebce:	f107 0318 	add.w	r3, r7, #24
 801ebd2:	4618      	mov	r0, r3
 801ebd4:	f7ee f9f5 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ebd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ebdc:	4618      	mov	r0, r3
 801ebde:	f7ee f9f0 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ebe2:	f107 0320 	add.w	r3, r7, #32
 801ebe6:	4618      	mov	r0, r3
 801ebe8:	f7ee f9eb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ebec:	e1eb      	b.n	801efc6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801ebee:	683b      	ldr	r3, [r7, #0]
 801ebf0:	f103 040c 	add.w	r4, r3, #12
 801ebf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ebf8:	499d      	ldr	r1, [pc, #628]	; (801ee70 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801ebfa:	4618      	mov	r0, r3
 801ebfc:	f7ed fe29 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801ec00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ec04:	4619      	mov	r1, r3
 801ec06:	4620      	mov	r0, r4
 801ec08:	f7ee f9e7 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801ec0c:	4603      	mov	r3, r0
 801ec0e:	461c      	mov	r4, r3
 801ec10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ec14:	4618      	mov	r0, r3
 801ec16:	f7ee f9d4 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ec1a:	2c00      	cmp	r4, #0
 801ec1c:	d03b      	beq.n	801ec96 <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801ec1e:	683b      	ldr	r3, [r7, #0]
 801ec20:	699a      	ldr	r2, [r3, #24]
 801ec22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ec26:	4611      	mov	r1, r2
 801ec28:	4618      	mov	r0, r3
 801ec2a:	f7ee fef9 	bl	800da20 <_Z10StringFromj>
 801ec2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ec32:	498e      	ldr	r1, [pc, #568]	; (801ee6c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801ec34:	4618      	mov	r0, r3
 801ec36:	f7ed fe0c 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801ec3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ec3e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801ec42:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801ec46:	4618      	mov	r0, r3
 801ec48:	f7ee fa1d 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 801ec4c:	683b      	ldr	r3, [r7, #0]
 801ec4e:	699a      	ldr	r2, [r3, #24]
 801ec50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ec54:	4611      	mov	r1, r2
 801ec56:	4618      	mov	r0, r3
 801ec58:	f7ee fd86 	bl	800d768 <_Z30BracketsFormattedHexStringFromj>
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801ec62:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801ec66:	4618      	mov	r0, r3
 801ec68:	f7ee fa0d 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 801ec6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ec70:	4618      	mov	r0, r3
 801ec72:	f7ee f9a6 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ec76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ec7a:	4618      	mov	r0, r3
 801ec7c:	f7ee f9a1 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ec80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ec84:	4618      	mov	r0, r3
 801ec86:	f7ee f99c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ec8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ec8e:	4618      	mov	r0, r3
 801ec90:	f7ee f997 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ec94:	e197      	b.n	801efc6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801ec96:	683b      	ldr	r3, [r7, #0]
 801ec98:	f103 040c 	add.w	r4, r3, #12
 801ec9c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801eca0:	4974      	ldr	r1, [pc, #464]	; (801ee74 <_ZNK14MockNamedValue8toStringEv+0x378>)
 801eca2:	4618      	mov	r0, r3
 801eca4:	f7ed fdd5 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801eca8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ecac:	4619      	mov	r1, r3
 801ecae:	4620      	mov	r0, r4
 801ecb0:	f7ee f993 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801ecb4:	4603      	mov	r3, r0
 801ecb6:	461c      	mov	r4, r3
 801ecb8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ecbc:	4618      	mov	r0, r3
 801ecbe:	f7ee f980 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ecc2:	2c00      	cmp	r4, #0
 801ecc4:	d03b      	beq.n	801ed3e <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801ecc6:	683b      	ldr	r3, [r7, #0]
 801ecc8:	699a      	ldr	r2, [r3, #24]
 801ecca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801ecce:	4611      	mov	r1, r2
 801ecd0:	4618      	mov	r0, r3
 801ecd2:	f7ee fc4f 	bl	800d574 <_Z10StringFroml>
 801ecd6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ecda:	4964      	ldr	r1, [pc, #400]	; (801ee6c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801ecdc:	4618      	mov	r0, r3
 801ecde:	f7ed fdb8 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801ece2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801ece6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801ecea:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801ecee:	4618      	mov	r0, r3
 801ecf0:	f7ee f9c9 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 801ecf4:	683b      	ldr	r3, [r7, #0]
 801ecf6:	699a      	ldr	r2, [r3, #24]
 801ecf8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ecfc:	4611      	mov	r1, r2
 801ecfe:	4618      	mov	r0, r3
 801ed00:	f7ee fd4e 	bl	800d7a0 <_Z30BracketsFormattedHexStringFroml>
 801ed04:	687b      	ldr	r3, [r7, #4]
 801ed06:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801ed0a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801ed0e:	4618      	mov	r0, r3
 801ed10:	f7ee f9b9 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 801ed14:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ed18:	4618      	mov	r0, r3
 801ed1a:	f7ee f952 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ed1e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801ed22:	4618      	mov	r0, r3
 801ed24:	f7ee f94d 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ed28:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ed2c:	4618      	mov	r0, r3
 801ed2e:	f7ee f948 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ed32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801ed36:	4618      	mov	r0, r3
 801ed38:	f7ee f943 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ed3c:	e143      	b.n	801efc6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801ed3e:	683b      	ldr	r3, [r7, #0]
 801ed40:	f103 040c 	add.w	r4, r3, #12
 801ed44:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ed48:	494b      	ldr	r1, [pc, #300]	; (801ee78 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801ed4a:	4618      	mov	r0, r3
 801ed4c:	f7ed fd81 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801ed50:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ed54:	4619      	mov	r1, r3
 801ed56:	4620      	mov	r0, r4
 801ed58:	f7ee f93f 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801ed5c:	4603      	mov	r3, r0
 801ed5e:	461c      	mov	r4, r3
 801ed60:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ed64:	4618      	mov	r0, r3
 801ed66:	f7ee f92c 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ed6a:	2c00      	cmp	r4, #0
 801ed6c:	d03b      	beq.n	801ede6 <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801ed6e:	683b      	ldr	r3, [r7, #0]
 801ed70:	699a      	ldr	r2, [r3, #24]
 801ed72:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ed76:	4611      	mov	r1, r2
 801ed78:	4618      	mov	r0, r3
 801ed7a:	f7ee fe63 	bl	800da44 <_Z10StringFromm>
 801ed7e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801ed82:	493a      	ldr	r1, [pc, #232]	; (801ee6c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801ed84:	4618      	mov	r0, r3
 801ed86:	f7ed fd64 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801ed8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801ed8e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801ed92:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801ed96:	4618      	mov	r0, r3
 801ed98:	f7ee f975 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 801ed9c:	683b      	ldr	r3, [r7, #0]
 801ed9e:	699a      	ldr	r2, [r3, #24]
 801eda0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801eda4:	4611      	mov	r1, r2
 801eda6:	4618      	mov	r0, r3
 801eda8:	f7ee fd16 	bl	800d7d8 <_Z30BracketsFormattedHexStringFromm>
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801edb2:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801edb6:	4618      	mov	r0, r3
 801edb8:	f7ee f965 	bl	800d086 <_ZNK12SimpleStringplERKS_>
 801edbc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801edc0:	4618      	mov	r0, r3
 801edc2:	f7ee f8fe 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801edc6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801edca:	4618      	mov	r0, r3
 801edcc:	f7ee f8f9 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801edd0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801edd4:	4618      	mov	r0, r3
 801edd6:	f7ee f8f4 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801edda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801edde:	4618      	mov	r0, r3
 801ede0:	f7ee f8ef 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ede4:	e0ef      	b.n	801efc6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801ede6:	683b      	ldr	r3, [r7, #0]
 801ede8:	f103 040c 	add.w	r4, r3, #12
 801edec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801edf0:	4922      	ldr	r1, [pc, #136]	; (801ee7c <_ZNK14MockNamedValue8toStringEv+0x380>)
 801edf2:	4618      	mov	r0, r3
 801edf4:	f7ed fd2d 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801edf8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801edfc:	4619      	mov	r1, r3
 801edfe:	4620      	mov	r0, r4
 801ee00:	f7ee f8eb 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801ee04:	4603      	mov	r3, r0
 801ee06:	461c      	mov	r4, r3
 801ee08:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ee0c:	4618      	mov	r0, r3
 801ee0e:	f7ee f8d8 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ee12:	2c00      	cmp	r4, #0
 801ee14:	d006      	beq.n	801ee24 <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801ee16:	683b      	ldr	r3, [r7, #0]
 801ee18:	699b      	ldr	r3, [r3, #24]
 801ee1a:	4619      	mov	r1, r3
 801ee1c:	6878      	ldr	r0, [r7, #4]
 801ee1e:	f7ed fd18 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801ee22:	e0d0      	b.n	801efc6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801ee24:	683b      	ldr	r3, [r7, #0]
 801ee26:	f103 040c 	add.w	r4, r3, #12
 801ee2a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ee2e:	4914      	ldr	r1, [pc, #80]	; (801ee80 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801ee30:	4618      	mov	r0, r3
 801ee32:	f7ed fd0e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801ee36:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ee3a:	4619      	mov	r1, r3
 801ee3c:	4620      	mov	r0, r4
 801ee3e:	f7ee f8cc 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801ee42:	4603      	mov	r3, r0
 801ee44:	461c      	mov	r4, r3
 801ee46:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ee4a:	4618      	mov	r0, r3
 801ee4c:	f7ee f8b9 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ee50:	2c00      	cmp	r4, #0
 801ee52:	d017      	beq.n	801ee84 <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801ee54:	683b      	ldr	r3, [r7, #0]
 801ee56:	699a      	ldr	r2, [r3, #24]
 801ee58:	687b      	ldr	r3, [r7, #4]
 801ee5a:	4611      	mov	r1, r2
 801ee5c:	4618      	mov	r0, r3
 801ee5e:	f7ee fb9b 	bl	800d598 <_Z10StringFromPKv>
 801ee62:	e0b0      	b.n	801efc6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801ee64:	080262c0 	.word	0x080262c0
 801ee68:	080262bc 	.word	0x080262bc
 801ee6c:	080263ac 	.word	0x080263ac
 801ee70:	080262c8 	.word	0x080262c8
 801ee74:	080262d8 	.word	0x080262d8
 801ee78:	080262e4 	.word	0x080262e4
 801ee7c:	08026388 	.word	0x08026388
 801ee80:	08026368 	.word	0x08026368
    else if (type_ == "void (*)()")
 801ee84:	683b      	ldr	r3, [r7, #0]
 801ee86:	f103 040c 	add.w	r4, r3, #12
 801ee8a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801ee8e:	4950      	ldr	r1, [pc, #320]	; (801efd0 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801ee90:	4618      	mov	r0, r3
 801ee92:	f7ed fcde 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801ee96:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801ee9a:	4619      	mov	r1, r3
 801ee9c:	4620      	mov	r0, r4
 801ee9e:	f7ee f89c 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801eea2:	4603      	mov	r3, r0
 801eea4:	461c      	mov	r4, r3
 801eea6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801eeaa:	4618      	mov	r0, r3
 801eeac:	f7ee f889 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801eeb0:	2c00      	cmp	r4, #0
 801eeb2:	d007      	beq.n	801eec4 <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801eeb4:	683b      	ldr	r3, [r7, #0]
 801eeb6:	699a      	ldr	r2, [r3, #24]
 801eeb8:	687b      	ldr	r3, [r7, #4]
 801eeba:	4611      	mov	r1, r2
 801eebc:	4618      	mov	r0, r3
 801eebe:	f7ee fb95 	bl	800d5ec <_Z10StringFromPFvvE>
 801eec2:	e080      	b.n	801efc6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801eec4:	683b      	ldr	r3, [r7, #0]
 801eec6:	f103 040c 	add.w	r4, r3, #12
 801eeca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801eece:	4941      	ldr	r1, [pc, #260]	; (801efd4 <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801eed0:	4618      	mov	r0, r3
 801eed2:	f7ed fcbe 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801eed6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801eeda:	4619      	mov	r1, r3
 801eedc:	4620      	mov	r0, r4
 801eede:	f7ee f87c 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801eee2:	4603      	mov	r3, r0
 801eee4:	461c      	mov	r4, r3
 801eee6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801eeea:	4618      	mov	r0, r3
 801eeec:	f7ee f869 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801eef0:	2c00      	cmp	r4, #0
 801eef2:	d007      	beq.n	801ef04 <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801eef4:	683b      	ldr	r3, [r7, #0]
 801eef6:	699a      	ldr	r2, [r3, #24]
 801eef8:	687b      	ldr	r3, [r7, #4]
 801eefa:	4611      	mov	r1, r2
 801eefc:	4618      	mov	r0, r3
 801eefe:	f7ee fb4b 	bl	800d598 <_Z10StringFromPKv>
 801ef02:	e060      	b.n	801efc6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801ef04:	683b      	ldr	r3, [r7, #0]
 801ef06:	f103 040c 	add.w	r4, r3, #12
 801ef0a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801ef0e:	4932      	ldr	r1, [pc, #200]	; (801efd8 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801ef10:	4618      	mov	r0, r3
 801ef12:	f7ed fc9e 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801ef16:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801ef1a:	4619      	mov	r1, r3
 801ef1c:	4620      	mov	r0, r4
 801ef1e:	f7ee f85c 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801ef22:	4603      	mov	r3, r0
 801ef24:	461c      	mov	r4, r3
 801ef26:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801ef2a:	4618      	mov	r0, r3
 801ef2c:	f7ee f849 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ef30:	2c00      	cmp	r4, #0
 801ef32:	d00c      	beq.n	801ef4e <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801ef34:	683b      	ldr	r3, [r7, #0]
 801ef36:	ed93 7b06 	vldr	d7, [r3, #24]
 801ef3a:	687b      	ldr	r3, [r7, #4]
 801ef3c:	2106      	movs	r1, #6
 801ef3e:	eeb0 0a47 	vmov.f32	s0, s14
 801ef42:	eef0 0a67 	vmov.f32	s1, s15
 801ef46:	4618      	mov	r0, r3
 801ef48:	f7ee fd00 	bl	800d94c <_Z10StringFromdi>
 801ef4c:	e03b      	b.n	801efc6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801ef4e:	683b      	ldr	r3, [r7, #0]
 801ef50:	f103 040c 	add.w	r4, r3, #12
 801ef54:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ef58:	4920      	ldr	r1, [pc, #128]	; (801efdc <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801ef5a:	4618      	mov	r0, r3
 801ef5c:	f7ed fc79 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801ef60:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ef64:	4619      	mov	r1, r3
 801ef66:	4620      	mov	r0, r4
 801ef68:	f7ee f837 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801ef6c:	4603      	mov	r3, r0
 801ef6e:	461c      	mov	r4, r3
 801ef70:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ef74:	4618      	mov	r0, r3
 801ef76:	f7ee f824 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801ef7a:	2c00      	cmp	r4, #0
 801ef7c:	d008      	beq.n	801ef90 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801ef7e:	683b      	ldr	r3, [r7, #0]
 801ef80:	6999      	ldr	r1, [r3, #24]
 801ef82:	683b      	ldr	r3, [r7, #0]
 801ef84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ef86:	687b      	ldr	r3, [r7, #4]
 801ef88:	4618      	mov	r0, r3
 801ef8a:	f7ee fe73 	bl	800dc74 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801ef8e:	e01a      	b.n	801efc6 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801ef90:	683b      	ldr	r3, [r7, #0]
 801ef92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ef94:	2b00      	cmp	r3, #0
 801ef96:	d00b      	beq.n	801efb0 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801ef98:	683b      	ldr	r3, [r7, #0]
 801ef9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801ef9c:	683b      	ldr	r3, [r7, #0]
 801ef9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801efa0:	681b      	ldr	r3, [r3, #0]
 801efa2:	330c      	adds	r3, #12
 801efa4:	681b      	ldr	r3, [r3, #0]
 801efa6:	683a      	ldr	r2, [r7, #0]
 801efa8:	6992      	ldr	r2, [r2, #24]
 801efaa:	6878      	ldr	r0, [r7, #4]
 801efac:	4798      	blx	r3
 801efae:	e00a      	b.n	801efc6 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801efb0:	683b      	ldr	r3, [r7, #0]
 801efb2:	330c      	adds	r3, #12
 801efb4:	4618      	mov	r0, r3
 801efb6:	f7ed ffd7 	bl	800cf68 <_ZNK12SimpleString12asCharStringEv>
 801efba:	4602      	mov	r2, r0
 801efbc:	687b      	ldr	r3, [r7, #4]
 801efbe:	4908      	ldr	r1, [pc, #32]	; (801efe0 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801efc0:	4618      	mov	r0, r3
 801efc2:	f7ee fd05 	bl	800d9d0 <_Z16StringFromFormatPKcz>

}
 801efc6:	6878      	ldr	r0, [r7, #4]
 801efc8:	37e4      	adds	r7, #228	; 0xe4
 801efca:	46bd      	mov	sp, r7
 801efcc:	bd90      	pop	{r4, r7, pc}
 801efce:	bf00      	nop
 801efd0:	0802637c 	.word	0x0802637c
 801efd4:	08026370 	.word	0x08026370
 801efd8:	08026360 	.word	0x08026360
 801efdc:	08026394 	.word	0x08026394
 801efe0:	080263b0 	.word	0x080263b0

0801efe4 <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801efe4:	b480      	push	{r7}
 801efe6:	b083      	sub	sp, #12
 801efe8:	af00      	add	r7, sp, #0
 801efea:	6078      	str	r0, [r7, #4]
 801efec:	6039      	str	r1, [r7, #0]
    next_ = node;
 801efee:	687b      	ldr	r3, [r7, #4]
 801eff0:	683a      	ldr	r2, [r7, #0]
 801eff2:	605a      	str	r2, [r3, #4]
}
 801eff4:	bf00      	nop
 801eff6:	370c      	adds	r7, #12
 801eff8:	46bd      	mov	sp, r7
 801effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801effe:	4770      	bx	lr

0801f000 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801f000:	b480      	push	{r7}
 801f002:	b083      	sub	sp, #12
 801f004:	af00      	add	r7, sp, #0
 801f006:	6078      	str	r0, [r7, #4]
    return next_;
 801f008:	687b      	ldr	r3, [r7, #4]
 801f00a:	685b      	ldr	r3, [r3, #4]
}
 801f00c:	4618      	mov	r0, r3
 801f00e:	370c      	adds	r7, #12
 801f010:	46bd      	mov	sp, r7
 801f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f016:	4770      	bx	lr

0801f018 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801f018:	b480      	push	{r7}
 801f01a:	b083      	sub	sp, #12
 801f01c:	af00      	add	r7, sp, #0
 801f01e:	6078      	str	r0, [r7, #4]
    return data_;
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	681b      	ldr	r3, [r3, #0]
}
 801f024:	4618      	mov	r0, r3
 801f026:	370c      	adds	r7, #12
 801f028:	46bd      	mov	sp, r7
 801f02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f02e:	4770      	bx	lr

0801f030 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801f030:	b580      	push	{r7, lr}
 801f032:	b082      	sub	sp, #8
 801f034:	af00      	add	r7, sp, #0
 801f036:	6078      	str	r0, [r7, #4]
    delete data_;
 801f038:	687b      	ldr	r3, [r7, #4]
 801f03a:	681b      	ldr	r3, [r3, #0]
 801f03c:	2b00      	cmp	r3, #0
 801f03e:	d004      	beq.n	801f04a <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801f040:	681a      	ldr	r2, [r3, #0]
 801f042:	3204      	adds	r2, #4
 801f044:	6812      	ldr	r2, [r2, #0]
 801f046:	4618      	mov	r0, r3
 801f048:	4790      	blx	r2
}
 801f04a:	bf00      	nop
 801f04c:	3708      	adds	r7, #8
 801f04e:	46bd      	mov	sp, r7
 801f050:	bd80      	pop	{r7, pc}

0801f052 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801f052:	b480      	push	{r7}
 801f054:	b083      	sub	sp, #12
 801f056:	af00      	add	r7, sp, #0
 801f058:	6078      	str	r0, [r7, #4]
 801f05a:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801f05c:	687b      	ldr	r3, [r7, #4]
 801f05e:	683a      	ldr	r2, [r7, #0]
 801f060:	601a      	str	r2, [r3, #0]
 801f062:	687b      	ldr	r3, [r7, #4]
 801f064:	2200      	movs	r2, #0
 801f066:	605a      	str	r2, [r3, #4]
{
}
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	4618      	mov	r0, r3
 801f06c:	370c      	adds	r7, #12
 801f06e:	46bd      	mov	sp, r7
 801f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f074:	4770      	bx	lr

0801f076 <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801f076:	b580      	push	{r7, lr}
 801f078:	b082      	sub	sp, #8
 801f07a:	af00      	add	r7, sp, #0
 801f07c:	6078      	str	r0, [r7, #4]
 801f07e:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801f080:	683b      	ldr	r3, [r7, #0]
 801f082:	6819      	ldr	r1, [r3, #0]
 801f084:	683b      	ldr	r3, [r7, #0]
 801f086:	681b      	ldr	r3, [r3, #0]
 801f088:	681b      	ldr	r3, [r3, #0]
 801f08a:	335c      	adds	r3, #92	; 0x5c
 801f08c:	681b      	ldr	r3, [r3, #0]
 801f08e:	687a      	ldr	r2, [r7, #4]
 801f090:	4610      	mov	r0, r2
 801f092:	4798      	blx	r3
}
 801f094:	6878      	ldr	r0, [r7, #4]
 801f096:	3708      	adds	r7, #8
 801f098:	46bd      	mov	sp, r7
 801f09a:	bd80      	pop	{r7, pc}

0801f09c <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801f09c:	b580      	push	{r7, lr}
 801f09e:	b082      	sub	sp, #8
 801f0a0:	af00      	add	r7, sp, #0
 801f0a2:	6078      	str	r0, [r7, #4]
 801f0a4:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801f0a6:	683b      	ldr	r3, [r7, #0]
 801f0a8:	6819      	ldr	r1, [r3, #0]
 801f0aa:	683b      	ldr	r3, [r7, #0]
 801f0ac:	681b      	ldr	r3, [r3, #0]
 801f0ae:	681b      	ldr	r3, [r3, #0]
 801f0b0:	3360      	adds	r3, #96	; 0x60
 801f0b2:	681b      	ldr	r3, [r3, #0]
 801f0b4:	687a      	ldr	r2, [r7, #4]
 801f0b6:	4610      	mov	r0, r2
 801f0b8:	4798      	blx	r3
}
 801f0ba:	6878      	ldr	r0, [r7, #4]
 801f0bc:	3708      	adds	r7, #8
 801f0be:	46bd      	mov	sp, r7
 801f0c0:	bd80      	pop	{r7, pc}

0801f0c2 <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801f0c2:	b480      	push	{r7}
 801f0c4:	b083      	sub	sp, #12
 801f0c6:	af00      	add	r7, sp, #0
 801f0c8:	6078      	str	r0, [r7, #4]
 801f0ca:	687b      	ldr	r3, [r7, #4]
 801f0cc:	2200      	movs	r2, #0
 801f0ce:	601a      	str	r2, [r3, #0]
{
}
 801f0d0:	687b      	ldr	r3, [r7, #4]
 801f0d2:	4618      	mov	r0, r3
 801f0d4:	370c      	adds	r7, #12
 801f0d6:	46bd      	mov	sp, r7
 801f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0dc:	4770      	bx	lr

0801f0de <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801f0de:	b580      	push	{r7, lr}
 801f0e0:	b084      	sub	sp, #16
 801f0e2:	af00      	add	r7, sp, #0
 801f0e4:	6078      	str	r0, [r7, #4]
    while (head_) {
 801f0e6:	687b      	ldr	r3, [r7, #4]
 801f0e8:	681b      	ldr	r3, [r3, #0]
 801f0ea:	2b00      	cmp	r3, #0
 801f0ec:	d016      	beq.n	801f11c <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801f0ee:	687b      	ldr	r3, [r7, #4]
 801f0f0:	681b      	ldr	r3, [r3, #0]
 801f0f2:	4618      	mov	r0, r3
 801f0f4:	f7ff ff84 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 801f0f8:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801f0fa:	687b      	ldr	r3, [r7, #4]
 801f0fc:	681b      	ldr	r3, [r3, #0]
 801f0fe:	4618      	mov	r0, r3
 801f100:	f7ff ff96 	bl	801f030 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	681b      	ldr	r3, [r3, #0]
 801f108:	2b00      	cmp	r3, #0
 801f10a:	d003      	beq.n	801f114 <_ZN18MockNamedValueList5clearEv+0x36>
 801f10c:	2108      	movs	r1, #8
 801f10e:	4618      	mov	r0, r3
 801f110:	f7ea fff0 	bl	800a0f4 <_ZdlPvj>
        head_ = n;
 801f114:	687b      	ldr	r3, [r7, #4]
 801f116:	68fa      	ldr	r2, [r7, #12]
 801f118:	601a      	str	r2, [r3, #0]
    while (head_) {
 801f11a:	e7e4      	b.n	801f0e6 <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801f11c:	bf00      	nop
 801f11e:	3710      	adds	r7, #16
 801f120:	46bd      	mov	sp, r7
 801f122:	bd80      	pop	{r7, pc}

0801f124 <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801f124:	b590      	push	{r4, r7, lr}
 801f126:	b085      	sub	sp, #20
 801f128:	af00      	add	r7, sp, #0
 801f12a:	6078      	str	r0, [r7, #4]
 801f12c:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801f12e:	f44f 7210 	mov.w	r2, #576	; 0x240
 801f132:	4916      	ldr	r1, [pc, #88]	; (801f18c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801f134:	2008      	movs	r0, #8
 801f136:	f7ea ffc9 	bl	800a0cc <_ZnwjPKci>
 801f13a:	4604      	mov	r4, r0
 801f13c:	6839      	ldr	r1, [r7, #0]
 801f13e:	4620      	mov	r0, r4
 801f140:	f7ff ff87 	bl	801f052 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801f144:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801f146:	687b      	ldr	r3, [r7, #4]
 801f148:	681b      	ldr	r3, [r3, #0]
 801f14a:	2b00      	cmp	r3, #0
 801f14c:	d103      	bne.n	801f156 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801f14e:	687b      	ldr	r3, [r7, #4]
 801f150:	68ba      	ldr	r2, [r7, #8]
 801f152:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801f154:	e016      	b.n	801f184 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	681b      	ldr	r3, [r3, #0]
 801f15a:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801f15c:	68f8      	ldr	r0, [r7, #12]
 801f15e:	f7ff ff4f 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 801f162:	4603      	mov	r3, r0
 801f164:	2b00      	cmp	r3, #0
 801f166:	bf14      	ite	ne
 801f168:	2301      	movne	r3, #1
 801f16a:	2300      	moveq	r3, #0
 801f16c:	b2db      	uxtb	r3, r3
 801f16e:	2b00      	cmp	r3, #0
 801f170:	d004      	beq.n	801f17c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801f172:	68f8      	ldr	r0, [r7, #12]
 801f174:	f7ff ff44 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 801f178:	60f8      	str	r0, [r7, #12]
 801f17a:	e7ef      	b.n	801f15c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801f17c:	68b9      	ldr	r1, [r7, #8]
 801f17e:	68f8      	ldr	r0, [r7, #12]
 801f180:	f7ff ff30 	bl	801efe4 <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801f184:	bf00      	nop
 801f186:	3714      	adds	r7, #20
 801f188:	46bd      	mov	sp, r7
 801f18a:	bd90      	pop	{r4, r7, pc}
 801f18c:	080262f8 	.word	0x080262f8

0801f190 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801f190:	b590      	push	{r4, r7, lr}
 801f192:	b087      	sub	sp, #28
 801f194:	af00      	add	r7, sp, #0
 801f196:	6078      	str	r0, [r7, #4]
 801f198:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801f19a:	687b      	ldr	r3, [r7, #4]
 801f19c:	681b      	ldr	r3, [r3, #0]
 801f19e:	617b      	str	r3, [r7, #20]
 801f1a0:	697b      	ldr	r3, [r7, #20]
 801f1a2:	2b00      	cmp	r3, #0
 801f1a4:	d01e      	beq.n	801f1e4 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801f1a6:	f107 030c 	add.w	r3, r7, #12
 801f1aa:	6979      	ldr	r1, [r7, #20]
 801f1ac:	4618      	mov	r0, r3
 801f1ae:	f7ff ff62 	bl	801f076 <_ZNK22MockNamedValueListNode7getNameEv>
 801f1b2:	f107 030c 	add.w	r3, r7, #12
 801f1b6:	6839      	ldr	r1, [r7, #0]
 801f1b8:	4618      	mov	r0, r3
 801f1ba:	f7ed ff0e 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801f1be:	4603      	mov	r3, r0
 801f1c0:	461c      	mov	r4, r3
 801f1c2:	f107 030c 	add.w	r3, r7, #12
 801f1c6:	4618      	mov	r0, r3
 801f1c8:	f7ed fefb 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801f1cc:	2c00      	cmp	r4, #0
 801f1ce:	d004      	beq.n	801f1da <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801f1d0:	6978      	ldr	r0, [r7, #20]
 801f1d2:	f7ff ff21 	bl	801f018 <_ZN22MockNamedValueListNode4itemEv>
 801f1d6:	4603      	mov	r3, r0
 801f1d8:	e005      	b.n	801f1e6 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801f1da:	6978      	ldr	r0, [r7, #20]
 801f1dc:	f7ff ff10 	bl	801f000 <_ZN22MockNamedValueListNode4nextEv>
 801f1e0:	6178      	str	r0, [r7, #20]
 801f1e2:	e7dd      	b.n	801f1a0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801f1e4:	2300      	movs	r3, #0
}
 801f1e6:	4618      	mov	r0, r3
 801f1e8:	371c      	adds	r7, #28
 801f1ea:	46bd      	mov	sp, r7
 801f1ec:	bd90      	pop	{r4, r7, pc}

0801f1ee <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801f1ee:	b480      	push	{r7}
 801f1f0:	b083      	sub	sp, #12
 801f1f2:	af00      	add	r7, sp, #0
 801f1f4:	6078      	str	r0, [r7, #4]
    return head_;
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	681b      	ldr	r3, [r3, #0]
}
 801f1fa:	4618      	mov	r0, r3
 801f1fc:	370c      	adds	r7, #12
 801f1fe:	46bd      	mov	sp, r7
 801f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f204:	4770      	bx	lr

0801f206 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801f206:	b580      	push	{r7, lr}
 801f208:	b084      	sub	sp, #16
 801f20a:	af00      	add	r7, sp, #0
 801f20c:	60f8      	str	r0, [r7, #12]
 801f20e:	60b9      	str	r1, [r7, #8]
 801f210:	607a      	str	r2, [r7, #4]
 801f212:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801f214:	68fb      	ldr	r3, [r7, #12]
 801f216:	68b9      	ldr	r1, [r7, #8]
 801f218:	4618      	mov	r0, r3
 801f21a:	f7ed fb6e 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 801f21e:	68fb      	ldr	r3, [r7, #12]
 801f220:	687a      	ldr	r2, [r7, #4]
 801f222:	609a      	str	r2, [r3, #8]
 801f224:	68fb      	ldr	r3, [r7, #12]
 801f226:	2200      	movs	r2, #0
 801f228:	60da      	str	r2, [r3, #12]
 801f22a:	68fb      	ldr	r3, [r7, #12]
 801f22c:	683a      	ldr	r2, [r7, #0]
 801f22e:	611a      	str	r2, [r3, #16]
 801f230:	68fb      	ldr	r3, [r7, #12]
 801f232:	4618      	mov	r0, r3
 801f234:	3710      	adds	r7, #16
 801f236:	46bd      	mov	sp, r7
 801f238:	bd80      	pop	{r7, pc}

0801f23a <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801f23a:	b580      	push	{r7, lr}
 801f23c:	b084      	sub	sp, #16
 801f23e:	af00      	add	r7, sp, #0
 801f240:	60f8      	str	r0, [r7, #12]
 801f242:	60b9      	str	r1, [r7, #8]
 801f244:	607a      	str	r2, [r7, #4]
 801f246:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801f248:	68fb      	ldr	r3, [r7, #12]
 801f24a:	68b9      	ldr	r1, [r7, #8]
 801f24c:	4618      	mov	r0, r3
 801f24e:	f7ed fb54 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 801f252:	68fb      	ldr	r3, [r7, #12]
 801f254:	2200      	movs	r2, #0
 801f256:	609a      	str	r2, [r3, #8]
 801f258:	68fb      	ldr	r3, [r7, #12]
 801f25a:	687a      	ldr	r2, [r7, #4]
 801f25c:	60da      	str	r2, [r3, #12]
 801f25e:	68fb      	ldr	r3, [r7, #12]
 801f260:	683a      	ldr	r2, [r7, #0]
 801f262:	611a      	str	r2, [r3, #16]
 801f264:	68fb      	ldr	r3, [r7, #12]
 801f266:	4618      	mov	r0, r3
 801f268:	3710      	adds	r7, #16
 801f26a:	46bd      	mov	sp, r7
 801f26c:	bd80      	pop	{r7, pc}

0801f26e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801f26e:	b580      	push	{r7, lr}
 801f270:	b084      	sub	sp, #16
 801f272:	af00      	add	r7, sp, #0
 801f274:	60f8      	str	r0, [r7, #12]
 801f276:	60b9      	str	r1, [r7, #8]
 801f278:	607a      	str	r2, [r7, #4]
 801f27a:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801f27c:	68fb      	ldr	r3, [r7, #12]
 801f27e:	68b9      	ldr	r1, [r7, #8]
 801f280:	4618      	mov	r0, r3
 801f282:	f7ed fb3a 	bl	800c8fa <_ZN12SimpleStringC1ERKS_>
 801f286:	68fb      	ldr	r3, [r7, #12]
 801f288:	687a      	ldr	r2, [r7, #4]
 801f28a:	609a      	str	r2, [r3, #8]
 801f28c:	68fb      	ldr	r3, [r7, #12]
 801f28e:	683a      	ldr	r2, [r7, #0]
 801f290:	60da      	str	r2, [r3, #12]
 801f292:	68fb      	ldr	r3, [r7, #12]
 801f294:	69ba      	ldr	r2, [r7, #24]
 801f296:	611a      	str	r2, [r3, #16]
 801f298:	68fb      	ldr	r3, [r7, #12]
 801f29a:	4618      	mov	r0, r3
 801f29c:	3710      	adds	r7, #16
 801f29e:	46bd      	mov	sp, r7
 801f2a0:	bd80      	pop	{r7, pc}
	...

0801f2a4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801f2a4:	b480      	push	{r7}
 801f2a6:	b083      	sub	sp, #12
 801f2a8:	af00      	add	r7, sp, #0
 801f2aa:	6078      	str	r0, [r7, #4]
 801f2ac:	4a06      	ldr	r2, [pc, #24]	; (801f2c8 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	601a      	str	r2, [r3, #0]
 801f2b2:	687b      	ldr	r3, [r7, #4]
 801f2b4:	2200      	movs	r2, #0
 801f2b6:	605a      	str	r2, [r3, #4]
{

}
 801f2b8:	687b      	ldr	r3, [r7, #4]
 801f2ba:	4618      	mov	r0, r3
 801f2bc:	370c      	adds	r7, #12
 801f2be:	46bd      	mov	sp, r7
 801f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2c4:	4770      	bx	lr
 801f2c6:	bf00      	nop
 801f2c8:	08028d74 	.word	0x08028d74

0801f2cc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801f2cc:	b580      	push	{r7, lr}
 801f2ce:	b082      	sub	sp, #8
 801f2d0:	af00      	add	r7, sp, #0
 801f2d2:	6078      	str	r0, [r7, #4]
 801f2d4:	4a05      	ldr	r2, [pc, #20]	; (801f2ec <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801f2d6:	687b      	ldr	r3, [r7, #4]
 801f2d8:	601a      	str	r2, [r3, #0]
{
    clear();
 801f2da:	6878      	ldr	r0, [r7, #4]
 801f2dc:	f000 f825 	bl	801f32a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	4618      	mov	r0, r3
 801f2e4:	3708      	adds	r7, #8
 801f2e6:	46bd      	mov	sp, r7
 801f2e8:	bd80      	pop	{r7, pc}
 801f2ea:	bf00      	nop
 801f2ec:	08028d74 	.word	0x08028d74

0801f2f0 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801f2f0:	b580      	push	{r7, lr}
 801f2f2:	b082      	sub	sp, #8
 801f2f4:	af00      	add	r7, sp, #0
 801f2f6:	6078      	str	r0, [r7, #4]
}
 801f2f8:	6878      	ldr	r0, [r7, #4]
 801f2fa:	f7ff ffe7 	bl	801f2cc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801f2fe:	2108      	movs	r1, #8
 801f300:	6878      	ldr	r0, [r7, #4]
 801f302:	f7ea fef7 	bl	800a0f4 <_ZdlPvj>
 801f306:	687b      	ldr	r3, [r7, #4]
 801f308:	4618      	mov	r0, r3
 801f30a:	3708      	adds	r7, #8
 801f30c:	46bd      	mov	sp, r7
 801f30e:	bd80      	pop	{r7, pc}

0801f310 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801f310:	b580      	push	{r7, lr}
 801f312:	b082      	sub	sp, #8
 801f314:	af00      	add	r7, sp, #0
 801f316:	6078      	str	r0, [r7, #4]
 801f318:	687b      	ldr	r3, [r7, #4]
 801f31a:	4618      	mov	r0, r3
 801f31c:	f7ed fe51 	bl	800cfc2 <_ZN12SimpleStringD1Ev>
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	4618      	mov	r0, r3
 801f324:	3708      	adds	r7, #8
 801f326:	46bd      	mov	sp, r7
 801f328:	bd80      	pop	{r7, pc}

0801f32a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801f32a:	b590      	push	{r4, r7, lr}
 801f32c:	b085      	sub	sp, #20
 801f32e:	af00      	add	r7, sp, #0
 801f330:	6078      	str	r0, [r7, #4]
    while (head_) {
 801f332:	687b      	ldr	r3, [r7, #4]
 801f334:	685b      	ldr	r3, [r3, #4]
 801f336:	2b00      	cmp	r3, #0
 801f338:	d012      	beq.n	801f360 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801f33a:	687b      	ldr	r3, [r7, #4]
 801f33c:	685b      	ldr	r3, [r3, #4]
 801f33e:	691b      	ldr	r3, [r3, #16]
 801f340:	60fb      	str	r3, [r7, #12]
        delete head_;
 801f342:	687b      	ldr	r3, [r7, #4]
 801f344:	685c      	ldr	r4, [r3, #4]
 801f346:	2c00      	cmp	r4, #0
 801f348:	d006      	beq.n	801f358 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801f34a:	4620      	mov	r0, r4
 801f34c:	f7ff ffe0 	bl	801f310 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801f350:	2114      	movs	r1, #20
 801f352:	4620      	mov	r0, r4
 801f354:	f7ea fece 	bl	800a0f4 <_ZdlPvj>
        head_ = next;
 801f358:	687b      	ldr	r3, [r7, #4]
 801f35a:	68fa      	ldr	r2, [r7, #12]
 801f35c:	605a      	str	r2, [r3, #4]
    while (head_) {
 801f35e:	e7e8      	b.n	801f332 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801f360:	bf00      	nop
 801f362:	3714      	adds	r7, #20
 801f364:	46bd      	mov	sp, r7
 801f366:	bd90      	pop	{r4, r7, pc}

0801f368 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801f368:	b590      	push	{r4, r7, lr}
 801f36a:	b085      	sub	sp, #20
 801f36c:	af00      	add	r7, sp, #0
 801f36e:	60f8      	str	r0, [r7, #12]
 801f370:	60b9      	str	r1, [r7, #8]
 801f372:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801f374:	f240 227a 	movw	r2, #634	; 0x27a
 801f378:	4908      	ldr	r1, [pc, #32]	; (801f39c <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801f37a:	2014      	movs	r0, #20
 801f37c:	f7ea fea6 	bl	800a0cc <_ZnwjPKci>
 801f380:	4604      	mov	r4, r0
 801f382:	68fb      	ldr	r3, [r7, #12]
 801f384:	685b      	ldr	r3, [r3, #4]
 801f386:	687a      	ldr	r2, [r7, #4]
 801f388:	68b9      	ldr	r1, [r7, #8]
 801f38a:	4620      	mov	r0, r4
 801f38c:	f7ff ff3b 	bl	801f206 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801f390:	68fb      	ldr	r3, [r7, #12]
 801f392:	605c      	str	r4, [r3, #4]
}
 801f394:	bf00      	nop
 801f396:	3714      	adds	r7, #20
 801f398:	46bd      	mov	sp, r7
 801f39a:	bd90      	pop	{r4, r7, pc}
 801f39c:	080262f8 	.word	0x080262f8

0801f3a0 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801f3a0:	b590      	push	{r4, r7, lr}
 801f3a2:	b085      	sub	sp, #20
 801f3a4:	af00      	add	r7, sp, #0
 801f3a6:	60f8      	str	r0, [r7, #12]
 801f3a8:	60b9      	str	r1, [r7, #8]
 801f3aa:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801f3ac:	f240 227f 	movw	r2, #639	; 0x27f
 801f3b0:	4908      	ldr	r1, [pc, #32]	; (801f3d4 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801f3b2:	2014      	movs	r0, #20
 801f3b4:	f7ea fe8a 	bl	800a0cc <_ZnwjPKci>
 801f3b8:	4604      	mov	r4, r0
 801f3ba:	68fb      	ldr	r3, [r7, #12]
 801f3bc:	685b      	ldr	r3, [r3, #4]
 801f3be:	687a      	ldr	r2, [r7, #4]
 801f3c0:	68b9      	ldr	r1, [r7, #8]
 801f3c2:	4620      	mov	r0, r4
 801f3c4:	f7ff ff39 	bl	801f23a <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801f3c8:	68fb      	ldr	r3, [r7, #12]
 801f3ca:	605c      	str	r4, [r3, #4]
}
 801f3cc:	bf00      	nop
 801f3ce:	3714      	adds	r7, #20
 801f3d0:	46bd      	mov	sp, r7
 801f3d2:	bd90      	pop	{r4, r7, pc}
 801f3d4:	080262f8 	.word	0x080262f8

0801f3d8 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801f3d8:	b580      	push	{r7, lr}
 801f3da:	b084      	sub	sp, #16
 801f3dc:	af00      	add	r7, sp, #0
 801f3de:	6078      	str	r0, [r7, #4]
 801f3e0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f3e2:	687b      	ldr	r3, [r7, #4]
 801f3e4:	685b      	ldr	r3, [r3, #4]
 801f3e6:	60fb      	str	r3, [r7, #12]
 801f3e8:	68fb      	ldr	r3, [r7, #12]
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	d017      	beq.n	801f41e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801f3ee:	68fb      	ldr	r3, [r7, #12]
 801f3f0:	6839      	ldr	r1, [r7, #0]
 801f3f2:	4618      	mov	r0, r3
 801f3f4:	f7ed fdf1 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801f3f8:	4603      	mov	r3, r0
 801f3fa:	2b00      	cmp	r3, #0
 801f3fc:	d005      	beq.n	801f40a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801f3fe:	68fb      	ldr	r3, [r7, #12]
 801f400:	689b      	ldr	r3, [r3, #8]
 801f402:	2b00      	cmp	r3, #0
 801f404:	d001      	beq.n	801f40a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801f406:	2301      	movs	r3, #1
 801f408:	e000      	b.n	801f40c <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801f40a:	2300      	movs	r3, #0
 801f40c:	2b00      	cmp	r3, #0
 801f40e:	d002      	beq.n	801f416 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801f410:	68fb      	ldr	r3, [r7, #12]
 801f412:	689b      	ldr	r3, [r3, #8]
 801f414:	e004      	b.n	801f420 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f416:	68fb      	ldr	r3, [r7, #12]
 801f418:	691b      	ldr	r3, [r3, #16]
 801f41a:	60fb      	str	r3, [r7, #12]
 801f41c:	e7e4      	b.n	801f3e8 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801f41e:	2300      	movs	r3, #0
}
 801f420:	4618      	mov	r0, r3
 801f422:	3710      	adds	r7, #16
 801f424:	46bd      	mov	sp, r7
 801f426:	bd80      	pop	{r7, pc}

0801f428 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801f428:	b580      	push	{r7, lr}
 801f42a:	b084      	sub	sp, #16
 801f42c:	af00      	add	r7, sp, #0
 801f42e:	6078      	str	r0, [r7, #4]
 801f430:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f432:	687b      	ldr	r3, [r7, #4]
 801f434:	685b      	ldr	r3, [r3, #4]
 801f436:	60fb      	str	r3, [r7, #12]
 801f438:	68fb      	ldr	r3, [r7, #12]
 801f43a:	2b00      	cmp	r3, #0
 801f43c:	d017      	beq.n	801f46e <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801f43e:	68fb      	ldr	r3, [r7, #12]
 801f440:	6839      	ldr	r1, [r7, #0]
 801f442:	4618      	mov	r0, r3
 801f444:	f7ed fdc9 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801f448:	4603      	mov	r3, r0
 801f44a:	2b00      	cmp	r3, #0
 801f44c:	d005      	beq.n	801f45a <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801f44e:	68fb      	ldr	r3, [r7, #12]
 801f450:	68db      	ldr	r3, [r3, #12]
 801f452:	2b00      	cmp	r3, #0
 801f454:	d001      	beq.n	801f45a <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801f456:	2301      	movs	r3, #1
 801f458:	e000      	b.n	801f45c <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801f45a:	2300      	movs	r3, #0
 801f45c:	2b00      	cmp	r3, #0
 801f45e:	d002      	beq.n	801f466 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801f460:	68fb      	ldr	r3, [r7, #12]
 801f462:	68db      	ldr	r3, [r3, #12]
 801f464:	e004      	b.n	801f470 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f466:	68fb      	ldr	r3, [r7, #12]
 801f468:	691b      	ldr	r3, [r3, #16]
 801f46a:	60fb      	str	r3, [r7, #12]
 801f46c:	e7e4      	b.n	801f438 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801f46e:	2300      	movs	r3, #0
}
 801f470:	4618      	mov	r0, r3
 801f472:	3710      	adds	r7, #16
 801f474:	46bd      	mov	sp, r7
 801f476:	bd80      	pop	{r7, pc}

0801f478 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801f478:	b590      	push	{r4, r7, lr}
 801f47a:	b087      	sub	sp, #28
 801f47c:	af02      	add	r7, sp, #8
 801f47e:	6078      	str	r0, [r7, #4]
 801f480:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801f482:	683b      	ldr	r3, [r7, #0]
 801f484:	685b      	ldr	r3, [r3, #4]
 801f486:	60fb      	str	r3, [r7, #12]
 801f488:	68fb      	ldr	r3, [r7, #12]
 801f48a:	2b00      	cmp	r3, #0
 801f48c:	d018      	beq.n	801f4c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801f48e:	f240 2293 	movw	r2, #659	; 0x293
 801f492:	490d      	ldr	r1, [pc, #52]	; (801f4c8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801f494:	2014      	movs	r0, #20
 801f496:	f7ea fe19 	bl	800a0cc <_ZnwjPKci>
 801f49a:	4604      	mov	r4, r0
 801f49c:	68f9      	ldr	r1, [r7, #12]
 801f49e:	68fb      	ldr	r3, [r7, #12]
 801f4a0:	689a      	ldr	r2, [r3, #8]
 801f4a2:	68fb      	ldr	r3, [r7, #12]
 801f4a4:	68d8      	ldr	r0, [r3, #12]
 801f4a6:	687b      	ldr	r3, [r7, #4]
 801f4a8:	685b      	ldr	r3, [r3, #4]
 801f4aa:	9300      	str	r3, [sp, #0]
 801f4ac:	4603      	mov	r3, r0
 801f4ae:	4620      	mov	r0, r4
 801f4b0:	f7ff fedd 	bl	801f26e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801f4b4:	687b      	ldr	r3, [r7, #4]
 801f4b6:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801f4b8:	68fb      	ldr	r3, [r7, #12]
 801f4ba:	691b      	ldr	r3, [r3, #16]
 801f4bc:	60fb      	str	r3, [r7, #12]
 801f4be:	e7e3      	b.n	801f488 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801f4c0:	bf00      	nop
 801f4c2:	3714      	adds	r7, #20
 801f4c4:	46bd      	mov	sp, r7
 801f4c6:	bd90      	pop	{r4, r7, pc}
 801f4c8:	080262f8 	.word	0x080262f8

0801f4cc <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801f4cc:	b580      	push	{r7, lr}
 801f4ce:	b082      	sub	sp, #8
 801f4d0:	af00      	add	r7, sp, #0
 801f4d2:	6078      	str	r0, [r7, #4]
 801f4d4:	6039      	str	r1, [r7, #0]
 801f4d6:	687b      	ldr	r3, [r7, #4]
 801f4d8:	490b      	ldr	r1, [pc, #44]	; (801f508 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801f4da:	4618      	mov	r0, r3
 801f4dc:	f7ed f9b9 	bl	800c852 <_ZN12SimpleStringC1EPKc>
 801f4e0:	687b      	ldr	r3, [r7, #4]
 801f4e2:	2200      	movs	r2, #0
 801f4e4:	721a      	strb	r2, [r3, #8]
 801f4e6:	687b      	ldr	r3, [r7, #4]
 801f4e8:	2200      	movs	r2, #0
 801f4ea:	725a      	strb	r2, [r3, #9]
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	2200      	movs	r2, #0
 801f4f0:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801f4f2:	687b      	ldr	r3, [r7, #4]
 801f4f4:	6839      	ldr	r1, [r7, #0]
 801f4f6:	4618      	mov	r0, r3
 801f4f8:	f7ed fa17 	bl	800c92a <_ZN12SimpleStringaSERKS_>
}
 801f4fc:	687b      	ldr	r3, [r7, #4]
 801f4fe:	4618      	mov	r0, r3
 801f500:	3708      	adds	r7, #8
 801f502:	46bd      	mov	sp, r7
 801f504:	bd80      	pop	{r7, pc}
 801f506:	bf00      	nop
 801f508:	080263d4 	.word	0x080263d4

0801f50c <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801f50c:	b480      	push	{r7}
 801f50e:	b083      	sub	sp, #12
 801f510:	af00      	add	r7, sp, #0
 801f512:	6078      	str	r0, [r7, #4]
 801f514:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	683a      	ldr	r2, [r7, #0]
 801f51a:	60da      	str	r2, [r3, #12]
    return this;
 801f51c:	687b      	ldr	r3, [r7, #4]
}
 801f51e:	4618      	mov	r0, r3
 801f520:	370c      	adds	r7, #12
 801f522:	46bd      	mov	sp, r7
 801f524:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f528:	4770      	bx	lr

0801f52a <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801f52a:	b480      	push	{r7}
 801f52c:	b083      	sub	sp, #12
 801f52e:	af00      	add	r7, sp, #0
 801f530:	6078      	str	r0, [r7, #4]
    return next_;
 801f532:	687b      	ldr	r3, [r7, #4]
 801f534:	68db      	ldr	r3, [r3, #12]
}
 801f536:	4618      	mov	r0, r3
 801f538:	370c      	adds	r7, #12
 801f53a:	46bd      	mov	sp, r7
 801f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f540:	4770      	bx	lr

0801f542 <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801f542:	b480      	push	{r7}
 801f544:	b083      	sub	sp, #12
 801f546:	af00      	add	r7, sp, #0
 801f548:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801f54a:	687b      	ldr	r3, [r7, #4]
 801f54c:	2201      	movs	r2, #1
 801f54e:	721a      	strb	r2, [r3, #8]
}
 801f550:	bf00      	nop
 801f552:	370c      	adds	r7, #12
 801f554:	46bd      	mov	sp, r7
 801f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f55a:	4770      	bx	lr

0801f55c <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801f55c:	b480      	push	{r7}
 801f55e:	b083      	sub	sp, #12
 801f560:	af00      	add	r7, sp, #0
 801f562:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801f564:	687b      	ldr	r3, [r7, #4]
 801f566:	2201      	movs	r2, #1
 801f568:	725a      	strb	r2, [r3, #9]
}
 801f56a:	bf00      	nop
 801f56c:	370c      	adds	r7, #12
 801f56e:	46bd      	mov	sp, r7
 801f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f574:	4770      	bx	lr

0801f576 <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801f576:	b580      	push	{r7, lr}
 801f578:	b084      	sub	sp, #16
 801f57a:	af00      	add	r7, sp, #0
 801f57c:	6078      	str	r0, [r7, #4]
 801f57e:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801f580:	2300      	movs	r3, #0
 801f582:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801f584:	687b      	ldr	r3, [r7, #4]
 801f586:	7a1b      	ldrb	r3, [r3, #8]
 801f588:	2b00      	cmp	r3, #0
 801f58a:	d007      	beq.n	801f59c <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801f58c:	687b      	ldr	r3, [r7, #4]
 801f58e:	4619      	mov	r1, r3
 801f590:	6838      	ldr	r0, [r7, #0]
 801f592:	f7ed fd22 	bl	800cfda <_ZeqRK12SimpleStringS1_>
 801f596:	4603      	mov	r3, r0
 801f598:	73fb      	strb	r3, [r7, #15]
 801f59a:	e006      	b.n	801f5aa <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801f59c:	687b      	ldr	r3, [r7, #4]
 801f59e:	4619      	mov	r1, r3
 801f5a0:	6838      	ldr	r0, [r7, #0]
 801f5a2:	f7ed f9d4 	bl	800c94e <_ZNK12SimpleString8containsERKS_>
 801f5a6:	4603      	mov	r3, r0
 801f5a8:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801f5aa:	687b      	ldr	r3, [r7, #4]
 801f5ac:	7a5b      	ldrb	r3, [r3, #9]
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	d004      	beq.n	801f5bc <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801f5b2:	7bfb      	ldrb	r3, [r7, #15]
 801f5b4:	f083 0301 	eor.w	r3, r3, #1
 801f5b8:	b2db      	uxtb	r3, r3
 801f5ba:	e005      	b.n	801f5c8 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801f5bc:	7bfb      	ldrb	r3, [r7, #15]
 801f5be:	2b00      	cmp	r3, #0
 801f5c0:	bf14      	ite	ne
 801f5c2:	2301      	movne	r3, #1
 801f5c4:	2300      	moveq	r3, #0
 801f5c6:	b2db      	uxtb	r3, r3
}
 801f5c8:	4618      	mov	r0, r3
 801f5ca:	3710      	adds	r7, #16
 801f5cc:	46bd      	mov	sp, r7
 801f5ce:	bd80      	pop	{r7, pc}

0801f5d0 <__cxa_guard_acquire>:
 801f5d0:	6803      	ldr	r3, [r0, #0]
 801f5d2:	07db      	lsls	r3, r3, #31
 801f5d4:	d406      	bmi.n	801f5e4 <__cxa_guard_acquire+0x14>
 801f5d6:	7843      	ldrb	r3, [r0, #1]
 801f5d8:	b103      	cbz	r3, 801f5dc <__cxa_guard_acquire+0xc>
 801f5da:	deff      	udf	#255	; 0xff
 801f5dc:	2301      	movs	r3, #1
 801f5de:	7043      	strb	r3, [r0, #1]
 801f5e0:	4618      	mov	r0, r3
 801f5e2:	4770      	bx	lr
 801f5e4:	2000      	movs	r0, #0
 801f5e6:	4770      	bx	lr

0801f5e8 <__cxa_guard_release>:
 801f5e8:	2301      	movs	r3, #1
 801f5ea:	6003      	str	r3, [r0, #0]
 801f5ec:	4770      	bx	lr

0801f5ee <__cxa_pure_virtual>:
 801f5ee:	b508      	push	{r3, lr}
 801f5f0:	f000 f80c 	bl	801f60c <_ZSt9terminatev>

0801f5f4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801f5f4:	b508      	push	{r3, lr}
 801f5f6:	4780      	blx	r0
 801f5f8:	f000 f816 	bl	801f628 <abort>

0801f5fc <_ZSt13get_terminatev>:
 801f5fc:	4b02      	ldr	r3, [pc, #8]	; (801f608 <_ZSt13get_terminatev+0xc>)
 801f5fe:	6818      	ldr	r0, [r3, #0]
 801f600:	f3bf 8f5b 	dmb	ish
 801f604:	4770      	bx	lr
 801f606:	bf00      	nop
 801f608:	20000104 	.word	0x20000104

0801f60c <_ZSt9terminatev>:
 801f60c:	b508      	push	{r3, lr}
 801f60e:	f7ff fff5 	bl	801f5fc <_ZSt13get_terminatev>
 801f612:	f7ff ffef 	bl	801f5f4 <_ZN10__cxxabiv111__terminateEPFvvE>

0801f616 <fabs>:
 801f616:	ec51 0b10 	vmov	r0, r1, d0
 801f61a:	ee10 2a10 	vmov	r2, s0
 801f61e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f622:	ec43 2b10 	vmov	d0, r2, r3
 801f626:	4770      	bx	lr

0801f628 <abort>:
 801f628:	b508      	push	{r3, lr}
 801f62a:	2006      	movs	r0, #6
 801f62c:	f000 ff8c 	bl	8020548 <raise>
 801f630:	2001      	movs	r0, #1
 801f632:	f7e1 fba6 	bl	8000d82 <_exit>

0801f636 <atexit>:
 801f636:	2300      	movs	r3, #0
 801f638:	4601      	mov	r1, r0
 801f63a:	461a      	mov	r2, r3
 801f63c:	4618      	mov	r0, r3
 801f63e:	f002 b9d3 	b.w	80219e8 <__register_exitproc>

0801f642 <atoi>:
 801f642:	220a      	movs	r2, #10
 801f644:	2100      	movs	r1, #0
 801f646:	f001 bdfb 	b.w	8021240 <strtol>
	...

0801f64c <calloc>:
 801f64c:	4b02      	ldr	r3, [pc, #8]	; (801f658 <calloc+0xc>)
 801f64e:	460a      	mov	r2, r1
 801f650:	4601      	mov	r1, r0
 801f652:	6818      	ldr	r0, [r3, #0]
 801f654:	f000 bde8 	b.w	8020228 <_calloc_r>
 801f658:	20000108 	.word	0x20000108

0801f65c <__errno>:
 801f65c:	4b01      	ldr	r3, [pc, #4]	; (801f664 <__errno+0x8>)
 801f65e:	6818      	ldr	r0, [r3, #0]
 801f660:	4770      	bx	lr
 801f662:	bf00      	nop
 801f664:	20000108 	.word	0x20000108

0801f668 <_fclose_r>:
 801f668:	b570      	push	{r4, r5, r6, lr}
 801f66a:	4605      	mov	r5, r0
 801f66c:	460c      	mov	r4, r1
 801f66e:	b911      	cbnz	r1, 801f676 <_fclose_r+0xe>
 801f670:	2600      	movs	r6, #0
 801f672:	4630      	mov	r0, r6
 801f674:	bd70      	pop	{r4, r5, r6, pc}
 801f676:	b118      	cbz	r0, 801f680 <_fclose_r+0x18>
 801f678:	6983      	ldr	r3, [r0, #24]
 801f67a:	b90b      	cbnz	r3, 801f680 <_fclose_r+0x18>
 801f67c:	f000 f994 	bl	801f9a8 <__sinit>
 801f680:	4b2c      	ldr	r3, [pc, #176]	; (801f734 <_fclose_r+0xcc>)
 801f682:	429c      	cmp	r4, r3
 801f684:	d114      	bne.n	801f6b0 <_fclose_r+0x48>
 801f686:	686c      	ldr	r4, [r5, #4]
 801f688:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f68a:	07d8      	lsls	r0, r3, #31
 801f68c:	d405      	bmi.n	801f69a <_fclose_r+0x32>
 801f68e:	89a3      	ldrh	r3, [r4, #12]
 801f690:	0599      	lsls	r1, r3, #22
 801f692:	d402      	bmi.n	801f69a <_fclose_r+0x32>
 801f694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f696:	f000 fd3a 	bl	802010e <__retarget_lock_acquire_recursive>
 801f69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f69e:	b98b      	cbnz	r3, 801f6c4 <_fclose_r+0x5c>
 801f6a0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801f6a2:	f016 0601 	ands.w	r6, r6, #1
 801f6a6:	d1e3      	bne.n	801f670 <_fclose_r+0x8>
 801f6a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f6aa:	f000 fd32 	bl	8020112 <__retarget_lock_release_recursive>
 801f6ae:	e7e0      	b.n	801f672 <_fclose_r+0xa>
 801f6b0:	4b21      	ldr	r3, [pc, #132]	; (801f738 <_fclose_r+0xd0>)
 801f6b2:	429c      	cmp	r4, r3
 801f6b4:	d101      	bne.n	801f6ba <_fclose_r+0x52>
 801f6b6:	68ac      	ldr	r4, [r5, #8]
 801f6b8:	e7e6      	b.n	801f688 <_fclose_r+0x20>
 801f6ba:	4b20      	ldr	r3, [pc, #128]	; (801f73c <_fclose_r+0xd4>)
 801f6bc:	429c      	cmp	r4, r3
 801f6be:	bf08      	it	eq
 801f6c0:	68ec      	ldreq	r4, [r5, #12]
 801f6c2:	e7e1      	b.n	801f688 <_fclose_r+0x20>
 801f6c4:	4621      	mov	r1, r4
 801f6c6:	4628      	mov	r0, r5
 801f6c8:	f000 f842 	bl	801f750 <__sflush_r>
 801f6cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f6ce:	4606      	mov	r6, r0
 801f6d0:	b133      	cbz	r3, 801f6e0 <_fclose_r+0x78>
 801f6d2:	6a21      	ldr	r1, [r4, #32]
 801f6d4:	4628      	mov	r0, r5
 801f6d6:	4798      	blx	r3
 801f6d8:	2800      	cmp	r0, #0
 801f6da:	bfb8      	it	lt
 801f6dc:	f04f 36ff 	movlt.w	r6, #4294967295
 801f6e0:	89a3      	ldrh	r3, [r4, #12]
 801f6e2:	061a      	lsls	r2, r3, #24
 801f6e4:	d503      	bpl.n	801f6ee <_fclose_r+0x86>
 801f6e6:	6921      	ldr	r1, [r4, #16]
 801f6e8:	4628      	mov	r0, r5
 801f6ea:	f000 fdad 	bl	8020248 <_free_r>
 801f6ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f6f0:	b141      	cbz	r1, 801f704 <_fclose_r+0x9c>
 801f6f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f6f6:	4299      	cmp	r1, r3
 801f6f8:	d002      	beq.n	801f700 <_fclose_r+0x98>
 801f6fa:	4628      	mov	r0, r5
 801f6fc:	f000 fda4 	bl	8020248 <_free_r>
 801f700:	2300      	movs	r3, #0
 801f702:	6363      	str	r3, [r4, #52]	; 0x34
 801f704:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801f706:	b121      	cbz	r1, 801f712 <_fclose_r+0xaa>
 801f708:	4628      	mov	r0, r5
 801f70a:	f000 fd9d 	bl	8020248 <_free_r>
 801f70e:	2300      	movs	r3, #0
 801f710:	64a3      	str	r3, [r4, #72]	; 0x48
 801f712:	f000 f931 	bl	801f978 <__sfp_lock_acquire>
 801f716:	2300      	movs	r3, #0
 801f718:	81a3      	strh	r3, [r4, #12]
 801f71a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f71c:	07db      	lsls	r3, r3, #31
 801f71e:	d402      	bmi.n	801f726 <_fclose_r+0xbe>
 801f720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f722:	f000 fcf6 	bl	8020112 <__retarget_lock_release_recursive>
 801f726:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f728:	f000 fcef 	bl	802010a <__retarget_lock_close_recursive>
 801f72c:	f000 f92a 	bl	801f984 <__sfp_lock_release>
 801f730:	e79f      	b.n	801f672 <_fclose_r+0xa>
 801f732:	bf00      	nop
 801f734:	08028e68 	.word	0x08028e68
 801f738:	08028e88 	.word	0x08028e88
 801f73c:	08028e48 	.word	0x08028e48

0801f740 <fclose>:
 801f740:	4b02      	ldr	r3, [pc, #8]	; (801f74c <fclose+0xc>)
 801f742:	4601      	mov	r1, r0
 801f744:	6818      	ldr	r0, [r3, #0]
 801f746:	f7ff bf8f 	b.w	801f668 <_fclose_r>
 801f74a:	bf00      	nop
 801f74c:	20000108 	.word	0x20000108

0801f750 <__sflush_r>:
 801f750:	898a      	ldrh	r2, [r1, #12]
 801f752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f756:	4605      	mov	r5, r0
 801f758:	0710      	lsls	r0, r2, #28
 801f75a:	460c      	mov	r4, r1
 801f75c:	d458      	bmi.n	801f810 <__sflush_r+0xc0>
 801f75e:	684b      	ldr	r3, [r1, #4]
 801f760:	2b00      	cmp	r3, #0
 801f762:	dc05      	bgt.n	801f770 <__sflush_r+0x20>
 801f764:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f766:	2b00      	cmp	r3, #0
 801f768:	dc02      	bgt.n	801f770 <__sflush_r+0x20>
 801f76a:	2000      	movs	r0, #0
 801f76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f772:	2e00      	cmp	r6, #0
 801f774:	d0f9      	beq.n	801f76a <__sflush_r+0x1a>
 801f776:	2300      	movs	r3, #0
 801f778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f77c:	682f      	ldr	r7, [r5, #0]
 801f77e:	602b      	str	r3, [r5, #0]
 801f780:	d032      	beq.n	801f7e8 <__sflush_r+0x98>
 801f782:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f784:	89a3      	ldrh	r3, [r4, #12]
 801f786:	075a      	lsls	r2, r3, #29
 801f788:	d505      	bpl.n	801f796 <__sflush_r+0x46>
 801f78a:	6863      	ldr	r3, [r4, #4]
 801f78c:	1ac0      	subs	r0, r0, r3
 801f78e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f790:	b10b      	cbz	r3, 801f796 <__sflush_r+0x46>
 801f792:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f794:	1ac0      	subs	r0, r0, r3
 801f796:	2300      	movs	r3, #0
 801f798:	4602      	mov	r2, r0
 801f79a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f79c:	6a21      	ldr	r1, [r4, #32]
 801f79e:	4628      	mov	r0, r5
 801f7a0:	47b0      	blx	r6
 801f7a2:	1c43      	adds	r3, r0, #1
 801f7a4:	89a3      	ldrh	r3, [r4, #12]
 801f7a6:	d106      	bne.n	801f7b6 <__sflush_r+0x66>
 801f7a8:	6829      	ldr	r1, [r5, #0]
 801f7aa:	291d      	cmp	r1, #29
 801f7ac:	d82c      	bhi.n	801f808 <__sflush_r+0xb8>
 801f7ae:	4a2a      	ldr	r2, [pc, #168]	; (801f858 <__sflush_r+0x108>)
 801f7b0:	40ca      	lsrs	r2, r1
 801f7b2:	07d6      	lsls	r6, r2, #31
 801f7b4:	d528      	bpl.n	801f808 <__sflush_r+0xb8>
 801f7b6:	2200      	movs	r2, #0
 801f7b8:	6062      	str	r2, [r4, #4]
 801f7ba:	04d9      	lsls	r1, r3, #19
 801f7bc:	6922      	ldr	r2, [r4, #16]
 801f7be:	6022      	str	r2, [r4, #0]
 801f7c0:	d504      	bpl.n	801f7cc <__sflush_r+0x7c>
 801f7c2:	1c42      	adds	r2, r0, #1
 801f7c4:	d101      	bne.n	801f7ca <__sflush_r+0x7a>
 801f7c6:	682b      	ldr	r3, [r5, #0]
 801f7c8:	b903      	cbnz	r3, 801f7cc <__sflush_r+0x7c>
 801f7ca:	6560      	str	r0, [r4, #84]	; 0x54
 801f7cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f7ce:	602f      	str	r7, [r5, #0]
 801f7d0:	2900      	cmp	r1, #0
 801f7d2:	d0ca      	beq.n	801f76a <__sflush_r+0x1a>
 801f7d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f7d8:	4299      	cmp	r1, r3
 801f7da:	d002      	beq.n	801f7e2 <__sflush_r+0x92>
 801f7dc:	4628      	mov	r0, r5
 801f7de:	f000 fd33 	bl	8020248 <_free_r>
 801f7e2:	2000      	movs	r0, #0
 801f7e4:	6360      	str	r0, [r4, #52]	; 0x34
 801f7e6:	e7c1      	b.n	801f76c <__sflush_r+0x1c>
 801f7e8:	6a21      	ldr	r1, [r4, #32]
 801f7ea:	2301      	movs	r3, #1
 801f7ec:	4628      	mov	r0, r5
 801f7ee:	47b0      	blx	r6
 801f7f0:	1c41      	adds	r1, r0, #1
 801f7f2:	d1c7      	bne.n	801f784 <__sflush_r+0x34>
 801f7f4:	682b      	ldr	r3, [r5, #0]
 801f7f6:	2b00      	cmp	r3, #0
 801f7f8:	d0c4      	beq.n	801f784 <__sflush_r+0x34>
 801f7fa:	2b1d      	cmp	r3, #29
 801f7fc:	d001      	beq.n	801f802 <__sflush_r+0xb2>
 801f7fe:	2b16      	cmp	r3, #22
 801f800:	d101      	bne.n	801f806 <__sflush_r+0xb6>
 801f802:	602f      	str	r7, [r5, #0]
 801f804:	e7b1      	b.n	801f76a <__sflush_r+0x1a>
 801f806:	89a3      	ldrh	r3, [r4, #12]
 801f808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f80c:	81a3      	strh	r3, [r4, #12]
 801f80e:	e7ad      	b.n	801f76c <__sflush_r+0x1c>
 801f810:	690f      	ldr	r7, [r1, #16]
 801f812:	2f00      	cmp	r7, #0
 801f814:	d0a9      	beq.n	801f76a <__sflush_r+0x1a>
 801f816:	0793      	lsls	r3, r2, #30
 801f818:	680e      	ldr	r6, [r1, #0]
 801f81a:	bf08      	it	eq
 801f81c:	694b      	ldreq	r3, [r1, #20]
 801f81e:	600f      	str	r7, [r1, #0]
 801f820:	bf18      	it	ne
 801f822:	2300      	movne	r3, #0
 801f824:	eba6 0807 	sub.w	r8, r6, r7
 801f828:	608b      	str	r3, [r1, #8]
 801f82a:	f1b8 0f00 	cmp.w	r8, #0
 801f82e:	dd9c      	ble.n	801f76a <__sflush_r+0x1a>
 801f830:	6a21      	ldr	r1, [r4, #32]
 801f832:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f834:	4643      	mov	r3, r8
 801f836:	463a      	mov	r2, r7
 801f838:	4628      	mov	r0, r5
 801f83a:	47b0      	blx	r6
 801f83c:	2800      	cmp	r0, #0
 801f83e:	dc06      	bgt.n	801f84e <__sflush_r+0xfe>
 801f840:	89a3      	ldrh	r3, [r4, #12]
 801f842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f846:	81a3      	strh	r3, [r4, #12]
 801f848:	f04f 30ff 	mov.w	r0, #4294967295
 801f84c:	e78e      	b.n	801f76c <__sflush_r+0x1c>
 801f84e:	4407      	add	r7, r0
 801f850:	eba8 0800 	sub.w	r8, r8, r0
 801f854:	e7e9      	b.n	801f82a <__sflush_r+0xda>
 801f856:	bf00      	nop
 801f858:	20400001 	.word	0x20400001

0801f85c <_fflush_r>:
 801f85c:	b538      	push	{r3, r4, r5, lr}
 801f85e:	690b      	ldr	r3, [r1, #16]
 801f860:	4605      	mov	r5, r0
 801f862:	460c      	mov	r4, r1
 801f864:	b913      	cbnz	r3, 801f86c <_fflush_r+0x10>
 801f866:	2500      	movs	r5, #0
 801f868:	4628      	mov	r0, r5
 801f86a:	bd38      	pop	{r3, r4, r5, pc}
 801f86c:	b118      	cbz	r0, 801f876 <_fflush_r+0x1a>
 801f86e:	6983      	ldr	r3, [r0, #24]
 801f870:	b90b      	cbnz	r3, 801f876 <_fflush_r+0x1a>
 801f872:	f000 f899 	bl	801f9a8 <__sinit>
 801f876:	4b14      	ldr	r3, [pc, #80]	; (801f8c8 <_fflush_r+0x6c>)
 801f878:	429c      	cmp	r4, r3
 801f87a:	d11b      	bne.n	801f8b4 <_fflush_r+0x58>
 801f87c:	686c      	ldr	r4, [r5, #4]
 801f87e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f882:	2b00      	cmp	r3, #0
 801f884:	d0ef      	beq.n	801f866 <_fflush_r+0xa>
 801f886:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f888:	07d0      	lsls	r0, r2, #31
 801f88a:	d404      	bmi.n	801f896 <_fflush_r+0x3a>
 801f88c:	0599      	lsls	r1, r3, #22
 801f88e:	d402      	bmi.n	801f896 <_fflush_r+0x3a>
 801f890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f892:	f000 fc3c 	bl	802010e <__retarget_lock_acquire_recursive>
 801f896:	4628      	mov	r0, r5
 801f898:	4621      	mov	r1, r4
 801f89a:	f7ff ff59 	bl	801f750 <__sflush_r>
 801f89e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f8a0:	07da      	lsls	r2, r3, #31
 801f8a2:	4605      	mov	r5, r0
 801f8a4:	d4e0      	bmi.n	801f868 <_fflush_r+0xc>
 801f8a6:	89a3      	ldrh	r3, [r4, #12]
 801f8a8:	059b      	lsls	r3, r3, #22
 801f8aa:	d4dd      	bmi.n	801f868 <_fflush_r+0xc>
 801f8ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f8ae:	f000 fc30 	bl	8020112 <__retarget_lock_release_recursive>
 801f8b2:	e7d9      	b.n	801f868 <_fflush_r+0xc>
 801f8b4:	4b05      	ldr	r3, [pc, #20]	; (801f8cc <_fflush_r+0x70>)
 801f8b6:	429c      	cmp	r4, r3
 801f8b8:	d101      	bne.n	801f8be <_fflush_r+0x62>
 801f8ba:	68ac      	ldr	r4, [r5, #8]
 801f8bc:	e7df      	b.n	801f87e <_fflush_r+0x22>
 801f8be:	4b04      	ldr	r3, [pc, #16]	; (801f8d0 <_fflush_r+0x74>)
 801f8c0:	429c      	cmp	r4, r3
 801f8c2:	bf08      	it	eq
 801f8c4:	68ec      	ldreq	r4, [r5, #12]
 801f8c6:	e7da      	b.n	801f87e <_fflush_r+0x22>
 801f8c8:	08028e68 	.word	0x08028e68
 801f8cc:	08028e88 	.word	0x08028e88
 801f8d0:	08028e48 	.word	0x08028e48

0801f8d4 <fflush>:
 801f8d4:	4601      	mov	r1, r0
 801f8d6:	b920      	cbnz	r0, 801f8e2 <fflush+0xe>
 801f8d8:	4b04      	ldr	r3, [pc, #16]	; (801f8ec <fflush+0x18>)
 801f8da:	4905      	ldr	r1, [pc, #20]	; (801f8f0 <fflush+0x1c>)
 801f8dc:	6818      	ldr	r0, [r3, #0]
 801f8de:	f000 babb 	b.w	801fe58 <_fwalk_reent>
 801f8e2:	4b04      	ldr	r3, [pc, #16]	; (801f8f4 <fflush+0x20>)
 801f8e4:	6818      	ldr	r0, [r3, #0]
 801f8e6:	f7ff bfb9 	b.w	801f85c <_fflush_r>
 801f8ea:	bf00      	nop
 801f8ec:	08028ea8 	.word	0x08028ea8
 801f8f0:	0801f85d 	.word	0x0801f85d
 801f8f4:	20000108 	.word	0x20000108

0801f8f8 <std>:
 801f8f8:	2300      	movs	r3, #0
 801f8fa:	b510      	push	{r4, lr}
 801f8fc:	4604      	mov	r4, r0
 801f8fe:	e9c0 3300 	strd	r3, r3, [r0]
 801f902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f906:	6083      	str	r3, [r0, #8]
 801f908:	8181      	strh	r1, [r0, #12]
 801f90a:	6643      	str	r3, [r0, #100]	; 0x64
 801f90c:	81c2      	strh	r2, [r0, #14]
 801f90e:	6183      	str	r3, [r0, #24]
 801f910:	4619      	mov	r1, r3
 801f912:	2208      	movs	r2, #8
 801f914:	305c      	adds	r0, #92	; 0x5c
 801f916:	f000 fc7f 	bl	8020218 <memset>
 801f91a:	4b05      	ldr	r3, [pc, #20]	; (801f930 <std+0x38>)
 801f91c:	6263      	str	r3, [r4, #36]	; 0x24
 801f91e:	4b05      	ldr	r3, [pc, #20]	; (801f934 <std+0x3c>)
 801f920:	62a3      	str	r3, [r4, #40]	; 0x28
 801f922:	4b05      	ldr	r3, [pc, #20]	; (801f938 <std+0x40>)
 801f924:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f926:	4b05      	ldr	r3, [pc, #20]	; (801f93c <std+0x44>)
 801f928:	6224      	str	r4, [r4, #32]
 801f92a:	6323      	str	r3, [r4, #48]	; 0x30
 801f92c:	bd10      	pop	{r4, pc}
 801f92e:	bf00      	nop
 801f930:	080205c1 	.word	0x080205c1
 801f934:	080205e7 	.word	0x080205e7
 801f938:	0802061f 	.word	0x0802061f
 801f93c:	08020643 	.word	0x08020643

0801f940 <_cleanup_r>:
 801f940:	4901      	ldr	r1, [pc, #4]	; (801f948 <_cleanup_r+0x8>)
 801f942:	f000 ba89 	b.w	801fe58 <_fwalk_reent>
 801f946:	bf00      	nop
 801f948:	0801f85d 	.word	0x0801f85d

0801f94c <__sfmoreglue>:
 801f94c:	b570      	push	{r4, r5, r6, lr}
 801f94e:	1e4a      	subs	r2, r1, #1
 801f950:	2568      	movs	r5, #104	; 0x68
 801f952:	4355      	muls	r5, r2
 801f954:	460e      	mov	r6, r1
 801f956:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f95a:	f000 fcc5 	bl	80202e8 <_malloc_r>
 801f95e:	4604      	mov	r4, r0
 801f960:	b140      	cbz	r0, 801f974 <__sfmoreglue+0x28>
 801f962:	2100      	movs	r1, #0
 801f964:	e9c0 1600 	strd	r1, r6, [r0]
 801f968:	300c      	adds	r0, #12
 801f96a:	60a0      	str	r0, [r4, #8]
 801f96c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f970:	f000 fc52 	bl	8020218 <memset>
 801f974:	4620      	mov	r0, r4
 801f976:	bd70      	pop	{r4, r5, r6, pc}

0801f978 <__sfp_lock_acquire>:
 801f978:	4801      	ldr	r0, [pc, #4]	; (801f980 <__sfp_lock_acquire+0x8>)
 801f97a:	f000 bbc8 	b.w	802010e <__retarget_lock_acquire_recursive>
 801f97e:	bf00      	nop
 801f980:	20000f4c 	.word	0x20000f4c

0801f984 <__sfp_lock_release>:
 801f984:	4801      	ldr	r0, [pc, #4]	; (801f98c <__sfp_lock_release+0x8>)
 801f986:	f000 bbc4 	b.w	8020112 <__retarget_lock_release_recursive>
 801f98a:	bf00      	nop
 801f98c:	20000f4c 	.word	0x20000f4c

0801f990 <__sinit_lock_acquire>:
 801f990:	4801      	ldr	r0, [pc, #4]	; (801f998 <__sinit_lock_acquire+0x8>)
 801f992:	f000 bbbc 	b.w	802010e <__retarget_lock_acquire_recursive>
 801f996:	bf00      	nop
 801f998:	20000f47 	.word	0x20000f47

0801f99c <__sinit_lock_release>:
 801f99c:	4801      	ldr	r0, [pc, #4]	; (801f9a4 <__sinit_lock_release+0x8>)
 801f99e:	f000 bbb8 	b.w	8020112 <__retarget_lock_release_recursive>
 801f9a2:	bf00      	nop
 801f9a4:	20000f47 	.word	0x20000f47

0801f9a8 <__sinit>:
 801f9a8:	b510      	push	{r4, lr}
 801f9aa:	4604      	mov	r4, r0
 801f9ac:	f7ff fff0 	bl	801f990 <__sinit_lock_acquire>
 801f9b0:	69a3      	ldr	r3, [r4, #24]
 801f9b2:	b11b      	cbz	r3, 801f9bc <__sinit+0x14>
 801f9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f9b8:	f7ff bff0 	b.w	801f99c <__sinit_lock_release>
 801f9bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f9c0:	6523      	str	r3, [r4, #80]	; 0x50
 801f9c2:	4b13      	ldr	r3, [pc, #76]	; (801fa10 <__sinit+0x68>)
 801f9c4:	4a13      	ldr	r2, [pc, #76]	; (801fa14 <__sinit+0x6c>)
 801f9c6:	681b      	ldr	r3, [r3, #0]
 801f9c8:	62a2      	str	r2, [r4, #40]	; 0x28
 801f9ca:	42a3      	cmp	r3, r4
 801f9cc:	bf04      	itt	eq
 801f9ce:	2301      	moveq	r3, #1
 801f9d0:	61a3      	streq	r3, [r4, #24]
 801f9d2:	4620      	mov	r0, r4
 801f9d4:	f000 f820 	bl	801fa18 <__sfp>
 801f9d8:	6060      	str	r0, [r4, #4]
 801f9da:	4620      	mov	r0, r4
 801f9dc:	f000 f81c 	bl	801fa18 <__sfp>
 801f9e0:	60a0      	str	r0, [r4, #8]
 801f9e2:	4620      	mov	r0, r4
 801f9e4:	f000 f818 	bl	801fa18 <__sfp>
 801f9e8:	2200      	movs	r2, #0
 801f9ea:	60e0      	str	r0, [r4, #12]
 801f9ec:	2104      	movs	r1, #4
 801f9ee:	6860      	ldr	r0, [r4, #4]
 801f9f0:	f7ff ff82 	bl	801f8f8 <std>
 801f9f4:	68a0      	ldr	r0, [r4, #8]
 801f9f6:	2201      	movs	r2, #1
 801f9f8:	2109      	movs	r1, #9
 801f9fa:	f7ff ff7d 	bl	801f8f8 <std>
 801f9fe:	68e0      	ldr	r0, [r4, #12]
 801fa00:	2202      	movs	r2, #2
 801fa02:	2112      	movs	r1, #18
 801fa04:	f7ff ff78 	bl	801f8f8 <std>
 801fa08:	2301      	movs	r3, #1
 801fa0a:	61a3      	str	r3, [r4, #24]
 801fa0c:	e7d2      	b.n	801f9b4 <__sinit+0xc>
 801fa0e:	bf00      	nop
 801fa10:	08028ea8 	.word	0x08028ea8
 801fa14:	0801f941 	.word	0x0801f941

0801fa18 <__sfp>:
 801fa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa1a:	4607      	mov	r7, r0
 801fa1c:	f7ff ffac 	bl	801f978 <__sfp_lock_acquire>
 801fa20:	4b1e      	ldr	r3, [pc, #120]	; (801fa9c <__sfp+0x84>)
 801fa22:	681e      	ldr	r6, [r3, #0]
 801fa24:	69b3      	ldr	r3, [r6, #24]
 801fa26:	b913      	cbnz	r3, 801fa2e <__sfp+0x16>
 801fa28:	4630      	mov	r0, r6
 801fa2a:	f7ff ffbd 	bl	801f9a8 <__sinit>
 801fa2e:	3648      	adds	r6, #72	; 0x48
 801fa30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801fa34:	3b01      	subs	r3, #1
 801fa36:	d503      	bpl.n	801fa40 <__sfp+0x28>
 801fa38:	6833      	ldr	r3, [r6, #0]
 801fa3a:	b30b      	cbz	r3, 801fa80 <__sfp+0x68>
 801fa3c:	6836      	ldr	r6, [r6, #0]
 801fa3e:	e7f7      	b.n	801fa30 <__sfp+0x18>
 801fa40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801fa44:	b9d5      	cbnz	r5, 801fa7c <__sfp+0x64>
 801fa46:	4b16      	ldr	r3, [pc, #88]	; (801faa0 <__sfp+0x88>)
 801fa48:	60e3      	str	r3, [r4, #12]
 801fa4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801fa4e:	6665      	str	r5, [r4, #100]	; 0x64
 801fa50:	f000 fb5a 	bl	8020108 <__retarget_lock_init_recursive>
 801fa54:	f7ff ff96 	bl	801f984 <__sfp_lock_release>
 801fa58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801fa5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801fa60:	6025      	str	r5, [r4, #0]
 801fa62:	61a5      	str	r5, [r4, #24]
 801fa64:	2208      	movs	r2, #8
 801fa66:	4629      	mov	r1, r5
 801fa68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801fa6c:	f000 fbd4 	bl	8020218 <memset>
 801fa70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801fa74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801fa78:	4620      	mov	r0, r4
 801fa7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa7c:	3468      	adds	r4, #104	; 0x68
 801fa7e:	e7d9      	b.n	801fa34 <__sfp+0x1c>
 801fa80:	2104      	movs	r1, #4
 801fa82:	4638      	mov	r0, r7
 801fa84:	f7ff ff62 	bl	801f94c <__sfmoreglue>
 801fa88:	4604      	mov	r4, r0
 801fa8a:	6030      	str	r0, [r6, #0]
 801fa8c:	2800      	cmp	r0, #0
 801fa8e:	d1d5      	bne.n	801fa3c <__sfp+0x24>
 801fa90:	f7ff ff78 	bl	801f984 <__sfp_lock_release>
 801fa94:	230c      	movs	r3, #12
 801fa96:	603b      	str	r3, [r7, #0]
 801fa98:	e7ee      	b.n	801fa78 <__sfp+0x60>
 801fa9a:	bf00      	nop
 801fa9c:	08028ea8 	.word	0x08028ea8
 801faa0:	ffff0001 	.word	0xffff0001

0801faa4 <_fopen_r>:
 801faa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801faa6:	460f      	mov	r7, r1
 801faa8:	4611      	mov	r1, r2
 801faaa:	aa01      	add	r2, sp, #4
 801faac:	4605      	mov	r5, r0
 801faae:	f002 f82f 	bl	8021b10 <__sflags>
 801fab2:	4606      	mov	r6, r0
 801fab4:	b918      	cbnz	r0, 801fabe <_fopen_r+0x1a>
 801fab6:	2400      	movs	r4, #0
 801fab8:	4620      	mov	r0, r4
 801faba:	b003      	add	sp, #12
 801fabc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fabe:	4628      	mov	r0, r5
 801fac0:	f7ff ffaa 	bl	801fa18 <__sfp>
 801fac4:	4604      	mov	r4, r0
 801fac6:	2800      	cmp	r0, #0
 801fac8:	d0f5      	beq.n	801fab6 <_fopen_r+0x12>
 801faca:	4639      	mov	r1, r7
 801facc:	9a01      	ldr	r2, [sp, #4]
 801face:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801fad2:	4628      	mov	r0, r5
 801fad4:	f000 fc62 	bl	802039c <_open_r>
 801fad8:	1e07      	subs	r7, r0, #0
 801fada:	da09      	bge.n	801faf0 <_fopen_r+0x4c>
 801fadc:	2500      	movs	r5, #0
 801fade:	f7ff ff4b 	bl	801f978 <__sfp_lock_acquire>
 801fae2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fae4:	81a5      	strh	r5, [r4, #12]
 801fae6:	f000 fb10 	bl	802010a <__retarget_lock_close_recursive>
 801faea:	f7ff ff4b 	bl	801f984 <__sfp_lock_release>
 801faee:	e7e2      	b.n	801fab6 <_fopen_r+0x12>
 801faf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801faf2:	07db      	lsls	r3, r3, #31
 801faf4:	d405      	bmi.n	801fb02 <_fopen_r+0x5e>
 801faf6:	89a3      	ldrh	r3, [r4, #12]
 801faf8:	0598      	lsls	r0, r3, #22
 801fafa:	d402      	bmi.n	801fb02 <_fopen_r+0x5e>
 801fafc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fafe:	f000 fb06 	bl	802010e <__retarget_lock_acquire_recursive>
 801fb02:	4b0e      	ldr	r3, [pc, #56]	; (801fb3c <_fopen_r+0x98>)
 801fb04:	6263      	str	r3, [r4, #36]	; 0x24
 801fb06:	4b0e      	ldr	r3, [pc, #56]	; (801fb40 <_fopen_r+0x9c>)
 801fb08:	62a3      	str	r3, [r4, #40]	; 0x28
 801fb0a:	4b0e      	ldr	r3, [pc, #56]	; (801fb44 <_fopen_r+0xa0>)
 801fb0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801fb0e:	05f1      	lsls	r1, r6, #23
 801fb10:	4b0d      	ldr	r3, [pc, #52]	; (801fb48 <_fopen_r+0xa4>)
 801fb12:	81e7      	strh	r7, [r4, #14]
 801fb14:	81a6      	strh	r6, [r4, #12]
 801fb16:	6224      	str	r4, [r4, #32]
 801fb18:	6323      	str	r3, [r4, #48]	; 0x30
 801fb1a:	d505      	bpl.n	801fb28 <_fopen_r+0x84>
 801fb1c:	2302      	movs	r3, #2
 801fb1e:	2200      	movs	r2, #0
 801fb20:	4621      	mov	r1, r4
 801fb22:	4628      	mov	r0, r5
 801fb24:	f000 f888 	bl	801fc38 <_fseek_r>
 801fb28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fb2a:	07da      	lsls	r2, r3, #31
 801fb2c:	d4c4      	bmi.n	801fab8 <_fopen_r+0x14>
 801fb2e:	89a3      	ldrh	r3, [r4, #12]
 801fb30:	059b      	lsls	r3, r3, #22
 801fb32:	d4c1      	bmi.n	801fab8 <_fopen_r+0x14>
 801fb34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb36:	f000 faec 	bl	8020112 <__retarget_lock_release_recursive>
 801fb3a:	e7bd      	b.n	801fab8 <_fopen_r+0x14>
 801fb3c:	080205c1 	.word	0x080205c1
 801fb40:	080205e7 	.word	0x080205e7
 801fb44:	0802061f 	.word	0x0802061f
 801fb48:	08020643 	.word	0x08020643

0801fb4c <fopen>:
 801fb4c:	4b02      	ldr	r3, [pc, #8]	; (801fb58 <fopen+0xc>)
 801fb4e:	460a      	mov	r2, r1
 801fb50:	4601      	mov	r1, r0
 801fb52:	6818      	ldr	r0, [r3, #0]
 801fb54:	f7ff bfa6 	b.w	801faa4 <_fopen_r>
 801fb58:	20000108 	.word	0x20000108

0801fb5c <_fputs_r>:
 801fb5c:	b570      	push	{r4, r5, r6, lr}
 801fb5e:	460e      	mov	r6, r1
 801fb60:	4614      	mov	r4, r2
 801fb62:	4605      	mov	r5, r0
 801fb64:	b118      	cbz	r0, 801fb6e <_fputs_r+0x12>
 801fb66:	6983      	ldr	r3, [r0, #24]
 801fb68:	b90b      	cbnz	r3, 801fb6e <_fputs_r+0x12>
 801fb6a:	f7ff ff1d 	bl	801f9a8 <__sinit>
 801fb6e:	4b2b      	ldr	r3, [pc, #172]	; (801fc1c <_fputs_r+0xc0>)
 801fb70:	429c      	cmp	r4, r3
 801fb72:	d11e      	bne.n	801fbb2 <_fputs_r+0x56>
 801fb74:	686c      	ldr	r4, [r5, #4]
 801fb76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fb78:	07da      	lsls	r2, r3, #31
 801fb7a:	d405      	bmi.n	801fb88 <_fputs_r+0x2c>
 801fb7c:	89a3      	ldrh	r3, [r4, #12]
 801fb7e:	059b      	lsls	r3, r3, #22
 801fb80:	d402      	bmi.n	801fb88 <_fputs_r+0x2c>
 801fb82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb84:	f000 fac3 	bl	802010e <__retarget_lock_acquire_recursive>
 801fb88:	89a3      	ldrh	r3, [r4, #12]
 801fb8a:	0718      	lsls	r0, r3, #28
 801fb8c:	d51b      	bpl.n	801fbc6 <_fputs_r+0x6a>
 801fb8e:	6923      	ldr	r3, [r4, #16]
 801fb90:	b1cb      	cbz	r3, 801fbc6 <_fputs_r+0x6a>
 801fb92:	3e01      	subs	r6, #1
 801fb94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801fb98:	bb39      	cbnz	r1, 801fbea <_fputs_r+0x8e>
 801fb9a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801fb9c:	f015 0501 	ands.w	r5, r5, #1
 801fba0:	d139      	bne.n	801fc16 <_fputs_r+0xba>
 801fba2:	89a3      	ldrh	r3, [r4, #12]
 801fba4:	0599      	lsls	r1, r3, #22
 801fba6:	d402      	bmi.n	801fbae <_fputs_r+0x52>
 801fba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fbaa:	f000 fab2 	bl	8020112 <__retarget_lock_release_recursive>
 801fbae:	4628      	mov	r0, r5
 801fbb0:	bd70      	pop	{r4, r5, r6, pc}
 801fbb2:	4b1b      	ldr	r3, [pc, #108]	; (801fc20 <_fputs_r+0xc4>)
 801fbb4:	429c      	cmp	r4, r3
 801fbb6:	d101      	bne.n	801fbbc <_fputs_r+0x60>
 801fbb8:	68ac      	ldr	r4, [r5, #8]
 801fbba:	e7dc      	b.n	801fb76 <_fputs_r+0x1a>
 801fbbc:	4b19      	ldr	r3, [pc, #100]	; (801fc24 <_fputs_r+0xc8>)
 801fbbe:	429c      	cmp	r4, r3
 801fbc0:	bf08      	it	eq
 801fbc2:	68ec      	ldreq	r4, [r5, #12]
 801fbc4:	e7d7      	b.n	801fb76 <_fputs_r+0x1a>
 801fbc6:	4621      	mov	r1, r4
 801fbc8:	4628      	mov	r0, r5
 801fbca:	f001 fe9f 	bl	802190c <__swsetup_r>
 801fbce:	2800      	cmp	r0, #0
 801fbd0:	d0df      	beq.n	801fb92 <_fputs_r+0x36>
 801fbd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fbd4:	07da      	lsls	r2, r3, #31
 801fbd6:	d405      	bmi.n	801fbe4 <_fputs_r+0x88>
 801fbd8:	89a3      	ldrh	r3, [r4, #12]
 801fbda:	059b      	lsls	r3, r3, #22
 801fbdc:	d402      	bmi.n	801fbe4 <_fputs_r+0x88>
 801fbde:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fbe0:	f000 fa97 	bl	8020112 <__retarget_lock_release_recursive>
 801fbe4:	f04f 35ff 	mov.w	r5, #4294967295
 801fbe8:	e7e1      	b.n	801fbae <_fputs_r+0x52>
 801fbea:	68a3      	ldr	r3, [r4, #8]
 801fbec:	3b01      	subs	r3, #1
 801fbee:	2b00      	cmp	r3, #0
 801fbf0:	60a3      	str	r3, [r4, #8]
 801fbf2:	da04      	bge.n	801fbfe <_fputs_r+0xa2>
 801fbf4:	69a2      	ldr	r2, [r4, #24]
 801fbf6:	4293      	cmp	r3, r2
 801fbf8:	db06      	blt.n	801fc08 <_fputs_r+0xac>
 801fbfa:	290a      	cmp	r1, #10
 801fbfc:	d004      	beq.n	801fc08 <_fputs_r+0xac>
 801fbfe:	6823      	ldr	r3, [r4, #0]
 801fc00:	1c5a      	adds	r2, r3, #1
 801fc02:	6022      	str	r2, [r4, #0]
 801fc04:	7019      	strb	r1, [r3, #0]
 801fc06:	e7c5      	b.n	801fb94 <_fputs_r+0x38>
 801fc08:	4622      	mov	r2, r4
 801fc0a:	4628      	mov	r0, r5
 801fc0c:	f001 fe1a 	bl	8021844 <__swbuf_r>
 801fc10:	3001      	adds	r0, #1
 801fc12:	d1bf      	bne.n	801fb94 <_fputs_r+0x38>
 801fc14:	e7dd      	b.n	801fbd2 <_fputs_r+0x76>
 801fc16:	460d      	mov	r5, r1
 801fc18:	e7c9      	b.n	801fbae <_fputs_r+0x52>
 801fc1a:	bf00      	nop
 801fc1c:	08028e68 	.word	0x08028e68
 801fc20:	08028e88 	.word	0x08028e88
 801fc24:	08028e48 	.word	0x08028e48

0801fc28 <fputs>:
 801fc28:	4b02      	ldr	r3, [pc, #8]	; (801fc34 <fputs+0xc>)
 801fc2a:	460a      	mov	r2, r1
 801fc2c:	4601      	mov	r1, r0
 801fc2e:	6818      	ldr	r0, [r3, #0]
 801fc30:	f7ff bf94 	b.w	801fb5c <_fputs_r>
 801fc34:	20000108 	.word	0x20000108

0801fc38 <_fseek_r>:
 801fc38:	f000 b800 	b.w	801fc3c <_fseeko_r>

0801fc3c <_fseeko_r>:
 801fc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc40:	460c      	mov	r4, r1
 801fc42:	4617      	mov	r7, r2
 801fc44:	461e      	mov	r6, r3
 801fc46:	4605      	mov	r5, r0
 801fc48:	b118      	cbz	r0, 801fc52 <_fseeko_r+0x16>
 801fc4a:	6983      	ldr	r3, [r0, #24]
 801fc4c:	b90b      	cbnz	r3, 801fc52 <_fseeko_r+0x16>
 801fc4e:	f7ff feab 	bl	801f9a8 <__sinit>
 801fc52:	4b44      	ldr	r3, [pc, #272]	; (801fd64 <_fseeko_r+0x128>)
 801fc54:	429c      	cmp	r4, r3
 801fc56:	d122      	bne.n	801fc9e <_fseeko_r+0x62>
 801fc58:	686c      	ldr	r4, [r5, #4]
 801fc5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fc5c:	07d9      	lsls	r1, r3, #31
 801fc5e:	d405      	bmi.n	801fc6c <_fseeko_r+0x30>
 801fc60:	89a3      	ldrh	r3, [r4, #12]
 801fc62:	059a      	lsls	r2, r3, #22
 801fc64:	d402      	bmi.n	801fc6c <_fseeko_r+0x30>
 801fc66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fc68:	f000 fa51 	bl	802010e <__retarget_lock_acquire_recursive>
 801fc6c:	89a3      	ldrh	r3, [r4, #12]
 801fc6e:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801fc72:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801fc76:	d103      	bne.n	801fc80 <_fseeko_r+0x44>
 801fc78:	4621      	mov	r1, r4
 801fc7a:	4628      	mov	r0, r5
 801fc7c:	f7ff fdee 	bl	801f85c <_fflush_r>
 801fc80:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801fc84:	f1b8 0f00 	cmp.w	r8, #0
 801fc88:	d113      	bne.n	801fcb2 <_fseeko_r+0x76>
 801fc8a:	231d      	movs	r3, #29
 801fc8c:	602b      	str	r3, [r5, #0]
 801fc8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fc90:	07d9      	lsls	r1, r3, #31
 801fc92:	d55d      	bpl.n	801fd50 <_fseeko_r+0x114>
 801fc94:	f04f 36ff 	mov.w	r6, #4294967295
 801fc98:	4630      	mov	r0, r6
 801fc9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fc9e:	4b32      	ldr	r3, [pc, #200]	; (801fd68 <_fseeko_r+0x12c>)
 801fca0:	429c      	cmp	r4, r3
 801fca2:	d101      	bne.n	801fca8 <_fseeko_r+0x6c>
 801fca4:	68ac      	ldr	r4, [r5, #8]
 801fca6:	e7d8      	b.n	801fc5a <_fseeko_r+0x1e>
 801fca8:	4b30      	ldr	r3, [pc, #192]	; (801fd6c <_fseeko_r+0x130>)
 801fcaa:	429c      	cmp	r4, r3
 801fcac:	bf08      	it	eq
 801fcae:	68ec      	ldreq	r4, [r5, #12]
 801fcb0:	e7d3      	b.n	801fc5a <_fseeko_r+0x1e>
 801fcb2:	2e01      	cmp	r6, #1
 801fcb4:	d036      	beq.n	801fd24 <_fseeko_r+0xe8>
 801fcb6:	f036 0302 	bics.w	r3, r6, #2
 801fcba:	d147      	bne.n	801fd4c <_fseeko_r+0x110>
 801fcbc:	6923      	ldr	r3, [r4, #16]
 801fcbe:	b91b      	cbnz	r3, 801fcc8 <_fseeko_r+0x8c>
 801fcc0:	4621      	mov	r1, r4
 801fcc2:	4628      	mov	r0, r5
 801fcc4:	f000 fa4a 	bl	802015c <__smakebuf_r>
 801fcc8:	4621      	mov	r1, r4
 801fcca:	4628      	mov	r0, r5
 801fccc:	f7ff fdc6 	bl	801f85c <_fflush_r>
 801fcd0:	2800      	cmp	r0, #0
 801fcd2:	d1dc      	bne.n	801fc8e <_fseeko_r+0x52>
 801fcd4:	6a21      	ldr	r1, [r4, #32]
 801fcd6:	4633      	mov	r3, r6
 801fcd8:	463a      	mov	r2, r7
 801fcda:	4628      	mov	r0, r5
 801fcdc:	47c0      	blx	r8
 801fcde:	3001      	adds	r0, #1
 801fce0:	d0d5      	beq.n	801fc8e <_fseeko_r+0x52>
 801fce2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fce4:	b141      	cbz	r1, 801fcf8 <_fseeko_r+0xbc>
 801fce6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fcea:	4299      	cmp	r1, r3
 801fcec:	d002      	beq.n	801fcf4 <_fseeko_r+0xb8>
 801fcee:	4628      	mov	r0, r5
 801fcf0:	f000 faaa 	bl	8020248 <_free_r>
 801fcf4:	2300      	movs	r3, #0
 801fcf6:	6363      	str	r3, [r4, #52]	; 0x34
 801fcf8:	6923      	ldr	r3, [r4, #16]
 801fcfa:	6023      	str	r3, [r4, #0]
 801fcfc:	89a3      	ldrh	r3, [r4, #12]
 801fcfe:	2500      	movs	r5, #0
 801fd00:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 801fd04:	6065      	str	r5, [r4, #4]
 801fd06:	81a3      	strh	r3, [r4, #12]
 801fd08:	2208      	movs	r2, #8
 801fd0a:	4629      	mov	r1, r5
 801fd0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801fd10:	f000 fa82 	bl	8020218 <memset>
 801fd14:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801fd16:	f016 0601 	ands.w	r6, r6, #1
 801fd1a:	d120      	bne.n	801fd5e <_fseeko_r+0x122>
 801fd1c:	89a3      	ldrh	r3, [r4, #12]
 801fd1e:	059b      	lsls	r3, r3, #22
 801fd20:	d4ba      	bmi.n	801fc98 <_fseeko_r+0x5c>
 801fd22:	e00c      	b.n	801fd3e <_fseeko_r+0x102>
 801fd24:	4621      	mov	r1, r4
 801fd26:	4628      	mov	r0, r5
 801fd28:	f000 f822 	bl	801fd70 <_ftello_r>
 801fd2c:	1c43      	adds	r3, r0, #1
 801fd2e:	4606      	mov	r6, r0
 801fd30:	d109      	bne.n	801fd46 <_fseeko_r+0x10a>
 801fd32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fd34:	07dd      	lsls	r5, r3, #31
 801fd36:	d4ad      	bmi.n	801fc94 <_fseeko_r+0x58>
 801fd38:	89a3      	ldrh	r3, [r4, #12]
 801fd3a:	0598      	lsls	r0, r3, #22
 801fd3c:	d4aa      	bmi.n	801fc94 <_fseeko_r+0x58>
 801fd3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fd40:	f000 f9e7 	bl	8020112 <__retarget_lock_release_recursive>
 801fd44:	e7a8      	b.n	801fc98 <_fseeko_r+0x5c>
 801fd46:	4407      	add	r7, r0
 801fd48:	2600      	movs	r6, #0
 801fd4a:	e7b7      	b.n	801fcbc <_fseeko_r+0x80>
 801fd4c:	2316      	movs	r3, #22
 801fd4e:	e79d      	b.n	801fc8c <_fseeko_r+0x50>
 801fd50:	89a3      	ldrh	r3, [r4, #12]
 801fd52:	059a      	lsls	r2, r3, #22
 801fd54:	d49e      	bmi.n	801fc94 <_fseeko_r+0x58>
 801fd56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fd58:	f000 f9db 	bl	8020112 <__retarget_lock_release_recursive>
 801fd5c:	e79a      	b.n	801fc94 <_fseeko_r+0x58>
 801fd5e:	462e      	mov	r6, r5
 801fd60:	e79a      	b.n	801fc98 <_fseeko_r+0x5c>
 801fd62:	bf00      	nop
 801fd64:	08028e68 	.word	0x08028e68
 801fd68:	08028e88 	.word	0x08028e88
 801fd6c:	08028e48 	.word	0x08028e48

0801fd70 <_ftello_r>:
 801fd70:	b570      	push	{r4, r5, r6, lr}
 801fd72:	460c      	mov	r4, r1
 801fd74:	4605      	mov	r5, r0
 801fd76:	b118      	cbz	r0, 801fd80 <_ftello_r+0x10>
 801fd78:	6983      	ldr	r3, [r0, #24]
 801fd7a:	b90b      	cbnz	r3, 801fd80 <_ftello_r+0x10>
 801fd7c:	f7ff fe14 	bl	801f9a8 <__sinit>
 801fd80:	4b32      	ldr	r3, [pc, #200]	; (801fe4c <_ftello_r+0xdc>)
 801fd82:	429c      	cmp	r4, r3
 801fd84:	d114      	bne.n	801fdb0 <_ftello_r+0x40>
 801fd86:	686c      	ldr	r4, [r5, #4]
 801fd88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fd8a:	07da      	lsls	r2, r3, #31
 801fd8c:	d405      	bmi.n	801fd9a <_ftello_r+0x2a>
 801fd8e:	89a3      	ldrh	r3, [r4, #12]
 801fd90:	059b      	lsls	r3, r3, #22
 801fd92:	d402      	bmi.n	801fd9a <_ftello_r+0x2a>
 801fd94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fd96:	f000 f9ba 	bl	802010e <__retarget_lock_acquire_recursive>
 801fd9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fd9c:	b9ce      	cbnz	r6, 801fdd2 <_ftello_r+0x62>
 801fd9e:	231d      	movs	r3, #29
 801fda0:	602b      	str	r3, [r5, #0]
 801fda2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fda4:	07de      	lsls	r6, r3, #31
 801fda6:	d50d      	bpl.n	801fdc4 <_ftello_r+0x54>
 801fda8:	f04f 35ff 	mov.w	r5, #4294967295
 801fdac:	4628      	mov	r0, r5
 801fdae:	bd70      	pop	{r4, r5, r6, pc}
 801fdb0:	4b27      	ldr	r3, [pc, #156]	; (801fe50 <_ftello_r+0xe0>)
 801fdb2:	429c      	cmp	r4, r3
 801fdb4:	d101      	bne.n	801fdba <_ftello_r+0x4a>
 801fdb6:	68ac      	ldr	r4, [r5, #8]
 801fdb8:	e7e6      	b.n	801fd88 <_ftello_r+0x18>
 801fdba:	4b26      	ldr	r3, [pc, #152]	; (801fe54 <_ftello_r+0xe4>)
 801fdbc:	429c      	cmp	r4, r3
 801fdbe:	bf08      	it	eq
 801fdc0:	68ec      	ldreq	r4, [r5, #12]
 801fdc2:	e7e1      	b.n	801fd88 <_ftello_r+0x18>
 801fdc4:	89a3      	ldrh	r3, [r4, #12]
 801fdc6:	059d      	lsls	r5, r3, #22
 801fdc8:	d4ee      	bmi.n	801fda8 <_ftello_r+0x38>
 801fdca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fdcc:	f000 f9a1 	bl	8020112 <__retarget_lock_release_recursive>
 801fdd0:	e7ea      	b.n	801fda8 <_ftello_r+0x38>
 801fdd2:	89a2      	ldrh	r2, [r4, #12]
 801fdd4:	f002 030c 	and.w	r3, r2, #12
 801fdd8:	2b08      	cmp	r3, #8
 801fdda:	d119      	bne.n	801fe10 <_ftello_r+0xa0>
 801fddc:	6823      	ldr	r3, [r4, #0]
 801fdde:	b1bb      	cbz	r3, 801fe10 <_ftello_r+0xa0>
 801fde0:	6921      	ldr	r1, [r4, #16]
 801fde2:	1a5b      	subs	r3, r3, r1
 801fde4:	2b00      	cmp	r3, #0
 801fde6:	dd13      	ble.n	801fe10 <_ftello_r+0xa0>
 801fde8:	05d0      	lsls	r0, r2, #23
 801fdea:	d511      	bpl.n	801fe10 <_ftello_r+0xa0>
 801fdec:	2302      	movs	r3, #2
 801fdee:	2200      	movs	r2, #0
 801fdf0:	6a21      	ldr	r1, [r4, #32]
 801fdf2:	4628      	mov	r0, r5
 801fdf4:	47b0      	blx	r6
 801fdf6:	1c41      	adds	r1, r0, #1
 801fdf8:	4605      	mov	r5, r0
 801fdfa:	d10d      	bne.n	801fe18 <_ftello_r+0xa8>
 801fdfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fdfe:	07da      	lsls	r2, r3, #31
 801fe00:	d4d2      	bmi.n	801fda8 <_ftello_r+0x38>
 801fe02:	89a3      	ldrh	r3, [r4, #12]
 801fe04:	059b      	lsls	r3, r3, #22
 801fe06:	d4cf      	bmi.n	801fda8 <_ftello_r+0x38>
 801fe08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fe0a:	f000 f982 	bl	8020112 <__retarget_lock_release_recursive>
 801fe0e:	e7cd      	b.n	801fdac <_ftello_r+0x3c>
 801fe10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fe14:	d00f      	beq.n	801fe36 <_ftello_r+0xc6>
 801fe16:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801fe18:	89a2      	ldrh	r2, [r4, #12]
 801fe1a:	0756      	lsls	r6, r2, #29
 801fe1c:	d50d      	bpl.n	801fe3a <_ftello_r+0xca>
 801fe1e:	6863      	ldr	r3, [r4, #4]
 801fe20:	1aed      	subs	r5, r5, r3
 801fe22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fe24:	b10b      	cbz	r3, 801fe2a <_ftello_r+0xba>
 801fe26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fe28:	1aed      	subs	r5, r5, r3
 801fe2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fe2c:	07d9      	lsls	r1, r3, #31
 801fe2e:	d4bd      	bmi.n	801fdac <_ftello_r+0x3c>
 801fe30:	0593      	lsls	r3, r2, #22
 801fe32:	d4bb      	bmi.n	801fdac <_ftello_r+0x3c>
 801fe34:	e7e8      	b.n	801fe08 <_ftello_r+0x98>
 801fe36:	2301      	movs	r3, #1
 801fe38:	e7da      	b.n	801fdf0 <_ftello_r+0x80>
 801fe3a:	0710      	lsls	r0, r2, #28
 801fe3c:	d5f5      	bpl.n	801fe2a <_ftello_r+0xba>
 801fe3e:	6823      	ldr	r3, [r4, #0]
 801fe40:	2b00      	cmp	r3, #0
 801fe42:	d0f2      	beq.n	801fe2a <_ftello_r+0xba>
 801fe44:	6921      	ldr	r1, [r4, #16]
 801fe46:	1a5b      	subs	r3, r3, r1
 801fe48:	441d      	add	r5, r3
 801fe4a:	e7ee      	b.n	801fe2a <_ftello_r+0xba>
 801fe4c:	08028e68 	.word	0x08028e68
 801fe50:	08028e88 	.word	0x08028e88
 801fe54:	08028e48 	.word	0x08028e48

0801fe58 <_fwalk_reent>:
 801fe58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe5c:	4606      	mov	r6, r0
 801fe5e:	4688      	mov	r8, r1
 801fe60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801fe64:	2700      	movs	r7, #0
 801fe66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fe6a:	f1b9 0901 	subs.w	r9, r9, #1
 801fe6e:	d505      	bpl.n	801fe7c <_fwalk_reent+0x24>
 801fe70:	6824      	ldr	r4, [r4, #0]
 801fe72:	2c00      	cmp	r4, #0
 801fe74:	d1f7      	bne.n	801fe66 <_fwalk_reent+0xe>
 801fe76:	4638      	mov	r0, r7
 801fe78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fe7c:	89ab      	ldrh	r3, [r5, #12]
 801fe7e:	2b01      	cmp	r3, #1
 801fe80:	d907      	bls.n	801fe92 <_fwalk_reent+0x3a>
 801fe82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fe86:	3301      	adds	r3, #1
 801fe88:	d003      	beq.n	801fe92 <_fwalk_reent+0x3a>
 801fe8a:	4629      	mov	r1, r5
 801fe8c:	4630      	mov	r0, r6
 801fe8e:	47c0      	blx	r8
 801fe90:	4307      	orrs	r7, r0
 801fe92:	3568      	adds	r5, #104	; 0x68
 801fe94:	e7e9      	b.n	801fe6a <_fwalk_reent+0x12>
	...

0801fe98 <__libc_init_array>:
 801fe98:	b570      	push	{r4, r5, r6, lr}
 801fe9a:	4d0d      	ldr	r5, [pc, #52]	; (801fed0 <__libc_init_array+0x38>)
 801fe9c:	4c0d      	ldr	r4, [pc, #52]	; (801fed4 <__libc_init_array+0x3c>)
 801fe9e:	1b64      	subs	r4, r4, r5
 801fea0:	10a4      	asrs	r4, r4, #2
 801fea2:	2600      	movs	r6, #0
 801fea4:	42a6      	cmp	r6, r4
 801fea6:	d109      	bne.n	801febc <__libc_init_array+0x24>
 801fea8:	4d0b      	ldr	r5, [pc, #44]	; (801fed8 <__libc_init_array+0x40>)
 801feaa:	4c0c      	ldr	r4, [pc, #48]	; (801fedc <__libc_init_array+0x44>)
 801feac:	f003 f8d6 	bl	802305c <_init>
 801feb0:	1b64      	subs	r4, r4, r5
 801feb2:	10a4      	asrs	r4, r4, #2
 801feb4:	2600      	movs	r6, #0
 801feb6:	42a6      	cmp	r6, r4
 801feb8:	d105      	bne.n	801fec6 <__libc_init_array+0x2e>
 801feba:	bd70      	pop	{r4, r5, r6, pc}
 801febc:	f855 3b04 	ldr.w	r3, [r5], #4
 801fec0:	4798      	blx	r3
 801fec2:	3601      	adds	r6, #1
 801fec4:	e7ee      	b.n	801fea4 <__libc_init_array+0xc>
 801fec6:	f855 3b04 	ldr.w	r3, [r5], #4
 801feca:	4798      	blx	r3
 801fecc:	3601      	adds	r6, #1
 801fece:	e7f2      	b.n	801feb6 <__libc_init_array+0x1e>
 801fed0:	08029440 	.word	0x08029440
 801fed4:	08029440 	.word	0x08029440
 801fed8:	08029440 	.word	0x08029440
 801fedc:	08029450 	.word	0x08029450

0801fee0 <localtime>:
 801fee0:	b538      	push	{r3, r4, r5, lr}
 801fee2:	4b0b      	ldr	r3, [pc, #44]	; (801ff10 <localtime+0x30>)
 801fee4:	681d      	ldr	r5, [r3, #0]
 801fee6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801fee8:	4604      	mov	r4, r0
 801feea:	b953      	cbnz	r3, 801ff02 <localtime+0x22>
 801feec:	2024      	movs	r0, #36	; 0x24
 801feee:	f000 f975 	bl	80201dc <malloc>
 801fef2:	4602      	mov	r2, r0
 801fef4:	63e8      	str	r0, [r5, #60]	; 0x3c
 801fef6:	b920      	cbnz	r0, 801ff02 <localtime+0x22>
 801fef8:	4b06      	ldr	r3, [pc, #24]	; (801ff14 <localtime+0x34>)
 801fefa:	4807      	ldr	r0, [pc, #28]	; (801ff18 <localtime+0x38>)
 801fefc:	2132      	movs	r1, #50	; 0x32
 801fefe:	f001 fdd9 	bl	8021ab4 <__assert_func>
 801ff02:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801ff04:	4620      	mov	r0, r4
 801ff06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ff0a:	f000 b807 	b.w	801ff1c <localtime_r>
 801ff0e:	bf00      	nop
 801ff10:	20000108 	.word	0x20000108
 801ff14:	08028eac 	.word	0x08028eac
 801ff18:	08028ec3 	.word	0x08028ec3

0801ff1c <localtime_r>:
 801ff1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ff20:	4607      	mov	r7, r0
 801ff22:	9101      	str	r1, [sp, #4]
 801ff24:	f001 fe90 	bl	8021c48 <__gettzinfo>
 801ff28:	9901      	ldr	r1, [sp, #4]
 801ff2a:	4680      	mov	r8, r0
 801ff2c:	4638      	mov	r0, r7
 801ff2e:	f001 fe8f 	bl	8021c50 <gmtime_r>
 801ff32:	6943      	ldr	r3, [r0, #20]
 801ff34:	079a      	lsls	r2, r3, #30
 801ff36:	4604      	mov	r4, r0
 801ff38:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801ff3c:	d105      	bne.n	801ff4a <localtime_r+0x2e>
 801ff3e:	2264      	movs	r2, #100	; 0x64
 801ff40:	fb96 f3f2 	sdiv	r3, r6, r2
 801ff44:	fb02 6313 	mls	r3, r2, r3, r6
 801ff48:	bb7b      	cbnz	r3, 801ffaa <localtime_r+0x8e>
 801ff4a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801ff4e:	fb96 f5f3 	sdiv	r5, r6, r3
 801ff52:	fb03 6515 	mls	r5, r3, r5, r6
 801ff56:	fab5 f585 	clz	r5, r5
 801ff5a:	096d      	lsrs	r5, r5, #5
 801ff5c:	4b68      	ldr	r3, [pc, #416]	; (8020100 <localtime_r+0x1e4>)
 801ff5e:	2230      	movs	r2, #48	; 0x30
 801ff60:	fb02 3505 	mla	r5, r2, r5, r3
 801ff64:	f001 faa6 	bl	80214b4 <__tz_lock>
 801ff68:	f001 fab0 	bl	80214cc <_tzset_unlocked>
 801ff6c:	4b65      	ldr	r3, [pc, #404]	; (8020104 <localtime_r+0x1e8>)
 801ff6e:	681b      	ldr	r3, [r3, #0]
 801ff70:	b353      	cbz	r3, 801ffc8 <localtime_r+0xac>
 801ff72:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ff76:	42b3      	cmp	r3, r6
 801ff78:	d119      	bne.n	801ffae <localtime_r+0x92>
 801ff7a:	f8d8 1000 	ldr.w	r1, [r8]
 801ff7e:	e9d7 6700 	ldrd	r6, r7, [r7]
 801ff82:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801ff86:	b9d1      	cbnz	r1, 801ffbe <localtime_r+0xa2>
 801ff88:	4296      	cmp	r6, r2
 801ff8a:	eb77 0303 	sbcs.w	r3, r7, r3
 801ff8e:	da23      	bge.n	801ffd8 <localtime_r+0xbc>
 801ff90:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801ff94:	4296      	cmp	r6, r2
 801ff96:	eb77 0303 	sbcs.w	r3, r7, r3
 801ff9a:	bfb4      	ite	lt
 801ff9c:	2301      	movlt	r3, #1
 801ff9e:	2300      	movge	r3, #0
 801ffa0:	6223      	str	r3, [r4, #32]
 801ffa2:	db1b      	blt.n	801ffdc <localtime_r+0xc0>
 801ffa4:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801ffa8:	e01a      	b.n	801ffe0 <localtime_r+0xc4>
 801ffaa:	2501      	movs	r5, #1
 801ffac:	e7d6      	b.n	801ff5c <localtime_r+0x40>
 801ffae:	4630      	mov	r0, r6
 801ffb0:	f001 f9d8 	bl	8021364 <__tzcalc_limits>
 801ffb4:	2800      	cmp	r0, #0
 801ffb6:	d1e0      	bne.n	801ff7a <localtime_r+0x5e>
 801ffb8:	f04f 33ff 	mov.w	r3, #4294967295
 801ffbc:	e004      	b.n	801ffc8 <localtime_r+0xac>
 801ffbe:	4296      	cmp	r6, r2
 801ffc0:	eb77 0303 	sbcs.w	r3, r7, r3
 801ffc4:	da02      	bge.n	801ffcc <localtime_r+0xb0>
 801ffc6:	2300      	movs	r3, #0
 801ffc8:	6223      	str	r3, [r4, #32]
 801ffca:	e7eb      	b.n	801ffa4 <localtime_r+0x88>
 801ffcc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801ffd0:	4296      	cmp	r6, r2
 801ffd2:	eb77 0303 	sbcs.w	r3, r7, r3
 801ffd6:	daf6      	bge.n	801ffc6 <localtime_r+0xaa>
 801ffd8:	2301      	movs	r3, #1
 801ffda:	6223      	str	r3, [r4, #32]
 801ffdc:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801ffe0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801ffe4:	203c      	movs	r0, #60	; 0x3c
 801ffe6:	fb91 f6f3 	sdiv	r6, r1, r3
 801ffea:	fb03 1316 	mls	r3, r3, r6, r1
 801ffee:	6861      	ldr	r1, [r4, #4]
 801fff0:	fb93 f2f0 	sdiv	r2, r3, r0
 801fff4:	fb00 3012 	mls	r0, r0, r2, r3
 801fff8:	6823      	ldr	r3, [r4, #0]
 801fffa:	1a89      	subs	r1, r1, r2
 801fffc:	68a2      	ldr	r2, [r4, #8]
 801fffe:	6061      	str	r1, [r4, #4]
 8020000:	1a1b      	subs	r3, r3, r0
 8020002:	1b92      	subs	r2, r2, r6
 8020004:	2b3b      	cmp	r3, #59	; 0x3b
 8020006:	6023      	str	r3, [r4, #0]
 8020008:	60a2      	str	r2, [r4, #8]
 802000a:	dd35      	ble.n	8020078 <localtime_r+0x15c>
 802000c:	3101      	adds	r1, #1
 802000e:	6061      	str	r1, [r4, #4]
 8020010:	3b3c      	subs	r3, #60	; 0x3c
 8020012:	6023      	str	r3, [r4, #0]
 8020014:	6863      	ldr	r3, [r4, #4]
 8020016:	2b3b      	cmp	r3, #59	; 0x3b
 8020018:	dd34      	ble.n	8020084 <localtime_r+0x168>
 802001a:	3201      	adds	r2, #1
 802001c:	60a2      	str	r2, [r4, #8]
 802001e:	3b3c      	subs	r3, #60	; 0x3c
 8020020:	6063      	str	r3, [r4, #4]
 8020022:	68a3      	ldr	r3, [r4, #8]
 8020024:	2b17      	cmp	r3, #23
 8020026:	dd33      	ble.n	8020090 <localtime_r+0x174>
 8020028:	69e2      	ldr	r2, [r4, #28]
 802002a:	3201      	adds	r2, #1
 802002c:	61e2      	str	r2, [r4, #28]
 802002e:	69a2      	ldr	r2, [r4, #24]
 8020030:	3201      	adds	r2, #1
 8020032:	2a06      	cmp	r2, #6
 8020034:	bfc8      	it	gt
 8020036:	2200      	movgt	r2, #0
 8020038:	61a2      	str	r2, [r4, #24]
 802003a:	68e2      	ldr	r2, [r4, #12]
 802003c:	3b18      	subs	r3, #24
 802003e:	3201      	adds	r2, #1
 8020040:	60a3      	str	r3, [r4, #8]
 8020042:	6923      	ldr	r3, [r4, #16]
 8020044:	60e2      	str	r2, [r4, #12]
 8020046:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 802004a:	428a      	cmp	r2, r1
 802004c:	dd0e      	ble.n	802006c <localtime_r+0x150>
 802004e:	2b0b      	cmp	r3, #11
 8020050:	eba2 0201 	sub.w	r2, r2, r1
 8020054:	60e2      	str	r2, [r4, #12]
 8020056:	f103 0201 	add.w	r2, r3, #1
 802005a:	bf09      	itett	eq
 802005c:	6963      	ldreq	r3, [r4, #20]
 802005e:	6122      	strne	r2, [r4, #16]
 8020060:	2200      	moveq	r2, #0
 8020062:	3301      	addeq	r3, #1
 8020064:	bf02      	ittt	eq
 8020066:	6122      	streq	r2, [r4, #16]
 8020068:	6163      	streq	r3, [r4, #20]
 802006a:	61e2      	streq	r2, [r4, #28]
 802006c:	f001 fa28 	bl	80214c0 <__tz_unlock>
 8020070:	4620      	mov	r0, r4
 8020072:	b002      	add	sp, #8
 8020074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020078:	2b00      	cmp	r3, #0
 802007a:	dacb      	bge.n	8020014 <localtime_r+0xf8>
 802007c:	3901      	subs	r1, #1
 802007e:	6061      	str	r1, [r4, #4]
 8020080:	333c      	adds	r3, #60	; 0x3c
 8020082:	e7c6      	b.n	8020012 <localtime_r+0xf6>
 8020084:	2b00      	cmp	r3, #0
 8020086:	dacc      	bge.n	8020022 <localtime_r+0x106>
 8020088:	3a01      	subs	r2, #1
 802008a:	60a2      	str	r2, [r4, #8]
 802008c:	333c      	adds	r3, #60	; 0x3c
 802008e:	e7c7      	b.n	8020020 <localtime_r+0x104>
 8020090:	2b00      	cmp	r3, #0
 8020092:	daeb      	bge.n	802006c <localtime_r+0x150>
 8020094:	69e2      	ldr	r2, [r4, #28]
 8020096:	3a01      	subs	r2, #1
 8020098:	61e2      	str	r2, [r4, #28]
 802009a:	69a2      	ldr	r2, [r4, #24]
 802009c:	3a01      	subs	r2, #1
 802009e:	bf48      	it	mi
 80200a0:	2206      	movmi	r2, #6
 80200a2:	61a2      	str	r2, [r4, #24]
 80200a4:	68e2      	ldr	r2, [r4, #12]
 80200a6:	3318      	adds	r3, #24
 80200a8:	3a01      	subs	r2, #1
 80200aa:	60e2      	str	r2, [r4, #12]
 80200ac:	60a3      	str	r3, [r4, #8]
 80200ae:	2a00      	cmp	r2, #0
 80200b0:	d1dc      	bne.n	802006c <localtime_r+0x150>
 80200b2:	6923      	ldr	r3, [r4, #16]
 80200b4:	3b01      	subs	r3, #1
 80200b6:	d405      	bmi.n	80200c4 <localtime_r+0x1a8>
 80200b8:	6123      	str	r3, [r4, #16]
 80200ba:	6923      	ldr	r3, [r4, #16]
 80200bc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80200c0:	60e3      	str	r3, [r4, #12]
 80200c2:	e7d3      	b.n	802006c <localtime_r+0x150>
 80200c4:	230b      	movs	r3, #11
 80200c6:	6123      	str	r3, [r4, #16]
 80200c8:	6963      	ldr	r3, [r4, #20]
 80200ca:	1e5a      	subs	r2, r3, #1
 80200cc:	6162      	str	r2, [r4, #20]
 80200ce:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80200d2:	0793      	lsls	r3, r2, #30
 80200d4:	d105      	bne.n	80200e2 <localtime_r+0x1c6>
 80200d6:	2164      	movs	r1, #100	; 0x64
 80200d8:	fb92 f3f1 	sdiv	r3, r2, r1
 80200dc:	fb01 2313 	mls	r3, r1, r3, r2
 80200e0:	b963      	cbnz	r3, 80200fc <localtime_r+0x1e0>
 80200e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80200e6:	fb92 f3f1 	sdiv	r3, r2, r1
 80200ea:	fb01 2313 	mls	r3, r1, r3, r2
 80200ee:	fab3 f383 	clz	r3, r3
 80200f2:	095b      	lsrs	r3, r3, #5
 80200f4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80200f8:	61e3      	str	r3, [r4, #28]
 80200fa:	e7de      	b.n	80200ba <localtime_r+0x19e>
 80200fc:	2301      	movs	r3, #1
 80200fe:	e7f9      	b.n	80200f4 <localtime_r+0x1d8>
 8020100:	08028f24 	.word	0x08028f24
 8020104:	20000ea8 	.word	0x20000ea8

08020108 <__retarget_lock_init_recursive>:
 8020108:	4770      	bx	lr

0802010a <__retarget_lock_close_recursive>:
 802010a:	4770      	bx	lr

0802010c <__retarget_lock_acquire>:
 802010c:	4770      	bx	lr

0802010e <__retarget_lock_acquire_recursive>:
 802010e:	4770      	bx	lr

08020110 <__retarget_lock_release>:
 8020110:	4770      	bx	lr

08020112 <__retarget_lock_release_recursive>:
 8020112:	4770      	bx	lr

08020114 <__swhatbuf_r>:
 8020114:	b570      	push	{r4, r5, r6, lr}
 8020116:	460e      	mov	r6, r1
 8020118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802011c:	2900      	cmp	r1, #0
 802011e:	b096      	sub	sp, #88	; 0x58
 8020120:	4614      	mov	r4, r2
 8020122:	461d      	mov	r5, r3
 8020124:	da07      	bge.n	8020136 <__swhatbuf_r+0x22>
 8020126:	2300      	movs	r3, #0
 8020128:	602b      	str	r3, [r5, #0]
 802012a:	89b3      	ldrh	r3, [r6, #12]
 802012c:	061a      	lsls	r2, r3, #24
 802012e:	d410      	bmi.n	8020152 <__swhatbuf_r+0x3e>
 8020130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020134:	e00e      	b.n	8020154 <__swhatbuf_r+0x40>
 8020136:	466a      	mov	r2, sp
 8020138:	f001 fd32 	bl	8021ba0 <_fstat_r>
 802013c:	2800      	cmp	r0, #0
 802013e:	dbf2      	blt.n	8020126 <__swhatbuf_r+0x12>
 8020140:	9a01      	ldr	r2, [sp, #4]
 8020142:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020146:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802014a:	425a      	negs	r2, r3
 802014c:	415a      	adcs	r2, r3
 802014e:	602a      	str	r2, [r5, #0]
 8020150:	e7ee      	b.n	8020130 <__swhatbuf_r+0x1c>
 8020152:	2340      	movs	r3, #64	; 0x40
 8020154:	2000      	movs	r0, #0
 8020156:	6023      	str	r3, [r4, #0]
 8020158:	b016      	add	sp, #88	; 0x58
 802015a:	bd70      	pop	{r4, r5, r6, pc}

0802015c <__smakebuf_r>:
 802015c:	898b      	ldrh	r3, [r1, #12]
 802015e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020160:	079d      	lsls	r5, r3, #30
 8020162:	4606      	mov	r6, r0
 8020164:	460c      	mov	r4, r1
 8020166:	d507      	bpl.n	8020178 <__smakebuf_r+0x1c>
 8020168:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802016c:	6023      	str	r3, [r4, #0]
 802016e:	6123      	str	r3, [r4, #16]
 8020170:	2301      	movs	r3, #1
 8020172:	6163      	str	r3, [r4, #20]
 8020174:	b002      	add	sp, #8
 8020176:	bd70      	pop	{r4, r5, r6, pc}
 8020178:	ab01      	add	r3, sp, #4
 802017a:	466a      	mov	r2, sp
 802017c:	f7ff ffca 	bl	8020114 <__swhatbuf_r>
 8020180:	9900      	ldr	r1, [sp, #0]
 8020182:	4605      	mov	r5, r0
 8020184:	4630      	mov	r0, r6
 8020186:	f000 f8af 	bl	80202e8 <_malloc_r>
 802018a:	b948      	cbnz	r0, 80201a0 <__smakebuf_r+0x44>
 802018c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020190:	059a      	lsls	r2, r3, #22
 8020192:	d4ef      	bmi.n	8020174 <__smakebuf_r+0x18>
 8020194:	f023 0303 	bic.w	r3, r3, #3
 8020198:	f043 0302 	orr.w	r3, r3, #2
 802019c:	81a3      	strh	r3, [r4, #12]
 802019e:	e7e3      	b.n	8020168 <__smakebuf_r+0xc>
 80201a0:	4b0d      	ldr	r3, [pc, #52]	; (80201d8 <__smakebuf_r+0x7c>)
 80201a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80201a4:	89a3      	ldrh	r3, [r4, #12]
 80201a6:	6020      	str	r0, [r4, #0]
 80201a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80201ac:	81a3      	strh	r3, [r4, #12]
 80201ae:	9b00      	ldr	r3, [sp, #0]
 80201b0:	6163      	str	r3, [r4, #20]
 80201b2:	9b01      	ldr	r3, [sp, #4]
 80201b4:	6120      	str	r0, [r4, #16]
 80201b6:	b15b      	cbz	r3, 80201d0 <__smakebuf_r+0x74>
 80201b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80201bc:	4630      	mov	r0, r6
 80201be:	f001 fdf7 	bl	8021db0 <_isatty_r>
 80201c2:	b128      	cbz	r0, 80201d0 <__smakebuf_r+0x74>
 80201c4:	89a3      	ldrh	r3, [r4, #12]
 80201c6:	f023 0303 	bic.w	r3, r3, #3
 80201ca:	f043 0301 	orr.w	r3, r3, #1
 80201ce:	81a3      	strh	r3, [r4, #12]
 80201d0:	89a0      	ldrh	r0, [r4, #12]
 80201d2:	4305      	orrs	r5, r0
 80201d4:	81a5      	strh	r5, [r4, #12]
 80201d6:	e7cd      	b.n	8020174 <__smakebuf_r+0x18>
 80201d8:	0801f941 	.word	0x0801f941

080201dc <malloc>:
 80201dc:	4b02      	ldr	r3, [pc, #8]	; (80201e8 <malloc+0xc>)
 80201de:	4601      	mov	r1, r0
 80201e0:	6818      	ldr	r0, [r3, #0]
 80201e2:	f000 b881 	b.w	80202e8 <_malloc_r>
 80201e6:	bf00      	nop
 80201e8:	20000108 	.word	0x20000108

080201ec <free>:
 80201ec:	4b02      	ldr	r3, [pc, #8]	; (80201f8 <free+0xc>)
 80201ee:	4601      	mov	r1, r0
 80201f0:	6818      	ldr	r0, [r3, #0]
 80201f2:	f000 b829 	b.w	8020248 <_free_r>
 80201f6:	bf00      	nop
 80201f8:	20000108 	.word	0x20000108

080201fc <memcpy>:
 80201fc:	440a      	add	r2, r1
 80201fe:	4291      	cmp	r1, r2
 8020200:	f100 33ff 	add.w	r3, r0, #4294967295
 8020204:	d100      	bne.n	8020208 <memcpy+0xc>
 8020206:	4770      	bx	lr
 8020208:	b510      	push	{r4, lr}
 802020a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802020e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020212:	4291      	cmp	r1, r2
 8020214:	d1f9      	bne.n	802020a <memcpy+0xe>
 8020216:	bd10      	pop	{r4, pc}

08020218 <memset>:
 8020218:	4402      	add	r2, r0
 802021a:	4603      	mov	r3, r0
 802021c:	4293      	cmp	r3, r2
 802021e:	d100      	bne.n	8020222 <memset+0xa>
 8020220:	4770      	bx	lr
 8020222:	f803 1b01 	strb.w	r1, [r3], #1
 8020226:	e7f9      	b.n	802021c <memset+0x4>

08020228 <_calloc_r>:
 8020228:	b513      	push	{r0, r1, r4, lr}
 802022a:	434a      	muls	r2, r1
 802022c:	4611      	mov	r1, r2
 802022e:	9201      	str	r2, [sp, #4]
 8020230:	f000 f85a 	bl	80202e8 <_malloc_r>
 8020234:	4604      	mov	r4, r0
 8020236:	b118      	cbz	r0, 8020240 <_calloc_r+0x18>
 8020238:	9a01      	ldr	r2, [sp, #4]
 802023a:	2100      	movs	r1, #0
 802023c:	f7ff ffec 	bl	8020218 <memset>
 8020240:	4620      	mov	r0, r4
 8020242:	b002      	add	sp, #8
 8020244:	bd10      	pop	{r4, pc}
	...

08020248 <_free_r>:
 8020248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802024a:	2900      	cmp	r1, #0
 802024c:	d048      	beq.n	80202e0 <_free_r+0x98>
 802024e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020252:	9001      	str	r0, [sp, #4]
 8020254:	2b00      	cmp	r3, #0
 8020256:	f1a1 0404 	sub.w	r4, r1, #4
 802025a:	bfb8      	it	lt
 802025c:	18e4      	addlt	r4, r4, r3
 802025e:	f001 fddf 	bl	8021e20 <__malloc_lock>
 8020262:	4a20      	ldr	r2, [pc, #128]	; (80202e4 <_free_r+0x9c>)
 8020264:	9801      	ldr	r0, [sp, #4]
 8020266:	6813      	ldr	r3, [r2, #0]
 8020268:	4615      	mov	r5, r2
 802026a:	b933      	cbnz	r3, 802027a <_free_r+0x32>
 802026c:	6063      	str	r3, [r4, #4]
 802026e:	6014      	str	r4, [r2, #0]
 8020270:	b003      	add	sp, #12
 8020272:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020276:	f001 bdd9 	b.w	8021e2c <__malloc_unlock>
 802027a:	42a3      	cmp	r3, r4
 802027c:	d90b      	bls.n	8020296 <_free_r+0x4e>
 802027e:	6821      	ldr	r1, [r4, #0]
 8020280:	1862      	adds	r2, r4, r1
 8020282:	4293      	cmp	r3, r2
 8020284:	bf04      	itt	eq
 8020286:	681a      	ldreq	r2, [r3, #0]
 8020288:	685b      	ldreq	r3, [r3, #4]
 802028a:	6063      	str	r3, [r4, #4]
 802028c:	bf04      	itt	eq
 802028e:	1852      	addeq	r2, r2, r1
 8020290:	6022      	streq	r2, [r4, #0]
 8020292:	602c      	str	r4, [r5, #0]
 8020294:	e7ec      	b.n	8020270 <_free_r+0x28>
 8020296:	461a      	mov	r2, r3
 8020298:	685b      	ldr	r3, [r3, #4]
 802029a:	b10b      	cbz	r3, 80202a0 <_free_r+0x58>
 802029c:	42a3      	cmp	r3, r4
 802029e:	d9fa      	bls.n	8020296 <_free_r+0x4e>
 80202a0:	6811      	ldr	r1, [r2, #0]
 80202a2:	1855      	adds	r5, r2, r1
 80202a4:	42a5      	cmp	r5, r4
 80202a6:	d10b      	bne.n	80202c0 <_free_r+0x78>
 80202a8:	6824      	ldr	r4, [r4, #0]
 80202aa:	4421      	add	r1, r4
 80202ac:	1854      	adds	r4, r2, r1
 80202ae:	42a3      	cmp	r3, r4
 80202b0:	6011      	str	r1, [r2, #0]
 80202b2:	d1dd      	bne.n	8020270 <_free_r+0x28>
 80202b4:	681c      	ldr	r4, [r3, #0]
 80202b6:	685b      	ldr	r3, [r3, #4]
 80202b8:	6053      	str	r3, [r2, #4]
 80202ba:	4421      	add	r1, r4
 80202bc:	6011      	str	r1, [r2, #0]
 80202be:	e7d7      	b.n	8020270 <_free_r+0x28>
 80202c0:	d902      	bls.n	80202c8 <_free_r+0x80>
 80202c2:	230c      	movs	r3, #12
 80202c4:	6003      	str	r3, [r0, #0]
 80202c6:	e7d3      	b.n	8020270 <_free_r+0x28>
 80202c8:	6825      	ldr	r5, [r4, #0]
 80202ca:	1961      	adds	r1, r4, r5
 80202cc:	428b      	cmp	r3, r1
 80202ce:	bf04      	itt	eq
 80202d0:	6819      	ldreq	r1, [r3, #0]
 80202d2:	685b      	ldreq	r3, [r3, #4]
 80202d4:	6063      	str	r3, [r4, #4]
 80202d6:	bf04      	itt	eq
 80202d8:	1949      	addeq	r1, r1, r5
 80202da:	6021      	streq	r1, [r4, #0]
 80202dc:	6054      	str	r4, [r2, #4]
 80202de:	e7c7      	b.n	8020270 <_free_r+0x28>
 80202e0:	b003      	add	sp, #12
 80202e2:	bd30      	pop	{r4, r5, pc}
 80202e4:	20000e84 	.word	0x20000e84

080202e8 <_malloc_r>:
 80202e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80202ea:	1ccd      	adds	r5, r1, #3
 80202ec:	f025 0503 	bic.w	r5, r5, #3
 80202f0:	3508      	adds	r5, #8
 80202f2:	2d0c      	cmp	r5, #12
 80202f4:	bf38      	it	cc
 80202f6:	250c      	movcc	r5, #12
 80202f8:	2d00      	cmp	r5, #0
 80202fa:	4606      	mov	r6, r0
 80202fc:	db01      	blt.n	8020302 <_malloc_r+0x1a>
 80202fe:	42a9      	cmp	r1, r5
 8020300:	d903      	bls.n	802030a <_malloc_r+0x22>
 8020302:	230c      	movs	r3, #12
 8020304:	6033      	str	r3, [r6, #0]
 8020306:	2000      	movs	r0, #0
 8020308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802030a:	f001 fd89 	bl	8021e20 <__malloc_lock>
 802030e:	4921      	ldr	r1, [pc, #132]	; (8020394 <_malloc_r+0xac>)
 8020310:	680a      	ldr	r2, [r1, #0]
 8020312:	4614      	mov	r4, r2
 8020314:	b99c      	cbnz	r4, 802033e <_malloc_r+0x56>
 8020316:	4f20      	ldr	r7, [pc, #128]	; (8020398 <_malloc_r+0xb0>)
 8020318:	683b      	ldr	r3, [r7, #0]
 802031a:	b923      	cbnz	r3, 8020326 <_malloc_r+0x3e>
 802031c:	4621      	mov	r1, r4
 802031e:	4630      	mov	r0, r6
 8020320:	f000 f8da 	bl	80204d8 <_sbrk_r>
 8020324:	6038      	str	r0, [r7, #0]
 8020326:	4629      	mov	r1, r5
 8020328:	4630      	mov	r0, r6
 802032a:	f000 f8d5 	bl	80204d8 <_sbrk_r>
 802032e:	1c43      	adds	r3, r0, #1
 8020330:	d123      	bne.n	802037a <_malloc_r+0x92>
 8020332:	230c      	movs	r3, #12
 8020334:	6033      	str	r3, [r6, #0]
 8020336:	4630      	mov	r0, r6
 8020338:	f001 fd78 	bl	8021e2c <__malloc_unlock>
 802033c:	e7e3      	b.n	8020306 <_malloc_r+0x1e>
 802033e:	6823      	ldr	r3, [r4, #0]
 8020340:	1b5b      	subs	r3, r3, r5
 8020342:	d417      	bmi.n	8020374 <_malloc_r+0x8c>
 8020344:	2b0b      	cmp	r3, #11
 8020346:	d903      	bls.n	8020350 <_malloc_r+0x68>
 8020348:	6023      	str	r3, [r4, #0]
 802034a:	441c      	add	r4, r3
 802034c:	6025      	str	r5, [r4, #0]
 802034e:	e004      	b.n	802035a <_malloc_r+0x72>
 8020350:	6863      	ldr	r3, [r4, #4]
 8020352:	42a2      	cmp	r2, r4
 8020354:	bf0c      	ite	eq
 8020356:	600b      	streq	r3, [r1, #0]
 8020358:	6053      	strne	r3, [r2, #4]
 802035a:	4630      	mov	r0, r6
 802035c:	f001 fd66 	bl	8021e2c <__malloc_unlock>
 8020360:	f104 000b 	add.w	r0, r4, #11
 8020364:	1d23      	adds	r3, r4, #4
 8020366:	f020 0007 	bic.w	r0, r0, #7
 802036a:	1ac2      	subs	r2, r0, r3
 802036c:	d0cc      	beq.n	8020308 <_malloc_r+0x20>
 802036e:	1a1b      	subs	r3, r3, r0
 8020370:	50a3      	str	r3, [r4, r2]
 8020372:	e7c9      	b.n	8020308 <_malloc_r+0x20>
 8020374:	4622      	mov	r2, r4
 8020376:	6864      	ldr	r4, [r4, #4]
 8020378:	e7cc      	b.n	8020314 <_malloc_r+0x2c>
 802037a:	1cc4      	adds	r4, r0, #3
 802037c:	f024 0403 	bic.w	r4, r4, #3
 8020380:	42a0      	cmp	r0, r4
 8020382:	d0e3      	beq.n	802034c <_malloc_r+0x64>
 8020384:	1a21      	subs	r1, r4, r0
 8020386:	4630      	mov	r0, r6
 8020388:	f000 f8a6 	bl	80204d8 <_sbrk_r>
 802038c:	3001      	adds	r0, #1
 802038e:	d1dd      	bne.n	802034c <_malloc_r+0x64>
 8020390:	e7cf      	b.n	8020332 <_malloc_r+0x4a>
 8020392:	bf00      	nop
 8020394:	20000e84 	.word	0x20000e84
 8020398:	20000e88 	.word	0x20000e88

0802039c <_open_r>:
 802039c:	b538      	push	{r3, r4, r5, lr}
 802039e:	4d07      	ldr	r5, [pc, #28]	; (80203bc <_open_r+0x20>)
 80203a0:	4604      	mov	r4, r0
 80203a2:	4608      	mov	r0, r1
 80203a4:	4611      	mov	r1, r2
 80203a6:	2200      	movs	r2, #0
 80203a8:	602a      	str	r2, [r5, #0]
 80203aa:	461a      	mov	r2, r3
 80203ac:	f7e0 fd60 	bl	8000e70 <_open>
 80203b0:	1c43      	adds	r3, r0, #1
 80203b2:	d102      	bne.n	80203ba <_open_r+0x1e>
 80203b4:	682b      	ldr	r3, [r5, #0]
 80203b6:	b103      	cbz	r3, 80203ba <_open_r+0x1e>
 80203b8:	6023      	str	r3, [r4, #0]
 80203ba:	bd38      	pop	{r3, r4, r5, pc}
 80203bc:	20000f50 	.word	0x20000f50

080203c0 <putchar>:
 80203c0:	4b09      	ldr	r3, [pc, #36]	; (80203e8 <putchar+0x28>)
 80203c2:	b513      	push	{r0, r1, r4, lr}
 80203c4:	681c      	ldr	r4, [r3, #0]
 80203c6:	4601      	mov	r1, r0
 80203c8:	b134      	cbz	r4, 80203d8 <putchar+0x18>
 80203ca:	69a3      	ldr	r3, [r4, #24]
 80203cc:	b923      	cbnz	r3, 80203d8 <putchar+0x18>
 80203ce:	9001      	str	r0, [sp, #4]
 80203d0:	4620      	mov	r0, r4
 80203d2:	f7ff fae9 	bl	801f9a8 <__sinit>
 80203d6:	9901      	ldr	r1, [sp, #4]
 80203d8:	68a2      	ldr	r2, [r4, #8]
 80203da:	4620      	mov	r0, r4
 80203dc:	b002      	add	sp, #8
 80203de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80203e2:	f002 b999 	b.w	8022718 <_putc_r>
 80203e6:	bf00      	nop
 80203e8:	20000108 	.word	0x20000108

080203ec <srand>:
 80203ec:	b538      	push	{r3, r4, r5, lr}
 80203ee:	4b10      	ldr	r3, [pc, #64]	; (8020430 <srand+0x44>)
 80203f0:	681d      	ldr	r5, [r3, #0]
 80203f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80203f4:	4604      	mov	r4, r0
 80203f6:	b9b3      	cbnz	r3, 8020426 <srand+0x3a>
 80203f8:	2018      	movs	r0, #24
 80203fa:	f7ff feef 	bl	80201dc <malloc>
 80203fe:	4602      	mov	r2, r0
 8020400:	63a8      	str	r0, [r5, #56]	; 0x38
 8020402:	b920      	cbnz	r0, 802040e <srand+0x22>
 8020404:	4b0b      	ldr	r3, [pc, #44]	; (8020434 <srand+0x48>)
 8020406:	480c      	ldr	r0, [pc, #48]	; (8020438 <srand+0x4c>)
 8020408:	2142      	movs	r1, #66	; 0x42
 802040a:	f001 fb53 	bl	8021ab4 <__assert_func>
 802040e:	490b      	ldr	r1, [pc, #44]	; (802043c <srand+0x50>)
 8020410:	4b0b      	ldr	r3, [pc, #44]	; (8020440 <srand+0x54>)
 8020412:	e9c0 1300 	strd	r1, r3, [r0]
 8020416:	4b0b      	ldr	r3, [pc, #44]	; (8020444 <srand+0x58>)
 8020418:	6083      	str	r3, [r0, #8]
 802041a:	230b      	movs	r3, #11
 802041c:	8183      	strh	r3, [r0, #12]
 802041e:	2100      	movs	r1, #0
 8020420:	2001      	movs	r0, #1
 8020422:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8020426:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8020428:	2200      	movs	r2, #0
 802042a:	611c      	str	r4, [r3, #16]
 802042c:	615a      	str	r2, [r3, #20]
 802042e:	bd38      	pop	{r3, r4, r5, pc}
 8020430:	20000108 	.word	0x20000108
 8020434:	08028eac 	.word	0x08028eac
 8020438:	08028f84 	.word	0x08028f84
 802043c:	abcd330e 	.word	0xabcd330e
 8020440:	e66d1234 	.word	0xe66d1234
 8020444:	0005deec 	.word	0x0005deec

08020448 <rand>:
 8020448:	4b17      	ldr	r3, [pc, #92]	; (80204a8 <rand+0x60>)
 802044a:	b510      	push	{r4, lr}
 802044c:	681c      	ldr	r4, [r3, #0]
 802044e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020450:	b9b3      	cbnz	r3, 8020480 <rand+0x38>
 8020452:	2018      	movs	r0, #24
 8020454:	f7ff fec2 	bl	80201dc <malloc>
 8020458:	63a0      	str	r0, [r4, #56]	; 0x38
 802045a:	b928      	cbnz	r0, 8020468 <rand+0x20>
 802045c:	4602      	mov	r2, r0
 802045e:	4b13      	ldr	r3, [pc, #76]	; (80204ac <rand+0x64>)
 8020460:	4813      	ldr	r0, [pc, #76]	; (80204b0 <rand+0x68>)
 8020462:	214e      	movs	r1, #78	; 0x4e
 8020464:	f001 fb26 	bl	8021ab4 <__assert_func>
 8020468:	4a12      	ldr	r2, [pc, #72]	; (80204b4 <rand+0x6c>)
 802046a:	4b13      	ldr	r3, [pc, #76]	; (80204b8 <rand+0x70>)
 802046c:	e9c0 2300 	strd	r2, r3, [r0]
 8020470:	4b12      	ldr	r3, [pc, #72]	; (80204bc <rand+0x74>)
 8020472:	6083      	str	r3, [r0, #8]
 8020474:	230b      	movs	r3, #11
 8020476:	8183      	strh	r3, [r0, #12]
 8020478:	2201      	movs	r2, #1
 802047a:	2300      	movs	r3, #0
 802047c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8020480:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020482:	480f      	ldr	r0, [pc, #60]	; (80204c0 <rand+0x78>)
 8020484:	690a      	ldr	r2, [r1, #16]
 8020486:	694b      	ldr	r3, [r1, #20]
 8020488:	4c0e      	ldr	r4, [pc, #56]	; (80204c4 <rand+0x7c>)
 802048a:	4350      	muls	r0, r2
 802048c:	fb04 0003 	mla	r0, r4, r3, r0
 8020490:	fba2 3404 	umull	r3, r4, r2, r4
 8020494:	1c5a      	adds	r2, r3, #1
 8020496:	4404      	add	r4, r0
 8020498:	f144 0000 	adc.w	r0, r4, #0
 802049c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80204a0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80204a4:	bd10      	pop	{r4, pc}
 80204a6:	bf00      	nop
 80204a8:	20000108 	.word	0x20000108
 80204ac:	08028eac 	.word	0x08028eac
 80204b0:	08028f84 	.word	0x08028f84
 80204b4:	abcd330e 	.word	0xabcd330e
 80204b8:	e66d1234 	.word	0xe66d1234
 80204bc:	0005deec 	.word	0x0005deec
 80204c0:	5851f42d 	.word	0x5851f42d
 80204c4:	4c957f2d 	.word	0x4c957f2d

080204c8 <realloc>:
 80204c8:	4b02      	ldr	r3, [pc, #8]	; (80204d4 <realloc+0xc>)
 80204ca:	460a      	mov	r2, r1
 80204cc:	4601      	mov	r1, r0
 80204ce:	6818      	ldr	r0, [r3, #0]
 80204d0:	f001 bcb2 	b.w	8021e38 <_realloc_r>
 80204d4:	20000108 	.word	0x20000108

080204d8 <_sbrk_r>:
 80204d8:	b538      	push	{r3, r4, r5, lr}
 80204da:	4d06      	ldr	r5, [pc, #24]	; (80204f4 <_sbrk_r+0x1c>)
 80204dc:	2300      	movs	r3, #0
 80204de:	4604      	mov	r4, r0
 80204e0:	4608      	mov	r0, r1
 80204e2:	602b      	str	r3, [r5, #0]
 80204e4:	f7e0 fcd2 	bl	8000e8c <_sbrk>
 80204e8:	1c43      	adds	r3, r0, #1
 80204ea:	d102      	bne.n	80204f2 <_sbrk_r+0x1a>
 80204ec:	682b      	ldr	r3, [r5, #0]
 80204ee:	b103      	cbz	r3, 80204f2 <_sbrk_r+0x1a>
 80204f0:	6023      	str	r3, [r4, #0]
 80204f2:	bd38      	pop	{r3, r4, r5, pc}
 80204f4:	20000f50 	.word	0x20000f50

080204f8 <_raise_r>:
 80204f8:	291f      	cmp	r1, #31
 80204fa:	b538      	push	{r3, r4, r5, lr}
 80204fc:	4604      	mov	r4, r0
 80204fe:	460d      	mov	r5, r1
 8020500:	d904      	bls.n	802050c <_raise_r+0x14>
 8020502:	2316      	movs	r3, #22
 8020504:	6003      	str	r3, [r0, #0]
 8020506:	f04f 30ff 	mov.w	r0, #4294967295
 802050a:	bd38      	pop	{r3, r4, r5, pc}
 802050c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802050e:	b112      	cbz	r2, 8020516 <_raise_r+0x1e>
 8020510:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020514:	b94b      	cbnz	r3, 802052a <_raise_r+0x32>
 8020516:	4620      	mov	r0, r4
 8020518:	f000 f830 	bl	802057c <_getpid_r>
 802051c:	462a      	mov	r2, r5
 802051e:	4601      	mov	r1, r0
 8020520:	4620      	mov	r0, r4
 8020522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020526:	f000 b817 	b.w	8020558 <_kill_r>
 802052a:	2b01      	cmp	r3, #1
 802052c:	d00a      	beq.n	8020544 <_raise_r+0x4c>
 802052e:	1c59      	adds	r1, r3, #1
 8020530:	d103      	bne.n	802053a <_raise_r+0x42>
 8020532:	2316      	movs	r3, #22
 8020534:	6003      	str	r3, [r0, #0]
 8020536:	2001      	movs	r0, #1
 8020538:	e7e7      	b.n	802050a <_raise_r+0x12>
 802053a:	2400      	movs	r4, #0
 802053c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020540:	4628      	mov	r0, r5
 8020542:	4798      	blx	r3
 8020544:	2000      	movs	r0, #0
 8020546:	e7e0      	b.n	802050a <_raise_r+0x12>

08020548 <raise>:
 8020548:	4b02      	ldr	r3, [pc, #8]	; (8020554 <raise+0xc>)
 802054a:	4601      	mov	r1, r0
 802054c:	6818      	ldr	r0, [r3, #0]
 802054e:	f7ff bfd3 	b.w	80204f8 <_raise_r>
 8020552:	bf00      	nop
 8020554:	20000108 	.word	0x20000108

08020558 <_kill_r>:
 8020558:	b538      	push	{r3, r4, r5, lr}
 802055a:	4d07      	ldr	r5, [pc, #28]	; (8020578 <_kill_r+0x20>)
 802055c:	2300      	movs	r3, #0
 802055e:	4604      	mov	r4, r0
 8020560:	4608      	mov	r0, r1
 8020562:	4611      	mov	r1, r2
 8020564:	602b      	str	r3, [r5, #0]
 8020566:	f7e0 fbfc 	bl	8000d62 <_kill>
 802056a:	1c43      	adds	r3, r0, #1
 802056c:	d102      	bne.n	8020574 <_kill_r+0x1c>
 802056e:	682b      	ldr	r3, [r5, #0]
 8020570:	b103      	cbz	r3, 8020574 <_kill_r+0x1c>
 8020572:	6023      	str	r3, [r4, #0]
 8020574:	bd38      	pop	{r3, r4, r5, pc}
 8020576:	bf00      	nop
 8020578:	20000f50 	.word	0x20000f50

0802057c <_getpid_r>:
 802057c:	f7e0 bbe9 	b.w	8000d52 <_getpid>

08020580 <siprintf>:
 8020580:	b40e      	push	{r1, r2, r3}
 8020582:	b500      	push	{lr}
 8020584:	b09c      	sub	sp, #112	; 0x70
 8020586:	ab1d      	add	r3, sp, #116	; 0x74
 8020588:	9002      	str	r0, [sp, #8]
 802058a:	9006      	str	r0, [sp, #24]
 802058c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020590:	4809      	ldr	r0, [pc, #36]	; (80205b8 <siprintf+0x38>)
 8020592:	9107      	str	r1, [sp, #28]
 8020594:	9104      	str	r1, [sp, #16]
 8020596:	4909      	ldr	r1, [pc, #36]	; (80205bc <siprintf+0x3c>)
 8020598:	f853 2b04 	ldr.w	r2, [r3], #4
 802059c:	9105      	str	r1, [sp, #20]
 802059e:	6800      	ldr	r0, [r0, #0]
 80205a0:	9301      	str	r3, [sp, #4]
 80205a2:	a902      	add	r1, sp, #8
 80205a4:	f001 fcca 	bl	8021f3c <_svfiprintf_r>
 80205a8:	9b02      	ldr	r3, [sp, #8]
 80205aa:	2200      	movs	r2, #0
 80205ac:	701a      	strb	r2, [r3, #0]
 80205ae:	b01c      	add	sp, #112	; 0x70
 80205b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80205b4:	b003      	add	sp, #12
 80205b6:	4770      	bx	lr
 80205b8:	20000108 	.word	0x20000108
 80205bc:	ffff0208 	.word	0xffff0208

080205c0 <__sread>:
 80205c0:	b510      	push	{r4, lr}
 80205c2:	460c      	mov	r4, r1
 80205c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80205c8:	f002 f8ee 	bl	80227a8 <_read_r>
 80205cc:	2800      	cmp	r0, #0
 80205ce:	bfab      	itete	ge
 80205d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80205d2:	89a3      	ldrhlt	r3, [r4, #12]
 80205d4:	181b      	addge	r3, r3, r0
 80205d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80205da:	bfac      	ite	ge
 80205dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80205de:	81a3      	strhlt	r3, [r4, #12]
 80205e0:	bd10      	pop	{r4, pc}

080205e2 <__seofread>:
 80205e2:	2000      	movs	r0, #0
 80205e4:	4770      	bx	lr

080205e6 <__swrite>:
 80205e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80205ea:	461f      	mov	r7, r3
 80205ec:	898b      	ldrh	r3, [r1, #12]
 80205ee:	05db      	lsls	r3, r3, #23
 80205f0:	4605      	mov	r5, r0
 80205f2:	460c      	mov	r4, r1
 80205f4:	4616      	mov	r6, r2
 80205f6:	d505      	bpl.n	8020604 <__swrite+0x1e>
 80205f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80205fc:	2302      	movs	r3, #2
 80205fe:	2200      	movs	r2, #0
 8020600:	f001 fbea 	bl	8021dd8 <_lseek_r>
 8020604:	89a3      	ldrh	r3, [r4, #12]
 8020606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802060a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802060e:	81a3      	strh	r3, [r4, #12]
 8020610:	4632      	mov	r2, r6
 8020612:	463b      	mov	r3, r7
 8020614:	4628      	mov	r0, r5
 8020616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802061a:	f001 b965 	b.w	80218e8 <_write_r>

0802061e <__sseek>:
 802061e:	b510      	push	{r4, lr}
 8020620:	460c      	mov	r4, r1
 8020622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020626:	f001 fbd7 	bl	8021dd8 <_lseek_r>
 802062a:	1c43      	adds	r3, r0, #1
 802062c:	89a3      	ldrh	r3, [r4, #12]
 802062e:	bf15      	itete	ne
 8020630:	6560      	strne	r0, [r4, #84]	; 0x54
 8020632:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020636:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802063a:	81a3      	strheq	r3, [r4, #12]
 802063c:	bf18      	it	ne
 802063e:	81a3      	strhne	r3, [r4, #12]
 8020640:	bd10      	pop	{r4, pc}

08020642 <__sclose>:
 8020642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020646:	f001 ba53 	b.w	8021af0 <_close_r>
	...

0802064c <iso_year_adjust>:
 802064c:	6941      	ldr	r1, [r0, #20]
 802064e:	2900      	cmp	r1, #0
 8020650:	f240 736c 	movw	r3, #1900	; 0x76c
 8020654:	bfa8      	it	ge
 8020656:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 802065a:	18ca      	adds	r2, r1, r3
 802065c:	078b      	lsls	r3, r1, #30
 802065e:	d105      	bne.n	802066c <iso_year_adjust+0x20>
 8020660:	2164      	movs	r1, #100	; 0x64
 8020662:	fb92 f3f1 	sdiv	r3, r2, r1
 8020666:	fb01 2313 	mls	r3, r1, r3, r2
 802066a:	b9db      	cbnz	r3, 80206a4 <iso_year_adjust+0x58>
 802066c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020670:	fb92 f3f1 	sdiv	r3, r2, r1
 8020674:	fb01 2313 	mls	r3, r1, r3, r2
 8020678:	fab3 f383 	clz	r3, r3
 802067c:	095b      	lsrs	r3, r3, #5
 802067e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8020682:	0040      	lsls	r0, r0, #1
 8020684:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8020688:	4418      	add	r0, r3
 802068a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 802068e:	4298      	cmp	r0, r3
 8020690:	d03a      	beq.n	8020708 <iso_year_adjust+0xbc>
 8020692:	dc21      	bgt.n	80206d8 <iso_year_adjust+0x8c>
 8020694:	2801      	cmp	r0, #1
 8020696:	dc1a      	bgt.n	80206ce <iso_year_adjust+0x82>
 8020698:	2800      	cmp	r0, #0
 802069a:	bfb4      	ite	lt
 802069c:	2000      	movlt	r0, #0
 802069e:	f04f 30ff 	movge.w	r0, #4294967295
 80206a2:	4770      	bx	lr
 80206a4:	2301      	movs	r3, #1
 80206a6:	e7ea      	b.n	802067e <iso_year_adjust+0x32>
 80206a8:	2817      	cmp	r0, #23
 80206aa:	d813      	bhi.n	80206d4 <iso_year_adjust+0x88>
 80206ac:	e8df f000 	tbb	[pc, r0]
 80206b0:	0c0c0c0c 	.word	0x0c0c0c0c
 80206b4:	0c0c1212 	.word	0x0c0c1212
 80206b8:	12121212 	.word	0x12121212
 80206bc:	12121212 	.word	0x12121212
 80206c0:	0c0c1212 	.word	0x0c0c1212
 80206c4:	0c0c1212 	.word	0x0c0c1212
 80206c8:	f04f 30ff 	mov.w	r0, #4294967295
 80206cc:	4770      	bx	lr
 80206ce:	380a      	subs	r0, #10
 80206d0:	2817      	cmp	r0, #23
 80206d2:	d9e9      	bls.n	80206a8 <iso_year_adjust+0x5c>
 80206d4:	2000      	movs	r0, #0
 80206d6:	4770      	bx	lr
 80206d8:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80206dc:	4298      	cmp	r0, r3
 80206de:	dc06      	bgt.n	80206ee <iso_year_adjust+0xa2>
 80206e0:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80206e4:	4298      	cmp	r0, r3
 80206e6:	bfd4      	ite	le
 80206e8:	2000      	movle	r0, #0
 80206ea:	2001      	movgt	r0, #1
 80206ec:	4770      	bx	lr
 80206ee:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80206f2:	3802      	subs	r0, #2
 80206f4:	2815      	cmp	r0, #21
 80206f6:	d8ed      	bhi.n	80206d4 <iso_year_adjust+0x88>
 80206f8:	2301      	movs	r3, #1
 80206fa:	4083      	lsls	r3, r0
 80206fc:	4803      	ldr	r0, [pc, #12]	; (802070c <iso_year_adjust+0xc0>)
 80206fe:	4018      	ands	r0, r3
 8020700:	3800      	subs	r0, #0
 8020702:	bf18      	it	ne
 8020704:	2001      	movne	r0, #1
 8020706:	4770      	bx	lr
 8020708:	2001      	movs	r0, #1
 802070a:	4770      	bx	lr
 802070c:	002a001f 	.word	0x002a001f

08020710 <__strftime>:
 8020710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020714:	b091      	sub	sp, #68	; 0x44
 8020716:	461d      	mov	r5, r3
 8020718:	2300      	movs	r3, #0
 802071a:	4681      	mov	r9, r0
 802071c:	4688      	mov	r8, r1
 802071e:	9304      	str	r3, [sp, #16]
 8020720:	461c      	mov	r4, r3
 8020722:	7813      	ldrb	r3, [r2, #0]
 8020724:	2b00      	cmp	r3, #0
 8020726:	f000 84d1 	beq.w	80210cc <__strftime+0x9bc>
 802072a:	2b25      	cmp	r3, #37	; 0x25
 802072c:	d11b      	bne.n	8020766 <__strftime+0x56>
 802072e:	7857      	ldrb	r7, [r2, #1]
 8020730:	2f30      	cmp	r7, #48	; 0x30
 8020732:	d024      	beq.n	802077e <__strftime+0x6e>
 8020734:	2f2b      	cmp	r7, #43	; 0x2b
 8020736:	d022      	beq.n	802077e <__strftime+0x6e>
 8020738:	f102 0b01 	add.w	fp, r2, #1
 802073c:	2700      	movs	r7, #0
 802073e:	f89b 3000 	ldrb.w	r3, [fp]
 8020742:	3b31      	subs	r3, #49	; 0x31
 8020744:	2b08      	cmp	r3, #8
 8020746:	d81d      	bhi.n	8020784 <__strftime+0x74>
 8020748:	4658      	mov	r0, fp
 802074a:	220a      	movs	r2, #10
 802074c:	a908      	add	r1, sp, #32
 802074e:	f000 fdff 	bl	8021350 <strtoul>
 8020752:	f8dd b020 	ldr.w	fp, [sp, #32]
 8020756:	4606      	mov	r6, r0
 8020758:	f89b 3000 	ldrb.w	r3, [fp]
 802075c:	2b45      	cmp	r3, #69	; 0x45
 802075e:	d113      	bne.n	8020788 <__strftime+0x78>
 8020760:	f10b 0b01 	add.w	fp, fp, #1
 8020764:	e012      	b.n	802078c <__strftime+0x7c>
 8020766:	f108 31ff 	add.w	r1, r8, #4294967295
 802076a:	42a1      	cmp	r1, r4
 802076c:	d802      	bhi.n	8020774 <__strftime+0x64>
 802076e:	2400      	movs	r4, #0
 8020770:	f000 bcb2 	b.w	80210d8 <__strftime+0x9c8>
 8020774:	f809 3004 	strb.w	r3, [r9, r4]
 8020778:	3201      	adds	r2, #1
 802077a:	3401      	adds	r4, #1
 802077c:	e7d1      	b.n	8020722 <__strftime+0x12>
 802077e:	f102 0b02 	add.w	fp, r2, #2
 8020782:	e7dc      	b.n	802073e <__strftime+0x2e>
 8020784:	2600      	movs	r6, #0
 8020786:	e7e7      	b.n	8020758 <__strftime+0x48>
 8020788:	2b4f      	cmp	r3, #79	; 0x4f
 802078a:	d0e9      	beq.n	8020760 <__strftime+0x50>
 802078c:	f89b 0000 	ldrb.w	r0, [fp]
 8020790:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8020794:	2b55      	cmp	r3, #85	; 0x55
 8020796:	d8ea      	bhi.n	802076e <__strftime+0x5e>
 8020798:	a201      	add	r2, pc, #4	; (adr r2, 80207a0 <__strftime+0x90>)
 802079a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802079e:	bf00      	nop
 80207a0:	080210bf 	.word	0x080210bf
 80207a4:	0802076f 	.word	0x0802076f
 80207a8:	0802076f 	.word	0x0802076f
 80207ac:	0802076f 	.word	0x0802076f
 80207b0:	0802076f 	.word	0x0802076f
 80207b4:	0802076f 	.word	0x0802076f
 80207b8:	0802076f 	.word	0x0802076f
 80207bc:	0802076f 	.word	0x0802076f
 80207c0:	0802076f 	.word	0x0802076f
 80207c4:	0802076f 	.word	0x0802076f
 80207c8:	0802076f 	.word	0x0802076f
 80207cc:	0802076f 	.word	0x0802076f
 80207d0:	0802076f 	.word	0x0802076f
 80207d4:	0802076f 	.word	0x0802076f
 80207d8:	0802076f 	.word	0x0802076f
 80207dc:	0802076f 	.word	0x0802076f
 80207e0:	0802076f 	.word	0x0802076f
 80207e4:	0802076f 	.word	0x0802076f
 80207e8:	0802076f 	.word	0x0802076f
 80207ec:	0802076f 	.word	0x0802076f
 80207f0:	0802076f 	.word	0x0802076f
 80207f4:	0802076f 	.word	0x0802076f
 80207f8:	0802076f 	.word	0x0802076f
 80207fc:	0802076f 	.word	0x0802076f
 8020800:	0802076f 	.word	0x0802076f
 8020804:	0802076f 	.word	0x0802076f
 8020808:	0802076f 	.word	0x0802076f
 802080c:	0802076f 	.word	0x0802076f
 8020810:	08020937 	.word	0x08020937
 8020814:	08020991 	.word	0x08020991
 8020818:	08020a07 	.word	0x08020a07
 802081c:	08020aa1 	.word	0x08020aa1
 8020820:	0802076f 	.word	0x0802076f
 8020824:	08020aed 	.word	0x08020aed
 8020828:	08020bcd 	.word	0x08020bcd
 802082c:	08020ccf 	.word	0x08020ccf
 8020830:	08020cdd 	.word	0x08020cdd
 8020834:	0802076f 	.word	0x0802076f
 8020838:	0802076f 	.word	0x0802076f
 802083c:	0802076f 	.word	0x0802076f
 8020840:	08020d0d 	.word	0x08020d0d
 8020844:	0802076f 	.word	0x0802076f
 8020848:	0802076f 	.word	0x0802076f
 802084c:	08020d25 	.word	0x08020d25
 8020850:	0802076f 	.word	0x0802076f
 8020854:	08020d73 	.word	0x08020d73
 8020858:	08020e89 	.word	0x08020e89
 802085c:	08020e9b 	.word	0x08020e9b
 8020860:	08020ef3 	.word	0x08020ef3
 8020864:	08020f03 	.word	0x08020f03
 8020868:	08020f79 	.word	0x08020f79
 802086c:	080209ff 	.word	0x080209ff
 8020870:	08020fad 	.word	0x08020fad
 8020874:	0802106b 	.word	0x0802106b
 8020878:	0802076f 	.word	0x0802076f
 802087c:	0802076f 	.word	0x0802076f
 8020880:	0802076f 	.word	0x0802076f
 8020884:	0802076f 	.word	0x0802076f
 8020888:	0802076f 	.word	0x0802076f
 802088c:	0802076f 	.word	0x0802076f
 8020890:	080208f9 	.word	0x080208f9
 8020894:	08020965 	.word	0x08020965
 8020898:	080209bf 	.word	0x080209bf
 802089c:	08020a79 	.word	0x08020a79
 80208a0:	08020a79 	.word	0x08020a79
 80208a4:	0802076f 	.word	0x0802076f
 80208a8:	08020b35 	.word	0x08020b35
 80208ac:	08020965 	.word	0x08020965
 80208b0:	0802076f 	.word	0x0802076f
 80208b4:	08020cff 	.word	0x08020cff
 80208b8:	08020ccf 	.word	0x08020ccf
 80208bc:	08020cdd 	.word	0x08020cdd
 80208c0:	08020d07 	.word	0x08020d07
 80208c4:	08020d11 	.word	0x08020d11
 80208c8:	0802076f 	.word	0x0802076f
 80208cc:	08020d25 	.word	0x08020d25
 80208d0:	0802076f 	.word	0x0802076f
 80208d4:	080209ef 	.word	0x080209ef
 80208d8:	08020d89 	.word	0x08020d89
 80208dc:	08020e8d 	.word	0x08020e8d
 80208e0:	08020ed5 	.word	0x08020ed5
 80208e4:	0802076f 	.word	0x0802076f
 80208e8:	08020f69 	.word	0x08020f69
 80208ec:	080209f7 	.word	0x080209f7
 80208f0:	08020f91 	.word	0x08020f91
 80208f4:	08020ffd 	.word	0x08020ffd
 80208f8:	69ab      	ldr	r3, [r5, #24]
 80208fa:	4aa7      	ldr	r2, [pc, #668]	; (8020b98 <__strftime+0x488>)
 80208fc:	3318      	adds	r3, #24
 80208fe:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8020902:	4630      	mov	r0, r6
 8020904:	f7df fc9a 	bl	800023c <strlen>
 8020908:	3e01      	subs	r6, #1
 802090a:	4420      	add	r0, r4
 802090c:	f108 33ff 	add.w	r3, r8, #4294967295
 8020910:	42a0      	cmp	r0, r4
 8020912:	d107      	bne.n	8020924 <__strftime+0x214>
 8020914:	f89b 3000 	ldrb.w	r3, [fp]
 8020918:	2b00      	cmp	r3, #0
 802091a:	f000 83d7 	beq.w	80210cc <__strftime+0x9bc>
 802091e:	f10b 0201 	add.w	r2, fp, #1
 8020922:	e6fe      	b.n	8020722 <__strftime+0x12>
 8020924:	42a3      	cmp	r3, r4
 8020926:	f67f af22 	bls.w	802076e <__strftime+0x5e>
 802092a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802092e:	f809 2004 	strb.w	r2, [r9, r4]
 8020932:	3401      	adds	r4, #1
 8020934:	e7ec      	b.n	8020910 <__strftime+0x200>
 8020936:	69aa      	ldr	r2, [r5, #24]
 8020938:	4b97      	ldr	r3, [pc, #604]	; (8020b98 <__strftime+0x488>)
 802093a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802093e:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8020940:	4630      	mov	r0, r6
 8020942:	f7df fc7b 	bl	800023c <strlen>
 8020946:	3e01      	subs	r6, #1
 8020948:	4420      	add	r0, r4
 802094a:	f108 33ff 	add.w	r3, r8, #4294967295
 802094e:	42a0      	cmp	r0, r4
 8020950:	d0e0      	beq.n	8020914 <__strftime+0x204>
 8020952:	42a3      	cmp	r3, r4
 8020954:	f67f af0b 	bls.w	802076e <__strftime+0x5e>
 8020958:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802095c:	f809 2004 	strb.w	r2, [r9, r4]
 8020960:	3401      	adds	r4, #1
 8020962:	e7f4      	b.n	802094e <__strftime+0x23e>
 8020964:	4b8c      	ldr	r3, [pc, #560]	; (8020b98 <__strftime+0x488>)
 8020966:	692a      	ldr	r2, [r5, #16]
 8020968:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802096c:	4630      	mov	r0, r6
 802096e:	f7df fc65 	bl	800023c <strlen>
 8020972:	3e01      	subs	r6, #1
 8020974:	4420      	add	r0, r4
 8020976:	f108 33ff 	add.w	r3, r8, #4294967295
 802097a:	42a0      	cmp	r0, r4
 802097c:	d0ca      	beq.n	8020914 <__strftime+0x204>
 802097e:	42a3      	cmp	r3, r4
 8020980:	f67f aef5 	bls.w	802076e <__strftime+0x5e>
 8020984:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020988:	f809 2004 	strb.w	r2, [r9, r4]
 802098c:	3401      	adds	r4, #1
 802098e:	e7f4      	b.n	802097a <__strftime+0x26a>
 8020990:	692b      	ldr	r3, [r5, #16]
 8020992:	4a81      	ldr	r2, [pc, #516]	; (8020b98 <__strftime+0x488>)
 8020994:	330c      	adds	r3, #12
 8020996:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 802099a:	4630      	mov	r0, r6
 802099c:	f7df fc4e 	bl	800023c <strlen>
 80209a0:	3e01      	subs	r6, #1
 80209a2:	4420      	add	r0, r4
 80209a4:	f108 33ff 	add.w	r3, r8, #4294967295
 80209a8:	42a0      	cmp	r0, r4
 80209aa:	d0b3      	beq.n	8020914 <__strftime+0x204>
 80209ac:	42a3      	cmp	r3, r4
 80209ae:	f67f aede 	bls.w	802076e <__strftime+0x5e>
 80209b2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80209b6:	f809 2004 	strb.w	r2, [r9, r4]
 80209ba:	3401      	adds	r4, #1
 80209bc:	e7f4      	b.n	80209a8 <__strftime+0x298>
 80209be:	4b76      	ldr	r3, [pc, #472]	; (8020b98 <__strftime+0x488>)
 80209c0:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80209c4:	4630      	mov	r0, r6
 80209c6:	f7df fc39 	bl	800023c <strlen>
 80209ca:	7833      	ldrb	r3, [r6, #0]
 80209cc:	2b00      	cmp	r3, #0
 80209ce:	d0a1      	beq.n	8020914 <__strftime+0x204>
 80209d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80209d2:	9300      	str	r3, [sp, #0]
 80209d4:	4632      	mov	r2, r6
 80209d6:	462b      	mov	r3, r5
 80209d8:	eba8 0104 	sub.w	r1, r8, r4
 80209dc:	eb09 0004 	add.w	r0, r9, r4
 80209e0:	f7ff fe96 	bl	8020710 <__strftime>
 80209e4:	2800      	cmp	r0, #0
 80209e6:	f77f aec2 	ble.w	802076e <__strftime+0x5e>
 80209ea:	4404      	add	r4, r0
 80209ec:	e792      	b.n	8020914 <__strftime+0x204>
 80209ee:	4b6a      	ldr	r3, [pc, #424]	; (8020b98 <__strftime+0x488>)
 80209f0:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 80209f4:	e7e6      	b.n	80209c4 <__strftime+0x2b4>
 80209f6:	4b68      	ldr	r3, [pc, #416]	; (8020b98 <__strftime+0x488>)
 80209f8:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 80209fc:	e7e2      	b.n	80209c4 <__strftime+0x2b4>
 80209fe:	4b66      	ldr	r3, [pc, #408]	; (8020b98 <__strftime+0x488>)
 8020a00:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8020a04:	e7de      	b.n	80209c4 <__strftime+0x2b4>
 8020a06:	4965      	ldr	r1, [pc, #404]	; (8020b9c <__strftime+0x48c>)
 8020a08:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8020a0c:	458a      	cmp	sl, r1
 8020a0e:	bfac      	ite	ge
 8020a10:	2100      	movge	r1, #0
 8020a12:	2101      	movlt	r1, #1
 8020a14:	f1ba 0f00 	cmp.w	sl, #0
 8020a18:	db0e      	blt.n	8020a38 <__strftime+0x328>
 8020a1a:	2064      	movs	r0, #100	; 0x64
 8020a1c:	fb9a f0f0 	sdiv	r0, sl, r0
 8020a20:	3013      	adds	r0, #19
 8020a22:	b19f      	cbz	r7, 8020a4c <__strftime+0x33c>
 8020a24:	2863      	cmp	r0, #99	; 0x63
 8020a26:	dd25      	ble.n	8020a74 <__strftime+0x364>
 8020a28:	4a5d      	ldr	r2, [pc, #372]	; (8020ba0 <__strftime+0x490>)
 8020a2a:	4b5e      	ldr	r3, [pc, #376]	; (8020ba4 <__strftime+0x494>)
 8020a2c:	2f2b      	cmp	r7, #43	; 0x2b
 8020a2e:	bf14      	ite	ne
 8020a30:	4617      	movne	r7, r2
 8020a32:	461f      	moveq	r7, r3
 8020a34:	4a5c      	ldr	r2, [pc, #368]	; (8020ba8 <__strftime+0x498>)
 8020a36:	e00b      	b.n	8020a50 <__strftime+0x340>
 8020a38:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8020a3c:	9105      	str	r1, [sp, #20]
 8020a3e:	f001 f835 	bl	8021aac <abs>
 8020a42:	2364      	movs	r3, #100	; 0x64
 8020a44:	9905      	ldr	r1, [sp, #20]
 8020a46:	fb90 f0f3 	sdiv	r0, r0, r3
 8020a4a:	e7ea      	b.n	8020a22 <__strftime+0x312>
 8020a4c:	4f54      	ldr	r7, [pc, #336]	; (8020ba0 <__strftime+0x490>)
 8020a4e:	4a57      	ldr	r2, [pc, #348]	; (8020bac <__strftime+0x49c>)
 8020a50:	4b57      	ldr	r3, [pc, #348]	; (8020bb0 <__strftime+0x4a0>)
 8020a52:	9001      	str	r0, [sp, #4]
 8020a54:	2e02      	cmp	r6, #2
 8020a56:	bf2c      	ite	cs
 8020a58:	ebc1 0606 	rsbcs	r6, r1, r6
 8020a5c:	f1c1 0602 	rsbcc	r6, r1, #2
 8020a60:	494e      	ldr	r1, [pc, #312]	; (8020b9c <__strftime+0x48c>)
 8020a62:	9600      	str	r6, [sp, #0]
 8020a64:	458a      	cmp	sl, r1
 8020a66:	bfa8      	it	ge
 8020a68:	463b      	movge	r3, r7
 8020a6a:	eba8 0104 	sub.w	r1, r8, r4
 8020a6e:	eb09 0004 	add.w	r0, r9, r4
 8020a72:	e02a      	b.n	8020aca <__strftime+0x3ba>
 8020a74:	4f4a      	ldr	r7, [pc, #296]	; (8020ba0 <__strftime+0x490>)
 8020a76:	e7dd      	b.n	8020a34 <__strftime+0x324>
 8020a78:	494e      	ldr	r1, [pc, #312]	; (8020bb4 <__strftime+0x4a4>)
 8020a7a:	4a4f      	ldr	r2, [pc, #316]	; (8020bb8 <__strftime+0x4a8>)
 8020a7c:	68eb      	ldr	r3, [r5, #12]
 8020a7e:	2864      	cmp	r0, #100	; 0x64
 8020a80:	bf08      	it	eq
 8020a82:	460a      	moveq	r2, r1
 8020a84:	eba8 0104 	sub.w	r1, r8, r4
 8020a88:	eb09 0004 	add.w	r0, r9, r4
 8020a8c:	f001 fe9e 	bl	80227cc <sniprintf>
 8020a90:	2800      	cmp	r0, #0
 8020a92:	f6ff ae6c 	blt.w	802076e <__strftime+0x5e>
 8020a96:	4404      	add	r4, r0
 8020a98:	45a0      	cmp	r8, r4
 8020a9a:	f63f af3b 	bhi.w	8020914 <__strftime+0x204>
 8020a9e:	e666      	b.n	802076e <__strftime+0x5e>
 8020aa0:	6968      	ldr	r0, [r5, #20]
 8020aa2:	692b      	ldr	r3, [r5, #16]
 8020aa4:	68ef      	ldr	r7, [r5, #12]
 8020aa6:	2800      	cmp	r0, #0
 8020aa8:	eb09 0604 	add.w	r6, r9, r4
 8020aac:	eba8 0104 	sub.w	r1, r8, r4
 8020ab0:	f103 0301 	add.w	r3, r3, #1
 8020ab4:	db0c      	blt.n	8020ad0 <__strftime+0x3c0>
 8020ab6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020aba:	fb90 f2fc 	sdiv	r2, r0, ip
 8020abe:	fb0c 0212 	mls	r2, ip, r2, r0
 8020ac2:	e9cd 7200 	strd	r7, r2, [sp]
 8020ac6:	4a3d      	ldr	r2, [pc, #244]	; (8020bbc <__strftime+0x4ac>)
 8020ac8:	4630      	mov	r0, r6
 8020aca:	f001 fe7f 	bl	80227cc <sniprintf>
 8020ace:	e7df      	b.n	8020a90 <__strftime+0x380>
 8020ad0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020ad4:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8020ad8:	f000 ffe8 	bl	8021aac <abs>
 8020adc:	2264      	movs	r2, #100	; 0x64
 8020ade:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8020ae2:	fb90 fcf2 	sdiv	ip, r0, r2
 8020ae6:	fb0c 0212 	mls	r2, ip, r2, r0
 8020aea:	e7ea      	b.n	8020ac2 <__strftime+0x3b2>
 8020aec:	2325      	movs	r3, #37	; 0x25
 8020aee:	f88d 3020 	strb.w	r3, [sp, #32]
 8020af2:	b187      	cbz	r7, 8020b16 <__strftime+0x406>
 8020af4:	2e06      	cmp	r6, #6
 8020af6:	bf38      	it	cc
 8020af8:	2606      	movcc	r6, #6
 8020afa:	1fb3      	subs	r3, r6, #6
 8020afc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8020b00:	d10c      	bne.n	8020b1c <__strftime+0x40c>
 8020b02:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8020b06:	492e      	ldr	r1, [pc, #184]	; (8020bc0 <__strftime+0x4b0>)
 8020b08:	f001 fec0 	bl	802288c <strcpy>
 8020b0c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020b0e:	9300      	str	r3, [sp, #0]
 8020b10:	aa08      	add	r2, sp, #32
 8020b12:	462b      	mov	r3, r5
 8020b14:	e760      	b.n	80209d8 <__strftime+0x2c8>
 8020b16:	272b      	movs	r7, #43	; 0x2b
 8020b18:	260a      	movs	r6, #10
 8020b1a:	e7ee      	b.n	8020afa <__strftime+0x3ea>
 8020b1c:	4a29      	ldr	r2, [pc, #164]	; (8020bc4 <__strftime+0x4b4>)
 8020b1e:	211e      	movs	r1, #30
 8020b20:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8020b24:	f001 fe52 	bl	80227cc <sniprintf>
 8020b28:	2800      	cmp	r0, #0
 8020b2a:	ddea      	ble.n	8020b02 <__strftime+0x3f2>
 8020b2c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8020b30:	4418      	add	r0, r3
 8020b32:	e7e8      	b.n	8020b06 <__strftime+0x3f6>
 8020b34:	4628      	mov	r0, r5
 8020b36:	f7ff fd89 	bl	802064c <iso_year_adjust>
 8020b3a:	4606      	mov	r6, r0
 8020b3c:	6968      	ldr	r0, [r5, #20]
 8020b3e:	2800      	cmp	r0, #0
 8020b40:	db11      	blt.n	8020b66 <__strftime+0x456>
 8020b42:	2264      	movs	r2, #100	; 0x64
 8020b44:	fb90 f3f2 	sdiv	r3, r0, r2
 8020b48:	fb02 0313 	mls	r3, r2, r3, r0
 8020b4c:	441e      	add	r6, r3
 8020b4e:	2364      	movs	r3, #100	; 0x64
 8020b50:	fb96 f0f3 	sdiv	r0, r6, r3
 8020b54:	fb03 6610 	mls	r6, r3, r0, r6
 8020b58:	441e      	add	r6, r3
 8020b5a:	fbb6 f2f3 	udiv	r2, r6, r3
 8020b5e:	fb03 6312 	mls	r3, r3, r2, r6
 8020b62:	4a14      	ldr	r2, [pc, #80]	; (8020bb4 <__strftime+0x4a4>)
 8020b64:	e78e      	b.n	8020a84 <__strftime+0x374>
 8020b66:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020b6a:	f000 ff9f 	bl	8021aac <abs>
 8020b6e:	2364      	movs	r3, #100	; 0x64
 8020b70:	2e00      	cmp	r6, #0
 8020b72:	fb90 f2f3 	sdiv	r2, r0, r3
 8020b76:	fb02 0313 	mls	r3, r2, r3, r0
 8020b7a:	da05      	bge.n	8020b88 <__strftime+0x478>
 8020b7c:	6969      	ldr	r1, [r5, #20]
 8020b7e:	4a12      	ldr	r2, [pc, #72]	; (8020bc8 <__strftime+0x4b8>)
 8020b80:	4291      	cmp	r1, r2
 8020b82:	bfb8      	it	lt
 8020b84:	2601      	movlt	r6, #1
 8020b86:	e7e1      	b.n	8020b4c <__strftime+0x43c>
 8020b88:	d0e0      	beq.n	8020b4c <__strftime+0x43c>
 8020b8a:	6969      	ldr	r1, [r5, #20]
 8020b8c:	4a03      	ldr	r2, [pc, #12]	; (8020b9c <__strftime+0x48c>)
 8020b8e:	4291      	cmp	r1, r2
 8020b90:	bfb8      	it	lt
 8020b92:	f04f 36ff 	movlt.w	r6, #4294967295
 8020b96:	e7d9      	b.n	8020b4c <__strftime+0x43c>
 8020b98:	08029168 	.word	0x08029168
 8020b9c:	fffff894 	.word	0xfffff894
 8020ba0:	080292db 	.word	0x080292db
 8020ba4:	08028ff2 	.word	0x08028ff2
 8020ba8:	08028fea 	.word	0x08028fea
 8020bac:	08028fe3 	.word	0x08028fe3
 8020bb0:	0802941b 	.word	0x0802941b
 8020bb4:	08029002 	.word	0x08029002
 8020bb8:	08028ff4 	.word	0x08028ff4
 8020bbc:	08028ff8 	.word	0x08028ff8
 8020bc0:	0802900b 	.word	0x0802900b
 8020bc4:	08029007 	.word	0x08029007
 8020bc8:	fffff895 	.word	0xfffff895
 8020bcc:	4bb6      	ldr	r3, [pc, #728]	; (8020ea8 <__strftime+0x798>)
 8020bce:	6969      	ldr	r1, [r5, #20]
 8020bd0:	4299      	cmp	r1, r3
 8020bd2:	bfac      	ite	ge
 8020bd4:	2300      	movge	r3, #0
 8020bd6:	2301      	movlt	r3, #1
 8020bd8:	4628      	mov	r0, r5
 8020bda:	e9cd 3105 	strd	r3, r1, [sp, #20]
 8020bde:	f7ff fd35 	bl	802064c <iso_year_adjust>
 8020be2:	9906      	ldr	r1, [sp, #24]
 8020be4:	2900      	cmp	r1, #0
 8020be6:	4682      	mov	sl, r0
 8020be8:	db27      	blt.n	8020c3a <__strftime+0x52a>
 8020bea:	2264      	movs	r2, #100	; 0x64
 8020bec:	fb91 f2f2 	sdiv	r2, r1, r2
 8020bf0:	3213      	adds	r2, #19
 8020bf2:	6968      	ldr	r0, [r5, #20]
 8020bf4:	2800      	cmp	r0, #0
 8020bf6:	db2b      	blt.n	8020c50 <__strftime+0x540>
 8020bf8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020bfc:	fb90 fefc 	sdiv	lr, r0, ip
 8020c00:	fb0c 001e 	mls	r0, ip, lr, r0
 8020c04:	f1ba 0f00 	cmp.w	sl, #0
 8020c08:	da31      	bge.n	8020c6e <__strftime+0x55e>
 8020c0a:	6969      	ldr	r1, [r5, #20]
 8020c0c:	4ba7      	ldr	r3, [pc, #668]	; (8020eac <__strftime+0x79c>)
 8020c0e:	4299      	cmp	r1, r3
 8020c10:	db38      	blt.n	8020c84 <__strftime+0x574>
 8020c12:	eb0a 0300 	add.w	r3, sl, r0
 8020c16:	1c59      	adds	r1, r3, #1
 8020c18:	d139      	bne.n	8020c8e <__strftime+0x57e>
 8020c1a:	3a01      	subs	r2, #1
 8020c1c:	2363      	movs	r3, #99	; 0x63
 8020c1e:	2064      	movs	r0, #100	; 0x64
 8020c20:	fb00 3202 	mla	r2, r0, r2, r3
 8020c24:	9b05      	ldr	r3, [sp, #20]
 8020c26:	2b00      	cmp	r3, #0
 8020c28:	d036      	beq.n	8020c98 <__strftime+0x588>
 8020c2a:	232d      	movs	r3, #45	; 0x2d
 8020c2c:	f88d 3020 	strb.w	r3, [sp, #32]
 8020c30:	b106      	cbz	r6, 8020c34 <__strftime+0x524>
 8020c32:	3e01      	subs	r6, #1
 8020c34:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8020c38:	e038      	b.n	8020cac <__strftime+0x59c>
 8020c3a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8020c3e:	9106      	str	r1, [sp, #24]
 8020c40:	f000 ff34 	bl	8021aac <abs>
 8020c44:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020c48:	9906      	ldr	r1, [sp, #24]
 8020c4a:	fb90 f2fc 	sdiv	r2, r0, ip
 8020c4e:	e7d0      	b.n	8020bf2 <__strftime+0x4e2>
 8020c50:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020c54:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8020c58:	f000 ff28 	bl	8021aac <abs>
 8020c5c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020c60:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8020c64:	fb90 fefc 	sdiv	lr, r0, ip
 8020c68:	fb0e 001c 	mls	r0, lr, ip, r0
 8020c6c:	e7ca      	b.n	8020c04 <__strftime+0x4f4>
 8020c6e:	d0d0      	beq.n	8020c12 <__strftime+0x502>
 8020c70:	4b8d      	ldr	r3, [pc, #564]	; (8020ea8 <__strftime+0x798>)
 8020c72:	4299      	cmp	r1, r3
 8020c74:	bfb4      	ite	lt
 8020c76:	2301      	movlt	r3, #1
 8020c78:	2300      	movge	r3, #0
 8020c7a:	9305      	str	r3, [sp, #20]
 8020c7c:	bfb8      	it	lt
 8020c7e:	f04f 3aff 	movlt.w	sl, #4294967295
 8020c82:	e7c6      	b.n	8020c12 <__strftime+0x502>
 8020c84:	f04f 0a01 	mov.w	sl, #1
 8020c88:	f8cd a014 	str.w	sl, [sp, #20]
 8020c8c:	e7c1      	b.n	8020c12 <__strftime+0x502>
 8020c8e:	2b64      	cmp	r3, #100	; 0x64
 8020c90:	bf04      	itt	eq
 8020c92:	3201      	addeq	r2, #1
 8020c94:	2300      	moveq	r3, #0
 8020c96:	e7c2      	b.n	8020c1e <__strftime+0x50e>
 8020c98:	2f2b      	cmp	r7, #43	; 0x2b
 8020c9a:	d106      	bne.n	8020caa <__strftime+0x59a>
 8020c9c:	f242 730f 	movw	r3, #9999	; 0x270f
 8020ca0:	429a      	cmp	r2, r3
 8020ca2:	d902      	bls.n	8020caa <__strftime+0x59a>
 8020ca4:	f88d 7020 	strb.w	r7, [sp, #32]
 8020ca8:	e7c2      	b.n	8020c30 <__strftime+0x520>
 8020caa:	ab08      	add	r3, sp, #32
 8020cac:	2125      	movs	r1, #37	; 0x25
 8020cae:	7019      	strb	r1, [r3, #0]
 8020cb0:	b94f      	cbnz	r7, 8020cc6 <__strftime+0x5b6>
 8020cb2:	1c58      	adds	r0, r3, #1
 8020cb4:	497e      	ldr	r1, [pc, #504]	; (8020eb0 <__strftime+0x7a0>)
 8020cb6:	9205      	str	r2, [sp, #20]
 8020cb8:	f001 fde8 	bl	802288c <strcpy>
 8020cbc:	9a05      	ldr	r2, [sp, #20]
 8020cbe:	9200      	str	r2, [sp, #0]
 8020cc0:	4633      	mov	r3, r6
 8020cc2:	aa08      	add	r2, sp, #32
 8020cc4:	e059      	b.n	8020d7a <__strftime+0x66a>
 8020cc6:	2130      	movs	r1, #48	; 0x30
 8020cc8:	1c98      	adds	r0, r3, #2
 8020cca:	7059      	strb	r1, [r3, #1]
 8020ccc:	e7f2      	b.n	8020cb4 <__strftime+0x5a4>
 8020cce:	4979      	ldr	r1, [pc, #484]	; (8020eb4 <__strftime+0x7a4>)
 8020cd0:	4a79      	ldr	r2, [pc, #484]	; (8020eb8 <__strftime+0x7a8>)
 8020cd2:	68ab      	ldr	r3, [r5, #8]
 8020cd4:	286b      	cmp	r0, #107	; 0x6b
 8020cd6:	bf08      	it	eq
 8020cd8:	460a      	moveq	r2, r1
 8020cda:	e6d3      	b.n	8020a84 <__strftime+0x374>
 8020cdc:	68ab      	ldr	r3, [r5, #8]
 8020cde:	b163      	cbz	r3, 8020cfa <__strftime+0x5ea>
 8020ce0:	2b0c      	cmp	r3, #12
 8020ce2:	d004      	beq.n	8020cee <__strftime+0x5de>
 8020ce4:	210c      	movs	r1, #12
 8020ce6:	fb93 f2f1 	sdiv	r2, r3, r1
 8020cea:	fb01 3312 	mls	r3, r1, r2, r3
 8020cee:	4972      	ldr	r1, [pc, #456]	; (8020eb8 <__strftime+0x7a8>)
 8020cf0:	4a70      	ldr	r2, [pc, #448]	; (8020eb4 <__strftime+0x7a4>)
 8020cf2:	2849      	cmp	r0, #73	; 0x49
 8020cf4:	bf08      	it	eq
 8020cf6:	460a      	moveq	r2, r1
 8020cf8:	e6c4      	b.n	8020a84 <__strftime+0x374>
 8020cfa:	230c      	movs	r3, #12
 8020cfc:	e7f7      	b.n	8020cee <__strftime+0x5de>
 8020cfe:	69eb      	ldr	r3, [r5, #28]
 8020d00:	4a6e      	ldr	r2, [pc, #440]	; (8020ebc <__strftime+0x7ac>)
 8020d02:	3301      	adds	r3, #1
 8020d04:	e6be      	b.n	8020a84 <__strftime+0x374>
 8020d06:	692b      	ldr	r3, [r5, #16]
 8020d08:	3301      	adds	r3, #1
 8020d0a:	e72a      	b.n	8020b62 <__strftime+0x452>
 8020d0c:	686b      	ldr	r3, [r5, #4]
 8020d0e:	e728      	b.n	8020b62 <__strftime+0x452>
 8020d10:	f108 33ff 	add.w	r3, r8, #4294967295
 8020d14:	42a3      	cmp	r3, r4
 8020d16:	f67f ad2a 	bls.w	802076e <__strftime+0x5e>
 8020d1a:	230a      	movs	r3, #10
 8020d1c:	f809 3004 	strb.w	r3, [r9, r4]
 8020d20:	3401      	adds	r4, #1
 8020d22:	e5f7      	b.n	8020914 <__strftime+0x204>
 8020d24:	68ab      	ldr	r3, [r5, #8]
 8020d26:	2b0b      	cmp	r3, #11
 8020d28:	bfcc      	ite	gt
 8020d2a:	22a4      	movgt	r2, #164	; 0xa4
 8020d2c:	22a0      	movle	r2, #160	; 0xa0
 8020d2e:	4b64      	ldr	r3, [pc, #400]	; (8020ec0 <__strftime+0x7b0>)
 8020d30:	4413      	add	r3, r2
 8020d32:	685e      	ldr	r6, [r3, #4]
 8020d34:	4630      	mov	r0, r6
 8020d36:	f7df fa81 	bl	800023c <strlen>
 8020d3a:	1e72      	subs	r2, r6, #1
 8020d3c:	4420      	add	r0, r4
 8020d3e:	f108 36ff 	add.w	r6, r8, #4294967295
 8020d42:	42a0      	cmp	r0, r4
 8020d44:	f43f ade6 	beq.w	8020914 <__strftime+0x204>
 8020d48:	42a6      	cmp	r6, r4
 8020d4a:	f67f ad10 	bls.w	802076e <__strftime+0x5e>
 8020d4e:	f89b 1000 	ldrb.w	r1, [fp]
 8020d52:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8020d56:	2950      	cmp	r1, #80	; 0x50
 8020d58:	d107      	bne.n	8020d6a <__strftime+0x65a>
 8020d5a:	495a      	ldr	r1, [pc, #360]	; (8020ec4 <__strftime+0x7b4>)
 8020d5c:	5cc9      	ldrb	r1, [r1, r3]
 8020d5e:	f001 0103 	and.w	r1, r1, #3
 8020d62:	2901      	cmp	r1, #1
 8020d64:	bf08      	it	eq
 8020d66:	3320      	addeq	r3, #32
 8020d68:	b2db      	uxtb	r3, r3
 8020d6a:	f809 3004 	strb.w	r3, [r9, r4]
 8020d6e:	3401      	adds	r4, #1
 8020d70:	e7e7      	b.n	8020d42 <__strftime+0x632>
 8020d72:	686b      	ldr	r3, [r5, #4]
 8020d74:	9300      	str	r3, [sp, #0]
 8020d76:	4a54      	ldr	r2, [pc, #336]	; (8020ec8 <__strftime+0x7b8>)
 8020d78:	68ab      	ldr	r3, [r5, #8]
 8020d7a:	eba8 0104 	sub.w	r1, r8, r4
 8020d7e:	eb09 0004 	add.w	r0, r9, r4
 8020d82:	f001 fd23 	bl	80227cc <sniprintf>
 8020d86:	e683      	b.n	8020a90 <__strftime+0x380>
 8020d88:	6a2b      	ldr	r3, [r5, #32]
 8020d8a:	2b00      	cmp	r3, #0
 8020d8c:	db79      	blt.n	8020e82 <__strftime+0x772>
 8020d8e:	f000 fb91 	bl	80214b4 <__tz_lock>
 8020d92:	9b04      	ldr	r3, [sp, #16]
 8020d94:	b90b      	cbnz	r3, 8020d9a <__strftime+0x68a>
 8020d96:	f000 fb99 	bl	80214cc <_tzset_unlocked>
 8020d9a:	f000 ff55 	bl	8021c48 <__gettzinfo>
 8020d9e:	6a2b      	ldr	r3, [r5, #32]
 8020da0:	2b00      	cmp	r3, #0
 8020da2:	bfcc      	ite	gt
 8020da4:	2350      	movgt	r3, #80	; 0x50
 8020da6:	2328      	movle	r3, #40	; 0x28
 8020da8:	58c3      	ldr	r3, [r0, r3]
 8020daa:	f1c3 0a00 	rsb	sl, r3, #0
 8020dae:	f000 fb87 	bl	80214c0 <__tz_unlock>
 8020db2:	2301      	movs	r3, #1
 8020db4:	9304      	str	r3, [sp, #16]
 8020db6:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8020dba:	4662      	mov	r2, ip
 8020dbc:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8020dc0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8020dc4:	9602      	str	r6, [sp, #8]
 8020dc6:	f143 36ff 	adc.w	r6, r3, #4294967295
 8020dca:	9603      	str	r6, [sp, #12]
 8020dcc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8020dd0:	2e00      	cmp	r6, #0
 8020dd2:	f177 0600 	sbcs.w	r6, r7, #0
 8020dd6:	eba8 0104 	sub.w	r1, r8, r4
 8020dda:	eb09 0004 	add.w	r0, r9, r4
 8020dde:	da05      	bge.n	8020dec <__strftime+0x6dc>
 8020de0:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8020de4:	f143 33ff 	adc.w	r3, r3, #4294967295
 8020de8:	9602      	str	r6, [sp, #8]
 8020dea:	9303      	str	r3, [sp, #12]
 8020dec:	9b02      	ldr	r3, [sp, #8]
 8020dee:	089e      	lsrs	r6, r3, #2
 8020df0:	9b03      	ldr	r3, [sp, #12]
 8020df2:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 8020df6:	f10c 32ff 	add.w	r2, ip, #4294967295
 8020dfa:	109f      	asrs	r7, r3, #2
 8020dfc:	2364      	movs	r3, #100	; 0x64
 8020dfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e02:	1af6      	subs	r6, r6, r3
 8020e04:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8020e08:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 8020e0c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8020e10:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e14:	18f6      	adds	r6, r6, r3
 8020e16:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8020e1a:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8020e1e:	f240 136d 	movw	r3, #365	; 0x16d
 8020e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8020e26:	69eb      	ldr	r3, [r5, #28]
 8020e28:	eb16 060c 	adds.w	r6, r6, ip
 8020e2c:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8020e30:	18f6      	adds	r6, r6, r3
 8020e32:	f04f 0c18 	mov.w	ip, #24
 8020e36:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8020e3a:	fba6 230c 	umull	r2, r3, r6, ip
 8020e3e:	68ae      	ldr	r6, [r5, #8]
 8020e40:	fb0c 3307 	mla	r3, ip, r7, r3
 8020e44:	1992      	adds	r2, r2, r6
 8020e46:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8020e4a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8020e4e:	fba2 670c 	umull	r6, r7, r2, ip
 8020e52:	fb0c 7703 	mla	r7, ip, r3, r7
 8020e56:	686b      	ldr	r3, [r5, #4]
 8020e58:	18f6      	adds	r6, r6, r3
 8020e5a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8020e5e:	fba6 230c 	umull	r2, r3, r6, ip
 8020e62:	682e      	ldr	r6, [r5, #0]
 8020e64:	fb0c 3307 	mla	r3, ip, r7, r3
 8020e68:	1992      	adds	r2, r2, r6
 8020e6a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8020e6e:	ebb2 020a 	subs.w	r2, r2, sl
 8020e72:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8020e76:	e9cd 2300 	strd	r2, r3, [sp]
 8020e7a:	4a14      	ldr	r2, [pc, #80]	; (8020ecc <__strftime+0x7bc>)
 8020e7c:	f001 fca6 	bl	80227cc <sniprintf>
 8020e80:	e606      	b.n	8020a90 <__strftime+0x380>
 8020e82:	f04f 0a00 	mov.w	sl, #0
 8020e86:	e796      	b.n	8020db6 <__strftime+0x6a6>
 8020e88:	682b      	ldr	r3, [r5, #0]
 8020e8a:	e66a      	b.n	8020b62 <__strftime+0x452>
 8020e8c:	f108 33ff 	add.w	r3, r8, #4294967295
 8020e90:	42a3      	cmp	r3, r4
 8020e92:	f67f ac6c 	bls.w	802076e <__strftime+0x5e>
 8020e96:	2309      	movs	r3, #9
 8020e98:	e740      	b.n	8020d1c <__strftime+0x60c>
 8020e9a:	682b      	ldr	r3, [r5, #0]
 8020e9c:	9301      	str	r3, [sp, #4]
 8020e9e:	686b      	ldr	r3, [r5, #4]
 8020ea0:	9300      	str	r3, [sp, #0]
 8020ea2:	4a0b      	ldr	r2, [pc, #44]	; (8020ed0 <__strftime+0x7c0>)
 8020ea4:	68ab      	ldr	r3, [r5, #8]
 8020ea6:	e5e0      	b.n	8020a6a <__strftime+0x35a>
 8020ea8:	fffff894 	.word	0xfffff894
 8020eac:	fffff895 	.word	0xfffff895
 8020eb0:	08029013 	.word	0x08029013
 8020eb4:	08028ff4 	.word	0x08028ff4
 8020eb8:	08029002 	.word	0x08029002
 8020ebc:	08029017 	.word	0x08029017
 8020ec0:	08029168 	.word	0x08029168
 8020ec4:	080292dd 	.word	0x080292dd
 8020ec8:	08029026 	.word	0x08029026
 8020ecc:	0802901c 	.word	0x0802901c
 8020ed0:	08029021 	.word	0x08029021
 8020ed4:	f108 33ff 	add.w	r3, r8, #4294967295
 8020ed8:	42a3      	cmp	r3, r4
 8020eda:	f67f ac48 	bls.w	802076e <__strftime+0x5e>
 8020ede:	69ab      	ldr	r3, [r5, #24]
 8020ee0:	eb09 0204 	add.w	r2, r9, r4
 8020ee4:	3401      	adds	r4, #1
 8020ee6:	b913      	cbnz	r3, 8020eee <__strftime+0x7de>
 8020ee8:	2337      	movs	r3, #55	; 0x37
 8020eea:	7013      	strb	r3, [r2, #0]
 8020eec:	e512      	b.n	8020914 <__strftime+0x204>
 8020eee:	3330      	adds	r3, #48	; 0x30
 8020ef0:	e7fb      	b.n	8020eea <__strftime+0x7da>
 8020ef2:	69eb      	ldr	r3, [r5, #28]
 8020ef4:	69aa      	ldr	r2, [r5, #24]
 8020ef6:	3307      	adds	r3, #7
 8020ef8:	1a9b      	subs	r3, r3, r2
 8020efa:	2207      	movs	r2, #7
 8020efc:	fb93 f3f2 	sdiv	r3, r3, r2
 8020f00:	e62f      	b.n	8020b62 <__strftime+0x452>
 8020f02:	4628      	mov	r0, r5
 8020f04:	f7ff fba2 	bl	802064c <iso_year_adjust>
 8020f08:	69aa      	ldr	r2, [r5, #24]
 8020f0a:	b132      	cbz	r2, 8020f1a <__strftime+0x80a>
 8020f0c:	3a01      	subs	r2, #1
 8020f0e:	2800      	cmp	r0, #0
 8020f10:	dc28      	bgt.n	8020f64 <__strftime+0x854>
 8020f12:	69eb      	ldr	r3, [r5, #28]
 8020f14:	d103      	bne.n	8020f1e <__strftime+0x80e>
 8020f16:	330a      	adds	r3, #10
 8020f18:	e7ee      	b.n	8020ef8 <__strftime+0x7e8>
 8020f1a:	2206      	movs	r2, #6
 8020f1c:	e7f7      	b.n	8020f0e <__strftime+0x7fe>
 8020f1e:	6968      	ldr	r0, [r5, #20]
 8020f20:	2800      	cmp	r0, #0
 8020f22:	eba2 0303 	sub.w	r3, r2, r3
 8020f26:	f240 726b 	movw	r2, #1899	; 0x76b
 8020f2a:	bfa8      	it	ge
 8020f2c:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8020f30:	4410      	add	r0, r2
 8020f32:	0782      	lsls	r2, r0, #30
 8020f34:	d105      	bne.n	8020f42 <__strftime+0x832>
 8020f36:	2264      	movs	r2, #100	; 0x64
 8020f38:	fb90 f1f2 	sdiv	r1, r0, r2
 8020f3c:	fb02 0111 	mls	r1, r2, r1, r0
 8020f40:	b971      	cbnz	r1, 8020f60 <__strftime+0x850>
 8020f42:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020f46:	fb90 f2f1 	sdiv	r2, r0, r1
 8020f4a:	fb01 0212 	mls	r2, r1, r2, r0
 8020f4e:	fab2 f282 	clz	r2, r2
 8020f52:	0952      	lsrs	r2, r2, #5
 8020f54:	1a9a      	subs	r2, r3, r2
 8020f56:	2a05      	cmp	r2, #5
 8020f58:	bfb4      	ite	lt
 8020f5a:	2335      	movlt	r3, #53	; 0x35
 8020f5c:	2334      	movge	r3, #52	; 0x34
 8020f5e:	e600      	b.n	8020b62 <__strftime+0x452>
 8020f60:	2201      	movs	r2, #1
 8020f62:	e7f7      	b.n	8020f54 <__strftime+0x844>
 8020f64:	2301      	movs	r3, #1
 8020f66:	e5fc      	b.n	8020b62 <__strftime+0x452>
 8020f68:	f108 33ff 	add.w	r3, r8, #4294967295
 8020f6c:	42a3      	cmp	r3, r4
 8020f6e:	f67f abfe 	bls.w	802076e <__strftime+0x5e>
 8020f72:	69ab      	ldr	r3, [r5, #24]
 8020f74:	3330      	adds	r3, #48	; 0x30
 8020f76:	e6d1      	b.n	8020d1c <__strftime+0x60c>
 8020f78:	69ab      	ldr	r3, [r5, #24]
 8020f7a:	b13b      	cbz	r3, 8020f8c <__strftime+0x87c>
 8020f7c:	3b01      	subs	r3, #1
 8020f7e:	69ea      	ldr	r2, [r5, #28]
 8020f80:	3207      	adds	r2, #7
 8020f82:	1ad2      	subs	r2, r2, r3
 8020f84:	2307      	movs	r3, #7
 8020f86:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f8a:	e5ea      	b.n	8020b62 <__strftime+0x452>
 8020f8c:	2306      	movs	r3, #6
 8020f8e:	e7f6      	b.n	8020f7e <__strftime+0x86e>
 8020f90:	6968      	ldr	r0, [r5, #20]
 8020f92:	2800      	cmp	r0, #0
 8020f94:	db05      	blt.n	8020fa2 <__strftime+0x892>
 8020f96:	2264      	movs	r2, #100	; 0x64
 8020f98:	fb90 f3f2 	sdiv	r3, r0, r2
 8020f9c:	fb03 0312 	mls	r3, r3, r2, r0
 8020fa0:	e5df      	b.n	8020b62 <__strftime+0x452>
 8020fa2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020fa6:	f000 fd81 	bl	8021aac <abs>
 8020faa:	e7f4      	b.n	8020f96 <__strftime+0x886>
 8020fac:	696b      	ldr	r3, [r5, #20]
 8020fae:	4a4c      	ldr	r2, [pc, #304]	; (80210e0 <__strftime+0x9d0>)
 8020fb0:	4293      	cmp	r3, r2
 8020fb2:	da09      	bge.n	8020fc8 <__strftime+0x8b8>
 8020fb4:	212d      	movs	r1, #45	; 0x2d
 8020fb6:	f88d 1020 	strb.w	r1, [sp, #32]
 8020fba:	eba2 0a03 	sub.w	sl, r2, r3
 8020fbe:	b106      	cbz	r6, 8020fc2 <__strftime+0x8b2>
 8020fc0:	3e01      	subs	r6, #1
 8020fc2:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8020fc6:	e00b      	b.n	8020fe0 <__strftime+0x8d0>
 8020fc8:	2f2b      	cmp	r7, #43	; 0x2b
 8020fca:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8020fce:	d106      	bne.n	8020fde <__strftime+0x8ce>
 8020fd0:	f242 730f 	movw	r3, #9999	; 0x270f
 8020fd4:	459a      	cmp	sl, r3
 8020fd6:	d902      	bls.n	8020fde <__strftime+0x8ce>
 8020fd8:	f88d 7020 	strb.w	r7, [sp, #32]
 8020fdc:	e7ef      	b.n	8020fbe <__strftime+0x8ae>
 8020fde:	ab08      	add	r3, sp, #32
 8020fe0:	2225      	movs	r2, #37	; 0x25
 8020fe2:	701a      	strb	r2, [r3, #0]
 8020fe4:	b937      	cbnz	r7, 8020ff4 <__strftime+0x8e4>
 8020fe6:	1c58      	adds	r0, r3, #1
 8020fe8:	493e      	ldr	r1, [pc, #248]	; (80210e4 <__strftime+0x9d4>)
 8020fea:	f001 fc4f 	bl	802288c <strcpy>
 8020fee:	f8cd a000 	str.w	sl, [sp]
 8020ff2:	e665      	b.n	8020cc0 <__strftime+0x5b0>
 8020ff4:	2230      	movs	r2, #48	; 0x30
 8020ff6:	1c98      	adds	r0, r3, #2
 8020ff8:	705a      	strb	r2, [r3, #1]
 8020ffa:	e7f5      	b.n	8020fe8 <__strftime+0x8d8>
 8020ffc:	6a2b      	ldr	r3, [r5, #32]
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	f6ff ac88 	blt.w	8020914 <__strftime+0x204>
 8021004:	f000 fa56 	bl	80214b4 <__tz_lock>
 8021008:	9b04      	ldr	r3, [sp, #16]
 802100a:	b90b      	cbnz	r3, 8021010 <__strftime+0x900>
 802100c:	f000 fa5e 	bl	80214cc <_tzset_unlocked>
 8021010:	f000 fe1a 	bl	8021c48 <__gettzinfo>
 8021014:	6a2b      	ldr	r3, [r5, #32]
 8021016:	2b00      	cmp	r3, #0
 8021018:	bfcc      	ite	gt
 802101a:	2350      	movgt	r3, #80	; 0x50
 802101c:	2328      	movle	r3, #40	; 0x28
 802101e:	eb09 0704 	add.w	r7, r9, r4
 8021022:	58c6      	ldr	r6, [r0, r3]
 8021024:	f000 fa4c 	bl	80214c0 <__tz_unlock>
 8021028:	4276      	negs	r6, r6
 802102a:	233c      	movs	r3, #60	; 0x3c
 802102c:	fb96 f0f3 	sdiv	r0, r6, r3
 8021030:	f000 fece 	bl	8021dd0 <labs>
 8021034:	233c      	movs	r3, #60	; 0x3c
 8021036:	eba8 0a04 	sub.w	sl, r8, r4
 802103a:	fb90 f2f3 	sdiv	r2, r0, r3
 802103e:	fb02 0013 	mls	r0, r2, r3, r0
 8021042:	9000      	str	r0, [sp, #0]
 8021044:	4a28      	ldr	r2, [pc, #160]	; (80210e8 <__strftime+0x9d8>)
 8021046:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 802104a:	4651      	mov	r1, sl
 802104c:	4638      	mov	r0, r7
 802104e:	fb96 f3f3 	sdiv	r3, r6, r3
 8021052:	f001 fbbb 	bl	80227cc <sniprintf>
 8021056:	2800      	cmp	r0, #0
 8021058:	f6ff ab89 	blt.w	802076e <__strftime+0x5e>
 802105c:	4404      	add	r4, r0
 802105e:	45a0      	cmp	r8, r4
 8021060:	f67f ab85 	bls.w	802076e <__strftime+0x5e>
 8021064:	2301      	movs	r3, #1
 8021066:	9304      	str	r3, [sp, #16]
 8021068:	e454      	b.n	8020914 <__strftime+0x204>
 802106a:	6a2b      	ldr	r3, [r5, #32]
 802106c:	2b00      	cmp	r3, #0
 802106e:	f6ff ac51 	blt.w	8020914 <__strftime+0x204>
 8021072:	f000 fa1f 	bl	80214b4 <__tz_lock>
 8021076:	9b04      	ldr	r3, [sp, #16]
 8021078:	b90b      	cbnz	r3, 802107e <__strftime+0x96e>
 802107a:	f000 fa27 	bl	80214cc <_tzset_unlocked>
 802107e:	6a2b      	ldr	r3, [r5, #32]
 8021080:	4a1a      	ldr	r2, [pc, #104]	; (80210ec <__strftime+0x9dc>)
 8021082:	2b00      	cmp	r3, #0
 8021084:	bfd4      	ite	le
 8021086:	2300      	movle	r3, #0
 8021088:	2301      	movgt	r3, #1
 802108a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 802108e:	4630      	mov	r0, r6
 8021090:	f7df f8d4 	bl	800023c <strlen>
 8021094:	3e01      	subs	r6, #1
 8021096:	4420      	add	r0, r4
 8021098:	f108 33ff 	add.w	r3, r8, #4294967295
 802109c:	42a0      	cmp	r0, r4
 802109e:	d102      	bne.n	80210a6 <__strftime+0x996>
 80210a0:	f000 fa0e 	bl	80214c0 <__tz_unlock>
 80210a4:	e7de      	b.n	8021064 <__strftime+0x954>
 80210a6:	42a3      	cmp	r3, r4
 80210a8:	d905      	bls.n	80210b6 <__strftime+0x9a6>
 80210aa:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80210ae:	f809 2004 	strb.w	r2, [r9, r4]
 80210b2:	3401      	adds	r4, #1
 80210b4:	e7f2      	b.n	802109c <__strftime+0x98c>
 80210b6:	f000 fa03 	bl	80214c0 <__tz_unlock>
 80210ba:	f7ff bb58 	b.w	802076e <__strftime+0x5e>
 80210be:	f108 33ff 	add.w	r3, r8, #4294967295
 80210c2:	42a3      	cmp	r3, r4
 80210c4:	f67f ab53 	bls.w	802076e <__strftime+0x5e>
 80210c8:	2325      	movs	r3, #37	; 0x25
 80210ca:	e627      	b.n	8020d1c <__strftime+0x60c>
 80210cc:	f1b8 0f00 	cmp.w	r8, #0
 80210d0:	d002      	beq.n	80210d8 <__strftime+0x9c8>
 80210d2:	2300      	movs	r3, #0
 80210d4:	f809 3004 	strb.w	r3, [r9, r4]
 80210d8:	4620      	mov	r0, r4
 80210da:	b011      	add	sp, #68	; 0x44
 80210dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210e0:	fffff894 	.word	0xfffff894
 80210e4:	08029013 	.word	0x08029013
 80210e8:	08029030 	.word	0x08029030
 80210ec:	2000016c 	.word	0x2000016c

080210f0 <strftime>:
 80210f0:	b513      	push	{r0, r1, r4, lr}
 80210f2:	4c03      	ldr	r4, [pc, #12]	; (8021100 <strftime+0x10>)
 80210f4:	9400      	str	r4, [sp, #0]
 80210f6:	f7ff fb0b 	bl	8020710 <__strftime>
 80210fa:	b002      	add	sp, #8
 80210fc:	bd10      	pop	{r4, pc}
 80210fe:	bf00      	nop
 8021100:	200001d0 	.word	0x200001d0

08021104 <strstr>:
 8021104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021106:	780c      	ldrb	r4, [r1, #0]
 8021108:	b164      	cbz	r4, 8021124 <strstr+0x20>
 802110a:	4603      	mov	r3, r0
 802110c:	781a      	ldrb	r2, [r3, #0]
 802110e:	4618      	mov	r0, r3
 8021110:	1c5e      	adds	r6, r3, #1
 8021112:	b90a      	cbnz	r2, 8021118 <strstr+0x14>
 8021114:	4610      	mov	r0, r2
 8021116:	e005      	b.n	8021124 <strstr+0x20>
 8021118:	4294      	cmp	r4, r2
 802111a:	d108      	bne.n	802112e <strstr+0x2a>
 802111c:	460d      	mov	r5, r1
 802111e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8021122:	b902      	cbnz	r2, 8021126 <strstr+0x22>
 8021124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021126:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 802112a:	4297      	cmp	r7, r2
 802112c:	d0f7      	beq.n	802111e <strstr+0x1a>
 802112e:	4633      	mov	r3, r6
 8021130:	e7ec      	b.n	802110c <strstr+0x8>
	...

08021134 <_strtol_l.isra.0>:
 8021134:	2b01      	cmp	r3, #1
 8021136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802113a:	d001      	beq.n	8021140 <_strtol_l.isra.0+0xc>
 802113c:	2b24      	cmp	r3, #36	; 0x24
 802113e:	d906      	bls.n	802114e <_strtol_l.isra.0+0x1a>
 8021140:	f7fe fa8c 	bl	801f65c <__errno>
 8021144:	2316      	movs	r3, #22
 8021146:	6003      	str	r3, [r0, #0]
 8021148:	2000      	movs	r0, #0
 802114a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802114e:	4f3a      	ldr	r7, [pc, #232]	; (8021238 <_strtol_l.isra.0+0x104>)
 8021150:	468e      	mov	lr, r1
 8021152:	4676      	mov	r6, lr
 8021154:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021158:	5de5      	ldrb	r5, [r4, r7]
 802115a:	f015 0508 	ands.w	r5, r5, #8
 802115e:	d1f8      	bne.n	8021152 <_strtol_l.isra.0+0x1e>
 8021160:	2c2d      	cmp	r4, #45	; 0x2d
 8021162:	d134      	bne.n	80211ce <_strtol_l.isra.0+0x9a>
 8021164:	f89e 4000 	ldrb.w	r4, [lr]
 8021168:	f04f 0801 	mov.w	r8, #1
 802116c:	f106 0e02 	add.w	lr, r6, #2
 8021170:	2b00      	cmp	r3, #0
 8021172:	d05c      	beq.n	802122e <_strtol_l.isra.0+0xfa>
 8021174:	2b10      	cmp	r3, #16
 8021176:	d10c      	bne.n	8021192 <_strtol_l.isra.0+0x5e>
 8021178:	2c30      	cmp	r4, #48	; 0x30
 802117a:	d10a      	bne.n	8021192 <_strtol_l.isra.0+0x5e>
 802117c:	f89e 4000 	ldrb.w	r4, [lr]
 8021180:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021184:	2c58      	cmp	r4, #88	; 0x58
 8021186:	d14d      	bne.n	8021224 <_strtol_l.isra.0+0xf0>
 8021188:	f89e 4001 	ldrb.w	r4, [lr, #1]
 802118c:	2310      	movs	r3, #16
 802118e:	f10e 0e02 	add.w	lr, lr, #2
 8021192:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8021196:	f10c 3cff 	add.w	ip, ip, #4294967295
 802119a:	2600      	movs	r6, #0
 802119c:	fbbc f9f3 	udiv	r9, ip, r3
 80211a0:	4635      	mov	r5, r6
 80211a2:	fb03 ca19 	mls	sl, r3, r9, ip
 80211a6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80211aa:	2f09      	cmp	r7, #9
 80211ac:	d818      	bhi.n	80211e0 <_strtol_l.isra.0+0xac>
 80211ae:	463c      	mov	r4, r7
 80211b0:	42a3      	cmp	r3, r4
 80211b2:	dd24      	ble.n	80211fe <_strtol_l.isra.0+0xca>
 80211b4:	2e00      	cmp	r6, #0
 80211b6:	db1f      	blt.n	80211f8 <_strtol_l.isra.0+0xc4>
 80211b8:	45a9      	cmp	r9, r5
 80211ba:	d31d      	bcc.n	80211f8 <_strtol_l.isra.0+0xc4>
 80211bc:	d101      	bne.n	80211c2 <_strtol_l.isra.0+0x8e>
 80211be:	45a2      	cmp	sl, r4
 80211c0:	db1a      	blt.n	80211f8 <_strtol_l.isra.0+0xc4>
 80211c2:	fb05 4503 	mla	r5, r5, r3, r4
 80211c6:	2601      	movs	r6, #1
 80211c8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80211cc:	e7eb      	b.n	80211a6 <_strtol_l.isra.0+0x72>
 80211ce:	2c2b      	cmp	r4, #43	; 0x2b
 80211d0:	bf08      	it	eq
 80211d2:	f89e 4000 	ldrbeq.w	r4, [lr]
 80211d6:	46a8      	mov	r8, r5
 80211d8:	bf08      	it	eq
 80211da:	f106 0e02 	addeq.w	lr, r6, #2
 80211de:	e7c7      	b.n	8021170 <_strtol_l.isra.0+0x3c>
 80211e0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80211e4:	2f19      	cmp	r7, #25
 80211e6:	d801      	bhi.n	80211ec <_strtol_l.isra.0+0xb8>
 80211e8:	3c37      	subs	r4, #55	; 0x37
 80211ea:	e7e1      	b.n	80211b0 <_strtol_l.isra.0+0x7c>
 80211ec:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80211f0:	2f19      	cmp	r7, #25
 80211f2:	d804      	bhi.n	80211fe <_strtol_l.isra.0+0xca>
 80211f4:	3c57      	subs	r4, #87	; 0x57
 80211f6:	e7db      	b.n	80211b0 <_strtol_l.isra.0+0x7c>
 80211f8:	f04f 36ff 	mov.w	r6, #4294967295
 80211fc:	e7e4      	b.n	80211c8 <_strtol_l.isra.0+0x94>
 80211fe:	2e00      	cmp	r6, #0
 8021200:	da05      	bge.n	802120e <_strtol_l.isra.0+0xda>
 8021202:	2322      	movs	r3, #34	; 0x22
 8021204:	6003      	str	r3, [r0, #0]
 8021206:	4665      	mov	r5, ip
 8021208:	b942      	cbnz	r2, 802121c <_strtol_l.isra.0+0xe8>
 802120a:	4628      	mov	r0, r5
 802120c:	e79d      	b.n	802114a <_strtol_l.isra.0+0x16>
 802120e:	f1b8 0f00 	cmp.w	r8, #0
 8021212:	d000      	beq.n	8021216 <_strtol_l.isra.0+0xe2>
 8021214:	426d      	negs	r5, r5
 8021216:	2a00      	cmp	r2, #0
 8021218:	d0f7      	beq.n	802120a <_strtol_l.isra.0+0xd6>
 802121a:	b10e      	cbz	r6, 8021220 <_strtol_l.isra.0+0xec>
 802121c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8021220:	6011      	str	r1, [r2, #0]
 8021222:	e7f2      	b.n	802120a <_strtol_l.isra.0+0xd6>
 8021224:	2430      	movs	r4, #48	; 0x30
 8021226:	2b00      	cmp	r3, #0
 8021228:	d1b3      	bne.n	8021192 <_strtol_l.isra.0+0x5e>
 802122a:	2308      	movs	r3, #8
 802122c:	e7b1      	b.n	8021192 <_strtol_l.isra.0+0x5e>
 802122e:	2c30      	cmp	r4, #48	; 0x30
 8021230:	d0a4      	beq.n	802117c <_strtol_l.isra.0+0x48>
 8021232:	230a      	movs	r3, #10
 8021234:	e7ad      	b.n	8021192 <_strtol_l.isra.0+0x5e>
 8021236:	bf00      	nop
 8021238:	080292dd 	.word	0x080292dd

0802123c <_strtol_r>:
 802123c:	f7ff bf7a 	b.w	8021134 <_strtol_l.isra.0>

08021240 <strtol>:
 8021240:	4613      	mov	r3, r2
 8021242:	460a      	mov	r2, r1
 8021244:	4601      	mov	r1, r0
 8021246:	4802      	ldr	r0, [pc, #8]	; (8021250 <strtol+0x10>)
 8021248:	6800      	ldr	r0, [r0, #0]
 802124a:	f7ff bf73 	b.w	8021134 <_strtol_l.isra.0>
 802124e:	bf00      	nop
 8021250:	20000108 	.word	0x20000108

08021254 <_strtoul_l.isra.0>:
 8021254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021258:	4e3b      	ldr	r6, [pc, #236]	; (8021348 <_strtoul_l.isra.0+0xf4>)
 802125a:	4686      	mov	lr, r0
 802125c:	468c      	mov	ip, r1
 802125e:	4660      	mov	r0, ip
 8021260:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8021264:	5da5      	ldrb	r5, [r4, r6]
 8021266:	f015 0508 	ands.w	r5, r5, #8
 802126a:	d1f8      	bne.n	802125e <_strtoul_l.isra.0+0xa>
 802126c:	2c2d      	cmp	r4, #45	; 0x2d
 802126e:	d134      	bne.n	80212da <_strtoul_l.isra.0+0x86>
 8021270:	f89c 4000 	ldrb.w	r4, [ip]
 8021274:	f04f 0801 	mov.w	r8, #1
 8021278:	f100 0c02 	add.w	ip, r0, #2
 802127c:	2b00      	cmp	r3, #0
 802127e:	d05e      	beq.n	802133e <_strtoul_l.isra.0+0xea>
 8021280:	2b10      	cmp	r3, #16
 8021282:	d10c      	bne.n	802129e <_strtoul_l.isra.0+0x4a>
 8021284:	2c30      	cmp	r4, #48	; 0x30
 8021286:	d10a      	bne.n	802129e <_strtoul_l.isra.0+0x4a>
 8021288:	f89c 0000 	ldrb.w	r0, [ip]
 802128c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8021290:	2858      	cmp	r0, #88	; 0x58
 8021292:	d14f      	bne.n	8021334 <_strtoul_l.isra.0+0xe0>
 8021294:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8021298:	2310      	movs	r3, #16
 802129a:	f10c 0c02 	add.w	ip, ip, #2
 802129e:	f04f 37ff 	mov.w	r7, #4294967295
 80212a2:	2500      	movs	r5, #0
 80212a4:	fbb7 f7f3 	udiv	r7, r7, r3
 80212a8:	fb03 f907 	mul.w	r9, r3, r7
 80212ac:	ea6f 0909 	mvn.w	r9, r9
 80212b0:	4628      	mov	r0, r5
 80212b2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80212b6:	2e09      	cmp	r6, #9
 80212b8:	d818      	bhi.n	80212ec <_strtoul_l.isra.0+0x98>
 80212ba:	4634      	mov	r4, r6
 80212bc:	42a3      	cmp	r3, r4
 80212be:	dd24      	ble.n	802130a <_strtoul_l.isra.0+0xb6>
 80212c0:	2d00      	cmp	r5, #0
 80212c2:	db1f      	blt.n	8021304 <_strtoul_l.isra.0+0xb0>
 80212c4:	4287      	cmp	r7, r0
 80212c6:	d31d      	bcc.n	8021304 <_strtoul_l.isra.0+0xb0>
 80212c8:	d101      	bne.n	80212ce <_strtoul_l.isra.0+0x7a>
 80212ca:	45a1      	cmp	r9, r4
 80212cc:	db1a      	blt.n	8021304 <_strtoul_l.isra.0+0xb0>
 80212ce:	fb00 4003 	mla	r0, r0, r3, r4
 80212d2:	2501      	movs	r5, #1
 80212d4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80212d8:	e7eb      	b.n	80212b2 <_strtoul_l.isra.0+0x5e>
 80212da:	2c2b      	cmp	r4, #43	; 0x2b
 80212dc:	bf08      	it	eq
 80212de:	f89c 4000 	ldrbeq.w	r4, [ip]
 80212e2:	46a8      	mov	r8, r5
 80212e4:	bf08      	it	eq
 80212e6:	f100 0c02 	addeq.w	ip, r0, #2
 80212ea:	e7c7      	b.n	802127c <_strtoul_l.isra.0+0x28>
 80212ec:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80212f0:	2e19      	cmp	r6, #25
 80212f2:	d801      	bhi.n	80212f8 <_strtoul_l.isra.0+0xa4>
 80212f4:	3c37      	subs	r4, #55	; 0x37
 80212f6:	e7e1      	b.n	80212bc <_strtoul_l.isra.0+0x68>
 80212f8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80212fc:	2e19      	cmp	r6, #25
 80212fe:	d804      	bhi.n	802130a <_strtoul_l.isra.0+0xb6>
 8021300:	3c57      	subs	r4, #87	; 0x57
 8021302:	e7db      	b.n	80212bc <_strtoul_l.isra.0+0x68>
 8021304:	f04f 35ff 	mov.w	r5, #4294967295
 8021308:	e7e4      	b.n	80212d4 <_strtoul_l.isra.0+0x80>
 802130a:	2d00      	cmp	r5, #0
 802130c:	da07      	bge.n	802131e <_strtoul_l.isra.0+0xca>
 802130e:	2322      	movs	r3, #34	; 0x22
 8021310:	f8ce 3000 	str.w	r3, [lr]
 8021314:	f04f 30ff 	mov.w	r0, #4294967295
 8021318:	b942      	cbnz	r2, 802132c <_strtoul_l.isra.0+0xd8>
 802131a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802131e:	f1b8 0f00 	cmp.w	r8, #0
 8021322:	d000      	beq.n	8021326 <_strtoul_l.isra.0+0xd2>
 8021324:	4240      	negs	r0, r0
 8021326:	2a00      	cmp	r2, #0
 8021328:	d0f7      	beq.n	802131a <_strtoul_l.isra.0+0xc6>
 802132a:	b10d      	cbz	r5, 8021330 <_strtoul_l.isra.0+0xdc>
 802132c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8021330:	6011      	str	r1, [r2, #0]
 8021332:	e7f2      	b.n	802131a <_strtoul_l.isra.0+0xc6>
 8021334:	2430      	movs	r4, #48	; 0x30
 8021336:	2b00      	cmp	r3, #0
 8021338:	d1b1      	bne.n	802129e <_strtoul_l.isra.0+0x4a>
 802133a:	2308      	movs	r3, #8
 802133c:	e7af      	b.n	802129e <_strtoul_l.isra.0+0x4a>
 802133e:	2c30      	cmp	r4, #48	; 0x30
 8021340:	d0a2      	beq.n	8021288 <_strtoul_l.isra.0+0x34>
 8021342:	230a      	movs	r3, #10
 8021344:	e7ab      	b.n	802129e <_strtoul_l.isra.0+0x4a>
 8021346:	bf00      	nop
 8021348:	080292dd 	.word	0x080292dd

0802134c <_strtoul_r>:
 802134c:	f7ff bf82 	b.w	8021254 <_strtoul_l.isra.0>

08021350 <strtoul>:
 8021350:	4613      	mov	r3, r2
 8021352:	460a      	mov	r2, r1
 8021354:	4601      	mov	r1, r0
 8021356:	4802      	ldr	r0, [pc, #8]	; (8021360 <strtoul+0x10>)
 8021358:	6800      	ldr	r0, [r0, #0]
 802135a:	f7ff bf7b 	b.w	8021254 <_strtoul_l.isra.0>
 802135e:	bf00      	nop
 8021360:	20000108 	.word	0x20000108

08021364 <__tzcalc_limits>:
 8021364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021368:	4680      	mov	r8, r0
 802136a:	f000 fc6d 	bl	8021c48 <__gettzinfo>
 802136e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8021372:	4598      	cmp	r8, r3
 8021374:	f340 8098 	ble.w	80214a8 <__tzcalc_limits+0x144>
 8021378:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 802137c:	4443      	add	r3, r8
 802137e:	109b      	asrs	r3, r3, #2
 8021380:	f240 126d 	movw	r2, #365	; 0x16d
 8021384:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8021388:	fb02 3505 	mla	r5, r2, r5, r3
 802138c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8021390:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8021394:	fb93 f3f2 	sdiv	r3, r3, r2
 8021398:	441d      	add	r5, r3
 802139a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802139e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80213a2:	fb98 f7f3 	sdiv	r7, r8, r3
 80213a6:	fb03 8717 	mls	r7, r3, r7, r8
 80213aa:	4442      	add	r2, r8
 80213ac:	fab7 fc87 	clz	ip, r7
 80213b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80213b4:	f008 0303 	and.w	r3, r8, #3
 80213b8:	4415      	add	r5, r2
 80213ba:	2264      	movs	r2, #100	; 0x64
 80213bc:	f8c0 8004 	str.w	r8, [r0, #4]
 80213c0:	fb98 f6f2 	sdiv	r6, r8, r2
 80213c4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80213c8:	fb02 8616 	mls	r6, r2, r6, r8
 80213cc:	4604      	mov	r4, r0
 80213ce:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80213d2:	9300      	str	r3, [sp, #0]
 80213d4:	f04f 0e07 	mov.w	lr, #7
 80213d8:	7a22      	ldrb	r2, [r4, #8]
 80213da:	6963      	ldr	r3, [r4, #20]
 80213dc:	2a4a      	cmp	r2, #74	; 0x4a
 80213de:	d128      	bne.n	8021432 <__tzcalc_limits+0xce>
 80213e0:	9900      	ldr	r1, [sp, #0]
 80213e2:	18ea      	adds	r2, r5, r3
 80213e4:	b901      	cbnz	r1, 80213e8 <__tzcalc_limits+0x84>
 80213e6:	b906      	cbnz	r6, 80213ea <__tzcalc_limits+0x86>
 80213e8:	bb0f      	cbnz	r7, 802142e <__tzcalc_limits+0xca>
 80213ea:	2b3b      	cmp	r3, #59	; 0x3b
 80213ec:	bfd4      	ite	le
 80213ee:	2300      	movle	r3, #0
 80213f0:	2301      	movgt	r3, #1
 80213f2:	4413      	add	r3, r2
 80213f4:	1e5a      	subs	r2, r3, #1
 80213f6:	69a3      	ldr	r3, [r4, #24]
 80213f8:	492c      	ldr	r1, [pc, #176]	; (80214ac <__tzcalc_limits+0x148>)
 80213fa:	fb01 3202 	mla	r2, r1, r2, r3
 80213fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021400:	4413      	add	r3, r2
 8021402:	461a      	mov	r2, r3
 8021404:	17db      	asrs	r3, r3, #31
 8021406:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802140a:	3428      	adds	r4, #40	; 0x28
 802140c:	45a3      	cmp	fp, r4
 802140e:	d1e3      	bne.n	80213d8 <__tzcalc_limits+0x74>
 8021410:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8021414:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8021418:	4294      	cmp	r4, r2
 802141a:	eb75 0303 	sbcs.w	r3, r5, r3
 802141e:	bfb4      	ite	lt
 8021420:	2301      	movlt	r3, #1
 8021422:	2300      	movge	r3, #0
 8021424:	6003      	str	r3, [r0, #0]
 8021426:	2001      	movs	r0, #1
 8021428:	b003      	add	sp, #12
 802142a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802142e:	2300      	movs	r3, #0
 8021430:	e7df      	b.n	80213f2 <__tzcalc_limits+0x8e>
 8021432:	2a44      	cmp	r2, #68	; 0x44
 8021434:	d101      	bne.n	802143a <__tzcalc_limits+0xd6>
 8021436:	18ea      	adds	r2, r5, r3
 8021438:	e7dd      	b.n	80213f6 <__tzcalc_limits+0x92>
 802143a:	9a00      	ldr	r2, [sp, #0]
 802143c:	bb72      	cbnz	r2, 802149c <__tzcalc_limits+0x138>
 802143e:	2e00      	cmp	r6, #0
 8021440:	bf0c      	ite	eq
 8021442:	46e0      	moveq	r8, ip
 8021444:	f04f 0801 	movne.w	r8, #1
 8021448:	4919      	ldr	r1, [pc, #100]	; (80214b0 <__tzcalc_limits+0x14c>)
 802144a:	68e2      	ldr	r2, [r4, #12]
 802144c:	9201      	str	r2, [sp, #4]
 802144e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8021452:	fb0a 1808 	mla	r8, sl, r8, r1
 8021456:	462a      	mov	r2, r5
 8021458:	f04f 0900 	mov.w	r9, #0
 802145c:	f1a8 0804 	sub.w	r8, r8, #4
 8021460:	9901      	ldr	r1, [sp, #4]
 8021462:	f109 0901 	add.w	r9, r9, #1
 8021466:	4549      	cmp	r1, r9
 8021468:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 802146c:	dc18      	bgt.n	80214a0 <__tzcalc_limits+0x13c>
 802146e:	f102 0804 	add.w	r8, r2, #4
 8021472:	fb98 f9fe 	sdiv	r9, r8, lr
 8021476:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 802147a:	eba8 0909 	sub.w	r9, r8, r9
 802147e:	ebb3 0909 	subs.w	r9, r3, r9
 8021482:	6923      	ldr	r3, [r4, #16]
 8021484:	f103 33ff 	add.w	r3, r3, #4294967295
 8021488:	bf48      	it	mi
 802148a:	f109 0907 	addmi.w	r9, r9, #7
 802148e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8021492:	444b      	add	r3, r9
 8021494:	4553      	cmp	r3, sl
 8021496:	da05      	bge.n	80214a4 <__tzcalc_limits+0x140>
 8021498:	441a      	add	r2, r3
 802149a:	e7ac      	b.n	80213f6 <__tzcalc_limits+0x92>
 802149c:	46e0      	mov	r8, ip
 802149e:	e7d3      	b.n	8021448 <__tzcalc_limits+0xe4>
 80214a0:	4452      	add	r2, sl
 80214a2:	e7dd      	b.n	8021460 <__tzcalc_limits+0xfc>
 80214a4:	3b07      	subs	r3, #7
 80214a6:	e7f5      	b.n	8021494 <__tzcalc_limits+0x130>
 80214a8:	2000      	movs	r0, #0
 80214aa:	e7bd      	b.n	8021428 <__tzcalc_limits+0xc4>
 80214ac:	00015180 	.word	0x00015180
 80214b0:	08028f24 	.word	0x08028f24

080214b4 <__tz_lock>:
 80214b4:	4801      	ldr	r0, [pc, #4]	; (80214bc <__tz_lock+0x8>)
 80214b6:	f7fe be29 	b.w	802010c <__retarget_lock_acquire>
 80214ba:	bf00      	nop
 80214bc:	20000f4b 	.word	0x20000f4b

080214c0 <__tz_unlock>:
 80214c0:	4801      	ldr	r0, [pc, #4]	; (80214c8 <__tz_unlock+0x8>)
 80214c2:	f7fe be25 	b.w	8020110 <__retarget_lock_release>
 80214c6:	bf00      	nop
 80214c8:	20000f4b 	.word	0x20000f4b

080214cc <_tzset_unlocked>:
 80214cc:	4b01      	ldr	r3, [pc, #4]	; (80214d4 <_tzset_unlocked+0x8>)
 80214ce:	6818      	ldr	r0, [r3, #0]
 80214d0:	f000 b802 	b.w	80214d8 <_tzset_unlocked_r>
 80214d4:	20000108 	.word	0x20000108

080214d8 <_tzset_unlocked_r>:
 80214d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214dc:	b08d      	sub	sp, #52	; 0x34
 80214de:	4607      	mov	r7, r0
 80214e0:	f000 fbb2 	bl	8021c48 <__gettzinfo>
 80214e4:	49ae      	ldr	r1, [pc, #696]	; (80217a0 <_tzset_unlocked_r+0x2c8>)
 80214e6:	4eaf      	ldr	r6, [pc, #700]	; (80217a4 <_tzset_unlocked_r+0x2cc>)
 80214e8:	4605      	mov	r5, r0
 80214ea:	4638      	mov	r0, r7
 80214ec:	f000 fba4 	bl	8021c38 <_getenv_r>
 80214f0:	4604      	mov	r4, r0
 80214f2:	b970      	cbnz	r0, 8021512 <_tzset_unlocked_r+0x3a>
 80214f4:	4bac      	ldr	r3, [pc, #688]	; (80217a8 <_tzset_unlocked_r+0x2d0>)
 80214f6:	4aad      	ldr	r2, [pc, #692]	; (80217ac <_tzset_unlocked_r+0x2d4>)
 80214f8:	6018      	str	r0, [r3, #0]
 80214fa:	4bad      	ldr	r3, [pc, #692]	; (80217b0 <_tzset_unlocked_r+0x2d8>)
 80214fc:	6018      	str	r0, [r3, #0]
 80214fe:	4bad      	ldr	r3, [pc, #692]	; (80217b4 <_tzset_unlocked_r+0x2dc>)
 8021500:	6830      	ldr	r0, [r6, #0]
 8021502:	e9c3 2200 	strd	r2, r2, [r3]
 8021506:	f7fe fe71 	bl	80201ec <free>
 802150a:	6034      	str	r4, [r6, #0]
 802150c:	b00d      	add	sp, #52	; 0x34
 802150e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021512:	6831      	ldr	r1, [r6, #0]
 8021514:	2900      	cmp	r1, #0
 8021516:	d15f      	bne.n	80215d8 <_tzset_unlocked_r+0x100>
 8021518:	6830      	ldr	r0, [r6, #0]
 802151a:	f7fe fe67 	bl	80201ec <free>
 802151e:	4620      	mov	r0, r4
 8021520:	f7de fe8c 	bl	800023c <strlen>
 8021524:	1c41      	adds	r1, r0, #1
 8021526:	4638      	mov	r0, r7
 8021528:	f7fe fede 	bl	80202e8 <_malloc_r>
 802152c:	6030      	str	r0, [r6, #0]
 802152e:	2800      	cmp	r0, #0
 8021530:	d157      	bne.n	80215e2 <_tzset_unlocked_r+0x10a>
 8021532:	7823      	ldrb	r3, [r4, #0]
 8021534:	4aa0      	ldr	r2, [pc, #640]	; (80217b8 <_tzset_unlocked_r+0x2e0>)
 8021536:	49a1      	ldr	r1, [pc, #644]	; (80217bc <_tzset_unlocked_r+0x2e4>)
 8021538:	2b3a      	cmp	r3, #58	; 0x3a
 802153a:	bf08      	it	eq
 802153c:	3401      	addeq	r4, #1
 802153e:	ae0a      	add	r6, sp, #40	; 0x28
 8021540:	4633      	mov	r3, r6
 8021542:	4620      	mov	r0, r4
 8021544:	f001 f976 	bl	8022834 <siscanf>
 8021548:	2800      	cmp	r0, #0
 802154a:	dddf      	ble.n	802150c <_tzset_unlocked_r+0x34>
 802154c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802154e:	18e7      	adds	r7, r4, r3
 8021550:	5ce3      	ldrb	r3, [r4, r3]
 8021552:	2b2d      	cmp	r3, #45	; 0x2d
 8021554:	d149      	bne.n	80215ea <_tzset_unlocked_r+0x112>
 8021556:	3701      	adds	r7, #1
 8021558:	f04f 34ff 	mov.w	r4, #4294967295
 802155c:	f10d 0a20 	add.w	sl, sp, #32
 8021560:	f10d 0b1e 	add.w	fp, sp, #30
 8021564:	f04f 0800 	mov.w	r8, #0
 8021568:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 802156c:	4994      	ldr	r1, [pc, #592]	; (80217c0 <_tzset_unlocked_r+0x2e8>)
 802156e:	9603      	str	r6, [sp, #12]
 8021570:	f8cd b000 	str.w	fp, [sp]
 8021574:	4633      	mov	r3, r6
 8021576:	aa07      	add	r2, sp, #28
 8021578:	4638      	mov	r0, r7
 802157a:	f8ad 801e 	strh.w	r8, [sp, #30]
 802157e:	f8ad 8020 	strh.w	r8, [sp, #32]
 8021582:	f001 f957 	bl	8022834 <siscanf>
 8021586:	4540      	cmp	r0, r8
 8021588:	ddc0      	ble.n	802150c <_tzset_unlocked_r+0x34>
 802158a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802158e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021592:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80217cc <_tzset_unlocked_r+0x2f4>
 8021596:	213c      	movs	r1, #60	; 0x3c
 8021598:	fb01 2203 	mla	r2, r1, r3, r2
 802159c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80215a0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80215a4:	fb01 2303 	mla	r3, r1, r3, r2
 80215a8:	435c      	muls	r4, r3
 80215aa:	62ac      	str	r4, [r5, #40]	; 0x28
 80215ac:	4c81      	ldr	r4, [pc, #516]	; (80217b4 <_tzset_unlocked_r+0x2dc>)
 80215ae:	4b82      	ldr	r3, [pc, #520]	; (80217b8 <_tzset_unlocked_r+0x2e0>)
 80215b0:	6023      	str	r3, [r4, #0]
 80215b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80215b4:	4981      	ldr	r1, [pc, #516]	; (80217bc <_tzset_unlocked_r+0x2e4>)
 80215b6:	441f      	add	r7, r3
 80215b8:	464a      	mov	r2, r9
 80215ba:	4633      	mov	r3, r6
 80215bc:	4638      	mov	r0, r7
 80215be:	f001 f939 	bl	8022834 <siscanf>
 80215c2:	4540      	cmp	r0, r8
 80215c4:	dc16      	bgt.n	80215f4 <_tzset_unlocked_r+0x11c>
 80215c6:	6823      	ldr	r3, [r4, #0]
 80215c8:	6063      	str	r3, [r4, #4]
 80215ca:	4b77      	ldr	r3, [pc, #476]	; (80217a8 <_tzset_unlocked_r+0x2d0>)
 80215cc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80215ce:	601a      	str	r2, [r3, #0]
 80215d0:	4b77      	ldr	r3, [pc, #476]	; (80217b0 <_tzset_unlocked_r+0x2d8>)
 80215d2:	f8c3 8000 	str.w	r8, [r3]
 80215d6:	e799      	b.n	802150c <_tzset_unlocked_r+0x34>
 80215d8:	f7de fe38 	bl	800024c <strcmp>
 80215dc:	2800      	cmp	r0, #0
 80215de:	d19b      	bne.n	8021518 <_tzset_unlocked_r+0x40>
 80215e0:	e794      	b.n	802150c <_tzset_unlocked_r+0x34>
 80215e2:	4621      	mov	r1, r4
 80215e4:	f001 f952 	bl	802288c <strcpy>
 80215e8:	e7a3      	b.n	8021532 <_tzset_unlocked_r+0x5a>
 80215ea:	2b2b      	cmp	r3, #43	; 0x2b
 80215ec:	bf08      	it	eq
 80215ee:	3701      	addeq	r7, #1
 80215f0:	2401      	movs	r4, #1
 80215f2:	e7b3      	b.n	802155c <_tzset_unlocked_r+0x84>
 80215f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80215f6:	f8c4 9004 	str.w	r9, [r4, #4]
 80215fa:	18fc      	adds	r4, r7, r3
 80215fc:	5cfb      	ldrb	r3, [r7, r3]
 80215fe:	2b2d      	cmp	r3, #45	; 0x2d
 8021600:	f040 808b 	bne.w	802171a <_tzset_unlocked_r+0x242>
 8021604:	3401      	adds	r4, #1
 8021606:	f04f 37ff 	mov.w	r7, #4294967295
 802160a:	2300      	movs	r3, #0
 802160c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021610:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021614:	f8ad 3020 	strh.w	r3, [sp, #32]
 8021618:	930a      	str	r3, [sp, #40]	; 0x28
 802161a:	e9cd a602 	strd	sl, r6, [sp, #8]
 802161e:	e9cd b600 	strd	fp, r6, [sp]
 8021622:	4967      	ldr	r1, [pc, #412]	; (80217c0 <_tzset_unlocked_r+0x2e8>)
 8021624:	4633      	mov	r3, r6
 8021626:	aa07      	add	r2, sp, #28
 8021628:	4620      	mov	r0, r4
 802162a:	f001 f903 	bl	8022834 <siscanf>
 802162e:	2800      	cmp	r0, #0
 8021630:	dc78      	bgt.n	8021724 <_tzset_unlocked_r+0x24c>
 8021632:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8021634:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8021638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802163a:	652f      	str	r7, [r5, #80]	; 0x50
 802163c:	441c      	add	r4, r3
 802163e:	462f      	mov	r7, r5
 8021640:	f04f 0900 	mov.w	r9, #0
 8021644:	7823      	ldrb	r3, [r4, #0]
 8021646:	2b2c      	cmp	r3, #44	; 0x2c
 8021648:	bf08      	it	eq
 802164a:	3401      	addeq	r4, #1
 802164c:	f894 8000 	ldrb.w	r8, [r4]
 8021650:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8021654:	d178      	bne.n	8021748 <_tzset_unlocked_r+0x270>
 8021656:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802165a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 802165e:	ab09      	add	r3, sp, #36	; 0x24
 8021660:	9300      	str	r3, [sp, #0]
 8021662:	4958      	ldr	r1, [pc, #352]	; (80217c4 <_tzset_unlocked_r+0x2ec>)
 8021664:	9603      	str	r6, [sp, #12]
 8021666:	4633      	mov	r3, r6
 8021668:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 802166c:	4620      	mov	r0, r4
 802166e:	f001 f8e1 	bl	8022834 <siscanf>
 8021672:	2803      	cmp	r0, #3
 8021674:	f47f af4a 	bne.w	802150c <_tzset_unlocked_r+0x34>
 8021678:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 802167c:	1e4b      	subs	r3, r1, #1
 802167e:	2b0b      	cmp	r3, #11
 8021680:	f63f af44 	bhi.w	802150c <_tzset_unlocked_r+0x34>
 8021684:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8021688:	1e53      	subs	r3, r2, #1
 802168a:	2b04      	cmp	r3, #4
 802168c:	f63f af3e 	bhi.w	802150c <_tzset_unlocked_r+0x34>
 8021690:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8021694:	2b06      	cmp	r3, #6
 8021696:	f63f af39 	bhi.w	802150c <_tzset_unlocked_r+0x34>
 802169a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802169e:	f887 8008 	strb.w	r8, [r7, #8]
 80216a2:	617b      	str	r3, [r7, #20]
 80216a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80216a6:	eb04 0803 	add.w	r8, r4, r3
 80216aa:	2302      	movs	r3, #2
 80216ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 80216b0:	2300      	movs	r3, #0
 80216b2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80216b6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80216ba:	930a      	str	r3, [sp, #40]	; 0x28
 80216bc:	f898 3000 	ldrb.w	r3, [r8]
 80216c0:	2b2f      	cmp	r3, #47	; 0x2f
 80216c2:	d109      	bne.n	80216d8 <_tzset_unlocked_r+0x200>
 80216c4:	e9cd a602 	strd	sl, r6, [sp, #8]
 80216c8:	e9cd b600 	strd	fp, r6, [sp]
 80216cc:	493e      	ldr	r1, [pc, #248]	; (80217c8 <_tzset_unlocked_r+0x2f0>)
 80216ce:	4633      	mov	r3, r6
 80216d0:	aa07      	add	r2, sp, #28
 80216d2:	4640      	mov	r0, r8
 80216d4:	f001 f8ae 	bl	8022834 <siscanf>
 80216d8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80216dc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80216e0:	213c      	movs	r1, #60	; 0x3c
 80216e2:	fb01 2203 	mla	r2, r1, r3, r2
 80216e6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80216ea:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80216ee:	fb01 2303 	mla	r3, r1, r3, r2
 80216f2:	61bb      	str	r3, [r7, #24]
 80216f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80216f6:	3728      	adds	r7, #40	; 0x28
 80216f8:	4444      	add	r4, r8
 80216fa:	f1b9 0f00 	cmp.w	r9, #0
 80216fe:	d020      	beq.n	8021742 <_tzset_unlocked_r+0x26a>
 8021700:	6868      	ldr	r0, [r5, #4]
 8021702:	f7ff fe2f 	bl	8021364 <__tzcalc_limits>
 8021706:	4b28      	ldr	r3, [pc, #160]	; (80217a8 <_tzset_unlocked_r+0x2d0>)
 8021708:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802170a:	601a      	str	r2, [r3, #0]
 802170c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 802170e:	1a9b      	subs	r3, r3, r2
 8021710:	4a27      	ldr	r2, [pc, #156]	; (80217b0 <_tzset_unlocked_r+0x2d8>)
 8021712:	bf18      	it	ne
 8021714:	2301      	movne	r3, #1
 8021716:	6013      	str	r3, [r2, #0]
 8021718:	e6f8      	b.n	802150c <_tzset_unlocked_r+0x34>
 802171a:	2b2b      	cmp	r3, #43	; 0x2b
 802171c:	bf08      	it	eq
 802171e:	3401      	addeq	r4, #1
 8021720:	2701      	movs	r7, #1
 8021722:	e772      	b.n	802160a <_tzset_unlocked_r+0x132>
 8021724:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021728:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802172c:	213c      	movs	r1, #60	; 0x3c
 802172e:	fb01 2203 	mla	r2, r1, r3, r2
 8021732:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021736:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802173a:	fb01 2303 	mla	r3, r1, r3, r2
 802173e:	435f      	muls	r7, r3
 8021740:	e77a      	b.n	8021638 <_tzset_unlocked_r+0x160>
 8021742:	f04f 0901 	mov.w	r9, #1
 8021746:	e77d      	b.n	8021644 <_tzset_unlocked_r+0x16c>
 8021748:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 802174c:	bf06      	itte	eq
 802174e:	3401      	addeq	r4, #1
 8021750:	4643      	moveq	r3, r8
 8021752:	2344      	movne	r3, #68	; 0x44
 8021754:	220a      	movs	r2, #10
 8021756:	a90b      	add	r1, sp, #44	; 0x2c
 8021758:	4620      	mov	r0, r4
 802175a:	9305      	str	r3, [sp, #20]
 802175c:	f7ff fdf8 	bl	8021350 <strtoul>
 8021760:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8021764:	9b05      	ldr	r3, [sp, #20]
 8021766:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 802176a:	45a0      	cmp	r8, r4
 802176c:	d114      	bne.n	8021798 <_tzset_unlocked_r+0x2c0>
 802176e:	234d      	movs	r3, #77	; 0x4d
 8021770:	f1b9 0f00 	cmp.w	r9, #0
 8021774:	d107      	bne.n	8021786 <_tzset_unlocked_r+0x2ae>
 8021776:	722b      	strb	r3, [r5, #8]
 8021778:	2103      	movs	r1, #3
 802177a:	2302      	movs	r3, #2
 802177c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8021780:	f8c5 9014 	str.w	r9, [r5, #20]
 8021784:	e791      	b.n	80216aa <_tzset_unlocked_r+0x1d2>
 8021786:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 802178a:	220b      	movs	r2, #11
 802178c:	2301      	movs	r3, #1
 802178e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8021792:	2300      	movs	r3, #0
 8021794:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021796:	e788      	b.n	80216aa <_tzset_unlocked_r+0x1d2>
 8021798:	b280      	uxth	r0, r0
 802179a:	723b      	strb	r3, [r7, #8]
 802179c:	6178      	str	r0, [r7, #20]
 802179e:	e784      	b.n	80216aa <_tzset_unlocked_r+0x1d2>
 80217a0:	08029264 	.word	0x08029264
 80217a4:	20000ea4 	.word	0x20000ea4
 80217a8:	20000eac 	.word	0x20000eac
 80217ac:	08029267 	.word	0x08029267
 80217b0:	20000ea8 	.word	0x20000ea8
 80217b4:	2000016c 	.word	0x2000016c
 80217b8:	20000e97 	.word	0x20000e97
 80217bc:	0802926b 	.word	0x0802926b
 80217c0:	0802928e 	.word	0x0802928e
 80217c4:	0802927a 	.word	0x0802927a
 80217c8:	0802928d 	.word	0x0802928d
 80217cc:	20000e8c 	.word	0x20000e8c

080217d0 <_vsniprintf_r>:
 80217d0:	b530      	push	{r4, r5, lr}
 80217d2:	1e14      	subs	r4, r2, #0
 80217d4:	4605      	mov	r5, r0
 80217d6:	b09b      	sub	sp, #108	; 0x6c
 80217d8:	4618      	mov	r0, r3
 80217da:	da05      	bge.n	80217e8 <_vsniprintf_r+0x18>
 80217dc:	238b      	movs	r3, #139	; 0x8b
 80217de:	602b      	str	r3, [r5, #0]
 80217e0:	f04f 30ff 	mov.w	r0, #4294967295
 80217e4:	b01b      	add	sp, #108	; 0x6c
 80217e6:	bd30      	pop	{r4, r5, pc}
 80217e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80217ec:	f8ad 300c 	strh.w	r3, [sp, #12]
 80217f0:	bf14      	ite	ne
 80217f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80217f6:	4623      	moveq	r3, r4
 80217f8:	9302      	str	r3, [sp, #8]
 80217fa:	9305      	str	r3, [sp, #20]
 80217fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021800:	9100      	str	r1, [sp, #0]
 8021802:	9104      	str	r1, [sp, #16]
 8021804:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021808:	4602      	mov	r2, r0
 802180a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802180c:	4669      	mov	r1, sp
 802180e:	4628      	mov	r0, r5
 8021810:	f000 fb94 	bl	8021f3c <_svfiprintf_r>
 8021814:	1c43      	adds	r3, r0, #1
 8021816:	bfbc      	itt	lt
 8021818:	238b      	movlt	r3, #139	; 0x8b
 802181a:	602b      	strlt	r3, [r5, #0]
 802181c:	2c00      	cmp	r4, #0
 802181e:	d0e1      	beq.n	80217e4 <_vsniprintf_r+0x14>
 8021820:	9b00      	ldr	r3, [sp, #0]
 8021822:	2200      	movs	r2, #0
 8021824:	701a      	strb	r2, [r3, #0]
 8021826:	e7dd      	b.n	80217e4 <_vsniprintf_r+0x14>

08021828 <vsniprintf>:
 8021828:	b507      	push	{r0, r1, r2, lr}
 802182a:	9300      	str	r3, [sp, #0]
 802182c:	4613      	mov	r3, r2
 802182e:	460a      	mov	r2, r1
 8021830:	4601      	mov	r1, r0
 8021832:	4803      	ldr	r0, [pc, #12]	; (8021840 <vsniprintf+0x18>)
 8021834:	6800      	ldr	r0, [r0, #0]
 8021836:	f7ff ffcb 	bl	80217d0 <_vsniprintf_r>
 802183a:	b003      	add	sp, #12
 802183c:	f85d fb04 	ldr.w	pc, [sp], #4
 8021840:	20000108 	.word	0x20000108

08021844 <__swbuf_r>:
 8021844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021846:	460e      	mov	r6, r1
 8021848:	4614      	mov	r4, r2
 802184a:	4605      	mov	r5, r0
 802184c:	b118      	cbz	r0, 8021856 <__swbuf_r+0x12>
 802184e:	6983      	ldr	r3, [r0, #24]
 8021850:	b90b      	cbnz	r3, 8021856 <__swbuf_r+0x12>
 8021852:	f7fe f8a9 	bl	801f9a8 <__sinit>
 8021856:	4b21      	ldr	r3, [pc, #132]	; (80218dc <__swbuf_r+0x98>)
 8021858:	429c      	cmp	r4, r3
 802185a:	d12b      	bne.n	80218b4 <__swbuf_r+0x70>
 802185c:	686c      	ldr	r4, [r5, #4]
 802185e:	69a3      	ldr	r3, [r4, #24]
 8021860:	60a3      	str	r3, [r4, #8]
 8021862:	89a3      	ldrh	r3, [r4, #12]
 8021864:	071a      	lsls	r2, r3, #28
 8021866:	d52f      	bpl.n	80218c8 <__swbuf_r+0x84>
 8021868:	6923      	ldr	r3, [r4, #16]
 802186a:	b36b      	cbz	r3, 80218c8 <__swbuf_r+0x84>
 802186c:	6923      	ldr	r3, [r4, #16]
 802186e:	6820      	ldr	r0, [r4, #0]
 8021870:	1ac0      	subs	r0, r0, r3
 8021872:	6963      	ldr	r3, [r4, #20]
 8021874:	b2f6      	uxtb	r6, r6
 8021876:	4283      	cmp	r3, r0
 8021878:	4637      	mov	r7, r6
 802187a:	dc04      	bgt.n	8021886 <__swbuf_r+0x42>
 802187c:	4621      	mov	r1, r4
 802187e:	4628      	mov	r0, r5
 8021880:	f7fd ffec 	bl	801f85c <_fflush_r>
 8021884:	bb30      	cbnz	r0, 80218d4 <__swbuf_r+0x90>
 8021886:	68a3      	ldr	r3, [r4, #8]
 8021888:	3b01      	subs	r3, #1
 802188a:	60a3      	str	r3, [r4, #8]
 802188c:	6823      	ldr	r3, [r4, #0]
 802188e:	1c5a      	adds	r2, r3, #1
 8021890:	6022      	str	r2, [r4, #0]
 8021892:	701e      	strb	r6, [r3, #0]
 8021894:	6963      	ldr	r3, [r4, #20]
 8021896:	3001      	adds	r0, #1
 8021898:	4283      	cmp	r3, r0
 802189a:	d004      	beq.n	80218a6 <__swbuf_r+0x62>
 802189c:	89a3      	ldrh	r3, [r4, #12]
 802189e:	07db      	lsls	r3, r3, #31
 80218a0:	d506      	bpl.n	80218b0 <__swbuf_r+0x6c>
 80218a2:	2e0a      	cmp	r6, #10
 80218a4:	d104      	bne.n	80218b0 <__swbuf_r+0x6c>
 80218a6:	4621      	mov	r1, r4
 80218a8:	4628      	mov	r0, r5
 80218aa:	f7fd ffd7 	bl	801f85c <_fflush_r>
 80218ae:	b988      	cbnz	r0, 80218d4 <__swbuf_r+0x90>
 80218b0:	4638      	mov	r0, r7
 80218b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80218b4:	4b0a      	ldr	r3, [pc, #40]	; (80218e0 <__swbuf_r+0x9c>)
 80218b6:	429c      	cmp	r4, r3
 80218b8:	d101      	bne.n	80218be <__swbuf_r+0x7a>
 80218ba:	68ac      	ldr	r4, [r5, #8]
 80218bc:	e7cf      	b.n	802185e <__swbuf_r+0x1a>
 80218be:	4b09      	ldr	r3, [pc, #36]	; (80218e4 <__swbuf_r+0xa0>)
 80218c0:	429c      	cmp	r4, r3
 80218c2:	bf08      	it	eq
 80218c4:	68ec      	ldreq	r4, [r5, #12]
 80218c6:	e7ca      	b.n	802185e <__swbuf_r+0x1a>
 80218c8:	4621      	mov	r1, r4
 80218ca:	4628      	mov	r0, r5
 80218cc:	f000 f81e 	bl	802190c <__swsetup_r>
 80218d0:	2800      	cmp	r0, #0
 80218d2:	d0cb      	beq.n	802186c <__swbuf_r+0x28>
 80218d4:	f04f 37ff 	mov.w	r7, #4294967295
 80218d8:	e7ea      	b.n	80218b0 <__swbuf_r+0x6c>
 80218da:	bf00      	nop
 80218dc:	08028e68 	.word	0x08028e68
 80218e0:	08028e88 	.word	0x08028e88
 80218e4:	08028e48 	.word	0x08028e48

080218e8 <_write_r>:
 80218e8:	b538      	push	{r3, r4, r5, lr}
 80218ea:	4d07      	ldr	r5, [pc, #28]	; (8021908 <_write_r+0x20>)
 80218ec:	4604      	mov	r4, r0
 80218ee:	4608      	mov	r0, r1
 80218f0:	4611      	mov	r1, r2
 80218f2:	2200      	movs	r2, #0
 80218f4:	602a      	str	r2, [r5, #0]
 80218f6:	461a      	mov	r2, r3
 80218f8:	f7df fa6a 	bl	8000dd0 <_write>
 80218fc:	1c43      	adds	r3, r0, #1
 80218fe:	d102      	bne.n	8021906 <_write_r+0x1e>
 8021900:	682b      	ldr	r3, [r5, #0]
 8021902:	b103      	cbz	r3, 8021906 <_write_r+0x1e>
 8021904:	6023      	str	r3, [r4, #0]
 8021906:	bd38      	pop	{r3, r4, r5, pc}
 8021908:	20000f50 	.word	0x20000f50

0802190c <__swsetup_r>:
 802190c:	4b32      	ldr	r3, [pc, #200]	; (80219d8 <__swsetup_r+0xcc>)
 802190e:	b570      	push	{r4, r5, r6, lr}
 8021910:	681d      	ldr	r5, [r3, #0]
 8021912:	4606      	mov	r6, r0
 8021914:	460c      	mov	r4, r1
 8021916:	b125      	cbz	r5, 8021922 <__swsetup_r+0x16>
 8021918:	69ab      	ldr	r3, [r5, #24]
 802191a:	b913      	cbnz	r3, 8021922 <__swsetup_r+0x16>
 802191c:	4628      	mov	r0, r5
 802191e:	f7fe f843 	bl	801f9a8 <__sinit>
 8021922:	4b2e      	ldr	r3, [pc, #184]	; (80219dc <__swsetup_r+0xd0>)
 8021924:	429c      	cmp	r4, r3
 8021926:	d10f      	bne.n	8021948 <__swsetup_r+0x3c>
 8021928:	686c      	ldr	r4, [r5, #4]
 802192a:	89a3      	ldrh	r3, [r4, #12]
 802192c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021930:	0719      	lsls	r1, r3, #28
 8021932:	d42c      	bmi.n	802198e <__swsetup_r+0x82>
 8021934:	06dd      	lsls	r5, r3, #27
 8021936:	d411      	bmi.n	802195c <__swsetup_r+0x50>
 8021938:	2309      	movs	r3, #9
 802193a:	6033      	str	r3, [r6, #0]
 802193c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021940:	81a3      	strh	r3, [r4, #12]
 8021942:	f04f 30ff 	mov.w	r0, #4294967295
 8021946:	e03e      	b.n	80219c6 <__swsetup_r+0xba>
 8021948:	4b25      	ldr	r3, [pc, #148]	; (80219e0 <__swsetup_r+0xd4>)
 802194a:	429c      	cmp	r4, r3
 802194c:	d101      	bne.n	8021952 <__swsetup_r+0x46>
 802194e:	68ac      	ldr	r4, [r5, #8]
 8021950:	e7eb      	b.n	802192a <__swsetup_r+0x1e>
 8021952:	4b24      	ldr	r3, [pc, #144]	; (80219e4 <__swsetup_r+0xd8>)
 8021954:	429c      	cmp	r4, r3
 8021956:	bf08      	it	eq
 8021958:	68ec      	ldreq	r4, [r5, #12]
 802195a:	e7e6      	b.n	802192a <__swsetup_r+0x1e>
 802195c:	0758      	lsls	r0, r3, #29
 802195e:	d512      	bpl.n	8021986 <__swsetup_r+0x7a>
 8021960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021962:	b141      	cbz	r1, 8021976 <__swsetup_r+0x6a>
 8021964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021968:	4299      	cmp	r1, r3
 802196a:	d002      	beq.n	8021972 <__swsetup_r+0x66>
 802196c:	4630      	mov	r0, r6
 802196e:	f7fe fc6b 	bl	8020248 <_free_r>
 8021972:	2300      	movs	r3, #0
 8021974:	6363      	str	r3, [r4, #52]	; 0x34
 8021976:	89a3      	ldrh	r3, [r4, #12]
 8021978:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802197c:	81a3      	strh	r3, [r4, #12]
 802197e:	2300      	movs	r3, #0
 8021980:	6063      	str	r3, [r4, #4]
 8021982:	6923      	ldr	r3, [r4, #16]
 8021984:	6023      	str	r3, [r4, #0]
 8021986:	89a3      	ldrh	r3, [r4, #12]
 8021988:	f043 0308 	orr.w	r3, r3, #8
 802198c:	81a3      	strh	r3, [r4, #12]
 802198e:	6923      	ldr	r3, [r4, #16]
 8021990:	b94b      	cbnz	r3, 80219a6 <__swsetup_r+0x9a>
 8021992:	89a3      	ldrh	r3, [r4, #12]
 8021994:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802199c:	d003      	beq.n	80219a6 <__swsetup_r+0x9a>
 802199e:	4621      	mov	r1, r4
 80219a0:	4630      	mov	r0, r6
 80219a2:	f7fe fbdb 	bl	802015c <__smakebuf_r>
 80219a6:	89a0      	ldrh	r0, [r4, #12]
 80219a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80219ac:	f010 0301 	ands.w	r3, r0, #1
 80219b0:	d00a      	beq.n	80219c8 <__swsetup_r+0xbc>
 80219b2:	2300      	movs	r3, #0
 80219b4:	60a3      	str	r3, [r4, #8]
 80219b6:	6963      	ldr	r3, [r4, #20]
 80219b8:	425b      	negs	r3, r3
 80219ba:	61a3      	str	r3, [r4, #24]
 80219bc:	6923      	ldr	r3, [r4, #16]
 80219be:	b943      	cbnz	r3, 80219d2 <__swsetup_r+0xc6>
 80219c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80219c4:	d1ba      	bne.n	802193c <__swsetup_r+0x30>
 80219c6:	bd70      	pop	{r4, r5, r6, pc}
 80219c8:	0781      	lsls	r1, r0, #30
 80219ca:	bf58      	it	pl
 80219cc:	6963      	ldrpl	r3, [r4, #20]
 80219ce:	60a3      	str	r3, [r4, #8]
 80219d0:	e7f4      	b.n	80219bc <__swsetup_r+0xb0>
 80219d2:	2000      	movs	r0, #0
 80219d4:	e7f7      	b.n	80219c6 <__swsetup_r+0xba>
 80219d6:	bf00      	nop
 80219d8:	20000108 	.word	0x20000108
 80219dc:	08028e68 	.word	0x08028e68
 80219e0:	08028e88 	.word	0x08028e88
 80219e4:	08028e48 	.word	0x08028e48

080219e8 <__register_exitproc>:
 80219e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80219ec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8021aa8 <__register_exitproc+0xc0>
 80219f0:	4606      	mov	r6, r0
 80219f2:	f8d8 0000 	ldr.w	r0, [r8]
 80219f6:	461f      	mov	r7, r3
 80219f8:	460d      	mov	r5, r1
 80219fa:	4691      	mov	r9, r2
 80219fc:	f7fe fb87 	bl	802010e <__retarget_lock_acquire_recursive>
 8021a00:	4b25      	ldr	r3, [pc, #148]	; (8021a98 <__register_exitproc+0xb0>)
 8021a02:	681c      	ldr	r4, [r3, #0]
 8021a04:	b934      	cbnz	r4, 8021a14 <__register_exitproc+0x2c>
 8021a06:	4c25      	ldr	r4, [pc, #148]	; (8021a9c <__register_exitproc+0xb4>)
 8021a08:	601c      	str	r4, [r3, #0]
 8021a0a:	4b25      	ldr	r3, [pc, #148]	; (8021aa0 <__register_exitproc+0xb8>)
 8021a0c:	b113      	cbz	r3, 8021a14 <__register_exitproc+0x2c>
 8021a0e:	681b      	ldr	r3, [r3, #0]
 8021a10:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8021a14:	6863      	ldr	r3, [r4, #4]
 8021a16:	2b1f      	cmp	r3, #31
 8021a18:	dd07      	ble.n	8021a2a <__register_exitproc+0x42>
 8021a1a:	f8d8 0000 	ldr.w	r0, [r8]
 8021a1e:	f7fe fb78 	bl	8020112 <__retarget_lock_release_recursive>
 8021a22:	f04f 30ff 	mov.w	r0, #4294967295
 8021a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021a2a:	b34e      	cbz	r6, 8021a80 <__register_exitproc+0x98>
 8021a2c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8021a30:	b988      	cbnz	r0, 8021a56 <__register_exitproc+0x6e>
 8021a32:	4b1c      	ldr	r3, [pc, #112]	; (8021aa4 <__register_exitproc+0xbc>)
 8021a34:	b923      	cbnz	r3, 8021a40 <__register_exitproc+0x58>
 8021a36:	f8d8 0000 	ldr.w	r0, [r8]
 8021a3a:	f7fe fb69 	bl	8020110 <__retarget_lock_release>
 8021a3e:	e7f0      	b.n	8021a22 <__register_exitproc+0x3a>
 8021a40:	f44f 7084 	mov.w	r0, #264	; 0x108
 8021a44:	f7fe fbca 	bl	80201dc <malloc>
 8021a48:	2800      	cmp	r0, #0
 8021a4a:	d0f4      	beq.n	8021a36 <__register_exitproc+0x4e>
 8021a4c:	2300      	movs	r3, #0
 8021a4e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8021a52:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8021a56:	6863      	ldr	r3, [r4, #4]
 8021a58:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8021a5c:	2201      	movs	r2, #1
 8021a5e:	409a      	lsls	r2, r3
 8021a60:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8021a64:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8021a68:	4313      	orrs	r3, r2
 8021a6a:	2e02      	cmp	r6, #2
 8021a6c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8021a70:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8021a74:	bf02      	ittt	eq
 8021a76:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8021a7a:	431a      	orreq	r2, r3
 8021a7c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8021a80:	6863      	ldr	r3, [r4, #4]
 8021a82:	f8d8 0000 	ldr.w	r0, [r8]
 8021a86:	1c5a      	adds	r2, r3, #1
 8021a88:	3302      	adds	r3, #2
 8021a8a:	6062      	str	r2, [r4, #4]
 8021a8c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8021a90:	f7fe fb3f 	bl	8020112 <__retarget_lock_release_recursive>
 8021a94:	2000      	movs	r0, #0
 8021a96:	e7c6      	b.n	8021a26 <__register_exitproc+0x3e>
 8021a98:	20000f3c 	.word	0x20000f3c
 8021a9c:	20000eb0 	.word	0x20000eb0
 8021aa0:	00000000 	.word	0x00000000
 8021aa4:	080201dd 	.word	0x080201dd
 8021aa8:	20000174 	.word	0x20000174

08021aac <abs>:
 8021aac:	2800      	cmp	r0, #0
 8021aae:	bfb8      	it	lt
 8021ab0:	4240      	neglt	r0, r0
 8021ab2:	4770      	bx	lr

08021ab4 <__assert_func>:
 8021ab4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021ab6:	4614      	mov	r4, r2
 8021ab8:	461a      	mov	r2, r3
 8021aba:	4b09      	ldr	r3, [pc, #36]	; (8021ae0 <__assert_func+0x2c>)
 8021abc:	681b      	ldr	r3, [r3, #0]
 8021abe:	4605      	mov	r5, r0
 8021ac0:	68d8      	ldr	r0, [r3, #12]
 8021ac2:	b14c      	cbz	r4, 8021ad8 <__assert_func+0x24>
 8021ac4:	4b07      	ldr	r3, [pc, #28]	; (8021ae4 <__assert_func+0x30>)
 8021ac6:	9100      	str	r1, [sp, #0]
 8021ac8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021acc:	4906      	ldr	r1, [pc, #24]	; (8021ae8 <__assert_func+0x34>)
 8021ace:	462b      	mov	r3, r5
 8021ad0:	f000 f854 	bl	8021b7c <fiprintf>
 8021ad4:	f7fd fda8 	bl	801f628 <abort>
 8021ad8:	4b04      	ldr	r3, [pc, #16]	; (8021aec <__assert_func+0x38>)
 8021ada:	461c      	mov	r4, r3
 8021adc:	e7f3      	b.n	8021ac6 <__assert_func+0x12>
 8021ade:	bf00      	nop
 8021ae0:	20000108 	.word	0x20000108
 8021ae4:	080292a0 	.word	0x080292a0
 8021ae8:	080292ad 	.word	0x080292ad
 8021aec:	080292db 	.word	0x080292db

08021af0 <_close_r>:
 8021af0:	b538      	push	{r3, r4, r5, lr}
 8021af2:	4d06      	ldr	r5, [pc, #24]	; (8021b0c <_close_r+0x1c>)
 8021af4:	2300      	movs	r3, #0
 8021af6:	4604      	mov	r4, r0
 8021af8:	4608      	mov	r0, r1
 8021afa:	602b      	str	r3, [r5, #0]
 8021afc:	f7df f984 	bl	8000e08 <_close>
 8021b00:	1c43      	adds	r3, r0, #1
 8021b02:	d102      	bne.n	8021b0a <_close_r+0x1a>
 8021b04:	682b      	ldr	r3, [r5, #0]
 8021b06:	b103      	cbz	r3, 8021b0a <_close_r+0x1a>
 8021b08:	6023      	str	r3, [r4, #0]
 8021b0a:	bd38      	pop	{r3, r4, r5, pc}
 8021b0c:	20000f50 	.word	0x20000f50

08021b10 <__sflags>:
 8021b10:	780b      	ldrb	r3, [r1, #0]
 8021b12:	2b72      	cmp	r3, #114	; 0x72
 8021b14:	b530      	push	{r4, r5, lr}
 8021b16:	d022      	beq.n	8021b5e <__sflags+0x4e>
 8021b18:	2b77      	cmp	r3, #119	; 0x77
 8021b1a:	d024      	beq.n	8021b66 <__sflags+0x56>
 8021b1c:	2b61      	cmp	r3, #97	; 0x61
 8021b1e:	d027      	beq.n	8021b70 <__sflags+0x60>
 8021b20:	2316      	movs	r3, #22
 8021b22:	6003      	str	r3, [r0, #0]
 8021b24:	2000      	movs	r0, #0
 8021b26:	bd30      	pop	{r4, r5, pc}
 8021b28:	2d62      	cmp	r5, #98	; 0x62
 8021b2a:	d012      	beq.n	8021b52 <__sflags+0x42>
 8021b2c:	2d78      	cmp	r5, #120	; 0x78
 8021b2e:	d013      	beq.n	8021b58 <__sflags+0x48>
 8021b30:	2d2b      	cmp	r5, #43	; 0x2b
 8021b32:	d107      	bne.n	8021b44 <__sflags+0x34>
 8021b34:	f020 001c 	bic.w	r0, r0, #28
 8021b38:	f023 0303 	bic.w	r3, r3, #3
 8021b3c:	f040 0010 	orr.w	r0, r0, #16
 8021b40:	f043 0302 	orr.w	r3, r3, #2
 8021b44:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8021b48:	2d00      	cmp	r5, #0
 8021b4a:	d1ed      	bne.n	8021b28 <__sflags+0x18>
 8021b4c:	4323      	orrs	r3, r4
 8021b4e:	6013      	str	r3, [r2, #0]
 8021b50:	e7e9      	b.n	8021b26 <__sflags+0x16>
 8021b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021b56:	e7f5      	b.n	8021b44 <__sflags+0x34>
 8021b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8021b5c:	e7f2      	b.n	8021b44 <__sflags+0x34>
 8021b5e:	2400      	movs	r4, #0
 8021b60:	4623      	mov	r3, r4
 8021b62:	2004      	movs	r0, #4
 8021b64:	e7ee      	b.n	8021b44 <__sflags+0x34>
 8021b66:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8021b6a:	2301      	movs	r3, #1
 8021b6c:	2008      	movs	r0, #8
 8021b6e:	e7e9      	b.n	8021b44 <__sflags+0x34>
 8021b70:	f44f 7402 	mov.w	r4, #520	; 0x208
 8021b74:	2301      	movs	r3, #1
 8021b76:	f44f 7084 	mov.w	r0, #264	; 0x108
 8021b7a:	e7e3      	b.n	8021b44 <__sflags+0x34>

08021b7c <fiprintf>:
 8021b7c:	b40e      	push	{r1, r2, r3}
 8021b7e:	b503      	push	{r0, r1, lr}
 8021b80:	4601      	mov	r1, r0
 8021b82:	ab03      	add	r3, sp, #12
 8021b84:	4805      	ldr	r0, [pc, #20]	; (8021b9c <fiprintf+0x20>)
 8021b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8021b8a:	6800      	ldr	r0, [r0, #0]
 8021b8c:	9301      	str	r3, [sp, #4]
 8021b8e:	f000 faff 	bl	8022190 <_vfiprintf_r>
 8021b92:	b002      	add	sp, #8
 8021b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8021b98:	b003      	add	sp, #12
 8021b9a:	4770      	bx	lr
 8021b9c:	20000108 	.word	0x20000108

08021ba0 <_fstat_r>:
 8021ba0:	b538      	push	{r3, r4, r5, lr}
 8021ba2:	4d07      	ldr	r5, [pc, #28]	; (8021bc0 <_fstat_r+0x20>)
 8021ba4:	2300      	movs	r3, #0
 8021ba6:	4604      	mov	r4, r0
 8021ba8:	4608      	mov	r0, r1
 8021baa:	4611      	mov	r1, r2
 8021bac:	602b      	str	r3, [r5, #0]
 8021bae:	f7df f937 	bl	8000e20 <_fstat>
 8021bb2:	1c43      	adds	r3, r0, #1
 8021bb4:	d102      	bne.n	8021bbc <_fstat_r+0x1c>
 8021bb6:	682b      	ldr	r3, [r5, #0]
 8021bb8:	b103      	cbz	r3, 8021bbc <_fstat_r+0x1c>
 8021bba:	6023      	str	r3, [r4, #0]
 8021bbc:	bd38      	pop	{r3, r4, r5, pc}
 8021bbe:	bf00      	nop
 8021bc0:	20000f50 	.word	0x20000f50

08021bc4 <_findenv_r>:
 8021bc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bc8:	4607      	mov	r7, r0
 8021bca:	4689      	mov	r9, r1
 8021bcc:	4616      	mov	r6, r2
 8021bce:	f000 fe85 	bl	80228dc <__env_lock>
 8021bd2:	4b18      	ldr	r3, [pc, #96]	; (8021c34 <_findenv_r+0x70>)
 8021bd4:	681c      	ldr	r4, [r3, #0]
 8021bd6:	469a      	mov	sl, r3
 8021bd8:	b134      	cbz	r4, 8021be8 <_findenv_r+0x24>
 8021bda:	464b      	mov	r3, r9
 8021bdc:	4698      	mov	r8, r3
 8021bde:	f813 1b01 	ldrb.w	r1, [r3], #1
 8021be2:	b139      	cbz	r1, 8021bf4 <_findenv_r+0x30>
 8021be4:	293d      	cmp	r1, #61	; 0x3d
 8021be6:	d1f9      	bne.n	8021bdc <_findenv_r+0x18>
 8021be8:	4638      	mov	r0, r7
 8021bea:	f000 fe7d 	bl	80228e8 <__env_unlock>
 8021bee:	2000      	movs	r0, #0
 8021bf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021bf4:	eba8 0809 	sub.w	r8, r8, r9
 8021bf8:	46a3      	mov	fp, r4
 8021bfa:	f854 0b04 	ldr.w	r0, [r4], #4
 8021bfe:	2800      	cmp	r0, #0
 8021c00:	d0f2      	beq.n	8021be8 <_findenv_r+0x24>
 8021c02:	4642      	mov	r2, r8
 8021c04:	4649      	mov	r1, r9
 8021c06:	f000 fe49 	bl	802289c <strncmp>
 8021c0a:	2800      	cmp	r0, #0
 8021c0c:	d1f4      	bne.n	8021bf8 <_findenv_r+0x34>
 8021c0e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8021c12:	eb03 0508 	add.w	r5, r3, r8
 8021c16:	f813 3008 	ldrb.w	r3, [r3, r8]
 8021c1a:	2b3d      	cmp	r3, #61	; 0x3d
 8021c1c:	d1ec      	bne.n	8021bf8 <_findenv_r+0x34>
 8021c1e:	f8da 3000 	ldr.w	r3, [sl]
 8021c22:	ebab 0303 	sub.w	r3, fp, r3
 8021c26:	109b      	asrs	r3, r3, #2
 8021c28:	4638      	mov	r0, r7
 8021c2a:	6033      	str	r3, [r6, #0]
 8021c2c:	f000 fe5c 	bl	80228e8 <__env_unlock>
 8021c30:	1c68      	adds	r0, r5, #1
 8021c32:	e7dd      	b.n	8021bf0 <_findenv_r+0x2c>
 8021c34:	20000000 	.word	0x20000000

08021c38 <_getenv_r>:
 8021c38:	b507      	push	{r0, r1, r2, lr}
 8021c3a:	aa01      	add	r2, sp, #4
 8021c3c:	f7ff ffc2 	bl	8021bc4 <_findenv_r>
 8021c40:	b003      	add	sp, #12
 8021c42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08021c48 <__gettzinfo>:
 8021c48:	4800      	ldr	r0, [pc, #0]	; (8021c4c <__gettzinfo+0x4>)
 8021c4a:	4770      	bx	lr
 8021c4c:	20000178 	.word	0x20000178

08021c50 <gmtime_r>:
 8021c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c54:	e9d0 6700 	ldrd	r6, r7, [r0]
 8021c58:	460c      	mov	r4, r1
 8021c5a:	4a51      	ldr	r2, [pc, #324]	; (8021da0 <gmtime_r+0x150>)
 8021c5c:	2300      	movs	r3, #0
 8021c5e:	4630      	mov	r0, r6
 8021c60:	4639      	mov	r1, r7
 8021c62:	f7de fda7 	bl	80007b4 <__aeabi_ldivmod>
 8021c66:	4639      	mov	r1, r7
 8021c68:	4605      	mov	r5, r0
 8021c6a:	4a4d      	ldr	r2, [pc, #308]	; (8021da0 <gmtime_r+0x150>)
 8021c6c:	4630      	mov	r0, r6
 8021c6e:	2300      	movs	r3, #0
 8021c70:	f7de fda0 	bl	80007b4 <__aeabi_ldivmod>
 8021c74:	2a00      	cmp	r2, #0
 8021c76:	bfbc      	itt	lt
 8021c78:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8021c7c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8021c80:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021c84:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8021c88:	fbb2 f3f1 	udiv	r3, r2, r1
 8021c8c:	fb01 2213 	mls	r2, r1, r3, r2
 8021c90:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8021c94:	bfac      	ite	ge
 8021c96:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8021c9a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8021c9e:	60a3      	str	r3, [r4, #8]
 8021ca0:	fbb2 f3f1 	udiv	r3, r2, r1
 8021ca4:	fb01 2213 	mls	r2, r1, r3, r2
 8021ca8:	6063      	str	r3, [r4, #4]
 8021caa:	6022      	str	r2, [r4, #0]
 8021cac:	1cc3      	adds	r3, r0, #3
 8021cae:	2207      	movs	r2, #7
 8021cb0:	fb93 f2f2 	sdiv	r2, r3, r2
 8021cb4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8021cb8:	1a9b      	subs	r3, r3, r2
 8021cba:	bf48      	it	mi
 8021cbc:	3307      	addmi	r3, #7
 8021cbe:	2800      	cmp	r0, #0
 8021cc0:	61a3      	str	r3, [r4, #24]
 8021cc2:	bfb8      	it	lt
 8021cc4:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8021cc8:	4936      	ldr	r1, [pc, #216]	; (8021da4 <gmtime_r+0x154>)
 8021cca:	bfae      	itee	ge
 8021ccc:	fb90 f1f1 	sdivge	r1, r0, r1
 8021cd0:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8021cd4:	fb93 f1f1 	sdivlt	r1, r3, r1
 8021cd8:	4b33      	ldr	r3, [pc, #204]	; (8021da8 <gmtime_r+0x158>)
 8021cda:	fb03 0001 	mla	r0, r3, r1, r0
 8021cde:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8021ce2:	fbb0 f2f2 	udiv	r2, r0, r2
 8021ce6:	4402      	add	r2, r0
 8021ce8:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8021cec:	fbb0 f3fc 	udiv	r3, r0, ip
 8021cf0:	1ad2      	subs	r2, r2, r3
 8021cf2:	f240 176d 	movw	r7, #365	; 0x16d
 8021cf6:	4b2d      	ldr	r3, [pc, #180]	; (8021dac <gmtime_r+0x15c>)
 8021cf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8021cfc:	2664      	movs	r6, #100	; 0x64
 8021cfe:	1ad3      	subs	r3, r2, r3
 8021d00:	fbb3 f5f7 	udiv	r5, r3, r7
 8021d04:	fbb3 f3fc 	udiv	r3, r3, ip
 8021d08:	fbb5 f2f6 	udiv	r2, r5, r6
 8021d0c:	1ad3      	subs	r3, r2, r3
 8021d0e:	4403      	add	r3, r0
 8021d10:	fb07 3315 	mls	r3, r7, r5, r3
 8021d14:	2099      	movs	r0, #153	; 0x99
 8021d16:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8021d1a:	f10c 0c02 	add.w	ip, ip, #2
 8021d1e:	f103 0e01 	add.w	lr, r3, #1
 8021d22:	fbbc f7f0 	udiv	r7, ip, r0
 8021d26:	4378      	muls	r0, r7
 8021d28:	3002      	adds	r0, #2
 8021d2a:	f04f 0805 	mov.w	r8, #5
 8021d2e:	fbb0 f0f8 	udiv	r0, r0, r8
 8021d32:	ebae 0000 	sub.w	r0, lr, r0
 8021d36:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8021d3a:	45f4      	cmp	ip, lr
 8021d3c:	bf94      	ite	ls
 8021d3e:	f04f 0c02 	movls.w	ip, #2
 8021d42:	f06f 0c09 	mvnhi.w	ip, #9
 8021d46:	4467      	add	r7, ip
 8021d48:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8021d4c:	fb0c 5101 	mla	r1, ip, r1, r5
 8021d50:	2f01      	cmp	r7, #1
 8021d52:	bf98      	it	ls
 8021d54:	3101      	addls	r1, #1
 8021d56:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8021d5a:	d30c      	bcc.n	8021d76 <gmtime_r+0x126>
 8021d5c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8021d60:	61e3      	str	r3, [r4, #28]
 8021d62:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8021d66:	2300      	movs	r3, #0
 8021d68:	60e0      	str	r0, [r4, #12]
 8021d6a:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8021d6e:	6223      	str	r3, [r4, #32]
 8021d70:	4620      	mov	r0, r4
 8021d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021d76:	f015 0f03 	tst.w	r5, #3
 8021d7a:	d102      	bne.n	8021d82 <gmtime_r+0x132>
 8021d7c:	fb06 5212 	mls	r2, r6, r2, r5
 8021d80:	b95a      	cbnz	r2, 8021d9a <gmtime_r+0x14a>
 8021d82:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8021d86:	fbb5 f2f6 	udiv	r2, r5, r6
 8021d8a:	fb06 5212 	mls	r2, r6, r2, r5
 8021d8e:	fab2 f282 	clz	r2, r2
 8021d92:	0952      	lsrs	r2, r2, #5
 8021d94:	333b      	adds	r3, #59	; 0x3b
 8021d96:	4413      	add	r3, r2
 8021d98:	e7e2      	b.n	8021d60 <gmtime_r+0x110>
 8021d9a:	2201      	movs	r2, #1
 8021d9c:	e7fa      	b.n	8021d94 <gmtime_r+0x144>
 8021d9e:	bf00      	nop
 8021da0:	00015180 	.word	0x00015180
 8021da4:	00023ab1 	.word	0x00023ab1
 8021da8:	fffdc54f 	.word	0xfffdc54f
 8021dac:	00023ab0 	.word	0x00023ab0

08021db0 <_isatty_r>:
 8021db0:	b538      	push	{r3, r4, r5, lr}
 8021db2:	4d06      	ldr	r5, [pc, #24]	; (8021dcc <_isatty_r+0x1c>)
 8021db4:	2300      	movs	r3, #0
 8021db6:	4604      	mov	r4, r0
 8021db8:	4608      	mov	r0, r1
 8021dba:	602b      	str	r3, [r5, #0]
 8021dbc:	f7df f840 	bl	8000e40 <_isatty>
 8021dc0:	1c43      	adds	r3, r0, #1
 8021dc2:	d102      	bne.n	8021dca <_isatty_r+0x1a>
 8021dc4:	682b      	ldr	r3, [r5, #0]
 8021dc6:	b103      	cbz	r3, 8021dca <_isatty_r+0x1a>
 8021dc8:	6023      	str	r3, [r4, #0]
 8021dca:	bd38      	pop	{r3, r4, r5, pc}
 8021dcc:	20000f50 	.word	0x20000f50

08021dd0 <labs>:
 8021dd0:	2800      	cmp	r0, #0
 8021dd2:	bfb8      	it	lt
 8021dd4:	4240      	neglt	r0, r0
 8021dd6:	4770      	bx	lr

08021dd8 <_lseek_r>:
 8021dd8:	b538      	push	{r3, r4, r5, lr}
 8021dda:	4d07      	ldr	r5, [pc, #28]	; (8021df8 <_lseek_r+0x20>)
 8021ddc:	4604      	mov	r4, r0
 8021dde:	4608      	mov	r0, r1
 8021de0:	4611      	mov	r1, r2
 8021de2:	2200      	movs	r2, #0
 8021de4:	602a      	str	r2, [r5, #0]
 8021de6:	461a      	mov	r2, r3
 8021de8:	f7df f835 	bl	8000e56 <_lseek>
 8021dec:	1c43      	adds	r3, r0, #1
 8021dee:	d102      	bne.n	8021df6 <_lseek_r+0x1e>
 8021df0:	682b      	ldr	r3, [r5, #0]
 8021df2:	b103      	cbz	r3, 8021df6 <_lseek_r+0x1e>
 8021df4:	6023      	str	r3, [r4, #0]
 8021df6:	bd38      	pop	{r3, r4, r5, pc}
 8021df8:	20000f50 	.word	0x20000f50

08021dfc <__ascii_mbtowc>:
 8021dfc:	b082      	sub	sp, #8
 8021dfe:	b901      	cbnz	r1, 8021e02 <__ascii_mbtowc+0x6>
 8021e00:	a901      	add	r1, sp, #4
 8021e02:	b142      	cbz	r2, 8021e16 <__ascii_mbtowc+0x1a>
 8021e04:	b14b      	cbz	r3, 8021e1a <__ascii_mbtowc+0x1e>
 8021e06:	7813      	ldrb	r3, [r2, #0]
 8021e08:	600b      	str	r3, [r1, #0]
 8021e0a:	7812      	ldrb	r2, [r2, #0]
 8021e0c:	1e10      	subs	r0, r2, #0
 8021e0e:	bf18      	it	ne
 8021e10:	2001      	movne	r0, #1
 8021e12:	b002      	add	sp, #8
 8021e14:	4770      	bx	lr
 8021e16:	4610      	mov	r0, r2
 8021e18:	e7fb      	b.n	8021e12 <__ascii_mbtowc+0x16>
 8021e1a:	f06f 0001 	mvn.w	r0, #1
 8021e1e:	e7f8      	b.n	8021e12 <__ascii_mbtowc+0x16>

08021e20 <__malloc_lock>:
 8021e20:	4801      	ldr	r0, [pc, #4]	; (8021e28 <__malloc_lock+0x8>)
 8021e22:	f7fe b974 	b.w	802010e <__retarget_lock_acquire_recursive>
 8021e26:	bf00      	nop
 8021e28:	20000f48 	.word	0x20000f48

08021e2c <__malloc_unlock>:
 8021e2c:	4801      	ldr	r0, [pc, #4]	; (8021e34 <__malloc_unlock+0x8>)
 8021e2e:	f7fe b970 	b.w	8020112 <__retarget_lock_release_recursive>
 8021e32:	bf00      	nop
 8021e34:	20000f48 	.word	0x20000f48

08021e38 <_realloc_r>:
 8021e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e3a:	4607      	mov	r7, r0
 8021e3c:	4614      	mov	r4, r2
 8021e3e:	460e      	mov	r6, r1
 8021e40:	b921      	cbnz	r1, 8021e4c <_realloc_r+0x14>
 8021e42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8021e46:	4611      	mov	r1, r2
 8021e48:	f7fe ba4e 	b.w	80202e8 <_malloc_r>
 8021e4c:	b922      	cbnz	r2, 8021e58 <_realloc_r+0x20>
 8021e4e:	f7fe f9fb 	bl	8020248 <_free_r>
 8021e52:	4625      	mov	r5, r4
 8021e54:	4628      	mov	r0, r5
 8021e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021e58:	f000 fd66 	bl	8022928 <_malloc_usable_size_r>
 8021e5c:	42a0      	cmp	r0, r4
 8021e5e:	d20f      	bcs.n	8021e80 <_realloc_r+0x48>
 8021e60:	4621      	mov	r1, r4
 8021e62:	4638      	mov	r0, r7
 8021e64:	f7fe fa40 	bl	80202e8 <_malloc_r>
 8021e68:	4605      	mov	r5, r0
 8021e6a:	2800      	cmp	r0, #0
 8021e6c:	d0f2      	beq.n	8021e54 <_realloc_r+0x1c>
 8021e6e:	4631      	mov	r1, r6
 8021e70:	4622      	mov	r2, r4
 8021e72:	f7fe f9c3 	bl	80201fc <memcpy>
 8021e76:	4631      	mov	r1, r6
 8021e78:	4638      	mov	r0, r7
 8021e7a:	f7fe f9e5 	bl	8020248 <_free_r>
 8021e7e:	e7e9      	b.n	8021e54 <_realloc_r+0x1c>
 8021e80:	4635      	mov	r5, r6
 8021e82:	e7e7      	b.n	8021e54 <_realloc_r+0x1c>

08021e84 <__ssputs_r>:
 8021e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e88:	688e      	ldr	r6, [r1, #8]
 8021e8a:	429e      	cmp	r6, r3
 8021e8c:	4682      	mov	sl, r0
 8021e8e:	460c      	mov	r4, r1
 8021e90:	4690      	mov	r8, r2
 8021e92:	461f      	mov	r7, r3
 8021e94:	d838      	bhi.n	8021f08 <__ssputs_r+0x84>
 8021e96:	898a      	ldrh	r2, [r1, #12]
 8021e98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021e9c:	d032      	beq.n	8021f04 <__ssputs_r+0x80>
 8021e9e:	6825      	ldr	r5, [r4, #0]
 8021ea0:	6909      	ldr	r1, [r1, #16]
 8021ea2:	eba5 0901 	sub.w	r9, r5, r1
 8021ea6:	6965      	ldr	r5, [r4, #20]
 8021ea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021eac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021eb0:	3301      	adds	r3, #1
 8021eb2:	444b      	add	r3, r9
 8021eb4:	106d      	asrs	r5, r5, #1
 8021eb6:	429d      	cmp	r5, r3
 8021eb8:	bf38      	it	cc
 8021eba:	461d      	movcc	r5, r3
 8021ebc:	0553      	lsls	r3, r2, #21
 8021ebe:	d531      	bpl.n	8021f24 <__ssputs_r+0xa0>
 8021ec0:	4629      	mov	r1, r5
 8021ec2:	f7fe fa11 	bl	80202e8 <_malloc_r>
 8021ec6:	4606      	mov	r6, r0
 8021ec8:	b950      	cbnz	r0, 8021ee0 <__ssputs_r+0x5c>
 8021eca:	230c      	movs	r3, #12
 8021ecc:	f8ca 3000 	str.w	r3, [sl]
 8021ed0:	89a3      	ldrh	r3, [r4, #12]
 8021ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021ed6:	81a3      	strh	r3, [r4, #12]
 8021ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8021edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ee0:	6921      	ldr	r1, [r4, #16]
 8021ee2:	464a      	mov	r2, r9
 8021ee4:	f7fe f98a 	bl	80201fc <memcpy>
 8021ee8:	89a3      	ldrh	r3, [r4, #12]
 8021eea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021ef2:	81a3      	strh	r3, [r4, #12]
 8021ef4:	6126      	str	r6, [r4, #16]
 8021ef6:	6165      	str	r5, [r4, #20]
 8021ef8:	444e      	add	r6, r9
 8021efa:	eba5 0509 	sub.w	r5, r5, r9
 8021efe:	6026      	str	r6, [r4, #0]
 8021f00:	60a5      	str	r5, [r4, #8]
 8021f02:	463e      	mov	r6, r7
 8021f04:	42be      	cmp	r6, r7
 8021f06:	d900      	bls.n	8021f0a <__ssputs_r+0x86>
 8021f08:	463e      	mov	r6, r7
 8021f0a:	4632      	mov	r2, r6
 8021f0c:	6820      	ldr	r0, [r4, #0]
 8021f0e:	4641      	mov	r1, r8
 8021f10:	f000 fcf0 	bl	80228f4 <memmove>
 8021f14:	68a3      	ldr	r3, [r4, #8]
 8021f16:	6822      	ldr	r2, [r4, #0]
 8021f18:	1b9b      	subs	r3, r3, r6
 8021f1a:	4432      	add	r2, r6
 8021f1c:	60a3      	str	r3, [r4, #8]
 8021f1e:	6022      	str	r2, [r4, #0]
 8021f20:	2000      	movs	r0, #0
 8021f22:	e7db      	b.n	8021edc <__ssputs_r+0x58>
 8021f24:	462a      	mov	r2, r5
 8021f26:	f7ff ff87 	bl	8021e38 <_realloc_r>
 8021f2a:	4606      	mov	r6, r0
 8021f2c:	2800      	cmp	r0, #0
 8021f2e:	d1e1      	bne.n	8021ef4 <__ssputs_r+0x70>
 8021f30:	6921      	ldr	r1, [r4, #16]
 8021f32:	4650      	mov	r0, sl
 8021f34:	f7fe f988 	bl	8020248 <_free_r>
 8021f38:	e7c7      	b.n	8021eca <__ssputs_r+0x46>
	...

08021f3c <_svfiprintf_r>:
 8021f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f40:	4698      	mov	r8, r3
 8021f42:	898b      	ldrh	r3, [r1, #12]
 8021f44:	061b      	lsls	r3, r3, #24
 8021f46:	b09d      	sub	sp, #116	; 0x74
 8021f48:	4607      	mov	r7, r0
 8021f4a:	460d      	mov	r5, r1
 8021f4c:	4614      	mov	r4, r2
 8021f4e:	d50e      	bpl.n	8021f6e <_svfiprintf_r+0x32>
 8021f50:	690b      	ldr	r3, [r1, #16]
 8021f52:	b963      	cbnz	r3, 8021f6e <_svfiprintf_r+0x32>
 8021f54:	2140      	movs	r1, #64	; 0x40
 8021f56:	f7fe f9c7 	bl	80202e8 <_malloc_r>
 8021f5a:	6028      	str	r0, [r5, #0]
 8021f5c:	6128      	str	r0, [r5, #16]
 8021f5e:	b920      	cbnz	r0, 8021f6a <_svfiprintf_r+0x2e>
 8021f60:	230c      	movs	r3, #12
 8021f62:	603b      	str	r3, [r7, #0]
 8021f64:	f04f 30ff 	mov.w	r0, #4294967295
 8021f68:	e0d1      	b.n	802210e <_svfiprintf_r+0x1d2>
 8021f6a:	2340      	movs	r3, #64	; 0x40
 8021f6c:	616b      	str	r3, [r5, #20]
 8021f6e:	2300      	movs	r3, #0
 8021f70:	9309      	str	r3, [sp, #36]	; 0x24
 8021f72:	2320      	movs	r3, #32
 8021f74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021f78:	f8cd 800c 	str.w	r8, [sp, #12]
 8021f7c:	2330      	movs	r3, #48	; 0x30
 8021f7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022128 <_svfiprintf_r+0x1ec>
 8021f82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021f86:	f04f 0901 	mov.w	r9, #1
 8021f8a:	4623      	mov	r3, r4
 8021f8c:	469a      	mov	sl, r3
 8021f8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021f92:	b10a      	cbz	r2, 8021f98 <_svfiprintf_r+0x5c>
 8021f94:	2a25      	cmp	r2, #37	; 0x25
 8021f96:	d1f9      	bne.n	8021f8c <_svfiprintf_r+0x50>
 8021f98:	ebba 0b04 	subs.w	fp, sl, r4
 8021f9c:	d00b      	beq.n	8021fb6 <_svfiprintf_r+0x7a>
 8021f9e:	465b      	mov	r3, fp
 8021fa0:	4622      	mov	r2, r4
 8021fa2:	4629      	mov	r1, r5
 8021fa4:	4638      	mov	r0, r7
 8021fa6:	f7ff ff6d 	bl	8021e84 <__ssputs_r>
 8021faa:	3001      	adds	r0, #1
 8021fac:	f000 80aa 	beq.w	8022104 <_svfiprintf_r+0x1c8>
 8021fb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021fb2:	445a      	add	r2, fp
 8021fb4:	9209      	str	r2, [sp, #36]	; 0x24
 8021fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8021fba:	2b00      	cmp	r3, #0
 8021fbc:	f000 80a2 	beq.w	8022104 <_svfiprintf_r+0x1c8>
 8021fc0:	2300      	movs	r3, #0
 8021fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8021fc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021fca:	f10a 0a01 	add.w	sl, sl, #1
 8021fce:	9304      	str	r3, [sp, #16]
 8021fd0:	9307      	str	r3, [sp, #28]
 8021fd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021fd6:	931a      	str	r3, [sp, #104]	; 0x68
 8021fd8:	4654      	mov	r4, sl
 8021fda:	2205      	movs	r2, #5
 8021fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021fe0:	4851      	ldr	r0, [pc, #324]	; (8022128 <_svfiprintf_r+0x1ec>)
 8021fe2:	f7de f93d 	bl	8000260 <memchr>
 8021fe6:	9a04      	ldr	r2, [sp, #16]
 8021fe8:	b9d8      	cbnz	r0, 8022022 <_svfiprintf_r+0xe6>
 8021fea:	06d0      	lsls	r0, r2, #27
 8021fec:	bf44      	itt	mi
 8021fee:	2320      	movmi	r3, #32
 8021ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021ff4:	0711      	lsls	r1, r2, #28
 8021ff6:	bf44      	itt	mi
 8021ff8:	232b      	movmi	r3, #43	; 0x2b
 8021ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8022002:	2b2a      	cmp	r3, #42	; 0x2a
 8022004:	d015      	beq.n	8022032 <_svfiprintf_r+0xf6>
 8022006:	9a07      	ldr	r2, [sp, #28]
 8022008:	4654      	mov	r4, sl
 802200a:	2000      	movs	r0, #0
 802200c:	f04f 0c0a 	mov.w	ip, #10
 8022010:	4621      	mov	r1, r4
 8022012:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022016:	3b30      	subs	r3, #48	; 0x30
 8022018:	2b09      	cmp	r3, #9
 802201a:	d94e      	bls.n	80220ba <_svfiprintf_r+0x17e>
 802201c:	b1b0      	cbz	r0, 802204c <_svfiprintf_r+0x110>
 802201e:	9207      	str	r2, [sp, #28]
 8022020:	e014      	b.n	802204c <_svfiprintf_r+0x110>
 8022022:	eba0 0308 	sub.w	r3, r0, r8
 8022026:	fa09 f303 	lsl.w	r3, r9, r3
 802202a:	4313      	orrs	r3, r2
 802202c:	9304      	str	r3, [sp, #16]
 802202e:	46a2      	mov	sl, r4
 8022030:	e7d2      	b.n	8021fd8 <_svfiprintf_r+0x9c>
 8022032:	9b03      	ldr	r3, [sp, #12]
 8022034:	1d19      	adds	r1, r3, #4
 8022036:	681b      	ldr	r3, [r3, #0]
 8022038:	9103      	str	r1, [sp, #12]
 802203a:	2b00      	cmp	r3, #0
 802203c:	bfbb      	ittet	lt
 802203e:	425b      	neglt	r3, r3
 8022040:	f042 0202 	orrlt.w	r2, r2, #2
 8022044:	9307      	strge	r3, [sp, #28]
 8022046:	9307      	strlt	r3, [sp, #28]
 8022048:	bfb8      	it	lt
 802204a:	9204      	strlt	r2, [sp, #16]
 802204c:	7823      	ldrb	r3, [r4, #0]
 802204e:	2b2e      	cmp	r3, #46	; 0x2e
 8022050:	d10c      	bne.n	802206c <_svfiprintf_r+0x130>
 8022052:	7863      	ldrb	r3, [r4, #1]
 8022054:	2b2a      	cmp	r3, #42	; 0x2a
 8022056:	d135      	bne.n	80220c4 <_svfiprintf_r+0x188>
 8022058:	9b03      	ldr	r3, [sp, #12]
 802205a:	1d1a      	adds	r2, r3, #4
 802205c:	681b      	ldr	r3, [r3, #0]
 802205e:	9203      	str	r2, [sp, #12]
 8022060:	2b00      	cmp	r3, #0
 8022062:	bfb8      	it	lt
 8022064:	f04f 33ff 	movlt.w	r3, #4294967295
 8022068:	3402      	adds	r4, #2
 802206a:	9305      	str	r3, [sp, #20]
 802206c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022138 <_svfiprintf_r+0x1fc>
 8022070:	7821      	ldrb	r1, [r4, #0]
 8022072:	2203      	movs	r2, #3
 8022074:	4650      	mov	r0, sl
 8022076:	f7de f8f3 	bl	8000260 <memchr>
 802207a:	b140      	cbz	r0, 802208e <_svfiprintf_r+0x152>
 802207c:	2340      	movs	r3, #64	; 0x40
 802207e:	eba0 000a 	sub.w	r0, r0, sl
 8022082:	fa03 f000 	lsl.w	r0, r3, r0
 8022086:	9b04      	ldr	r3, [sp, #16]
 8022088:	4303      	orrs	r3, r0
 802208a:	3401      	adds	r4, #1
 802208c:	9304      	str	r3, [sp, #16]
 802208e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022092:	4826      	ldr	r0, [pc, #152]	; (802212c <_svfiprintf_r+0x1f0>)
 8022094:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022098:	2206      	movs	r2, #6
 802209a:	f7de f8e1 	bl	8000260 <memchr>
 802209e:	2800      	cmp	r0, #0
 80220a0:	d038      	beq.n	8022114 <_svfiprintf_r+0x1d8>
 80220a2:	4b23      	ldr	r3, [pc, #140]	; (8022130 <_svfiprintf_r+0x1f4>)
 80220a4:	bb1b      	cbnz	r3, 80220ee <_svfiprintf_r+0x1b2>
 80220a6:	9b03      	ldr	r3, [sp, #12]
 80220a8:	3307      	adds	r3, #7
 80220aa:	f023 0307 	bic.w	r3, r3, #7
 80220ae:	3308      	adds	r3, #8
 80220b0:	9303      	str	r3, [sp, #12]
 80220b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80220b4:	4433      	add	r3, r6
 80220b6:	9309      	str	r3, [sp, #36]	; 0x24
 80220b8:	e767      	b.n	8021f8a <_svfiprintf_r+0x4e>
 80220ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80220be:	460c      	mov	r4, r1
 80220c0:	2001      	movs	r0, #1
 80220c2:	e7a5      	b.n	8022010 <_svfiprintf_r+0xd4>
 80220c4:	2300      	movs	r3, #0
 80220c6:	3401      	adds	r4, #1
 80220c8:	9305      	str	r3, [sp, #20]
 80220ca:	4619      	mov	r1, r3
 80220cc:	f04f 0c0a 	mov.w	ip, #10
 80220d0:	4620      	mov	r0, r4
 80220d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80220d6:	3a30      	subs	r2, #48	; 0x30
 80220d8:	2a09      	cmp	r2, #9
 80220da:	d903      	bls.n	80220e4 <_svfiprintf_r+0x1a8>
 80220dc:	2b00      	cmp	r3, #0
 80220de:	d0c5      	beq.n	802206c <_svfiprintf_r+0x130>
 80220e0:	9105      	str	r1, [sp, #20]
 80220e2:	e7c3      	b.n	802206c <_svfiprintf_r+0x130>
 80220e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80220e8:	4604      	mov	r4, r0
 80220ea:	2301      	movs	r3, #1
 80220ec:	e7f0      	b.n	80220d0 <_svfiprintf_r+0x194>
 80220ee:	ab03      	add	r3, sp, #12
 80220f0:	9300      	str	r3, [sp, #0]
 80220f2:	462a      	mov	r2, r5
 80220f4:	4b0f      	ldr	r3, [pc, #60]	; (8022134 <_svfiprintf_r+0x1f8>)
 80220f6:	a904      	add	r1, sp, #16
 80220f8:	4638      	mov	r0, r7
 80220fa:	f3af 8000 	nop.w
 80220fe:	1c42      	adds	r2, r0, #1
 8022100:	4606      	mov	r6, r0
 8022102:	d1d6      	bne.n	80220b2 <_svfiprintf_r+0x176>
 8022104:	89ab      	ldrh	r3, [r5, #12]
 8022106:	065b      	lsls	r3, r3, #25
 8022108:	f53f af2c 	bmi.w	8021f64 <_svfiprintf_r+0x28>
 802210c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802210e:	b01d      	add	sp, #116	; 0x74
 8022110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022114:	ab03      	add	r3, sp, #12
 8022116:	9300      	str	r3, [sp, #0]
 8022118:	462a      	mov	r2, r5
 802211a:	4b06      	ldr	r3, [pc, #24]	; (8022134 <_svfiprintf_r+0x1f8>)
 802211c:	a904      	add	r1, sp, #16
 802211e:	4638      	mov	r0, r7
 8022120:	f000 f9d4 	bl	80224cc <_printf_i>
 8022124:	e7eb      	b.n	80220fe <_svfiprintf_r+0x1c2>
 8022126:	bf00      	nop
 8022128:	080293e7 	.word	0x080293e7
 802212c:	080293f1 	.word	0x080293f1
 8022130:	00000000 	.word	0x00000000
 8022134:	08021e85 	.word	0x08021e85
 8022138:	080293ed 	.word	0x080293ed

0802213c <__sfputc_r>:
 802213c:	6893      	ldr	r3, [r2, #8]
 802213e:	3b01      	subs	r3, #1
 8022140:	2b00      	cmp	r3, #0
 8022142:	b410      	push	{r4}
 8022144:	6093      	str	r3, [r2, #8]
 8022146:	da08      	bge.n	802215a <__sfputc_r+0x1e>
 8022148:	6994      	ldr	r4, [r2, #24]
 802214a:	42a3      	cmp	r3, r4
 802214c:	db01      	blt.n	8022152 <__sfputc_r+0x16>
 802214e:	290a      	cmp	r1, #10
 8022150:	d103      	bne.n	802215a <__sfputc_r+0x1e>
 8022152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022156:	f7ff bb75 	b.w	8021844 <__swbuf_r>
 802215a:	6813      	ldr	r3, [r2, #0]
 802215c:	1c58      	adds	r0, r3, #1
 802215e:	6010      	str	r0, [r2, #0]
 8022160:	7019      	strb	r1, [r3, #0]
 8022162:	4608      	mov	r0, r1
 8022164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022168:	4770      	bx	lr

0802216a <__sfputs_r>:
 802216a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802216c:	4606      	mov	r6, r0
 802216e:	460f      	mov	r7, r1
 8022170:	4614      	mov	r4, r2
 8022172:	18d5      	adds	r5, r2, r3
 8022174:	42ac      	cmp	r4, r5
 8022176:	d101      	bne.n	802217c <__sfputs_r+0x12>
 8022178:	2000      	movs	r0, #0
 802217a:	e007      	b.n	802218c <__sfputs_r+0x22>
 802217c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022180:	463a      	mov	r2, r7
 8022182:	4630      	mov	r0, r6
 8022184:	f7ff ffda 	bl	802213c <__sfputc_r>
 8022188:	1c43      	adds	r3, r0, #1
 802218a:	d1f3      	bne.n	8022174 <__sfputs_r+0xa>
 802218c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022190 <_vfiprintf_r>:
 8022190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022194:	460d      	mov	r5, r1
 8022196:	b09d      	sub	sp, #116	; 0x74
 8022198:	4614      	mov	r4, r2
 802219a:	4698      	mov	r8, r3
 802219c:	4606      	mov	r6, r0
 802219e:	b118      	cbz	r0, 80221a8 <_vfiprintf_r+0x18>
 80221a0:	6983      	ldr	r3, [r0, #24]
 80221a2:	b90b      	cbnz	r3, 80221a8 <_vfiprintf_r+0x18>
 80221a4:	f7fd fc00 	bl	801f9a8 <__sinit>
 80221a8:	4b89      	ldr	r3, [pc, #548]	; (80223d0 <_vfiprintf_r+0x240>)
 80221aa:	429d      	cmp	r5, r3
 80221ac:	d11b      	bne.n	80221e6 <_vfiprintf_r+0x56>
 80221ae:	6875      	ldr	r5, [r6, #4]
 80221b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80221b2:	07d9      	lsls	r1, r3, #31
 80221b4:	d405      	bmi.n	80221c2 <_vfiprintf_r+0x32>
 80221b6:	89ab      	ldrh	r3, [r5, #12]
 80221b8:	059a      	lsls	r2, r3, #22
 80221ba:	d402      	bmi.n	80221c2 <_vfiprintf_r+0x32>
 80221bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80221be:	f7fd ffa6 	bl	802010e <__retarget_lock_acquire_recursive>
 80221c2:	89ab      	ldrh	r3, [r5, #12]
 80221c4:	071b      	lsls	r3, r3, #28
 80221c6:	d501      	bpl.n	80221cc <_vfiprintf_r+0x3c>
 80221c8:	692b      	ldr	r3, [r5, #16]
 80221ca:	b9eb      	cbnz	r3, 8022208 <_vfiprintf_r+0x78>
 80221cc:	4629      	mov	r1, r5
 80221ce:	4630      	mov	r0, r6
 80221d0:	f7ff fb9c 	bl	802190c <__swsetup_r>
 80221d4:	b1c0      	cbz	r0, 8022208 <_vfiprintf_r+0x78>
 80221d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80221d8:	07dc      	lsls	r4, r3, #31
 80221da:	d50e      	bpl.n	80221fa <_vfiprintf_r+0x6a>
 80221dc:	f04f 30ff 	mov.w	r0, #4294967295
 80221e0:	b01d      	add	sp, #116	; 0x74
 80221e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221e6:	4b7b      	ldr	r3, [pc, #492]	; (80223d4 <_vfiprintf_r+0x244>)
 80221e8:	429d      	cmp	r5, r3
 80221ea:	d101      	bne.n	80221f0 <_vfiprintf_r+0x60>
 80221ec:	68b5      	ldr	r5, [r6, #8]
 80221ee:	e7df      	b.n	80221b0 <_vfiprintf_r+0x20>
 80221f0:	4b79      	ldr	r3, [pc, #484]	; (80223d8 <_vfiprintf_r+0x248>)
 80221f2:	429d      	cmp	r5, r3
 80221f4:	bf08      	it	eq
 80221f6:	68f5      	ldreq	r5, [r6, #12]
 80221f8:	e7da      	b.n	80221b0 <_vfiprintf_r+0x20>
 80221fa:	89ab      	ldrh	r3, [r5, #12]
 80221fc:	0598      	lsls	r0, r3, #22
 80221fe:	d4ed      	bmi.n	80221dc <_vfiprintf_r+0x4c>
 8022200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022202:	f7fd ff86 	bl	8020112 <__retarget_lock_release_recursive>
 8022206:	e7e9      	b.n	80221dc <_vfiprintf_r+0x4c>
 8022208:	2300      	movs	r3, #0
 802220a:	9309      	str	r3, [sp, #36]	; 0x24
 802220c:	2320      	movs	r3, #32
 802220e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022212:	f8cd 800c 	str.w	r8, [sp, #12]
 8022216:	2330      	movs	r3, #48	; 0x30
 8022218:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80223dc <_vfiprintf_r+0x24c>
 802221c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022220:	f04f 0901 	mov.w	r9, #1
 8022224:	4623      	mov	r3, r4
 8022226:	469a      	mov	sl, r3
 8022228:	f813 2b01 	ldrb.w	r2, [r3], #1
 802222c:	b10a      	cbz	r2, 8022232 <_vfiprintf_r+0xa2>
 802222e:	2a25      	cmp	r2, #37	; 0x25
 8022230:	d1f9      	bne.n	8022226 <_vfiprintf_r+0x96>
 8022232:	ebba 0b04 	subs.w	fp, sl, r4
 8022236:	d00b      	beq.n	8022250 <_vfiprintf_r+0xc0>
 8022238:	465b      	mov	r3, fp
 802223a:	4622      	mov	r2, r4
 802223c:	4629      	mov	r1, r5
 802223e:	4630      	mov	r0, r6
 8022240:	f7ff ff93 	bl	802216a <__sfputs_r>
 8022244:	3001      	adds	r0, #1
 8022246:	f000 80aa 	beq.w	802239e <_vfiprintf_r+0x20e>
 802224a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802224c:	445a      	add	r2, fp
 802224e:	9209      	str	r2, [sp, #36]	; 0x24
 8022250:	f89a 3000 	ldrb.w	r3, [sl]
 8022254:	2b00      	cmp	r3, #0
 8022256:	f000 80a2 	beq.w	802239e <_vfiprintf_r+0x20e>
 802225a:	2300      	movs	r3, #0
 802225c:	f04f 32ff 	mov.w	r2, #4294967295
 8022260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022264:	f10a 0a01 	add.w	sl, sl, #1
 8022268:	9304      	str	r3, [sp, #16]
 802226a:	9307      	str	r3, [sp, #28]
 802226c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022270:	931a      	str	r3, [sp, #104]	; 0x68
 8022272:	4654      	mov	r4, sl
 8022274:	2205      	movs	r2, #5
 8022276:	f814 1b01 	ldrb.w	r1, [r4], #1
 802227a:	4858      	ldr	r0, [pc, #352]	; (80223dc <_vfiprintf_r+0x24c>)
 802227c:	f7dd fff0 	bl	8000260 <memchr>
 8022280:	9a04      	ldr	r2, [sp, #16]
 8022282:	b9d8      	cbnz	r0, 80222bc <_vfiprintf_r+0x12c>
 8022284:	06d1      	lsls	r1, r2, #27
 8022286:	bf44      	itt	mi
 8022288:	2320      	movmi	r3, #32
 802228a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802228e:	0713      	lsls	r3, r2, #28
 8022290:	bf44      	itt	mi
 8022292:	232b      	movmi	r3, #43	; 0x2b
 8022294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022298:	f89a 3000 	ldrb.w	r3, [sl]
 802229c:	2b2a      	cmp	r3, #42	; 0x2a
 802229e:	d015      	beq.n	80222cc <_vfiprintf_r+0x13c>
 80222a0:	9a07      	ldr	r2, [sp, #28]
 80222a2:	4654      	mov	r4, sl
 80222a4:	2000      	movs	r0, #0
 80222a6:	f04f 0c0a 	mov.w	ip, #10
 80222aa:	4621      	mov	r1, r4
 80222ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80222b0:	3b30      	subs	r3, #48	; 0x30
 80222b2:	2b09      	cmp	r3, #9
 80222b4:	d94e      	bls.n	8022354 <_vfiprintf_r+0x1c4>
 80222b6:	b1b0      	cbz	r0, 80222e6 <_vfiprintf_r+0x156>
 80222b8:	9207      	str	r2, [sp, #28]
 80222ba:	e014      	b.n	80222e6 <_vfiprintf_r+0x156>
 80222bc:	eba0 0308 	sub.w	r3, r0, r8
 80222c0:	fa09 f303 	lsl.w	r3, r9, r3
 80222c4:	4313      	orrs	r3, r2
 80222c6:	9304      	str	r3, [sp, #16]
 80222c8:	46a2      	mov	sl, r4
 80222ca:	e7d2      	b.n	8022272 <_vfiprintf_r+0xe2>
 80222cc:	9b03      	ldr	r3, [sp, #12]
 80222ce:	1d19      	adds	r1, r3, #4
 80222d0:	681b      	ldr	r3, [r3, #0]
 80222d2:	9103      	str	r1, [sp, #12]
 80222d4:	2b00      	cmp	r3, #0
 80222d6:	bfbb      	ittet	lt
 80222d8:	425b      	neglt	r3, r3
 80222da:	f042 0202 	orrlt.w	r2, r2, #2
 80222de:	9307      	strge	r3, [sp, #28]
 80222e0:	9307      	strlt	r3, [sp, #28]
 80222e2:	bfb8      	it	lt
 80222e4:	9204      	strlt	r2, [sp, #16]
 80222e6:	7823      	ldrb	r3, [r4, #0]
 80222e8:	2b2e      	cmp	r3, #46	; 0x2e
 80222ea:	d10c      	bne.n	8022306 <_vfiprintf_r+0x176>
 80222ec:	7863      	ldrb	r3, [r4, #1]
 80222ee:	2b2a      	cmp	r3, #42	; 0x2a
 80222f0:	d135      	bne.n	802235e <_vfiprintf_r+0x1ce>
 80222f2:	9b03      	ldr	r3, [sp, #12]
 80222f4:	1d1a      	adds	r2, r3, #4
 80222f6:	681b      	ldr	r3, [r3, #0]
 80222f8:	9203      	str	r2, [sp, #12]
 80222fa:	2b00      	cmp	r3, #0
 80222fc:	bfb8      	it	lt
 80222fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8022302:	3402      	adds	r4, #2
 8022304:	9305      	str	r3, [sp, #20]
 8022306:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80223ec <_vfiprintf_r+0x25c>
 802230a:	7821      	ldrb	r1, [r4, #0]
 802230c:	2203      	movs	r2, #3
 802230e:	4650      	mov	r0, sl
 8022310:	f7dd ffa6 	bl	8000260 <memchr>
 8022314:	b140      	cbz	r0, 8022328 <_vfiprintf_r+0x198>
 8022316:	2340      	movs	r3, #64	; 0x40
 8022318:	eba0 000a 	sub.w	r0, r0, sl
 802231c:	fa03 f000 	lsl.w	r0, r3, r0
 8022320:	9b04      	ldr	r3, [sp, #16]
 8022322:	4303      	orrs	r3, r0
 8022324:	3401      	adds	r4, #1
 8022326:	9304      	str	r3, [sp, #16]
 8022328:	f814 1b01 	ldrb.w	r1, [r4], #1
 802232c:	482c      	ldr	r0, [pc, #176]	; (80223e0 <_vfiprintf_r+0x250>)
 802232e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022332:	2206      	movs	r2, #6
 8022334:	f7dd ff94 	bl	8000260 <memchr>
 8022338:	2800      	cmp	r0, #0
 802233a:	d03f      	beq.n	80223bc <_vfiprintf_r+0x22c>
 802233c:	4b29      	ldr	r3, [pc, #164]	; (80223e4 <_vfiprintf_r+0x254>)
 802233e:	bb1b      	cbnz	r3, 8022388 <_vfiprintf_r+0x1f8>
 8022340:	9b03      	ldr	r3, [sp, #12]
 8022342:	3307      	adds	r3, #7
 8022344:	f023 0307 	bic.w	r3, r3, #7
 8022348:	3308      	adds	r3, #8
 802234a:	9303      	str	r3, [sp, #12]
 802234c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802234e:	443b      	add	r3, r7
 8022350:	9309      	str	r3, [sp, #36]	; 0x24
 8022352:	e767      	b.n	8022224 <_vfiprintf_r+0x94>
 8022354:	fb0c 3202 	mla	r2, ip, r2, r3
 8022358:	460c      	mov	r4, r1
 802235a:	2001      	movs	r0, #1
 802235c:	e7a5      	b.n	80222aa <_vfiprintf_r+0x11a>
 802235e:	2300      	movs	r3, #0
 8022360:	3401      	adds	r4, #1
 8022362:	9305      	str	r3, [sp, #20]
 8022364:	4619      	mov	r1, r3
 8022366:	f04f 0c0a 	mov.w	ip, #10
 802236a:	4620      	mov	r0, r4
 802236c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022370:	3a30      	subs	r2, #48	; 0x30
 8022372:	2a09      	cmp	r2, #9
 8022374:	d903      	bls.n	802237e <_vfiprintf_r+0x1ee>
 8022376:	2b00      	cmp	r3, #0
 8022378:	d0c5      	beq.n	8022306 <_vfiprintf_r+0x176>
 802237a:	9105      	str	r1, [sp, #20]
 802237c:	e7c3      	b.n	8022306 <_vfiprintf_r+0x176>
 802237e:	fb0c 2101 	mla	r1, ip, r1, r2
 8022382:	4604      	mov	r4, r0
 8022384:	2301      	movs	r3, #1
 8022386:	e7f0      	b.n	802236a <_vfiprintf_r+0x1da>
 8022388:	ab03      	add	r3, sp, #12
 802238a:	9300      	str	r3, [sp, #0]
 802238c:	462a      	mov	r2, r5
 802238e:	4b16      	ldr	r3, [pc, #88]	; (80223e8 <_vfiprintf_r+0x258>)
 8022390:	a904      	add	r1, sp, #16
 8022392:	4630      	mov	r0, r6
 8022394:	f3af 8000 	nop.w
 8022398:	4607      	mov	r7, r0
 802239a:	1c78      	adds	r0, r7, #1
 802239c:	d1d6      	bne.n	802234c <_vfiprintf_r+0x1bc>
 802239e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80223a0:	07d9      	lsls	r1, r3, #31
 80223a2:	d405      	bmi.n	80223b0 <_vfiprintf_r+0x220>
 80223a4:	89ab      	ldrh	r3, [r5, #12]
 80223a6:	059a      	lsls	r2, r3, #22
 80223a8:	d402      	bmi.n	80223b0 <_vfiprintf_r+0x220>
 80223aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80223ac:	f7fd feb1 	bl	8020112 <__retarget_lock_release_recursive>
 80223b0:	89ab      	ldrh	r3, [r5, #12]
 80223b2:	065b      	lsls	r3, r3, #25
 80223b4:	f53f af12 	bmi.w	80221dc <_vfiprintf_r+0x4c>
 80223b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80223ba:	e711      	b.n	80221e0 <_vfiprintf_r+0x50>
 80223bc:	ab03      	add	r3, sp, #12
 80223be:	9300      	str	r3, [sp, #0]
 80223c0:	462a      	mov	r2, r5
 80223c2:	4b09      	ldr	r3, [pc, #36]	; (80223e8 <_vfiprintf_r+0x258>)
 80223c4:	a904      	add	r1, sp, #16
 80223c6:	4630      	mov	r0, r6
 80223c8:	f000 f880 	bl	80224cc <_printf_i>
 80223cc:	e7e4      	b.n	8022398 <_vfiprintf_r+0x208>
 80223ce:	bf00      	nop
 80223d0:	08028e68 	.word	0x08028e68
 80223d4:	08028e88 	.word	0x08028e88
 80223d8:	08028e48 	.word	0x08028e48
 80223dc:	080293e7 	.word	0x080293e7
 80223e0:	080293f1 	.word	0x080293f1
 80223e4:	00000000 	.word	0x00000000
 80223e8:	0802216b 	.word	0x0802216b
 80223ec:	080293ed 	.word	0x080293ed

080223f0 <_printf_common>:
 80223f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80223f4:	4616      	mov	r6, r2
 80223f6:	4699      	mov	r9, r3
 80223f8:	688a      	ldr	r2, [r1, #8]
 80223fa:	690b      	ldr	r3, [r1, #16]
 80223fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022400:	4293      	cmp	r3, r2
 8022402:	bfb8      	it	lt
 8022404:	4613      	movlt	r3, r2
 8022406:	6033      	str	r3, [r6, #0]
 8022408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802240c:	4607      	mov	r7, r0
 802240e:	460c      	mov	r4, r1
 8022410:	b10a      	cbz	r2, 8022416 <_printf_common+0x26>
 8022412:	3301      	adds	r3, #1
 8022414:	6033      	str	r3, [r6, #0]
 8022416:	6823      	ldr	r3, [r4, #0]
 8022418:	0699      	lsls	r1, r3, #26
 802241a:	bf42      	ittt	mi
 802241c:	6833      	ldrmi	r3, [r6, #0]
 802241e:	3302      	addmi	r3, #2
 8022420:	6033      	strmi	r3, [r6, #0]
 8022422:	6825      	ldr	r5, [r4, #0]
 8022424:	f015 0506 	ands.w	r5, r5, #6
 8022428:	d106      	bne.n	8022438 <_printf_common+0x48>
 802242a:	f104 0a19 	add.w	sl, r4, #25
 802242e:	68e3      	ldr	r3, [r4, #12]
 8022430:	6832      	ldr	r2, [r6, #0]
 8022432:	1a9b      	subs	r3, r3, r2
 8022434:	42ab      	cmp	r3, r5
 8022436:	dc26      	bgt.n	8022486 <_printf_common+0x96>
 8022438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802243c:	1e13      	subs	r3, r2, #0
 802243e:	6822      	ldr	r2, [r4, #0]
 8022440:	bf18      	it	ne
 8022442:	2301      	movne	r3, #1
 8022444:	0692      	lsls	r2, r2, #26
 8022446:	d42b      	bmi.n	80224a0 <_printf_common+0xb0>
 8022448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802244c:	4649      	mov	r1, r9
 802244e:	4638      	mov	r0, r7
 8022450:	47c0      	blx	r8
 8022452:	3001      	adds	r0, #1
 8022454:	d01e      	beq.n	8022494 <_printf_common+0xa4>
 8022456:	6823      	ldr	r3, [r4, #0]
 8022458:	68e5      	ldr	r5, [r4, #12]
 802245a:	6832      	ldr	r2, [r6, #0]
 802245c:	f003 0306 	and.w	r3, r3, #6
 8022460:	2b04      	cmp	r3, #4
 8022462:	bf08      	it	eq
 8022464:	1aad      	subeq	r5, r5, r2
 8022466:	68a3      	ldr	r3, [r4, #8]
 8022468:	6922      	ldr	r2, [r4, #16]
 802246a:	bf0c      	ite	eq
 802246c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022470:	2500      	movne	r5, #0
 8022472:	4293      	cmp	r3, r2
 8022474:	bfc4      	itt	gt
 8022476:	1a9b      	subgt	r3, r3, r2
 8022478:	18ed      	addgt	r5, r5, r3
 802247a:	2600      	movs	r6, #0
 802247c:	341a      	adds	r4, #26
 802247e:	42b5      	cmp	r5, r6
 8022480:	d11a      	bne.n	80224b8 <_printf_common+0xc8>
 8022482:	2000      	movs	r0, #0
 8022484:	e008      	b.n	8022498 <_printf_common+0xa8>
 8022486:	2301      	movs	r3, #1
 8022488:	4652      	mov	r2, sl
 802248a:	4649      	mov	r1, r9
 802248c:	4638      	mov	r0, r7
 802248e:	47c0      	blx	r8
 8022490:	3001      	adds	r0, #1
 8022492:	d103      	bne.n	802249c <_printf_common+0xac>
 8022494:	f04f 30ff 	mov.w	r0, #4294967295
 8022498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802249c:	3501      	adds	r5, #1
 802249e:	e7c6      	b.n	802242e <_printf_common+0x3e>
 80224a0:	18e1      	adds	r1, r4, r3
 80224a2:	1c5a      	adds	r2, r3, #1
 80224a4:	2030      	movs	r0, #48	; 0x30
 80224a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80224aa:	4422      	add	r2, r4
 80224ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80224b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80224b4:	3302      	adds	r3, #2
 80224b6:	e7c7      	b.n	8022448 <_printf_common+0x58>
 80224b8:	2301      	movs	r3, #1
 80224ba:	4622      	mov	r2, r4
 80224bc:	4649      	mov	r1, r9
 80224be:	4638      	mov	r0, r7
 80224c0:	47c0      	blx	r8
 80224c2:	3001      	adds	r0, #1
 80224c4:	d0e6      	beq.n	8022494 <_printf_common+0xa4>
 80224c6:	3601      	adds	r6, #1
 80224c8:	e7d9      	b.n	802247e <_printf_common+0x8e>
	...

080224cc <_printf_i>:
 80224cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80224d0:	460c      	mov	r4, r1
 80224d2:	4691      	mov	r9, r2
 80224d4:	7e27      	ldrb	r7, [r4, #24]
 80224d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80224d8:	2f78      	cmp	r7, #120	; 0x78
 80224da:	4680      	mov	r8, r0
 80224dc:	469a      	mov	sl, r3
 80224de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80224e2:	d807      	bhi.n	80224f4 <_printf_i+0x28>
 80224e4:	2f62      	cmp	r7, #98	; 0x62
 80224e6:	d80a      	bhi.n	80224fe <_printf_i+0x32>
 80224e8:	2f00      	cmp	r7, #0
 80224ea:	f000 80d8 	beq.w	802269e <_printf_i+0x1d2>
 80224ee:	2f58      	cmp	r7, #88	; 0x58
 80224f0:	f000 80a3 	beq.w	802263a <_printf_i+0x16e>
 80224f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80224f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80224fc:	e03a      	b.n	8022574 <_printf_i+0xa8>
 80224fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022502:	2b15      	cmp	r3, #21
 8022504:	d8f6      	bhi.n	80224f4 <_printf_i+0x28>
 8022506:	a001      	add	r0, pc, #4	; (adr r0, 802250c <_printf_i+0x40>)
 8022508:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802250c:	08022565 	.word	0x08022565
 8022510:	08022579 	.word	0x08022579
 8022514:	080224f5 	.word	0x080224f5
 8022518:	080224f5 	.word	0x080224f5
 802251c:	080224f5 	.word	0x080224f5
 8022520:	080224f5 	.word	0x080224f5
 8022524:	08022579 	.word	0x08022579
 8022528:	080224f5 	.word	0x080224f5
 802252c:	080224f5 	.word	0x080224f5
 8022530:	080224f5 	.word	0x080224f5
 8022534:	080224f5 	.word	0x080224f5
 8022538:	08022685 	.word	0x08022685
 802253c:	080225a9 	.word	0x080225a9
 8022540:	08022667 	.word	0x08022667
 8022544:	080224f5 	.word	0x080224f5
 8022548:	080224f5 	.word	0x080224f5
 802254c:	080226a7 	.word	0x080226a7
 8022550:	080224f5 	.word	0x080224f5
 8022554:	080225a9 	.word	0x080225a9
 8022558:	080224f5 	.word	0x080224f5
 802255c:	080224f5 	.word	0x080224f5
 8022560:	0802266f 	.word	0x0802266f
 8022564:	680b      	ldr	r3, [r1, #0]
 8022566:	1d1a      	adds	r2, r3, #4
 8022568:	681b      	ldr	r3, [r3, #0]
 802256a:	600a      	str	r2, [r1, #0]
 802256c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022574:	2301      	movs	r3, #1
 8022576:	e0a3      	b.n	80226c0 <_printf_i+0x1f4>
 8022578:	6825      	ldr	r5, [r4, #0]
 802257a:	6808      	ldr	r0, [r1, #0]
 802257c:	062e      	lsls	r6, r5, #24
 802257e:	f100 0304 	add.w	r3, r0, #4
 8022582:	d50a      	bpl.n	802259a <_printf_i+0xce>
 8022584:	6805      	ldr	r5, [r0, #0]
 8022586:	600b      	str	r3, [r1, #0]
 8022588:	2d00      	cmp	r5, #0
 802258a:	da03      	bge.n	8022594 <_printf_i+0xc8>
 802258c:	232d      	movs	r3, #45	; 0x2d
 802258e:	426d      	negs	r5, r5
 8022590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022594:	485e      	ldr	r0, [pc, #376]	; (8022710 <_printf_i+0x244>)
 8022596:	230a      	movs	r3, #10
 8022598:	e019      	b.n	80225ce <_printf_i+0x102>
 802259a:	f015 0f40 	tst.w	r5, #64	; 0x40
 802259e:	6805      	ldr	r5, [r0, #0]
 80225a0:	600b      	str	r3, [r1, #0]
 80225a2:	bf18      	it	ne
 80225a4:	b22d      	sxthne	r5, r5
 80225a6:	e7ef      	b.n	8022588 <_printf_i+0xbc>
 80225a8:	680b      	ldr	r3, [r1, #0]
 80225aa:	6825      	ldr	r5, [r4, #0]
 80225ac:	1d18      	adds	r0, r3, #4
 80225ae:	6008      	str	r0, [r1, #0]
 80225b0:	0628      	lsls	r0, r5, #24
 80225b2:	d501      	bpl.n	80225b8 <_printf_i+0xec>
 80225b4:	681d      	ldr	r5, [r3, #0]
 80225b6:	e002      	b.n	80225be <_printf_i+0xf2>
 80225b8:	0669      	lsls	r1, r5, #25
 80225ba:	d5fb      	bpl.n	80225b4 <_printf_i+0xe8>
 80225bc:	881d      	ldrh	r5, [r3, #0]
 80225be:	4854      	ldr	r0, [pc, #336]	; (8022710 <_printf_i+0x244>)
 80225c0:	2f6f      	cmp	r7, #111	; 0x6f
 80225c2:	bf0c      	ite	eq
 80225c4:	2308      	moveq	r3, #8
 80225c6:	230a      	movne	r3, #10
 80225c8:	2100      	movs	r1, #0
 80225ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80225ce:	6866      	ldr	r6, [r4, #4]
 80225d0:	60a6      	str	r6, [r4, #8]
 80225d2:	2e00      	cmp	r6, #0
 80225d4:	bfa2      	ittt	ge
 80225d6:	6821      	ldrge	r1, [r4, #0]
 80225d8:	f021 0104 	bicge.w	r1, r1, #4
 80225dc:	6021      	strge	r1, [r4, #0]
 80225de:	b90d      	cbnz	r5, 80225e4 <_printf_i+0x118>
 80225e0:	2e00      	cmp	r6, #0
 80225e2:	d04d      	beq.n	8022680 <_printf_i+0x1b4>
 80225e4:	4616      	mov	r6, r2
 80225e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80225ea:	fb03 5711 	mls	r7, r3, r1, r5
 80225ee:	5dc7      	ldrb	r7, [r0, r7]
 80225f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80225f4:	462f      	mov	r7, r5
 80225f6:	42bb      	cmp	r3, r7
 80225f8:	460d      	mov	r5, r1
 80225fa:	d9f4      	bls.n	80225e6 <_printf_i+0x11a>
 80225fc:	2b08      	cmp	r3, #8
 80225fe:	d10b      	bne.n	8022618 <_printf_i+0x14c>
 8022600:	6823      	ldr	r3, [r4, #0]
 8022602:	07df      	lsls	r7, r3, #31
 8022604:	d508      	bpl.n	8022618 <_printf_i+0x14c>
 8022606:	6923      	ldr	r3, [r4, #16]
 8022608:	6861      	ldr	r1, [r4, #4]
 802260a:	4299      	cmp	r1, r3
 802260c:	bfde      	ittt	le
 802260e:	2330      	movle	r3, #48	; 0x30
 8022610:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022614:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022618:	1b92      	subs	r2, r2, r6
 802261a:	6122      	str	r2, [r4, #16]
 802261c:	f8cd a000 	str.w	sl, [sp]
 8022620:	464b      	mov	r3, r9
 8022622:	aa03      	add	r2, sp, #12
 8022624:	4621      	mov	r1, r4
 8022626:	4640      	mov	r0, r8
 8022628:	f7ff fee2 	bl	80223f0 <_printf_common>
 802262c:	3001      	adds	r0, #1
 802262e:	d14c      	bne.n	80226ca <_printf_i+0x1fe>
 8022630:	f04f 30ff 	mov.w	r0, #4294967295
 8022634:	b004      	add	sp, #16
 8022636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802263a:	4835      	ldr	r0, [pc, #212]	; (8022710 <_printf_i+0x244>)
 802263c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022640:	6823      	ldr	r3, [r4, #0]
 8022642:	680e      	ldr	r6, [r1, #0]
 8022644:	061f      	lsls	r7, r3, #24
 8022646:	f856 5b04 	ldr.w	r5, [r6], #4
 802264a:	600e      	str	r6, [r1, #0]
 802264c:	d514      	bpl.n	8022678 <_printf_i+0x1ac>
 802264e:	07d9      	lsls	r1, r3, #31
 8022650:	bf44      	itt	mi
 8022652:	f043 0320 	orrmi.w	r3, r3, #32
 8022656:	6023      	strmi	r3, [r4, #0]
 8022658:	b91d      	cbnz	r5, 8022662 <_printf_i+0x196>
 802265a:	6823      	ldr	r3, [r4, #0]
 802265c:	f023 0320 	bic.w	r3, r3, #32
 8022660:	6023      	str	r3, [r4, #0]
 8022662:	2310      	movs	r3, #16
 8022664:	e7b0      	b.n	80225c8 <_printf_i+0xfc>
 8022666:	6823      	ldr	r3, [r4, #0]
 8022668:	f043 0320 	orr.w	r3, r3, #32
 802266c:	6023      	str	r3, [r4, #0]
 802266e:	2378      	movs	r3, #120	; 0x78
 8022670:	4828      	ldr	r0, [pc, #160]	; (8022714 <_printf_i+0x248>)
 8022672:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022676:	e7e3      	b.n	8022640 <_printf_i+0x174>
 8022678:	065e      	lsls	r6, r3, #25
 802267a:	bf48      	it	mi
 802267c:	b2ad      	uxthmi	r5, r5
 802267e:	e7e6      	b.n	802264e <_printf_i+0x182>
 8022680:	4616      	mov	r6, r2
 8022682:	e7bb      	b.n	80225fc <_printf_i+0x130>
 8022684:	680b      	ldr	r3, [r1, #0]
 8022686:	6826      	ldr	r6, [r4, #0]
 8022688:	6960      	ldr	r0, [r4, #20]
 802268a:	1d1d      	adds	r5, r3, #4
 802268c:	600d      	str	r5, [r1, #0]
 802268e:	0635      	lsls	r5, r6, #24
 8022690:	681b      	ldr	r3, [r3, #0]
 8022692:	d501      	bpl.n	8022698 <_printf_i+0x1cc>
 8022694:	6018      	str	r0, [r3, #0]
 8022696:	e002      	b.n	802269e <_printf_i+0x1d2>
 8022698:	0671      	lsls	r1, r6, #25
 802269a:	d5fb      	bpl.n	8022694 <_printf_i+0x1c8>
 802269c:	8018      	strh	r0, [r3, #0]
 802269e:	2300      	movs	r3, #0
 80226a0:	6123      	str	r3, [r4, #16]
 80226a2:	4616      	mov	r6, r2
 80226a4:	e7ba      	b.n	802261c <_printf_i+0x150>
 80226a6:	680b      	ldr	r3, [r1, #0]
 80226a8:	1d1a      	adds	r2, r3, #4
 80226aa:	600a      	str	r2, [r1, #0]
 80226ac:	681e      	ldr	r6, [r3, #0]
 80226ae:	6862      	ldr	r2, [r4, #4]
 80226b0:	2100      	movs	r1, #0
 80226b2:	4630      	mov	r0, r6
 80226b4:	f7dd fdd4 	bl	8000260 <memchr>
 80226b8:	b108      	cbz	r0, 80226be <_printf_i+0x1f2>
 80226ba:	1b80      	subs	r0, r0, r6
 80226bc:	6060      	str	r0, [r4, #4]
 80226be:	6863      	ldr	r3, [r4, #4]
 80226c0:	6123      	str	r3, [r4, #16]
 80226c2:	2300      	movs	r3, #0
 80226c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80226c8:	e7a8      	b.n	802261c <_printf_i+0x150>
 80226ca:	6923      	ldr	r3, [r4, #16]
 80226cc:	4632      	mov	r2, r6
 80226ce:	4649      	mov	r1, r9
 80226d0:	4640      	mov	r0, r8
 80226d2:	47d0      	blx	sl
 80226d4:	3001      	adds	r0, #1
 80226d6:	d0ab      	beq.n	8022630 <_printf_i+0x164>
 80226d8:	6823      	ldr	r3, [r4, #0]
 80226da:	079b      	lsls	r3, r3, #30
 80226dc:	d413      	bmi.n	8022706 <_printf_i+0x23a>
 80226de:	68e0      	ldr	r0, [r4, #12]
 80226e0:	9b03      	ldr	r3, [sp, #12]
 80226e2:	4298      	cmp	r0, r3
 80226e4:	bfb8      	it	lt
 80226e6:	4618      	movlt	r0, r3
 80226e8:	e7a4      	b.n	8022634 <_printf_i+0x168>
 80226ea:	2301      	movs	r3, #1
 80226ec:	4632      	mov	r2, r6
 80226ee:	4649      	mov	r1, r9
 80226f0:	4640      	mov	r0, r8
 80226f2:	47d0      	blx	sl
 80226f4:	3001      	adds	r0, #1
 80226f6:	d09b      	beq.n	8022630 <_printf_i+0x164>
 80226f8:	3501      	adds	r5, #1
 80226fa:	68e3      	ldr	r3, [r4, #12]
 80226fc:	9903      	ldr	r1, [sp, #12]
 80226fe:	1a5b      	subs	r3, r3, r1
 8022700:	42ab      	cmp	r3, r5
 8022702:	dcf2      	bgt.n	80226ea <_printf_i+0x21e>
 8022704:	e7eb      	b.n	80226de <_printf_i+0x212>
 8022706:	2500      	movs	r5, #0
 8022708:	f104 0619 	add.w	r6, r4, #25
 802270c:	e7f5      	b.n	80226fa <_printf_i+0x22e>
 802270e:	bf00      	nop
 8022710:	080293f8 	.word	0x080293f8
 8022714:	08029409 	.word	0x08029409

08022718 <_putc_r>:
 8022718:	b570      	push	{r4, r5, r6, lr}
 802271a:	460d      	mov	r5, r1
 802271c:	4614      	mov	r4, r2
 802271e:	4606      	mov	r6, r0
 8022720:	b118      	cbz	r0, 802272a <_putc_r+0x12>
 8022722:	6983      	ldr	r3, [r0, #24]
 8022724:	b90b      	cbnz	r3, 802272a <_putc_r+0x12>
 8022726:	f7fd f93f 	bl	801f9a8 <__sinit>
 802272a:	4b1c      	ldr	r3, [pc, #112]	; (802279c <_putc_r+0x84>)
 802272c:	429c      	cmp	r4, r3
 802272e:	d124      	bne.n	802277a <_putc_r+0x62>
 8022730:	6874      	ldr	r4, [r6, #4]
 8022732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022734:	07d8      	lsls	r0, r3, #31
 8022736:	d405      	bmi.n	8022744 <_putc_r+0x2c>
 8022738:	89a3      	ldrh	r3, [r4, #12]
 802273a:	0599      	lsls	r1, r3, #22
 802273c:	d402      	bmi.n	8022744 <_putc_r+0x2c>
 802273e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022740:	f7fd fce5 	bl	802010e <__retarget_lock_acquire_recursive>
 8022744:	68a3      	ldr	r3, [r4, #8]
 8022746:	3b01      	subs	r3, #1
 8022748:	2b00      	cmp	r3, #0
 802274a:	60a3      	str	r3, [r4, #8]
 802274c:	da05      	bge.n	802275a <_putc_r+0x42>
 802274e:	69a2      	ldr	r2, [r4, #24]
 8022750:	4293      	cmp	r3, r2
 8022752:	db1c      	blt.n	802278e <_putc_r+0x76>
 8022754:	b2eb      	uxtb	r3, r5
 8022756:	2b0a      	cmp	r3, #10
 8022758:	d019      	beq.n	802278e <_putc_r+0x76>
 802275a:	6823      	ldr	r3, [r4, #0]
 802275c:	1c5a      	adds	r2, r3, #1
 802275e:	6022      	str	r2, [r4, #0]
 8022760:	701d      	strb	r5, [r3, #0]
 8022762:	b2ed      	uxtb	r5, r5
 8022764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022766:	07da      	lsls	r2, r3, #31
 8022768:	d405      	bmi.n	8022776 <_putc_r+0x5e>
 802276a:	89a3      	ldrh	r3, [r4, #12]
 802276c:	059b      	lsls	r3, r3, #22
 802276e:	d402      	bmi.n	8022776 <_putc_r+0x5e>
 8022770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022772:	f7fd fcce 	bl	8020112 <__retarget_lock_release_recursive>
 8022776:	4628      	mov	r0, r5
 8022778:	bd70      	pop	{r4, r5, r6, pc}
 802277a:	4b09      	ldr	r3, [pc, #36]	; (80227a0 <_putc_r+0x88>)
 802277c:	429c      	cmp	r4, r3
 802277e:	d101      	bne.n	8022784 <_putc_r+0x6c>
 8022780:	68b4      	ldr	r4, [r6, #8]
 8022782:	e7d6      	b.n	8022732 <_putc_r+0x1a>
 8022784:	4b07      	ldr	r3, [pc, #28]	; (80227a4 <_putc_r+0x8c>)
 8022786:	429c      	cmp	r4, r3
 8022788:	bf08      	it	eq
 802278a:	68f4      	ldreq	r4, [r6, #12]
 802278c:	e7d1      	b.n	8022732 <_putc_r+0x1a>
 802278e:	4629      	mov	r1, r5
 8022790:	4622      	mov	r2, r4
 8022792:	4630      	mov	r0, r6
 8022794:	f7ff f856 	bl	8021844 <__swbuf_r>
 8022798:	4605      	mov	r5, r0
 802279a:	e7e3      	b.n	8022764 <_putc_r+0x4c>
 802279c:	08028e68 	.word	0x08028e68
 80227a0:	08028e88 	.word	0x08028e88
 80227a4:	08028e48 	.word	0x08028e48

080227a8 <_read_r>:
 80227a8:	b538      	push	{r3, r4, r5, lr}
 80227aa:	4d07      	ldr	r5, [pc, #28]	; (80227c8 <_read_r+0x20>)
 80227ac:	4604      	mov	r4, r0
 80227ae:	4608      	mov	r0, r1
 80227b0:	4611      	mov	r1, r2
 80227b2:	2200      	movs	r2, #0
 80227b4:	602a      	str	r2, [r5, #0]
 80227b6:	461a      	mov	r2, r3
 80227b8:	f7de faed 	bl	8000d96 <_read>
 80227bc:	1c43      	adds	r3, r0, #1
 80227be:	d102      	bne.n	80227c6 <_read_r+0x1e>
 80227c0:	682b      	ldr	r3, [r5, #0]
 80227c2:	b103      	cbz	r3, 80227c6 <_read_r+0x1e>
 80227c4:	6023      	str	r3, [r4, #0]
 80227c6:	bd38      	pop	{r3, r4, r5, pc}
 80227c8:	20000f50 	.word	0x20000f50

080227cc <sniprintf>:
 80227cc:	b40c      	push	{r2, r3}
 80227ce:	b530      	push	{r4, r5, lr}
 80227d0:	4b17      	ldr	r3, [pc, #92]	; (8022830 <sniprintf+0x64>)
 80227d2:	1e0c      	subs	r4, r1, #0
 80227d4:	681d      	ldr	r5, [r3, #0]
 80227d6:	b09d      	sub	sp, #116	; 0x74
 80227d8:	da08      	bge.n	80227ec <sniprintf+0x20>
 80227da:	238b      	movs	r3, #139	; 0x8b
 80227dc:	602b      	str	r3, [r5, #0]
 80227de:	f04f 30ff 	mov.w	r0, #4294967295
 80227e2:	b01d      	add	sp, #116	; 0x74
 80227e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80227e8:	b002      	add	sp, #8
 80227ea:	4770      	bx	lr
 80227ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 80227f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80227f4:	bf14      	ite	ne
 80227f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80227fa:	4623      	moveq	r3, r4
 80227fc:	9304      	str	r3, [sp, #16]
 80227fe:	9307      	str	r3, [sp, #28]
 8022800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022804:	9002      	str	r0, [sp, #8]
 8022806:	9006      	str	r0, [sp, #24]
 8022808:	f8ad 3016 	strh.w	r3, [sp, #22]
 802280c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802280e:	ab21      	add	r3, sp, #132	; 0x84
 8022810:	a902      	add	r1, sp, #8
 8022812:	4628      	mov	r0, r5
 8022814:	9301      	str	r3, [sp, #4]
 8022816:	f7ff fb91 	bl	8021f3c <_svfiprintf_r>
 802281a:	1c43      	adds	r3, r0, #1
 802281c:	bfbc      	itt	lt
 802281e:	238b      	movlt	r3, #139	; 0x8b
 8022820:	602b      	strlt	r3, [r5, #0]
 8022822:	2c00      	cmp	r4, #0
 8022824:	d0dd      	beq.n	80227e2 <sniprintf+0x16>
 8022826:	9b02      	ldr	r3, [sp, #8]
 8022828:	2200      	movs	r2, #0
 802282a:	701a      	strb	r2, [r3, #0]
 802282c:	e7d9      	b.n	80227e2 <sniprintf+0x16>
 802282e:	bf00      	nop
 8022830:	20000108 	.word	0x20000108

08022834 <siscanf>:
 8022834:	b40e      	push	{r1, r2, r3}
 8022836:	b510      	push	{r4, lr}
 8022838:	b09f      	sub	sp, #124	; 0x7c
 802283a:	ac21      	add	r4, sp, #132	; 0x84
 802283c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8022840:	f854 2b04 	ldr.w	r2, [r4], #4
 8022844:	9201      	str	r2, [sp, #4]
 8022846:	f8ad 101c 	strh.w	r1, [sp, #28]
 802284a:	9004      	str	r0, [sp, #16]
 802284c:	9008      	str	r0, [sp, #32]
 802284e:	f7dd fcf5 	bl	800023c <strlen>
 8022852:	4b0c      	ldr	r3, [pc, #48]	; (8022884 <siscanf+0x50>)
 8022854:	9005      	str	r0, [sp, #20]
 8022856:	9009      	str	r0, [sp, #36]	; 0x24
 8022858:	930d      	str	r3, [sp, #52]	; 0x34
 802285a:	480b      	ldr	r0, [pc, #44]	; (8022888 <siscanf+0x54>)
 802285c:	9a01      	ldr	r2, [sp, #4]
 802285e:	6800      	ldr	r0, [r0, #0]
 8022860:	9403      	str	r4, [sp, #12]
 8022862:	2300      	movs	r3, #0
 8022864:	9311      	str	r3, [sp, #68]	; 0x44
 8022866:	9316      	str	r3, [sp, #88]	; 0x58
 8022868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802286c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022870:	a904      	add	r1, sp, #16
 8022872:	4623      	mov	r3, r4
 8022874:	f000 f8ba 	bl	80229ec <__ssvfiscanf_r>
 8022878:	b01f      	add	sp, #124	; 0x7c
 802287a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802287e:	b003      	add	sp, #12
 8022880:	4770      	bx	lr
 8022882:	bf00      	nop
 8022884:	080205e3 	.word	0x080205e3
 8022888:	20000108 	.word	0x20000108

0802288c <strcpy>:
 802288c:	4603      	mov	r3, r0
 802288e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022892:	f803 2b01 	strb.w	r2, [r3], #1
 8022896:	2a00      	cmp	r2, #0
 8022898:	d1f9      	bne.n	802288e <strcpy+0x2>
 802289a:	4770      	bx	lr

0802289c <strncmp>:
 802289c:	b510      	push	{r4, lr}
 802289e:	b16a      	cbz	r2, 80228bc <strncmp+0x20>
 80228a0:	3901      	subs	r1, #1
 80228a2:	1884      	adds	r4, r0, r2
 80228a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80228a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80228ac:	4293      	cmp	r3, r2
 80228ae:	d103      	bne.n	80228b8 <strncmp+0x1c>
 80228b0:	42a0      	cmp	r0, r4
 80228b2:	d001      	beq.n	80228b8 <strncmp+0x1c>
 80228b4:	2b00      	cmp	r3, #0
 80228b6:	d1f5      	bne.n	80228a4 <strncmp+0x8>
 80228b8:	1a98      	subs	r0, r3, r2
 80228ba:	bd10      	pop	{r4, pc}
 80228bc:	4610      	mov	r0, r2
 80228be:	e7fc      	b.n	80228ba <strncmp+0x1e>

080228c0 <__ascii_wctomb>:
 80228c0:	b149      	cbz	r1, 80228d6 <__ascii_wctomb+0x16>
 80228c2:	2aff      	cmp	r2, #255	; 0xff
 80228c4:	bf85      	ittet	hi
 80228c6:	238a      	movhi	r3, #138	; 0x8a
 80228c8:	6003      	strhi	r3, [r0, #0]
 80228ca:	700a      	strbls	r2, [r1, #0]
 80228cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80228d0:	bf98      	it	ls
 80228d2:	2001      	movls	r0, #1
 80228d4:	4770      	bx	lr
 80228d6:	4608      	mov	r0, r1
 80228d8:	4770      	bx	lr
	...

080228dc <__env_lock>:
 80228dc:	4801      	ldr	r0, [pc, #4]	; (80228e4 <__env_lock+0x8>)
 80228de:	f7fd bc16 	b.w	802010e <__retarget_lock_acquire_recursive>
 80228e2:	bf00      	nop
 80228e4:	20000f46 	.word	0x20000f46

080228e8 <__env_unlock>:
 80228e8:	4801      	ldr	r0, [pc, #4]	; (80228f0 <__env_unlock+0x8>)
 80228ea:	f7fd bc12 	b.w	8020112 <__retarget_lock_release_recursive>
 80228ee:	bf00      	nop
 80228f0:	20000f46 	.word	0x20000f46

080228f4 <memmove>:
 80228f4:	4288      	cmp	r0, r1
 80228f6:	b510      	push	{r4, lr}
 80228f8:	eb01 0402 	add.w	r4, r1, r2
 80228fc:	d902      	bls.n	8022904 <memmove+0x10>
 80228fe:	4284      	cmp	r4, r0
 8022900:	4623      	mov	r3, r4
 8022902:	d807      	bhi.n	8022914 <memmove+0x20>
 8022904:	1e43      	subs	r3, r0, #1
 8022906:	42a1      	cmp	r1, r4
 8022908:	d008      	beq.n	802291c <memmove+0x28>
 802290a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802290e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022912:	e7f8      	b.n	8022906 <memmove+0x12>
 8022914:	4402      	add	r2, r0
 8022916:	4601      	mov	r1, r0
 8022918:	428a      	cmp	r2, r1
 802291a:	d100      	bne.n	802291e <memmove+0x2a>
 802291c:	bd10      	pop	{r4, pc}
 802291e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022926:	e7f7      	b.n	8022918 <memmove+0x24>

08022928 <_malloc_usable_size_r>:
 8022928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802292c:	1f18      	subs	r0, r3, #4
 802292e:	2b00      	cmp	r3, #0
 8022930:	bfbc      	itt	lt
 8022932:	580b      	ldrlt	r3, [r1, r0]
 8022934:	18c0      	addlt	r0, r0, r3
 8022936:	4770      	bx	lr

08022938 <_sungetc_r>:
 8022938:	b538      	push	{r3, r4, r5, lr}
 802293a:	1c4b      	adds	r3, r1, #1
 802293c:	4614      	mov	r4, r2
 802293e:	d103      	bne.n	8022948 <_sungetc_r+0x10>
 8022940:	f04f 35ff 	mov.w	r5, #4294967295
 8022944:	4628      	mov	r0, r5
 8022946:	bd38      	pop	{r3, r4, r5, pc}
 8022948:	8993      	ldrh	r3, [r2, #12]
 802294a:	f023 0320 	bic.w	r3, r3, #32
 802294e:	8193      	strh	r3, [r2, #12]
 8022950:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022952:	6852      	ldr	r2, [r2, #4]
 8022954:	b2cd      	uxtb	r5, r1
 8022956:	b18b      	cbz	r3, 802297c <_sungetc_r+0x44>
 8022958:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802295a:	4293      	cmp	r3, r2
 802295c:	dd08      	ble.n	8022970 <_sungetc_r+0x38>
 802295e:	6823      	ldr	r3, [r4, #0]
 8022960:	1e5a      	subs	r2, r3, #1
 8022962:	6022      	str	r2, [r4, #0]
 8022964:	f803 5c01 	strb.w	r5, [r3, #-1]
 8022968:	6863      	ldr	r3, [r4, #4]
 802296a:	3301      	adds	r3, #1
 802296c:	6063      	str	r3, [r4, #4]
 802296e:	e7e9      	b.n	8022944 <_sungetc_r+0xc>
 8022970:	4621      	mov	r1, r4
 8022972:	f000 fb39 	bl	8022fe8 <__submore>
 8022976:	2800      	cmp	r0, #0
 8022978:	d0f1      	beq.n	802295e <_sungetc_r+0x26>
 802297a:	e7e1      	b.n	8022940 <_sungetc_r+0x8>
 802297c:	6921      	ldr	r1, [r4, #16]
 802297e:	6823      	ldr	r3, [r4, #0]
 8022980:	b151      	cbz	r1, 8022998 <_sungetc_r+0x60>
 8022982:	4299      	cmp	r1, r3
 8022984:	d208      	bcs.n	8022998 <_sungetc_r+0x60>
 8022986:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802298a:	42a9      	cmp	r1, r5
 802298c:	d104      	bne.n	8022998 <_sungetc_r+0x60>
 802298e:	3b01      	subs	r3, #1
 8022990:	3201      	adds	r2, #1
 8022992:	6023      	str	r3, [r4, #0]
 8022994:	6062      	str	r2, [r4, #4]
 8022996:	e7d5      	b.n	8022944 <_sungetc_r+0xc>
 8022998:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802299c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80229a0:	6363      	str	r3, [r4, #52]	; 0x34
 80229a2:	2303      	movs	r3, #3
 80229a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80229a6:	4623      	mov	r3, r4
 80229a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80229ac:	6023      	str	r3, [r4, #0]
 80229ae:	2301      	movs	r3, #1
 80229b0:	e7dc      	b.n	802296c <_sungetc_r+0x34>

080229b2 <__ssrefill_r>:
 80229b2:	b510      	push	{r4, lr}
 80229b4:	460c      	mov	r4, r1
 80229b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80229b8:	b169      	cbz	r1, 80229d6 <__ssrefill_r+0x24>
 80229ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80229be:	4299      	cmp	r1, r3
 80229c0:	d001      	beq.n	80229c6 <__ssrefill_r+0x14>
 80229c2:	f7fd fc41 	bl	8020248 <_free_r>
 80229c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80229c8:	6063      	str	r3, [r4, #4]
 80229ca:	2000      	movs	r0, #0
 80229cc:	6360      	str	r0, [r4, #52]	; 0x34
 80229ce:	b113      	cbz	r3, 80229d6 <__ssrefill_r+0x24>
 80229d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80229d2:	6023      	str	r3, [r4, #0]
 80229d4:	bd10      	pop	{r4, pc}
 80229d6:	6923      	ldr	r3, [r4, #16]
 80229d8:	6023      	str	r3, [r4, #0]
 80229da:	2300      	movs	r3, #0
 80229dc:	6063      	str	r3, [r4, #4]
 80229de:	89a3      	ldrh	r3, [r4, #12]
 80229e0:	f043 0320 	orr.w	r3, r3, #32
 80229e4:	81a3      	strh	r3, [r4, #12]
 80229e6:	f04f 30ff 	mov.w	r0, #4294967295
 80229ea:	e7f3      	b.n	80229d4 <__ssrefill_r+0x22>

080229ec <__ssvfiscanf_r>:
 80229ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229f0:	460c      	mov	r4, r1
 80229f2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80229f6:	2100      	movs	r1, #0
 80229f8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80229fc:	49b2      	ldr	r1, [pc, #712]	; (8022cc8 <__ssvfiscanf_r+0x2dc>)
 80229fe:	91a0      	str	r1, [sp, #640]	; 0x280
 8022a00:	f10d 0804 	add.w	r8, sp, #4
 8022a04:	49b1      	ldr	r1, [pc, #708]	; (8022ccc <__ssvfiscanf_r+0x2e0>)
 8022a06:	4fb2      	ldr	r7, [pc, #712]	; (8022cd0 <__ssvfiscanf_r+0x2e4>)
 8022a08:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8022cd4 <__ssvfiscanf_r+0x2e8>
 8022a0c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8022a10:	4606      	mov	r6, r0
 8022a12:	91a1      	str	r1, [sp, #644]	; 0x284
 8022a14:	9300      	str	r3, [sp, #0]
 8022a16:	f892 a000 	ldrb.w	sl, [r2]
 8022a1a:	f1ba 0f00 	cmp.w	sl, #0
 8022a1e:	f000 8151 	beq.w	8022cc4 <__ssvfiscanf_r+0x2d8>
 8022a22:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8022a26:	f013 0308 	ands.w	r3, r3, #8
 8022a2a:	f102 0501 	add.w	r5, r2, #1
 8022a2e:	d019      	beq.n	8022a64 <__ssvfiscanf_r+0x78>
 8022a30:	6863      	ldr	r3, [r4, #4]
 8022a32:	2b00      	cmp	r3, #0
 8022a34:	dd0f      	ble.n	8022a56 <__ssvfiscanf_r+0x6a>
 8022a36:	6823      	ldr	r3, [r4, #0]
 8022a38:	781a      	ldrb	r2, [r3, #0]
 8022a3a:	5cba      	ldrb	r2, [r7, r2]
 8022a3c:	0712      	lsls	r2, r2, #28
 8022a3e:	d401      	bmi.n	8022a44 <__ssvfiscanf_r+0x58>
 8022a40:	462a      	mov	r2, r5
 8022a42:	e7e8      	b.n	8022a16 <__ssvfiscanf_r+0x2a>
 8022a44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022a46:	3201      	adds	r2, #1
 8022a48:	9245      	str	r2, [sp, #276]	; 0x114
 8022a4a:	6862      	ldr	r2, [r4, #4]
 8022a4c:	3301      	adds	r3, #1
 8022a4e:	3a01      	subs	r2, #1
 8022a50:	6062      	str	r2, [r4, #4]
 8022a52:	6023      	str	r3, [r4, #0]
 8022a54:	e7ec      	b.n	8022a30 <__ssvfiscanf_r+0x44>
 8022a56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022a58:	4621      	mov	r1, r4
 8022a5a:	4630      	mov	r0, r6
 8022a5c:	4798      	blx	r3
 8022a5e:	2800      	cmp	r0, #0
 8022a60:	d0e9      	beq.n	8022a36 <__ssvfiscanf_r+0x4a>
 8022a62:	e7ed      	b.n	8022a40 <__ssvfiscanf_r+0x54>
 8022a64:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8022a68:	f040 8083 	bne.w	8022b72 <__ssvfiscanf_r+0x186>
 8022a6c:	9341      	str	r3, [sp, #260]	; 0x104
 8022a6e:	9343      	str	r3, [sp, #268]	; 0x10c
 8022a70:	7853      	ldrb	r3, [r2, #1]
 8022a72:	2b2a      	cmp	r3, #42	; 0x2a
 8022a74:	bf02      	ittt	eq
 8022a76:	2310      	moveq	r3, #16
 8022a78:	1c95      	addeq	r5, r2, #2
 8022a7a:	9341      	streq	r3, [sp, #260]	; 0x104
 8022a7c:	220a      	movs	r2, #10
 8022a7e:	46ab      	mov	fp, r5
 8022a80:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8022a84:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8022a88:	2b09      	cmp	r3, #9
 8022a8a:	d91d      	bls.n	8022ac8 <__ssvfiscanf_r+0xdc>
 8022a8c:	4891      	ldr	r0, [pc, #580]	; (8022cd4 <__ssvfiscanf_r+0x2e8>)
 8022a8e:	2203      	movs	r2, #3
 8022a90:	f7dd fbe6 	bl	8000260 <memchr>
 8022a94:	b140      	cbz	r0, 8022aa8 <__ssvfiscanf_r+0xbc>
 8022a96:	2301      	movs	r3, #1
 8022a98:	eba0 0009 	sub.w	r0, r0, r9
 8022a9c:	fa03 f000 	lsl.w	r0, r3, r0
 8022aa0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022aa2:	4318      	orrs	r0, r3
 8022aa4:	9041      	str	r0, [sp, #260]	; 0x104
 8022aa6:	465d      	mov	r5, fp
 8022aa8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022aac:	2b78      	cmp	r3, #120	; 0x78
 8022aae:	d806      	bhi.n	8022abe <__ssvfiscanf_r+0xd2>
 8022ab0:	2b57      	cmp	r3, #87	; 0x57
 8022ab2:	d810      	bhi.n	8022ad6 <__ssvfiscanf_r+0xea>
 8022ab4:	2b25      	cmp	r3, #37	; 0x25
 8022ab6:	d05c      	beq.n	8022b72 <__ssvfiscanf_r+0x186>
 8022ab8:	d856      	bhi.n	8022b68 <__ssvfiscanf_r+0x17c>
 8022aba:	2b00      	cmp	r3, #0
 8022abc:	d074      	beq.n	8022ba8 <__ssvfiscanf_r+0x1bc>
 8022abe:	2303      	movs	r3, #3
 8022ac0:	9347      	str	r3, [sp, #284]	; 0x11c
 8022ac2:	230a      	movs	r3, #10
 8022ac4:	9342      	str	r3, [sp, #264]	; 0x108
 8022ac6:	e081      	b.n	8022bcc <__ssvfiscanf_r+0x1e0>
 8022ac8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8022aca:	fb02 1303 	mla	r3, r2, r3, r1
 8022ace:	3b30      	subs	r3, #48	; 0x30
 8022ad0:	9343      	str	r3, [sp, #268]	; 0x10c
 8022ad2:	465d      	mov	r5, fp
 8022ad4:	e7d3      	b.n	8022a7e <__ssvfiscanf_r+0x92>
 8022ad6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8022ada:	2a20      	cmp	r2, #32
 8022adc:	d8ef      	bhi.n	8022abe <__ssvfiscanf_r+0xd2>
 8022ade:	a101      	add	r1, pc, #4	; (adr r1, 8022ae4 <__ssvfiscanf_r+0xf8>)
 8022ae0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8022ae4:	08022bb7 	.word	0x08022bb7
 8022ae8:	08022abf 	.word	0x08022abf
 8022aec:	08022abf 	.word	0x08022abf
 8022af0:	08022c15 	.word	0x08022c15
 8022af4:	08022abf 	.word	0x08022abf
 8022af8:	08022abf 	.word	0x08022abf
 8022afc:	08022abf 	.word	0x08022abf
 8022b00:	08022abf 	.word	0x08022abf
 8022b04:	08022abf 	.word	0x08022abf
 8022b08:	08022abf 	.word	0x08022abf
 8022b0c:	08022abf 	.word	0x08022abf
 8022b10:	08022c2b 	.word	0x08022c2b
 8022b14:	08022c01 	.word	0x08022c01
 8022b18:	08022b6f 	.word	0x08022b6f
 8022b1c:	08022b6f 	.word	0x08022b6f
 8022b20:	08022b6f 	.word	0x08022b6f
 8022b24:	08022abf 	.word	0x08022abf
 8022b28:	08022c05 	.word	0x08022c05
 8022b2c:	08022abf 	.word	0x08022abf
 8022b30:	08022abf 	.word	0x08022abf
 8022b34:	08022abf 	.word	0x08022abf
 8022b38:	08022abf 	.word	0x08022abf
 8022b3c:	08022c3b 	.word	0x08022c3b
 8022b40:	08022c0d 	.word	0x08022c0d
 8022b44:	08022baf 	.word	0x08022baf
 8022b48:	08022abf 	.word	0x08022abf
 8022b4c:	08022abf 	.word	0x08022abf
 8022b50:	08022c37 	.word	0x08022c37
 8022b54:	08022abf 	.word	0x08022abf
 8022b58:	08022c01 	.word	0x08022c01
 8022b5c:	08022abf 	.word	0x08022abf
 8022b60:	08022abf 	.word	0x08022abf
 8022b64:	08022bb7 	.word	0x08022bb7
 8022b68:	3b45      	subs	r3, #69	; 0x45
 8022b6a:	2b02      	cmp	r3, #2
 8022b6c:	d8a7      	bhi.n	8022abe <__ssvfiscanf_r+0xd2>
 8022b6e:	2305      	movs	r3, #5
 8022b70:	e02b      	b.n	8022bca <__ssvfiscanf_r+0x1de>
 8022b72:	6863      	ldr	r3, [r4, #4]
 8022b74:	2b00      	cmp	r3, #0
 8022b76:	dd0d      	ble.n	8022b94 <__ssvfiscanf_r+0x1a8>
 8022b78:	6823      	ldr	r3, [r4, #0]
 8022b7a:	781a      	ldrb	r2, [r3, #0]
 8022b7c:	4552      	cmp	r2, sl
 8022b7e:	f040 80a1 	bne.w	8022cc4 <__ssvfiscanf_r+0x2d8>
 8022b82:	3301      	adds	r3, #1
 8022b84:	6862      	ldr	r2, [r4, #4]
 8022b86:	6023      	str	r3, [r4, #0]
 8022b88:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8022b8a:	3a01      	subs	r2, #1
 8022b8c:	3301      	adds	r3, #1
 8022b8e:	6062      	str	r2, [r4, #4]
 8022b90:	9345      	str	r3, [sp, #276]	; 0x114
 8022b92:	e755      	b.n	8022a40 <__ssvfiscanf_r+0x54>
 8022b94:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022b96:	4621      	mov	r1, r4
 8022b98:	4630      	mov	r0, r6
 8022b9a:	4798      	blx	r3
 8022b9c:	2800      	cmp	r0, #0
 8022b9e:	d0eb      	beq.n	8022b78 <__ssvfiscanf_r+0x18c>
 8022ba0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8022ba2:	2800      	cmp	r0, #0
 8022ba4:	f040 8084 	bne.w	8022cb0 <__ssvfiscanf_r+0x2c4>
 8022ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8022bac:	e086      	b.n	8022cbc <__ssvfiscanf_r+0x2d0>
 8022bae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022bb0:	f042 0220 	orr.w	r2, r2, #32
 8022bb4:	9241      	str	r2, [sp, #260]	; 0x104
 8022bb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022bbc:	9241      	str	r2, [sp, #260]	; 0x104
 8022bbe:	2210      	movs	r2, #16
 8022bc0:	2b6f      	cmp	r3, #111	; 0x6f
 8022bc2:	9242      	str	r2, [sp, #264]	; 0x108
 8022bc4:	bf34      	ite	cc
 8022bc6:	2303      	movcc	r3, #3
 8022bc8:	2304      	movcs	r3, #4
 8022bca:	9347      	str	r3, [sp, #284]	; 0x11c
 8022bcc:	6863      	ldr	r3, [r4, #4]
 8022bce:	2b00      	cmp	r3, #0
 8022bd0:	dd41      	ble.n	8022c56 <__ssvfiscanf_r+0x26a>
 8022bd2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022bd4:	0659      	lsls	r1, r3, #25
 8022bd6:	d404      	bmi.n	8022be2 <__ssvfiscanf_r+0x1f6>
 8022bd8:	6823      	ldr	r3, [r4, #0]
 8022bda:	781a      	ldrb	r2, [r3, #0]
 8022bdc:	5cba      	ldrb	r2, [r7, r2]
 8022bde:	0712      	lsls	r2, r2, #28
 8022be0:	d440      	bmi.n	8022c64 <__ssvfiscanf_r+0x278>
 8022be2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8022be4:	2b02      	cmp	r3, #2
 8022be6:	dc4f      	bgt.n	8022c88 <__ssvfiscanf_r+0x29c>
 8022be8:	466b      	mov	r3, sp
 8022bea:	4622      	mov	r2, r4
 8022bec:	a941      	add	r1, sp, #260	; 0x104
 8022bee:	4630      	mov	r0, r6
 8022bf0:	f000 f874 	bl	8022cdc <_scanf_chars>
 8022bf4:	2801      	cmp	r0, #1
 8022bf6:	d065      	beq.n	8022cc4 <__ssvfiscanf_r+0x2d8>
 8022bf8:	2802      	cmp	r0, #2
 8022bfa:	f47f af21 	bne.w	8022a40 <__ssvfiscanf_r+0x54>
 8022bfe:	e7cf      	b.n	8022ba0 <__ssvfiscanf_r+0x1b4>
 8022c00:	220a      	movs	r2, #10
 8022c02:	e7dd      	b.n	8022bc0 <__ssvfiscanf_r+0x1d4>
 8022c04:	2300      	movs	r3, #0
 8022c06:	9342      	str	r3, [sp, #264]	; 0x108
 8022c08:	2303      	movs	r3, #3
 8022c0a:	e7de      	b.n	8022bca <__ssvfiscanf_r+0x1de>
 8022c0c:	2308      	movs	r3, #8
 8022c0e:	9342      	str	r3, [sp, #264]	; 0x108
 8022c10:	2304      	movs	r3, #4
 8022c12:	e7da      	b.n	8022bca <__ssvfiscanf_r+0x1de>
 8022c14:	4629      	mov	r1, r5
 8022c16:	4640      	mov	r0, r8
 8022c18:	f000 f9ac 	bl	8022f74 <__sccl>
 8022c1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022c22:	9341      	str	r3, [sp, #260]	; 0x104
 8022c24:	4605      	mov	r5, r0
 8022c26:	2301      	movs	r3, #1
 8022c28:	e7cf      	b.n	8022bca <__ssvfiscanf_r+0x1de>
 8022c2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022c30:	9341      	str	r3, [sp, #260]	; 0x104
 8022c32:	2300      	movs	r3, #0
 8022c34:	e7c9      	b.n	8022bca <__ssvfiscanf_r+0x1de>
 8022c36:	2302      	movs	r3, #2
 8022c38:	e7c7      	b.n	8022bca <__ssvfiscanf_r+0x1de>
 8022c3a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8022c3c:	06c3      	lsls	r3, r0, #27
 8022c3e:	f53f aeff 	bmi.w	8022a40 <__ssvfiscanf_r+0x54>
 8022c42:	9b00      	ldr	r3, [sp, #0]
 8022c44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022c46:	1d19      	adds	r1, r3, #4
 8022c48:	9100      	str	r1, [sp, #0]
 8022c4a:	681b      	ldr	r3, [r3, #0]
 8022c4c:	07c0      	lsls	r0, r0, #31
 8022c4e:	bf4c      	ite	mi
 8022c50:	801a      	strhmi	r2, [r3, #0]
 8022c52:	601a      	strpl	r2, [r3, #0]
 8022c54:	e6f4      	b.n	8022a40 <__ssvfiscanf_r+0x54>
 8022c56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022c58:	4621      	mov	r1, r4
 8022c5a:	4630      	mov	r0, r6
 8022c5c:	4798      	blx	r3
 8022c5e:	2800      	cmp	r0, #0
 8022c60:	d0b7      	beq.n	8022bd2 <__ssvfiscanf_r+0x1e6>
 8022c62:	e79d      	b.n	8022ba0 <__ssvfiscanf_r+0x1b4>
 8022c64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022c66:	3201      	adds	r2, #1
 8022c68:	9245      	str	r2, [sp, #276]	; 0x114
 8022c6a:	6862      	ldr	r2, [r4, #4]
 8022c6c:	3a01      	subs	r2, #1
 8022c6e:	2a00      	cmp	r2, #0
 8022c70:	6062      	str	r2, [r4, #4]
 8022c72:	dd02      	ble.n	8022c7a <__ssvfiscanf_r+0x28e>
 8022c74:	3301      	adds	r3, #1
 8022c76:	6023      	str	r3, [r4, #0]
 8022c78:	e7ae      	b.n	8022bd8 <__ssvfiscanf_r+0x1ec>
 8022c7a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022c7c:	4621      	mov	r1, r4
 8022c7e:	4630      	mov	r0, r6
 8022c80:	4798      	blx	r3
 8022c82:	2800      	cmp	r0, #0
 8022c84:	d0a8      	beq.n	8022bd8 <__ssvfiscanf_r+0x1ec>
 8022c86:	e78b      	b.n	8022ba0 <__ssvfiscanf_r+0x1b4>
 8022c88:	2b04      	cmp	r3, #4
 8022c8a:	dc06      	bgt.n	8022c9a <__ssvfiscanf_r+0x2ae>
 8022c8c:	466b      	mov	r3, sp
 8022c8e:	4622      	mov	r2, r4
 8022c90:	a941      	add	r1, sp, #260	; 0x104
 8022c92:	4630      	mov	r0, r6
 8022c94:	f000 f87a 	bl	8022d8c <_scanf_i>
 8022c98:	e7ac      	b.n	8022bf4 <__ssvfiscanf_r+0x208>
 8022c9a:	4b0f      	ldr	r3, [pc, #60]	; (8022cd8 <__ssvfiscanf_r+0x2ec>)
 8022c9c:	2b00      	cmp	r3, #0
 8022c9e:	f43f aecf 	beq.w	8022a40 <__ssvfiscanf_r+0x54>
 8022ca2:	466b      	mov	r3, sp
 8022ca4:	4622      	mov	r2, r4
 8022ca6:	a941      	add	r1, sp, #260	; 0x104
 8022ca8:	4630      	mov	r0, r6
 8022caa:	f3af 8000 	nop.w
 8022cae:	e7a1      	b.n	8022bf4 <__ssvfiscanf_r+0x208>
 8022cb0:	89a3      	ldrh	r3, [r4, #12]
 8022cb2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8022cb6:	bf18      	it	ne
 8022cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8022cbc:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8022cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cc4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8022cc6:	e7f9      	b.n	8022cbc <__ssvfiscanf_r+0x2d0>
 8022cc8:	08022939 	.word	0x08022939
 8022ccc:	080229b3 	.word	0x080229b3
 8022cd0:	080292dd 	.word	0x080292dd
 8022cd4:	080293ed 	.word	0x080293ed
 8022cd8:	00000000 	.word	0x00000000

08022cdc <_scanf_chars>:
 8022cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022ce0:	4615      	mov	r5, r2
 8022ce2:	688a      	ldr	r2, [r1, #8]
 8022ce4:	4680      	mov	r8, r0
 8022ce6:	460c      	mov	r4, r1
 8022ce8:	b932      	cbnz	r2, 8022cf8 <_scanf_chars+0x1c>
 8022cea:	698a      	ldr	r2, [r1, #24]
 8022cec:	2a00      	cmp	r2, #0
 8022cee:	bf0c      	ite	eq
 8022cf0:	2201      	moveq	r2, #1
 8022cf2:	f04f 32ff 	movne.w	r2, #4294967295
 8022cf6:	608a      	str	r2, [r1, #8]
 8022cf8:	6822      	ldr	r2, [r4, #0]
 8022cfa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8022d88 <_scanf_chars+0xac>
 8022cfe:	06d1      	lsls	r1, r2, #27
 8022d00:	bf5f      	itttt	pl
 8022d02:	681a      	ldrpl	r2, [r3, #0]
 8022d04:	1d11      	addpl	r1, r2, #4
 8022d06:	6019      	strpl	r1, [r3, #0]
 8022d08:	6816      	ldrpl	r6, [r2, #0]
 8022d0a:	2700      	movs	r7, #0
 8022d0c:	69a0      	ldr	r0, [r4, #24]
 8022d0e:	b188      	cbz	r0, 8022d34 <_scanf_chars+0x58>
 8022d10:	2801      	cmp	r0, #1
 8022d12:	d107      	bne.n	8022d24 <_scanf_chars+0x48>
 8022d14:	682b      	ldr	r3, [r5, #0]
 8022d16:	781a      	ldrb	r2, [r3, #0]
 8022d18:	6963      	ldr	r3, [r4, #20]
 8022d1a:	5c9b      	ldrb	r3, [r3, r2]
 8022d1c:	b953      	cbnz	r3, 8022d34 <_scanf_chars+0x58>
 8022d1e:	bb27      	cbnz	r7, 8022d6a <_scanf_chars+0x8e>
 8022d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022d24:	2802      	cmp	r0, #2
 8022d26:	d120      	bne.n	8022d6a <_scanf_chars+0x8e>
 8022d28:	682b      	ldr	r3, [r5, #0]
 8022d2a:	781b      	ldrb	r3, [r3, #0]
 8022d2c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8022d30:	071b      	lsls	r3, r3, #28
 8022d32:	d41a      	bmi.n	8022d6a <_scanf_chars+0x8e>
 8022d34:	6823      	ldr	r3, [r4, #0]
 8022d36:	06da      	lsls	r2, r3, #27
 8022d38:	bf5e      	ittt	pl
 8022d3a:	682b      	ldrpl	r3, [r5, #0]
 8022d3c:	781b      	ldrbpl	r3, [r3, #0]
 8022d3e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8022d42:	682a      	ldr	r2, [r5, #0]
 8022d44:	686b      	ldr	r3, [r5, #4]
 8022d46:	3201      	adds	r2, #1
 8022d48:	602a      	str	r2, [r5, #0]
 8022d4a:	68a2      	ldr	r2, [r4, #8]
 8022d4c:	3b01      	subs	r3, #1
 8022d4e:	3a01      	subs	r2, #1
 8022d50:	606b      	str	r3, [r5, #4]
 8022d52:	3701      	adds	r7, #1
 8022d54:	60a2      	str	r2, [r4, #8]
 8022d56:	b142      	cbz	r2, 8022d6a <_scanf_chars+0x8e>
 8022d58:	2b00      	cmp	r3, #0
 8022d5a:	dcd7      	bgt.n	8022d0c <_scanf_chars+0x30>
 8022d5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022d60:	4629      	mov	r1, r5
 8022d62:	4640      	mov	r0, r8
 8022d64:	4798      	blx	r3
 8022d66:	2800      	cmp	r0, #0
 8022d68:	d0d0      	beq.n	8022d0c <_scanf_chars+0x30>
 8022d6a:	6823      	ldr	r3, [r4, #0]
 8022d6c:	f013 0310 	ands.w	r3, r3, #16
 8022d70:	d105      	bne.n	8022d7e <_scanf_chars+0xa2>
 8022d72:	68e2      	ldr	r2, [r4, #12]
 8022d74:	3201      	adds	r2, #1
 8022d76:	60e2      	str	r2, [r4, #12]
 8022d78:	69a2      	ldr	r2, [r4, #24]
 8022d7a:	b102      	cbz	r2, 8022d7e <_scanf_chars+0xa2>
 8022d7c:	7033      	strb	r3, [r6, #0]
 8022d7e:	6923      	ldr	r3, [r4, #16]
 8022d80:	441f      	add	r7, r3
 8022d82:	6127      	str	r7, [r4, #16]
 8022d84:	2000      	movs	r0, #0
 8022d86:	e7cb      	b.n	8022d20 <_scanf_chars+0x44>
 8022d88:	080292dd 	.word	0x080292dd

08022d8c <_scanf_i>:
 8022d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d90:	4698      	mov	r8, r3
 8022d92:	4b74      	ldr	r3, [pc, #464]	; (8022f64 <_scanf_i+0x1d8>)
 8022d94:	460c      	mov	r4, r1
 8022d96:	4682      	mov	sl, r0
 8022d98:	4616      	mov	r6, r2
 8022d9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8022d9e:	b087      	sub	sp, #28
 8022da0:	ab03      	add	r3, sp, #12
 8022da2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8022da6:	4b70      	ldr	r3, [pc, #448]	; (8022f68 <_scanf_i+0x1dc>)
 8022da8:	69a1      	ldr	r1, [r4, #24]
 8022daa:	4a70      	ldr	r2, [pc, #448]	; (8022f6c <_scanf_i+0x1e0>)
 8022dac:	2903      	cmp	r1, #3
 8022dae:	bf18      	it	ne
 8022db0:	461a      	movne	r2, r3
 8022db2:	68a3      	ldr	r3, [r4, #8]
 8022db4:	9201      	str	r2, [sp, #4]
 8022db6:	1e5a      	subs	r2, r3, #1
 8022db8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8022dbc:	bf88      	it	hi
 8022dbe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8022dc2:	4627      	mov	r7, r4
 8022dc4:	bf82      	ittt	hi
 8022dc6:	eb03 0905 	addhi.w	r9, r3, r5
 8022dca:	f240 135d 	movwhi	r3, #349	; 0x15d
 8022dce:	60a3      	strhi	r3, [r4, #8]
 8022dd0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8022dd4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8022dd8:	bf98      	it	ls
 8022dda:	f04f 0900 	movls.w	r9, #0
 8022dde:	6023      	str	r3, [r4, #0]
 8022de0:	463d      	mov	r5, r7
 8022de2:	f04f 0b00 	mov.w	fp, #0
 8022de6:	6831      	ldr	r1, [r6, #0]
 8022de8:	ab03      	add	r3, sp, #12
 8022dea:	7809      	ldrb	r1, [r1, #0]
 8022dec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8022df0:	2202      	movs	r2, #2
 8022df2:	f7dd fa35 	bl	8000260 <memchr>
 8022df6:	b328      	cbz	r0, 8022e44 <_scanf_i+0xb8>
 8022df8:	f1bb 0f01 	cmp.w	fp, #1
 8022dfc:	d159      	bne.n	8022eb2 <_scanf_i+0x126>
 8022dfe:	6862      	ldr	r2, [r4, #4]
 8022e00:	b92a      	cbnz	r2, 8022e0e <_scanf_i+0x82>
 8022e02:	6822      	ldr	r2, [r4, #0]
 8022e04:	2308      	movs	r3, #8
 8022e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022e0a:	6063      	str	r3, [r4, #4]
 8022e0c:	6022      	str	r2, [r4, #0]
 8022e0e:	6822      	ldr	r2, [r4, #0]
 8022e10:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8022e14:	6022      	str	r2, [r4, #0]
 8022e16:	68a2      	ldr	r2, [r4, #8]
 8022e18:	1e51      	subs	r1, r2, #1
 8022e1a:	60a1      	str	r1, [r4, #8]
 8022e1c:	b192      	cbz	r2, 8022e44 <_scanf_i+0xb8>
 8022e1e:	6832      	ldr	r2, [r6, #0]
 8022e20:	1c51      	adds	r1, r2, #1
 8022e22:	6031      	str	r1, [r6, #0]
 8022e24:	7812      	ldrb	r2, [r2, #0]
 8022e26:	f805 2b01 	strb.w	r2, [r5], #1
 8022e2a:	6872      	ldr	r2, [r6, #4]
 8022e2c:	3a01      	subs	r2, #1
 8022e2e:	2a00      	cmp	r2, #0
 8022e30:	6072      	str	r2, [r6, #4]
 8022e32:	dc07      	bgt.n	8022e44 <_scanf_i+0xb8>
 8022e34:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8022e38:	4631      	mov	r1, r6
 8022e3a:	4650      	mov	r0, sl
 8022e3c:	4790      	blx	r2
 8022e3e:	2800      	cmp	r0, #0
 8022e40:	f040 8085 	bne.w	8022f4e <_scanf_i+0x1c2>
 8022e44:	f10b 0b01 	add.w	fp, fp, #1
 8022e48:	f1bb 0f03 	cmp.w	fp, #3
 8022e4c:	d1cb      	bne.n	8022de6 <_scanf_i+0x5a>
 8022e4e:	6863      	ldr	r3, [r4, #4]
 8022e50:	b90b      	cbnz	r3, 8022e56 <_scanf_i+0xca>
 8022e52:	230a      	movs	r3, #10
 8022e54:	6063      	str	r3, [r4, #4]
 8022e56:	6863      	ldr	r3, [r4, #4]
 8022e58:	4945      	ldr	r1, [pc, #276]	; (8022f70 <_scanf_i+0x1e4>)
 8022e5a:	6960      	ldr	r0, [r4, #20]
 8022e5c:	1ac9      	subs	r1, r1, r3
 8022e5e:	f000 f889 	bl	8022f74 <__sccl>
 8022e62:	f04f 0b00 	mov.w	fp, #0
 8022e66:	68a3      	ldr	r3, [r4, #8]
 8022e68:	6822      	ldr	r2, [r4, #0]
 8022e6a:	2b00      	cmp	r3, #0
 8022e6c:	d03d      	beq.n	8022eea <_scanf_i+0x15e>
 8022e6e:	6831      	ldr	r1, [r6, #0]
 8022e70:	6960      	ldr	r0, [r4, #20]
 8022e72:	f891 c000 	ldrb.w	ip, [r1]
 8022e76:	f810 000c 	ldrb.w	r0, [r0, ip]
 8022e7a:	2800      	cmp	r0, #0
 8022e7c:	d035      	beq.n	8022eea <_scanf_i+0x15e>
 8022e7e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8022e82:	d124      	bne.n	8022ece <_scanf_i+0x142>
 8022e84:	0510      	lsls	r0, r2, #20
 8022e86:	d522      	bpl.n	8022ece <_scanf_i+0x142>
 8022e88:	f10b 0b01 	add.w	fp, fp, #1
 8022e8c:	f1b9 0f00 	cmp.w	r9, #0
 8022e90:	d003      	beq.n	8022e9a <_scanf_i+0x10e>
 8022e92:	3301      	adds	r3, #1
 8022e94:	f109 39ff 	add.w	r9, r9, #4294967295
 8022e98:	60a3      	str	r3, [r4, #8]
 8022e9a:	6873      	ldr	r3, [r6, #4]
 8022e9c:	3b01      	subs	r3, #1
 8022e9e:	2b00      	cmp	r3, #0
 8022ea0:	6073      	str	r3, [r6, #4]
 8022ea2:	dd1b      	ble.n	8022edc <_scanf_i+0x150>
 8022ea4:	6833      	ldr	r3, [r6, #0]
 8022ea6:	3301      	adds	r3, #1
 8022ea8:	6033      	str	r3, [r6, #0]
 8022eaa:	68a3      	ldr	r3, [r4, #8]
 8022eac:	3b01      	subs	r3, #1
 8022eae:	60a3      	str	r3, [r4, #8]
 8022eb0:	e7d9      	b.n	8022e66 <_scanf_i+0xda>
 8022eb2:	f1bb 0f02 	cmp.w	fp, #2
 8022eb6:	d1ae      	bne.n	8022e16 <_scanf_i+0x8a>
 8022eb8:	6822      	ldr	r2, [r4, #0]
 8022eba:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8022ebe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8022ec2:	d1bf      	bne.n	8022e44 <_scanf_i+0xb8>
 8022ec4:	2310      	movs	r3, #16
 8022ec6:	6063      	str	r3, [r4, #4]
 8022ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022ecc:	e7a2      	b.n	8022e14 <_scanf_i+0x88>
 8022ece:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8022ed2:	6022      	str	r2, [r4, #0]
 8022ed4:	780b      	ldrb	r3, [r1, #0]
 8022ed6:	f805 3b01 	strb.w	r3, [r5], #1
 8022eda:	e7de      	b.n	8022e9a <_scanf_i+0x10e>
 8022edc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022ee0:	4631      	mov	r1, r6
 8022ee2:	4650      	mov	r0, sl
 8022ee4:	4798      	blx	r3
 8022ee6:	2800      	cmp	r0, #0
 8022ee8:	d0df      	beq.n	8022eaa <_scanf_i+0x11e>
 8022eea:	6823      	ldr	r3, [r4, #0]
 8022eec:	05d9      	lsls	r1, r3, #23
 8022eee:	d50d      	bpl.n	8022f0c <_scanf_i+0x180>
 8022ef0:	42bd      	cmp	r5, r7
 8022ef2:	d909      	bls.n	8022f08 <_scanf_i+0x17c>
 8022ef4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8022ef8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8022efc:	4632      	mov	r2, r6
 8022efe:	4650      	mov	r0, sl
 8022f00:	4798      	blx	r3
 8022f02:	f105 39ff 	add.w	r9, r5, #4294967295
 8022f06:	464d      	mov	r5, r9
 8022f08:	42bd      	cmp	r5, r7
 8022f0a:	d028      	beq.n	8022f5e <_scanf_i+0x1d2>
 8022f0c:	6822      	ldr	r2, [r4, #0]
 8022f0e:	f012 0210 	ands.w	r2, r2, #16
 8022f12:	d113      	bne.n	8022f3c <_scanf_i+0x1b0>
 8022f14:	702a      	strb	r2, [r5, #0]
 8022f16:	6863      	ldr	r3, [r4, #4]
 8022f18:	9e01      	ldr	r6, [sp, #4]
 8022f1a:	4639      	mov	r1, r7
 8022f1c:	4650      	mov	r0, sl
 8022f1e:	47b0      	blx	r6
 8022f20:	f8d8 3000 	ldr.w	r3, [r8]
 8022f24:	6821      	ldr	r1, [r4, #0]
 8022f26:	1d1a      	adds	r2, r3, #4
 8022f28:	f8c8 2000 	str.w	r2, [r8]
 8022f2c:	f011 0f20 	tst.w	r1, #32
 8022f30:	681b      	ldr	r3, [r3, #0]
 8022f32:	d00f      	beq.n	8022f54 <_scanf_i+0x1c8>
 8022f34:	6018      	str	r0, [r3, #0]
 8022f36:	68e3      	ldr	r3, [r4, #12]
 8022f38:	3301      	adds	r3, #1
 8022f3a:	60e3      	str	r3, [r4, #12]
 8022f3c:	1bed      	subs	r5, r5, r7
 8022f3e:	44ab      	add	fp, r5
 8022f40:	6925      	ldr	r5, [r4, #16]
 8022f42:	445d      	add	r5, fp
 8022f44:	6125      	str	r5, [r4, #16]
 8022f46:	2000      	movs	r0, #0
 8022f48:	b007      	add	sp, #28
 8022f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f4e:	f04f 0b00 	mov.w	fp, #0
 8022f52:	e7ca      	b.n	8022eea <_scanf_i+0x15e>
 8022f54:	07ca      	lsls	r2, r1, #31
 8022f56:	bf4c      	ite	mi
 8022f58:	8018      	strhmi	r0, [r3, #0]
 8022f5a:	6018      	strpl	r0, [r3, #0]
 8022f5c:	e7eb      	b.n	8022f36 <_scanf_i+0x1aa>
 8022f5e:	2001      	movs	r0, #1
 8022f60:	e7f2      	b.n	8022f48 <_scanf_i+0x1bc>
 8022f62:	bf00      	nop
 8022f64:	0802643c 	.word	0x0802643c
 8022f68:	0802134d 	.word	0x0802134d
 8022f6c:	0802123d 	.word	0x0802123d
 8022f70:	08029433 	.word	0x08029433

08022f74 <__sccl>:
 8022f74:	b570      	push	{r4, r5, r6, lr}
 8022f76:	780b      	ldrb	r3, [r1, #0]
 8022f78:	4604      	mov	r4, r0
 8022f7a:	2b5e      	cmp	r3, #94	; 0x5e
 8022f7c:	bf0b      	itete	eq
 8022f7e:	784b      	ldrbeq	r3, [r1, #1]
 8022f80:	1c48      	addne	r0, r1, #1
 8022f82:	1c88      	addeq	r0, r1, #2
 8022f84:	2200      	movne	r2, #0
 8022f86:	bf08      	it	eq
 8022f88:	2201      	moveq	r2, #1
 8022f8a:	1e61      	subs	r1, r4, #1
 8022f8c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8022f90:	f801 2f01 	strb.w	r2, [r1, #1]!
 8022f94:	42a9      	cmp	r1, r5
 8022f96:	d1fb      	bne.n	8022f90 <__sccl+0x1c>
 8022f98:	b90b      	cbnz	r3, 8022f9e <__sccl+0x2a>
 8022f9a:	3801      	subs	r0, #1
 8022f9c:	bd70      	pop	{r4, r5, r6, pc}
 8022f9e:	f082 0101 	eor.w	r1, r2, #1
 8022fa2:	54e1      	strb	r1, [r4, r3]
 8022fa4:	1c42      	adds	r2, r0, #1
 8022fa6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8022faa:	2d2d      	cmp	r5, #45	; 0x2d
 8022fac:	f102 36ff 	add.w	r6, r2, #4294967295
 8022fb0:	4610      	mov	r0, r2
 8022fb2:	d006      	beq.n	8022fc2 <__sccl+0x4e>
 8022fb4:	2d5d      	cmp	r5, #93	; 0x5d
 8022fb6:	d0f1      	beq.n	8022f9c <__sccl+0x28>
 8022fb8:	b90d      	cbnz	r5, 8022fbe <__sccl+0x4a>
 8022fba:	4630      	mov	r0, r6
 8022fbc:	e7ee      	b.n	8022f9c <__sccl+0x28>
 8022fbe:	462b      	mov	r3, r5
 8022fc0:	e7ef      	b.n	8022fa2 <__sccl+0x2e>
 8022fc2:	7816      	ldrb	r6, [r2, #0]
 8022fc4:	2e5d      	cmp	r6, #93	; 0x5d
 8022fc6:	d0fa      	beq.n	8022fbe <__sccl+0x4a>
 8022fc8:	42b3      	cmp	r3, r6
 8022fca:	dcf8      	bgt.n	8022fbe <__sccl+0x4a>
 8022fcc:	4618      	mov	r0, r3
 8022fce:	3001      	adds	r0, #1
 8022fd0:	4286      	cmp	r6, r0
 8022fd2:	5421      	strb	r1, [r4, r0]
 8022fd4:	dcfb      	bgt.n	8022fce <__sccl+0x5a>
 8022fd6:	43d8      	mvns	r0, r3
 8022fd8:	4430      	add	r0, r6
 8022fda:	1c5d      	adds	r5, r3, #1
 8022fdc:	42b3      	cmp	r3, r6
 8022fde:	bfa8      	it	ge
 8022fe0:	2000      	movge	r0, #0
 8022fe2:	182b      	adds	r3, r5, r0
 8022fe4:	3202      	adds	r2, #2
 8022fe6:	e7de      	b.n	8022fa6 <__sccl+0x32>

08022fe8 <__submore>:
 8022fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022fec:	460c      	mov	r4, r1
 8022fee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8022ff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022ff4:	4299      	cmp	r1, r3
 8022ff6:	d11d      	bne.n	8023034 <__submore+0x4c>
 8022ff8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022ffc:	f7fd f974 	bl	80202e8 <_malloc_r>
 8023000:	b918      	cbnz	r0, 802300a <__submore+0x22>
 8023002:	f04f 30ff 	mov.w	r0, #4294967295
 8023006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802300a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802300e:	63a3      	str	r3, [r4, #56]	; 0x38
 8023010:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8023014:	6360      	str	r0, [r4, #52]	; 0x34
 8023016:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802301a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802301e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8023022:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8023026:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802302a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802302e:	6020      	str	r0, [r4, #0]
 8023030:	2000      	movs	r0, #0
 8023032:	e7e8      	b.n	8023006 <__submore+0x1e>
 8023034:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8023036:	0077      	lsls	r7, r6, #1
 8023038:	463a      	mov	r2, r7
 802303a:	f7fe fefd 	bl	8021e38 <_realloc_r>
 802303e:	4605      	mov	r5, r0
 8023040:	2800      	cmp	r0, #0
 8023042:	d0de      	beq.n	8023002 <__submore+0x1a>
 8023044:	eb00 0806 	add.w	r8, r0, r6
 8023048:	4601      	mov	r1, r0
 802304a:	4632      	mov	r2, r6
 802304c:	4640      	mov	r0, r8
 802304e:	f7fd f8d5 	bl	80201fc <memcpy>
 8023052:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8023056:	f8c4 8000 	str.w	r8, [r4]
 802305a:	e7e9      	b.n	8023030 <__submore+0x48>

0802305c <_init>:
 802305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802305e:	bf00      	nop
 8023060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023062:	bc08      	pop	{r3}
 8023064:	469e      	mov	lr, r3
 8023066:	4770      	bx	lr

08023068 <_fini>:
 8023068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802306a:	bf00      	nop
 802306c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802306e:	bc08      	pop	{r3}
 8023070:	469e      	mov	lr, r3
 8023072:	4770      	bx	lr
 8023074:	0000      	movs	r0, r0
	...

08023078 <__time_veneer>:
 8023078:	e51ff004 	ldr	pc, [pc, #-4]	; 802307c <__time_veneer+0x4>
 802307c:	200005bc 	.word	0x200005bc
