
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015aa8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003984  08015c88  08015c88  00025c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801960c  0801960c  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  0801960c  0801960c  0002960c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019614  08019614  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08019614  08019614  00029614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08019620  08019620  00029620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  0801962c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000954  20000334  08019960  00030334  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c88  08019960  00030c88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a3f5  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009229  00000000  00000000  0007a759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d18  00000000  00000000  00083988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b68  00000000  00000000  000866a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c740  00000000  00000000  00089208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002157d  00000000  00000000  000b5948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101d25  00000000  00000000  000d6ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d8bea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000de4c  00000000  00000000  001d8c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001e6a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001e6ab0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000334 	.word	0x20000334
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015c70 	.word	0x08015c70

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000338 	.word	0x20000338
 800021c:	08015c70 	.word	0x08015c70

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200003e8 	.word	0x200003e8

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f011 fa76 	bl	801225c <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f011 f9ce 	bl	801225c <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000354 	.word	0x20000354
 8000ef4:	20000c88 	.word	0x20000c88

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f011 fda5 	bl	8012a98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f002 fdc1 	bl	8003ad4 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8000f60:	0801962c 	.word	0x0801962c
  ldr r2, =_sbss
 8000f64:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8000f68:	20000c88 	.word	0x20000c88

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000c74 	.word	0x20000c74
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000c74 	.word	0x20000c74

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	08017f28 	.word	0x08017f28
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08017f38 	.word	0x08017f38

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	08017f38 	.word	0x08017f38

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	08017f40 	.word	0x08017f40
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	08017f58 	.word	0x08017f58
 8003904:	08017f60 	.word	0x08017f60

08003908 <ringBuffer_init>:
#include "ring_buffer.h"
#include <stdlib.h>
#include <string.h>

RingBuffer* ringBuffer_init(uint32_t size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003910:	2010      	movs	r0, #16
 8003912:	f00f fa63 	bl	8012ddc <malloc>
 8003916:	4603      	mov	r3, r0
 8003918:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003920:	2300      	movs	r3, #0
 8003922:	e017      	b.n	8003954 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003936:	2101      	movs	r1, #1
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f00e fc87 	bl	801224c <calloc>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 800394e:	2300      	movs	r3, #0
 8003950:	e000      	b.n	8003954 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003952:	68fb      	ldr	r3, [r7, #12]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <ringBuffer_deInit>:

void ringBuffer_deInit(RingBuffer* buffer)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d004      	beq.n	800397c <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	4618      	mov	r0, r3
 8003978:	f00f fa38 	bl	8012dec <free>
		}
		free(buffer);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f00f fa35 	bl	8012dec <free>
	}
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <ringBuffer_push>:

void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	460b      	mov	r3, r1
 8003994:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	3b01      	subs	r3, #1
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d00c      	beq.n	80039be <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4413      	add	r3, r2
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 80039bc:	e009      	b.n	80039d2 <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4413      	add	r3, r2
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <ringBuffer_pop>:

uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 80039de:	b480      	push	{r7}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d00d      	beq.n	8003a10 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4413      	add	r3, r2
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	605a      	str	r2, [r3, #4]
		return data;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	e00a      	b.n	8003a26 <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	605a      	str	r2, [r3, #4]
		return data;
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <ringBuffer_flush>:

void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68d8      	ldr	r0, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	461a      	mov	r2, r3
 8003a44:	2100      	movs	r1, #0
 8003a46:	f00f f9e7 	bl	8012e18 <memset>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <ringBuffer_pushArray>:

void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	e00a      	b.n	8003a78 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	4413      	add	r3, r2
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff ff8c 	bl	800398a <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3301      	adds	r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	6838      	ldr	r0, [r7, #0]
 8003a7a:	f7fc fbdf 	bl	800023c <strlen>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d8ed      	bhi.n	8003a62 <ringBuffer_pushArray+0x10>
}
 8003a86:	bf00      	nop
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <ringBuffer_lookFor>:

uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	6839      	ldr	r1, [r7, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f010 f90f 	bl	8013cc4 <strstr>
 8003aa6:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <ringBuffer_lookFor+0x22>
		return 1;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <ringBuffer_lookFor+0x24>
	else
		return 0;
 8003ab2:	2300      	movs	r3, #0

}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <ringBuffer_capacity>:

uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ada:	f7fd fa48 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ade:	f000 f81d 	bl	8003b1c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ae2:	f000 f951 	bl	8003d88 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003ae6:	f000 f891 	bl	8003c0c <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003aea:	f000 f8ed 	bl	8003cc8 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003aee:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <main+0x44>)
 8003af0:	463b      	mov	r3, r7
 8003af2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003af6:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8003afa:	463b      	mov	r3, r7
 8003afc:	4619      	mov	r1, r3
 8003afe:	2002      	movs	r0, #2
 8003b00:	f001 fb1c 	bl	800513c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003b04:	2120      	movs	r1, #32
 8003b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b0a:	f7fd fe2d 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003b0e:	2064      	movs	r0, #100	; 0x64
 8003b10:	f7fd fa9e 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003b14:	e7f6      	b.n	8003b04 <main+0x30>
 8003b16:	bf00      	nop
 8003b18:	08015c90 	.word	0x08015c90

08003b1c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b0a8      	sub	sp, #160	; 0xa0
 8003b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003b26:	2238      	movs	r2, #56	; 0x38
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f00f f974 	bl	8012e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b40:	463b      	mov	r3, r7
 8003b42:	2254      	movs	r2, #84	; 0x54
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f00f f966 	bl	8012e18 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	f7fd fe49 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b52:	2302      	movs	r3, #2
 8003b54:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b5a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b5c:	2340      	movs	r3, #64	; 0x40
 8003b5e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b60:	2302      	movs	r3, #2
 8003b62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b66:	2302      	movs	r3, #2
 8003b68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003b72:	2355      	movs	r3, #85	; 0x55
 8003b74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003b84:	2302      	movs	r3, #2
 8003b86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b8a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd fedc 	bl	800194c <HAL_RCC_OscConfig>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bf14      	ite	ne
 8003b9a:	2301      	movne	r3, #1
 8003b9c:	2300      	moveq	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003ba4:	f000 f960 	bl	8003e68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ba8:	230f      	movs	r3, #15
 8003baa:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bac:	2303      	movs	r3, #3
 8003bae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003bbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bc0:	2104      	movs	r1, #4
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe f9da 	bl	8001f7c <HAL_RCC_ClockConfig>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bf14      	ite	ne
 8003bce:	2301      	movne	r3, #1
 8003bd0:	2300      	moveq	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003bd8:	f000 f946 	bl	8003e68 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003bdc:	2321      	movs	r3, #33	; 0x21
 8003bde:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003be0:	2300      	movs	r3, #0
 8003be2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003be8:	463b      	mov	r3, r7
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe fbe2 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bf14      	ite	ne
 8003bf6:	2301      	movne	r3, #1
 8003bf8:	2300      	moveq	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003c00:	f000 f932 	bl	8003e68 <Error_Handler>
  }
}
 8003c04:	bf00      	nop
 8003c06:	37a0      	adds	r7, #160	; 0xa0
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003c10:	4b2b      	ldr	r3, [pc, #172]	; (8003cc0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c12:	4a2c      	ldr	r2, [pc, #176]	; (8003cc4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8003c14:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003c16:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c1c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c1e:	4b28      	ldr	r3, [pc, #160]	; (8003cc0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003c24:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003c2a:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003c30:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c32:	220c      	movs	r2, #12
 8003c34:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c36:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c3c:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c42:	4b1f      	ldr	r3, [pc, #124]	; (8003cc0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c48:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003c4e:	481c      	ldr	r0, [pc, #112]	; (8003cc0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c50:	f7fe fdfc 	bl	800284c <HAL_UART_Init>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bf14      	ite	ne
 8003c5a:	2301      	movne	r3, #1
 8003c5c:	2300      	moveq	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003c64:	f000 f900 	bl	8003e68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4815      	ldr	r0, [pc, #84]	; (8003cc0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c6c:	f7ff fd82 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003c80:	f000 f8f2 	bl	8003e68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c84:	2100      	movs	r1, #0
 8003c86:	480e      	ldr	r0, [pc, #56]	; (8003cc0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c88:	f7ff fdb2 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bf14      	ite	ne
 8003c92:	2301      	movne	r3, #1
 8003c94:	2300      	moveq	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003c9c:	f000 f8e4 	bl	8003e68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003ca0:	4807      	ldr	r0, [pc, #28]	; (8003cc0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ca2:	f7ff fd2e 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf14      	ite	ne
 8003cac:	2301      	movne	r3, #1
 8003cae:	2300      	moveq	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003cb6:	f000 f8d7 	bl	8003e68 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20000358 	.word	0x20000358
 8003cc4:	40008000 	.word	0x40008000

08003cc8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ccc:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cce:	4a2d      	ldr	r2, [pc, #180]	; (8003d84 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003cd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003cd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003cda:	4b29      	ldr	r3, [pc, #164]	; (8003d80 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ce0:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ce6:	4b26      	ldr	r3, [pc, #152]	; (8003d80 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003cec:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cee:	220c      	movs	r2, #12
 8003cf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cf2:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cf8:	4b21      	ldr	r3, [pc, #132]	; (8003d80 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cfe:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d04:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d10:	481b      	ldr	r0, [pc, #108]	; (8003d80 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d12:	f7fe fd9b 	bl	800284c <HAL_UART_Init>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf14      	ite	ne
 8003d1c:	2301      	movne	r3, #1
 8003d1e:	2300      	moveq	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003d26:	f000 f89f 	bl	8003e68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4814      	ldr	r0, [pc, #80]	; (8003d80 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d2e:	f7ff fd21 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf14      	ite	ne
 8003d38:	2301      	movne	r3, #1
 8003d3a:	2300      	moveq	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003d42:	f000 f891 	bl	8003e68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d46:	2100      	movs	r1, #0
 8003d48:	480d      	ldr	r0, [pc, #52]	; (8003d80 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d4a:	f7ff fd51 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf14      	ite	ne
 8003d54:	2301      	movne	r3, #1
 8003d56:	2300      	moveq	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003d5e:	f000 f883 	bl	8003e68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003d62:	4807      	ldr	r0, [pc, #28]	; (8003d80 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d64:	f7ff fccd 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bf14      	ite	ne
 8003d6e:	2301      	movne	r3, #1
 8003d70:	2300      	moveq	r3, #0
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003d78:	f000 f876 	bl	8003e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d7c:	bf00      	nop
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	200003e8 	.word	0x200003e8
 8003d84:	40013800 	.word	0x40013800

08003d88 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	; 0x28
 8003d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d8e:	f107 0314 	add.w	r3, r7, #20
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	605a      	str	r2, [r3, #4]
 8003d98:	609a      	str	r2, [r3, #8]
 8003d9a:	60da      	str	r2, [r3, #12]
 8003d9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d9e:	4b2f      	ldr	r3, [pc, #188]	; (8003e5c <_ZL12MX_GPIO_Initv+0xd4>)
 8003da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da2:	4a2e      	ldr	r2, [pc, #184]	; (8003e5c <_ZL12MX_GPIO_Initv+0xd4>)
 8003da4:	f043 0304 	orr.w	r3, r3, #4
 8003da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003daa:	4b2c      	ldr	r3, [pc, #176]	; (8003e5c <_ZL12MX_GPIO_Initv+0xd4>)
 8003dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003db6:	4b29      	ldr	r3, [pc, #164]	; (8003e5c <_ZL12MX_GPIO_Initv+0xd4>)
 8003db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dba:	4a28      	ldr	r2, [pc, #160]	; (8003e5c <_ZL12MX_GPIO_Initv+0xd4>)
 8003dbc:	f043 0320 	orr.w	r3, r3, #32
 8003dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dc2:	4b26      	ldr	r3, [pc, #152]	; (8003e5c <_ZL12MX_GPIO_Initv+0xd4>)
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dce:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <_ZL12MX_GPIO_Initv+0xd4>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	4a22      	ldr	r2, [pc, #136]	; (8003e5c <_ZL12MX_GPIO_Initv+0xd4>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dda:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <_ZL12MX_GPIO_Initv+0xd4>)
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de6:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <_ZL12MX_GPIO_Initv+0xd4>)
 8003de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dea:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <_ZL12MX_GPIO_Initv+0xd4>)
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003df2:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <_ZL12MX_GPIO_Initv+0xd4>)
 8003df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2120      	movs	r1, #32
 8003e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e06:	f7fd fc97 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e10:	4b13      	ldr	r3, [pc, #76]	; (8003e60 <_ZL12MX_GPIO_Initv+0xd8>)
 8003e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003e18:	f107 0314 	add.w	r3, r7, #20
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4811      	ldr	r0, [pc, #68]	; (8003e64 <_ZL12MX_GPIO_Initv+0xdc>)
 8003e20:	f7fd fb08 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003e24:	2320      	movs	r3, #32
 8003e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e30:	2300      	movs	r3, #0
 8003e32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	4619      	mov	r1, r3
 8003e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e3e:	f7fd faf9 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003e42:	2200      	movs	r2, #0
 8003e44:	2100      	movs	r1, #0
 8003e46:	2028      	movs	r0, #40	; 0x28
 8003e48:	f7fd f9ff 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e4c:	2028      	movs	r0, #40	; 0x28
 8003e4e:	f7fd fa16 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 8003e52:	bf00      	nop
 8003e54:	3728      	adds	r7, #40	; 0x28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	10110000 	.word	0x10110000
 8003e64:	48000800 	.word	0x48000800

08003e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e6c:	b672      	cpsid	i
}
 8003e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e70:	e7fe      	b.n	8003e70 <Error_Handler+0x8>

08003e72 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8003e7a:	2032      	movs	r0, #50	; 0x32
 8003e7c:	f7ff fd44 	bl	8003908 <ringBuffer_init>
 8003e80:	4602      	mov	r2, r0
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	605a      	str	r2, [r3, #4]

	}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fd5e 	bl	800395c <ringBuffer_deInit>
	}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f00a ffe6 	bl	800ee84 <_ZN5UtestC1Ev>
 8003eb8:	4a03      	ldr	r2, [pc, #12]	; (8003ec8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	0801869c 	.word	0x0801869c

08003ecc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	4a05      	ldr	r2, [pc, #20]	; (8003eec <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f00a ffe1 	bl	800eea4 <_ZN5UtestD1Ev>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	0801869c 	.word	0x0801869c

08003ef0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff ffe7 	bl	8003ecc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8003efe:	2108      	movs	r1, #8
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f002 fdfd 	bl	8006b00 <_ZdlPvj>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff ffbe 	bl	8003ea8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8003f2c:	4a03      	ldr	r2, [pc, #12]	; (8003f3c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	0801867c 	.word	0x0801867c

08003f40 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 8003f40:	b590      	push	{r4, r7, lr}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	2222      	movs	r2, #34	; 0x22
 8003f4a:	4906      	ldr	r1, [pc, #24]	; (8003f64 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8003f4c:	2008      	movs	r0, #8
 8003f4e:	f002 fdc3 	bl	8006ad8 <_ZnwjPKci>
 8003f52:	4604      	mov	r4, r0
 8003f54:	4620      	mov	r0, r4
 8003f56:	f7ff ffdb 	bl	8003f10 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd90      	pop	{r4, r7, pc}
 8003f64:	08015c98 	.word	0x08015c98

08003f68 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f009 fbb6 	bl	800d6e4 <_ZN10UtestShellC1Ev>
 8003f78:	4a03      	ldr	r2, [pc, #12]	; (8003f88 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	080185d0 	.word	0x080185d0

08003f8c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8003f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af04      	add	r7, sp, #16
 8003f92:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8003f94:	f00a ff4c 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 8003f98:	4604      	mov	r4, r0
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	3338      	adds	r3, #56	; 0x38
 8003f9e:	681d      	ldr	r5, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	461e      	mov	r6, r3
 8003fa8:	f00a ff52 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003fac:	4603      	mov	r3, r0
 8003fae:	9302      	str	r3, [sp, #8]
 8003fb0:	2325      	movs	r3, #37	; 0x25
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	4b2a      	ldr	r3, [pc, #168]	; (8004064 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8003fba:	4632      	mov	r2, r6
 8003fbc:	2132      	movs	r1, #50	; 0x32
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 8003fc2:	f00a ff35 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	3320      	adds	r3, #32
 8003fcc:	681d      	ldr	r5, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf14      	ite	ne
 8003fd8:	2301      	movne	r3, #1
 8003fda:	2300      	moveq	r3, #0
 8003fdc:	b2de      	uxtb	r6, r3
 8003fde:	f00a ff37 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	9303      	str	r3, [sp, #12]
 8003fe6:	2326      	movs	r3, #38	; 0x26
 8003fe8:	9302      	str	r3, [sp, #8]
 8003fea:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003fec:	9301      	str	r3, [sp, #4]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8003ff4:	4a1d      	ldr	r2, [pc, #116]	; (800406c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 8003ff6:	4631      	mov	r1, r6
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8003ffc:	f00a ff18 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 8004000:	4604      	mov	r4, r0
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	3338      	adds	r3, #56	; 0x38
 8004006:	681d      	ldr	r5, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461e      	mov	r6, r3
 8004010:	f00a ff1e 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004014:	4603      	mov	r3, r0
 8004016:	9302      	str	r3, [sp, #8]
 8004018:	2327      	movs	r3, #39	; 0x27
 800401a:	9301      	str	r3, [sp, #4]
 800401c:	4b10      	ldr	r3, [pc, #64]	; (8004060 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	4b13      	ldr	r3, [pc, #76]	; (8004070 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 8004022:	4632      	mov	r2, r6
 8004024:	2100      	movs	r1, #0
 8004026:	4620      	mov	r0, r4
 8004028:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 800402a:	f00a ff01 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 800402e:	4604      	mov	r4, r0
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	3338      	adds	r3, #56	; 0x38
 8004034:	681d      	ldr	r5, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	461e      	mov	r6, r3
 800403e:	f00a ff07 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004042:	4603      	mov	r3, r0
 8004044:	9302      	str	r3, [sp, #8]
 8004046:	2328      	movs	r3, #40	; 0x28
 8004048:	9301      	str	r3, [sp, #4]
 800404a:	4b05      	ldr	r3, [pc, #20]	; (8004060 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 8004050:	4632      	mov	r2, r6
 8004052:	2100      	movs	r1, #0
 8004054:	4620      	mov	r0, r4
 8004056:	47a8      	blx	r5

}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004060:	08015c98 	.word	0x08015c98
 8004064:	08015cac 	.word	0x08015cac
 8004068:	08015cd4 	.word	0x08015cd4
 800406c:	08015cec 	.word	0x08015cec
 8004070:	08015cf4 	.word	0x08015cf4
 8004074:	08015d1c 	.word	0x08015d1c

08004078 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	605a      	str	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ff0a 	bl	8003ea8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004094:	4a03      	ldr	r2, [pc, #12]	; (80040a4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	080185b0 	.word	0x080185b0

080040a8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 80040a8:	b590      	push	{r4, r7, lr}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	222c      	movs	r2, #44	; 0x2c
 80040b2:	4906      	ldr	r1, [pc, #24]	; (80040cc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 80040b4:	2008      	movs	r0, #8
 80040b6:	f002 fd0f 	bl	8006ad8 <_ZnwjPKci>
 80040ba:	4604      	mov	r4, r0
 80040bc:	4620      	mov	r0, r4
 80040be:	f7ff ffdb 	bl	8004078 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 80040c2:	4623      	mov	r3, r4
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd90      	pop	{r4, r7, pc}
 80040cc:	08015c98 	.word	0x08015c98

080040d0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4618      	mov	r0, r3
 80040dc:	f009 fb02 	bl	800d6e4 <_ZN10UtestShellC1Ev>
 80040e0:	4a03      	ldr	r2, [pc, #12]	; (80040f0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	08018504 	.word	0x08018504

080040f4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 80040f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af04      	add	r7, sp, #16
 80040fa:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2145      	movs	r1, #69	; 0x45
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fc41 	bl	800398a <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8004108:	f00a fe92 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 800410c:	4604      	mov	r4, r0
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	3338      	adds	r3, #56	; 0x38
 8004112:	681d      	ldr	r5, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	461e      	mov	r6, r3
 800411e:	f00a fe97 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004122:	4603      	mov	r3, r0
 8004124:	9302      	str	r3, [sp, #8]
 8004126:	232f      	movs	r3, #47	; 0x2f
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	4b15      	ldr	r3, [pc, #84]	; (8004180 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	4b15      	ldr	r3, [pc, #84]	; (8004184 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 8004130:	4632      	mov	r2, r6
 8004132:	2145      	movs	r1, #69	; 0x45
 8004134:	4620      	mov	r0, r4
 8004136:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2110      	movs	r1, #16
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fc23 	bl	800398a <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8004144:	f00a fe74 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 8004148:	4604      	mov	r4, r0
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	3338      	adds	r3, #56	; 0x38
 800414e:	681d      	ldr	r5, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	3301      	adds	r3, #1
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	461e      	mov	r6, r3
 800415c:	f00a fe78 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004160:	4603      	mov	r3, r0
 8004162:	9302      	str	r3, [sp, #8]
 8004164:	2332      	movs	r3, #50	; 0x32
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	4b05      	ldr	r3, [pc, #20]	; (8004180 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 800416e:	4632      	mov	r2, r6
 8004170:	2110      	movs	r1, #16
 8004172:	4620      	mov	r0, r4
 8004174:	47a8      	blx	r5

}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800417e:	bf00      	nop
 8004180:	08015c98 	.word	0x08015c98
 8004184:	08015d44 	.word	0x08015d44
 8004188:	08015d74 	.word	0x08015d74

0800418c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fe80 	bl	8003ea8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80041a8:	4a03      	ldr	r2, [pc, #12]	; (80041b8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	080184e4 	.word	0x080184e4

080041bc <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	2236      	movs	r2, #54	; 0x36
 80041c6:	4906      	ldr	r1, [pc, #24]	; (80041e0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 80041c8:	2008      	movs	r0, #8
 80041ca:	f002 fc85 	bl	8006ad8 <_ZnwjPKci>
 80041ce:	4604      	mov	r4, r0
 80041d0:	4620      	mov	r0, r4
 80041d2:	f7ff ffdb 	bl	800418c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 80041d6:	4623      	mov	r3, r4
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd90      	pop	{r4, r7, pc}
 80041e0:	08015c98 	.word	0x08015c98

080041e4 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f009 fa78 	bl	800d6e4 <_ZN10UtestShellC1Ev>
 80041f4:	4a03      	ldr	r2, [pc, #12]	; (8004204 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	08018438 	.word	0x08018438

08004208 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 8004208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800420a:	b089      	sub	sp, #36	; 0x24
 800420c:	af04      	add	r7, sp, #16
 800420e:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	3b01      	subs	r3, #1
 8004226:	429a      	cmp	r2, r3
 8004228:	bf0c      	ite	eq
 800422a:	2301      	moveq	r3, #1
 800422c:	2300      	movne	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4293      	cmp	r3, r2
 8004236:	da0b      	bge.n	8004250 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	4611      	mov	r1, r2
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fba1 	bl	800398a <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3301      	adds	r3, #1
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	e7e3      	b.n	8004218 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	21ff      	movs	r1, #255	; 0xff
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fb97 	bl	800398a <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 800425c:	f00a fde8 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 8004260:	4604      	mov	r4, r0
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	3338      	adds	r3, #56	; 0x38
 8004266:	681d      	ldr	r5, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	461e      	mov	r6, r3
 8004272:	f00a fded 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004276:	4603      	mov	r3, r0
 8004278:	9302      	str	r3, [sp, #8]
 800427a:	233e      	movs	r3, #62	; 0x3e
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	4b05      	ldr	r3, [pc, #20]	; (8004298 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 8004284:	4632      	mov	r2, r6
 8004286:	21ff      	movs	r1, #255	; 0xff
 8004288:	4620      	mov	r0, r4
 800428a:	47a8      	blx	r5
}
 800428c:	bf00      	nop
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004294:	08015c98 	.word	0x08015c98
 8004298:	08015da4 	.word	0x08015da4

0800429c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	605a      	str	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fdf8 	bl	8003ea8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80042b8:	4a03      	ldr	r2, [pc, #12]	; (80042c8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	08018418 	.word	0x08018418

080042cc <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 80042cc:	b590      	push	{r4, r7, lr}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	2241      	movs	r2, #65	; 0x41
 80042d6:	4906      	ldr	r1, [pc, #24]	; (80042f0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 80042d8:	2008      	movs	r0, #8
 80042da:	f002 fbfd 	bl	8006ad8 <_ZnwjPKci>
 80042de:	4604      	mov	r4, r0
 80042e0:	4620      	mov	r0, r4
 80042e2:	f7ff ffdb 	bl	800429c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 80042e6:	4623      	mov	r3, r4
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd90      	pop	{r4, r7, pc}
 80042f0:	08015c98 	.word	0x08015c98

080042f4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4618      	mov	r0, r3
 8004300:	f009 f9f0 	bl	800d6e4 <_ZN10UtestShellC1Ev>
 8004304:	4a03      	ldr	r2, [pc, #12]	; (8004314 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	0801836c 	.word	0x0801836c

08004318 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 8004318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800431a:	b089      	sub	sp, #36	; 0x24
 800431c:	af04      	add	r7, sp, #16
 800431e:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	21ff      	movs	r1, #255	; 0xff
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff fb2f 	bl	800398a <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fb54 	bl	80039de <ringBuffer_pop>
 8004336:	4603      	mov	r3, r0
 8004338:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 800433a:	f00a fd79 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 800433e:	4604      	mov	r4, r0
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	3338      	adds	r3, #56	; 0x38
 8004344:	681d      	ldr	r5, [r3, #0]
 8004346:	7bfe      	ldrb	r6, [r7, #15]
 8004348:	f00a fd82 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800434c:	4603      	mov	r3, r0
 800434e:	9302      	str	r3, [sp, #8]
 8004350:	2346      	movs	r3, #70	; 0x46
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 800435a:	4632      	mov	r2, r6
 800435c:	21ff      	movs	r1, #255	; 0xff
 800435e:	4620      	mov	r0, r4
 8004360:	47a8      	blx	r5

}
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800436a:	bf00      	nop
 800436c:	08015c98 	.word	0x08015c98
 8004370:	08015dd4 	.word	0x08015dd4

08004374 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	605a      	str	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fd8c 	bl	8003ea8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004390:	4a03      	ldr	r2, [pc, #12]	; (80043a0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	0801834c 	.word	0x0801834c

080043a4 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 80043a4:	b590      	push	{r4, r7, lr}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	224a      	movs	r2, #74	; 0x4a
 80043ae:	4906      	ldr	r1, [pc, #24]	; (80043c8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 80043b0:	2008      	movs	r0, #8
 80043b2:	f002 fb91 	bl	8006ad8 <_ZnwjPKci>
 80043b6:	4604      	mov	r4, r0
 80043b8:	4620      	mov	r0, r4
 80043ba:	f7ff ffdb 	bl	8004374 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 80043be:	4623      	mov	r3, r4
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd90      	pop	{r4, r7, pc}
 80043c8:	08015c98 	.word	0x08015c98

080043cc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f009 f984 	bl	800d6e4 <_ZN10UtestShellC1Ev>
 80043dc:	4a03      	ldr	r2, [pc, #12]	; (80043ec <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4618      	mov	r0, r3
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	080182a0 	.word	0x080182a0

080043f0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b089      	sub	sp, #36	; 0x24
 80043f4:	af04      	add	r7, sp, #16
 80043f6:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	21aa      	movs	r1, #170	; 0xaa
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff fac1 	bl	800398a <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	3b01      	subs	r3, #1
 800441e:	429a      	cmp	r2, r3
 8004420:	bf0c      	ite	eq
 8004422:	2301      	moveq	r3, #1
 8004424:	2300      	movne	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4293      	cmp	r3, r2
 800442e:	da0a      	bge.n	8004446 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fad2 	bl	80039de <ringBuffer_pop>
 800443a:	4603      	mov	r3, r0
 800443c:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3301      	adds	r3, #1
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	e7e4      	b.n	8004410 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fac7 	bl	80039de <ringBuffer_pop>
 8004450:	4603      	mov	r3, r0
 8004452:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 8004454:	f00a fcec 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 8004458:	4604      	mov	r4, r0
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	3338      	adds	r3, #56	; 0x38
 800445e:	681d      	ldr	r5, [r3, #0]
 8004460:	7afe      	ldrb	r6, [r7, #11]
 8004462:	f00a fcf5 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004466:	4603      	mov	r3, r0
 8004468:	9302      	str	r3, [sp, #8]
 800446a:	2357      	movs	r3, #87	; 0x57
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	4b05      	ldr	r3, [pc, #20]	; (8004484 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	4b05      	ldr	r3, [pc, #20]	; (8004488 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 8004474:	4632      	mov	r2, r6
 8004476:	21aa      	movs	r1, #170	; 0xaa
 8004478:	4620      	mov	r0, r4
 800447a:	47a8      	blx	r5
}
 800447c:	bf00      	nop
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004484:	08015c98 	.word	0x08015c98
 8004488:	08015df4 	.word	0x08015df4

0800448c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	605a      	str	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fd00 	bl	8003ea8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80044a8:	4a03      	ldr	r2, [pc, #12]	; (80044b8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	08018280 	.word	0x08018280

080044bc <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 80044bc:	b590      	push	{r4, r7, lr}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	225a      	movs	r2, #90	; 0x5a
 80044c6:	4906      	ldr	r1, [pc, #24]	; (80044e0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 80044c8:	2008      	movs	r0, #8
 80044ca:	f002 fb05 	bl	8006ad8 <_ZnwjPKci>
 80044ce:	4604      	mov	r4, r0
 80044d0:	4620      	mov	r0, r4
 80044d2:	f7ff ffdb 	bl	800448c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 80044d6:	4623      	mov	r3, r4
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd90      	pop	{r4, r7, pc}
 80044e0:	08015c98 	.word	0x08015c98

080044e4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f009 f8f8 	bl	800d6e4 <_ZN10UtestShellC1Ev>
 80044f4:	4a03      	ldr	r2, [pc, #12]	; (8004504 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	080181d4 	.word	0x080181d4

08004508 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800450a:	b089      	sub	sp, #36	; 0x24
 800450c:	af04      	add	r7, sp, #16
 800450e:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	429a      	cmp	r2, r3
 800451e:	d20b      	bcs.n	8004538 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	4611      	mov	r1, r2
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fa2d 	bl	800398a <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3301      	adds	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	e7ed      	b.n	8004514 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004538:	f00a fc7a 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 800453c:	4604      	mov	r4, r0
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	3338      	adds	r3, #56	; 0x38
 8004542:	681d      	ldr	r5, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	3b01      	subs	r3, #1
 8004552:	4413      	add	r3, r2
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	461e      	mov	r6, r3
 8004558:	f00a fc7a 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800455c:	4603      	mov	r3, r0
 800455e:	9302      	str	r3, [sp, #8]
 8004560:	2361      	movs	r3, #97	; 0x61
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	4b24      	ldr	r3, [pc, #144]	; (80045fc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 800456a:	4632      	mov	r2, r6
 800456c:	2131      	movs	r1, #49	; 0x31
 800456e:	4620      	mov	r0, r4
 8004570:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fa5b 	bl	8003a32 <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 800457c:	f00a fc58 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 8004580:	4604      	mov	r4, r0
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	3338      	adds	r3, #56	; 0x38
 8004586:	681d      	ldr	r5, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	3b01      	subs	r3, #1
 8004596:	4413      	add	r3, r2
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	461e      	mov	r6, r3
 800459c:	f00a fc58 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045a0:	4603      	mov	r3, r0
 80045a2:	9302      	str	r3, [sp, #8]
 80045a4:	2365      	movs	r3, #101	; 0x65
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	4b14      	ldr	r3, [pc, #80]	; (8004600 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 80045ae:	4632      	mov	r2, r6
 80045b0:	2100      	movs	r1, #0
 80045b2:	4620      	mov	r0, r4
 80045b4:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 80045b6:	f00a fc3b 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 80045ba:	4604      	mov	r4, r0
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	3338      	adds	r3, #56	; 0x38
 80045c0:	681d      	ldr	r5, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	085b      	lsrs	r3, r3, #1
 80045d0:	4413      	add	r3, r2
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	461e      	mov	r6, r3
 80045d6:	f00a fc3b 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045da:	4603      	mov	r3, r0
 80045dc:	9302      	str	r3, [sp, #8]
 80045de:	2366      	movs	r3, #102	; 0x66
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	4b07      	ldr	r3, [pc, #28]	; (8004604 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 80045e8:	4632      	mov	r2, r6
 80045ea:	2100      	movs	r1, #0
 80045ec:	4620      	mov	r0, r4
 80045ee:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 80045f0:	bf00      	nop
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f8:	08015c98 	.word	0x08015c98
 80045fc:	08015e14 	.word	0x08015e14
 8004600:	08015e50 	.word	0x08015e50
 8004604:	08015e8c 	.word	0x08015e8c

08004608 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff fc42 	bl	8003ea8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004624:	4a03      	ldr	r2, [pc, #12]	; (8004634 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	080181b4 	.word	0x080181b4

08004638 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004638:	b590      	push	{r4, r7, lr}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	226f      	movs	r2, #111	; 0x6f
 8004642:	4906      	ldr	r1, [pc, #24]	; (800465c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004644:	2008      	movs	r0, #8
 8004646:	f002 fa47 	bl	8006ad8 <_ZnwjPKci>
 800464a:	4604      	mov	r4, r0
 800464c:	4620      	mov	r0, r4
 800464e:	f7ff ffdb 	bl	8004608 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004652:	4623      	mov	r3, r4
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	bd90      	pop	{r4, r7, pc}
 800465c:	08015c98 	.word	0x08015c98

08004660 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4618      	mov	r0, r3
 800466c:	f009 f83a 	bl	800d6e4 <_ZN10UtestShellC1Ev>
 8004670:	4a03      	ldr	r2, [pc, #12]	; (8004680 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	08018108 	.word	0x08018108

08004684 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004686:	b087      	sub	sp, #28
 8004688:	af04      	add	r7, sp, #16
 800468a:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	490e      	ldr	r1, [pc, #56]	; (80046cc <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff f9dd 	bl	8003a52 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004698:	f00a fbca 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 800469c:	4604      	mov	r4, r0
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	3324      	adds	r3, #36	; 0x24
 80046a2:	681d      	ldr	r5, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	68de      	ldr	r6, [r3, #12]
 80046aa:	f00a fbd1 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046ae:	4603      	mov	r3, r0
 80046b0:	9302      	str	r3, [sp, #8]
 80046b2:	2373      	movs	r3, #115	; 0x73
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	2300      	movs	r3, #0
 80046bc:	4632      	mov	r2, r6
 80046be:	4903      	ldr	r1, [pc, #12]	; (80046cc <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 80046c0:	4620      	mov	r0, r4
 80046c2:	47a8      	blx	r5
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046cc:	08015ec4 	.word	0x08015ec4
 80046d0:	08015c98 	.word	0x08015c98

080046d4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	605a      	str	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff fbdc 	bl	8003ea8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80046f0:	4a03      	ldr	r2, [pc, #12]	; (8004700 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	080180e8 	.word	0x080180e8

08004704 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004704:	b590      	push	{r4, r7, lr}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	2276      	movs	r2, #118	; 0x76
 800470e:	4906      	ldr	r1, [pc, #24]	; (8004728 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004710:	2008      	movs	r0, #8
 8004712:	f002 f9e1 	bl	8006ad8 <_ZnwjPKci>
 8004716:	4604      	mov	r4, r0
 8004718:	4620      	mov	r0, r4
 800471a:	f7ff ffdb 	bl	80046d4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 800471e:	4623      	mov	r3, r4
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	bd90      	pop	{r4, r7, pc}
 8004728:	08015c98 	.word	0x08015c98

0800472c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4618      	mov	r0, r3
 8004738:	f008 ffd4 	bl	800d6e4 <_ZN10UtestShellC1Ev>
 800473c:	4a03      	ldr	r2, [pc, #12]	; (800474c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	0801803c 	.word	0x0801803c

08004750 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004754:	b08a      	sub	sp, #40	; 0x28
 8004756:	af04      	add	r7, sp, #16
 8004758:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	494e      	ldr	r1, [pc, #312]	; (8004898 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff f976 	bl	8003a52 <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004766:	f00a fb63 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 800476a:	4604      	mov	r4, r0
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	3324      	adds	r3, #36	; 0x24
 8004770:	681d      	ldr	r5, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	68de      	ldr	r6, [r3, #12]
 8004778:	f00a fb6a 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800477c:	4603      	mov	r3, r0
 800477e:	9302      	str	r3, [sp, #8]
 8004780:	237a      	movs	r3, #122	; 0x7a
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	4b45      	ldr	r3, [pc, #276]	; (800489c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	2300      	movs	r3, #0
 800478a:	4632      	mov	r2, r6
 800478c:	4942      	ldr	r1, [pc, #264]	; (8004898 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 800478e:	4620      	mov	r0, r4
 8004790:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4942      	ldr	r1, [pc, #264]	; (80048a0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff f979 	bl	8003a90 <ringBuffer_lookFor>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d05c      	beq.n	8004868 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	493b      	ldr	r1, [pc, #236]	; (80048a0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff f96b 	bl	8003a90 <ringBuffer_lookFor>
 80047ba:	4604      	mov	r4, r0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4937      	ldr	r1, [pc, #220]	; (80048a0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff f964 	bl	8003a90 <ringBuffer_lookFor>
 80047c8:	4603      	mov	r3, r0
 80047ca:	429c      	cmp	r4, r3
 80047cc:	bf14      	ite	ne
 80047ce:	2301      	movne	r3, #1
 80047d0:	2300      	moveq	r3, #0
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 80047d8:	f00a fb2a 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 80047dc:	6803      	ldr	r3, [r0, #0]
 80047de:	3370      	adds	r3, #112	; 0x70
 80047e0:	681c      	ldr	r4, [r3, #0]
 80047e2:	237b      	movs	r3, #123	; 0x7b
 80047e4:	4a2d      	ldr	r2, [pc, #180]	; (800489c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80047e6:	492f      	ldr	r1, [pc, #188]	; (80048a4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 80047e8:	47a0      	blx	r4
 80047ea:	f00a fb21 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 80047ee:	4604      	mov	r4, r0
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	3358      	adds	r3, #88	; 0x58
 80047f4:	681d      	ldr	r5, [r3, #0]
 80047f6:	f107 0308 	add.w	r3, r7, #8
 80047fa:	2101      	movs	r1, #1
 80047fc:	4618      	mov	r0, r3
 80047fe:	f003 feb5 	bl	800856c <_Z10StringFromi>
 8004802:	f107 0308 	add.w	r3, r7, #8
 8004806:	4618      	mov	r0, r3
 8004808:	f003 fbda 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800480c:	4606      	mov	r6, r0
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	4923      	ldr	r1, [pc, #140]	; (80048a0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff f93b 	bl	8003a90 <ringBuffer_lookFor>
 800481a:	4602      	mov	r2, r0
 800481c:	f107 0310 	add.w	r3, r7, #16
 8004820:	4611      	mov	r1, r2
 8004822:	4618      	mov	r0, r3
 8004824:	f004 f8c0 	bl	80089a8 <_Z10StringFromm>
 8004828:	f107 0310 	add.w	r3, r7, #16
 800482c:	4618      	mov	r0, r3
 800482e:	f003 fbc7 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8004832:	4680      	mov	r8, r0
 8004834:	f00a fb0c 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004838:	4603      	mov	r3, r0
 800483a:	9303      	str	r3, [sp, #12]
 800483c:	237b      	movs	r3, #123	; 0x7b
 800483e:	9302      	str	r3, [sp, #8]
 8004840:	4b16      	ldr	r3, [pc, #88]	; (800489c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004842:	9301      	str	r3, [sp, #4]
 8004844:	2300      	movs	r3, #0
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	4643      	mov	r3, r8
 800484a:	4632      	mov	r2, r6
 800484c:	2101      	movs	r1, #1
 800484e:	4620      	mov	r0, r4
 8004850:	47a8      	blx	r5
 8004852:	f107 0310 	add.w	r3, r7, #16
 8004856:	4618      	mov	r0, r3
 8004858:	f003 fbdf 	bl	800801a <_ZN12SimpleStringD1Ev>
 800485c:	f107 0308 	add.w	r3, r7, #8
 8004860:	4618      	mov	r0, r3
 8004862:	f003 fbda 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 8004866:	e012      	b.n	800488e <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004868:	f00a fae2 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 800486c:	4604      	mov	r4, r0
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	3338      	adds	r3, #56	; 0x38
 8004872:	681d      	ldr	r5, [r3, #0]
 8004874:	f00a faec 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004878:	4603      	mov	r3, r0
 800487a:	9302      	str	r3, [sp, #8]
 800487c:	237b      	movs	r3, #123	; 0x7b
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	2300      	movs	r3, #0
 8004886:	2200      	movs	r2, #0
 8004888:	2100      	movs	r1, #0
 800488a:	4620      	mov	r0, r4
 800488c:	47a8      	blx	r5
}
 800488e:	bf00      	nop
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004898:	08015ecc 	.word	0x08015ecc
 800489c:	08015c98 	.word	0x08015c98
 80048a0:	08015ed8 	.word	0x08015ed8
 80048a4:	08015ee0 	.word	0x08015ee0

080048a8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	605a      	str	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff faf2 	bl	8003ea8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80048c4:	4a03      	ldr	r2, [pc, #12]	; (80048d4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4618      	mov	r0, r3
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	0801801c 	.word	0x0801801c

080048d8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 80048d8:	b590      	push	{r4, r7, lr}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	227e      	movs	r2, #126	; 0x7e
 80048e2:	4906      	ldr	r1, [pc, #24]	; (80048fc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 80048e4:	2008      	movs	r0, #8
 80048e6:	f002 f8f7 	bl	8006ad8 <_ZnwjPKci>
 80048ea:	4604      	mov	r4, r0
 80048ec:	4620      	mov	r0, r4
 80048ee:	f7ff ffdb 	bl	80048a8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 80048f2:	4623      	mov	r3, r4
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd90      	pop	{r4, r7, pc}
 80048fc:	08015c98 	.word	0x08015c98

08004900 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4618      	mov	r0, r3
 800490c:	f008 feea 	bl	800d6e4 <_ZN10UtestShellC1Ev>
 8004910:	4a03      	ldr	r2, [pc, #12]	; (8004920 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	08017f70 	.word	0x08017f70

08004924 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004926:	b087      	sub	sp, #28
 8004928:	af04      	add	r7, sp, #16
 800492a:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 800492c:	f00a fa80 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 8004930:	4604      	mov	r4, r0
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	3338      	adds	r3, #56	; 0x38
 8004936:	681d      	ldr	r5, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff f8bd 	bl	8003abc <ringBuffer_capacity>
 8004942:	4603      	mov	r3, r0
 8004944:	461e      	mov	r6, r3
 8004946:	f00a fa83 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800494a:	4603      	mov	r3, r0
 800494c:	9302      	str	r3, [sp, #8]
 800494e:	2381      	movs	r3, #129	; 0x81
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004958:	4632      	mov	r2, r6
 800495a:	2132      	movs	r1, #50	; 0x32
 800495c:	4620      	mov	r0, r4
 800495e:	47a8      	blx	r5

}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004968:	08015c98 	.word	0x08015c98
 800496c:	08015f84 	.word	0x08015f84

08004970 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	4a05      	ldr	r2, [pc, #20]	; (8004990 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4618      	mov	r0, r3
 8004982:	f008 ff03 	bl	800d78c <_ZN10UtestShellD1Ev>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	08017f70 	.word	0x08017f70

08004994 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff ffe7 	bl	8004970 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 80049a2:	211c      	movs	r1, #28
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f002 f8ab 	bl	8006b00 <_ZdlPvj>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	4a05      	ldr	r2, [pc, #20]	; (80049d4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff fa81 	bl	8003ecc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	0801801c 	.word	0x0801801c

080049d8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff ffe7 	bl	80049b4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 80049e6:	2108      	movs	r1, #8
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f002 f889 	bl	8006b00 <_ZdlPvj>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	4a05      	ldr	r2, [pc, #20]	; (8004a18 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f008 febf 	bl	800d78c <_ZN10UtestShellD1Ev>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	0801803c 	.word	0x0801803c

08004a1c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff ffe7 	bl	80049f8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8004a2a:	211c      	movs	r1, #28
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f002 f867 	bl	8006b00 <_ZdlPvj>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	4a05      	ldr	r2, [pc, #20]	; (8004a5c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff fa3d 	bl	8003ecc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	080180e8 	.word	0x080180e8

08004a60 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7ff ffe7 	bl	8004a3c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 8004a6e:	2108      	movs	r1, #8
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f002 f845 	bl	8006b00 <_ZdlPvj>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	4a05      	ldr	r2, [pc, #20]	; (8004aa0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f008 fe7b 	bl	800d78c <_ZN10UtestShellD1Ev>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	08018108 	.word	0x08018108

08004aa4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff ffe7 	bl	8004a80 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 8004ab2:	211c      	movs	r1, #28
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f002 f823 	bl	8006b00 <_ZdlPvj>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	4a05      	ldr	r2, [pc, #20]	; (8004ae4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff f9f9 	bl	8003ecc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	080181b4 	.word	0x080181b4

08004ae8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff ffe7 	bl	8004ac4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8004af6:	2108      	movs	r1, #8
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f002 f801 	bl	8006b00 <_ZdlPvj>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	4a05      	ldr	r2, [pc, #20]	; (8004b28 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f008 fe37 	bl	800d78c <_ZN10UtestShellD1Ev>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	080181d4 	.word	0x080181d4

08004b2c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff ffe7 	bl	8004b08 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8004b3a:	211c      	movs	r1, #28
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f001 ffdf 	bl	8006b00 <_ZdlPvj>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	4a05      	ldr	r2, [pc, #20]	; (8004b6c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff f9b5 	bl	8003ecc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	08018280 	.word	0x08018280

08004b70 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff ffe7 	bl	8004b4c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8004b7e:	2108      	movs	r1, #8
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f001 ffbd 	bl	8006b00 <_ZdlPvj>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	4a05      	ldr	r2, [pc, #20]	; (8004bb0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f008 fdf3 	bl	800d78c <_ZN10UtestShellD1Ev>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	080182a0 	.word	0x080182a0

08004bb4 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff ffe7 	bl	8004b90 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8004bc2:	211c      	movs	r1, #28
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f001 ff9b 	bl	8006b00 <_ZdlPvj>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	4a05      	ldr	r2, [pc, #20]	; (8004bf4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff f971 	bl	8003ecc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	0801834c 	.word	0x0801834c

08004bf8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff ffe7 	bl	8004bd4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8004c06:	2108      	movs	r1, #8
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f001 ff79 	bl	8006b00 <_ZdlPvj>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	4a05      	ldr	r2, [pc, #20]	; (8004c38 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f008 fdaf 	bl	800d78c <_ZN10UtestShellD1Ev>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	0801836c 	.word	0x0801836c

08004c3c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ffe7 	bl	8004c18 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8004c4a:	211c      	movs	r1, #28
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f001 ff57 	bl	8006b00 <_ZdlPvj>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4618      	mov	r0, r3
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	4a05      	ldr	r2, [pc, #20]	; (8004c7c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff f92d 	bl	8003ecc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	08018418 	.word	0x08018418

08004c80 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff ffe7 	bl	8004c5c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8004c8e:	2108      	movs	r1, #8
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f001 ff35 	bl	8006b00 <_ZdlPvj>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	4a05      	ldr	r2, [pc, #20]	; (8004cc0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f008 fd6b 	bl	800d78c <_ZN10UtestShellD1Ev>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	08018438 	.word	0x08018438

08004cc4 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ffe7 	bl	8004ca0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8004cd2:	211c      	movs	r1, #28
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f001 ff13 	bl	8006b00 <_ZdlPvj>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	4a05      	ldr	r2, [pc, #20]	; (8004d04 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff f8e9 	bl	8003ecc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	080184e4 	.word	0x080184e4

08004d08 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff ffe7 	bl	8004ce4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8004d16:	2108      	movs	r1, #8
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f001 fef1 	bl	8006b00 <_ZdlPvj>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	4a05      	ldr	r2, [pc, #20]	; (8004d48 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f008 fd27 	bl	800d78c <_ZN10UtestShellD1Ev>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	08018504 	.word	0x08018504

08004d4c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff ffe7 	bl	8004d28 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8004d5a:	211c      	movs	r1, #28
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f001 fecf 	bl	8006b00 <_ZdlPvj>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	4a05      	ldr	r2, [pc, #20]	; (8004d8c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff f8a5 	bl	8003ecc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	080185b0 	.word	0x080185b0

08004d90 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff ffe7 	bl	8004d6c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8004d9e:	2108      	movs	r1, #8
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f001 fead 	bl	8006b00 <_ZdlPvj>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	4a05      	ldr	r2, [pc, #20]	; (8004dd0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f008 fce3 	bl	800d78c <_ZN10UtestShellD1Ev>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	080185d0 	.word	0x080185d0

08004dd4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff ffe7 	bl	8004db0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8004de2:	211c      	movs	r1, #28
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f001 fe8b 	bl	8006b00 <_ZdlPvj>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	4a05      	ldr	r2, [pc, #20]	; (8004e14 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff f861 	bl	8003ecc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	0801867c 	.word	0x0801867c

08004e18 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff ffe7 	bl	8004df4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 8004e26:	2108      	movs	r1, #8
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f001 fe69 	bl	8006b00 <_ZdlPvj>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4618      	mov	r0, r3
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <_Z41__static_initialization_and_destruction_0ii>:
}
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d179      	bne.n	8004f3c <_Z41__static_initialization_and_destruction_0ii+0x104>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d174      	bne.n	8004f3c <_Z41__static_initialization_and_destruction_0ii+0x104>
TEST(RingBuffer_Test_Group, InitTest)
 8004e52:	485b      	ldr	r0, [pc, #364]	; (8004fc0 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004e54:	f7ff f888 	bl	8003f68 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8004e58:	2322      	movs	r3, #34	; 0x22
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	4b59      	ldr	r3, [pc, #356]	; (8004fc4 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	4b59      	ldr	r3, [pc, #356]	; (8004fc8 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004e62:	4a5a      	ldr	r2, [pc, #360]	; (8004fcc <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004e64:	4956      	ldr	r1, [pc, #344]	; (8004fc0 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004e66:	485a      	ldr	r0, [pc, #360]	; (8004fd0 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8004e68:	f00a fa7a 	bl	800f360 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8004e6c:	4859      	ldr	r0, [pc, #356]	; (8004fd4 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004e6e:	f7ff f92f 	bl	80040d0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8004e72:	232c      	movs	r3, #44	; 0x2c
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	4b53      	ldr	r3, [pc, #332]	; (8004fc4 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	4b57      	ldr	r3, [pc, #348]	; (8004fd8 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8004e7c:	4a53      	ldr	r2, [pc, #332]	; (8004fcc <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004e7e:	4955      	ldr	r1, [pc, #340]	; (8004fd4 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004e80:	4856      	ldr	r0, [pc, #344]	; (8004fdc <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8004e82:	f00a fa6d 	bl	800f360 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004e86:	4856      	ldr	r0, [pc, #344]	; (8004fe0 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8004e88:	f7ff f9ac 	bl	80041e4 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8004e8c:	2336      	movs	r3, #54	; 0x36
 8004e8e:	9301      	str	r3, [sp, #4]
 8004e90:	4b4c      	ldr	r3, [pc, #304]	; (8004fc4 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	4b53      	ldr	r3, [pc, #332]	; (8004fe4 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8004e96:	4a4d      	ldr	r2, [pc, #308]	; (8004fcc <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004e98:	4951      	ldr	r1, [pc, #324]	; (8004fe0 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8004e9a:	4853      	ldr	r0, [pc, #332]	; (8004fe8 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8004e9c:	f00a fa60 	bl	800f360 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8004ea0:	4852      	ldr	r0, [pc, #328]	; (8004fec <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8004ea2:	f7ff fa27 	bl	80042f4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8004ea6:	2341      	movs	r3, #65	; 0x41
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	4b46      	ldr	r3, [pc, #280]	; (8004fc4 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	4b50      	ldr	r3, [pc, #320]	; (8004ff0 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8004eb0:	4a46      	ldr	r2, [pc, #280]	; (8004fcc <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004eb2:	494e      	ldr	r1, [pc, #312]	; (8004fec <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8004eb4:	484f      	ldr	r0, [pc, #316]	; (8004ff4 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8004eb6:	f00a fa53 	bl	800f360 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004eba:	484f      	ldr	r0, [pc, #316]	; (8004ff8 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8004ebc:	f7ff fa86 	bl	80043cc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8004ec0:	234a      	movs	r3, #74	; 0x4a
 8004ec2:	9301      	str	r3, [sp, #4]
 8004ec4:	4b3f      	ldr	r3, [pc, #252]	; (8004fc4 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	4b4c      	ldr	r3, [pc, #304]	; (8004ffc <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8004eca:	4a40      	ldr	r2, [pc, #256]	; (8004fcc <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004ecc:	494a      	ldr	r1, [pc, #296]	; (8004ff8 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8004ece:	484c      	ldr	r0, [pc, #304]	; (8005000 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8004ed0:	f00a fa46 	bl	800f360 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004ed4:	484b      	ldr	r0, [pc, #300]	; (8005004 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8004ed6:	f7ff fb05 	bl	80044e4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8004eda:	235a      	movs	r3, #90	; 0x5a
 8004edc:	9301      	str	r3, [sp, #4]
 8004ede:	4b39      	ldr	r3, [pc, #228]	; (8004fc4 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	4b49      	ldr	r3, [pc, #292]	; (8005008 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8004ee4:	4a39      	ldr	r2, [pc, #228]	; (8004fcc <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004ee6:	4947      	ldr	r1, [pc, #284]	; (8005004 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8004ee8:	4848      	ldr	r0, [pc, #288]	; (800500c <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8004eea:	f00a fa39 	bl	800f360 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8004eee:	4848      	ldr	r0, [pc, #288]	; (8005010 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8004ef0:	f7ff fbb6 	bl	8004660 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8004ef4:	236f      	movs	r3, #111	; 0x6f
 8004ef6:	9301      	str	r3, [sp, #4]
 8004ef8:	4b32      	ldr	r3, [pc, #200]	; (8004fc4 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	4b45      	ldr	r3, [pc, #276]	; (8005014 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8004efe:	4a33      	ldr	r2, [pc, #204]	; (8004fcc <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004f00:	4943      	ldr	r1, [pc, #268]	; (8005010 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8004f02:	4845      	ldr	r0, [pc, #276]	; (8005018 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8004f04:	f00a fa2c 	bl	800f360 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 8004f08:	4844      	ldr	r0, [pc, #272]	; (800501c <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8004f0a:	f7ff fc0f 	bl	800472c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 8004f0e:	2376      	movs	r3, #118	; 0x76
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	4b2c      	ldr	r3, [pc, #176]	; (8004fc4 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	4b42      	ldr	r3, [pc, #264]	; (8005020 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8004f18:	4a2c      	ldr	r2, [pc, #176]	; (8004fcc <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004f1a:	4940      	ldr	r1, [pc, #256]	; (800501c <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8004f1c:	4841      	ldr	r0, [pc, #260]	; (8005024 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8004f1e:	f00a fa1f 	bl	800f360 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 8004f22:	4841      	ldr	r0, [pc, #260]	; (8005028 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8004f24:	f7ff fcec 	bl	8004900 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 8004f28:	237e      	movs	r3, #126	; 0x7e
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	4b25      	ldr	r3, [pc, #148]	; (8004fc4 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	4b3e      	ldr	r3, [pc, #248]	; (800502c <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8004f32:	4a26      	ldr	r2, [pc, #152]	; (8004fcc <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004f34:	493c      	ldr	r1, [pc, #240]	; (8005028 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8004f36:	483e      	ldr	r0, [pc, #248]	; (8005030 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8004f38:	f00a fa12 	bl	800f360 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d13a      	bne.n	8004fb8 <_Z41__static_initialization_and_destruction_0ii+0x180>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d135      	bne.n	8004fb8 <_Z41__static_initialization_and_destruction_0ii+0x180>
 8004f4c:	4838      	ldr	r0, [pc, #224]	; (8005030 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8004f4e:	f00a fa31 	bl	800f3b4 <_ZN13TestInstallerD1Ev>
 8004f52:	4835      	ldr	r0, [pc, #212]	; (8005028 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8004f54:	f7ff fd0c 	bl	8004970 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 8004f58:	4832      	ldr	r0, [pc, #200]	; (8005024 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8004f5a:	f00a fa2b 	bl	800f3b4 <_ZN13TestInstallerD1Ev>
 8004f5e:	482f      	ldr	r0, [pc, #188]	; (800501c <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8004f60:	f7ff fd4a 	bl	80049f8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8004f64:	482c      	ldr	r0, [pc, #176]	; (8005018 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8004f66:	f00a fa25 	bl	800f3b4 <_ZN13TestInstallerD1Ev>
 8004f6a:	4829      	ldr	r0, [pc, #164]	; (8005010 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8004f6c:	f7ff fd88 	bl	8004a80 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004f70:	4826      	ldr	r0, [pc, #152]	; (800500c <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8004f72:	f00a fa1f 	bl	800f3b4 <_ZN13TestInstallerD1Ev>
 8004f76:	4823      	ldr	r0, [pc, #140]	; (8005004 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8004f78:	f7ff fdc6 	bl	8004b08 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004f7c:	4820      	ldr	r0, [pc, #128]	; (8005000 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8004f7e:	f00a fa19 	bl	800f3b4 <_ZN13TestInstallerD1Ev>
 8004f82:	481d      	ldr	r0, [pc, #116]	; (8004ff8 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8004f84:	f7ff fe04 	bl	8004b90 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 8004f88:	481a      	ldr	r0, [pc, #104]	; (8004ff4 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8004f8a:	f00a fa13 	bl	800f3b4 <_ZN13TestInstallerD1Ev>
 8004f8e:	4817      	ldr	r0, [pc, #92]	; (8004fec <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8004f90:	f7ff fe42 	bl	8004c18 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004f94:	4814      	ldr	r0, [pc, #80]	; (8004fe8 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8004f96:	f00a fa0d 	bl	800f3b4 <_ZN13TestInstallerD1Ev>
 8004f9a:	4811      	ldr	r0, [pc, #68]	; (8004fe0 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8004f9c:	f7ff fe80 	bl	8004ca0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8004fa0:	480e      	ldr	r0, [pc, #56]	; (8004fdc <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8004fa2:	f00a fa07 	bl	800f3b4 <_ZN13TestInstallerD1Ev>
 8004fa6:	480b      	ldr	r0, [pc, #44]	; (8004fd4 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004fa8:	f7ff febe 	bl	8004d28 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8004fac:	4808      	ldr	r0, [pc, #32]	; (8004fd0 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8004fae:	f00a fa01 	bl	800f3b4 <_ZN13TestInstallerD1Ev>
 8004fb2:	4803      	ldr	r0, [pc, #12]	; (8004fc0 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004fb4:	f7ff fefc 	bl	8004db0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 8004fb8:	bf00      	nop
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	20000478 	.word	0x20000478
 8004fc4:	08015c98 	.word	0x08015c98
 8004fc8:	08015fbc 	.word	0x08015fbc
 8004fcc:	08015fc8 	.word	0x08015fc8
 8004fd0:	20000494 	.word	0x20000494
 8004fd4:	20000498 	.word	0x20000498
 8004fd8:	08015fe0 	.word	0x08015fe0
 8004fdc:	200004b4 	.word	0x200004b4
 8004fe0:	200004b8 	.word	0x200004b8
 8004fe4:	08015ff0 	.word	0x08015ff0
 8004fe8:	200004d4 	.word	0x200004d4
 8004fec:	200004d8 	.word	0x200004d8
 8004ff0:	08016004 	.word	0x08016004
 8004ff4:	200004f4 	.word	0x200004f4
 8004ff8:	200004f8 	.word	0x200004f8
 8004ffc:	08016014 	.word	0x08016014
 8005000:	20000514 	.word	0x20000514
 8005004:	20000518 	.word	0x20000518
 8005008:	0801602c 	.word	0x0801602c
 800500c:	20000534 	.word	0x20000534
 8005010:	20000538 	.word	0x20000538
 8005014:	0801603c 	.word	0x0801603c
 8005018:	20000554 	.word	0x20000554
 800501c:	20000558 	.word	0x20000558
 8005020:	0801604c 	.word	0x0801604c
 8005024:	20000574 	.word	0x20000574
 8005028:	20000578 	.word	0x20000578
 800502c:	08016058 	.word	0x08016058
 8005030:	20000594 	.word	0x20000594

08005034 <_GLOBAL__sub_I_externTestGroupRingBuffer_Test_Group>:
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
 8005038:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800503c:	2001      	movs	r0, #1
 800503e:	f7ff fefb 	bl	8004e38 <_Z41__static_initialization_and_destruction_0ii>
 8005042:	bd80      	pop	{r7, pc}

08005044 <_GLOBAL__sub_D_externTestGroupRingBuffer_Test_Group>:
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
 8005048:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800504c:	2000      	movs	r0, #0
 800504e:	f7ff fef3 	bl	8004e38 <_Z41__static_initialization_and_destruction_0ii>
 8005052:	bd80      	pop	{r7, pc}

08005054 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
    }
 8005060:	4618      	mov	r0, r3
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
    }
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	695b      	ldr	r3, [r3, #20]
    }
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 800509c:	b590      	push	{r4, r7, lr}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff ffed 	bl	8005084 <_ZNK10TestResult15getFailureCountEv>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <_ZNK10TestResult9isFailureEv+0x2a>
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff ffcf 	bl	8005054 <_ZNK10TestResult11getRunCountEv>
 80050b6:	4604      	mov	r4, r0
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff ffd7 	bl	800506c <_ZNK10TestResult15getIgnoredCountEv>
 80050be:	4603      	mov	r3, r0
 80050c0:	4423      	add	r3, r4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <_ZNK10TestResult9isFailureEv+0x2e>
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <_ZNK10TestResult9isFailureEv+0x30>
 80050ca:	2300      	movs	r3, #0
    }
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd90      	pop	{r4, r7, pc}

080050d4 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
    {
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4618      	mov	r0, r3
 80050e0:	f005 fffe 	bl	800b0e0 <_ZN10TestOutputC1Ev>
 80050e4:	4a03      	ldr	r2, [pc, #12]	; (80050f4 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	601a      	str	r2, [r3, #0]
    }
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	08018bdc 	.word	0x08018bdc

080050f8 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
    {
 8005100:	4a05      	ldr	r2, [pc, #20]	; (8005118 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4618      	mov	r0, r3
 800510a:	f006 f807 	bl	800b11c <_ZN10TestOutputD1Ev>
    }
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	08018bdc 	.word	0x08018bdc

0800511c <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
    }
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff ffe7 	bl	80050f8 <_ZN17ConsoleTestOutputD1Ev>
 800512a:	2110      	movs	r1, #16
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f001 fce7 	bl	8006b00 <_ZdlPvj>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 800513c:	b5b0      	push	{r4, r5, r7, lr}
 800513e:	b098      	sub	sp, #96	; 0x60
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
    int result = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 800514a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff ffc0 	bl	80050d4 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8005154:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005158:	4935      	ldr	r1, [pc, #212]	; (8005230 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 800515a:	4618      	mov	r0, r3
 800515c:	f002 fba5 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8005160:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8005164:	f107 0318 	add.w	r3, r7, #24
 8005168:	2200      	movs	r2, #0
 800516a:	4618      	mov	r0, r3
 800516c:	f001 ff6a 	bl	8007044 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8005170:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005174:	4618      	mov	r0, r3
 8005176:	f002 ff50 	bl	800801a <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 800517a:	f107 0318 	add.w	r3, r7, #24
 800517e:	2101      	movs	r1, #1
 8005180:	4618      	mov	r0, r3
 8005182:	f001 ff2f 	bl	8006fe4 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 8005186:	f007 fd39 	bl	800cbfc <_ZN12TestRegistry18getCurrentRegistryEv>
 800518a:	4603      	mov	r3, r0
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	3234      	adds	r2, #52	; 0x34
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	f107 0118 	add.w	r1, r7, #24
 8005196:	4618      	mov	r0, r3
 8005198:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 800519a:	f007 fd2f 	bl	800cbfc <_ZN12TestRegistry18getCurrentRegistryEv>
 800519e:	4603      	mov	r3, r0
 80051a0:	f107 0008 	add.w	r0, r7, #8
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	f000 f844 	bl	8005234 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 80051ac:	f107 0308 	add.w	r3, r7, #8
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 f899 	bl	80052e8 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 80051b6:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80051b8:	f107 0308 	add.w	r3, r7, #8
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 f863 	bl	8005288 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 80051c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10c      	bne.n	80051e2 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 80051c8:	f107 0318 	add.w	r3, r7, #24
 80051cc:	2100      	movs	r1, #0
 80051ce:	4618      	mov	r0, r3
 80051d0:	f002 f83a 	bl	8007248 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 80051d4:	4602      	mov	r2, r0
 80051d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80051da:	4611      	mov	r1, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	f006 f83f 	bl	800b260 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 80051e2:	f007 fd0b 	bl	800cbfc <_ZN12TestRegistry18getCurrentRegistryEv>
 80051e6:	4604      	mov	r4, r0
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	3344      	adds	r3, #68	; 0x44
 80051ec:	681d      	ldr	r5, [r3, #0]
 80051ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051f2:	490f      	ldr	r1, [pc, #60]	; (8005230 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 80051f4:	4618      	mov	r0, r3
 80051f6:	f002 fb58 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80051fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051fe:	4619      	mov	r1, r3
 8005200:	4620      	mov	r0, r4
 8005202:	47a8      	blx	r5
 8005204:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005208:	4618      	mov	r0, r3
 800520a:	f002 ff06 	bl	800801a <_ZN12SimpleStringD1Ev>
    return result;
 800520e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8005210:	f107 0318 	add.w	r3, r7, #24
 8005214:	4618      	mov	r0, r3
 8005216:	f001 ff4d 	bl	80070b4 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 800521a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff ff6a 	bl	80050f8 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8005224:	4623      	mov	r3, r4
}
 8005226:	4618      	mov	r0, r3
 8005228:	3760      	adds	r7, #96	; 0x60
 800522a:	46bd      	mov	sp, r7
 800522c:	bdb0      	pop	{r4, r5, r7, pc}
 800522e:	bf00      	nop
 8005230:	08016068 	.word	0x08016068

08005234 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8005234:	b590      	push	{r4, r7, lr}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8005242:	4a0f      	ldr	r2, [pc, #60]	; (8005280 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	605a      	str	r2, [r3, #4]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	609a      	str	r2, [r3, #8]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 800525a:	2241      	movs	r2, #65	; 0x41
 800525c:	4909      	ldr	r1, [pc, #36]	; (8005284 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 800525e:	2038      	movs	r0, #56	; 0x38
 8005260:	f001 fc3a 	bl	8006ad8 <_ZnwjPKci>
 8005264:	4604      	mov	r4, r0
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	4620      	mov	r0, r4
 800526c:	f00a fa50 	bl	800f710 <_ZN20CommandLineArgumentsC1EiPKPKc>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	609c      	str	r4, [r3, #8]
}
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	bd90      	pop	{r4, r7, pc}
 800527e:	bf00      	nop
 8005280:	080186bc 	.word	0x080186bc
 8005284:	0801607c 	.word	0x0801607c

08005288 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	4a0c      	ldr	r2, [pc, #48]	; (80052c4 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d004      	beq.n	80052a8 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	3204      	adds	r2, #4
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	4790      	blx	r2
    delete output_;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d004      	beq.n	80052ba <_ZN21CommandLineTestRunnerD1Ev+0x32>
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	3204      	adds	r2, #4
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	4790      	blx	r2
}
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	080186bc 	.word	0x080186bc

080052c8 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
}
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff ffd9 	bl	8005288 <_ZN21CommandLineTestRunnerD1Ev>
 80052d6:	2110      	movs	r1, #16
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f001 fc11 	bl	8006b00 <_ZdlPvj>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 80052e8:	b5b0      	push	{r4, r5, r7, lr}
 80052ea:	b08c      	sub	sp, #48	; 0x30
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 80052f0:	2301      	movs	r3, #1
 80052f2:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 80052f4:	f107 031c 	add.w	r3, r7, #28
 80052f8:	4929      	ldr	r1, [pc, #164]	; (80053a0 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 80052fa:	4618      	mov	r0, r3
 80052fc:	f002 fad5 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8005300:	f107 021c 	add.w	r2, r7, #28
 8005304:	f107 0308 	add.w	r3, r7, #8
 8005308:	4611      	mov	r1, r2
 800530a:	4618      	mov	r0, r3
 800530c:	f007 f834 	bl	800c378 <_ZN16SetPointerPluginC1ERK12SimpleString>
 8005310:	f107 031c 	add.w	r3, r7, #28
 8005314:	4618      	mov	r0, r3
 8005316:	f002 fe80 	bl	800801a <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3334      	adds	r3, #52	; 0x34
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f107 0108 	add.w	r1, r7, #8
 800532c:	4610      	mov	r0, r2
 800532e:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	333c      	adds	r3, #60	; 0x3c
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4610      	mov	r0, r2
 8005340:	4798      	blx	r3
 8005342:	4603      	mov	r3, r0
 8005344:	4619      	mov	r1, r3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fa3e 	bl	80057c8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8ac 	bl	80054b0 <_ZN21CommandLineTestRunner11runAllTestsEv>
 8005358:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68dd      	ldr	r5, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3344      	adds	r3, #68	; 0x44
 8005366:	681c      	ldr	r4, [r3, #0]
 8005368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800536c:	490c      	ldr	r1, [pc, #48]	; (80053a0 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800536e:	4618      	mov	r0, r3
 8005370:	f002 fa9b 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8005374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005378:	4619      	mov	r1, r3
 800537a:	4628      	mov	r0, r5
 800537c:	47a0      	blx	r4
 800537e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005382:	4618      	mov	r0, r3
 8005384:	f002 fe49 	bl	800801a <_ZN12SimpleStringD1Ev>
    return testResult;
 8005388:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 800538a:	f107 0308 	add.w	r3, r7, #8
 800538e:	4618      	mov	r0, r3
 8005390:	f000 faaa 	bl	80058e8 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 8005394:	4623      	mov	r3, r4
}
 8005396:	4618      	mov	r0, r3
 8005398:	3730      	adds	r7, #48	; 0x30
 800539a:	46bd      	mov	sp, r7
 800539c:	bdb0      	pop	{r4, r5, r7, pc}
 800539e:	bf00      	nop
 80053a0:	080160a0 	.word	0x080160a0

080053a4 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 80053a4:	b5b0      	push	{r4, r5, r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68dd      	ldr	r5, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3330      	adds	r3, #48	; 0x30
 80053b8:	681c      	ldr	r4, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	4618      	mov	r0, r3
 80053c0:	f00a fee6 	bl	8010190 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 80053c4:	4603      	mov	r3, r0
 80053c6:	4619      	mov	r1, r3
 80053c8:	4628      	mov	r0, r5
 80053ca:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68dd      	ldr	r5, [r3, #12]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	332c      	adds	r3, #44	; 0x2c
 80053d8:	681c      	ldr	r4, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	4618      	mov	r0, r3
 80053e0:	f00a fee2 	bl	80101a8 <_ZNK20CommandLineArguments14getNameFiltersEv>
 80053e4:	4603      	mov	r3, r0
 80053e6:	4619      	mov	r1, r3
 80053e8:	4628      	mov	r0, r5
 80053ea:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f00a fe31 	bl	8010058 <_ZNK20CommandLineArguments9isVerboseEv>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d009      	beq.n	8005410 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3320      	adds	r3, #32
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2101      	movs	r1, #1
 800540c:	4610      	mov	r0, r2
 800540e:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	4618      	mov	r0, r3
 8005416:	f00a fe2b 	bl	8010070 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d009      	beq.n	8005434 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3320      	adds	r3, #32
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2102      	movs	r1, #2
 8005430:	4610      	mov	r0, r2
 8005432:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	4618      	mov	r0, r3
 800543a:	f00a fe25 	bl	8010088 <_ZNK20CommandLineArguments7isColorEv>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d008      	beq.n	8005456 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3324      	adds	r3, #36	; 0x24
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4610      	mov	r0, r2
 8005454:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	4618      	mov	r0, r3
 800545c:	f00a fe50 	bl	8010100 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d008      	beq.n	8005478 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3360      	adds	r3, #96	; 0x60
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4610      	mov	r0, r2
 8005476:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	4618      	mov	r0, r3
 800547e:	f00a fe33 	bl	80100e8 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d004      	beq.n	8005492 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	4618      	mov	r0, r3
 800548e:	f007 fc31 	bl	800ccf4 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	4618      	mov	r0, r3
 8005498:	f00a fe56 	bl	8010148 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 80054a2:	f009 fce1 	bl	800ee68 <_ZN10UtestShell14setCrashOnFailEv>
}
 80054a6:	bf00      	nop
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080054b0 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 80054b0:	b5b0      	push	{r4, r5, r7, lr}
 80054b2:	b094      	sub	sp, #80	; 0x50
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff ff73 	bl	80053a4 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 80054c2:	2300      	movs	r3, #0
 80054c4:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 80054c6:	2300      	movs	r3, #0
 80054c8:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f00a fe22 	bl	8010118 <_ZNK20CommandLineArguments14getRepeatCountEv>
 80054d4:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	4618      	mov	r0, r3
 80054dc:	f00a fde0 	bl	80100a0 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d019      	beq.n	800551a <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	f107 0308 	add.w	r3, r7, #8
 80054ee:	4611      	mov	r1, r2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f007 fdc7 	bl	800d084 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3320      	adds	r3, #32
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f107 0108 	add.w	r1, r7, #8
 8005508:	4610      	mov	r0, r2
 800550a:	4798      	blx	r3
        return 0;
 800550c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800550e:	f107 0308 	add.w	r3, r7, #8
 8005512:	4618      	mov	r0, r3
 8005514:	f007 fdee 	bl	800d0f4 <_ZN10TestResultD1Ev>
 8005518:	e0e1      	b.n	80056de <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	4618      	mov	r0, r3
 8005520:	f00a fdca 	bl	80100b8 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d019      	beq.n	800555e <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	f107 0308 	add.w	r3, r7, #8
 8005532:	4611      	mov	r1, r2
 8005534:	4618      	mov	r0, r3
 8005536:	f007 fda5 	bl	800d084 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3324      	adds	r3, #36	; 0x24
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f107 0108 	add.w	r1, r7, #8
 800554c:	4610      	mov	r0, r2
 800554e:	4798      	blx	r3
        return 0;
 8005550:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8005552:	f107 0308 	add.w	r3, r7, #8
 8005556:	4618      	mov	r0, r3
 8005558:	f007 fdcc 	bl	800d0f4 <_ZN10TestResultD1Ev>
 800555c:	e0bf      	b.n	80056de <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	4618      	mov	r0, r3
 8005564:	f00a fdb4 	bl	80100d0 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d019      	beq.n	80055a2 <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	f107 0308 	add.w	r3, r7, #8
 8005576:	4611      	mov	r1, r2
 8005578:	4618      	mov	r0, r3
 800557a:	f007 fd83 	bl	800d084 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3328      	adds	r3, #40	; 0x28
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f107 0108 	add.w	r1, r7, #8
 8005590:	4610      	mov	r0, r2
 8005592:	4798      	blx	r3
        return 0;
 8005594:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8005596:	f107 0308 	add.w	r3, r7, #8
 800559a:	4618      	mov	r0, r3
 800559c:	f007 fdaa 	bl	800d0f4 <_ZN10TestResultD1Ev>
 80055a0:	e09d      	b.n	80056de <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f00a fdc2 	bl	8010130 <_ZNK20CommandLineArguments11isReversingEv>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d008      	beq.n	80055c4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	331c      	adds	r3, #28
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4610      	mov	r0, r2
 80055c2:	4798      	blx	r3

    if (arguments_->isShuffling())
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f00a fdc9 	bl	8010160 <_ZNK20CommandLineArguments11isShufflingEv>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d023      	beq.n	800561c <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	332c      	adds	r3, #44	; 0x2c
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4941      	ldr	r1, [pc, #260]	; (80056e8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 80055e4:	4610      	mov	r0, r2
 80055e6:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685d      	ldr	r5, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3334      	adds	r3, #52	; 0x34
 80055f4:	681c      	ldr	r4, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f00a fdbc 	bl	8010178 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8005600:	4603      	mov	r3, r0
 8005602:	4619      	mov	r1, r3
 8005604:	4628      	mov	r0, r5
 8005606:	47a0      	blx	r4
        output_->print("\n");
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	332c      	adds	r3, #44	; 0x2c
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4935      	ldr	r1, [pc, #212]	; (80056ec <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8005618:	4610      	mov	r0, r2
 800561a:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 800561c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005622:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005624:	429a      	cmp	r2, r3
 8005626:	bf8c      	ite	hi
 8005628:	2301      	movhi	r3, #1
 800562a:	2300      	movls	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d04e      	beq.n	80056d0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	4618      	mov	r0, r3
 8005638:	f00a fd92 	bl	8010160 <_ZNK20CommandLineArguments11isShufflingEv>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00f      	beq.n	8005662 <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68dd      	ldr	r5, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3318      	adds	r3, #24
 800564e:	681c      	ldr	r4, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	4618      	mov	r0, r3
 8005656:	f00a fd8f 	bl	8010178 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800565a:	4603      	mov	r3, r0
 800565c:	4619      	mov	r1, r3
 800565e:	4628      	mov	r0, r5
 8005660:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6858      	ldr	r0, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3340      	adds	r3, #64	; 0x40
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005672:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005674:	4798      	blx	r3
        TestResult tr(*output_);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	f107 0308 	add.w	r3, r7, #8
 800567e:	4611      	mov	r1, r2
 8005680:	4618      	mov	r0, r3
 8005682:	f007 fcff 	bl	800d084 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3314      	adds	r3, #20
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f107 0108 	add.w	r1, r7, #8
 8005698:	4610      	mov	r0, r2
 800569a:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 800569c:	f107 0308 	add.w	r3, r7, #8
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff fcef 	bl	8005084 <_ZNK10TestResult15getFailureCountEv>
 80056a6:	4602      	mov	r2, r0
 80056a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056aa:	4413      	add	r3, r2
 80056ac:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 80056ae:	f107 0308 	add.w	r3, r7, #8
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff fcf2 	bl	800509c <_ZNK10TestResult9isFailureEv>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 80056be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c0:	3301      	adds	r3, #1
 80056c2:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 80056c4:	f107 0308 	add.w	r3, r7, #8
 80056c8:	4618      	mov	r0, r3
 80056ca:	f007 fd13 	bl	800d0f4 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 80056ce:	e7a5      	b.n	800561c <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 80056d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 80056d6:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80056d8:	e000      	b.n	80056dc <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 80056da:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80056dc:	bf00      	nop
 80056de:	4623      	mov	r3, r4
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3750      	adds	r7, #80	; 0x50
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bdb0      	pop	{r4, r5, r7, pc}
 80056e8:	080160b4 	.word	0x080160b4
 80056ec:	080160e0 	.word	0x080160e0

080056f0 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 80056f0:	b590      	push	{r4, r7, lr}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 80056f8:	229d      	movs	r2, #157	; 0x9d
 80056fa:	4906      	ldr	r1, [pc, #24]	; (8005714 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 80056fc:	201c      	movs	r0, #28
 80056fe:	f001 f9eb 	bl	8006ad8 <_ZnwjPKci>
 8005702:	4604      	mov	r4, r0
 8005704:	4620      	mov	r0, r4
 8005706:	f003 fb6d 	bl	8008de4 <_ZN18TeamCityTestOutputC1Ev>
 800570a:	4623      	mov	r3, r4
}
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	bd90      	pop	{r4, r7, pc}
 8005714:	0801607c 	.word	0x0801607c

08005718 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 8005722:	22a2      	movs	r2, #162	; 0xa2
 8005724:	490a      	ldr	r1, [pc, #40]	; (8005750 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8005726:	2014      	movs	r0, #20
 8005728:	f001 f9d6 	bl	8006ad8 <_ZnwjPKci>
 800572c:	4604      	mov	r4, r0
 800572e:	4620      	mov	r0, r4
 8005730:	f000 f980 	bl	8005a34 <_ZN15JUnitTestOutputC1Ev>
 8005734:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 fbb2 	bl	8005ea8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8005744:	68fb      	ldr	r3, [r7, #12]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	bd90      	pop	{r4, r7, pc}
 800574e:	bf00      	nop
 8005750:	0801607c 	.word	0x0801607c

08005754 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8005754:	b590      	push	{r4, r7, lr}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 800575c:	22ab      	movs	r2, #171	; 0xab
 800575e:	4906      	ldr	r1, [pc, #24]	; (8005778 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8005760:	2010      	movs	r0, #16
 8005762:	f001 f9b9 	bl	8006ad8 <_ZnwjPKci>
 8005766:	4604      	mov	r4, r0
 8005768:	4620      	mov	r0, r4
 800576a:	f7ff fcb3 	bl	80050d4 <_ZN17ConsoleTestOutputC1Ev>
 800576e:	4623      	mov	r3, r4
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	bd90      	pop	{r4, r7, pc}
 8005778:	0801607c 	.word	0x0801607c

0800577c <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 800577c:	b590      	push	{r4, r7, lr}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8005788:	22b0      	movs	r2, #176	; 0xb0
 800578a:	490e      	ldr	r1, [pc, #56]	; (80057c4 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 800578c:	2018      	movs	r0, #24
 800578e:	f001 f9a3 	bl	8006ad8 <_ZnwjPKci>
 8005792:	4604      	mov	r4, r0
 8005794:	4620      	mov	r0, r4
 8005796:	f006 f99b 	bl	800bad0 <_ZN19CompositeTestOutputC1Ev>
 800579a:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	335c      	adds	r3, #92	; 0x5c
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	6978      	ldr	r0, [r7, #20]
 80057a8:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3360      	adds	r3, #96	; 0x60
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	6978      	ldr	r0, [r7, #20]
 80057b6:	4798      	blx	r3
  return composite;
 80057b8:	697b      	ldr	r3, [r7, #20]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd90      	pop	{r4, r7, pc}
 80057c2:	bf00      	nop
 80057c4:	0801607c 	.word	0x0801607c

080057c8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 80057c8:	b5b0      	push	{r4, r5, r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	4618      	mov	r0, r3
 80057da:	f00a f855 	bl	800f888 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 80057de:	4603      	mov	r3, r0
 80057e0:	f083 0301 	eor.w	r3, r3, #1
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d029      	beq.n	800583e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3310      	adds	r3, #16
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	4798      	blx	r3
 80057f6:	4602      	mov	r2, r0
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685d      	ldr	r5, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	332c      	adds	r3, #44	; 0x2c
 8005808:	681c      	ldr	r4, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	4618      	mov	r0, r3
 8005810:	f00a fc16 	bl	8010040 <_ZNK20CommandLineArguments8needHelpEv>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d006      	beq.n	8005828 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	4618      	mov	r0, r3
 8005820:	f00a fc00 	bl	8010024 <_ZNK20CommandLineArguments4helpEv>
 8005824:	4603      	mov	r3, r0
 8005826:	e005      	b.n	8005834 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	4618      	mov	r0, r3
 800582e:	f00a fbeb 	bl	8010008 <_ZNK20CommandLineArguments5usageEv>
 8005832:	4603      	mov	r3, r0
 8005834:	4619      	mov	r1, r3
 8005836:	4628      	mov	r0, r5
 8005838:	47a0      	blx	r4
    return false;
 800583a:	2300      	movs	r3, #0
 800583c:	e050      	b.n	80058e0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	4618      	mov	r0, r3
 8005844:	f00b fa52 	bl	8010cec <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d02c      	beq.n	80058a8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	330c      	adds	r3, #12
 8005854:	681c      	ldr	r4, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	4618      	mov	r0, r3
 800585c:	f00b fa6a 	bl	8010d34 <_ZNK20CommandLineArguments14getPackageNameEv>
 8005860:	4603      	mov	r3, r0
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	47a0      	blx	r4
 8005868:	4602      	mov	r2, r0
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	4618      	mov	r0, r3
 8005874:	f00a fbf0 	bl	8010058 <_ZNK20CommandLineArguments9isVerboseEv>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d02f      	beq.n	80058de <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3314      	adds	r3, #20
 8005884:	681c      	ldr	r4, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685d      	ldr	r5, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3310      	adds	r3, #16
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	4798      	blx	r3
 8005896:	4603      	mov	r3, r0
 8005898:	461a      	mov	r2, r3
 800589a:	4629      	mov	r1, r5
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	47a0      	blx	r4
 80058a0:	4602      	mov	r2, r0
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	605a      	str	r2, [r3, #4]
 80058a6:	e01a      	b.n	80058de <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f00b fa2f 	bl	8010d10 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3308      	adds	r3, #8
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	4798      	blx	r3
 80058c4:	4602      	mov	r2, r0
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	605a      	str	r2, [r3, #4]
 80058ca:	e008      	b.n	80058de <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3310      	adds	r3, #16
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	4798      	blx	r3
 80058d8:	4602      	mov	r2, r0
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	605a      	str	r2, [r3, #4]
  return true;
 80058de:	2301      	movs	r3, #1
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bdb0      	pop	{r4, r5, r7, pc}

080058e8 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	4a05      	ldr	r2, [pc, #20]	; (8005908 <_ZN16SetPointerPluginD1Ev+0x20>)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f006 fbff 	bl	800c0fc <_ZN10TestPluginD1Ev>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	08018ce8 	.word	0x08018ce8

0800590c <_ZN16SetPointerPluginD0Ev>:
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7ff ffe7 	bl	80058e8 <_ZN16SetPointerPluginD1Ev>
 800591a:	2114      	movs	r1, #20
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f001 f8ef 	bl	8006b00 <_ZdlPvj>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
    }
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4910      	ldr	r1, [pc, #64]	; (8005990 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8005950:	4618      	mov	r0, r3
 8005952:	f001 ffaa 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	609a      	str	r2, [r3, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	60da      	str	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	741a      	strb	r2, [r3, #16]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3314      	adds	r3, #20
 800596c:	4908      	ldr	r1, [pc, #32]	; (8005990 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800596e:	4618      	mov	r0, r3
 8005970:	f001 ff9b 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	61da      	str	r2, [r3, #28]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	621a      	str	r2, [r3, #32]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	080160e4 	.word	0x080160e4

08005994 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	605a      	str	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	609a      	str	r2, [r3, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	60da      	str	r2, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	611a      	str	r2, [r3, #16]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3314      	adds	r3, #20
 80059be:	4907      	ldr	r1, [pc, #28]	; (80059dc <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 80059c0:	4618      	mov	r0, r3
 80059c2:	f001 ff72 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	61da      	str	r2, [r3, #28]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	621a      	str	r2, [r3, #32]
    {
    }
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	080160e4 	.word	0x080160e4

080059e0 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3314      	adds	r3, #20
 80059ec:	4618      	mov	r0, r3
 80059ee:	f002 fb14 	bl	800801a <_ZN12SimpleStringD1Ev>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff ffc4 	bl	8005994 <_ZN20JUnitTestGroupResultC1Ev>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3328      	adds	r3, #40	; 0x28
 8005a10:	4907      	ldr	r1, [pc, #28]	; (8005a30 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8005a12:	4618      	mov	r0, r3
 8005a14:	f001 ff49 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3330      	adds	r3, #48	; 0x30
 8005a1c:	4904      	ldr	r1, [pc, #16]	; (8005a30 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f001 ff43 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	080160e4 	.word	0x080160e4

08005a34 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8005a34:	b590      	push	{r4, r7, lr}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f005 fb4e 	bl	800b0e0 <_ZN10TestOutputC1Ev>
 8005a44:	4a09      	ldr	r2, [pc, #36]	; (8005a6c <_ZN15JUnitTestOutputC1Ev+0x38>)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	224d      	movs	r2, #77	; 0x4d
 8005a4c:	4908      	ldr	r1, [pc, #32]	; (8005a70 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 8005a4e:	2038      	movs	r0, #56	; 0x38
 8005a50:	f001 f842 	bl	8006ad8 <_ZnwjPKci>
 8005a54:	4604      	mov	r4, r0
 8005a56:	4620      	mov	r0, r4
 8005a58:	f7ff ffd0 	bl	80059fc <_ZN19JUnitTestOutputImplC1Ev>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	611c      	str	r4, [r3, #16]
{
}
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4618      	mov	r0, r3
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd90      	pop	{r4, r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	080186dc 	.word	0x080186dc
 8005a70:	080160e8 	.word	0x080160e8

08005a74 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3330      	adds	r3, #48	; 0x30
 8005a80:	4618      	mov	r0, r3
 8005a82:	f002 faca 	bl	800801a <_ZN12SimpleStringD1Ev>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3328      	adds	r3, #40	; 0x28
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f002 fac5 	bl	800801a <_ZN12SimpleStringD1Ev>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff ffa4 	bl	80059e0 <_ZN20JUnitTestGroupResultD1Ev>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8005aa4:	b590      	push	{r4, r7, lr}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	4a0c      	ldr	r2, [pc, #48]	; (8005ae0 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f838 	bl	8005b28 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691c      	ldr	r4, [r3, #16]
 8005abc:	2c00      	cmp	r4, #0
 8005abe:	d006      	beq.n	8005ace <_ZN15JUnitTestOutputD1Ev+0x2a>
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f7ff ffd7 	bl	8005a74 <_ZN19JUnitTestOutputImplD1Ev>
 8005ac6:	2138      	movs	r1, #56	; 0x38
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f001 f819 	bl	8006b00 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f005 fb23 	bl	800b11c <_ZN10TestOutputD1Ev>
}
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd90      	pop	{r4, r7, pc}
 8005ae0:	080186dc 	.word	0x080186dc

08005ae4 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
}
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff ffd9 	bl	8005aa4 <_ZN15JUnitTestOutputD1Ev>
 8005af2:	2114      	movs	r1, #20
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f001 f803 	bl	8006b00 <_ZdlPvj>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3314      	adds	r3, #20
 8005b10:	4618      	mov	r0, r3
 8005b12:	f002 fa82 	bl	800801a <_ZN12SimpleStringD1Ev>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f002 fa7e 	bl	800801a <_ZN12SimpleStringD1Ev>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	f103 0414 	add.w	r4, r3, #20
 8005b48:	f107 0308 	add.w	r3, r7, #8
 8005b4c:	491d      	ldr	r1, [pc, #116]	; (8005bc4 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f001 feab 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8005b54:	f107 0308 	add.w	r3, r7, #8
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f001 ff11 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8005b60:	f107 0308 	add.w	r3, r7, #8
 8005b64:	4618      	mov	r0, r3
 8005b66:	f002 fa58 	bl	800801a <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	617b      	str	r3, [r7, #20]
    while (cur) {
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d018      	beq.n	8005baa <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d004      	beq.n	8005b90 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	3204      	adds	r2, #4
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	4790      	blx	r2
        delete cur;
 8005b90:	697c      	ldr	r4, [r7, #20]
 8005b92:	2c00      	cmp	r4, #0
 8005b94:	d006      	beq.n	8005ba4 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 8005b96:	4620      	mov	r0, r4
 8005b98:	f7ff ffb4 	bl	8005b04 <_ZN23JUnitTestCaseResultNodeD1Ev>
 8005b9c:	2128      	movs	r1, #40	; 0x28
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	f000 ffae 	bl	8006b00 <_ZdlPvj>
        cur = tmp;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	617b      	str	r3, [r7, #20]
    while (cur) {
 8005ba8:	e7e3      	b.n	8005b72 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd90      	pop	{r4, r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	080160e4 	.word	0x080160e4

08005bc8 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8005bf2:	b590      	push	{r4, r7, lr}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	6a1c      	ldr	r4, [r3, #32]
 8005c02:	6838      	ldr	r0, [r7, #0]
 8005c04:	f007 fbde 	bl	800d3c4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	6a1c      	ldr	r4, [r3, #32]
 8005c12:	6838      	ldr	r0, [r7, #0]
 8005c14:	f7ff fe8a 	bl	800592c <_ZNK10TestResult13getCheckCountEv>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	6223      	str	r3, [r4, #32]
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd90      	pop	{r4, r7, pc}

08005c24 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 8005c3a:	b590      	push	{r4, r7, lr}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691c      	ldr	r4, [r3, #16]
 8005c48:	6838      	ldr	r0, [r7, #0]
 8005c4a:	f007 fbc7 	bl	800d3dc <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3364      	adds	r3, #100	; 0x64
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	4798      	blx	r3
    resetTestGroupResult();
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff ff62 	bl	8005b28 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd90      	pop	{r4, r7, pc}

08005c6c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8005c6c:	b590      	push	{r4, r7, lr}
 8005c6e:	b089      	sub	sp, #36	; 0x24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	3201      	adds	r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f103 0414 	add.w	r4, r3, #20
 8005c88:	f107 0308 	add.w	r3, r7, #8
 8005c8c:	6839      	ldr	r1, [r7, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f007 ff07 	bl	800daa2 <_ZNK10UtestShell8getGroupEv>
 8005c94:	f107 0308 	add.w	r3, r7, #8
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f001 fe71 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8005ca0:	f107 0308 	add.w	r3, r7, #8
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f002 f9b8 	bl	800801a <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8005caa:	4b3c      	ldr	r3, [pc, #240]	; (8005d9c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4798      	blx	r3
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d110      	bne.n	8005ce4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8005cc2:	2288      	movs	r2, #136	; 0x88
 8005cc4:	4936      	ldr	r1, [pc, #216]	; (8005da0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8005cc6:	2028      	movs	r0, #40	; 0x28
 8005cc8:	f000 ff06 	bl	8006ad8 <_ZnwjPKci>
 8005ccc:	4604      	mov	r4, r0
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f7ff fe38 	bl	8005944 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8005cd8:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6912      	ldr	r2, [r2, #16]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	61d3      	str	r3, [r2, #28]
 8005ce2:	e013      	b.n	8005d0c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8005ce4:	228b      	movs	r2, #139	; 0x8b
 8005ce6:	492e      	ldr	r1, [pc, #184]	; (8005da0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8005ce8:	2028      	movs	r0, #40	; 0x28
 8005cea:	f000 fef5 	bl	8006ad8 <_ZnwjPKci>
 8005cee:	4604      	mov	r4, r0
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f7ff fe27 	bl	8005944 <_ZN23JUnitTestCaseResultNodeC1Ev>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	6a1a      	ldr	r2, [r3, #32]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d0a:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	461c      	mov	r4, r3
 8005d14:	f107 0310 	add.w	r3, r7, #16
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f007 feb2 	bl	800da84 <_ZNK10UtestShell7getNameEv>
 8005d20:	f107 0310 	add.w	r3, r7, #16
 8005d24:	4619      	mov	r1, r3
 8005d26:	4620      	mov	r0, r4
 8005d28:	f001 fe2b 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8005d2c:	f107 0310 	add.w	r3, r7, #16
 8005d30:	4618      	mov	r0, r3
 8005d32:	f002 f972 	bl	800801a <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	f103 0414 	add.w	r4, r3, #20
 8005d40:	f107 0318 	add.w	r3, r7, #24
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f007 ff5c 	bl	800dc04 <_ZNK10UtestShell7getFileEv>
 8005d4c:	f107 0318 	add.w	r3, r7, #24
 8005d50:	4619      	mov	r1, r3
 8005d52:	4620      	mov	r0, r4
 8005d54:	f001 fe15 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8005d58:	f107 0318 	add.w	r3, r7, #24
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f002 f95c 	bl	800801a <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	6a1c      	ldr	r4, [r3, #32]
 8005d68:	6838      	ldr	r0, [r7, #0]
 8005d6a:	f007 ff5a 	bl	800dc22 <_ZNK10UtestShell13getLineNumberEv>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3318      	adds	r3, #24
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6838      	ldr	r0, [r7, #0]
 8005d7c:	4798      	blx	r3
 8005d7e:	4603      	mov	r3, r0
 8005d80:	f083 0301 	eor.w	r3, r3, #1
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d004      	beq.n	8005d94 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	2201      	movs	r2, #1
 8005d92:	741a      	strb	r2, [r3, #16]
    }
}
 8005d94:	bf00      	nop
 8005d96:	3724      	adds	r7, #36	; 0x24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd90      	pop	{r4, r7, pc}
 8005d9c:	200000a4 	.word	0x200000a4
 8005da0:	080160e8 	.word	0x080160e8

08005da4 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08a      	sub	sp, #40	; 0x28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8005db0:	f107 0310 	add.w	r3, r7, #16
 8005db4:	4928      	ldr	r1, [pc, #160]	; (8005e58 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 8005db6:	4618      	mov	r0, r3
 8005db8:	f001 fd77 	bl	80078aa <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	3328      	adds	r3, #40	; 0x28
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f002 f918 	bl	8007ff8 <_ZNK12SimpleString7isEmptyEv>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	f083 0301 	eor.w	r3, r3, #1
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00f      	beq.n	8005df4 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005ddc:	f107 0310 	add.w	r3, r7, #16
 8005de0:	4611      	mov	r1, r2
 8005de2:	4618      	mov	r0, r3
 8005de4:	f002 f996 	bl	8008114 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 8005de8:	f107 0310 	add.w	r3, r7, #16
 8005dec:	491b      	ldr	r1, [pc, #108]	; (8005e5c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 8005dee:	4618      	mov	r0, r3
 8005df0:	f002 f9a2 	bl	8008138 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 8005df4:	f107 0310 	add.w	r3, r7, #16
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f002 f98a 	bl	8008114 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3384      	adds	r3, #132	; 0x84
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f107 0018 	add.w	r0, r7, #24
 8005e0c:	f107 0210 	add.w	r2, r7, #16
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	4798      	blx	r3
 8005e14:	f107 0320 	add.w	r3, r7, #32
 8005e18:	4911      	ldr	r1, [pc, #68]	; (8005e60 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f001 fd45 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f107 0220 	add.w	r2, r7, #32
 8005e26:	f107 0118 	add.w	r1, r7, #24
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f002 f957 	bl	80080de <_ZNK12SimpleStringplERKS_>
 8005e30:	f107 0320 	add.w	r3, r7, #32
 8005e34:	4618      	mov	r0, r3
 8005e36:	f002 f8f0 	bl	800801a <_ZN12SimpleStringD1Ev>
 8005e3a:	f107 0318 	add.w	r3, r7, #24
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f002 f8eb 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8005e44:	f107 0310 	add.w	r3, r7, #16
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f002 f8e6 	bl	800801a <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 8005e4e:	bf00      	nop
}
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	3728      	adds	r7, #40	; 0x28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	08016104 	.word	0x08016104
 8005e5c:	08016110 	.word	0x08016110
 8005e60:	08016114 	.word	0x08016114

08005e64 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f001 fd6d 	bl	8007952 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8005e78:	4b0a      	ldr	r3, [pc, #40]	; (8005ea4 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	225f      	movs	r2, #95	; 0x5f
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f001 fef2 	bl	8007c76 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	3301      	adds	r3, #1
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e7f0      	b.n	8005e7c <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 8005e9a:	bf00      	nop
}
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	0801611c 	.word	0x0801611c

08005ea8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d006      	beq.n	8005ec8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	3328      	adds	r3, #40	; 0x28
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f001 fd5d 	bl	8007982 <_ZN12SimpleStringaSERKS_>
    }
}
 8005ec8:	bf00      	nop
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8005ed0:	b590      	push	{r4, r7, lr}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3368      	adds	r3, #104	; 0x68
 8005ede:	681c      	ldr	r4, [r3, #0]
 8005ee0:	f107 0308 	add.w	r3, r7, #8
 8005ee4:	4908      	ldr	r1, [pc, #32]	; (8005f08 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 fcdf 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8005eec:	f107 0308 	add.w	r3, r7, #8
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	47a0      	blx	r4
 8005ef6:	f107 0308 	add.w	r3, r7, #8
 8005efa:	4618      	mov	r0, r3
 8005efc:	f002 f88d 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 8005f00:	bf00      	nop
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd90      	pop	{r4, r7, pc}
 8005f08:	08016128 	.word	0x08016128

08005f0c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8005f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f10:	b08a      	sub	sp, #40	; 0x28
 8005f12:	af04      	add	r7, sp, #16
 8005f14:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8005f1c:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 8005f22:	3314      	adds	r3, #20
 8005f24:	4618      	mov	r0, r3
 8005f26:	f002 f84b 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8005f2a:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 8005f32:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	4a23      	ldr	r2, [pc, #140]	; (8005fc8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8005f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f40:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 8005f42:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	4b1f      	ldr	r3, [pc, #124]	; (8005fc8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8005f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f50:	099b      	lsrs	r3, r3, #6
 8005f52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f56:	fb01 f303 	mul.w	r3, r1, r3
 8005f5a:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8005f5c:	603b      	str	r3, [r7, #0]
 8005f5e:	4b1b      	ldr	r3, [pc, #108]	; (8005fcc <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4798      	blx	r3
 8005f64:	4603      	mov	r3, r0
 8005f66:	f107 0008 	add.w	r0, r7, #8
 8005f6a:	9303      	str	r3, [sp, #12]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	9302      	str	r3, [sp, #8]
 8005f70:	9601      	str	r6, [sp, #4]
 8005f72:	9500      	str	r5, [sp, #0]
 8005f74:	4623      	mov	r3, r4
 8005f76:	4642      	mov	r2, r8
 8005f78:	4915      	ldr	r1, [pc, #84]	; (8005fd0 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8005f7a:	f002 fcdb 	bl	8008934 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3368      	adds	r3, #104	; 0x68
 8005f84:	681c      	ldr	r4, [r3, #0]
 8005f86:	f107 0308 	add.w	r3, r7, #8
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f002 f818 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8005f90:	4602      	mov	r2, r0
 8005f92:	f107 0310 	add.w	r3, r7, #16
 8005f96:	4611      	mov	r1, r2
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f001 fc86 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8005f9e:	f107 0310 	add.w	r3, r7, #16
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	47a0      	blx	r4
 8005fa8:	f107 0310 	add.w	r3, r7, #16
 8005fac:	4618      	mov	r0, r3
 8005fae:	f002 f834 	bl	800801a <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 8005fb2:	f107 0308 	add.w	r3, r7, #8
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f002 f82f 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 8005fbc:	bf00      	nop
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fc6:	bf00      	nop
 8005fc8:	10624dd3 	.word	0x10624dd3
 8005fcc:	200000a8 	.word	0x200000a8
 8005fd0:	08016154 	.word	0x08016154

08005fd4 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8005fd4:	b590      	push	{r4, r7, lr}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3368      	adds	r3, #104	; 0x68
 8005fe2:	681c      	ldr	r4, [r3, #0]
 8005fe4:	f107 0308 	add.w	r3, r7, #8
 8005fe8:	4912      	ldr	r1, [pc, #72]	; (8006034 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 8005fea:	4618      	mov	r0, r3
 8005fec:	f001 fc5d 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8005ff0:	f107 0308 	add.w	r3, r7, #8
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	47a0      	blx	r4
 8005ffa:	f107 0308 	add.w	r3, r7, #8
 8005ffe:	4618      	mov	r0, r3
 8006000:	f002 f80b 	bl	800801a <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3368      	adds	r3, #104	; 0x68
 800600a:	681c      	ldr	r4, [r3, #0]
 800600c:	f107 0310 	add.w	r3, r7, #16
 8006010:	4909      	ldr	r1, [pc, #36]	; (8006038 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 8006012:	4618      	mov	r0, r3
 8006014:	f001 fc49 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8006018:	f107 0310 	add.w	r3, r7, #16
 800601c:	4619      	mov	r1, r3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	47a0      	blx	r4
 8006022:	f107 0310 	add.w	r3, r7, #16
 8006026:	4618      	mov	r0, r3
 8006028:	f001 fff7 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800602c:	bf00      	nop
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	bd90      	pop	{r4, r7, pc}
 8006034:	080161c4 	.word	0x080161c4
 8006038:	080161d4 	.word	0x080161d4

0800603c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 ffb9 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800604e:	4603      	mov	r3, r0
 8006050:	4619      	mov	r1, r3
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f001 fc29 	bl	80078aa <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8006058:	4a0e      	ldr	r2, [pc, #56]	; (8006094 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 800605a:	490f      	ldr	r1, [pc, #60]	; (8006098 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f001 fe39 	bl	8007cd4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 8006062:	4a0e      	ldr	r2, [pc, #56]	; (800609c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 8006064:	490e      	ldr	r1, [pc, #56]	; (80060a0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f001 fe34 	bl	8007cd4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 800606c:	4a0d      	ldr	r2, [pc, #52]	; (80060a4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 800606e:	490e      	ldr	r1, [pc, #56]	; (80060a8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f001 fe2f 	bl	8007cd4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 8006076:	4a0d      	ldr	r2, [pc, #52]	; (80060ac <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8006078:	490d      	ldr	r1, [pc, #52]	; (80060b0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f001 fe2a 	bl	8007cd4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 8006080:	4a0c      	ldr	r2, [pc, #48]	; (80060b4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 8006082:	490d      	ldr	r1, [pc, #52]	; (80060b8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f001 fe25 	bl	8007cd4 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 800608a:	bf00      	nop
}
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	080161e4 	.word	0x080161e4
 8006098:	080161ec 	.word	0x080161ec
 800609c:	080161f0 	.word	0x080161f0
 80060a0:	080161f8 	.word	0x080161f8
 80060a4:	080161fc 	.word	0x080161fc
 80060a8:	08016204 	.word	0x08016204
 80060ac:	08016208 	.word	0x08016208
 80060b0:	08016210 	.word	0x08016210
 80060b4:	08016214 	.word	0x08016214
 80060b8:	08016220 	.word	0x08016220

080060bc <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 80060bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c0:	b096      	sub	sp, #88	; 0x58
 80060c2:	af08      	add	r7, sp, #32
 80060c4:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 80060ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80b2 	beq.w	800623a <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 80060da:	3328      	adds	r3, #40	; 0x28
 80060dc:	4618      	mov	r0, r3
 80060de:	f001 ff6f 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 80060e2:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	3328      	adds	r3, #40	; 0x28
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 ff84 	bl	8007ff8 <_ZNK12SimpleString7isEmptyEv>
 80060f0:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 80060f6:	4c53      	ldr	r4, [pc, #332]	; (8006244 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 80060f8:	e000      	b.n	80060fc <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 80060fa:	4c53      	ldr	r4, [pc, #332]	; (8006248 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8006100:	3314      	adds	r3, #20
 8006102:	4618      	mov	r0, r3
 8006104:	f001 ff5c 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8006108:	4605      	mov	r5, r0
 800610a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610c:	4618      	mov	r0, r3
 800610e:	f001 ff57 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8006112:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8006114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006116:	6a1a      	ldr	r2, [r3, #32]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8006120:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8006122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	4a49      	ldr	r2, [pc, #292]	; (800624c <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8006128:	fba2 2303 	umull	r2, r3, r2, r3
 800612c:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 800612e:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8006130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	4b45      	ldr	r3, [pc, #276]	; (800624c <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8006136:	fba3 1302 	umull	r1, r3, r3, r2
 800613a:	099b      	lsrs	r3, r3, #6
 800613c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006140:	fb01 f303 	mul.w	r3, r1, r3
 8006144:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614a:	3314      	adds	r3, #20
 800614c:	4618      	mov	r0, r3
 800614e:	f001 ff37 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8006152:	4602      	mov	r2, r0
 8006154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	f107 0014 	add.w	r0, r7, #20
 800615c:	9306      	str	r3, [sp, #24]
 800615e:	9205      	str	r2, [sp, #20]
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	9204      	str	r2, [sp, #16]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	9203      	str	r2, [sp, #12]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	9302      	str	r3, [sp, #8]
 800616c:	9601      	str	r6, [sp, #4]
 800616e:	9500      	str	r5, [sp, #0]
 8006170:	4623      	mov	r3, r4
 8006172:	4642      	mov	r2, r8
 8006174:	4936      	ldr	r1, [pc, #216]	; (8006250 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 8006176:	f002 fbdd 	bl	8008934 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3368      	adds	r3, #104	; 0x68
 8006180:	681c      	ldr	r4, [r3, #0]
 8006182:	f107 0314 	add.w	r3, r7, #20
 8006186:	4618      	mov	r0, r3
 8006188:	f001 ff1a 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800618c:	4602      	mov	r2, r0
 800618e:	f107 031c 	add.w	r3, r7, #28
 8006192:	4611      	mov	r1, r2
 8006194:	4618      	mov	r0, r3
 8006196:	f001 fb88 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800619a:	f107 031c 	add.w	r3, r7, #28
 800619e:	4619      	mov	r1, r3
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	47a0      	blx	r4
 80061a4:	f107 031c 	add.w	r3, r7, #28
 80061a8:	4618      	mov	r0, r3
 80061aa:	f001 ff36 	bl	800801a <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061b4:	6a12      	ldr	r2, [r2, #32]
 80061b6:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 80061b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d007      	beq.n	80061d0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3388      	adds	r3, #136	; 0x88
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	4798      	blx	r3
 80061ce:	e017      	b.n	8006200 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 80061d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d2:	7c1b      	ldrb	r3, [r3, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d013      	beq.n	8006200 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3368      	adds	r3, #104	; 0x68
 80061de:	681c      	ldr	r4, [r3, #0]
 80061e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061e4:	491b      	ldr	r1, [pc, #108]	; (8006254 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 80061e6:	4618      	mov	r0, r3
 80061e8:	f001 fb5f 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80061ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061f0:	4619      	mov	r1, r3
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	47a0      	blx	r4
 80061f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 ff0d 	bl	800801a <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3368      	adds	r3, #104	; 0x68
 8006206:	681c      	ldr	r4, [r3, #0]
 8006208:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800620c:	4912      	ldr	r1, [pc, #72]	; (8006258 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 800620e:	4618      	mov	r0, r3
 8006210:	f001 fb4b 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8006214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006218:	4619      	mov	r1, r3
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	47a0      	blx	r4
 800621e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006222:	4618      	mov	r0, r3
 8006224:	f001 fef9 	bl	800801a <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8006228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 800622e:	f107 0314 	add.w	r3, r7, #20
 8006232:	4618      	mov	r0, r3
 8006234:	f001 fef1 	bl	800801a <_ZN12SimpleStringD1Ev>
    while (cur) {
 8006238:	e749      	b.n	80060ce <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 800623a:	bf00      	nop
 800623c:	3738      	adds	r7, #56	; 0x38
 800623e:	46bd      	mov	sp, r7
 8006240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006244:	080160e4 	.word	0x080160e4
 8006248:	08016224 	.word	0x08016224
 800624c:	10624dd3 	.word	0x10624dd3
 8006250:	08016228 	.word	0x08016228
 8006254:	08016284 	.word	0x08016284
 8006258:	08016294 	.word	0x08016294

0800625c <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 800625c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800625e:	b091      	sub	sp, #68	; 0x44
 8006260:	af02      	add	r7, sp, #8
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68d9      	ldr	r1, [r3, #12]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3308      	adds	r3, #8
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f107 0210 	add.w	r2, r7, #16
 8006278:	4610      	mov	r0, r2
 800627a:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800627c:	f107 0310 	add.w	r3, r7, #16
 8006280:	4618      	mov	r0, r3
 8006282:	f001 fe9d 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8006286:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3314      	adds	r3, #20
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4610      	mov	r0, r2
 8006298:	4798      	blx	r3
 800629a:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800629c:	461e      	mov	r6, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3380      	adds	r3, #128	; 0x80
 80062a4:	681c      	ldr	r4, [r3, #0]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68d9      	ldr	r1, [r3, #12]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3318      	adds	r3, #24
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f107 0220 	add.w	r2, r7, #32
 80062b8:	4610      	mov	r0, r2
 80062ba:	4798      	blx	r3
 80062bc:	f107 0318 	add.w	r3, r7, #24
 80062c0:	f107 0220 	add.w	r2, r7, #32
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	4618      	mov	r0, r3
 80062c8:	47a0      	blx	r4
 80062ca:	f107 0318 	add.w	r3, r7, #24
 80062ce:	4618      	mov	r0, r3
 80062d0:	f001 fe76 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 80062d4:	4603      	mov	r3, r0
 80062d6:	f107 0008 	add.w	r0, r7, #8
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	4633      	mov	r3, r6
 80062de:	462a      	mov	r2, r5
 80062e0:	4924      	ldr	r1, [pc, #144]	; (8006374 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 80062e2:	f002 fb27 	bl	8008934 <_Z16StringFromFormatPKcz>
 80062e6:	f107 0318 	add.w	r3, r7, #24
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 fe95 	bl	800801a <_ZN12SimpleStringD1Ev>
 80062f0:	f107 0320 	add.w	r3, r7, #32
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 fe90 	bl	800801a <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 80062fa:	f107 0310 	add.w	r3, r7, #16
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 fe8b 	bl	800801a <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3368      	adds	r3, #104	; 0x68
 800630a:	681c      	ldr	r4, [r3, #0]
 800630c:	f107 0308 	add.w	r3, r7, #8
 8006310:	4618      	mov	r0, r3
 8006312:	f001 fe55 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8006316:	4602      	mov	r2, r0
 8006318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800631c:	4611      	mov	r1, r2
 800631e:	4618      	mov	r0, r3
 8006320:	f001 fac3 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8006324:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	47a0      	blx	r4
 800632e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006332:	4618      	mov	r0, r3
 8006334:	f001 fe71 	bl	800801a <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3368      	adds	r3, #104	; 0x68
 800633e:	681c      	ldr	r4, [r3, #0]
 8006340:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006344:	490c      	ldr	r1, [pc, #48]	; (8006378 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 8006346:	4618      	mov	r0, r3
 8006348:	f001 faaf 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800634c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	47a0      	blx	r4
 8006356:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800635a:	4618      	mov	r0, r3
 800635c:	f001 fe5d 	bl	800801a <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8006360:	f107 0308 	add.w	r3, r7, #8
 8006364:	4618      	mov	r0, r3
 8006366:	f001 fe58 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800636a:	bf00      	nop
 800636c:	373c      	adds	r7, #60	; 0x3c
 800636e:	46bd      	mov	sp, r7
 8006370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006372:	bf00      	nop
 8006374:	080162a4 	.word	0x080162a4
 8006378:	080162e0 	.word	0x080162e0

0800637c <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 800637c:	b590      	push	{r4, r7, lr}
 800637e:	b08d      	sub	sp, #52	; 0x34
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3368      	adds	r3, #104	; 0x68
 800638a:	681c      	ldr	r4, [r3, #0]
 800638c:	f107 0308 	add.w	r3, r7, #8
 8006390:	4933      	ldr	r1, [pc, #204]	; (8006460 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 8006392:	4618      	mov	r0, r3
 8006394:	f001 fa89 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8006398:	f107 0308 	add.w	r3, r7, #8
 800639c:	4619      	mov	r1, r3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	47a0      	blx	r4
 80063a2:	f107 0308 	add.w	r3, r7, #8
 80063a6:	4618      	mov	r0, r3
 80063a8:	f001 fe37 	bl	800801a <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3368      	adds	r3, #104	; 0x68
 80063b2:	681c      	ldr	r4, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3380      	adds	r3, #128	; 0x80
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6912      	ldr	r2, [r2, #16]
 80063c0:	3230      	adds	r2, #48	; 0x30
 80063c2:	f107 0010 	add.w	r0, r7, #16
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	4798      	blx	r3
 80063ca:	f107 0310 	add.w	r3, r7, #16
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	47a0      	blx	r4
 80063d4:	f107 0310 	add.w	r3, r7, #16
 80063d8:	4618      	mov	r0, r3
 80063da:	f001 fe1e 	bl	800801a <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3368      	adds	r3, #104	; 0x68
 80063e4:	681c      	ldr	r4, [r3, #0]
 80063e6:	f107 0318 	add.w	r3, r7, #24
 80063ea:	491e      	ldr	r1, [pc, #120]	; (8006464 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 80063ec:	4618      	mov	r0, r3
 80063ee:	f001 fa5c 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80063f2:	f107 0318 	add.w	r3, r7, #24
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	47a0      	blx	r4
 80063fc:	f107 0318 	add.w	r3, r7, #24
 8006400:	4618      	mov	r0, r3
 8006402:	f001 fe0a 	bl	800801a <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3368      	adds	r3, #104	; 0x68
 800640c:	681c      	ldr	r4, [r3, #0]
 800640e:	f107 0320 	add.w	r3, r7, #32
 8006412:	4915      	ldr	r1, [pc, #84]	; (8006468 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8006414:	4618      	mov	r0, r3
 8006416:	f001 fa48 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800641a:	f107 0320 	add.w	r3, r7, #32
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	47a0      	blx	r4
 8006424:	f107 0320 	add.w	r3, r7, #32
 8006428:	4618      	mov	r0, r3
 800642a:	f001 fdf6 	bl	800801a <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3368      	adds	r3, #104	; 0x68
 8006434:	681c      	ldr	r4, [r3, #0]
 8006436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800643a:	490c      	ldr	r1, [pc, #48]	; (800646c <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 800643c:	4618      	mov	r0, r3
 800643e:	f001 fa34 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8006442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	47a0      	blx	r4
 800644c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006450:	4618      	mov	r0, r3
 8006452:	f001 fde2 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 8006456:	bf00      	nop
 8006458:	3734      	adds	r7, #52	; 0x34
 800645a:	46bd      	mov	sp, r7
 800645c:	bd90      	pop	{r4, r7, pc}
 800645e:	bf00      	nop
 8006460:	080162ec 	.word	0x080162ec
 8006464:	080162fc 	.word	0x080162fc
 8006468:	0801630c 	.word	0x0801630c
 800646c:	08016328 	.word	0x08016328

08006470 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 8006470:	b590      	push	{r4, r7, lr}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3360      	adds	r3, #96	; 0x60
 800647e:	681c      	ldr	r4, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	335c      	adds	r3, #92	; 0x5c
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6912      	ldr	r2, [r2, #16]
 800648c:	3214      	adds	r2, #20
 800648e:	f107 0008 	add.w	r0, r7, #8
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	4798      	blx	r3
 8006496:	f107 0308 	add.w	r3, r7, #8
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	47a0      	blx	r4
 80064a0:	f107 0308 	add.w	r3, r7, #8
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 fdb8 	bl	800801a <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3370      	adds	r3, #112	; 0x70
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	4798      	blx	r3
    writeTestSuiteSummary();
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3374      	adds	r3, #116	; 0x74
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	4798      	blx	r3
    writeProperties();
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3378      	adds	r3, #120	; 0x78
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	4798      	blx	r3
    writeTestCases();
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	337c      	adds	r3, #124	; 0x7c
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	4798      	blx	r3
    writeFileEnding();
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	338c      	adds	r3, #140	; 0x8c
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	4798      	blx	r3
    closeFile();
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	336c      	adds	r3, #108	; 0x6c
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	4798      	blx	r3
}
 80064f2:	bf00      	nop
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd90      	pop	{r4, r7, pc}

080064fa <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	3330      	adds	r3, #48	; 0x30
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	4618      	mov	r0, r3
 8006524:	f001 fe08 	bl	8008138 <_ZN12SimpleStringpLEPKc>
}
 8006528:	bf00      	nop
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 8006570:	b590      	push	{r4, r7, lr}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d113      	bne.n	80065ae <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	3201      	adds	r2, #1
 800658e:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 8006590:	f240 1233 	movw	r2, #307	; 0x133
 8006594:	4908      	ldr	r1, [pc, #32]	; (80065b8 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 8006596:	2034      	movs	r0, #52	; 0x34
 8006598:	f000 fa9e 	bl	8006ad8 <_ZnwjPKci>
 800659c:	4604      	mov	r4, r0
 800659e:	6839      	ldr	r1, [r7, #0]
 80065a0:	4620      	mov	r0, r4
 80065a2:	f002 ff4f 	bl	8009444 <_ZN11TestFailureC1ERKS_>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	60dc      	str	r4, [r3, #12]
    }
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd90      	pop	{r4, r7, pc}
 80065b6:	bf00      	nop
 80065b8:	080160e8 	.word	0x080160e8

080065bc <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 80065bc:	b5b0      	push	{r4, r5, r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 80065c6:	4b08      	ldr	r3, [pc, #32]	; (80065e8 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 80065c8:	681d      	ldr	r5, [r3, #0]
 80065ca:	6838      	ldr	r0, [r7, #0]
 80065cc:	f001 fcf8 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 80065d0:	4602      	mov	r2, r0
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691c      	ldr	r4, [r3, #16]
 80065d6:	4905      	ldr	r1, [pc, #20]	; (80065ec <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 80065d8:	4610      	mov	r0, r2
 80065da:	47a8      	blx	r5
 80065dc:	4603      	mov	r3, r0
 80065de:	6263      	str	r3, [r4, #36]	; 0x24
}
 80065e0:	bf00      	nop
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bdb0      	pop	{r4, r5, r7, pc}
 80065e8:	200000b0 	.word	0x200000b0
 80065ec:	08016338 	.word	0x08016338

080065f0 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 80065f0:	b590      	push	{r4, r7, lr}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 80065fa:	4b08      	ldr	r3, [pc, #32]	; (800661c <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 80065fc:	681c      	ldr	r4, [r3, #0]
 80065fe:	6838      	ldr	r0, [r7, #0]
 8006600:	f001 fcde 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8006604:	4602      	mov	r2, r0
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	4619      	mov	r1, r3
 800660e:	4610      	mov	r0, r2
 8006610:	47a0      	blx	r4
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	bd90      	pop	{r4, r7, pc}
 800661a:	bf00      	nop
 800661c:	200000b4 	.word	0x200000b4

08006620 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8006628:	4b05      	ldr	r3, [pc, #20]	; (8006640 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6912      	ldr	r2, [r2, #16]
 8006630:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006632:	4610      	mov	r0, r2
 8006634:	4798      	blx	r3
}
 8006636:	bf00      	nop
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	200000b8 	.word	0x200000b8

08006644 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	603b      	str	r3, [r7, #0]
        return false;
 8006652:	2300      	movs	r3, #0
    }
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
    {
 8006668:	4a04      	ldr	r2, [pc, #16]	; (800667c <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	601a      	str	r2, [r3, #0]
    }
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4618      	mov	r0, r3
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	08018788 	.word	0x08018788

08006680 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
    }
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff ffe9 	bl	8006660 <_ZN17MemoryLeakFailureD1Ev>
 800668e:	2104      	movs	r1, #4
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fa35 	bl	8006b00 <_ZdlPvj>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 80066a0:	b590      	push	{r4, r7, lr}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	687c      	ldr	r4, [r7, #4]
 80066aa:	f000 fc71 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80066ae:	4603      	mov	r3, r0
 80066b0:	4618      	mov	r0, r3
 80066b2:	f00b f972 	bl	801199a <_ZN18MemoryLeakDetector8getMutexEv>
 80066b6:	4603      	mov	r3, r0
 80066b8:	4619      	mov	r1, r3
 80066ba:	4620      	mov	r0, r4
 80066bc:	f000 fe4a 	bl	8007354 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4618      	mov	r0, r3
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd90      	pop	{r4, r7, pc}

080066ca <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 fe4f 	bl	8007378 <_ZN15ScopedMutexLockD1Ev>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4618      	mov	r0, r3
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 80066e4:	b590      	push	{r4, r7, lr}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 80066f0:	f000 fc4e 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80066f4:	4604      	mov	r4, r0
 80066f6:	f004 faf7 	bl	800ace8 <_Z25getCurrentMallocAllocatorv>
 80066fa:	4601      	mov	r1, r0
 80066fc:	2301      	movs	r3, #1
 80066fe:	9301      	str	r3, [sp, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4620      	mov	r0, r4
 800670a:	f00b fb89 	bl	8011e20 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800670e:	4603      	mov	r3, r0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	bd90      	pop	{r4, r7, pc}

08006718 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 8006718:	b590      	push	{r4, r7, lr}
 800671a:	b087      	sub	sp, #28
 800671c:	af02      	add	r7, sp, #8
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 8006724:	f000 fc34 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006728:	4603      	mov	r3, r0
 800672a:	68f9      	ldr	r1, [r7, #12]
 800672c:	4618      	mov	r0, r3
 800672e:	f00b f9e3 	bl	8011af8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 8006732:	f000 fc2d 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006736:	4604      	mov	r4, r0
 8006738:	f004 fad6 	bl	800ace8 <_Z25getCurrentMallocAllocatorv>
 800673c:	4601      	mov	r1, r0
 800673e:	2301      	movs	r3, #1
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4620      	mov	r0, r4
 800674c:	f00b fb9c 	bl	8011e88 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8006750:	bf00      	nop
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	bd90      	pop	{r4, r7, pc}

08006758 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8006758:	b590      	push	{r4, r7, lr}
 800675a:	b089      	sub	sp, #36	; 0x24
 800675c:	af04      	add	r7, sp, #16
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 8006766:	f000 fc13 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800676a:	4604      	mov	r4, r0
 800676c:	f004 fabc 	bl	800ace8 <_Z25getCurrentMallocAllocatorv>
 8006770:	4601      	mov	r1, r0
 8006772:	2301      	movs	r3, #1
 8006774:	9302      	str	r3, [sp, #8]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	9301      	str	r3, [sp, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4620      	mov	r0, r4
 8006784:	f00b fbe4 	bl	8011f50 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 8006788:	4603      	mov	r3, r0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	bd90      	pop	{r4, r7, pc}
	...

08006794 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 80067a0:	4b04      	ldr	r3, [pc, #16]	; (80067b4 <_ZL13normal_mallocjPKcj+0x20>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	4798      	blx	r3
 80067a8:	4603      	mov	r3, r0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	200000c4 	.word	0x200000c4

080067b8 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 80067c6:	4b05      	ldr	r3, [pc, #20]	; (80067dc <_ZL14normal_reallocPvjPKcj+0x24>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	4798      	blx	r3
 80067d0:	4603      	mov	r3, r0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	200000c8 	.word	0x200000c8

080067e0 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 80067ec:	4b03      	ldr	r3, [pc, #12]	; (80067fc <_ZL11normal_freePvPKcj+0x1c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	4798      	blx	r3
}
 80067f4:	bf00      	nop
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	200000cc 	.word	0x200000cc

08006800 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8006800:	b590      	push	{r4, r7, lr}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8006808:	f107 0308 	add.w	r3, r7, #8
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff ff47 	bl	80066a0 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8006812:	f000 fbbd 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006816:	4604      	mov	r4, r0
 8006818:	f004 f9b6 	bl	800ab88 <_Z22getCurrentNewAllocatorv>
 800681c:	4601      	mov	r1, r0
 800681e:	2300      	movs	r3, #0
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	4620      	mov	r0, r4
 8006824:	f00b fa6a 	bl	8011cfc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006828:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800682a:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 800682c:	f107 0308 	add.w	r3, r7, #8
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff ff4a 	bl	80066ca <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8006836:	4623      	mov	r3, r4
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	bd90      	pop	{r4, r7, pc}

08006840 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8006840:	b590      	push	{r4, r7, lr}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8006848:	f000 fba2 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800684c:	4604      	mov	r4, r0
 800684e:	f004 f99b 	bl	800ab88 <_Z22getCurrentNewAllocatorv>
 8006852:	4601      	mov	r1, r0
 8006854:	2300      	movs	r3, #0
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	4620      	mov	r0, r4
 800685a:	f00b fa4f 	bl	8011cfc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800685e:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006860:	68fb      	ldr	r3, [r7, #12]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	bd90      	pop	{r4, r7, pc}

0800686a <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800686a:	b590      	push	{r4, r7, lr}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8006872:	f000 fb8d 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006876:	4604      	mov	r4, r0
 8006878:	f004 f986 	bl	800ab88 <_Z22getCurrentNewAllocatorv>
 800687c:	4601      	mov	r1, r0
 800687e:	2300      	movs	r3, #0
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	4620      	mov	r0, r4
 8006884:	f00b fa3a 	bl	8011cfc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006888:	4603      	mov	r3, r0
}
 800688a:	4618      	mov	r0, r3
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	bd90      	pop	{r4, r7, pc}

08006892 <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8006892:	b590      	push	{r4, r7, lr}
 8006894:	b089      	sub	sp, #36	; 0x24
 8006896:	af02      	add	r7, sp, #8
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 800689e:	f000 fb77 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80068a2:	4604      	mov	r4, r0
 80068a4:	f004 f970 	bl	800ab88 <_Z22getCurrentNewAllocatorv>
 80068a8:	4601      	mov	r1, r0
 80068aa:	2300      	movs	r3, #0
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4620      	mov	r0, r4
 80068b8:	f00b fab2 	bl	8011e20 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80068bc:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80068be:	697b      	ldr	r3, [r7, #20]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	371c      	adds	r7, #28
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd90      	pop	{r4, r7, pc}

080068c8 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 80068c8:	b590      	push	{r4, r7, lr}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 80068d0:	f000 fb5e 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80068d4:	4604      	mov	r4, r0
 80068d6:	f004 f9af 	bl	800ac38 <_Z27getCurrentNewArrayAllocatorv>
 80068da:	4601      	mov	r1, r0
 80068dc:	2300      	movs	r3, #0
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	4620      	mov	r0, r4
 80068e2:	f00b fa0b 	bl	8011cfc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80068e6:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80068e8:	68fb      	ldr	r3, [r7, #12]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd90      	pop	{r4, r7, pc}

080068f2 <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 80068f2:	b590      	push	{r4, r7, lr}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 80068fa:	f000 fb49 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80068fe:	4604      	mov	r4, r0
 8006900:	f004 f99a 	bl	800ac38 <_Z27getCurrentNewArrayAllocatorv>
 8006904:	4601      	mov	r1, r0
 8006906:	2300      	movs	r3, #0
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	4620      	mov	r0, r4
 800690c:	f00b f9f6 	bl	8011cfc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006910:	4603      	mov	r3, r0
}
 8006912:	4618      	mov	r0, r3
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	bd90      	pop	{r4, r7, pc}

0800691a <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800691a:	b590      	push	{r4, r7, lr}
 800691c:	b089      	sub	sp, #36	; 0x24
 800691e:	af02      	add	r7, sp, #8
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8006926:	f000 fb33 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800692a:	4604      	mov	r4, r0
 800692c:	f004 f984 	bl	800ac38 <_Z27getCurrentNewArrayAllocatorv>
 8006930:	4601      	mov	r1, r0
 8006932:	2300      	movs	r3, #0
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4620      	mov	r0, r4
 8006940:	f00b fa6e 	bl	8011e20 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8006944:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006946:	697b      	ldr	r3, [r7, #20]
}
 8006948:	4618      	mov	r0, r3
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	bd90      	pop	{r4, r7, pc}

08006950 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 8006950:	b590      	push	{r4, r7, lr}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8006958:	f000 fb1a 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800695c:	4603      	mov	r3, r0
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	4618      	mov	r0, r3
 8006962:	f00b f8c9 	bl	8011af8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 8006966:	f000 fb13 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800696a:	4604      	mov	r4, r0
 800696c:	f004 f90c 	bl	800ab88 <_Z22getCurrentNewAllocatorv>
 8006970:	4601      	mov	r1, r0
 8006972:	2300      	movs	r3, #0
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	4620      	mov	r0, r4
 8006978:	f00b fad0 	bl	8011f1c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	bd90      	pop	{r4, r7, pc}

08006984 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 8006984:	b590      	push	{r4, r7, lr}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800698c:	f000 fb00 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006990:	4603      	mov	r3, r0
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	4618      	mov	r0, r3
 8006996:	f00b f8af 	bl	8011af8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 800699a:	f000 faf9 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800699e:	4604      	mov	r4, r0
 80069a0:	f004 f94a 	bl	800ac38 <_Z27getCurrentNewArrayAllocatorv>
 80069a4:	4601      	mov	r1, r0
 80069a6:	2300      	movs	r3, #0
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	4620      	mov	r0, r4
 80069ac:	f00b fab6 	bl	8011f1c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd90      	pop	{r4, r7, pc}

080069b8 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 80069c0:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <_ZL19normal_operator_newj+0x1c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	4798      	blx	r3
 80069c8:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80069ca:	68fb      	ldr	r3, [r7, #12]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	200000c4 	.word	0x200000c4

080069d8 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 80069e0:	4b04      	ldr	r3, [pc, #16]	; (80069f4 <_ZL27normal_operator_new_nothrowj+0x1c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	4798      	blx	r3
 80069e8:	4603      	mov	r3, r0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	200000c4 	.word	0x200000c4

080069f8 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8006a04:	4b04      	ldr	r3, [pc, #16]	; (8006a18 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	4798      	blx	r3
 8006a0c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006a0e:	697b      	ldr	r3, [r7, #20]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	200000c4 	.word	0x200000c4

08006a1c <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8006a24:	4b04      	ldr	r3, [pc, #16]	; (8006a38 <_ZL25normal_operator_new_arrayj+0x1c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	4798      	blx	r3
 8006a2c:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	200000c4 	.word	0x200000c4

08006a3c <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8006a44:	4b04      	ldr	r3, [pc, #16]	; (8006a58 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	4798      	blx	r3
 8006a4c:	4603      	mov	r3, r0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	200000c4 	.word	0x200000c4

08006a5c <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8006a68:	4b04      	ldr	r3, [pc, #16]	; (8006a7c <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	4798      	blx	r3
 8006a70:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006a72:	697b      	ldr	r3, [r7, #20]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	200000c4 	.word	0x200000c4

08006a80 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8006a88:	4b03      	ldr	r3, [pc, #12]	; (8006a98 <_ZL22normal_operator_deletePv+0x18>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	4798      	blx	r3
}
 8006a90:	bf00      	nop
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	200000cc 	.word	0x200000cc

08006a9c <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8006aa4:	4b03      	ldr	r3, [pc, #12]	; (8006ab4 <_ZL28normal_operator_delete_arrayPv+0x18>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	4798      	blx	r3
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	200000cc 	.word	0x200000cc

08006ab8 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 8006ac0:	4b04      	ldr	r3, [pc, #16]	; (8006ad4 <_Znwj+0x1c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	4798      	blx	r3
 8006ac8:	4603      	mov	r3, r0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20000028 	.word	0x20000028

08006ad8 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 8006ae4:	4b05      	ldr	r3, [pc, #20]	; (8006afc <_ZnwjPKci+0x24>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	68b9      	ldr	r1, [r7, #8]
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	4798      	blx	r3
 8006af0:	4603      	mov	r3, r0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000030 	.word	0x20000030

08006b00 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 8006b0a:	4b04      	ldr	r3, [pc, #16]	; (8006b1c <_ZdlPvj+0x1c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	4798      	blx	r3
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000040 	.word	0x20000040

08006b20 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 8006b2c:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <_ZnajPKci+0x24>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	4798      	blx	r3
 8006b38:	4603      	mov	r3, r0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	2000003c 	.word	0x2000003c

08006b48 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 8006b50:	4b03      	ldr	r3, [pc, #12]	; (8006b60 <_ZdaPv+0x18>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	4798      	blx	r3
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20000044 	.word	0x20000044

08006b64 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 8006b6e:	4b04      	ldr	r3, [pc, #16]	; (8006b80 <_ZdaPvj+0x1c>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	4798      	blx	r3
}
 8006b76:	bf00      	nop
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000044 	.word	0x20000044

08006b84 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 8006b88:	4b12      	ldr	r3, [pc, #72]	; (8006bd4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 8006b8a:	4a13      	ldr	r2, [pc, #76]	; (8006bd8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 8006b8c:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 8006b8e:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 8006b90:	4a13      	ldr	r2, [pc, #76]	; (8006be0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 8006b92:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 8006b94:	4b13      	ldr	r3, [pc, #76]	; (8006be4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 8006b96:	4a14      	ldr	r2, [pc, #80]	; (8006be8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 8006b98:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 8006b9a:	4b14      	ldr	r3, [pc, #80]	; (8006bec <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 8006b9c:	4a14      	ldr	r2, [pc, #80]	; (8006bf0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 8006b9e:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 8006ba0:	4b14      	ldr	r3, [pc, #80]	; (8006bf4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 8006ba2:	4a15      	ldr	r2, [pc, #84]	; (8006bf8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 8006ba4:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 8006ba6:	4b15      	ldr	r3, [pc, #84]	; (8006bfc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8006ba8:	4a15      	ldr	r2, [pc, #84]	; (8006c00 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 8006baa:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8006bac:	4b15      	ldr	r3, [pc, #84]	; (8006c04 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 8006bae:	4a16      	ldr	r2, [pc, #88]	; (8006c08 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 8006bb0:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 8006bb2:	4b16      	ldr	r3, [pc, #88]	; (8006c0c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 8006bb4:	4a16      	ldr	r2, [pc, #88]	; (8006c10 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 8006bb6:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 8006bb8:	4b16      	ldr	r3, [pc, #88]	; (8006c14 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 8006bba:	4a17      	ldr	r2, [pc, #92]	; (8006c18 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8006bbc:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 8006bbe:	4b17      	ldr	r3, [pc, #92]	; (8006c1c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 8006bc0:	4a17      	ldr	r2, [pc, #92]	; (8006c20 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 8006bc2:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 8006bc4:	4b17      	ldr	r3, [pc, #92]	; (8006c24 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 8006bc6:	4a18      	ldr	r2, [pc, #96]	; (8006c28 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 8006bc8:	601a      	str	r2, [r3, #0]

#endif
}
 8006bca:	bf00      	nop
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	20000028 	.word	0x20000028
 8006bd8:	080069b9 	.word	0x080069b9
 8006bdc:	2000002c 	.word	0x2000002c
 8006be0:	080069d9 	.word	0x080069d9
 8006be4:	20000030 	.word	0x20000030
 8006be8:	080069f9 	.word	0x080069f9
 8006bec:	20000034 	.word	0x20000034
 8006bf0:	08006a1d 	.word	0x08006a1d
 8006bf4:	20000038 	.word	0x20000038
 8006bf8:	08006a3d 	.word	0x08006a3d
 8006bfc:	2000003c 	.word	0x2000003c
 8006c00:	08006a5d 	.word	0x08006a5d
 8006c04:	20000040 	.word	0x20000040
 8006c08:	08006a81 	.word	0x08006a81
 8006c0c:	20000044 	.word	0x20000044
 8006c10:	08006a9d 	.word	0x08006a9d
 8006c14:	20000010 	.word	0x20000010
 8006c18:	08006795 	.word	0x08006795
 8006c1c:	20000018 	.word	0x20000018
 8006c20:	080067b9 	.word	0x080067b9
 8006c24:	20000014 	.word	0x20000014
 8006c28:	080067e1 	.word	0x080067e1

08006c2c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8006c30:	4b08      	ldr	r3, [pc, #32]	; (8006c54 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a08      	ldr	r2, [pc, #32]	; (8006c58 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d004      	beq.n	8006c44 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 8006c3a:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a07      	ldr	r2, [pc, #28]	; (8006c5c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d101      	bne.n	8006c48 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 8006c44:	2301      	movs	r3, #1
 8006c46:	e000      	b.n	8006c4a <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 8006c48:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	20000028 	.word	0x20000028
 8006c58:	08006841 	.word	0x08006841
 8006c5c:	08006801 	.word	0x08006801

08006c60 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 8006c64:	4b1f      	ldr	r3, [pc, #124]	; (8006ce4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ce4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	4b1d      	ldr	r3, [pc, #116]	; (8006ce4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	bfcc      	ite	gt
 8006c76:	2301      	movgt	r3, #1
 8006c78:	2300      	movle	r3, #0
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d12e      	bne.n	8006cde <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 8006c80:	4b19      	ldr	r3, [pc, #100]	; (8006ce8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a19      	ldr	r2, [pc, #100]	; (8006cec <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 8006c86:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 8006c88:	4b19      	ldr	r3, [pc, #100]	; (8006cf0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a19      	ldr	r2, [pc, #100]	; (8006cf4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 8006c8e:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 8006c90:	4b19      	ldr	r3, [pc, #100]	; (8006cf8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a19      	ldr	r2, [pc, #100]	; (8006cfc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 8006c96:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 8006c98:	4b19      	ldr	r3, [pc, #100]	; (8006d00 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a19      	ldr	r2, [pc, #100]	; (8006d04 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 8006c9e:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 8006ca0:	4b19      	ldr	r3, [pc, #100]	; (8006d08 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a19      	ldr	r2, [pc, #100]	; (8006d0c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 8006ca6:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8006ca8:	4b19      	ldr	r3, [pc, #100]	; (8006d10 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a19      	ldr	r2, [pc, #100]	; (8006d14 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 8006cae:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8006cb0:	4b19      	ldr	r3, [pc, #100]	; (8006d18 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a19      	ldr	r2, [pc, #100]	; (8006d1c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 8006cb6:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8006cb8:	4b19      	ldr	r3, [pc, #100]	; (8006d20 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a19      	ldr	r2, [pc, #100]	; (8006d24 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 8006cbe:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 8006cc0:	4b19      	ldr	r3, [pc, #100]	; (8006d28 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a19      	ldr	r2, [pc, #100]	; (8006d2c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 8006cc6:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8006cc8:	4b19      	ldr	r3, [pc, #100]	; (8006d30 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a19      	ldr	r2, [pc, #100]	; (8006d34 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 8006cce:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 8006cd0:	4b19      	ldr	r3, [pc, #100]	; (8006d38 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a19      	ldr	r2, [pc, #100]	; (8006d3c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 8006cd6:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8006cd8:	f7ff ff54 	bl	8006b84 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8006cdc:	e000      	b.n	8006ce0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 8006cde:	bf00      	nop
#endif
}
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000598 	.word	0x20000598
 8006ce8:	20000028 	.word	0x20000028
 8006cec:	20000048 	.word	0x20000048
 8006cf0:	2000002c 	.word	0x2000002c
 8006cf4:	2000004c 	.word	0x2000004c
 8006cf8:	20000030 	.word	0x20000030
 8006cfc:	20000050 	.word	0x20000050
 8006d00:	20000034 	.word	0x20000034
 8006d04:	20000054 	.word	0x20000054
 8006d08:	20000038 	.word	0x20000038
 8006d0c:	20000058 	.word	0x20000058
 8006d10:	2000003c 	.word	0x2000003c
 8006d14:	2000005c 	.word	0x2000005c
 8006d18:	20000040 	.word	0x20000040
 8006d1c:	20000060 	.word	0x20000060
 8006d20:	20000044 	.word	0x20000044
 8006d24:	20000064 	.word	0x20000064
 8006d28:	20000010 	.word	0x20000010
 8006d2c:	2000001c 	.word	0x2000001c
 8006d30:	20000018 	.word	0x20000018
 8006d34:	20000024 	.word	0x20000024
 8006d38:	20000014 	.word	0x20000014
 8006d3c:	20000020 	.word	0x20000020

08006d40 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 8006d44:	4b1f      	ldr	r3, [pc, #124]	; (8006dc4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	4a1e      	ldr	r2, [pc, #120]	; (8006dc4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	4b1d      	ldr	r3, [pc, #116]	; (8006dc4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	bfcc      	ite	gt
 8006d56:	2301      	movgt	r3, #1
 8006d58:	2300      	movle	r3, #0
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d12c      	bne.n	8006dba <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 8006d60:	4b19      	ldr	r3, [pc, #100]	; (8006dc8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a19      	ldr	r2, [pc, #100]	; (8006dcc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 8006d66:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 8006d68:	4b19      	ldr	r3, [pc, #100]	; (8006dd0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a19      	ldr	r2, [pc, #100]	; (8006dd4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 8006d6e:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 8006d70:	4b19      	ldr	r3, [pc, #100]	; (8006dd8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a19      	ldr	r2, [pc, #100]	; (8006ddc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 8006d76:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 8006d78:	4b19      	ldr	r3, [pc, #100]	; (8006de0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a19      	ldr	r2, [pc, #100]	; (8006de4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 8006d7e:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 8006d80:	4b19      	ldr	r3, [pc, #100]	; (8006de8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a19      	ldr	r2, [pc, #100]	; (8006dec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 8006d86:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 8006d88:	4b19      	ldr	r3, [pc, #100]	; (8006df0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a19      	ldr	r2, [pc, #100]	; (8006df4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 8006d8e:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 8006d90:	4b19      	ldr	r3, [pc, #100]	; (8006df8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a19      	ldr	r2, [pc, #100]	; (8006dfc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 8006d96:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 8006d98:	4b19      	ldr	r3, [pc, #100]	; (8006e00 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a19      	ldr	r2, [pc, #100]	; (8006e04 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 8006d9e:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 8006da0:	4b19      	ldr	r3, [pc, #100]	; (8006e08 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a19      	ldr	r2, [pc, #100]	; (8006e0c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 8006da6:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 8006da8:	4b19      	ldr	r3, [pc, #100]	; (8006e10 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a19      	ldr	r2, [pc, #100]	; (8006e14 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 8006dae:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 8006db0:	4b19      	ldr	r3, [pc, #100]	; (8006e18 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a19      	ldr	r2, [pc, #100]	; (8006e1c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	e000      	b.n	8006dbc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 8006dba:	bf00      	nop
#endif
}
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	20000598 	.word	0x20000598
 8006dc8:	20000048 	.word	0x20000048
 8006dcc:	20000028 	.word	0x20000028
 8006dd0:	2000004c 	.word	0x2000004c
 8006dd4:	2000002c 	.word	0x2000002c
 8006dd8:	20000050 	.word	0x20000050
 8006ddc:	20000030 	.word	0x20000030
 8006de0:	20000054 	.word	0x20000054
 8006de4:	20000034 	.word	0x20000034
 8006de8:	20000058 	.word	0x20000058
 8006dec:	20000038 	.word	0x20000038
 8006df0:	2000005c 	.word	0x2000005c
 8006df4:	2000003c 	.word	0x2000003c
 8006df8:	20000060 	.word	0x20000060
 8006dfc:	20000040 	.word	0x20000040
 8006e00:	20000064 	.word	0x20000064
 8006e04:	20000044 	.word	0x20000044
 8006e08:	2000001c 	.word	0x2000001c
 8006e0c:	20000010 	.word	0x20000010
 8006e10:	20000024 	.word	0x20000024
 8006e14:	20000018 	.word	0x20000018
 8006e18:	20000020 	.word	0x20000020
 8006e1c:	20000014 	.word	0x20000014

08006e20 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
    {
 8006e28:	4a05      	ldr	r2, [pc, #20]	; (8006e40 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff fc15 	bl	8006660 <_ZN17MemoryLeakFailureD1Ev>
    }
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	08018774 	.word	0x08018774

08006e44 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
    }
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7ff ffe7 	bl	8006e20 <_ZN25MemoryLeakWarningReporterD1Ev>
 8006e52:	2104      	movs	r1, #4
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff fe53 	bl	8006b00 <_ZdlPvj>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	4a04      	ldr	r2, [pc, #16]	; (8006e80 <_ZN14TestTerminatorC1Ev+0x1c>)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	08018fcc 	.word	0x08018fcc

08006e84 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff ffe8 	bl	8006e64 <_ZN14TestTerminatorC1Ev>
 8006e94:	4a03      	ldr	r2, [pc, #12]	; (8006ea4 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	08018fa4 	.word	0x08018fa4

08006ea8 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 8006ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eaa:	b099      	sub	sp, #100	; 0x64
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 8006eb2:	f007 ffbd 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 8006eb6:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 8006eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	339c      	adds	r3, #156	; 0x9c
 8006ebe:	681c      	ldr	r4, [r3, #0]
 8006ec0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ec4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f006 fddc 	bl	800da84 <_ZNK10UtestShell7getNameEv>
 8006ecc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 f875 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8006ed6:	4605      	mov	r5, r0
 8006ed8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006eda:	f006 fea2 	bl	800dc22 <_ZNK10UtestShell13getLineNumberEv>
 8006ede:	4606      	mov	r6, r0
 8006ee0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 fcdf 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8006eec:	f107 000c 	add.w	r0, r7, #12
 8006ef0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	4633      	mov	r3, r6
 8006ef8:	462a      	mov	r2, r5
 8006efa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006efc:	f002 ff2c 	bl	8009d58 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8006f00:	2300      	movs	r3, #0
 8006f02:	653b      	str	r3, [r7, #80]	; 0x50
 8006f04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff ffbb 	bl	8006e84 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8006f0e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006f12:	f107 030c 	add.w	r3, r7, #12
 8006f16:	4619      	mov	r1, r3
 8006f18:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006f1a:	47a0      	blx	r4
 8006f1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f20:	4618      	mov	r0, r3
 8006f22:	f008 f87f 	bl	800f024 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8006f26:	f107 030c 	add.w	r3, r7, #12
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 f9ac 	bl	8007288 <_ZN11FailFailureD1Ev>
 8006f30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 f870 	bl	800801a <_ZN12SimpleStringD1Ev>
 8006f3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f001 f86b 	bl	800801a <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 8006f44:	bf00      	nop
 8006f46:	375c      	adds	r7, #92	; 0x5c
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f4c <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	4a04      	ldr	r2, [pc, #16]	; (8006f68 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	08018788 	.word	0x08018788

08006f6c <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7ff ffe8 	bl	8006f4c <_ZN17MemoryLeakFailureC1Ev>
 8006f7c:	4a03      	ldr	r2, [pc, #12]	; (8006f8c <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	08018774 	.word	0x08018774

08006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 8006f90:	b598      	push	{r3, r4, r7, lr}
 8006f92:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 8006f94:	4b11      	ldr	r3, [pc, #68]	; (8006fdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d11b      	bne.n	8006fd4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 8006f9c:	f7ff fe60 	bl	8006c60 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 8006fa0:	2004      	movs	r0, #4
 8006fa2:	f7ff fd89 	bl	8006ab8 <_Znwj>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	461c      	mov	r4, r3
 8006faa:	4620      	mov	r0, r4
 8006fac:	f7ff ffde 	bl	8006f6c <_ZN25MemoryLeakWarningReporterC1Ev>
 8006fb0:	4b0b      	ldr	r3, [pc, #44]	; (8006fe0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8006fb2:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 8006fb4:	f241 1050 	movw	r0, #4432	; 0x1150
 8006fb8:	f7ff fd7e 	bl	8006ab8 <_Znwj>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	461c      	mov	r4, r3
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f00a fc44 	bl	8011854 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 8006fcc:	4b03      	ldr	r3, [pc, #12]	; (8006fdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8006fce:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 8006fd0:	f7ff feb6 	bl	8006d40 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 8006fd4:	4b01      	ldr	r3, [pc, #4]	; (8006fdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	bd98      	pop	{r3, r4, r7, pc}
 8006fdc:	200005a0 	.word	0x200005a0
 8006fe0:	2000059c 	.word	0x2000059c

08006fe4 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	78fa      	ldrb	r2, [r7, #3]
 8006ff4:	765a      	strb	r2, [r3, #25]
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
	...

08007004 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 8007004:	b580      	push	{r7, lr}
 8007006:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 8007008:	f7ff fdbc 	bl	8006b84 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800700c:	4b0b      	ldr	r3, [pc, #44]	; (800703c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d004      	beq.n	800701e <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	3204      	adds	r2, #4
 8007018:	6812      	ldr	r2, [r2, #0]
 800701a:	4618      	mov	r0, r3
 800701c:	4790      	blx	r2
    delete globalReporter;
 800701e:	4b08      	ldr	r3, [pc, #32]	; (8007040 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	3204      	adds	r2, #4
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	4790      	blx	r2
    globalDetector = NULLPTR;
 8007030:	4b02      	ldr	r3, [pc, #8]	; (800703c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]
}
 8007036:	bf00      	nop
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	200005a0 	.word	0x200005a0
 8007040:	2000059c 	.word	0x2000059c

08007044 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	68b9      	ldr	r1, [r7, #8]
 8007054:	4618      	mov	r0, r3
 8007056:	f005 f815 	bl	800c084 <_ZN10TestPluginC1ERK12SimpleString>
 800705a:	4a14      	ldr	r2, [pc, #80]	; (80070ac <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	761a      	strb	r2, [r3, #24]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	765a      	strb	r2, [r3, #25]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 8007072:	4b0f      	ldr	r3, [pc, #60]	; (80070b0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d102      	bne.n	8007080 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 800707a:	4a0d      	ldr	r2, [pc, #52]	; (80070b0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d003      	beq.n	800708e <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	615a      	str	r2, [r3, #20]
 800708c:	e004      	b.n	8007098 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800708e:	f7ff ff7f 	bl	8006f90 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007092:	4602      	mov	r2, r0
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	4618      	mov	r0, r3
 800709e:	f00a fc6f 	bl	8011980 <_ZN18MemoryLeakDetector6enableEv>
}
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	0801879c 	.word	0x0801879c
 80070b0:	200005a4 	.word	0x200005a4

080070b4 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	4a09      	ldr	r2, [pc, #36]	; (80070e4 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	7e5b      	ldrb	r3, [r3, #25]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 80070ca:	f7ff fd5b 	bl	8006b84 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 80070ce:	f7ff ff99 	bl	8007004 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f005 f811 	bl	800c0fc <_ZN10TestPluginD1Ev>
    }
}
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	0801879c 	.word	0x0801879c

080070e8 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
}
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7ff ffdf 	bl	80070b4 <_ZN23MemoryLeakWarningPluginD1Ev>
 80070f6:	2124      	movs	r1, #36	; 0x24
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff fd01 	bl	8006b00 <_ZdlPvj>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4618      	mov	r0, r3
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	4618      	mov	r0, r3
 800711a:	f00a fc14 	bl	8011946 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fd ffb0 	bl	8005084 <_ZNK10TestResult15getFailureCountEv>
 8007124:	4602      	mov	r2, r0
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	621a      	str	r2, [r3, #32]
}
 800712a:	bf00      	nop
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 8007134:	b590      	push	{r4, r7, lr}
 8007136:	b097      	sub	sp, #92	; 0x5c
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	4618      	mov	r0, r3
 8007146:	f00a fc0e 	bl	8011966 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	2103      	movs	r1, #3
 8007150:	4618      	mov	r0, r3
 8007152:	f00a ffab 	bl	80120ac <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8007156:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	7e1b      	ldrb	r3, [r3, #24]
 800715c:	f083 0301 	eor.w	r3, r3, #1
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00e      	beq.n	8007184 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800716c:	429a      	cmp	r2, r3
 800716e:	d009      	beq.n	8007184 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a1c      	ldr	r4, [r3, #32]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7fd ff85 	bl	8005084 <_ZNK10TestResult15getFailureCountEv>
 800717a:	4603      	mov	r3, r0
 800717c:	429c      	cmp	r4, r3
 800717e:	d101      	bne.n	8007184 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8007180:	2301      	movs	r3, #1
 8007182:	e000      	b.n	8007186 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 8007184:	2300      	movs	r3, #0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d04c      	beq.n	8007224 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 800718a:	f7ff fd4f 	bl	8006c2c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d028      	beq.n	80071e6 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	2103      	movs	r1, #3
 800719a:	4618      	mov	r0, r3
 800719c:	f00a ff4b 	bl	8012036 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 80071a0:	4602      	mov	r2, r0
 80071a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80071a6:	4611      	mov	r1, r2
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 fb7e 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80071ae:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80071b2:	f107 0310 	add.w	r3, r7, #16
 80071b6:	68b9      	ldr	r1, [r7, #8]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f002 f8c7 	bl	800934c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 80071be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 ff29 	bl	800801a <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3334      	adds	r3, #52	; 0x34
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f107 0210 	add.w	r2, r7, #16
 80071d4:	4611      	mov	r1, r2
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 80071da:	f107 0310 	add.w	r3, r7, #16
 80071de:	4618      	mov	r0, r3
 80071e0:	f002 f974 	bl	80094cc <_ZN11TestFailureD1Ev>
 80071e4:	e01e      	b.n	8007224 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d01a      	beq.n	8007224 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3338      	adds	r3, #56	; 0x38
 80071f4:	681c      	ldr	r4, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007200:	4910      	ldr	r1, [pc, #64]	; (8007244 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 8007202:	4618      	mov	r0, r3
 8007204:	f001 fb96 	bl	8008934 <_Z16StringFromFormatPKcz>
 8007208:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fed7 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8007212:	4603      	mov	r3, r0
 8007214:	4619      	mov	r1, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	47a0      	blx	r4
 800721a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800721e:	4618      	mov	r0, r3
 8007220:	f000 fefb 	bl	800801a <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	4618      	mov	r0, r3
 800722a:	f00a ff19 	bl	8012060 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	61da      	str	r2, [r3, #28]
}
 800723a:	bf00      	nop
 800723c:	375c      	adds	r7, #92	; 0x5c
 800723e:	46bd      	mov	sp, r7
 8007240:	bd90      	pop	{r4, r7, pc}
 8007242:	bf00      	nop
 8007244:	0801633c 	.word	0x0801633c

08007248 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	2102      	movs	r1, #2
 8007258:	4618      	mov	r0, r3
 800725a:	f00a ff27 	bl	80120ac <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800725e:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d007      	beq.n	8007278 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	2102      	movs	r1, #2
 800726e:	4618      	mov	r0, r3
 8007270:	f00a fee1 	bl	8012036 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8007274:	4603      	mov	r3, r0
 8007276:	e000      	b.n	800727a <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 8007278:	4b02      	ldr	r3, [pc, #8]	; (8007284 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	0801637c 	.word	0x0801637c

08007288 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	4a05      	ldr	r2, [pc, #20]	; (80072a8 <_ZN11FailFailureD1Ev+0x20>)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4618      	mov	r0, r3
 800729a:	f002 f917 	bl	80094cc <_ZN11TestFailureD1Ev>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	080187e4 	.word	0x080187e4

080072ac <_ZN11FailFailureD0Ev>:
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7ff ffe7 	bl	8007288 <_ZN11FailFailureD1Ev>
 80072ba:	2134      	movs	r1, #52	; 0x34
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff fc1f 	bl	8006b00 <_ZdlPvj>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <_ZN11SimpleMutexC1Ev+0x20>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4798      	blx	r3
 80072da:	4602      	mov	r2, r0
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	601a      	str	r2, [r3, #0]
}
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	200000e8 	.word	0x200000e8

080072f0 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 80072f8:	4b05      	ldr	r3, [pc, #20]	; (8007310 <_ZN11SimpleMutexD1Ev+0x20>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	6812      	ldr	r2, [r2, #0]
 8007300:	4610      	mov	r0, r2
 8007302:	4798      	blx	r3
}
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4618      	mov	r0, r3
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	200000f4 	.word	0x200000f4

08007314 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800731c:	4b04      	ldr	r3, [pc, #16]	; (8007330 <_ZN11SimpleMutex4LockEv+0x1c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	6812      	ldr	r2, [r2, #0]
 8007324:	4610      	mov	r0, r2
 8007326:	4798      	blx	r3
}
 8007328:	bf00      	nop
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	200000ec 	.word	0x200000ec

08007334 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800733c:	4b04      	ldr	r3, [pc, #16]	; (8007350 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6812      	ldr	r2, [r2, #0]
 8007344:	4610      	mov	r0, r2
 8007346:	4798      	blx	r3
}
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	200000f0 	.word	0x200000f0

08007354 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4618      	mov	r0, r3
 800736a:	f7ff ffd3 	bl	8007314 <_ZN11SimpleMutex4LockEv>
}
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff ffd5 	bl	8007334 <_ZN11SimpleMutex6UnlockEv>
}
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 8007394:	b580      	push	{r7, lr}
 8007396:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 8007398:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d103      	bne.n	80073a8 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 80073a0:	f003 fc6c 	bl	800ac7c <_Z24defaultNewArrayAllocatorv>
 80073a4:	4603      	mov	r3, r0
 80073a6:	e001      	b.n	80073ac <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 80073a8:	4b01      	ldr	r3, [pc, #4]	; (80073b0 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	200005a8 	.word	0x200005a8

080073b4 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 80073b4:	b590      	push	{r4, r7, lr}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 80073c0:	f7ff ffe8 	bl	8007394 <_ZN12SimpleString18getStringAllocatorEv>
 80073c4:	6803      	ldr	r3, [r0, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	681c      	ldr	r4, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	68f9      	ldr	r1, [r7, #12]
 80073d0:	47a0      	blx	r4
 80073d2:	4603      	mov	r3, r0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd90      	pop	{r4, r7, pc}

080073dc <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 80073dc:	b590      	push	{r4, r7, lr}
 80073de:	b087      	sub	sp, #28
 80073e0:	af02      	add	r7, sp, #8
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
 80073e8:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 80073ea:	f7ff ffd3 	bl	8007394 <_ZN12SimpleString18getStringAllocatorEv>
 80073ee:	6803      	ldr	r3, [r0, #0]
 80073f0:	330c      	adds	r3, #12
 80073f2:	681c      	ldr	r4, [r3, #0]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	68f9      	ldr	r1, [r7, #12]
 80073fe:	47a0      	blx	r4
}
 8007400:	bf00      	nop
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	bd90      	pop	{r4, r7, pc}

08007408 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 8007410:	2284      	movs	r2, #132	; 0x84
 8007412:	4906      	ldr	r1, [pc, #24]	; (800742c <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 8007414:	2001      	movs	r0, #1
 8007416:	f7ff ffcd 	bl	80073b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800741a:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	701a      	strb	r2, [r3, #0]
    return empty;
 8007422:	68fb      	ldr	r3, [r7, #12]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	08016380 	.word	0x08016380

08007430 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	f001 f809 	bl	8008454 <_ZN12SimpleString7isSpaceEc>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <_ZN12SimpleString4AtoUEPKc+0x20>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3301      	adds	r3, #1
 800744c:	607b      	str	r3, [r7, #4]
 800744e:	e7f3      	b.n	8007438 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	4618      	mov	r0, r3
 800745a:	f000 ffe7 	bl	800842c <_ZN12SimpleString7isDigitEc>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d005      	beq.n	8007470 <_ZN12SimpleString4AtoUEPKc+0x40>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b2f      	cmp	r3, #47	; 0x2f
 800746a:	d901      	bls.n	8007470 <_ZN12SimpleString4AtoUEPKc+0x40>
 800746c:	2301      	movs	r3, #1
 800746e:	e000      	b.n	8007472 <_ZN12SimpleString4AtoUEPKc+0x42>
 8007470:	2300      	movs	r3, #0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d010      	beq.n	8007498 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	4613      	mov	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	3b30      	subs	r3, #48	; 0x30
 800748e:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3301      	adds	r3, #1
 8007494:	607b      	str	r3, [r7, #4]
 8007496:	e7dd      	b.n	8007454 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 8007498:	68fb      	ldr	r3, [r7, #12]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 ffd0 	bl	8008454 <_ZN12SimpleString7isSpaceEc>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <_ZN12SimpleString4AtoIEPKc+0x20>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3301      	adds	r3, #1
 80074be:	607b      	str	r3, [r7, #4]
 80074c0:	e7f3      	b.n	80074aa <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 80074c8:	7afb      	ldrb	r3, [r7, #11]
 80074ca:	2b2d      	cmp	r3, #45	; 0x2d
 80074cc:	d002      	beq.n	80074d4 <_ZN12SimpleString4AtoIEPKc+0x32>
 80074ce:	7afb      	ldrb	r3, [r7, #11]
 80074d0:	2b2b      	cmp	r3, #43	; 0x2b
 80074d2:	d102      	bne.n	80074da <_ZN12SimpleString4AtoIEPKc+0x38>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3301      	adds	r3, #1
 80074d8:	607b      	str	r3, [r7, #4]

    int  result = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 ffa2 	bl	800842c <_ZN12SimpleString7isDigitEc>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00f      	beq.n	800750e <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	3b30      	subs	r3, #48	; 0x30
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	4413      	add	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3301      	adds	r3, #1
 800750a:	607b      	str	r3, [r7, #4]
 800750c:	e7e7      	b.n	80074de <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800750e:	7afb      	ldrb	r3, [r7, #11]
 8007510:	2b2d      	cmp	r3, #45	; 0x2d
 8007512:	d102      	bne.n	800751a <_ZN12SimpleString4AtoIEPKc+0x78>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	425b      	negs	r3, r3
 8007518:	e000      	b.n	800751c <_ZN12SimpleString4AtoIEPKc+0x7a>
 800751a:	68fb      	ldr	r3, [r7, #12]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00c      	beq.n	8007550 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	781a      	ldrb	r2, [r3, #0]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	429a      	cmp	r2, r3
 8007540:	d106      	bne.n	8007550 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	3301      	adds	r3, #1
 8007546:	607b      	str	r3, [r7, #4]
       ++s2;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	3301      	adds	r3, #1
 800754c:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800754e:	e7ee      	b.n	800752e <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	461a      	mov	r2, r3
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	1ad3      	subs	r3, r2, r3
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 8007570:	f04f 33ff 	mov.w	r3, #4294967295
 8007574:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3301      	adds	r3, #1
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	607a      	str	r2, [r7, #4]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	bf14      	ite	ne
 8007588:	2301      	movne	r3, #1
 800758a:	2300      	moveq	r3, #0
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d000      	beq.n	8007594 <_ZN12SimpleString6StrLenEPKc+0x2c>
 8007592:	e7f0      	b.n	8007576 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 8007594:	68fb      	ldr	r3, [r7, #12]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b085      	sub	sp, #20
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d013      	beq.n	80075dc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00f      	beq.n	80075dc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	781a      	ldrb	r2, [r3, #0]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d109      	bne.n	80075dc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	607b      	str	r3, [r7, #4]
        ++s1;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3301      	adds	r3, #1
 80075d2:	60fb      	str	r3, [r7, #12]
        ++s2;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	3301      	adds	r3, #1
 80075d8:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 80075da:	e7e8      	b.n	80075ae <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d006      	beq.n	80075f0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	e000      	b.n	80075f2 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 80075fe:	b480      	push	{r7}
 8007600:	b087      	sub	sp, #28
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	e01e      	b.n	800765c <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	781a      	ldrb	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3b01      	subs	r3, #1
 800762a:	607b      	str	r3, [r7, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d005      	beq.n	800763e <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800763a:	2301      	movs	r3, #1
 800763c:	e000      	b.n	8007640 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800763e:	2300      	movs	r3, #0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00a      	beq.n	800765a <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	3301      	adds	r3, #1
 8007648:	60bb      	str	r3, [r7, #8]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3301      	adds	r3, #1
 800764e:	60fb      	str	r3, [r7, #12]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	781a      	ldrb	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 8007658:	e7e5      	b.n	8007626 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800765a:	697b      	ldr	r3, [r7, #20]
}
 800765c:	4618      	mov	r0, r3
 800765e:	371c      	adds	r7, #28
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	e01b      	b.n	80076b6 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d016      	beq.n	80076b4 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 8007686:	6838      	ldr	r0, [r7, #0]
 8007688:	f7ff ff6e 	bl	8007568 <_ZN12SimpleString6StrLenEPKc>
 800768c:	4603      	mov	r3, r0
 800768e:	461a      	mov	r2, r3
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff ff85 	bl	80075a2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	bf0c      	ite	eq
 800769e:	2301      	moveq	r3, #1
 80076a0:	2300      	movne	r3, #0
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	e004      	b.n	80076b6 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3301      	adds	r3, #1
 80076b0:	607b      	str	r3, [r7, #4]
 80076b2:	e7e4      	b.n	800767e <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b082      	sub	sp, #8
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	4603      	mov	r3, r0
 80076c6:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 80076c8:	79fb      	ldrb	r3, [r7, #7]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 fed9 	bl	8008482 <_ZN12SimpleString7isUpperEc>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d003      	beq.n	80076de <_ZN12SimpleString7ToLowerEc+0x20>
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	3320      	adds	r3, #32
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	e000      	b.n	80076e0 <_ZN12SimpleString7ToLowerEc+0x22>
 80076de:	79fb      	ldrb	r3, [r7, #7]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	613b      	str	r3, [r7, #16]

    while (n--)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	1e5a      	subs	r2, r3, #1
 8007700:	607a      	str	r2, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	bf14      	ite	ne
 8007706:	2301      	movne	r3, #1
 8007708:	2300      	moveq	r3, #0
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d013      	beq.n	8007738 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	781a      	ldrb	r2, [r3, #0]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	429a      	cmp	r2, r3
 800771a:	d006      	beq.n	800772a <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	e007      	b.n	800773a <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	3301      	adds	r3, #1
 800772e:	617b      	str	r3, [r7, #20]
            ++p2;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	3301      	adds	r3, #1
 8007734:	613b      	str	r3, [r7, #16]
    while (n--)
 8007736:	e7e1      	b.n	80076fc <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	371c      	adds	r7, #28
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
	...

08007748 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00d      	beq.n	8007774 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6859      	ldr	r1, [r3, #4]
 8007760:	23ee      	movs	r3, #238	; 0xee
 8007762:	4a06      	ldr	r2, [pc, #24]	; (800777c <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 8007764:	f7ff fe3a 	bl	80073dc <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	605a      	str	r2, [r3, #4]
    }
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	08016380 	.word	0x08016380

08007780 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7ff ffdd 	bl	8007748 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7ff fe37 	bl	8007408 <_ZNK12SimpleString14getEmptyStringEv>
 800779a:	4602      	mov	r2, r0
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	601a      	str	r2, [r3, #0]
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f7ff ffc7 	bl	8007748 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	4619      	mov	r1, r3
 80077c6:	68b8      	ldr	r0, [r7, #8]
 80077c8:	f000 fe12 	bl	80083f0 <_ZN12SimpleString15copyToNewBufferEPKcj>
 80077cc:	4602      	mov	r2, r0
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	601a      	str	r2, [r3, #0]
}
 80077d2:	bf00      	nop
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
	...

080077dc <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7ff ffae 	bl	8007748 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f240 1209 	movw	r2, #265	; 0x109
 80077fa:	4907      	ldr	r1, [pc, #28]	; (8007818 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7ff fdd9 	bl	80073b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8007802:	4602      	mov	r2, r0
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]
}
 8007810:	bf00      	nop
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	08016380 	.word	0x08016380

0800781c <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7ff ff8d 	bl	8007748 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	601a      	str	r2, [r3, #0]
}
 800783a:	bf00      	nop
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 8007842:	b590      	push	{r4, r7, lr}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681c      	ldr	r4, [r3, #0]
 8007850:	6838      	ldr	r0, [r7, #0]
 8007852:	f000 fbc1 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8007856:	4603      	mov	r3, r0
 8007858:	3301      	adds	r3, #1
 800785a:	461a      	mov	r2, r3
 800785c:	4621      	mov	r1, r4
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff ffa2 	bl	80077a8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	bd90      	pop	{r4, r7, pc}

0800786c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 8007876:	6838      	ldr	r0, [r7, #0]
 8007878:	f7ff fe76 	bl	8007568 <_ZN12SimpleString6StrLenEPKc>
 800787c:	4603      	mov	r3, r0
 800787e:	3301      	adds	r3, #1
 8007880:	461a      	mov	r2, r3
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff ff8f 	bl	80077a8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800788a:	bf00      	nop
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
    return buffer_;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d103      	bne.n	80078ce <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7ff ff5a 	bl	8007780 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 80078cc:	e003      	b.n	80078d6 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff ffcb 	bl	800786c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b088      	sub	sp, #32
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 80078f8:	68b8      	ldr	r0, [r7, #8]
 80078fa:	f7ff fe35 	bl	8007568 <_ZN12SimpleString6StrLenEPKc>
 80078fe:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	fb02 f303 	mul.w	r3, r2, r3
 8007908:	3301      	adds	r3, #1
 800790a:	4619      	mov	r1, r3
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f7ff ff65 	bl	80077dc <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 8007918:	2300      	movs	r3, #0
 800791a:	61bb      	str	r3, [r7, #24]
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	429a      	cmp	r2, r3
 8007922:	d20e      	bcs.n	8007942 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	3301      	adds	r3, #1
 8007928:	461a      	mov	r2, r3
 800792a:	68b9      	ldr	r1, [r7, #8]
 800792c:	69f8      	ldr	r0, [r7, #28]
 800792e:	f7ff fe66 	bl	80075fe <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	4413      	add	r3, r2
 8007938:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	3301      	adds	r3, #1
 800793e:	61bb      	str	r3, [r7, #24]
 8007940:	e7ec      	b.n	800791c <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	2200      	movs	r2, #0
 8007946:	701a      	strb	r2, [r3, #0]
}
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4618      	mov	r0, r3
 800794c:	3720      	adds	r7, #32
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 8007952:	b580      	push	{r7, lr}
 8007954:	b082      	sub	sp, #8
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 8007968:	6838      	ldr	r0, [r7, #0]
 800796a:	f7ff ff92 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 800796e:	4603      	mov	r3, r0
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff ff7a 	bl	800786c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	429a      	cmp	r2, r3
 8007992:	d003      	beq.n	800799c <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7ff ff53 	bl	8007842 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800799c:	687b      	ldr	r3, [r7, #4]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 80079a6:	b590      	push	{r4, r7, lr}
 80079a8:	b083      	sub	sp, #12
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff ff6e 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 80079b6:	4604      	mov	r4, r0
 80079b8:	6838      	ldr	r0, [r7, #0]
 80079ba:	f7ff ff6a 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 80079be:	4603      	mov	r3, r0
 80079c0:	4619      	mov	r1, r3
 80079c2:	4620      	mov	r0, r4
 80079c4:	f7ff fe50 	bl	8007668 <_ZN12SimpleString6StrStrEPKcS1_>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	bf14      	ite	ne
 80079ce:	2301      	movne	r3, #1
 80079d0:	2300      	moveq	r3, #0
 80079d2:	b2db      	uxtb	r3, r3
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd90      	pop	{r4, r7, pc}

080079dc <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 80079dc:	b590      	push	{r4, r7, lr}
 80079de:	b087      	sub	sp, #28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 80079e6:	f107 0308 	add.w	r3, r7, #8
 80079ea:	6879      	ldr	r1, [r7, #4]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 fabb 	bl	8007f68 <_ZNK12SimpleString9lowerCaseEv>
 80079f2:	f107 0310 	add.w	r3, r7, #16
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fab5 	bl	8007f68 <_ZNK12SimpleString9lowerCaseEv>
 80079fe:	f107 0210 	add.w	r2, r7, #16
 8007a02:	f107 0308 	add.w	r3, r7, #8
 8007a06:	4611      	mov	r1, r2
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff ffcc 	bl	80079a6 <_ZNK12SimpleString8containsERKS_>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	461c      	mov	r4, r3
 8007a12:	bf00      	nop
 8007a14:	f107 0310 	add.w	r3, r7, #16
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 fafe 	bl	800801a <_ZN12SimpleStringD1Ev>
 8007a1e:	f107 0308 	add.w	r3, r7, #8
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 faf9 	bl	800801a <_ZN12SimpleStringD1Ev>
 8007a28:	4623      	mov	r3, r4
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd90      	pop	{r4, r7, pc}

08007a32 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 8007a32:	b590      	push	{r4, r7, lr}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 8007a3c:	6838      	ldr	r0, [r7, #0]
 8007a3e:	f000 facb 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	bf0c      	ite	eq
 8007a48:	2301      	moveq	r3, #1
 8007a4a:	2300      	movne	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <_ZNK12SimpleString10startsWithERKS_+0x24>
 8007a52:	2301      	movs	r3, #1
 8007a54:	e022      	b.n	8007a9c <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fabe 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	bf0c      	ite	eq
 8007a62:	2301      	moveq	r3, #1
 8007a64:	2300      	movne	r3, #0
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	e015      	b.n	8007a9c <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7ff ff0e 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8007a76:	4604      	mov	r4, r0
 8007a78:	6838      	ldr	r0, [r7, #0]
 8007a7a:	f7ff ff0a 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	4619      	mov	r1, r3
 8007a82:	4620      	mov	r0, r4
 8007a84:	f7ff fdf0 	bl	8007668 <_ZN12SimpleString6StrStrEPKcS1_>
 8007a88:	4604      	mov	r4, r0
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff ff01 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8007a90:	4603      	mov	r3, r0
 8007a92:	429c      	cmp	r4, r3
 8007a94:	bf0c      	ite	eq
 8007a96:	2301      	moveq	r3, #1
 8007a98:	2300      	movne	r3, #0
 8007a9a:	b2db      	uxtb	r3, r3
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd90      	pop	{r4, r7, pc}

08007aa4 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 8007aa4:	b590      	push	{r4, r7, lr}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
    size_t length = size();
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fa92 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8007ab4:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 8007ab6:	6838      	ldr	r0, [r7, #0]
 8007ab8:	f000 fa8e 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8007abc:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <_ZNK12SimpleString8endsWithERKS_+0x24>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e020      	b.n	8007b0a <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	e01b      	b.n	8007b0a <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d201      	bcs.n	8007ade <_ZNK12SimpleString8endsWithERKS_+0x3a>
 8007ada:	2300      	movs	r3, #0
 8007adc:	e015      	b.n	8007b0a <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7ff fed7 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8007ae4:	4601      	mov	r1, r0
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	18cc      	adds	r4, r1, r3
 8007aee:	6838      	ldr	r0, [r7, #0]
 8007af0:	f7ff fecf 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8007af4:	4603      	mov	r3, r0
 8007af6:	4619      	mov	r1, r3
 8007af8:	4620      	mov	r0, r4
 8007afa:	f7ff fd13 	bl	8007524 <_ZN12SimpleString6StrCmpEPKcS1_>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bf0c      	ite	eq
 8007b04:	2301      	moveq	r3, #1
 8007b06:	2300      	movne	r3, #0
 8007b08:	b2db      	uxtb	r3, r3
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd90      	pop	{r4, r7, pc}

08007b12 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b086      	sub	sp, #24
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7ff feb6 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8007b26:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	60fb      	str	r3, [r7, #12]
    if (*str){
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d008      	beq.n	8007b46 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 8007b34:	6838      	ldr	r0, [r7, #0]
 8007b36:	f7ff feac 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6938      	ldr	r0, [r7, #16]
 8007b40:	f7ff fd92 	bl	8007668 <_ZN12SimpleString6StrStrEPKcS1_>
 8007b44:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d014      	beq.n	8007b78 <_ZNK12SimpleString5countERKS_+0x66>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d011      	beq.n	8007b78 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	613b      	str	r3, [r7, #16]
        str++;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	613b      	str	r3, [r7, #16]
        num++;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	3301      	adds	r3, #1
 8007b62:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 8007b64:	6838      	ldr	r0, [r7, #0]
 8007b66:	f7ff fe94 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6938      	ldr	r0, [r7, #16]
 8007b70:	f7ff fd7a 	bl	8007668 <_ZN12SimpleString6StrStrEPKcS1_>
 8007b74:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 8007b76:	e7e6      	b.n	8007b46 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 8007b78:	697b      	ldr	r3, [r7, #20]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3718      	adds	r7, #24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 8007b82:	b590      	push	{r4, r7, lr}
 8007b84:	b091      	sub	sp, #68	; 0x44
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 8007b8e:	68b9      	ldr	r1, [r7, #8]
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f7ff ffbe 	bl	8007b12 <_ZNK12SimpleString5countERKS_>
 8007b96:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 8007b98:	68b9      	ldr	r1, [r7, #8]
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f7ff ff82 	bl	8007aa4 <_ZNK12SimpleString8endsWithERKS_>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e000      	b.n	8007bac <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 8007baa:	2301      	movs	r3, #1
 8007bac:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 8007bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb2:	4413      	add	r3, r2
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 f84e 	bl	8008c58 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f7ff fe68 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8007bc2:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d235      	bcs.n	8007c3c <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 8007bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 8007bd4:	68b8      	ldr	r0, [r7, #8]
 8007bd6:	f7ff fe5c 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007be0:	f7ff fd42 	bl	8007668 <_ZN12SimpleString6StrStrEPKcS1_>
 8007be4:	4603      	mov	r3, r0
 8007be6:	3301      	adds	r3, #1
 8007be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 8007bea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f001 f8cd 	bl	8008d8c <_ZN22SimpleStringCollectionixEj>
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	f107 031c 	add.w	r3, r7, #28
 8007bf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff fe55 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8007c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	f107 0014 	add.w	r0, r7, #20
 8007c0a:	f107 011c 	add.w	r1, r7, #28
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f000 fb0c 	bl	800822c <_ZNK12SimpleString9subStringEjj>
 8007c14:	f107 0314 	add.w	r3, r7, #20
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f7ff feb1 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8007c20:	f107 0314 	add.w	r3, r7, #20
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 f9f8 	bl	800801a <_ZN12SimpleStringD1Ev>
 8007c2a:	f107 031c 	add.w	r3, r7, #28
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 f9f3 	bl	800801a <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	3301      	adds	r3, #1
 8007c38:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c3a:	e7c5      	b.n	8007bc8 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d015      	beq.n	8007c6e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 8007c42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 f8a1 	bl	8008d8c <_ZN22SimpleStringCollectionixEj>
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff fe29 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8007c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f7ff fe8f 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8007c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 f9d6 	bl	800801a <_ZN12SimpleStringD1Ev>
    }
}
 8007c6e:	bf00      	nop
 8007c70:	3744      	adds	r7, #68	; 0x44
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd90      	pop	{r4, r7, pc}

08007c76 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	460b      	mov	r3, r1
 8007c80:	70fb      	strb	r3, [r7, #3]
 8007c82:	4613      	mov	r3, r2
 8007c84:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f9a6 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8007c8c:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d218      	bcs.n	8007ccc <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff fdf9 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	78fa      	ldrb	r2, [r7, #3]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	bf0c      	ite	eq
 8007cae:	2301      	moveq	r3, #1
 8007cb0:	2300      	movne	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <_ZN12SimpleString7replaceEcc+0x4e>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	78ba      	ldrb	r2, [r7, #2]
 8007cc2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	e7e2      	b.n	8007c92 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 8007ccc:	bf00      	nop
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08e      	sub	sp, #56	; 0x38
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 8007ce0:	f107 0310 	add.w	r3, r7, #16
 8007ce4:	68b9      	ldr	r1, [r7, #8]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7ff fddf 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8007cec:	f107 0310 	add.w	r3, r7, #16
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f7ff ff0d 	bl	8007b12 <_ZNK12SimpleString5countERKS_>
 8007cf8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007cfa:	f107 0310 	add.w	r3, r7, #16
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 f98b 	bl	800801a <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 8007d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d071      	beq.n	8007dee <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 f964 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8007d10:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 8007d12:	68b8      	ldr	r0, [r7, #8]
 8007d14:	f7ff fc28 	bl	8007568 <_ZN12SimpleString6StrLenEPKc>
 8007d18:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff fc24 	bl	8007568 <_ZN12SimpleString6StrLenEPKc>
 8007d20:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d26:	fb02 f203 	mul.w	r2, r2, r3
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	441a      	add	r2, r3
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d32:	fb01 f303 	mul.w	r3, r1, r3
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	3301      	adds	r3, #1
 8007d3a:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d951      	bls.n	8007de6 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 8007d42:	f240 129d 	movw	r2, #413	; 0x19d
 8007d46:	492c      	ldr	r1, [pc, #176]	; (8007df8 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 8007d48:	69f8      	ldr	r0, [r7, #28]
 8007d4a:	f7ff fb33 	bl	80073b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8007d4e:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 8007d50:	2300      	movs	r3, #0
 8007d52:	637b      	str	r3, [r7, #52]	; 0x34
 8007d54:	2300      	movs	r3, #0
 8007d56:	633b      	str	r3, [r7, #48]	; 0x30
 8007d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d236      	bcs.n	8007dce <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f7ff fd96 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8007d66:	4602      	mov	r2, r0
 8007d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6a:	4413      	add	r3, r2
 8007d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6e:	68b9      	ldr	r1, [r7, #8]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff fc16 	bl	80075a2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	bf0c      	ite	eq
 8007d7c:	2301      	moveq	r3, #1
 8007d7e:	2300      	movne	r3, #0
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d011      	beq.n	8007daa <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 8007d86:	69ba      	ldr	r2, [r7, #24]
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	18d0      	adds	r0, r2, r3
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	461a      	mov	r2, r3
 8007d92:	6879      	ldr	r1, [r7, #4]
 8007d94:	f7ff fc33 	bl	80075fe <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 8007d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 8007da0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	4413      	add	r3, r2
 8007da6:	637b      	str	r3, [r7, #52]	; 0x34
 8007da8:	e7d6      	b.n	8007d58 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f7ff fd71 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8007db0:	4602      	mov	r2, r0
 8007db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db4:	441a      	add	r2, r3
 8007db6:	69b9      	ldr	r1, [r7, #24]
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	440b      	add	r3, r1
 8007dbc:	7812      	ldrb	r2, [r2, #0]
 8007dbe:	701a      	strb	r2, [r3, #0]
                j++;
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 8007dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc8:	3301      	adds	r3, #1
 8007dca:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 8007dcc:	e7c4      	b.n	8007d58 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	69ba      	ldr	r2, [r7, #24]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	69b9      	ldr	r1, [r7, #24]
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f7ff fd1c 	bl	800781c <_ZN12SimpleString19setInternalBufferToEPcj>
 8007de4:	e004      	b.n	8007df0 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f7ff fcca 	bl	8007780 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 8007dec:	e000      	b.n	8007df0 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 8007dee:	bf00      	nop
}
 8007df0:	3738      	adds	r7, #56	; 0x38
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	08016380 	.word	0x08016380

08007dfc <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 8007dfc:	b590      	push	{r4, r7, lr}
 8007dfe:	b089      	sub	sp, #36	; 0x24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 8007e06:	493b      	ldr	r1, [pc, #236]	; (8007ef4 <_ZNK12SimpleString9printableEv+0xf8>)
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff fd4e 	bl	80078aa <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 8007e0e:	6838      	ldr	r0, [r7, #0]
 8007e10:	f000 f876 	bl	8007f00 <_ZNK12SimpleString16getPrintableSizeEv>
 8007e14:	4603      	mov	r3, r0
 8007e16:	3301      	adds	r3, #1
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7ff fcde 	bl	80077dc <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 8007e20:	6838      	ldr	r0, [r7, #0]
 8007e22:	f000 f8d9 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8007e26:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	61bb      	str	r3, [r7, #24]
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d252      	bcs.n	8007ede <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	4413      	add	r3, r2
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 8007e44:	7cfb      	ldrb	r3, [r7, #19]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fb43 	bl	80084d2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d012      	beq.n	8007e78 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	18d0      	adds	r0, r2, r3
 8007e5a:	7cfb      	ldrb	r3, [r7, #19]
 8007e5c:	3b07      	subs	r3, #7
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	461a      	mov	r2, r3
 8007e62:	4b25      	ldr	r3, [pc, #148]	; (8007ef8 <_ZNK12SimpleString9printableEv+0xfc>)
 8007e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e68:	2202      	movs	r2, #2
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	f7ff fbc7 	bl	80075fe <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	3302      	adds	r3, #2
 8007e74:	61fb      	str	r3, [r7, #28]
 8007e76:	e02e      	b.n	8007ed6 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 8007e78:	7cfb      	ldrb	r3, [r7, #19]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 fb15 	bl	80084aa <_ZN12SimpleString9isControlEc>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d01e      	beq.n	8007ec4 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 8007e86:	7cfa      	ldrb	r2, [r7, #19]
 8007e88:	f107 0308 	add.w	r3, r7, #8
 8007e8c:	491b      	ldr	r1, [pc, #108]	; (8007efc <_ZNK12SimpleString9printableEv+0x100>)
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 fd50 	bl	8008934 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	18d4      	adds	r4, r2, r3
 8007e9c:	f107 0308 	add.w	r3, r7, #8
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 f88d 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2204      	movs	r2, #4
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4620      	mov	r0, r4
 8007eae:	f7ff fba6 	bl	80075fe <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 8007eb8:	f107 0308 	add.w	r3, r7, #8
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 f8ac 	bl	800801a <_ZN12SimpleStringD1Ev>
 8007ec2:	e008      	b.n	8007ed6 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	4413      	add	r3, r2
 8007ecc:	7cfa      	ldrb	r2, [r7, #19]
 8007ece:	701a      	strb	r2, [r3, #0]
            j++;
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	61bb      	str	r3, [r7, #24]
 8007edc:	e7a8      	b.n	8007e30 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	701a      	strb	r2, [r3, #0]

    return result;
 8007eea:	bf00      	nop
}
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	3724      	adds	r7, #36	; 0x24
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd90      	pop	{r4, r7, pc}
 8007ef4:	08016440 	.word	0x08016440
 8007ef8:	20000068 	.word	0x20000068
 8007efc:	08016444 	.word	0x08016444

08007f00 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f865 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8007f0e:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 8007f14:	2300      	movs	r3, #0
 8007f16:	613b      	str	r3, [r7, #16]
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d21e      	bcs.n	8007f5e <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	4413      	add	r3, r2
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 8007f2c:	7afb      	ldrb	r3, [r7, #11]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 facf 	bl	80084d2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	617b      	str	r3, [r7, #20]
 8007f40:	e009      	b.n	8007f56 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 8007f42:	7afb      	ldrb	r3, [r7, #11]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 fab0 	bl	80084aa <_ZN12SimpleString9isControlEc>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	3303      	adds	r3, #3
 8007f54:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	e7dc      	b.n	8007f18 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 8007f5e:	697b      	ldr	r3, [r7, #20]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3718      	adds	r7, #24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 8007f68:	b590      	push	{r4, r7, lr}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7ff fcec 	bl	8007952 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f82c 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8007f80:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 8007f82:	2300      	movs	r3, #0
 8007f84:	60fb      	str	r3, [r7, #12]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d213      	bcs.n	8007fb6 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7ff fc7f 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8007f94:	4602      	mov	r2, r0
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	7819      	ldrb	r1, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	18d4      	adds	r4, r2, r3
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	f7ff fb8a 	bl	80076be <_ZN12SimpleString7ToLowerEc>
 8007faa:	4603      	mov	r3, r0
 8007fac:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	e7e7      	b.n	8007f86 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 8007fb6:	bf00      	nop
}
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd90      	pop	{r4, r7, pc}

08007fc0 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
    return getBuffer();
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff fc62 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8007fce:	4603      	mov	r3, r0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f7ff fc56 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7ff fabd 	bl	8007568 <_ZN12SimpleString6StrLenEPKc>
 8007fee:	4603      	mov	r3, r0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
    return size() == 0;
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7ff ffe9 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	bf0c      	ite	eq
 800800c:	2301      	moveq	r3, #1
 800800e:	2300      	movne	r3, #0
 8008010:	b2db      	uxtb	r3, r3
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7ff fb90 	bl	8007748 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 8008032:	b590      	push	{r4, r7, lr}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff ffbf 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8008042:	4604      	mov	r4, r0
 8008044:	6838      	ldr	r0, [r7, #0]
 8008046:	f7ff ffbb 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800804a:	4603      	mov	r3, r0
 800804c:	4619      	mov	r1, r3
 800804e:	4620      	mov	r0, r4
 8008050:	f7ff fa68 	bl	8007524 <_ZN12SimpleString6StrCmpEPKcS1_>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	bf0c      	ite	eq
 800805a:	2301      	moveq	r3, #1
 800805c:	2300      	movne	r3, #0
 800805e:	b2db      	uxtb	r3, r3
}
 8008060:	4618      	mov	r0, r3
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	bd90      	pop	{r4, r7, pc}

08008068 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 8008068:	b590      	push	{r4, r7, lr}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 8008072:	f107 0308 	add.w	r3, r7, #8
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	4618      	mov	r0, r3
 800807a:	f7ff ff75 	bl	8007f68 <_ZNK12SimpleString9lowerCaseEv>
 800807e:	f107 0310 	add.w	r3, r7, #16
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	4618      	mov	r0, r3
 8008086:	f7ff ff6f 	bl	8007f68 <_ZNK12SimpleString9lowerCaseEv>
 800808a:	f107 0210 	add.w	r2, r7, #16
 800808e:	f107 0308 	add.w	r3, r7, #8
 8008092:	4611      	mov	r1, r2
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff ffcc 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800809a:	4603      	mov	r3, r0
 800809c:	461c      	mov	r4, r3
 800809e:	f107 0310 	add.w	r3, r7, #16
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff ffb9 	bl	800801a <_ZN12SimpleStringD1Ev>
 80080a8:	f107 0308 	add.w	r3, r7, #8
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7ff ffb4 	bl	800801a <_ZN12SimpleStringD1Ev>
 80080b2:	4623      	mov	r3, r4
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	371c      	adds	r7, #28
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd90      	pop	{r4, r7, pc}

080080bc <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
    return !(left == right);
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff ffb2 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 80080ce:	4603      	mov	r3, r0
 80080d0:	f083 0301 	eor.w	r3, r3, #1
 80080d4:	b2db      	uxtb	r3, r3
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 80080ea:	68b8      	ldr	r0, [r7, #8]
 80080ec:	f7ff fbd1 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 80080f0:	4603      	mov	r3, r0
 80080f2:	4619      	mov	r1, r3
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7ff fbd8 	bl	80078aa <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff fbc9 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8008100:	4603      	mov	r3, r0
 8008102:	4619      	mov	r1, r3
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 f817 	bl	8008138 <_ZN12SimpleStringpLEPKc>
    return t;
 800810a:	bf00      	nop
}
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800811e:	6838      	ldr	r0, [r7, #0]
 8008120:	f7ff fbb7 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8008124:	4603      	mov	r3, r0
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f805 	bl	8008138 <_ZN12SimpleStringpLEPKc>
 800812e:	4603      	mov	r3, r0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7ff ff48 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8008148:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800814a:	6838      	ldr	r0, [r7, #0]
 800814c:	f7ff fa0c 	bl	8007568 <_ZN12SimpleString6StrLenEPKc>
 8008150:	4603      	mov	r3, r0
 8008152:	3301      	adds	r3, #1
 8008154:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	4413      	add	r3, r2
 800815c:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7ff fb97 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8008164:	4603      	mov	r3, r0
 8008166:	68f9      	ldr	r1, [r7, #12]
 8008168:	4618      	mov	r0, r3
 800816a:	f000 f941 	bl	80083f0 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800816e:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	4413      	add	r3, r2
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	4618      	mov	r0, r3
 800817c:	f7ff fa3f 	bl	80075fe <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	68b9      	ldr	r1, [r7, #8]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff fb49 	bl	800781c <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800818a:	687b      	ldr	r3, [r7, #4]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3718      	adds	r7, #24
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 8008194:	b590      	push	{r4, r7, lr}
 8008196:	b08b      	sub	sp, #44	; 0x2c
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	4613      	mov	r3, r2
 80081a0:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f7ff ff18 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 80081a8:	4604      	mov	r4, r0
 80081aa:	68b8      	ldr	r0, [r7, #8]
 80081ac:	f7ff ff14 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 80081b0:	4603      	mov	r3, r0
 80081b2:	429c      	cmp	r4, r3
 80081b4:	bf8c      	ite	hi
 80081b6:	2301      	movhi	r3, #1
 80081b8:	2300      	movls	r3, #0
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d006      	beq.n	80081ce <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	461a      	mov	r2, r3
 80081c4:	68f9      	ldr	r1, [r7, #12]
 80081c6:	68b8      	ldr	r0, [r7, #8]
 80081c8:	f7ff ffe4 	bl	8008194 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 80081cc:	e02b      	b.n	8008226 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 80081ce:	79fb      	ldrb	r3, [r7, #7]
 80081d0:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 80081d6:	68b8      	ldr	r0, [r7, #8]
 80081d8:	f7ff fefe 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 80081dc:	4604      	mov	r4, r0
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f7ff fefa 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 80081e4:	4603      	mov	r3, r0
 80081e6:	1ae2      	subs	r2, r4, r3
 80081e8:	f107 0114 	add.w	r1, r7, #20
 80081ec:	f107 0320 	add.w	r3, r7, #32
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7ff fb75 	bl	80078e0 <_ZN12SimpleStringC1EPKcj>
 80081f6:	f107 0318 	add.w	r3, r7, #24
 80081fa:	f107 0120 	add.w	r1, r7, #32
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff ff6c 	bl	80080de <_ZNK12SimpleStringplERKS_>
 8008206:	f107 0318 	add.w	r3, r7, #24
 800820a:	4619      	mov	r1, r3
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7ff fbb8 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8008212:	f107 0318 	add.w	r3, r7, #24
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff feff 	bl	800801a <_ZN12SimpleStringD1Ev>
 800821c:	f107 0320 	add.w	r3, r7, #32
 8008220:	4618      	mov	r0, r3
 8008222:	f7ff fefa 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 8008226:	372c      	adds	r7, #44	; 0x2c
 8008228:	46bd      	mov	sp, r7
 800822a:	bd90      	pop	{r4, r7, pc}

0800822c <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
 8008238:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800823a:	68b8      	ldr	r0, [r7, #8]
 800823c:	f7ff fecc 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8008240:	4603      	mov	r3, r0
 8008242:	3b01      	subs	r3, #1
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	429a      	cmp	r2, r3
 8008248:	bf8c      	ite	hi
 800824a:	2301      	movhi	r3, #1
 800824c:	2300      	movls	r3, #0
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b00      	cmp	r3, #0
 8008252:	d004      	beq.n	800825e <_ZNK12SimpleString9subStringEjj+0x32>
 8008254:	4919      	ldr	r1, [pc, #100]	; (80082bc <_ZNK12SimpleString9subStringEjj+0x90>)
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f7ff fb27 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800825c:	e029      	b.n	80082b2 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800825e:	68b8      	ldr	r0, [r7, #8]
 8008260:	f7ff fb17 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 8008264:	4602      	mov	r2, r0
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	441a      	add	r2, r3
 800826a:	f107 0310 	add.w	r3, r7, #16
 800826e:	4611      	mov	r1, r2
 8008270:	4618      	mov	r0, r3
 8008272:	f7ff fb1a 	bl	80078aa <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 8008276:	f107 0310 	add.w	r3, r7, #16
 800827a:	4618      	mov	r0, r3
 800827c:	f7ff feac 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8008280:	4602      	mov	r2, r0
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	4293      	cmp	r3, r2
 8008286:	bf34      	ite	cc
 8008288:	2301      	movcc	r3, #1
 800828a:	2300      	movcs	r3, #0
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d004      	beq.n	800829c <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	4413      	add	r3, r2
 8008298:	2200      	movs	r2, #0
 800829a:	701a      	strb	r2, [r3, #0]

    return newString;
 800829c:	f107 0310 	add.w	r3, r7, #16
 80082a0:	4619      	mov	r1, r3
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f7ff fb55 	bl	8007952 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 80082a8:	f107 0310 	add.w	r3, r7, #16
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7ff feb4 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	3718      	adds	r7, #24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	08016440 	.word	0x08016440

080082c0 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f04f 33ff 	mov.w	r3, #4294967295
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	68b9      	ldr	r1, [r7, #8]
 80082d6:	f7ff ffa9 	bl	800822c <_ZNK12SimpleString9subStringEjj>
}
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b082      	sub	sp, #8
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7ff fad0 	bl	8007892 <_ZNK12SimpleString9getBufferEv>
 80082f2:	4602      	mov	r2, r0
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	4413      	add	r3, r2
 80082f8:	781b      	ldrb	r3, [r3, #0]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	460b      	mov	r3, r1
 800830c:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800830e:	78fb      	ldrb	r3, [r7, #3]
 8008310:	461a      	mov	r2, r3
 8008312:	2100      	movs	r1, #0
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f805 	bl	8008324 <_ZNK12SimpleString8findFromEjc>
 800831a:	4603      	mov	r3, r0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	4613      	mov	r3, r2
 8008330:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f7ff fe50 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8008338:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	617b      	str	r3, [r7, #20]
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	429a      	cmp	r2, r3
 8008344:	d213      	bcs.n	800836e <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 8008346:	6979      	ldr	r1, [r7, #20]
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f7ff ffca 	bl	80082e2 <_ZNK12SimpleString2atEj>
 800834e:	4603      	mov	r3, r0
 8008350:	461a      	mov	r2, r3
 8008352:	79fb      	ldrb	r3, [r7, #7]
 8008354:	4293      	cmp	r3, r2
 8008356:	bf0c      	ite	eq
 8008358:	2301      	moveq	r3, #1
 800835a:	2300      	movne	r3, #0
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <_ZNK12SimpleString8findFromEjc+0x42>
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	e005      	b.n	8008372 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	3301      	adds	r3, #1
 800836a:	617b      	str	r3, [r7, #20]
 800836c:	e7e7      	b.n	800833e <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800836e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008372:	4618      	mov	r0, r3
 8008374:	3718      	adds	r7, #24
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
	...

0800837c <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	4611      	mov	r1, r2
 8008388:	461a      	mov	r2, r3
 800838a:	460b      	mov	r3, r1
 800838c:	71fb      	strb	r3, [r7, #7]
 800838e:	4613      	mov	r3, r2
 8008390:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 8008392:	79fb      	ldrb	r3, [r7, #7]
 8008394:	4619      	mov	r1, r3
 8008396:	68b8      	ldr	r0, [r7, #8]
 8008398:	f7ff ffb3 	bl	8008302 <_ZNK12SimpleString4findEc>
 800839c:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a4:	d104      	bne.n	80083b0 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 80083a6:	4911      	ldr	r1, [pc, #68]	; (80083ec <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7ff fa7e 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80083ae:	e019      	b.n	80083e4 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 80083b0:	79bb      	ldrb	r3, [r7, #6]
 80083b2:	461a      	mov	r2, r3
 80083b4:	6979      	ldr	r1, [r7, #20]
 80083b6:	68b8      	ldr	r0, [r7, #8]
 80083b8:	f7ff ffb4 	bl	8008324 <_ZNK12SimpleString8findFromEjc>
 80083bc:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c4:	d106      	bne.n	80083d4 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	68b9      	ldr	r1, [r7, #8]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7ff ff77 	bl	80082c0 <_ZNK12SimpleString9subStringEj>
 80083d2:	e007      	b.n	80083e4 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	68b9      	ldr	r1, [r7, #8]
 80083e0:	f7ff ff24 	bl	800822c <_ZNK12SimpleString9subStringEjj>
}
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	3718      	adds	r7, #24
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	08016440 	.word	0x08016440

080083f0 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 80083fa:	f240 2275 	movw	r2, #629	; 0x275
 80083fe:	490a      	ldr	r1, [pc, #40]	; (8008428 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 8008400:	6838      	ldr	r0, [r7, #0]
 8008402:	f7fe ffd7 	bl	80073b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8008406:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f7ff f8f6 	bl	80075fe <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	3b01      	subs	r3, #1
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4413      	add	r3, r2
 800841a:	2200      	movs	r2, #0
 800841c:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800841e:	68fb      	ldr	r3, [r7, #12]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	08016380 	.word	0x08016380

0800842c <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	2b2f      	cmp	r3, #47	; 0x2f
 800843a:	d904      	bls.n	8008446 <_ZN12SimpleString7isDigitEc+0x1a>
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	2b39      	cmp	r3, #57	; 0x39
 8008440:	d801      	bhi.n	8008446 <_ZN12SimpleString7isDigitEc+0x1a>
 8008442:	2301      	movs	r3, #1
 8008444:	e000      	b.n	8008448 <_ZN12SimpleString7isDigitEc+0x1c>
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	4603      	mov	r3, r0
 800845c:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800845e:	79fb      	ldrb	r3, [r7, #7]
 8008460:	2b20      	cmp	r3, #32
 8008462:	d005      	beq.n	8008470 <_ZN12SimpleString7isSpaceEc+0x1c>
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	2b08      	cmp	r3, #8
 8008468:	d904      	bls.n	8008474 <_ZN12SimpleString7isSpaceEc+0x20>
 800846a:	79fb      	ldrb	r3, [r7, #7]
 800846c:	2b0d      	cmp	r3, #13
 800846e:	d801      	bhi.n	8008474 <_ZN12SimpleString7isSpaceEc+0x20>
 8008470:	2301      	movs	r3, #1
 8008472:	e000      	b.n	8008476 <_ZN12SimpleString7isSpaceEc+0x22>
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	4603      	mov	r3, r0
 800848a:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800848c:	79fb      	ldrb	r3, [r7, #7]
 800848e:	2b40      	cmp	r3, #64	; 0x40
 8008490:	d904      	bls.n	800849c <_ZN12SimpleString7isUpperEc+0x1a>
 8008492:	79fb      	ldrb	r3, [r7, #7]
 8008494:	2b5a      	cmp	r3, #90	; 0x5a
 8008496:	d801      	bhi.n	800849c <_ZN12SimpleString7isUpperEc+0x1a>
 8008498:	2301      	movs	r3, #1
 800849a:	e000      	b.n	800849e <_ZN12SimpleString7isUpperEc+0x1c>
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	4603      	mov	r3, r0
 80084b2:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 80084b4:	79fb      	ldrb	r3, [r7, #7]
 80084b6:	2b1f      	cmp	r3, #31
 80084b8:	d902      	bls.n	80084c0 <_ZN12SimpleString9isControlEc+0x16>
 80084ba:	79fb      	ldrb	r3, [r7, #7]
 80084bc:	2b7f      	cmp	r3, #127	; 0x7f
 80084be:	d101      	bne.n	80084c4 <_ZN12SimpleString9isControlEc+0x1a>
 80084c0:	2301      	movs	r3, #1
 80084c2:	e000      	b.n	80084c6 <_ZN12SimpleString9isControlEc+0x1c>
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b083      	sub	sp, #12
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	4603      	mov	r3, r0
 80084da:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 80084dc:	79fb      	ldrb	r3, [r7, #7]
 80084de:	2b06      	cmp	r3, #6
 80084e0:	d904      	bls.n	80084ec <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 80084e2:	79fb      	ldrb	r3, [r7, #7]
 80084e4:	2b0d      	cmp	r3, #13
 80084e6:	d801      	bhi.n	80084ec <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 80084e8:	2301      	movs	r3, #1
 80084ea:	e000      	b.n	80084ee <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <_Z10StringFromPKc>:
{
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
}

SimpleString StringFrom(const char *value)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b082      	sub	sp, #8
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff f9cf 	bl	80078aa <_ZN12SimpleStringC1EPKc>
}
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 8008514:	b590      	push	{r4, r7, lr}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800851e:	2400      	movs	r4, #0
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00e      	beq.n	8008544 <_Z25PrintableStringFromOrNullPKc+0x30>
 8008526:	f107 0308 	add.w	r3, r7, #8
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff ffe4 	bl	80084fa <_Z10StringFromPKc>
 8008532:	2401      	movs	r4, #1
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f107 0208 	add.w	r2, r7, #8
 800853a:	4611      	mov	r1, r2
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff fc5d 	bl	8007dfc <_ZNK12SimpleString9printableEv>
 8008542:	e004      	b.n	800854e <_Z25PrintableStringFromOrNullPKc+0x3a>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4908      	ldr	r1, [pc, #32]	; (8008568 <_Z25PrintableStringFromOrNullPKc+0x54>)
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff ffd6 	bl	80084fa <_Z10StringFromPKc>
 800854e:	2c00      	cmp	r4, #0
 8008550:	d004      	beq.n	800855c <_Z25PrintableStringFromOrNullPKc+0x48>
 8008552:	f107 0308 	add.w	r3, r7, #8
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff fd5f 	bl	800801a <_ZN12SimpleStringD1Ev>
 800855c:	bf00      	nop
}
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	bd90      	pop	{r4, r7, pc}
 8008566:	bf00      	nop
 8008568:	08016460 	.word	0x08016460

0800856c <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	683a      	ldr	r2, [r7, #0]
 800857a:	4904      	ldr	r1, [pc, #16]	; (800858c <_Z10StringFromi+0x20>)
 800857c:	4618      	mov	r0, r3
 800857e:	f000 f9d9 	bl	8008934 <_Z16StringFromFormatPKcz>
}
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	08016468 	.word	0x08016468

08008590 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	4904      	ldr	r1, [pc, #16]	; (80085b0 <_Z10StringFroml+0x20>)
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 f9c7 	bl	8008934 <_Z16StringFromFormatPKcz>
}
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	0801646c 	.word	0x0801646c

080085b4 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 80085be:	f107 0308 	add.w	r3, r7, #8
 80085c2:	4910      	ldr	r1, [pc, #64]	; (8008604 <_Z10StringFromPKv+0x50>)
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff f970 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80085ca:	f107 0310 	add.w	r3, r7, #16
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 f945 	bl	8008860 <_Z13HexStringFromPKv>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f107 0210 	add.w	r2, r7, #16
 80085dc:	f107 0108 	add.w	r1, r7, #8
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7ff fd7c 	bl	80080de <_ZNK12SimpleStringplERKS_>
 80085e6:	f107 0310 	add.w	r3, r7, #16
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7ff fd15 	bl	800801a <_ZN12SimpleStringD1Ev>
 80085f0:	f107 0308 	add.w	r3, r7, #8
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7ff fd10 	bl	800801a <_ZN12SimpleStringD1Ev>
 80085fa:	bf00      	nop
}
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	08016470 	.word	0x08016470

08008608 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 8008612:	f107 0308 	add.w	r3, r7, #8
 8008616:	4910      	ldr	r1, [pc, #64]	; (8008658 <_Z10StringFromPFvvE+0x50>)
 8008618:	4618      	mov	r0, r3
 800861a:	f7ff f946 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800861e:	f107 0310 	add.w	r3, r7, #16
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	4618      	mov	r0, r3
 8008626:	f000 f92f 	bl	8008888 <_Z13HexStringFromPFvvE>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f107 0210 	add.w	r2, r7, #16
 8008630:	f107 0108 	add.w	r1, r7, #8
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff fd52 	bl	80080de <_ZNK12SimpleStringplERKS_>
 800863a:	f107 0310 	add.w	r3, r7, #16
 800863e:	4618      	mov	r0, r3
 8008640:	f7ff fceb 	bl	800801a <_ZN12SimpleStringD1Ev>
 8008644:	f107 0308 	add.w	r3, r7, #8
 8008648:	4618      	mov	r0, r3
 800864a:	f7ff fce6 	bl	800801a <_ZN12SimpleStringD1Ev>
 800864e:	bf00      	nop
}
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	08016470 	.word	0x08016470

0800865c <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	4904      	ldr	r1, [pc, #16]	; (800867c <_Z13HexStringFroml+0x20>)
 800866c:	4618      	mov	r0, r3
 800866e:	f000 f961 	bl	8008934 <_Z16StringFromFormatPKcz>
}
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	08016474 	.word	0x08016474

08008680 <_Z13HexStringFroma>:
{
    return StringFromFormat("%x", value);
}

SimpleString HexStringFrom(signed char value)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800868c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4912      	ldr	r1, [pc, #72]	; (80086dc <_Z13HexStringFroma+0x5c>)
 8008694:	4618      	mov	r0, r3
 8008696:	f000 f94d 	bl	8008934 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800869a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	da16      	bge.n	80086d0 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff fc98 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 80086a8:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	1e9a      	subs	r2, r3, #2
 80086ae:	f107 030c 	add.w	r3, r7, #12
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff fe03 	bl	80082c0 <_ZNK12SimpleString9subStringEj>
 80086ba:	f107 030c 	add.w	r3, r7, #12
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff f95e 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 80086c6:	f107 030c 	add.w	r3, r7, #12
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7ff fca5 	bl	800801a <_ZN12SimpleStringD1Ev>
    }
    return result;
 80086d0:	bf00      	nop
}
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	08016478 	.word	0x08016478

080086e0 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	4904      	ldr	r1, [pc, #16]	; (8008700 <_Z13HexStringFromm+0x20>)
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 f91f 	bl	8008934 <_Z16StringFromFormatPKcz>
}
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	08016474 	.word	0x08016474

08008704 <_Z30BracketsFormattedHexStringFroml>:
{
    return BracketsFormattedHexString(HexStringFrom(value));
}

SimpleString BracketsFormattedHexStringFrom(long value)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800870e:	f107 0308 	add.w	r3, r7, #8
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff ffa1 	bl	800865c <_Z13HexStringFroml>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f107 0208 	add.w	r2, r7, #8
 8008720:	4611      	mov	r1, r2
 8008722:	4618      	mov	r0, r3
 8008724:	f000 f846 	bl	80087b4 <_Z26BracketsFormattedHexString12SimpleString>
 8008728:	f107 0308 	add.w	r3, r7, #8
 800872c:	4618      	mov	r0, r3
 800872e:	f7ff fc74 	bl	800801a <_ZN12SimpleStringD1Ev>
 8008732:	bf00      	nop
}
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 8008746:	f107 0308 	add.w	r3, r7, #8
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff ffc7 	bl	80086e0 <_Z13HexStringFromm>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f107 0208 	add.w	r2, r7, #8
 8008758:	4611      	mov	r1, r2
 800875a:	4618      	mov	r0, r3
 800875c:	f000 f82a 	bl	80087b4 <_Z26BracketsFormattedHexString12SimpleString>
 8008760:	f107 0308 	add.w	r3, r7, #8
 8008764:	4618      	mov	r0, r3
 8008766:	f7ff fc58 	bl	800801a <_ZN12SimpleStringD1Ev>
 800876a:	bf00      	nop
}
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 8008780:	f107 0308 	add.w	r3, r7, #8
 8008784:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8008788:	4611      	mov	r1, r2
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff ff78 	bl	8008680 <_Z13HexStringFroma>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f107 0208 	add.w	r2, r7, #8
 8008796:	4611      	mov	r1, r2
 8008798:	4618      	mov	r0, r3
 800879a:	f000 f80b 	bl	80087b4 <_Z26BracketsFormattedHexString12SimpleString>
 800879e:	f107 0308 	add.w	r3, r7, #8
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7ff fc39 	bl	800801a <_ZN12SimpleStringD1Ev>
 80087a8:	bf00      	nop
}
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
	...

080087b4 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b088      	sub	sp, #32
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 80087be:	f107 0310 	add.w	r3, r7, #16
 80087c2:	4917      	ldr	r1, [pc, #92]	; (8008820 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7ff f870 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80087ca:	f107 0308 	add.w	r3, r7, #8
 80087ce:	f107 0110 	add.w	r1, r7, #16
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7ff fc82 	bl	80080de <_ZNK12SimpleStringplERKS_>
 80087da:	f107 0318 	add.w	r3, r7, #24
 80087de:	4911      	ldr	r1, [pc, #68]	; (8008824 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7ff f862 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f107 0218 	add.w	r2, r7, #24
 80087ec:	f107 0108 	add.w	r1, r7, #8
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7ff fc74 	bl	80080de <_ZNK12SimpleStringplERKS_>
 80087f6:	f107 0318 	add.w	r3, r7, #24
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff fc0d 	bl	800801a <_ZN12SimpleStringD1Ev>
 8008800:	f107 0308 	add.w	r3, r7, #8
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff fc08 	bl	800801a <_ZN12SimpleStringD1Ev>
 800880a:	f107 0310 	add.w	r3, r7, #16
 800880e:	4618      	mov	r0, r3
 8008810:	f7ff fc03 	bl	800801a <_ZN12SimpleStringD1Ev>
 8008814:	bf00      	nop
}
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	3720      	adds	r7, #32
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	0801647c 	.word	0x0801647c
 8008824:	08016480 	.word	0x08016480

08008828 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 8008830:	1d3b      	adds	r3, r7, #4
 8008832:	60fb      	str	r3, [r7, #12]
    return *long_value;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800884c:	1d3b      	adds	r3, r7, #4
 800884e:	60fb      	str	r3, [r7, #12]
    return *long_value;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800886a:	6838      	ldr	r0, [r7, #0]
 800886c:	f7ff ffdc 	bl	8008828 <_ZL25convertPointerToLongValuePKv>
 8008870:	4602      	mov	r2, r0
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4903      	ldr	r1, [pc, #12]	; (8008884 <_Z13HexStringFromPKv+0x24>)
 8008876:	4618      	mov	r0, r3
 8008878:	f000 f85c 	bl	8008934 <_Z16StringFromFormatPKcz>
}
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	08016474 	.word	0x08016474

08008888 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 8008892:	6838      	ldr	r0, [r7, #0]
 8008894:	f7ff ffd6 	bl	8008844 <_ZL33convertFunctionPointerToLongValuePFvvE>
 8008898:	4602      	mov	r2, r0
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4903      	ldr	r1, [pc, #12]	; (80088ac <_Z13HexStringFromPFvvE+0x24>)
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 f848 	bl	8008934 <_Z16StringFromFormatPKcz>
}
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	08016474 	.word	0x08016474

080088b0 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af02      	add	r7, sp, #8
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	ed87 0b00 	vstr	d0, [r7]
 80088bc:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 80088be:	4b18      	ldr	r3, [pc, #96]	; (8008920 <_Z10StringFromdi+0x70>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	ed97 0b00 	vldr	d0, [r7]
 80088c6:	4798      	blx	r3
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bf14      	ite	ne
 80088ce:	2301      	movne	r3, #1
 80088d0:	2300      	moveq	r3, #0
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d004      	beq.n	80088e2 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 80088d8:	4912      	ldr	r1, [pc, #72]	; (8008924 <_Z10StringFromdi+0x74>)
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f7fe ffe5 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80088e0:	e01a      	b.n	8008918 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 80088e2:	4b11      	ldr	r3, [pc, #68]	; (8008928 <_Z10StringFromdi+0x78>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	ed97 0b00 	vldr	d0, [r7]
 80088ea:	4798      	blx	r3
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	bf14      	ite	ne
 80088f2:	2301      	movne	r3, #1
 80088f4:	2300      	moveq	r3, #0
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d004      	beq.n	8008906 <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 80088fc:	490b      	ldr	r1, [pc, #44]	; (800892c <_Z10StringFromdi+0x7c>)
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7fe ffd3 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8008904:	e008      	b.n	8008918 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800890c:	e9cd 2300 	strd	r2, r3, [sp]
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	4907      	ldr	r1, [pc, #28]	; (8008930 <_Z10StringFromdi+0x80>)
 8008914:	f000 f80e 	bl	8008934 <_Z16StringFromFormatPKcz>
}
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	200000e0 	.word	0x200000e0
 8008924:	080164b4 	.word	0x080164b4
 8008928:	200000e4 	.word	0x200000e4
 800892c:	080164c8 	.word	0x080164c8
 8008930:	080164d8 	.word	0x080164d8

08008934 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 8008934:	b40e      	push	{r1, r2, r3}
 8008936:	b580      	push	{r7, lr}
 8008938:	b087      	sub	sp, #28
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800893e:	4910      	ldr	r1, [pc, #64]	; (8008980 <_Z16StringFromFormatPKcz+0x4c>)
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7fe ffb2 	bl	80078aa <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 8008946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800894a:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800894c:	f107 0310 	add.w	r3, r7, #16
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008954:	4618      	mov	r0, r3
 8008956:	f000 f839 	bl	80089cc <_Z17VStringFromFormatPKcSt9__va_list>
 800895a:	f107 0310 	add.w	r3, r7, #16
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7ff f80e 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8008966:	f107 0310 	add.w	r3, r7, #16
 800896a:	4618      	mov	r0, r3
 800896c:	f7ff fb55 	bl	800801a <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 8008970:	bf00      	nop
}
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	371c      	adds	r7, #28
 8008976:	46bd      	mov	sp, r7
 8008978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800897c:	b003      	add	sp, #12
 800897e:	4770      	bx	lr
 8008980:	08016440 	.word	0x08016440

08008984 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	683a      	ldr	r2, [r7, #0]
 8008992:	4904      	ldr	r1, [pc, #16]	; (80089a4 <_Z10StringFromj+0x20>)
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff ffcd 	bl	8008934 <_Z16StringFromFormatPKcz>
}
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	080164e4 	.word	0x080164e4

080089a8 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	4904      	ldr	r1, [pc, #16]	; (80089c8 <_Z10StringFromm+0x20>)
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7ff ffbb 	bl	8008934 <_Z16StringFromFormatPKcz>
}
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	080164e8 	.word	0x080164e8

080089cc <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 80089cc:	b590      	push	{r4, r7, lr}
 80089ce:	b0a7      	sub	sp, #156	; 0x9c
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 80089dc:	492e      	ldr	r1, [pc, #184]	; (8008a98 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f7fe ff63 	bl	80078aa <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 80089e4:	4b2d      	ldr	r3, [pc, #180]	; (8008a9c <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 80089e6:	681c      	ldr	r4, [r3, #0]
 80089e8:	f107 0014 	add.w	r0, r7, #20
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	2164      	movs	r1, #100	; 0x64
 80089f2:	47a0      	blx	r4
 80089f4:	4603      	mov	r3, r0
 80089f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 80089fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80089fe:	2b63      	cmp	r3, #99	; 0x63
 8008a00:	d813      	bhi.n	8008a2a <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 8008a02:	f107 0214 	add.w	r2, r7, #20
 8008a06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fe ff4c 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8008a12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008a16:	4619      	mov	r1, r3
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f7fe ffb2 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8008a1e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7ff faf9 	bl	800801a <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 8008a28:	e031      	b.n	8008a8e <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 8008a2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a2e:	3301      	adds	r3, #1
 8008a30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 8008a34:	f240 32c3 	movw	r2, #963	; 0x3c3
 8008a38:	4919      	ldr	r1, [pc, #100]	; (8008aa0 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 8008a3a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008a3e:	f7fe fcb9 	bl	80073b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8008a42:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 8008a46:	4b15      	ldr	r3, [pc, #84]	; (8008a9c <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 8008a48:	681c      	ldr	r4, [r3, #0]
 8008a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a52:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8008a56:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 8008a58:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008a5c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fe ff22 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8008a66:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f7fe ff88 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8008a72:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7ff facf 	bl	800801a <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 8008a7c:	f240 33c7 	movw	r3, #967	; 0x3c7
 8008a80:	4a07      	ldr	r2, [pc, #28]	; (8008aa0 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 8008a82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a86:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8008a8a:	f7fe fca7 	bl	80073dc <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 8008a8e:	bf00      	nop
}
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	379c      	adds	r7, #156	; 0x9c
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd90      	pop	{r4, r7, pc}
 8008a98:	08016440 	.word	0x08016440
 8008a9c:	200000ac 	.word	0x200000ac
 8008aa0:	08016380 	.word	0x08016380

08008aa4 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b08a      	sub	sp, #40	; 0x28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
    SimpleString result;
 8008ab0:	491f      	ldr	r1, [pc, #124]	; (8008b30 <_Z16StringFromBinaryPKhj+0x8c>)
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f7fe fef9 	bl	80078aa <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 8008ab8:	2300      	movs	r3, #0
 8008aba:	627b      	str	r3, [r7, #36]	; 0x24
 8008abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d219      	bcs.n	8008af8 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	4413      	add	r3, r2
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	461a      	mov	r2, r3
 8008ace:	f107 0314 	add.w	r3, r7, #20
 8008ad2:	4918      	ldr	r1, [pc, #96]	; (8008b34 <_Z16StringFromBinaryPKhj+0x90>)
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7ff ff2d 	bl	8008934 <_Z16StringFromFormatPKcz>
 8008ada:	f107 0314 	add.w	r3, r7, #20
 8008ade:	4619      	mov	r1, r3
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f7ff fb17 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 8008ae6:	f107 0314 	add.w	r3, r7, #20
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff fa95 	bl	800801a <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	3301      	adds	r3, #1
 8008af4:	627b      	str	r3, [r7, #36]	; 0x24
 8008af6:	e7e1      	b.n	8008abc <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f7ff fa6d 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8008afe:	4603      	mov	r3, r0
 8008b00:	3b01      	subs	r3, #1
 8008b02:	f107 001c 	add.w	r0, r7, #28
 8008b06:	2200      	movs	r2, #0
 8008b08:	68f9      	ldr	r1, [r7, #12]
 8008b0a:	f7ff fb8f 	bl	800822c <_ZNK12SimpleString9subStringEjj>
 8008b0e:	f107 031c 	add.w	r3, r7, #28
 8008b12:	4619      	mov	r1, r3
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f7fe ff34 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8008b1a:	f107 031c 	add.w	r3, r7, #28
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7ff fa7b 	bl	800801a <_ZN12SimpleStringD1Ev>

    return result;
 8008b24:	bf00      	nop
}
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	3728      	adds	r7, #40	; 0x28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	08016440 	.word	0x08016440
 8008b34:	080164ec 	.word	0x080164ec

08008b38 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d006      	beq.n	8008b58 <_Z22StringFromBinaryOrNullPKhj+0x20>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	68b9      	ldr	r1, [r7, #8]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7ff ffa7 	bl	8008aa4 <_Z16StringFromBinaryPKhj>
 8008b56:	e004      	b.n	8008b62 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	4904      	ldr	r1, [pc, #16]	; (8008b6c <_Z22StringFromBinaryOrNullPKhj+0x34>)
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7ff fccc 	bl	80084fa <_Z10StringFromPKc>
}
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	08016460 	.word	0x08016460

08008b70 <_Z20StringFromMaskedBitsmmj>:
{
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
}

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b088      	sub	sp, #32
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
 8008b7c:	603b      	str	r3, [r7, #0]
    SimpleString result;
 8008b7e:	4925      	ldr	r1, [pc, #148]	; (8008c14 <_Z20StringFromMaskedBitsmmj+0xa4>)
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f7fe fe92 	bl	80078aa <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d802      	bhi.n	8008b92 <_Z20StringFromMaskedBitsmmj+0x22>
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	e000      	b.n	8008b94 <_Z20StringFromMaskedBitsmmj+0x24>
 8008b92:	2320      	movs	r3, #32
 8008b94:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba0:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	61fb      	str	r3, [r7, #28]
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d22d      	bcs.n	8008c0a <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00c      	beq.n	8008bd2 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <_Z20StringFromMaskedBitsmmj+0x56>
 8008bc2:	4b15      	ldr	r3, [pc, #84]	; (8008c18 <_Z20StringFromMaskedBitsmmj+0xa8>)
 8008bc4:	e000      	b.n	8008bc8 <_Z20StringFromMaskedBitsmmj+0x58>
 8008bc6:	4b15      	ldr	r3, [pc, #84]	; (8008c1c <_Z20StringFromMaskedBitsmmj+0xac>)
 8008bc8:	4619      	mov	r1, r3
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f7ff fab4 	bl	8008138 <_ZN12SimpleStringpLEPKc>
 8008bd0:	e003      	b.n	8008bda <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 8008bd2:	4913      	ldr	r1, [pc, #76]	; (8008c20 <_Z20StringFromMaskedBitsmmj+0xb0>)
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff faaf 	bl	8008138 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	f003 0307 	and.w	r3, r3, #7
 8008be0:	2b07      	cmp	r3, #7
 8008be2:	d108      	bne.n	8008bf6 <_Z20StringFromMaskedBitsmmj+0x86>
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	3b01      	subs	r3, #1
 8008be8:	69fa      	ldr	r2, [r7, #28]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d003      	beq.n	8008bf6 <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 8008bee:	490d      	ldr	r1, [pc, #52]	; (8008c24 <_Z20StringFromMaskedBitsmmj+0xb4>)
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f7ff faa1 	bl	8008138 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	005b      	lsls	r3, r3, #1
 8008c00:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	3301      	adds	r3, #1
 8008c06:	61fb      	str	r3, [r7, #28]
 8008c08:	e7cd      	b.n	8008ba6 <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 8008c0a:	bf00      	nop
}
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	3720      	adds	r7, #32
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	08016440 	.word	0x08016440
 8008c18:	08016518 	.word	0x08016518
 8008c1c:	0801651c 	.word	0x0801651c
 8008c20:	08016520 	.word	0x08016520
 8008c24:	08016524 	.word	0x08016524

08008c28 <_ZN22SimpleStringCollectionC1Ev>:
    }

    return StringFromFormat("%u%s", number, suffix);
}

SimpleStringCollection::SimpleStringCollection()
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3304      	adds	r3, #4
 8008c34:	4907      	ldr	r1, [pc, #28]	; (8008c54 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fe fe37 	bl	80078aa <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	601a      	str	r2, [r3, #0]
    size_ = 0;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	60da      	str	r2, [r3, #12]
}
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	08016440 	.word	0x08016440

08008c58 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 8008c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d01e      	beq.n	8008ca8 <_ZN22SimpleStringCollection8allocateEj+0x50>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	3b04      	subs	r3, #4
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	18d4      	adds	r4, r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	429c      	cmp	r4, r3
 8008c80:	d004      	beq.n	8008c8c <_ZN22SimpleStringCollection8allocateEj+0x34>
 8008c82:	3c08      	subs	r4, #8
 8008c84:	4620      	mov	r0, r4
 8008c86:	f7ff f9c8 	bl	800801a <_ZN12SimpleStringD1Ev>
 8008c8a:	e7f6      	b.n	8008c7a <_ZN22SimpleStringCollection8allocateEj+0x22>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f1a3 0208 	sub.w	r2, r3, #8
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3b04      	subs	r3, #4
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	00db      	lsls	r3, r3, #3
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	4610      	mov	r0, r2
 8008ca4:	f7fd ff5e 	bl	8006b64 <_ZdaPvj>

    size_ = _size;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68dc      	ldr	r4, [r3, #12]
 8008cb2:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8008cb6:	d202      	bcs.n	8008cbe <_ZN22SimpleStringCollection8allocateEj+0x66>
 8008cb8:	1c63      	adds	r3, r4, #1
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	e001      	b.n	8008cc2 <_ZN22SimpleStringCollection8allocateEj+0x6a>
 8008cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc2:	f240 4227 	movw	r2, #1063	; 0x427
 8008cc6:	4910      	ldr	r1, [pc, #64]	; (8008d08 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fd ff29 	bl	8006b20 <_ZnajPKci>
 8008cce:	4605      	mov	r5, r0
 8008cd0:	1d2b      	adds	r3, r5, #4
 8008cd2:	3b04      	subs	r3, #4
 8008cd4:	2208      	movs	r2, #8
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	1d2b      	adds	r3, r5, #4
 8008cda:	601c      	str	r4, [r3, #0]
 8008cdc:	f105 0308 	add.w	r3, r5, #8
 8008ce0:	1e62      	subs	r2, r4, #1
 8008ce2:	4614      	mov	r4, r2
 8008ce4:	461e      	mov	r6, r3
 8008ce6:	2c00      	cmp	r4, #0
 8008ce8:	db06      	blt.n	8008cf8 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 8008cea:	4908      	ldr	r1, [pc, #32]	; (8008d0c <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 8008cec:	4630      	mov	r0, r6
 8008cee:	f7fe fddc 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8008cf2:	3608      	adds	r6, #8
 8008cf4:	3c01      	subs	r4, #1
 8008cf6:	e7f6      	b.n	8008ce6 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 8008cf8:	f105 0208 	add.w	r2, r5, #8
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	601a      	str	r2, [r3, #0]
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d08:	08016380 	.word	0x08016380
 8008d0c:	08016440 	.word	0x08016440

08008d10 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 8008d10:	b590      	push	{r4, r7, lr}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d01e      	beq.n	8008d5e <_ZN22SimpleStringCollectionD1Ev+0x4e>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3b04      	subs	r3, #4
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	00db      	lsls	r3, r3, #3
 8008d2e:	18d4      	adds	r4, r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	429c      	cmp	r4, r3
 8008d36:	d004      	beq.n	8008d42 <_ZN22SimpleStringCollectionD1Ev+0x32>
 8008d38:	3c08      	subs	r4, #8
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f7ff f96d 	bl	800801a <_ZN12SimpleStringD1Ev>
 8008d40:	e7f6      	b.n	8008d30 <_ZN22SimpleStringCollectionD1Ev+0x20>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f1a3 0208 	sub.w	r2, r3, #8
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3b04      	subs	r3, #4
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3301      	adds	r3, #1
 8008d54:	00db      	lsls	r3, r3, #3
 8008d56:	4619      	mov	r1, r3
 8008d58:	4610      	mov	r0, r2
 8008d5a:	f7fd ff03 	bl	8006b64 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	3304      	adds	r3, #4
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7ff f959 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd90      	pop	{r4, r7, pc}

08008d72 <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 8008d72:	b480      	push	{r7}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
    return size_;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68db      	ldr	r3, [r3, #12]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
	...

08008d8c <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 8008d8c:	b590      	push	{r4, r7, lr}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d315      	bcc.n	8008dcc <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	1d1c      	adds	r4, r3, #4
 8008da4:	f107 0308 	add.w	r3, r7, #8
 8008da8:	490d      	ldr	r1, [pc, #52]	; (8008de0 <_ZN22SimpleStringCollectionixEj+0x54>)
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fe fd7d 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8008db0:	f107 0308 	add.w	r3, r7, #8
 8008db4:	4619      	mov	r1, r3
 8008db6:	4620      	mov	r0, r4
 8008db8:	f7fe fde3 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8008dbc:	f107 0308 	add.w	r3, r7, #8
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7ff f92a 	bl	800801a <_ZN12SimpleStringD1Ev>
        return empty_;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	3304      	adds	r3, #4
 8008dca:	e004      	b.n	8008dd6 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	00db      	lsls	r3, r3, #3
 8008dd4:	4413      	add	r3, r2
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd90      	pop	{r4, r7, pc}
 8008dde:	bf00      	nop
 8008de0:	08016440 	.word	0x08016440

08008de4 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7fc f970 	bl	80050d4 <_ZN17ConsoleTestOutputC1Ev>
 8008df4:	4a08      	ldr	r2, [pc, #32]	; (8008e18 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	611a      	str	r2, [r3, #16]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3314      	adds	r3, #20
 8008e04:	4905      	ldr	r1, [pc, #20]	; (8008e1c <_ZN18TeamCityTestOutputC1Ev+0x38>)
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe fd4f 	bl	80078aa <_ZN12SimpleStringC1EPKc>
{
}
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	08018810 	.word	0x08018810
 8008e1c:	08016540 	.word	0x08016540

08008e20 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	4a08      	ldr	r2, [pc, #32]	; (8008e4c <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	3314      	adds	r3, #20
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7ff f8f1 	bl	800801a <_ZN12SimpleStringD1Ev>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fc f95c 	bl	80050f8 <_ZN17ConsoleTestOutputD1Ev>
{
}
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4618      	mov	r0, r3
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	08018810 	.word	0x08018810

08008e50 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
}
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7ff ffe1 	bl	8008e20 <_ZN18TeamCityTestOutputD1Ev>
 8008e5e:	211c      	movs	r1, #28
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7fd fe4d 	bl	8006b00 <_ZdlPvj>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	332c      	adds	r3, #44	; 0x2c
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	492b      	ldr	r1, [pc, #172]	; (8008f34 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 8008e86:	4610      	mov	r0, r2
 8008e88:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 8008e8a:	f107 0308 	add.w	r3, r7, #8
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f004 fdf7 	bl	800da84 <_ZNK10UtestShell7getNameEv>
 8008e96:	f107 0308 	add.w	r3, r7, #8
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7ff f890 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 f919 	bl	80090dc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8008eaa:	f107 0308 	add.w	r3, r7, #8
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7ff f8b3 	bl	800801a <_ZN12SimpleStringD1Ev>
    print("']\n");
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	332c      	adds	r3, #44	; 0x2c
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	491e      	ldr	r1, [pc, #120]	; (8008f38 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	4798      	blx	r3
    if (!test.willRun()) {
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3318      	adds	r3, #24
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6838      	ldr	r0, [r7, #0]
 8008ece:	4798      	blx	r3
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	f083 0301 	eor.w	r3, r3, #1
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d024      	beq.n	8008f26 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	332c      	adds	r3, #44	; 0x2c
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4915      	ldr	r1, [pc, #84]	; (8008f3c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 8008ee8:	4610      	mov	r0, r2
 8008eea:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 8008eec:	f107 0310 	add.w	r3, r7, #16
 8008ef0:	6839      	ldr	r1, [r7, #0]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f004 fdc6 	bl	800da84 <_ZNK10UtestShell7getNameEv>
 8008ef8:	f107 0310 	add.w	r3, r7, #16
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7ff f85f 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8008f02:	4603      	mov	r3, r0
 8008f04:	4619      	mov	r1, r3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f8e8 	bl	80090dc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8008f0c:	f107 0310 	add.w	r3, r7, #16
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7ff f882 	bl	800801a <_ZN12SimpleStringD1Ev>
        print("']\n");
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	332c      	adds	r3, #44	; 0x2c
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4905      	ldr	r1, [pc, #20]	; (8008f38 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 8008f22:	4610      	mov	r0, r2
 8008f24:	4798      	blx	r3
    }
    currtest_ = &test;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	611a      	str	r2, [r3, #16]
}
 8008f2c:	bf00      	nop
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	08016544 	.word	0x08016544
 8008f38:	08016564 	.word	0x08016564
 8008f3c:	08016568 	.word	0x08016568

08008f40 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8008f40:	b5b0      	push	{r4, r5, r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d03b      	beq.n	8008fca <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	332c      	adds	r3, #44	; 0x2c
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	491d      	ldr	r1, [pc, #116]	; (8008fd4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 8008f5e:	4610      	mov	r0, r2
 8008f60:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	691a      	ldr	r2, [r3, #16]
 8008f66:	f107 0308 	add.w	r3, r7, #8
 8008f6a:	4611      	mov	r1, r2
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f004 fd89 	bl	800da84 <_ZNK10UtestShell7getNameEv>
 8008f72:	f107 0308 	add.w	r3, r7, #8
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7ff f822 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f8ab 	bl	80090dc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8008f86:	f107 0308 	add.w	r3, r7, #8
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7ff f845 	bl	800801a <_ZN12SimpleStringD1Ev>
    print("' duration='");
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	332c      	adds	r3, #44	; 0x2c
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	490f      	ldr	r1, [pc, #60]	; (8008fd8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 8008fa0:	687d      	ldr	r5, [r7, #4]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3334      	adds	r3, #52	; 0x34
 8008fa8:	681c      	ldr	r4, [r3, #0]
 8008faa:	6838      	ldr	r0, [r7, #0]
 8008fac:	f004 fa0a 	bl	800d3c4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	47a0      	blx	r4
    print("']\n");
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	332c      	adds	r3, #44	; 0x2c
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4906      	ldr	r1, [pc, #24]	; (8008fdc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 8008fc4:	4610      	mov	r0, r2
 8008fc6:	4798      	blx	r3
 8008fc8:	e000      	b.n	8008fcc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 8008fca:	bf00      	nop
}
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	08016588 	.word	0x08016588
 8008fd8:	080165a8 	.word	0x080165a8
 8008fdc:	08016564 	.word	0x08016564

08008fe0 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 8008fe0:	b590      	push	{r4, r7, lr}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f103 0414 	add.w	r4, r3, #20
 8008ff0:	f107 0308 	add.w	r3, r7, #8
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f004 fd53 	bl	800daa2 <_ZNK10UtestShell8getGroupEv>
 8008ffc:	f107 0308 	add.w	r3, r7, #8
 8009000:	4619      	mov	r1, r3
 8009002:	4620      	mov	r0, r4
 8009004:	f7fe fcbd 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8009008:	f107 0308 	add.w	r3, r7, #8
 800900c:	4618      	mov	r0, r3
 800900e:	f7ff f804 	bl	800801a <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	332c      	adds	r3, #44	; 0x2c
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	490c      	ldr	r1, [pc, #48]	; (8009050 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800901e:	4610      	mov	r0, r2
 8009020:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	3314      	adds	r3, #20
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe ffca 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800902c:	4603      	mov	r3, r0
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f853 	bl	80090dc <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	332c      	adds	r3, #44	; 0x2c
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4904      	ldr	r1, [pc, #16]	; (8009054 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 8009042:	4610      	mov	r0, r2
 8009044:	4798      	blx	r3
}
 8009046:	bf00      	nop
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	bd90      	pop	{r4, r7, pc}
 800904e:	bf00      	nop
 8009050:	080165b8 	.word	0x080165b8
 8009054:	08016564 	.word	0x08016564

08009058 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8009058:	b590      	push	{r4, r7, lr}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f103 0414 	add.w	r4, r3, #20
 8009068:	f107 0308 	add.w	r3, r7, #8
 800906c:	4918      	ldr	r1, [pc, #96]	; (80090d0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800906e:	4618      	mov	r0, r3
 8009070:	f7fe fc1b 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8009074:	f107 0308 	add.w	r3, r7, #8
 8009078:	4619      	mov	r1, r3
 800907a:	4620      	mov	r0, r4
 800907c:	f7fe ffd9 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 8009080:	4603      	mov	r3, r0
 8009082:	461c      	mov	r4, r3
 8009084:	f107 0308 	add.w	r3, r7, #8
 8009088:	4618      	mov	r0, r3
 800908a:	f7fe ffc6 	bl	800801a <_ZN12SimpleStringD1Ev>
 800908e:	2c00      	cmp	r4, #0
 8009090:	d11a      	bne.n	80090c8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	332c      	adds	r3, #44	; 0x2c
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	490d      	ldr	r1, [pc, #52]	; (80090d4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800909e:	4610      	mov	r0, r2
 80090a0:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	3314      	adds	r3, #20
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe ff8a 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 80090ac:	4603      	mov	r3, r0
 80090ae:	4619      	mov	r1, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f813 	bl	80090dc <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	332c      	adds	r3, #44	; 0x2c
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4905      	ldr	r1, [pc, #20]	; (80090d8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 80090c2:	4610      	mov	r0, r2
 80090c4:	4798      	blx	r3
 80090c6:	e000      	b.n	80090ca <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 80090c8:	bf00      	nop
}
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd90      	pop	{r4, r7, pc}
 80090d0:	08016540 	.word	0x08016540
 80090d4:	080165dc 	.word	0x080165dc
 80090d8:	08016564 	.word	0x08016564

080090dc <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
    while (*s) {
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d03f      	beq.n	800916e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	2b27      	cmp	r3, #39	; 0x27
 80090f4:	d00b      	beq.n	800910e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	2b7c      	cmp	r3, #124	; 0x7c
 80090fc:	d007      	beq.n	800910e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	2b5b      	cmp	r3, #91	; 0x5b
 8009104:	d003      	beq.n	800910e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	2b5d      	cmp	r3, #93	; 0x5d
 800910c:	d107      	bne.n	800911e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800910e:	237c      	movs	r3, #124	; 0x7c
 8009110:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8009118:	2300      	movs	r3, #0
 800911a:	73bb      	strb	r3, [r7, #14]
 800911c:	e01a      	b.n	8009154 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	2b0d      	cmp	r3, #13
 8009124:	d106      	bne.n	8009134 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 8009126:	237c      	movs	r3, #124	; 0x7c
 8009128:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800912a:	2372      	movs	r3, #114	; 0x72
 800912c:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800912e:	2300      	movs	r3, #0
 8009130:	73bb      	strb	r3, [r7, #14]
 8009132:	e00f      	b.n	8009154 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2b0a      	cmp	r3, #10
 800913a:	d106      	bne.n	800914a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800913c:	237c      	movs	r3, #124	; 0x7c
 800913e:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 8009140:	236e      	movs	r3, #110	; 0x6e
 8009142:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	73bb      	strb	r3, [r7, #14]
 8009148:	e004      	b.n	8009154 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 8009150:	2300      	movs	r3, #0
 8009152:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3328      	adds	r3, #40	; 0x28
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f107 010c 	add.w	r1, r7, #12
 8009162:	4610      	mov	r0, r2
 8009164:	4798      	blx	r3
        s++;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	3301      	adds	r3, #1
 800916a:	603b      	str	r3, [r7, #0]
    while (*s) {
 800916c:	e7bb      	b.n	80090e6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800916e:	bf00      	nop
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
	...

08009178 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 8009178:	b5b0      	push	{r4, r5, r7, lr}
 800917a:	b08a      	sub	sp, #40	; 0x28
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	332c      	adds	r3, #44	; 0x2c
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4968      	ldr	r1, [pc, #416]	; (8009330 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800918e:	4610      	mov	r0, r2
 8009190:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3310      	adds	r3, #16
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f107 0208 	add.w	r2, r7, #8
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	4610      	mov	r0, r2
 80091a2:	4798      	blx	r3
 80091a4:	f107 0308 	add.w	r3, r7, #8
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7fe ff09 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 80091ae:	4603      	mov	r3, r0
 80091b0:	4619      	mov	r1, r3
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7ff ff92 	bl	80090dc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80091b8:	f107 0308 	add.w	r3, r7, #8
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fe ff2c 	bl	800801a <_ZN12SimpleStringD1Ev>
    print("' message='");
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	332c      	adds	r3, #44	; 0x2c
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4959      	ldr	r1, [pc, #356]	; (8009334 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 80091ce:	4610      	mov	r0, r2
 80091d0:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 80091d2:	6838      	ldr	r0, [r7, #0]
 80091d4:	f000 fa15 	bl	8009602 <_ZNK11TestFailure17isOutsideTestFileEv>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d105      	bne.n	80091ea <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 80091de:	6838      	ldr	r0, [r7, #0]
 80091e0:	f000 fa21 	bl	8009626 <_ZNK11TestFailure18isInHelperFunctionEv>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 80091ea:	2301      	movs	r3, #1
 80091ec:	e000      	b.n	80091f0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 80091ee:	2300      	movs	r3, #0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d042      	beq.n	800927a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	332c      	adds	r3, #44	; 0x2c
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	494e      	ldr	r1, [pc, #312]	; (8009338 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 8009204:	687d      	ldr	r5, [r7, #4]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	332c      	adds	r3, #44	; 0x2c
 800920c:	681c      	ldr	r4, [r3, #0]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	331c      	adds	r3, #28
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f107 0210 	add.w	r2, r7, #16
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	4610      	mov	r0, r2
 800921e:	4798      	blx	r3
 8009220:	f107 0310 	add.w	r3, r7, #16
 8009224:	4618      	mov	r0, r3
 8009226:	f7fe fecb 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800922a:	4603      	mov	r3, r0
 800922c:	4619      	mov	r1, r3
 800922e:	4628      	mov	r0, r5
 8009230:	47a0      	blx	r4
 8009232:	f107 0310 	add.w	r3, r7, #16
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe feef 	bl	800801a <_ZN12SimpleStringD1Ev>
        print(":");
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	332c      	adds	r3, #44	; 0x2c
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	493d      	ldr	r1, [pc, #244]	; (800933c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 8009248:	4610      	mov	r0, r2
 800924a:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800924c:	687d      	ldr	r5, [r7, #4]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	3334      	adds	r3, #52	; 0x34
 8009254:	681c      	ldr	r4, [r3, #0]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3320      	adds	r3, #32
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6838      	ldr	r0, [r7, #0]
 8009260:	4798      	blx	r3
 8009262:	4603      	mov	r3, r0
 8009264:	4619      	mov	r1, r3
 8009266:	4628      	mov	r0, r5
 8009268:	47a0      	blx	r4
        print("): ");
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	332c      	adds	r3, #44	; 0x2c
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4932      	ldr	r1, [pc, #200]	; (8009340 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 8009276:	4610      	mov	r0, r2
 8009278:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3308      	adds	r3, #8
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f107 0218 	add.w	r2, r7, #24
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	4610      	mov	r0, r2
 800928a:	4798      	blx	r3
 800928c:	f107 0318 	add.w	r3, r7, #24
 8009290:	4618      	mov	r0, r3
 8009292:	f7fe fe95 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8009296:	4603      	mov	r3, r0
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7ff ff1e 	bl	80090dc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80092a0:	f107 0318 	add.w	r3, r7, #24
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fe feb8 	bl	800801a <_ZN12SimpleStringD1Ev>
    print(":");
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	332c      	adds	r3, #44	; 0x2c
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4921      	ldr	r1, [pc, #132]	; (800933c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 80092b6:	4610      	mov	r0, r2
 80092b8:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 80092ba:	687d      	ldr	r5, [r7, #4]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3334      	adds	r3, #52	; 0x34
 80092c2:	681c      	ldr	r4, [r3, #0]
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3314      	adds	r3, #20
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6838      	ldr	r0, [r7, #0]
 80092ce:	4798      	blx	r3
 80092d0:	4603      	mov	r3, r0
 80092d2:	4619      	mov	r1, r3
 80092d4:	4628      	mov	r0, r5
 80092d6:	47a0      	blx	r4

    print("' details='");
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	332c      	adds	r3, #44	; 0x2c
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4918      	ldr	r1, [pc, #96]	; (8009344 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 80092e4:	4610      	mov	r0, r2
 80092e6:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	3318      	adds	r3, #24
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f107 0220 	add.w	r2, r7, #32
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	4610      	mov	r0, r2
 80092f8:	4798      	blx	r3
 80092fa:	f107 0320 	add.w	r3, r7, #32
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fe fe5e 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8009304:	4603      	mov	r3, r0
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7ff fee7 	bl	80090dc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800930e:	f107 0320 	add.w	r3, r7, #32
 8009312:	4618      	mov	r0, r3
 8009314:	f7fe fe81 	bl	800801a <_ZN12SimpleStringD1Ev>
    print("']\n");
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	332c      	adds	r3, #44	; 0x2c
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4909      	ldr	r1, [pc, #36]	; (8009348 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 8009324:	4610      	mov	r0, r2
 8009326:	4798      	blx	r3
}
 8009328:	bf00      	nop
 800932a:	3728      	adds	r7, #40	; 0x28
 800932c:	46bd      	mov	sp, r7
 800932e:	bdb0      	pop	{r4, r5, r7, pc}
 8009330:	08016600 	.word	0x08016600
 8009334:	08016620 	.word	0x08016620
 8009338:	0801662c 	.word	0x0801662c
 800933c:	0801663c 	.word	0x0801663c
 8009340:	08016640 	.word	0x08016640
 8009344:	08016644 	.word	0x08016644
 8009348:	08016564 	.word	0x08016564

0800934c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 8009358:	4a1a      	ldr	r2, [pc, #104]	; (80093c4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3314      	adds	r3, #20
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	3204      	adds	r2, #4
 800936a:	68b9      	ldr	r1, [r7, #8]
 800936c:	4610      	mov	r0, r2
 800936e:	4798      	blx	r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	330c      	adds	r3, #12
 8009374:	68b9      	ldr	r1, [r7, #8]
 8009376:	4618      	mov	r0, r3
 8009378:	f004 fb84 	bl	800da84 <_ZNK10UtestShell7getNameEv>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3314      	adds	r3, #20
 8009380:	68b9      	ldr	r1, [r7, #8]
 8009382:	4618      	mov	r0, r3
 8009384:	f004 fc3e 	bl	800dc04 <_ZNK10UtestShell7getFileEv>
 8009388:	68b8      	ldr	r0, [r7, #8]
 800938a:	f004 fc4a 	bl	800dc22 <_ZNK10UtestShell13getLineNumberEv>
 800938e:	4602      	mov	r2, r0
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	61da      	str	r2, [r3, #28]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	3320      	adds	r3, #32
 8009398:	68b9      	ldr	r1, [r7, #8]
 800939a:	4618      	mov	r0, r3
 800939c:	f004 fc32 	bl	800dc04 <_ZNK10UtestShell7getFileEv>
 80093a0:	68b8      	ldr	r0, [r7, #8]
 80093a2:	f004 fc3e 	bl	800dc22 <_ZNK10UtestShell13getLineNumberEv>
 80093a6:	4602      	mov	r2, r0
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	629a      	str	r2, [r3, #40]	; 0x28
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	332c      	adds	r3, #44	; 0x2c
 80093b0:	6879      	ldr	r1, [r7, #4]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe facd 	bl	8007952 <_ZN12SimpleStringC1ERKS_>
{
}
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	08018adc 	.word	0x08018adc

080093c8 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 80093d6:	4a19      	ldr	r2, [pc, #100]	; (800943c <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3314      	adds	r3, #20
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	3204      	adds	r2, #4
 80093e8:	68b9      	ldr	r1, [r7, #8]
 80093ea:	4610      	mov	r0, r2
 80093ec:	4798      	blx	r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	330c      	adds	r3, #12
 80093f2:	68b9      	ldr	r1, [r7, #8]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f004 fb45 	bl	800da84 <_ZNK10UtestShell7getNameEv>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	3314      	adds	r3, #20
 80093fe:	6879      	ldr	r1, [r7, #4]
 8009400:	4618      	mov	r0, r3
 8009402:	f7fe fa52 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	61da      	str	r2, [r3, #28]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	3320      	adds	r3, #32
 8009410:	68b9      	ldr	r1, [r7, #8]
 8009412:	4618      	mov	r0, r3
 8009414:	f004 fbf6 	bl	800dc04 <_ZNK10UtestShell7getFileEv>
 8009418:	68b8      	ldr	r0, [r7, #8]
 800941a:	f004 fc02 	bl	800dc22 <_ZNK10UtestShell13getLineNumberEv>
 800941e:	4602      	mov	r2, r0
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	629a      	str	r2, [r3, #40]	; 0x28
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	332c      	adds	r3, #44	; 0x2c
 8009428:	4905      	ldr	r1, [pc, #20]	; (8009440 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fa3d 	bl	80078aa <_ZN12SimpleStringC1EPKc>
{
}
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	08018adc 	.word	0x08018adc
 8009440:	08016650 	.word	0x08016650

08009444 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800944e:	4a1e      	ldr	r2, [pc, #120]	; (80094c8 <_ZN11TestFailureC1ERKS_+0x84>)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	1d1a      	adds	r2, r3, #4
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	3304      	adds	r3, #4
 800945c:	4619      	mov	r1, r3
 800945e:	4610      	mov	r0, r2
 8009460:	f7fe fa77 	bl	8007952 <_ZN12SimpleStringC1ERKS_>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f103 020c 	add.w	r2, r3, #12
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	330c      	adds	r3, #12
 800946e:	4619      	mov	r1, r3
 8009470:	4610      	mov	r0, r2
 8009472:	f7fe fa6e 	bl	8007952 <_ZN12SimpleStringC1ERKS_>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f103 0214 	add.w	r2, r3, #20
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	3314      	adds	r3, #20
 8009480:	4619      	mov	r1, r3
 8009482:	4610      	mov	r0, r2
 8009484:	f7fe fa65 	bl	8007952 <_ZN12SimpleStringC1ERKS_>
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	69da      	ldr	r2, [r3, #28]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	61da      	str	r2, [r3, #28]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f103 0220 	add.w	r2, r3, #32
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	3320      	adds	r3, #32
 800949a:	4619      	mov	r1, r3
 800949c:	4610      	mov	r0, r2
 800949e:	f7fe fa58 	bl	8007952 <_ZN12SimpleStringC1ERKS_>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	629a      	str	r2, [r3, #40]	; 0x28
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	332c      	adds	r3, #44	; 0x2c
 80094b4:	4619      	mov	r1, r3
 80094b6:	4610      	mov	r0, r2
 80094b8:	f7fe fa4b 	bl	8007952 <_ZN12SimpleStringC1ERKS_>
{
}
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4618      	mov	r0, r3
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	08018adc 	.word	0x08018adc

080094cc <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	4a10      	ldr	r2, [pc, #64]	; (8009518 <_ZN11TestFailureD1Ev+0x4c>)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	601a      	str	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	332c      	adds	r3, #44	; 0x2c
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe fd9b 	bl	800801a <_ZN12SimpleStringD1Ev>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	3320      	adds	r3, #32
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fe fd96 	bl	800801a <_ZN12SimpleStringD1Ev>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3314      	adds	r3, #20
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fe fd91 	bl	800801a <_ZN12SimpleStringD1Ev>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	330c      	adds	r3, #12
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fe fd8c 	bl	800801a <_ZN12SimpleStringD1Ev>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	3304      	adds	r3, #4
 8009506:	4618      	mov	r0, r3
 8009508:	f7fe fd87 	bl	800801a <_ZN12SimpleStringD1Ev>
{
}
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	08018adc 	.word	0x08018adc

0800951c <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
}
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f7ff ffd1 	bl	80094cc <_ZN11TestFailureD1Ev>
 800952a:	2134      	movs	r1, #52	; 0x34
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f7fd fae7 	bl	8006b00 <_ZdlPvj>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4618      	mov	r0, r3
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
    return fileName_;
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	3314      	adds	r3, #20
 800954a:	4619      	mov	r1, r3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7fe fa00 	bl	8007952 <_ZN12SimpleStringC1ERKS_>
}
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b082      	sub	sp, #8
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	6039      	str	r1, [r7, #0]
    return testFileName_;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	3320      	adds	r3, #32
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7fe f9f1 	bl	8007952 <_ZN12SimpleStringC1ERKS_>
}
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
    return testName_;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	3304      	adds	r3, #4
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7fe f9e2 	bl	8007952 <_ZN12SimpleStringC1ERKS_>
}
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	330c      	adds	r3, #12
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7fe f9d3 	bl	8007952 <_ZN12SimpleStringC1ERKS_>
}
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	69db      	ldr	r3, [r3, #28]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
    return message_;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	332c      	adds	r3, #44	; 0x2c
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7fe f9ac 	bl	8007952 <_ZN12SimpleStringC1ERKS_>
}
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b082      	sub	sp, #8
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f103 0220 	add.w	r2, r3, #32
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	3314      	adds	r3, #20
 8009614:	4619      	mov	r1, r3
 8009616:	4610      	mov	r0, r2
 8009618:	f7fe fd50 	bl	80080bc <_ZneRK12SimpleStringS1_>
 800961c:	4603      	mov	r3, r0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 8009626:	b480      	push	{r7}
 8009628:	b083      	sub	sp, #12
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	69da      	ldr	r2, [r3, #28]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009636:	429a      	cmp	r2, r3
 8009638:	bf34      	ite	cc
 800963a:	2301      	movcc	r3, #1
 800963c:	2300      	movcs	r3, #0
 800963e:	b2db      	uxtb	r3, r3
}
 8009640:	4618      	mov	r0, r3
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800964c:	b590      	push	{r4, r7, lr}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7fe fcb0 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8009660:	4604      	mov	r4, r0
 8009662:	6838      	ldr	r0, [r7, #0]
 8009664:	f7fe fcac 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8009668:	4603      	mov	r3, r0
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	4622      	mov	r2, r4
 800966e:	4903      	ldr	r1, [pc, #12]	; (800967c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 8009670:	f7ff f960 	bl	8008934 <_Z16StringFromFormatPKcz>
}
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	bd90      	pop	{r4, r7, pc}
 800967c:	0801665c 	.word	0x0801665c

08009680 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 8009680:	b590      	push	{r4, r7, lr}
 8009682:	b097      	sub	sp, #92	; 0x5c
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
 800968c:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800968e:	494c      	ldr	r1, [pc, #304]	; (80097c0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f7fe f90a 	bl	80078aa <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 8009696:	2314      	movs	r3, #20
 8009698:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800969a:	230a      	movs	r3, #10
 800969c:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800969e:	f107 0320 	add.w	r3, r7, #32
 80096a2:	220a      	movs	r2, #10
 80096a4:	4947      	ldr	r1, [pc, #284]	; (80097c4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fe f91a 	bl	80078e0 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 80096ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80096b0:	f107 0120 	add.w	r1, r7, #32
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe fd11 	bl	80080de <_ZNK12SimpleStringplERKS_>
 80096bc:	f107 0318 	add.w	r3, r7, #24
 80096c0:	f107 0220 	add.w	r2, r7, #32
 80096c4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fe fd08 	bl	80080de <_ZNK12SimpleStringplERKS_>
 80096ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe fca1 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 80096d8:	f107 0310 	add.w	r3, r7, #16
 80096dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096de:	493a      	ldr	r1, [pc, #232]	; (80097c8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7ff f927 	bl	8008934 <_Z16StringFromFormatPKcz>

    result += "\n";
 80096e6:	4939      	ldr	r1, [pc, #228]	; (80097cc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f7fe fd25 	bl	8008138 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 80096ee:	f107 0310 	add.w	r3, r7, #16
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fe fc64 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 80096f8:	4604      	mov	r4, r0
 80096fa:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80096fe:	f107 0118 	add.w	r1, r7, #24
 8009702:	2314      	movs	r3, #20
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	f7fe fd91 	bl	800822c <_ZNK12SimpleString9subStringEjj>
 800970a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800970e:	4618      	mov	r0, r3
 8009710:	f7fe fc56 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8009714:	4603      	mov	r3, r0
 8009716:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800971a:	4622      	mov	r2, r4
 800971c:	492c      	ldr	r1, [pc, #176]	; (80097d0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800971e:	f7ff f909 	bl	8008934 <_Z16StringFromFormatPKcz>
 8009722:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009726:	4619      	mov	r1, r3
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f7fe fcf3 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800972e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009732:	4618      	mov	r0, r3
 8009734:	f7fe fc71 	bl	800801a <_ZN12SimpleStringD1Ev>
 8009738:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800973c:	4618      	mov	r0, r3
 800973e:	f7fe fc6c 	bl	800801a <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 8009742:	f107 0310 	add.w	r3, r7, #16
 8009746:	4618      	mov	r0, r3
 8009748:	f7fe fc46 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 800974c:	4603      	mov	r3, r0
 800974e:	f103 020a 	add.w	r2, r3, #10
 8009752:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009756:	491b      	ldr	r1, [pc, #108]	; (80097c4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 8009758:	4618      	mov	r0, r3
 800975a:	f7fe f8c1 	bl	80078e0 <_ZN12SimpleStringC1EPKcj>
 800975e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009762:	4618      	mov	r0, r3
 8009764:	f7fe fc2c 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8009768:	4602      	mov	r2, r0
 800976a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800976e:	4919      	ldr	r1, [pc, #100]	; (80097d4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 8009770:	4618      	mov	r0, r3
 8009772:	f7ff f8df 	bl	8008934 <_Z16StringFromFormatPKcz>
 8009776:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800977a:	4619      	mov	r1, r3
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f7fe fcc9 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 8009782:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe fc47 	bl	800801a <_ZN12SimpleStringD1Ev>
 800978c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009790:	4618      	mov	r0, r3
 8009792:	f7fe fc42 	bl	800801a <_ZN12SimpleStringD1Ev>
    return result;
 8009796:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 8009798:	f107 0310 	add.w	r3, r7, #16
 800979c:	4618      	mov	r0, r3
 800979e:	f7fe fc3c 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 80097a2:	f107 0318 	add.w	r3, r7, #24
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fe fc37 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 80097ac:	f107 0320 	add.w	r3, r7, #32
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fe fc32 	bl	800801a <_ZN12SimpleStringD1Ev>
    return result;
 80097b6:	bf00      	nop
}
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	375c      	adds	r7, #92	; 0x5c
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd90      	pop	{r4, r7, pc}
 80097c0:	0801667c 	.word	0x0801667c
 80097c4:	08016680 	.word	0x08016680
 80097c8:	08016684 	.word	0x08016684
 80097cc:	080166ac 	.word	0x080166ac
 80097d0:	080166b0 	.word	0x080166b0
 80097d4:	080166b8 	.word	0x080166b8

080097d8 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 80097d8:	b590      	push	{r4, r7, lr}
 80097da:	b087      	sub	sp, #28
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 80097e4:	491a      	ldr	r1, [pc, #104]	; (8009850 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f7fe f85f 	bl	80078aa <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7fe fc03 	bl	8007ff8 <_ZNK12SimpleString7isEmptyEv>
 80097f2:	4603      	mov	r3, r0
 80097f4:	f083 0301 	eor.w	r3, r3, #1
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d022      	beq.n	8009844 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 80097fe:	f107 0310 	add.w	r3, r7, #16
 8009802:	4914      	ldr	r1, [pc, #80]	; (8009854 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe f850 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800980a:	f107 0310 	add.w	r3, r7, #16
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f7fe f90e 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 8009816:	4603      	mov	r3, r0
 8009818:	f083 0301 	eor.w	r3, r3, #1
 800981c:	b2dc      	uxtb	r4, r3
 800981e:	f107 0310 	add.w	r3, r7, #16
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe fbf9 	bl	800801a <_ZN12SimpleStringD1Ev>
 8009828:	2c00      	cmp	r4, #0
 800982a:	d003      	beq.n	8009834 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800982c:	490a      	ldr	r1, [pc, #40]	; (8009858 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f7fe fc82 	bl	8008138 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 8009834:	6879      	ldr	r1, [r7, #4]
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f7fe fc6c 	bl	8008114 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800983c:	4907      	ldr	r1, [pc, #28]	; (800985c <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f7fe fc7a 	bl	8008138 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 8009844:	bf00      	nop
}
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	371c      	adds	r7, #28
 800984a:	46bd      	mov	sp, r7
 800984c:	bd90      	pop	{r4, r7, pc}
 800984e:	bf00      	nop
 8009850:	0801667c 	.word	0x0801667c
 8009854:	080166c0 	.word	0x080166c0
 8009858:	080166cc 	.word	0x080166cc
 800985c:	080166d8 	.word	0x080166d8

08009860 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8009860:	b590      	push	{r4, r7, lr}
 8009862:	b089      	sub	sp, #36	; 0x24
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	68b9      	ldr	r1, [r7, #8]
 8009876:	f7ff fda7 	bl	80093c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800987a:	4a19      	ldr	r2, [pc, #100]	; (80098e0 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009886:	68f9      	ldr	r1, [r7, #12]
 8009888:	f107 0310 	add.w	r3, r7, #16
 800988c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800988e:	4618      	mov	r0, r3
 8009890:	f7ff ffa2 	bl	80097d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009894:	f107 0310 	add.w	r3, r7, #16
 8009898:	4619      	mov	r1, r3
 800989a:	4620      	mov	r0, r4
 800989c:	f7fe f871 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 80098a0:	f107 0310 	add.w	r3, r7, #16
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe fbb8 	bl	800801a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80098b0:	68f9      	ldr	r1, [r7, #12]
 80098b2:	f107 0018 	add.w	r0, r7, #24
 80098b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098ba:	f7ff fec7 	bl	800964c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80098be:	f107 0318 	add.w	r3, r7, #24
 80098c2:	4619      	mov	r1, r3
 80098c4:	4620      	mov	r0, r4
 80098c6:	f7fe fc25 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 80098ca:	f107 0318 	add.w	r3, r7, #24
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe fba3 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4618      	mov	r0, r3
 80098d8:	3724      	adds	r7, #36	; 0x24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd90      	pop	{r4, r7, pc}
 80098de:	bf00      	nop
 80098e0:	08018ab0 	.word	0x08018ab0

080098e4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 80098e4:	b5b0      	push	{r4, r5, r7, lr}
 80098e6:	b094      	sub	sp, #80	; 0x50
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6278      	str	r0, [r7, #36]	; 0x24
 80098ec:	6239      	str	r1, [r7, #32]
 80098ee:	61fa      	str	r2, [r7, #28]
 80098f0:	61bb      	str	r3, [r7, #24]
 80098f2:	ed87 0b04 	vstr	d0, [r7, #16]
 80098f6:	ed87 1b02 	vstr	d1, [r7, #8]
 80098fa:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 80098fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	69fa      	ldr	r2, [r7, #28]
 8009904:	6a39      	ldr	r1, [r7, #32]
 8009906:	f7ff fd5f 	bl	80093c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800990a:	4a4a      	ldr	r2, [pc, #296]	; (8009a34 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009916:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009918:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800991c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800991e:	4618      	mov	r0, r3
 8009920:	f7ff ff5a 	bl	80097d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009924:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009928:	4619      	mov	r1, r3
 800992a:	4620      	mov	r0, r4
 800992c:	f7fe f829 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8009930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009934:	4618      	mov	r0, r3
 8009936:	f7fe fb70 	bl	800801a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009940:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8009942:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009946:	2107      	movs	r1, #7
 8009948:	ed97 0b04 	vldr	d0, [r7, #16]
 800994c:	4618      	mov	r0, r3
 800994e:	f7fe ffaf 	bl	80088b0 <_Z10StringFromdi>
 8009952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009956:	2107      	movs	r1, #7
 8009958:	ed97 0b02 	vldr	d0, [r7, #8]
 800995c:	4618      	mov	r0, r3
 800995e:	f7fe ffa7 	bl	80088b0 <_Z10StringFromdi>
 8009962:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009966:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800996a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800996e:	4629      	mov	r1, r5
 8009970:	f7ff fe6c 	bl	800964c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009974:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009978:	4619      	mov	r1, r3
 800997a:	4620      	mov	r0, r4
 800997c:	f7fe fbca 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 8009980:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009984:	4618      	mov	r0, r3
 8009986:	f7fe fb48 	bl	800801a <_ZN12SimpleStringD1Ev>
 800998a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800998e:	4618      	mov	r0, r3
 8009990:	f7fe fb43 	bl	800801a <_ZN12SimpleStringD1Ev>
 8009994:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009998:	4618      	mov	r0, r3
 800999a:	f7fe fb3e 	bl	800801a <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800999e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a0:	332c      	adds	r3, #44	; 0x2c
 80099a2:	4925      	ldr	r1, [pc, #148]	; (8009a38 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fe fbc7 	bl	8008138 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80099b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80099b4:	2107      	movs	r1, #7
 80099b6:	ed97 0b00 	vldr	d0, [r7]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fe ff78 	bl	80088b0 <_Z10StringFromdi>
 80099c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80099c4:	4619      	mov	r1, r3
 80099c6:	4620      	mov	r0, r4
 80099c8:	f7fe fba4 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 80099cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fe fb22 	bl	800801a <_ZN12SimpleStringD1Ev>
    message_ += ">";
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	332c      	adds	r3, #44	; 0x2c
 80099da:	4918      	ldr	r1, [pc, #96]	; (8009a3c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fe fbab 	bl	8008138 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 80099e2:	4b17      	ldr	r3, [pc, #92]	; (8009a40 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	ed97 0b04 	vldr	d0, [r7, #16]
 80099ea:	4798      	blx	r3
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10f      	bne.n	8009a12 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 80099f2:	4b13      	ldr	r3, [pc, #76]	; (8009a40 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	ed97 0b02 	vldr	d0, [r7, #8]
 80099fa:	4798      	blx	r3
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d107      	bne.n	8009a12 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 8009a02:	4b0f      	ldr	r3, [pc, #60]	; (8009a40 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	ed97 0b00 	vldr	d0, [r7]
 8009a0a:	4798      	blx	r3
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 8009a12:	2301      	movs	r3, #1
 8009a14:	e000      	b.n	8009a18 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 8009a16:	2300      	movs	r3, #0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d005      	beq.n	8009a28 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	332c      	adds	r3, #44	; 0x2c
 8009a20:	4908      	ldr	r1, [pc, #32]	; (8009a44 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fe fb88 	bl	8008138 <_ZN12SimpleStringpLEPKc>
}
 8009a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3750      	adds	r7, #80	; 0x50
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bdb0      	pop	{r4, r5, r7, pc}
 8009a32:	bf00      	nop
 8009a34:	08018a84 	.word	0x08018a84
 8009a38:	080166dc 	.word	0x080166dc
 8009a3c:	080166f4 	.word	0x080166f4
 8009a40:	200000e0 	.word	0x200000e0
 8009a44:	080166f8 	.word	0x080166f8

08009a48 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8009a48:	b590      	push	{r4, r7, lr}
 8009a4a:	b093      	sub	sp, #76	; 0x4c
 8009a4c:	af02      	add	r7, sp, #8
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
 8009a54:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	68b9      	ldr	r1, [r7, #8]
 8009a5e:	f7ff fcb3 	bl	80093c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009a62:	4a4f      	ldr	r2, [pc, #316]	; (8009ba0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009a6e:	68f9      	ldr	r1, [r7, #12]
 8009a70:	f107 0320 	add.w	r3, r7, #32
 8009a74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7ff feae 	bl	80097d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009a7c:	f107 0320 	add.w	r3, r7, #32
 8009a80:	4619      	mov	r1, r3
 8009a82:	4620      	mov	r0, r4
 8009a84:	f7fd ff7d 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8009a88:	f107 0320 	add.w	r3, r7, #32
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fe fac4 	bl	800801a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 8009a92:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009a94:	f7fe fa94 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	f107 0318 	add.w	r3, r7, #24
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe fd37 	bl	8008514 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 8009aa6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009aa8:	f7fe fa8a 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8009aac:	4602      	mov	r2, r0
 8009aae:	f107 0310 	add.w	r3, r7, #16
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7fe fd2d 	bl	8008514 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009ac0:	68f9      	ldr	r1, [r7, #12]
 8009ac2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009ac6:	f107 0310 	add.w	r3, r7, #16
 8009aca:	f107 0218 	add.w	r2, r7, #24
 8009ace:	f7ff fdbd 	bl	800964c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f7fe fb1b 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 8009ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fe fa99 	bl	800801a <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009aee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009af0:	f7fe fbf7 	bl	80082e2 <_ZNK12SimpleString2atEj>
 8009af4:	4603      	mov	r3, r0
 8009af6:	461c      	mov	r4, r3
 8009af8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009afa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009afc:	f7fe fbf1 	bl	80082e2 <_ZNK12SimpleString2atEj>
 8009b00:	4603      	mov	r3, r0
 8009b02:	429c      	cmp	r4, r3
 8009b04:	bf0c      	ite	eq
 8009b06:	2301      	moveq	r3, #1
 8009b08:	2300      	movne	r3, #0
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d003      	beq.n	8009b18 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 8009b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b12:	3301      	adds	r3, #1
 8009b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b16:	e7e9      	b.n	8009aec <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8009b18:	2300      	movs	r3, #0
 8009b1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b1c:	f107 0310 	add.w	r3, r7, #16
 8009b20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fe fbdd 	bl	80082e2 <_ZNK12SimpleString2atEj>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	461c      	mov	r4, r3
 8009b2c:	f107 0318 	add.w	r3, r7, #24
 8009b30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fe fbd5 	bl	80082e2 <_ZNK12SimpleString2atEj>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	429c      	cmp	r4, r3
 8009b3c:	bf0c      	ite	eq
 8009b3e:	2301      	moveq	r3, #1
 8009b40:	2300      	movne	r3, #0
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d003      	beq.n	8009b50 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 8009b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b4e:	e7e5      	b.n	8009b1c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009b56:	68f9      	ldr	r1, [r7, #12]
 8009b58:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009b5c:	f107 0210 	add.w	r2, r7, #16
 8009b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b66:	f7ff fd8b 	bl	8009680 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8009b6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b6e:	4619      	mov	r1, r3
 8009b70:	4620      	mov	r0, r4
 8009b72:	f7fe facf 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 8009b76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe fa4d 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 8009b80:	f107 0310 	add.w	r3, r7, #16
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fe fa48 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 8009b8a:	f107 0318 	add.w	r3, r7, #24
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fe fa43 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	4618      	mov	r0, r3
 8009b98:	3744      	adds	r7, #68	; 0x44
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd90      	pop	{r4, r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	08018a58 	.word	0x08018a58

08009ba4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 8009ba4:	b590      	push	{r4, r7, lr}
 8009ba6:	b087      	sub	sp, #28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	68b9      	ldr	r1, [r7, #8]
 8009bba:	f7ff fc05 	bl	80093c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009bbe:	4a1a      	ldr	r2, [pc, #104]	; (8009c28 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009bca:	68f9      	ldr	r1, [r7, #12]
 8009bcc:	f107 0310 	add.w	r3, r7, #16
 8009bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7ff fe00 	bl	80097d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009bd8:	f107 0310 	add.w	r3, r7, #16
 8009bdc:	4619      	mov	r1, r3
 8009bde:	4620      	mov	r0, r4
 8009be0:	f7fd fecf 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8009be4:	f107 0310 	add.w	r3, r7, #16
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fe fa16 	bl	800801a <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	332c      	adds	r3, #44	; 0x2c
 8009bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fe fa8d 	bl	8008114 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	332c      	adds	r3, #44	; 0x2c
 8009bfe:	490b      	ldr	r1, [pc, #44]	; (8009c2c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fe fa99 	bl	8008138 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	332c      	adds	r3, #44	; 0x2c
 8009c0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7fe fa81 	bl	8008114 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	332c      	adds	r3, #44	; 0x2c
 8009c16:	4906      	ldr	r1, [pc, #24]	; (8009c30 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fe fa8d 	bl	8008138 <_ZN12SimpleStringpLEPKc>
}
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	4618      	mov	r0, r3
 8009c22:	371c      	adds	r7, #28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd90      	pop	{r4, r7, pc}
 8009c28:	08018a2c 	.word	0x08018a2c
 8009c2c:	0801671c 	.word	0x0801671c
 8009c30:	08016720 	.word	0x08016720

08009c34 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8009c34:	b5b0      	push	{r4, r5, r7, lr}
 8009c36:	b088      	sub	sp, #32
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	68b9      	ldr	r1, [r7, #8]
 8009c4a:	f7ff fbbd 	bl	80093c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009c4e:	4a1c      	ldr	r2, [pc, #112]	; (8009cc0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009c5a:	68f9      	ldr	r1, [r7, #12]
 8009c5c:	f107 0310 	add.w	r3, r7, #16
 8009c60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7ff fdb8 	bl	80097d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009c68:	f107 0310 	add.w	r3, r7, #16
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	4620      	mov	r0, r4
 8009c70:	f7fd fe87 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8009c74:	f107 0310 	add.w	r3, r7, #16
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fe f9ce 	bl	800801a <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009c84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c86:	f7fe f99b 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8009c8a:	4605      	mov	r5, r0
 8009c8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c8e:	f7fe f997 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 8009c92:	4603      	mov	r3, r0
 8009c94:	f107 0018 	add.w	r0, r7, #24
 8009c98:	462a      	mov	r2, r5
 8009c9a:	490a      	ldr	r1, [pc, #40]	; (8009cc4 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 8009c9c:	f7fe fe4a 	bl	8008934 <_Z16StringFromFormatPKcz>
 8009ca0:	f107 0318 	add.w	r3, r7, #24
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f7fe fa34 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 8009cac:	f107 0318 	add.w	r3, r7, #24
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fe f9b2 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3720      	adds	r7, #32
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8009cc0:	08018a00 	.word	0x08018a00
 8009cc4:	0801672c 	.word	0x0801672c

08009cc8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 8009cc8:	b590      	push	{r4, r7, lr}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
 8009cd4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	68b9      	ldr	r1, [r7, #8]
 8009cde:	f7ff fb73 	bl	80093c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009ce2:	4a1a      	ldr	r2, [pc, #104]	; (8009d4c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009cee:	68f9      	ldr	r1, [r7, #12]
 8009cf0:	f107 0310 	add.w	r3, r7, #16
 8009cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7ff fd6e 	bl	80097d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009cfc:	f107 0310 	add.w	r3, r7, #16
 8009d00:	4619      	mov	r1, r3
 8009d02:	4620      	mov	r0, r4
 8009d04:	f7fd fe3d 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8009d08:	f107 0310 	add.w	r3, r7, #16
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fe f984 	bl	800801a <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	332c      	adds	r3, #44	; 0x2c
 8009d16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fe f9fb 	bl	8008114 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	332c      	adds	r3, #44	; 0x2c
 8009d22:	490b      	ldr	r1, [pc, #44]	; (8009d50 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fe fa07 	bl	8008138 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	332c      	adds	r3, #44	; 0x2c
 8009d2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fe f9ef 	bl	8008114 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	332c      	adds	r3, #44	; 0x2c
 8009d3a:	4906      	ldr	r1, [pc, #24]	; (8009d54 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7fe f9fb 	bl	8008138 <_ZN12SimpleStringpLEPKc>
}
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	4618      	mov	r0, r3
 8009d46:	371c      	adds	r7, #28
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd90      	pop	{r4, r7, pc}
 8009d4c:	080189d4 	.word	0x080189d4
 8009d50:	0801671c 	.word	0x0801671c
 8009d54:	08016720 	.word	0x08016720

08009d58 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
 8009d64:	603b      	str	r3, [r7, #0]
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	68b9      	ldr	r1, [r7, #8]
 8009d6e:	f7ff fb2b 	bl	80093c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009d72:	4a07      	ldr	r2, [pc, #28]	; (8009d90 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	332c      	adds	r3, #44	; 0x2c
 8009d7c:	69b9      	ldr	r1, [r7, #24]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7fd fdff 	bl	8007982 <_ZN12SimpleStringaSERKS_>
}
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	080187e4 	.word	0x080187e4

08009d94 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 8009d94:	b590      	push	{r4, r7, lr}
 8009d96:	b09d      	sub	sp, #116	; 0x74
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
 8009da0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	68b9      	ldr	r1, [r7, #8]
 8009daa:	f7ff fb0d 	bl	80093c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009dae:	4a5d      	ldr	r2, [pc, #372]	; (8009f24 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009dba:	68f9      	ldr	r1, [r7, #12]
 8009dbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009dc0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7ff fd07 	bl	80097d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009dca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009dce:	4619      	mov	r1, r3
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f7fd fdd6 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8009dd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fe f91d 	bl	800801a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 8009de0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009de4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fe fbd1 	bl	8008590 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 8009dee:	f107 0320 	add.w	r3, r7, #32
 8009df2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fe fbca 	bl	8008590 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8009dfc:	f107 0120 	add.w	r1, r7, #32
 8009e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009e04:	2220      	movs	r2, #32
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fe f9c4 	bl	8008194 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009e0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009e10:	4945      	ldr	r1, [pc, #276]	; (8009f28 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fd fd49 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8009e18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009e1c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009e20:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fe f95a 	bl	80080de <_ZNK12SimpleStringplERKS_>
 8009e2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e2e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fe fc66 	bl	8008704 <_Z30BracketsFormattedHexStringFroml>
 8009e38:	f107 0318 	add.w	r3, r7, #24
 8009e3c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e40:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fe f94a 	bl	80080de <_ZNK12SimpleStringplERKS_>
 8009e4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fe f8e3 	bl	800801a <_ZN12SimpleStringD1Ev>
 8009e54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fe f8de 	bl	800801a <_ZN12SimpleStringD1Ev>
 8009e5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fe f8d9 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8009e68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009e6c:	492e      	ldr	r1, [pc, #184]	; (8009f28 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fd fd1b 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8009e74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009e78:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009e7c:	f107 0120 	add.w	r1, r7, #32
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fe f92c 	bl	80080de <_ZNK12SimpleStringplERKS_>
 8009e86:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009e8a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fe fc38 	bl	8008704 <_Z30BracketsFormattedHexStringFroml>
 8009e94:	f107 0310 	add.w	r3, r7, #16
 8009e98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009e9c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fe f91c 	bl	80080de <_ZNK12SimpleStringplERKS_>
 8009ea6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7fe f8b5 	bl	800801a <_ZN12SimpleStringD1Ev>
 8009eb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fe f8b0 	bl	800801a <_ZN12SimpleStringD1Ev>
 8009eba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7fe f8ab 	bl	800801a <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009eca:	68f9      	ldr	r1, [r7, #12]
 8009ecc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8009ed0:	f107 0318 	add.w	r3, r7, #24
 8009ed4:	f107 0210 	add.w	r2, r7, #16
 8009ed8:	f7ff fbb8 	bl	800964c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009edc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f7fe f916 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 8009ee8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7fe f894 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8009ef2:	f107 0310 	add.w	r3, r7, #16
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe f88f 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009efc:	f107 0318 	add.w	r3, r7, #24
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fe f88a 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 8009f06:	f107 0320 	add.w	r3, r7, #32
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe f885 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 8009f10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7fe f880 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3774      	adds	r7, #116	; 0x74
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd90      	pop	{r4, r7, pc}
 8009f24:	080189a8 	.word	0x080189a8
 8009f28:	08016680 	.word	0x08016680

08009f2c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 8009f2c:	b590      	push	{r4, r7, lr}
 8009f2e:	b09d      	sub	sp, #116	; 0x74
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
 8009f38:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	68b9      	ldr	r1, [r7, #8]
 8009f42:	f7ff fa41 	bl	80093c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009f46:	4a5d      	ldr	r2, [pc, #372]	; (800a0bc <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009f52:	68f9      	ldr	r1, [r7, #12]
 8009f54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f58:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7ff fc3b 	bl	80097d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009f62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f66:	4619      	mov	r1, r3
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f7fd fd0a 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8009f6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe f851 	bl	800801a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 8009f78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f7c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fe fd11 	bl	80089a8 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 8009f86:	f107 0320 	add.w	r3, r7, #32
 8009f8a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fe fd0a 	bl	80089a8 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8009f94:	f107 0120 	add.w	r1, r7, #32
 8009f98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f9c:	2220      	movs	r2, #32
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe f8f8 	bl	8008194 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009fa4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009fa8:	4945      	ldr	r1, [pc, #276]	; (800a0c0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fd fc7d 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8009fb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009fb4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009fb8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7fe f88e 	bl	80080de <_ZNK12SimpleStringplERKS_>
 8009fc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009fc6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe fbb6 	bl	800873c <_Z30BracketsFormattedHexStringFromm>
 8009fd0:	f107 0318 	add.w	r3, r7, #24
 8009fd4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009fd8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7fe f87e 	bl	80080de <_ZNK12SimpleStringplERKS_>
 8009fe2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe f817 	bl	800801a <_ZN12SimpleStringD1Ev>
 8009fec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7fe f812 	bl	800801a <_ZN12SimpleStringD1Ev>
 8009ff6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fe f80d 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800a000:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a004:	492e      	ldr	r1, [pc, #184]	; (800a0c0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800a006:	4618      	mov	r0, r3
 800a008:	f7fd fc4f 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800a00c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a010:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a014:	f107 0120 	add.w	r1, r7, #32
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fe f860 	bl	80080de <_ZNK12SimpleStringplERKS_>
 800a01e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a022:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a026:	4618      	mov	r0, r3
 800a028:	f7fe fb88 	bl	800873c <_Z30BracketsFormattedHexStringFromm>
 800a02c:	f107 0310 	add.w	r3, r7, #16
 800a030:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a034:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fe f850 	bl	80080de <_ZNK12SimpleStringplERKS_>
 800a03e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a042:	4618      	mov	r0, r3
 800a044:	f7fd ffe9 	bl	800801a <_ZN12SimpleStringD1Ev>
 800a048:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fd ffe4 	bl	800801a <_ZN12SimpleStringD1Ev>
 800a052:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a056:	4618      	mov	r0, r3
 800a058:	f7fd ffdf 	bl	800801a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a062:	68f9      	ldr	r1, [r7, #12]
 800a064:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800a068:	f107 0318 	add.w	r3, r7, #24
 800a06c:	f107 0210 	add.w	r2, r7, #16
 800a070:	f7ff faec 	bl	800964c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a074:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a078:	4619      	mov	r1, r3
 800a07a:	4620      	mov	r0, r4
 800a07c:	f7fe f84a 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800a080:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a084:	4618      	mov	r0, r3
 800a086:	f7fd ffc8 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800a08a:	f107 0310 	add.w	r3, r7, #16
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fd ffc3 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800a094:	f107 0318 	add.w	r3, r7, #24
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fd ffbe 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800a09e:	f107 0320 	add.w	r3, r7, #32
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fd ffb9 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800a0a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fd ffb4 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3774      	adds	r7, #116	; 0x74
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd90      	pop	{r4, r7, pc}
 800a0bc:	0801897c 	.word	0x0801897c
 800a0c0:	08016680 	.word	0x08016680

0800a0c4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800a0c4:	b590      	push	{r4, r7, lr}
 800a0c6:	b09d      	sub	sp, #116	; 0x74
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
 800a0d0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800a0d2:	68f8      	ldr	r0, [r7, #12]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	68b9      	ldr	r1, [r7, #8]
 800a0da:	f7ff f975 	bl	80093c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a0de:	4a5f      	ldr	r2, [pc, #380]	; (800a25c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a0ea:	68f9      	ldr	r1, [r7, #12]
 800a0ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a0f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7ff fb6f 	bl	80097d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a0fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a0fe:	4619      	mov	r1, r3
 800a100:	4620      	mov	r0, r4
 800a102:	f7fd fc3e 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 800a106:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fd ff85 	bl	800801a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800a110:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800a114:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a118:	4611      	mov	r1, r2
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe fa26 	bl	800856c <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800a120:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800a124:	f107 0320 	add.w	r3, r7, #32
 800a128:	4611      	mov	r1, r2
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe fa1e 	bl	800856c <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800a130:	f107 0120 	add.w	r1, r7, #32
 800a134:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a138:	2220      	movs	r2, #32
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fe f82a 	bl	8008194 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800a140:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a144:	4946      	ldr	r1, [pc, #280]	; (800a260 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800a146:	4618      	mov	r0, r3
 800a148:	f7fd fbaf 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800a14c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a150:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a154:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fd ffc0 	bl	80080de <_ZNK12SimpleStringplERKS_>
 800a15e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a162:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800a166:	4611      	mov	r1, r2
 800a168:	4618      	mov	r0, r3
 800a16a:	f7fe fb03 	bl	8008774 <_Z30BracketsFormattedHexStringFroma>
 800a16e:	f107 0318 	add.w	r3, r7, #24
 800a172:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a176:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fd ffaf 	bl	80080de <_ZNK12SimpleStringplERKS_>
 800a180:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a184:	4618      	mov	r0, r3
 800a186:	f7fd ff48 	bl	800801a <_ZN12SimpleStringD1Ev>
 800a18a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fd ff43 	bl	800801a <_ZN12SimpleStringD1Ev>
 800a194:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fd ff3e 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800a19e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a1a2:	492f      	ldr	r1, [pc, #188]	; (800a260 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fd fb80 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800a1aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a1ae:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a1b2:	f107 0120 	add.w	r1, r7, #32
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fd ff91 	bl	80080de <_ZNK12SimpleStringplERKS_>
 800a1bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a1c0:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800a1c4:	4611      	mov	r1, r2
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7fe fad4 	bl	8008774 <_Z30BracketsFormattedHexStringFroma>
 800a1cc:	f107 0310 	add.w	r3, r7, #16
 800a1d0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a1d4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7fd ff80 	bl	80080de <_ZNK12SimpleStringplERKS_>
 800a1de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fd ff19 	bl	800801a <_ZN12SimpleStringD1Ev>
 800a1e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7fd ff14 	bl	800801a <_ZN12SimpleStringD1Ev>
 800a1f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fd ff0f 	bl	800801a <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a202:	68f9      	ldr	r1, [r7, #12]
 800a204:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800a208:	f107 0318 	add.w	r3, r7, #24
 800a20c:	f107 0210 	add.w	r2, r7, #16
 800a210:	f7ff fa1c 	bl	800964c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a214:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a218:	4619      	mov	r1, r3
 800a21a:	4620      	mov	r0, r4
 800a21c:	f7fd ff7a 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800a220:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a224:	4618      	mov	r0, r3
 800a226:	f7fd fef8 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800a22a:	f107 0310 	add.w	r3, r7, #16
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fd fef3 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800a234:	f107 0318 	add.w	r3, r7, #24
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fd feee 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800a23e:	f107 0320 	add.w	r3, r7, #32
 800a242:	4618      	mov	r0, r3
 800a244:	f7fd fee9 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800a248:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fd fee4 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	4618      	mov	r0, r3
 800a256:	3774      	adds	r7, #116	; 0x74
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd90      	pop	{r4, r7, pc}
 800a25c:	08018950 	.word	0x08018950
 800a260:	08016680 	.word	0x08016680

0800a264 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800a264:	b590      	push	{r4, r7, lr}
 800a266:	b093      	sub	sp, #76	; 0x4c
 800a268:	af02      	add	r7, sp, #8
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
 800a270:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	68b9      	ldr	r1, [r7, #8]
 800a27a:	f7ff f8a5 	bl	80093c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a27e:	4a4a      	ldr	r2, [pc, #296]	; (800a3a8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a28a:	68f9      	ldr	r1, [r7, #12]
 800a28c:	f107 0320 	add.w	r3, r7, #32
 800a290:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a292:	4618      	mov	r0, r3
 800a294:	f7ff faa0 	bl	80097d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a298:	f107 0320 	add.w	r3, r7, #32
 800a29c:	4619      	mov	r1, r3
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f7fd fb6f 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 800a2a4:	f107 0320 	add.w	r3, r7, #32
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7fd feb6 	bl	800801a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800a2ae:	f107 0318 	add.w	r3, r7, #24
 800a2b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7fe f92d 	bl	8008514 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800a2ba:	f107 0310 	add.w	r3, r7, #16
 800a2be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7fe f927 	bl	8008514 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a2cc:	68f9      	ldr	r1, [r7, #12]
 800a2ce:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800a2d2:	f107 0310 	add.w	r3, r7, #16
 800a2d6:	f107 0218 	add.w	r2, r7, #24
 800a2da:	f7ff f9b7 	bl	800964c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a2de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f7fd ff15 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800a2ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fd fe93 	bl	800801a <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800a2f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d046      	beq.n	800a388 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800a2fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d043      	beq.n	800a388 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800a300:	2300      	movs	r3, #0
 800a302:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a304:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a308:	4413      	add	r3, r2
 800a30a:	781a      	ldrb	r2, [r3, #0]
 800a30c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a310:	440b      	add	r3, r1
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	429a      	cmp	r2, r3
 800a316:	d103      	bne.n	800a320 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800a318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a31a:	3301      	adds	r3, #1
 800a31c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a31e:	e7f1      	b.n	800a304 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800a320:	2300      	movs	r3, #0
 800a322:	63bb      	str	r3, [r7, #56]	; 0x38
 800a324:	f107 0310 	add.w	r3, r7, #16
 800a328:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fd ffd9 	bl	80082e2 <_ZNK12SimpleString2atEj>
 800a330:	4603      	mov	r3, r0
 800a332:	461c      	mov	r4, r3
 800a334:	f107 0318 	add.w	r3, r7, #24
 800a338:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fd ffd1 	bl	80082e2 <_ZNK12SimpleString2atEj>
 800a340:	4603      	mov	r3, r0
 800a342:	429c      	cmp	r4, r3
 800a344:	bf0c      	ite	eq
 800a346:	2301      	moveq	r3, #1
 800a348:	2300      	movne	r3, #0
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d003      	beq.n	800a358 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800a350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a352:	3301      	adds	r3, #1
 800a354:	63bb      	str	r3, [r7, #56]	; 0x38
 800a356:	e7e5      	b.n	800a324 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a35e:	68f9      	ldr	r1, [r7, #12]
 800a360:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800a364:	f107 0210 	add.w	r2, r7, #16
 800a368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36e:	f7ff f987 	bl	8009680 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800a372:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a376:	4619      	mov	r1, r3
 800a378:	4620      	mov	r0, r4
 800a37a:	f7fd fecb 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800a37e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a382:	4618      	mov	r0, r3
 800a384:	f7fd fe49 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800a388:	f107 0310 	add.w	r3, r7, #16
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fd fe44 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800a392:	f107 0318 	add.w	r3, r7, #24
 800a396:	4618      	mov	r0, r3
 800a398:	f7fd fe3f 	bl	800801a <_ZN12SimpleStringD1Ev>
    }
}
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3744      	adds	r7, #68	; 0x44
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd90      	pop	{r4, r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	08018924 	.word	0x08018924

0800a3ac <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800a3ac:	b590      	push	{r4, r7, lr}
 800a3ae:	b093      	sub	sp, #76	; 0x4c
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
 800a3b8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	68b9      	ldr	r1, [r7, #8]
 800a3c2:	f7ff f801 	bl	80093c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a3c6:	4a55      	ldr	r2, [pc, #340]	; (800a51c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a3d2:	68f9      	ldr	r1, [r7, #12]
 800a3d4:	f107 0320 	add.w	r3, r7, #32
 800a3d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7ff f9fc 	bl	80097d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a3e0:	f107 0320 	add.w	r3, r7, #32
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f7fd facb 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 800a3ec:	f107 0320 	add.w	r3, r7, #32
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fd fe12 	bl	800801a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800a3f6:	f107 0318 	add.w	r3, r7, #24
 800a3fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7fe f889 	bl	8008514 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800a402:	f107 0310 	add.w	r3, r7, #16
 800a406:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fe f883 	bl	8008514 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a414:	68f9      	ldr	r1, [r7, #12]
 800a416:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800a41a:	f107 0310 	add.w	r3, r7, #16
 800a41e:	f107 0218 	add.w	r2, r7, #24
 800a422:	f7ff f913 	bl	800964c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a42a:	4619      	mov	r1, r3
 800a42c:	4620      	mov	r0, r4
 800a42e:	f7fd fe71 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800a432:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a436:	4618      	mov	r0, r3
 800a438:	f7fd fdef 	bl	800801a <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800a43c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d05c      	beq.n	800a4fc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800a442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a444:	2b00      	cmp	r3, #0
 800a446:	d059      	beq.n	800a4fc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800a448:	2300      	movs	r3, #0
 800a44a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a44c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a450:	4413      	add	r3, r2
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	4618      	mov	r0, r3
 800a456:	f7fd f932 	bl	80076be <_ZN12SimpleString7ToLowerEc>
 800a45a:	4603      	mov	r3, r0
 800a45c:	461c      	mov	r4, r3
 800a45e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a462:	4413      	add	r3, r2
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	4618      	mov	r0, r3
 800a468:	f7fd f929 	bl	80076be <_ZN12SimpleString7ToLowerEc>
 800a46c:	4603      	mov	r3, r0
 800a46e:	429c      	cmp	r4, r3
 800a470:	bf0c      	ite	eq
 800a472:	2301      	moveq	r3, #1
 800a474:	2300      	movne	r3, #0
 800a476:	b2db      	uxtb	r3, r3
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d003      	beq.n	800a484 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800a47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a47e:	3301      	adds	r3, #1
 800a480:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a482:	e7e3      	b.n	800a44c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800a488:	f107 0310 	add.w	r3, r7, #16
 800a48c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fd ff27 	bl	80082e2 <_ZNK12SimpleString2atEj>
 800a494:	4603      	mov	r3, r0
 800a496:	4618      	mov	r0, r3
 800a498:	f7fd f911 	bl	80076be <_ZN12SimpleString7ToLowerEc>
 800a49c:	4603      	mov	r3, r0
 800a49e:	461c      	mov	r4, r3
 800a4a0:	f107 0318 	add.w	r3, r7, #24
 800a4a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fd ff1b 	bl	80082e2 <_ZNK12SimpleString2atEj>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fd f905 	bl	80076be <_ZN12SimpleString7ToLowerEc>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	429c      	cmp	r4, r3
 800a4b8:	bf0c      	ite	eq
 800a4ba:	2301      	moveq	r3, #1
 800a4bc:	2300      	movne	r3, #0
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d003      	beq.n	800a4cc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800a4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4ca:	e7dd      	b.n	800a488 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a4d2:	68f9      	ldr	r1, [r7, #12]
 800a4d4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800a4d8:	f107 0210 	add.w	r2, r7, #16
 800a4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4de:	9300      	str	r3, [sp, #0]
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e2:	f7ff f8cd 	bl	8009680 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800a4e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f7fd fe11 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800a4f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fd fd8f 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800a4fc:	f107 0310 	add.w	r3, r7, #16
 800a500:	4618      	mov	r0, r3
 800a502:	f7fd fd8a 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800a506:	f107 0318 	add.w	r3, r7, #24
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fd fd85 	bl	800801a <_ZN12SimpleStringD1Ev>
    }
}
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4618      	mov	r0, r3
 800a514:	3744      	adds	r7, #68	; 0x44
 800a516:	46bd      	mov	sp, r7
 800a518:	bd90      	pop	{r4, r7, pc}
 800a51a:	bf00      	nop
 800a51c:	080188f8 	.word	0x080188f8

0800a520 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800a520:	b5b0      	push	{r4, r5, r7, lr}
 800a522:	b092      	sub	sp, #72	; 0x48
 800a524:	af02      	add	r7, sp, #8
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
 800a52c:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	68b9      	ldr	r1, [r7, #8]
 800a536:	f7fe ff47 	bl	80093c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a53a:	4a40      	ldr	r2, [pc, #256]	; (800a63c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a546:	68f9      	ldr	r1, [r7, #12]
 800a548:	f107 031c 	add.w	r3, r7, #28
 800a54c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a54e:	4618      	mov	r0, r3
 800a550:	f7ff f942 	bl	80097d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a554:	f107 031c 	add.w	r3, r7, #28
 800a558:	4619      	mov	r1, r3
 800a55a:	4620      	mov	r0, r4
 800a55c:	f7fd fa11 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 800a560:	f107 031c 	add.w	r3, r7, #28
 800a564:	4618      	mov	r0, r3
 800a566:	f7fd fd58 	bl	800801a <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800a56a:	f107 0314 	add.w	r3, r7, #20
 800a56e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a570:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fae0 	bl	8008b38 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a57e:	68fd      	ldr	r5, [r7, #12]
 800a580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a586:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fe fad5 	bl	8008b38 <_Z22StringFromBinaryOrNullPKhj>
 800a58e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a592:	f107 0314 	add.w	r3, r7, #20
 800a596:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a59a:	4629      	mov	r1, r5
 800a59c:	f7ff f856 	bl	800964c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a5a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	f7fd fdb4 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800a5ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fd fd32 	bl	800801a <_ZN12SimpleStringD1Ev>
 800a5b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fd fd2d 	bl	800801a <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800a5c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d02f      	beq.n	800a626 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800a5c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d02c      	beq.n	800a626 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5d4:	4413      	add	r3, r2
 800a5d6:	781a      	ldrb	r2, [r3, #0]
 800a5d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5dc:	440b      	add	r3, r1
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d103      	bne.n	800a5ec <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800a5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5ea:	e7f1      	b.n	800a5d0 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a5f2:	68f9      	ldr	r1, [r7, #12]
 800a5f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	005b      	lsls	r3, r3, #1
 800a5fa:	4413      	add	r3, r2
 800a5fc:	1c5d      	adds	r5, r3, #1
 800a5fe:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800a602:	f107 0214 	add.w	r2, r7, #20
 800a606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	462b      	mov	r3, r5
 800a60c:	f7ff f838 	bl	8009680 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800a610:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a614:	4619      	mov	r1, r3
 800a616:	4620      	mov	r0, r4
 800a618:	f7fd fd7c 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800a61c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a620:	4618      	mov	r0, r3
 800a622:	f7fd fcfa 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800a626:	f107 0314 	add.w	r3, r7, #20
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fd fcf5 	bl	800801a <_ZN12SimpleStringD1Ev>
	}
}
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	4618      	mov	r0, r3
 800a634:	3740      	adds	r7, #64	; 0x40
 800a636:	46bd      	mov	sp, r7
 800a638:	bdb0      	pop	{r4, r5, r7, pc}
 800a63a:	bf00      	nop
 800a63c:	080188cc 	.word	0x080188cc

0800a640 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800a640:	b5b0      	push	{r4, r5, r7, lr}
 800a642:	b08c      	sub	sp, #48	; 0x30
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
 800a64c:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	68b9      	ldr	r1, [r7, #8]
 800a656:	f7fe feb7 	bl	80093c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a65a:	4a26      	ldr	r2, [pc, #152]	; (800a6f4 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a666:	68f9      	ldr	r1, [r7, #12]
 800a668:	f107 0310 	add.w	r3, r7, #16
 800a66c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a66e:	4618      	mov	r0, r3
 800a670:	f7ff f8b2 	bl	80097d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a674:	f107 0310 	add.w	r3, r7, #16
 800a678:	4619      	mov	r1, r3
 800a67a:	4620      	mov	r0, r4
 800a67c:	f7fd f981 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 800a680:	f107 0310 	add.w	r3, r7, #16
 800a684:	4618      	mov	r0, r3
 800a686:	f7fd fcc8 	bl	800801a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a690:	68fd      	ldr	r5, [r7, #12]
 800a692:	f107 0020 	add.w	r0, r7, #32
 800a696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a69a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a69c:	f7fe fa68 	bl	8008b70 <_Z20StringFromMaskedBitsmmj>
 800a6a0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800a6a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6aa:	f7fe fa61 	bl	8008b70 <_Z20StringFromMaskedBitsmmj>
 800a6ae:	f107 0018 	add.w	r0, r7, #24
 800a6b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a6b6:	f107 0220 	add.w	r2, r7, #32
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	f7fe ffc6 	bl	800964c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a6c0:	f107 0318 	add.w	r3, r7, #24
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f7fd fd24 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800a6cc:	f107 0318 	add.w	r3, r7, #24
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fd fca2 	bl	800801a <_ZN12SimpleStringD1Ev>
 800a6d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7fd fc9d 	bl	800801a <_ZN12SimpleStringD1Ev>
 800a6e0:	f107 0320 	add.w	r3, r7, #32
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fd fc98 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3730      	adds	r7, #48	; 0x30
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bdb0      	pop	{r4, r5, r7, pc}
 800a6f4:	080188a0 	.word	0x080188a0

0800a6f8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800a6f8:	b590      	push	{r4, r7, lr}
 800a6fa:	b089      	sub	sp, #36	; 0x24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]
 800a704:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	68b9      	ldr	r1, [r7, #8]
 800a70e:	f7fe fe5b 	bl	80093c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a712:	4a1a      	ldr	r2, [pc, #104]	; (800a77c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a71e:	68f9      	ldr	r1, [r7, #12]
 800a720:	f107 0310 	add.w	r3, r7, #16
 800a724:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a726:	4618      	mov	r0, r3
 800a728:	f7ff f856 	bl	80097d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a72c:	f107 0310 	add.w	r3, r7, #16
 800a730:	4619      	mov	r1, r3
 800a732:	4620      	mov	r0, r4
 800a734:	f7fd f925 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 800a738:	f107 0310 	add.w	r3, r7, #16
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fd fc6c 	bl	800801a <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a74a:	f7fd fc39 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800a74e:	4602      	mov	r2, r0
 800a750:	f107 0318 	add.w	r3, r7, #24
 800a754:	490a      	ldr	r1, [pc, #40]	; (800a780 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800a756:	4618      	mov	r0, r3
 800a758:	f7fe f8ec 	bl	8008934 <_Z16StringFromFormatPKcz>
 800a75c:	f107 0318 	add.w	r3, r7, #24
 800a760:	4619      	mov	r1, r3
 800a762:	4620      	mov	r0, r4
 800a764:	f7fd fcd6 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800a768:	f107 0318 	add.w	r3, r7, #24
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7fd fc54 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	4618      	mov	r0, r3
 800a776:	3724      	adds	r7, #36	; 0x24
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd90      	pop	{r4, r7, pc}
 800a77c:	08018874 	.word	0x08018874
 800a780:	08016750 	.word	0x08016750

0800a784 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	4a05      	ldr	r2, [pc, #20]	; (800a7a4 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	601a      	str	r2, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4618      	mov	r0, r3
 800a796:	f7fe fe99 	bl	80094cc <_ZN11TestFailureD1Ev>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4618      	mov	r0, r3
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	08018874 	.word	0x08018874

0800a7a8 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff ffe7 	bl	800a784 <_ZN25FeatureUnsupportedFailureD1Ev>
 800a7b6:	2134      	movs	r1, #52	; 0x34
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7fc f9a1 	bl	8006b00 <_ZdlPvj>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	4a05      	ldr	r2, [pc, #20]	; (800a7e8 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7fe fe77 	bl	80094cc <_ZN11TestFailureD1Ev>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	080188a0 	.word	0x080188a0

0800a7ec <_ZN16BitsEqualFailureD0Ev>:
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7ff ffe7 	bl	800a7c8 <_ZN16BitsEqualFailureD1Ev>
 800a7fa:	2134      	movs	r1, #52	; 0x34
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f7fc f97f 	bl	8006b00 <_ZdlPvj>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4618      	mov	r0, r3
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	4a05      	ldr	r2, [pc, #20]	; (800a82c <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	601a      	str	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fe fe55 	bl	80094cc <_ZN11TestFailureD1Ev>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4618      	mov	r0, r3
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	080188cc 	.word	0x080188cc

0800a830 <_ZN18BinaryEqualFailureD0Ev>:
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f7ff ffe7 	bl	800a80c <_ZN18BinaryEqualFailureD1Ev>
 800a83e:	2134      	movs	r1, #52	; 0x34
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7fc f95d 	bl	8006b00 <_ZdlPvj>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4618      	mov	r0, r3
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	4a05      	ldr	r2, [pc, #20]	; (800a870 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4618      	mov	r0, r3
 800a862:	f7fe fe33 	bl	80094cc <_ZN11TestFailureD1Ev>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4618      	mov	r0, r3
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	080188f8 	.word	0x080188f8

0800a874 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f7ff ffe7 	bl	800a850 <_ZN24StringEqualNoCaseFailureD1Ev>
 800a882:	2134      	movs	r1, #52	; 0x34
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7fc f93b 	bl	8006b00 <_ZdlPvj>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4618      	mov	r0, r3
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	4a05      	ldr	r2, [pc, #20]	; (800a8b4 <_ZN18StringEqualFailureD1Ev+0x20>)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	601a      	str	r2, [r3, #0]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fe fe11 	bl	80094cc <_ZN11TestFailureD1Ev>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3708      	adds	r7, #8
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	08018924 	.word	0x08018924

0800a8b8 <_ZN18StringEqualFailureD0Ev>:
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f7ff ffe7 	bl	800a894 <_ZN18StringEqualFailureD1Ev>
 800a8c6:	2134      	movs	r1, #52	; 0x34
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7fc f919 	bl	8006b00 <_ZdlPvj>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	4a05      	ldr	r2, [pc, #20]	; (800a8f8 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	601a      	str	r2, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fe fdef 	bl	80094cc <_ZN11TestFailureD1Ev>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	08018950 	.word	0x08018950

0800a8fc <_ZN23SignedBytesEqualFailureD0Ev>:
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7ff ffe7 	bl	800a8d8 <_ZN23SignedBytesEqualFailureD1Ev>
 800a90a:	2134      	movs	r1, #52	; 0x34
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7fc f8f7 	bl	8006b00 <_ZdlPvj>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4618      	mov	r0, r3
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	4a05      	ldr	r2, [pc, #20]	; (800a93c <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	601a      	str	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7fe fdcd 	bl	80094cc <_ZN11TestFailureD1Ev>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4618      	mov	r0, r3
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	0801897c 	.word	0x0801897c

0800a940 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7ff ffe7 	bl	800a91c <_ZN25UnsignedLongsEqualFailureD1Ev>
 800a94e:	2134      	movs	r1, #52	; 0x34
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f7fc f8d5 	bl	8006b00 <_ZdlPvj>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4618      	mov	r0, r3
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	4a05      	ldr	r2, [pc, #20]	; (800a980 <_ZN17LongsEqualFailureD1Ev+0x20>)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	601a      	str	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4618      	mov	r0, r3
 800a972:	f7fe fdab 	bl	80094cc <_ZN11TestFailureD1Ev>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4618      	mov	r0, r3
 800a97a:	3708      	adds	r7, #8
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	080189a8 	.word	0x080189a8

0800a984 <_ZN17LongsEqualFailureD0Ev>:
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f7ff ffe7 	bl	800a960 <_ZN17LongsEqualFailureD1Ev>
 800a992:	2134      	movs	r1, #52	; 0x34
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f7fc f8b3 	bl	8006b00 <_ZdlPvj>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4618      	mov	r0, r3
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	4a05      	ldr	r2, [pc, #20]	; (800a9c4 <_ZN12CheckFailureD1Ev+0x20>)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	601a      	str	r2, [r3, #0]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fe fd89 	bl	80094cc <_ZN11TestFailureD1Ev>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3708      	adds	r7, #8
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	080189d4 	.word	0x080189d4

0800a9c8 <_ZN12CheckFailureD0Ev>:
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7ff ffe7 	bl	800a9a4 <_ZN12CheckFailureD1Ev>
 800a9d6:	2134      	movs	r1, #52	; 0x34
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f7fc f891 	bl	8006b00 <_ZdlPvj>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	4a05      	ldr	r2, [pc, #20]	; (800aa08 <_ZN15ContainsFailureD1Ev+0x20>)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	601a      	str	r2, [r3, #0]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fe fd67 	bl	80094cc <_ZN11TestFailureD1Ev>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4618      	mov	r0, r3
 800aa02:	3708      	adds	r7, #8
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	08018a00 	.word	0x08018a00

0800aa0c <_ZN15ContainsFailureD0Ev>:
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f7ff ffe7 	bl	800a9e8 <_ZN15ContainsFailureD1Ev>
 800aa1a:	2134      	movs	r1, #52	; 0x34
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f7fc f86f 	bl	8006b00 <_ZdlPvj>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4618      	mov	r0, r3
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	4a05      	ldr	r2, [pc, #20]	; (800aa4c <_ZN17ComparisonFailureD1Ev+0x20>)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	601a      	str	r2, [r3, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fe fd45 	bl	80094cc <_ZN11TestFailureD1Ev>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4618      	mov	r0, r3
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	08018a2c 	.word	0x08018a2c

0800aa50 <_ZN17ComparisonFailureD0Ev>:
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f7ff ffe7 	bl	800aa2c <_ZN17ComparisonFailureD1Ev>
 800aa5e:	2134      	movs	r1, #52	; 0x34
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f7fc f84d 	bl	8006b00 <_ZdlPvj>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	4a05      	ldr	r2, [pc, #20]	; (800aa90 <_ZN17CheckEqualFailureD1Ev+0x20>)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	601a      	str	r2, [r3, #0]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7fe fd23 	bl	80094cc <_ZN11TestFailureD1Ev>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3708      	adds	r7, #8
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	08018a58 	.word	0x08018a58

0800aa94 <_ZN17CheckEqualFailureD0Ev>:
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff ffe7 	bl	800aa70 <_ZN17CheckEqualFailureD1Ev>
 800aaa2:	2134      	movs	r1, #52	; 0x34
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7fc f82b 	bl	8006b00 <_ZdlPvj>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4618      	mov	r0, r3
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	4a05      	ldr	r2, [pc, #20]	; (800aad4 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	601a      	str	r2, [r3, #0]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7fe fd01 	bl	80094cc <_ZN11TestFailureD1Ev>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4618      	mov	r0, r3
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	08018a84 	.word	0x08018a84

0800aad8 <_ZN19DoublesEqualFailureD0Ev>:
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7ff ffe7 	bl	800aab4 <_ZN19DoublesEqualFailureD1Ev>
 800aae6:	2134      	movs	r1, #52	; 0x34
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7fc f809 	bl	8006b00 <_ZdlPvj>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	4a05      	ldr	r2, [pc, #20]	; (800ab18 <_ZN13EqualsFailureD1Ev+0x20>)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	601a      	str	r2, [r3, #0]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fe fcdf 	bl	80094cc <_ZN11TestFailureD1Ev>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4618      	mov	r0, r3
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	08018ab0 	.word	0x08018ab0

0800ab1c <_ZN13EqualsFailureD0Ev>:
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff ffe7 	bl	800aaf8 <_ZN13EqualsFailureD1Ev>
 800ab2a:	2134      	movs	r1, #52	; 0x34
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7fb ffe7 	bl	8006b00 <_ZdlPvj>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800ab3c:	b5b0      	push	{r4, r5, r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af02      	add	r7, sp, #8
 800ab42:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800ab44:	4b0d      	ldr	r3, [pc, #52]	; (800ab7c <_ZL13checkedMallocj+0x40>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	4798      	blx	r3
 800ab4c:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10e      	bne.n	800ab72 <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800ab54:	f004 f96c 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 800ab58:	4604      	mov	r4, r0
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	3368      	adds	r3, #104	; 0x68
 800ab5e:	681d      	ldr	r5, [r3, #0]
 800ab60:	f004 f976 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800ab64:	4603      	mov	r3, r0
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	2325      	movs	r3, #37	; 0x25
 800ab6a:	4a05      	ldr	r2, [pc, #20]	; (800ab80 <_ZL13checkedMallocj+0x44>)
 800ab6c:	4905      	ldr	r1, [pc, #20]	; (800ab84 <_ZL13checkedMallocj+0x48>)
 800ab6e:	4620      	mov	r0, r4
 800ab70:	47a8      	blx	r5
    return mem;
 800ab72:	68fb      	ldr	r3, [r7, #12]
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bdb0      	pop	{r4, r5, r7, pc}
 800ab7c:	200000c4 	.word	0x200000c4
 800ab80:	080167c4 	.word	0x080167c4
 800ab84:	080167e4 	.word	0x080167e4

0800ab88 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800ab8c:	4b04      	ldr	r3, [pc, #16]	; (800aba0 <_Z22getCurrentNewAllocatorv+0x18>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <_Z22getCurrentNewAllocatorv+0x10>
 800ab94:	f000 f806 	bl	800aba4 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800ab98:	4b01      	ldr	r3, [pc, #4]	; (800aba0 <_Z22getCurrentNewAllocatorv+0x18>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	200005ac 	.word	0x200005ac

0800aba4 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800aba8:	f000 f810 	bl	800abcc <_Z19defaultNewAllocatorv>
 800abac:	4603      	mov	r3, r0
 800abae:	4a02      	ldr	r2, [pc, #8]	; (800abb8 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800abb0:	6013      	str	r3, [r2, #0]
}
 800abb2:	bf00      	nop
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	200005ac 	.word	0x200005ac

0800abbc <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	4801      	ldr	r0, [pc, #4]	; (800abc8 <__tcf_0+0xc>)
 800abc2:	f000 f909 	bl	800add8 <_ZN19TestMemoryAllocatorD1Ev>
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	200005b8 	.word	0x200005b8

0800abcc <_Z19defaultNewAllocatorv>:
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800abd0:	4b13      	ldr	r3, [pc, #76]	; (800ac20 <_Z19defaultNewAllocatorv+0x54>)
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	f3bf 8f5b 	dmb	ish
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	f003 0301 	and.w	r3, r3, #1
 800abde:	2b00      	cmp	r3, #0
 800abe0:	bf0c      	ite	eq
 800abe2:	2301      	moveq	r3, #1
 800abe4:	2300      	movne	r3, #0
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d016      	beq.n	800ac1a <_Z19defaultNewAllocatorv+0x4e>
 800abec:	480c      	ldr	r0, [pc, #48]	; (800ac20 <_Z19defaultNewAllocatorv+0x54>)
 800abee:	f007 faf3 	bl	80121d8 <__cxa_guard_acquire>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	bf14      	ite	ne
 800abf8:	2301      	movne	r3, #1
 800abfa:	2300      	moveq	r3, #0
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00b      	beq.n	800ac1a <_Z19defaultNewAllocatorv+0x4e>
 800ac02:	4b08      	ldr	r3, [pc, #32]	; (800ac24 <_Z19defaultNewAllocatorv+0x58>)
 800ac04:	4a08      	ldr	r2, [pc, #32]	; (800ac28 <_Z19defaultNewAllocatorv+0x5c>)
 800ac06:	4909      	ldr	r1, [pc, #36]	; (800ac2c <_Z19defaultNewAllocatorv+0x60>)
 800ac08:	4809      	ldr	r0, [pc, #36]	; (800ac30 <_Z19defaultNewAllocatorv+0x64>)
 800ac0a:	f000 f8c5 	bl	800ad98 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800ac0e:	4804      	ldr	r0, [pc, #16]	; (800ac20 <_Z19defaultNewAllocatorv+0x54>)
 800ac10:	f007 faee 	bl	80121f0 <__cxa_guard_release>
 800ac14:	4807      	ldr	r0, [pc, #28]	; (800ac34 <_Z19defaultNewAllocatorv+0x68>)
 800ac16:	f007 fb12 	bl	801223e <atexit>
    return &allocator;
 800ac1a:	4b05      	ldr	r3, [pc, #20]	; (800ac30 <_Z19defaultNewAllocatorv+0x64>)
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	200005cc 	.word	0x200005cc
 800ac24:	08016804 	.word	0x08016804
 800ac28:	0801680c 	.word	0x0801680c
 800ac2c:	08016810 	.word	0x08016810
 800ac30:	200005b8 	.word	0x200005b8
 800ac34:	0800abbd 	.word	0x0800abbd

0800ac38 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800ac3c:	4b04      	ldr	r3, [pc, #16]	; (800ac50 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d101      	bne.n	800ac48 <_Z27getCurrentNewArrayAllocatorv+0x10>
 800ac44:	f000 f806 	bl	800ac54 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800ac48:	4b01      	ldr	r3, [pc, #4]	; (800ac50 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	200005b0 	.word	0x200005b0

0800ac54 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800ac58:	f000 f810 	bl	800ac7c <_Z24defaultNewArrayAllocatorv>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	4a02      	ldr	r2, [pc, #8]	; (800ac68 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800ac60:	6013      	str	r3, [r2, #0]
}
 800ac62:	bf00      	nop
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	200005b0 	.word	0x200005b0

0800ac6c <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	4801      	ldr	r0, [pc, #4]	; (800ac78 <__tcf_1+0xc>)
 800ac72:	f000 f8b1 	bl	800add8 <_ZN19TestMemoryAllocatorD1Ev>
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	200005d0 	.word	0x200005d0

0800ac7c <_Z24defaultNewArrayAllocatorv>:
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800ac80:	4b13      	ldr	r3, [pc, #76]	; (800acd0 <_Z24defaultNewArrayAllocatorv+0x54>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	f3bf 8f5b 	dmb	ish
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	f003 0301 	and.w	r3, r3, #1
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	bf0c      	ite	eq
 800ac92:	2301      	moveq	r3, #1
 800ac94:	2300      	movne	r3, #0
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d016      	beq.n	800acca <_Z24defaultNewArrayAllocatorv+0x4e>
 800ac9c:	480c      	ldr	r0, [pc, #48]	; (800acd0 <_Z24defaultNewArrayAllocatorv+0x54>)
 800ac9e:	f007 fa9b 	bl	80121d8 <__cxa_guard_acquire>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	bf14      	ite	ne
 800aca8:	2301      	movne	r3, #1
 800acaa:	2300      	moveq	r3, #0
 800acac:	b2db      	uxtb	r3, r3
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00b      	beq.n	800acca <_Z24defaultNewArrayAllocatorv+0x4e>
 800acb2:	4b08      	ldr	r3, [pc, #32]	; (800acd4 <_Z24defaultNewArrayAllocatorv+0x58>)
 800acb4:	4a08      	ldr	r2, [pc, #32]	; (800acd8 <_Z24defaultNewArrayAllocatorv+0x5c>)
 800acb6:	4909      	ldr	r1, [pc, #36]	; (800acdc <_Z24defaultNewArrayAllocatorv+0x60>)
 800acb8:	4809      	ldr	r0, [pc, #36]	; (800ace0 <_Z24defaultNewArrayAllocatorv+0x64>)
 800acba:	f000 f86d 	bl	800ad98 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800acbe:	4804      	ldr	r0, [pc, #16]	; (800acd0 <_Z24defaultNewArrayAllocatorv+0x54>)
 800acc0:	f007 fa96 	bl	80121f0 <__cxa_guard_release>
 800acc4:	4807      	ldr	r0, [pc, #28]	; (800ace4 <_Z24defaultNewArrayAllocatorv+0x68>)
 800acc6:	f007 faba 	bl	801223e <atexit>
    return &allocator;
 800acca:	4b05      	ldr	r3, [pc, #20]	; (800ace0 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800accc:	4618      	mov	r0, r3
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	200005e4 	.word	0x200005e4
 800acd4:	08016828 	.word	0x08016828
 800acd8:	08016834 	.word	0x08016834
 800acdc:	0801683c 	.word	0x0801683c
 800ace0:	200005d0 	.word	0x200005d0
 800ace4:	0800ac6d 	.word	0x0800ac6d

0800ace8 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800acec:	4b04      	ldr	r3, [pc, #16]	; (800ad00 <_Z25getCurrentMallocAllocatorv+0x18>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d101      	bne.n	800acf8 <_Z25getCurrentMallocAllocatorv+0x10>
 800acf4:	f000 f806 	bl	800ad04 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800acf8:	4b01      	ldr	r3, [pc, #4]	; (800ad00 <_Z25getCurrentMallocAllocatorv+0x18>)
 800acfa:	681b      	ldr	r3, [r3, #0]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	200005b4 	.word	0x200005b4

0800ad04 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800ad08:	f000 f810 	bl	800ad2c <_Z22defaultMallocAllocatorv>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	4a02      	ldr	r2, [pc, #8]	; (800ad18 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800ad10:	6013      	str	r3, [r2, #0]
}
 800ad12:	bf00      	nop
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	200005b4 	.word	0x200005b4

0800ad1c <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	4801      	ldr	r0, [pc, #4]	; (800ad28 <__tcf_2+0xc>)
 800ad22:	f000 f859 	bl	800add8 <_ZN19TestMemoryAllocatorD1Ev>
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	200005e8 	.word	0x200005e8

0800ad2c <_Z22defaultMallocAllocatorv>:
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800ad30:	4b13      	ldr	r3, [pc, #76]	; (800ad80 <_Z22defaultMallocAllocatorv+0x54>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	f3bf 8f5b 	dmb	ish
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	f003 0301 	and.w	r3, r3, #1
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	bf0c      	ite	eq
 800ad42:	2301      	moveq	r3, #1
 800ad44:	2300      	movne	r3, #0
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d016      	beq.n	800ad7a <_Z22defaultMallocAllocatorv+0x4e>
 800ad4c:	480c      	ldr	r0, [pc, #48]	; (800ad80 <_Z22defaultMallocAllocatorv+0x54>)
 800ad4e:	f007 fa43 	bl	80121d8 <__cxa_guard_acquire>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	bf14      	ite	ne
 800ad58:	2301      	movne	r3, #1
 800ad5a:	2300      	moveq	r3, #0
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00b      	beq.n	800ad7a <_Z22defaultMallocAllocatorv+0x4e>
 800ad62:	4b08      	ldr	r3, [pc, #32]	; (800ad84 <_Z22defaultMallocAllocatorv+0x58>)
 800ad64:	4a08      	ldr	r2, [pc, #32]	; (800ad88 <_Z22defaultMallocAllocatorv+0x5c>)
 800ad66:	4909      	ldr	r1, [pc, #36]	; (800ad8c <_Z22defaultMallocAllocatorv+0x60>)
 800ad68:	4809      	ldr	r0, [pc, #36]	; (800ad90 <_Z22defaultMallocAllocatorv+0x64>)
 800ad6a:	f000 f815 	bl	800ad98 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800ad6e:	4804      	ldr	r0, [pc, #16]	; (800ad80 <_Z22defaultMallocAllocatorv+0x54>)
 800ad70:	f007 fa3e 	bl	80121f0 <__cxa_guard_release>
 800ad74:	4807      	ldr	r0, [pc, #28]	; (800ad94 <_Z22defaultMallocAllocatorv+0x68>)
 800ad76:	f007 fa62 	bl	801223e <atexit>
    return &allocator;
 800ad7a:	4b05      	ldr	r3, [pc, #20]	; (800ad90 <_Z22defaultMallocAllocatorv+0x64>)
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	200005fc 	.word	0x200005fc
 800ad84:	08016858 	.word	0x08016858
 800ad88:	08016860 	.word	0x08016860
 800ad8c:	08016868 	.word	0x08016868
 800ad90:	200005e8 	.word	0x200005e8
 800ad94:	0800ad1d 	.word	0x0800ad1d

0800ad98 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
 800ada4:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800ada6:	4a0b      	ldr	r2, [pc, #44]	; (800add4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	601a      	str	r2, [r3, #0]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	605a      	str	r2, [r3, #4]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	609a      	str	r2, [r3, #8]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	60da      	str	r2, [r3, #12]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2200      	movs	r2, #0
 800adc2:	741a      	strb	r2, [r3, #16]
{
}
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	4618      	mov	r0, r3
 800adc8:	3714      	adds	r7, #20
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	08018b3c 	.word	0x08018b3c

0800add8 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	4a06      	ldr	r2, [pc, #24]	; (800adfc <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2201      	movs	r2, #1
 800adea:	741a      	strb	r2, [r3, #16]
}
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4618      	mov	r0, r3
 800adf0:	370c      	adds	r7, #12
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	08018b3c 	.word	0x08018b3c

0800ae00 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
}
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7ff ffe5 	bl	800add8 <_ZN19TestMemoryAllocatorD1Ev>
 800ae0e:	2114      	movs	r1, #20
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f7fb fe75 	bl	8006b00 <_ZdlPvj>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	7c1b      	ldrb	r3, [r3, #16]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800ae38:	b590      	push	{r4, r7, lr}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	3310      	adds	r3, #16
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	4798      	blx	r3
 800ae4e:	4604      	mov	r4, r0
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	3310      	adds	r3, #16
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6838      	ldr	r0, [r7, #0]
 800ae5a:	4798      	blx	r3
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	4619      	mov	r1, r3
 800ae60:	4620      	mov	r0, r4
 800ae62:	f7fc fb5f 	bl	8007524 <_ZN12SimpleString6StrCmpEPKcS1_>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	bf0c      	ite	eq
 800ae6c:	2301      	moveq	r3, #1
 800ae6e:	2300      	movne	r3, #0
 800ae70:	b2db      	uxtb	r3, r3
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd90      	pop	{r4, r7, pc}
	...

0800ae7c <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800ae7c:	b590      	push	{r4, r7, lr}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	3308      	adds	r3, #8
 800ae8c:	681c      	ldr	r4, [r3, #0]
 800ae8e:	2301      	movs	r3, #1
 800ae90:	4a04      	ldr	r2, [pc, #16]	; (800aea4 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	47a0      	blx	r4
 800ae98:	4603      	mov	r3, r0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	370c      	adds	r7, #12
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd90      	pop	{r4, r7, pc}
 800aea2:	bf00      	nop
 800aea4:	08016884 	.word	0x08016884

0800aea8 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800aea8:	b590      	push	{r4, r7, lr}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af02      	add	r7, sp, #8
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	330c      	adds	r3, #12
 800aeb8:	681c      	ldr	r4, [r3, #0]
 800aeba:	2301      	movs	r3, #1
 800aebc:	9300      	str	r3, [sp, #0]
 800aebe:	4b04      	ldr	r3, [pc, #16]	; (800aed0 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800aec0:	2200      	movs	r2, #0
 800aec2:	6839      	ldr	r1, [r7, #0]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	47a0      	blx	r4
}
 800aec8:	bf00      	nop
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd90      	pop	{r4, r7, pc}
 800aed0:	08016884 	.word	0x08016884

0800aed4 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
 800aee0:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800aee2:	68b8      	ldr	r0, [r7, #8]
 800aee4:	f7ff fe2a 	bl	800ab3c <_ZL13checkedMallocj>
 800aee8:	4603      	mov	r3, r0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
	...

0800aef4 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
 800af00:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800af02:	4b04      	ldr	r3, [pc, #16]	; (800af14 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68b8      	ldr	r0, [r7, #8]
 800af08:	4798      	blx	r3
}
 800af0a:	bf00      	nop
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	200000cc 	.word	0x200000cc

0800af18 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
    return name_;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685b      	ldr	r3, [r3, #4]
}
 800af24:	4618      	mov	r0, r3
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	689b      	ldr	r3, [r3, #8]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
    return free_name_;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	68db      	ldr	r3, [r3, #12]
}
 800af54:	4618      	mov	r0, r3
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
    return this;
 800af68:	687b      	ldr	r3, [r7, #4]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	370c      	adds	r7, #12
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
	...

0800af78 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	4a05      	ldr	r2, [pc, #20]	; (800af98 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	601a      	str	r2, [r3, #0]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4618      	mov	r0, r3
 800af8a:	f7ff ff25 	bl	800add8 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4618      	mov	r0, r3
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	08018b08 	.word	0x08018b08

0800af9c <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
}
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7ff ffe7 	bl	800af78 <_ZN20NullUnknownAllocatorD1Ev>
 800afaa:	2114      	movs	r1, #20
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f7fb fda7 	bl	8006b00 <_ZdlPvj>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4618      	mov	r0, r3
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
 800afc8:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3714      	adds	r7, #20
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
 800afe4:	603b      	str	r3, [r7, #0]
}
 800afe6:	bf00      	nop
 800afe8:	3714      	adds	r7, #20
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
	...

0800aff4 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	4b06      	ldr	r3, [pc, #24]	; (800b018 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800b000:	4a05      	ldr	r2, [pc, #20]	; (800b018 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800b002:	4906      	ldr	r1, [pc, #24]	; (800b01c <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800b004:	f7ff fec8 	bl	800ad98 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800b008:	4a05      	ldr	r2, [pc, #20]	; (800b020 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	601a      	str	r2, [r3, #0]
{
}
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4618      	mov	r0, r3
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	080168b8 	.word	0x080168b8
 800b01c:	080168c0 	.word	0x080168c0
 800b020:	08018b08 	.word	0x08018b08

0800b024 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800b024:	b580      	push	{r7, lr}
 800b026:	af00      	add	r7, sp, #0
 800b028:	4801      	ldr	r0, [pc, #4]	; (800b030 <__tcf_3+0xc>)
 800b02a:	f7ff ffa5 	bl	800af78 <_ZN20NullUnknownAllocatorD1Ev>
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	20000600 	.word	0x20000600

0800b034 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800b034:	b580      	push	{r7, lr}
 800b036:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800b038:	4b12      	ldr	r3, [pc, #72]	; (800b084 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	f3bf 8f5b 	dmb	ish
 800b040:	b2db      	uxtb	r3, r3
 800b042:	f003 0301 	and.w	r3, r3, #1
 800b046:	2b00      	cmp	r3, #0
 800b048:	bf0c      	ite	eq
 800b04a:	2301      	moveq	r3, #1
 800b04c:	2300      	movne	r3, #0
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	2b00      	cmp	r3, #0
 800b052:	d013      	beq.n	800b07c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800b054:	480b      	ldr	r0, [pc, #44]	; (800b084 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800b056:	f007 f8bf 	bl	80121d8 <__cxa_guard_acquire>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	bf14      	ite	ne
 800b060:	2301      	movne	r3, #1
 800b062:	2300      	moveq	r3, #0
 800b064:	b2db      	uxtb	r3, r3
 800b066:	2b00      	cmp	r3, #0
 800b068:	d008      	beq.n	800b07c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800b06a:	4807      	ldr	r0, [pc, #28]	; (800b088 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800b06c:	f7ff ffc2 	bl	800aff4 <_ZN20NullUnknownAllocatorC1Ev>
 800b070:	4804      	ldr	r0, [pc, #16]	; (800b084 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800b072:	f007 f8bd 	bl	80121f0 <__cxa_guard_release>
 800b076:	4805      	ldr	r0, [pc, #20]	; (800b08c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800b078:	f007 f8e1 	bl	801223e <atexit>
    return &allocator;
 800b07c:	4b02      	ldr	r3, [pc, #8]	; (800b088 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800b07e:	4618      	mov	r0, r3
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	20000614 	.word	0x20000614
 800b088:	20000600 	.word	0x20000600
 800b08c:	0800b025 	.word	0x0800b025

0800b090 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
        return testCount_;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	689b      	ldr	r3, [r3, #8]
    }
 800b09c:	4618      	mov	r0, r3
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	699b      	ldr	r3, [r3, #24]
    }
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800b0c4:	4b05      	ldr	r3, [pc, #20]	; (800b0dc <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d103      	bne.n	800b0d4 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800b0cc:	f004 fa38 	bl	800f540 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	e001      	b.n	800b0d8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800b0d4:	4b01      	ldr	r3, [pc, #4]	; (800b0dc <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800b0d6:	781b      	ldrb	r3, [r3, #0]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	20000084 	.word	0x20000084

0800b0e0 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800b0e8:	4a0a      	ldr	r2, [pc, #40]	; (800b114 <_ZN10TestOutputC1Ev+0x34>)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	601a      	str	r2, [r3, #0]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	605a      	str	r2, [r3, #4]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	721a      	strb	r2, [r3, #8]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	725a      	strb	r2, [r3, #9]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a05      	ldr	r2, [pc, #20]	; (800b118 <_ZN10TestOutputC1Ev+0x38>)
 800b104:	60da      	str	r2, [r3, #12]
{
}
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4618      	mov	r0, r3
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr
 800b114:	08018c40 	.word	0x08018c40
 800b118:	08016cc0 	.word	0x08016cc0

0800b11c <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	4a04      	ldr	r2, [pc, #16]	; (800b138 <_ZN10TestOutputD1Ev+0x1c>)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	601a      	str	r2, [r3, #0]
{
}
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4618      	mov	r0, r3
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr
 800b138:	08018c40 	.word	0x08018c40

0800b13c <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	460b      	mov	r3, r1
 800b146:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	78fa      	ldrb	r2, [r7, #3]
 800b14c:	721a      	strb	r2, [r3, #8]
}
 800b14e:	bf00      	nop
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800b15a:	b480      	push	{r7}
 800b15c:	b083      	sub	sp, #12
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
    color_ = true;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	725a      	strb	r2, [r3, #9]
}
 800b168:	bf00      	nop
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	3328      	adds	r3, #40	; 0x28
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	6839      	ldr	r1, [r7, #0]
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	4798      	blx	r3
}
 800b18c:	bf00      	nop
 800b18e:	3708      	adds	r7, #8
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800b194:	b590      	push	{r4, r7, lr}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	332c      	adds	r3, #44	; 0x2c
 800b1a4:	681c      	ldr	r4, [r3, #0]
 800b1a6:	f107 0308 	add.w	r3, r7, #8
 800b1aa:	6839      	ldr	r1, [r7, #0]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7fd f9ef 	bl	8008590 <_Z10StringFroml>
 800b1b2:	f107 0308 	add.w	r3, r7, #8
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fc ff02 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	47a0      	blx	r4
 800b1c4:	f107 0308 	add.w	r3, r7, #8
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7fc ff26 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800b1ce:	bf00      	nop
 800b1d0:	3714      	adds	r7, #20
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd90      	pop	{r4, r7, pc}

0800b1d6 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800b1d6:	b590      	push	{r4, r7, lr}
 800b1d8:	b085      	sub	sp, #20
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
 800b1de:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	332c      	adds	r3, #44	; 0x2c
 800b1e6:	681c      	ldr	r4, [r3, #0]
 800b1e8:	f107 0308 	add.w	r3, r7, #8
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fd fbc8 	bl	8008984 <_Z10StringFromj>
 800b1f4:	f107 0308 	add.w	r3, r7, #8
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fc fee1 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800b1fe:	4603      	mov	r3, r0
 800b200:	4619      	mov	r1, r3
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	47a0      	blx	r4
 800b206:	f107 0308 	add.w	r3, r7, #8
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fc ff05 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800b210:	bf00      	nop
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	bd90      	pop	{r4, r7, pc}

0800b218 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800b218:	b590      	push	{r4, r7, lr}
 800b21a:	b087      	sub	sp, #28
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	332c      	adds	r3, #44	; 0x2c
 800b22a:	681c      	ldr	r4, [r3, #0]
 800b22c:	f107 0310 	add.w	r3, r7, #16
 800b230:	2106      	movs	r1, #6
 800b232:	ed97 0b00 	vldr	d0, [r7]
 800b236:	4618      	mov	r0, r3
 800b238:	f7fd fb3a 	bl	80088b0 <_Z10StringFromdi>
 800b23c:	f107 0310 	add.w	r3, r7, #16
 800b240:	4618      	mov	r0, r3
 800b242:	f7fc febd 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800b246:	4603      	mov	r3, r0
 800b248:	4619      	mov	r1, r3
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	47a0      	blx	r4
 800b24e:	f107 0310 	add.w	r3, r7, #16
 800b252:	4618      	mov	r0, r3
 800b254:	f7fc fee1 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800b258:	bf00      	nop
 800b25a:	371c      	adds	r7, #28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd90      	pop	{r4, r7, pc}

0800b260 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
    p.print(s);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	332c      	adds	r3, #44	; 0x2c
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	6839      	ldr	r1, [r7, #0]
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	4798      	blx	r3
    return p;
 800b278:	687b      	ldr	r3, [r7, #4]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
	...

0800b284 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800b284:	b590      	push	{r4, r7, lr}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	7a1b      	ldrb	r3, [r3, #8]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d01a      	beq.n	800b2cc <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	332c      	adds	r3, #44	; 0x2c
 800b29c:	681c      	ldr	r4, [r3, #0]
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3314      	adds	r3, #20
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f107 0208 	add.w	r2, r7, #8
 800b2aa:	6839      	ldr	r1, [r7, #0]
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	4798      	blx	r3
 800b2b0:	f107 0308 	add.w	r3, r7, #8
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7fc fe83 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	4619      	mov	r1, r3
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	47a0      	blx	r4
 800b2c2:	f107 0308 	add.w	r3, r7, #8
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7fc fea7 	bl	800801a <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	3318      	adds	r3, #24
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	6838      	ldr	r0, [r7, #0]
 800b2d6:	4798      	blx	r3
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d007      	beq.n	800b2ee <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	3344      	adds	r3, #68	; 0x44
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4907      	ldr	r1, [pc, #28]	; (800b304 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800b2ec:	e006      	b.n	800b2fc <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	3344      	adds	r3, #68	; 0x44
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4904      	ldr	r1, [pc, #16]	; (800b308 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	4798      	blx	r3
}
 800b2fc:	bf00      	nop
 800b2fe:	3714      	adds	r7, #20
 800b300:	46bd      	mov	sp, r7
 800b302:	bd90      	pop	{r4, r7, pc}
 800b304:	08016cc0 	.word	0x08016cc0
 800b308:	08016cc4 	.word	0x08016cc4

0800b30c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800b30c:	b590      	push	{r4, r7, lr}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	7a1b      	ldrb	r3, [r3, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d019      	beq.n	800b352 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	332c      	adds	r3, #44	; 0x2c
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4910      	ldr	r1, [pc, #64]	; (800b368 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	3334      	adds	r3, #52	; 0x34
 800b332:	681c      	ldr	r4, [r3, #0]
 800b334:	6838      	ldr	r0, [r7, #0]
 800b336:	f002 f845 	bl	800d3c4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800b33a:	4603      	mov	r3, r0
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	47a0      	blx	r4
        print(" ms\n");
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	332c      	adds	r3, #44	; 0x2c
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4908      	ldr	r1, [pc, #32]	; (800b36c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800b350:	e005      	b.n	800b35e <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	3358      	adds	r3, #88	; 0x58
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	4798      	blx	r3
}
 800b35e:	bf00      	nop
 800b360:	370c      	adds	r7, #12
 800b362:	46bd      	mov	sp, r7
 800b364:	bd90      	pop	{r4, r7, pc}
 800b366:	bf00      	nop
 800b368:	08016cc8 	.word	0x08016cc8
 800b36c:	08016ccc 	.word	0x08016ccc

0800b370 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	332c      	adds	r3, #44	; 0x2c
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	68d2      	ldr	r2, [r2, #12]
 800b384:	4611      	mov	r1, r2
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	1c5a      	adds	r2, r3, #1
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	605a      	str	r2, [r3, #4]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	685a      	ldr	r2, [r3, #4]
 800b398:	4b0d      	ldr	r3, [pc, #52]	; (800b3d0 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800b39a:	fb83 1302 	smull	r1, r3, r3, r2
 800b39e:	1119      	asrs	r1, r3, #4
 800b3a0:	17d3      	asrs	r3, r2, #31
 800b3a2:	1acb      	subs	r3, r1, r3
 800b3a4:	2132      	movs	r1, #50	; 0x32
 800b3a6:	fb01 f303 	mul.w	r3, r1, r3
 800b3aa:	1ad3      	subs	r3, r2, r3
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	bf0c      	ite	eq
 800b3b0:	2301      	moveq	r3, #1
 800b3b2:	2300      	movne	r3, #0
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d006      	beq.n	800b3c8 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	332c      	adds	r3, #44	; 0x2c
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4904      	ldr	r1, [pc, #16]	; (800b3d4 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	4798      	blx	r3
}
 800b3c8:	bf00      	nop
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	51eb851f 	.word	0x51eb851f
 800b3d4:	08016cd4 	.word	0x08016cd4

0800b3d8 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	60da      	str	r2, [r3, #12]
}
 800b3e8:	bf00      	nop
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
}
 800b412:	bf00      	nop
 800b414:	370c      	adds	r7, #12
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr

0800b41e <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800b41e:	b480      	push	{r7}
 800b420:	b083      	sub	sp, #12
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
 800b426:	6039      	str	r1, [r7, #0]
}
 800b428:	bf00      	nop
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800b434:	b590      	push	{r4, r7, lr}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
    print("\n");
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	332c      	adds	r3, #44	; 0x2c
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	496f      	ldr	r1, [pc, #444]	; (800b604 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800b44c:	6838      	ldr	r0, [r7, #0]
 800b44e:	f7f9 fe25 	bl	800509c <_ZNK10TestResult9isFailureEv>
 800b452:	4603      	mov	r3, r0
 800b454:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800b456:	6838      	ldr	r0, [r7, #0]
 800b458:	f7f9 fe14 	bl	8005084 <_ZNK10TestResult15getFailureCountEv>
 800b45c:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800b45e:	7bfb      	ldrb	r3, [r7, #15]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d02b      	beq.n	800b4bc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	7a5b      	ldrb	r3, [r3, #9]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d006      	beq.n	800b47a <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	332c      	adds	r3, #44	; 0x2c
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4964      	ldr	r1, [pc, #400]	; (800b608 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	4798      	blx	r3
        }
        print("Errors (");
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	332c      	adds	r3, #44	; 0x2c
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4962      	ldr	r1, [pc, #392]	; (800b60c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	4798      	blx	r3
        if (failureCount > 0) {
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00e      	beq.n	800b4ac <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3334      	adds	r3, #52	; 0x34
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	68b9      	ldr	r1, [r7, #8]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	4798      	blx	r3
            print(" failures, ");
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	332c      	adds	r3, #44	; 0x2c
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	495a      	ldr	r1, [pc, #360]	; (800b610 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	4798      	blx	r3
 800b4aa:	e019      	b.n	800b4e0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	332c      	adds	r3, #44	; 0x2c
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4957      	ldr	r1, [pc, #348]	; (800b614 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	4798      	blx	r3
 800b4ba:	e011      	b.n	800b4e0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	7a5b      	ldrb	r3, [r3, #9]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d006      	beq.n	800b4d2 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	332c      	adds	r3, #44	; 0x2c
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4952      	ldr	r1, [pc, #328]	; (800b618 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	4798      	blx	r3
        }
        print("OK (");
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	332c      	adds	r3, #44	; 0x2c
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4950      	ldr	r1, [pc, #320]	; (800b61c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	4798      	blx	r3
    }
    print(result.getTestCount());
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	3334      	adds	r3, #52	; 0x34
 800b4e6:	681c      	ldr	r4, [r3, #0]
 800b4e8:	6838      	ldr	r0, [r7, #0]
 800b4ea:	f7ff fdd1 	bl	800b090 <_ZNK10TestResult12getTestCountEv>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	47a0      	blx	r4
    print(" tests, ");
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	332c      	adds	r3, #44	; 0x2c
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4948      	ldr	r1, [pc, #288]	; (800b620 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	4798      	blx	r3
    print(result.getRunCount());
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3334      	adds	r3, #52	; 0x34
 800b50a:	681c      	ldr	r4, [r3, #0]
 800b50c:	6838      	ldr	r0, [r7, #0]
 800b50e:	f7f9 fda1 	bl	8005054 <_ZNK10TestResult11getRunCountEv>
 800b512:	4603      	mov	r3, r0
 800b514:	4619      	mov	r1, r3
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	47a0      	blx	r4
    print(" ran, ");
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	332c      	adds	r3, #44	; 0x2c
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4940      	ldr	r1, [pc, #256]	; (800b624 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	4798      	blx	r3
    print(result.getCheckCount());
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	3334      	adds	r3, #52	; 0x34
 800b52e:	681c      	ldr	r4, [r3, #0]
 800b530:	6838      	ldr	r0, [r7, #0]
 800b532:	f7fa f9fb 	bl	800592c <_ZNK10TestResult13getCheckCountEv>
 800b536:	4603      	mov	r3, r0
 800b538:	4619      	mov	r1, r3
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	47a0      	blx	r4
    print(" checks, ");
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	332c      	adds	r3, #44	; 0x2c
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4938      	ldr	r1, [pc, #224]	; (800b628 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	4798      	blx	r3
    print(result.getIgnoredCount());
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	3334      	adds	r3, #52	; 0x34
 800b552:	681c      	ldr	r4, [r3, #0]
 800b554:	6838      	ldr	r0, [r7, #0]
 800b556:	f7f9 fd89 	bl	800506c <_ZNK10TestResult15getIgnoredCountEv>
 800b55a:	4603      	mov	r3, r0
 800b55c:	4619      	mov	r1, r3
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	47a0      	blx	r4
    print(" ignored, ");
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	332c      	adds	r3, #44	; 0x2c
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4930      	ldr	r1, [pc, #192]	; (800b62c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	3334      	adds	r3, #52	; 0x34
 800b576:	681c      	ldr	r4, [r3, #0]
 800b578:	6838      	ldr	r0, [r7, #0]
 800b57a:	f7ff fd95 	bl	800b0a8 <_ZNK10TestResult19getFilteredOutCountEv>
 800b57e:	4603      	mov	r3, r0
 800b580:	4619      	mov	r1, r3
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	47a0      	blx	r4
    print(" filtered out, ");
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	332c      	adds	r3, #44	; 0x2c
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4928      	ldr	r1, [pc, #160]	; (800b630 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	3334      	adds	r3, #52	; 0x34
 800b59a:	681c      	ldr	r4, [r3, #0]
 800b59c:	6838      	ldr	r0, [r7, #0]
 800b59e:	f001 ff05 	bl	800d3ac <_ZNK10TestResult21getTotalExecutionTimeEv>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	47a0      	blx	r4
    print(" ms)");
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	332c      	adds	r3, #44	; 0x2c
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4920      	ldr	r1, [pc, #128]	; (800b634 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	4798      	blx	r3
    if (color_) {
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	7a5b      	ldrb	r3, [r3, #9]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d006      	beq.n	800b5ce <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	332c      	adds	r3, #44	; 0x2c
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	491b      	ldr	r1, [pc, #108]	; (800b638 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d009      	beq.n	800b5e8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d106      	bne.n	800b5e8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	332c      	adds	r3, #44	; 0x2c
 800b5e0:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800b5e2:	4916      	ldr	r1, [pc, #88]	; (800b63c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	4798      	blx	r3
    }
    print("\n\n");
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	332c      	adds	r3, #44	; 0x2c
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4913      	ldr	r1, [pc, #76]	; (800b640 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	4798      	blx	r3

    dotCount_ = 0;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	605a      	str	r2, [r3, #4]
}
 800b5fc:	bf00      	nop
 800b5fe:	3714      	adds	r7, #20
 800b600:	46bd      	mov	sp, r7
 800b602:	bd90      	pop	{r4, r7, pc}
 800b604:	08016cd4 	.word	0x08016cd4
 800b608:	08016cd8 	.word	0x08016cd8
 800b60c:	08016ce0 	.word	0x08016ce0
 800b610:	08016cec 	.word	0x08016cec
 800b614:	08016cf8 	.word	0x08016cf8
 800b618:	08016d08 	.word	0x08016d08
 800b61c:	08016d10 	.word	0x08016d10
 800b620:	08016d18 	.word	0x08016d18
 800b624:	08016d24 	.word	0x08016d24
 800b628:	08016d2c 	.word	0x08016d2c
 800b62c:	08016d38 	.word	0x08016d38
 800b630:	08016d44 	.word	0x08016d44
 800b634:	08016d54 	.word	0x08016d54
 800b638:	08016d5c 	.word	0x08016d5c
 800b63c:	08016d60 	.word	0x08016d60
 800b640:	08016e04 	.word	0x08016e04

0800b644 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b01      	cmp	r3, #1
 800b654:	d922      	bls.n	800b69c <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	332c      	adds	r3, #44	; 0x2c
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4911      	ldr	r1, [pc, #68]	; (800b6a4 <_ZN10TestOutput12printTestRunEjj+0x60>)
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	4798      	blx	r3
        print(number);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	3334      	adds	r3, #52	; 0x34
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	68b9      	ldr	r1, [r7, #8]
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	4798      	blx	r3
        print(" of ");
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	332c      	adds	r3, #44	; 0x2c
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	490b      	ldr	r1, [pc, #44]	; (800b6a8 <_ZN10TestOutput12printTestRunEjj+0x64>)
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	4798      	blx	r3
        print(total);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	3334      	adds	r3, #52	; 0x34
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	6879      	ldr	r1, [r7, #4]
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	4798      	blx	r3
        print("\n");
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	332c      	adds	r3, #44	; 0x2c
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4905      	ldr	r1, [pc, #20]	; (800b6ac <_ZN10TestOutput12printTestRunEjj+0x68>)
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	4798      	blx	r3
    }
}
 800b69c:	bf00      	nop
 800b69e:	3710      	adds	r7, #16
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	08016e08 	.word	0x08016e08
 800b6a8:	08016e14 	.word	0x08016e14
 800b6ac:	08016cd4 	.word	0x08016cd4

0800b6b0 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800b6ba:	6838      	ldr	r0, [r7, #0]
 800b6bc:	f7fd ffa1 	bl	8009602 <_ZNK11TestFailure17isOutsideTestFileEv>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d105      	bne.n	800b6d2 <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800b6c6:	6838      	ldr	r0, [r7, #0]
 800b6c8:	f7fd ffad 	bl	8009626 <_ZNK11TestFailure18isInHelperFunctionEv>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d001      	beq.n	800b6d6 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e000      	b.n	800b6d8 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d004      	beq.n	800b6e6 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800b6dc:	6839      	ldr	r1, [r7, #0]
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f81d 	bl	800b71e <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800b6e4:	e003      	b.n	800b6ee <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800b6e6:	6839      	ldr	r1, [r7, #0]
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 f86b 	bl	800b7c4 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3318      	adds	r3, #24
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f107 0208 	add.w	r2, r7, #8
 800b6fa:	6839      	ldr	r1, [r7, #0]
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	4798      	blx	r3
 800b700:	f107 0308 	add.w	r3, r7, #8
 800b704:	4619      	mov	r1, r3
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 f8b2 	bl	800b870 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800b70c:	f107 0308 	add.w	r3, r7, #8
 800b710:	4618      	mov	r0, r3
 800b712:	f7fc fc82 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800b716:	bf00      	nop
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800b71e:	b580      	push	{r7, lr}
 800b720:	b088      	sub	sp, #32
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
 800b726:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	331c      	adds	r3, #28
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f107 0208 	add.w	r2, r7, #8
 800b734:	6839      	ldr	r1, [r7, #0]
 800b736:	4610      	mov	r0, r2
 800b738:	4798      	blx	r3
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	3320      	adds	r3, #32
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	6838      	ldr	r0, [r7, #0]
 800b744:	4798      	blx	r3
 800b746:	4602      	mov	r2, r0
 800b748:	f107 0308 	add.w	r3, r7, #8
 800b74c:	4619      	mov	r1, r3
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f8be 	bl	800b8d0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800b754:	f107 0308 	add.w	r3, r7, #8
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fc fc5e 	bl	800801a <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	330c      	adds	r3, #12
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f107 0210 	add.w	r2, r7, #16
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	4610      	mov	r0, r2
 800b76e:	4798      	blx	r3
 800b770:	f107 0310 	add.w	r3, r7, #16
 800b774:	4619      	mov	r1, r3
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 f85c 	bl	800b834 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800b77c:	f107 0310 	add.w	r3, r7, #16
 800b780:	4618      	mov	r0, r3
 800b782:	f7fc fc4a 	bl	800801a <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	3308      	adds	r3, #8
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f107 0218 	add.w	r2, r7, #24
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	4610      	mov	r0, r2
 800b796:	4798      	blx	r3
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	3314      	adds	r3, #20
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6838      	ldr	r0, [r7, #0]
 800b7a2:	4798      	blx	r3
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	f107 0318 	add.w	r3, r7, #24
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 f88f 	bl	800b8d0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800b7b2:	f107 0318 	add.w	r3, r7, #24
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fc fc2f 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800b7bc:	bf00      	nop
 800b7be:	3720      	adds	r7, #32
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	3308      	adds	r3, #8
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f107 0208 	add.w	r2, r7, #8
 800b7da:	6839      	ldr	r1, [r7, #0]
 800b7dc:	4610      	mov	r0, r2
 800b7de:	4798      	blx	r3
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3314      	adds	r3, #20
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	6838      	ldr	r0, [r7, #0]
 800b7ea:	4798      	blx	r3
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	f107 0308 	add.w	r3, r7, #8
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 f86b 	bl	800b8d0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800b7fa:	f107 0308 	add.w	r3, r7, #8
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fc fc0b 	bl	800801a <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	330c      	adds	r3, #12
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f107 0210 	add.w	r2, r7, #16
 800b810:	6839      	ldr	r1, [r7, #0]
 800b812:	4610      	mov	r0, r2
 800b814:	4798      	blx	r3
 800b816:	f107 0310 	add.w	r3, r7, #16
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 f809 	bl	800b834 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800b822:	f107 0310 	add.w	r3, r7, #16
 800b826:	4618      	mov	r0, r3
 800b828:	f7fc fbf7 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800b82c:	bf00      	nop
 800b82e:	3718      	adds	r7, #24
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800b834:	b590      	push	{r4, r7, lr}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	332c      	adds	r3, #44	; 0x2c
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4909      	ldr	r1, [pc, #36]	; (800b86c <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	4798      	blx	r3
    print(testName.asCharString());
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	332c      	adds	r3, #44	; 0x2c
 800b852:	681c      	ldr	r4, [r3, #0]
 800b854:	6838      	ldr	r0, [r7, #0]
 800b856:	f7fc fbb3 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800b85a:	4603      	mov	r3, r0
 800b85c:	4619      	mov	r1, r3
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	47a0      	blx	r4
}
 800b862:	bf00      	nop
 800b864:	370c      	adds	r7, #12
 800b866:	46bd      	mov	sp, r7
 800b868:	bd90      	pop	{r4, r7, pc}
 800b86a:	bf00      	nop
 800b86c:	08016e1c 	.word	0x08016e1c

0800b870 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800b870:	b590      	push	{r4, r7, lr}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
    print("\n");
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	332c      	adds	r3, #44	; 0x2c
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4910      	ldr	r1, [pc, #64]	; (800b8c4 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	4798      	blx	r3
    print("\t");
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	332c      	adds	r3, #44	; 0x2c
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	490d      	ldr	r1, [pc, #52]	; (800b8c8 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	4798      	blx	r3
    print(reason.asCharString());
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	332c      	adds	r3, #44	; 0x2c
 800b89c:	681c      	ldr	r4, [r3, #0]
 800b89e:	6838      	ldr	r0, [r7, #0]
 800b8a0:	f7fc fb8e 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	47a0      	blx	r4
    print("\n\n");
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	332c      	adds	r3, #44	; 0x2c
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4905      	ldr	r1, [pc, #20]	; (800b8cc <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	4798      	blx	r3
}
 800b8ba:	bf00      	nop
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd90      	pop	{r4, r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	08016cd4 	.word	0x08016cd4
 800b8c8:	08016e2c 	.word	0x08016e2c
 800b8cc:	08016e04 	.word	0x08016e04

0800b8d0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800b8d0:	b590      	push	{r4, r7, lr}
 800b8d2:	b089      	sub	sp, #36	; 0x24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800b8dc:	f7ff fbf0 	bl	800b0c0 <_ZN10TestOutput21getWorkingEnvironmentEv>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	bf0c      	ite	eq
 800b8e6:	2301      	moveq	r3, #1
 800b8e8:	2300      	movne	r3, #0
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d015      	beq.n	800b91c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	3354      	adds	r3, #84	; 0x54
 800b8f6:	681c      	ldr	r4, [r3, #0]
 800b8f8:	f107 0310 	add.w	r3, r7, #16
 800b8fc:	68b9      	ldr	r1, [r7, #8]
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fc f827 	bl	8007952 <_ZN12SimpleStringC1ERKS_>
 800b904:	f107 0310 	add.w	r3, r7, #16
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	4619      	mov	r1, r3
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	47a0      	blx	r4
 800b910:	f107 0310 	add.w	r3, r7, #16
 800b914:	4618      	mov	r0, r3
 800b916:	f7fc fb80 	bl	800801a <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800b91a:	e014      	b.n	800b946 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	3350      	adds	r3, #80	; 0x50
 800b922:	681c      	ldr	r4, [r3, #0]
 800b924:	f107 0318 	add.w	r3, r7, #24
 800b928:	68b9      	ldr	r1, [r7, #8]
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fc f811 	bl	8007952 <_ZN12SimpleStringC1ERKS_>
 800b930:	f107 0318 	add.w	r3, r7, #24
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	4619      	mov	r1, r3
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	47a0      	blx	r4
 800b93c:	f107 0318 	add.w	r3, r7, #24
 800b940:	4618      	mov	r0, r3
 800b942:	f7fc fb6a 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800b946:	bf00      	nop
 800b948:	3724      	adds	r7, #36	; 0x24
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd90      	pop	{r4, r7, pc}
	...

0800b950 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800b950:	b590      	push	{r4, r7, lr}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	607a      	str	r2, [r7, #4]
    print("\n");
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	332c      	adds	r3, #44	; 0x2c
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4916      	ldr	r1, [pc, #88]	; (800b9c0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	4798      	blx	r3
    print(file.asCharString());
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	332c      	adds	r3, #44	; 0x2c
 800b970:	681c      	ldr	r4, [r3, #0]
 800b972:	68b8      	ldr	r0, [r7, #8]
 800b974:	f7fc fb24 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800b978:	4603      	mov	r3, r0
 800b97a:	4619      	mov	r1, r3
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	47a0      	blx	r4
    print(":");
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	332c      	adds	r3, #44	; 0x2c
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	490e      	ldr	r1, [pc, #56]	; (800b9c4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	4798      	blx	r3
    print(lineNumber);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	3334      	adds	r3, #52	; 0x34
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	6879      	ldr	r1, [r7, #4]
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	4798      	blx	r3
    print(":");
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	332c      	adds	r3, #44	; 0x2c
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4907      	ldr	r1, [pc, #28]	; (800b9c4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	4798      	blx	r3
    print(" error:");
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	332c      	adds	r3, #44	; 0x2c
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4905      	ldr	r1, [pc, #20]	; (800b9c8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	4798      	blx	r3
}
 800b9b8:	bf00      	nop
 800b9ba:	3714      	adds	r7, #20
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd90      	pop	{r4, r7, pc}
 800b9c0:	08016cd4 	.word	0x08016cd4
 800b9c4:	08016e30 	.word	0x08016e30
 800b9c8:	08016e34 	.word	0x08016e34

0800b9cc <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800b9cc:	b590      	push	{r4, r7, lr}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
    print("\n");
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	332c      	adds	r3, #44	; 0x2c
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4916      	ldr	r1, [pc, #88]	; (800ba3c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	4798      	blx	r3
    print(file.asCharString());
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	332c      	adds	r3, #44	; 0x2c
 800b9ec:	681c      	ldr	r4, [r3, #0]
 800b9ee:	68b8      	ldr	r0, [r7, #8]
 800b9f0:	f7fc fae6 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	47a0      	blx	r4
    print("(");
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	332c      	adds	r3, #44	; 0x2c
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	490e      	ldr	r1, [pc, #56]	; (800ba40 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	4798      	blx	r3
    print(lineNumber);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	3334      	adds	r3, #52	; 0x34
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	6879      	ldr	r1, [r7, #4]
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	4798      	blx	r3
    print("):");
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	332c      	adds	r3, #44	; 0x2c
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4908      	ldr	r1, [pc, #32]	; (800ba44 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	4798      	blx	r3
    print(" error:");
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	332c      	adds	r3, #44	; 0x2c
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4906      	ldr	r1, [pc, #24]	; (800ba48 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	4798      	blx	r3
}
 800ba34:	bf00      	nop
 800ba36:	3714      	adds	r7, #20
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd90      	pop	{r4, r7, pc}
 800ba3c:	08016cd4 	.word	0x08016cd4
 800ba40:	08016e3c 	.word	0x08016e3c
 800ba44:	08016e40 	.word	0x08016e40
 800ba48:	08016e34 	.word	0x08016e34

0800ba4c <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	7a1b      	ldrb	r3, [r3, #8]
 800ba5a:	2b02      	cmp	r3, #2
 800ba5c:	d106      	bne.n	800ba6c <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3328      	adds	r3, #40	; 0x28
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	6839      	ldr	r1, [r7, #0]
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	4798      	blx	r3
}
 800ba6c:	bf00      	nop
 800ba6e:	3708      	adds	r7, #8
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
    while (*s) {
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d009      	beq.n	800ba9a <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800ba86:	4b0a      	ldr	r3, [pc, #40]	; (800bab0 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	7812      	ldrb	r2, [r2, #0]
 800ba8e:	4610      	mov	r0, r2
 800ba90:	4798      	blx	r3
        s++;
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	3301      	adds	r3, #1
 800ba96:	603b      	str	r3, [r7, #0]
    while (*s) {
 800ba98:	e7f1      	b.n	800ba7e <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	334c      	adds	r3, #76	; 0x4c
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	4798      	blx	r3
}
 800baa6:	bf00      	nop
 800baa8:	3708      	adds	r7, #8
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	200000bc 	.word	0x200000bc

0800bab4 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800babc:	4b03      	ldr	r3, [pc, #12]	; (800bacc <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4798      	blx	r3
}
 800bac2:	bf00      	nop
 800bac4:	3708      	adds	r7, #8
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	200000c0 	.word	0x200000c0

0800bad0 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	4618      	mov	r0, r3
 800badc:	f7ff fb00 	bl	800b0e0 <_ZN10TestOutputC1Ev>
 800bae0:	4a06      	ldr	r2, [pc, #24]	; (800bafc <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	601a      	str	r2, [r3, #0]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	611a      	str	r2, [r3, #16]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	615a      	str	r2, [r3, #20]
{
}
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4618      	mov	r0, r3
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	08018b70 	.word	0x08018b70

0800bb00 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	4a0e      	ldr	r2, [pc, #56]	; (800bb44 <_ZN19CompositeTestOutputD1Ev+0x44>)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d004      	beq.n	800bb20 <_ZN19CompositeTestOutputD1Ev+0x20>
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	3204      	adds	r2, #4
 800bb1a:	6812      	ldr	r2, [r2, #0]
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	4790      	blx	r2
  delete outputTwo_;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	695b      	ldr	r3, [r3, #20]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d004      	beq.n	800bb32 <_ZN19CompositeTestOutputD1Ev+0x32>
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	3204      	adds	r2, #4
 800bb2c:	6812      	ldr	r2, [r2, #0]
 800bb2e:	4618      	mov	r0, r3
 800bb30:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7ff faf1 	bl	800b11c <_ZN10TestOutputD1Ev>
}
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	08018b70 	.word	0x08018b70

0800bb48 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
}
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f7ff ffd5 	bl	800bb00 <_ZN19CompositeTestOutputD1Ev>
 800bb56:	2118      	movs	r1, #24
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f7fa ffd1 	bl	8006b00 <_ZdlPvj>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4618      	mov	r0, r3
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d004      	beq.n	800bb84 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	3204      	adds	r2, #4
 800bb7e:	6812      	ldr	r2, [r2, #0]
 800bb80:	4618      	mov	r0, r3
 800bb82:	4790      	blx	r2
  outputOne_ = output;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	683a      	ldr	r2, [r7, #0]
 800bb88:	611a      	str	r2, [r3, #16]
}
 800bb8a:	bf00      	nop
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b082      	sub	sp, #8
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	695b      	ldr	r3, [r3, #20]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d004      	beq.n	800bbae <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	3204      	adds	r2, #4
 800bba8:	6812      	ldr	r2, [r2, #0]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	4790      	blx	r2
  outputTwo_ = output;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	683a      	ldr	r2, [r7, #0]
 800bbb2:	615a      	str	r2, [r3, #20]
}
 800bbb4:	bf00      	nop
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	691b      	ldr	r3, [r3, #16]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d008      	beq.n	800bbde <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	691a      	ldr	r2, [r3, #16]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	691b      	ldr	r3, [r3, #16]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	3308      	adds	r3, #8
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4610      	mov	r0, r2
 800bbdc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	695b      	ldr	r3, [r3, #20]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d008      	beq.n	800bbf8 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	695a      	ldr	r2, [r3, #20]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	695b      	ldr	r3, [r3, #20]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	3308      	adds	r3, #8
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4610      	mov	r0, r2
 800bbf6:	4798      	blx	r3
}
 800bbf8:	bf00      	nop
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	691b      	ldr	r3, [r3, #16]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d009      	beq.n	800bc26 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	691a      	ldr	r2, [r3, #16]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	330c      	adds	r3, #12
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	6839      	ldr	r1, [r7, #0]
 800bc22:	4610      	mov	r0, r2
 800bc24:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	695b      	ldr	r3, [r3, #20]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d009      	beq.n	800bc42 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	695a      	ldr	r2, [r3, #20]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	695b      	ldr	r3, [r3, #20]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	330c      	adds	r3, #12
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	4610      	mov	r0, r2
 800bc40:	4798      	blx	r3
}
 800bc42:	bf00      	nop
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800bc4a:	b580      	push	{r7, lr}
 800bc4c:	b082      	sub	sp, #8
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
 800bc52:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d009      	beq.n	800bc70 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	691a      	ldr	r2, [r3, #16]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	3310      	adds	r3, #16
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	6839      	ldr	r1, [r7, #0]
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	695b      	ldr	r3, [r3, #20]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d009      	beq.n	800bc8c <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	695a      	ldr	r2, [r3, #20]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	695b      	ldr	r3, [r3, #20]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	3310      	adds	r3, #16
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	6839      	ldr	r1, [r7, #0]
 800bc88:	4610      	mov	r0, r2
 800bc8a:	4798      	blx	r3
}
 800bc8c:	bf00      	nop
 800bc8e:	3708      	adds	r7, #8
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d009      	beq.n	800bcba <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	691a      	ldr	r2, [r3, #16]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	3314      	adds	r3, #20
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	6839      	ldr	r1, [r7, #0]
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	695b      	ldr	r3, [r3, #20]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d009      	beq.n	800bcd6 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	695a      	ldr	r2, [r3, #20]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	695b      	ldr	r3, [r3, #20]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	3314      	adds	r3, #20
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	6839      	ldr	r1, [r7, #0]
 800bcd2:	4610      	mov	r0, r2
 800bcd4:	4798      	blx	r3
}
 800bcd6:	bf00      	nop
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b082      	sub	sp, #8
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
 800bce6:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	691b      	ldr	r3, [r3, #16]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d009      	beq.n	800bd04 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	691a      	ldr	r2, [r3, #16]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	3318      	adds	r3, #24
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	6839      	ldr	r1, [r7, #0]
 800bd00:	4610      	mov	r0, r2
 800bd02:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d009      	beq.n	800bd20 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	695a      	ldr	r2, [r3, #20]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	695b      	ldr	r3, [r3, #20]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	3318      	adds	r3, #24
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	6839      	ldr	r1, [r7, #0]
 800bd1c:	4610      	mov	r0, r2
 800bd1e:	4798      	blx	r3
}
 800bd20:	bf00      	nop
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d009      	beq.n	800bd4e <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	691a      	ldr	r2, [r3, #16]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	691b      	ldr	r3, [r3, #16]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	331c      	adds	r3, #28
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	6839      	ldr	r1, [r7, #0]
 800bd4a:	4610      	mov	r0, r2
 800bd4c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	695b      	ldr	r3, [r3, #20]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d009      	beq.n	800bd6a <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	695a      	ldr	r2, [r3, #20]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	695b      	ldr	r3, [r3, #20]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	331c      	adds	r3, #28
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	6839      	ldr	r1, [r7, #0]
 800bd66:	4610      	mov	r0, r2
 800bd68:	4798      	blx	r3
}
 800bd6a:	bf00      	nop
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b082      	sub	sp, #8
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d009      	beq.n	800bd9a <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	691a      	ldr	r2, [r3, #16]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	3320      	adds	r3, #32
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	78f9      	ldrb	r1, [r7, #3]
 800bd96:	4610      	mov	r0, r2
 800bd98:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	695b      	ldr	r3, [r3, #20]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d009      	beq.n	800bdb6 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	695a      	ldr	r2, [r3, #20]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	695b      	ldr	r3, [r3, #20]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	3320      	adds	r3, #32
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	78f9      	ldrb	r1, [r7, #3]
 800bdb2:	4610      	mov	r0, r2
 800bdb4:	4798      	blx	r3
}
 800bdb6:	bf00      	nop
 800bdb8:	3708      	adds	r7, #8
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800bdbe:	b580      	push	{r7, lr}
 800bdc0:	b082      	sub	sp, #8
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	691b      	ldr	r3, [r3, #16]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d008      	beq.n	800bde0 <_ZN19CompositeTestOutput5colorEv+0x22>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	691a      	ldr	r2, [r3, #16]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	691b      	ldr	r3, [r3, #16]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	3324      	adds	r3, #36	; 0x24
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4610      	mov	r0, r2
 800bdde:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	695b      	ldr	r3, [r3, #20]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d008      	beq.n	800bdfa <_ZN19CompositeTestOutput5colorEv+0x3c>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	695a      	ldr	r2, [r3, #20]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	695b      	ldr	r3, [r3, #20]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	3324      	adds	r3, #36	; 0x24
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4610      	mov	r0, r2
 800bdf8:	4798      	blx	r3
}
 800bdfa:	bf00      	nop
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b082      	sub	sp, #8
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	691b      	ldr	r3, [r3, #16]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d009      	beq.n	800be28 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	691a      	ldr	r2, [r3, #16]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	691b      	ldr	r3, [r3, #16]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	3328      	adds	r3, #40	; 0x28
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	6839      	ldr	r1, [r7, #0]
 800be24:	4610      	mov	r0, r2
 800be26:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	695b      	ldr	r3, [r3, #20]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d009      	beq.n	800be44 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	695a      	ldr	r2, [r3, #20]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	695b      	ldr	r3, [r3, #20]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	3328      	adds	r3, #40	; 0x28
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	4610      	mov	r0, r2
 800be42:	4798      	blx	r3
}
 800be44:	bf00      	nop
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d009      	beq.n	800be72 <_ZN19CompositeTestOutput5printEPKc+0x26>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	691a      	ldr	r2, [r3, #16]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	691b      	ldr	r3, [r3, #16]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	332c      	adds	r3, #44	; 0x2c
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	6839      	ldr	r1, [r7, #0]
 800be6e:	4610      	mov	r0, r2
 800be70:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	695b      	ldr	r3, [r3, #20]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d009      	beq.n	800be8e <_ZN19CompositeTestOutput5printEPKc+0x42>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	695a      	ldr	r2, [r3, #20]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	695b      	ldr	r3, [r3, #20]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	332c      	adds	r3, #44	; 0x2c
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	6839      	ldr	r1, [r7, #0]
 800be8a:	4610      	mov	r0, r2
 800be8c:	4798      	blx	r3
}
 800be8e:	bf00      	nop
 800be90:	3708      	adds	r7, #8
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b082      	sub	sp, #8
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
 800be9e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	691b      	ldr	r3, [r3, #16]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d009      	beq.n	800bebc <_ZN19CompositeTestOutput5printEl+0x26>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	691a      	ldr	r2, [r3, #16]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	3330      	adds	r3, #48	; 0x30
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	4610      	mov	r0, r2
 800beba:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	695b      	ldr	r3, [r3, #20]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d009      	beq.n	800bed8 <_ZN19CompositeTestOutput5printEl+0x42>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	695a      	ldr	r2, [r3, #20]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	695b      	ldr	r3, [r3, #20]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	3330      	adds	r3, #48	; 0x30
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	4610      	mov	r0, r2
 800bed6:	4798      	blx	r3
}
 800bed8:	bf00      	nop
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	691b      	ldr	r3, [r3, #16]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d009      	beq.n	800bf06 <_ZN19CompositeTestOutput5printEj+0x26>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	691a      	ldr	r2, [r3, #16]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	3334      	adds	r3, #52	; 0x34
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	6839      	ldr	r1, [r7, #0]
 800bf02:	4610      	mov	r0, r2
 800bf04:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	695b      	ldr	r3, [r3, #20]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d009      	beq.n	800bf22 <_ZN19CompositeTestOutput5printEj+0x42>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	695a      	ldr	r2, [r3, #20]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	695b      	ldr	r3, [r3, #20]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	3334      	adds	r3, #52	; 0x34
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	6839      	ldr	r1, [r7, #0]
 800bf1e:	4610      	mov	r0, r2
 800bf20:	4798      	blx	r3
}
 800bf22:	bf00      	nop
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b084      	sub	sp, #16
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	60f8      	str	r0, [r7, #12]
 800bf32:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d00a      	beq.n	800bf54 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	691a      	ldr	r2, [r3, #16]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	691b      	ldr	r3, [r3, #16]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	3338      	adds	r3, #56	; 0x38
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	ed97 0b00 	vldr	d0, [r7]
 800bf50:	4610      	mov	r0, r2
 800bf52:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	695b      	ldr	r3, [r3, #20]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00a      	beq.n	800bf72 <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	695a      	ldr	r2, [r3, #20]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	695b      	ldr	r3, [r3, #20]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	3338      	adds	r3, #56	; 0x38
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	ed97 0b00 	vldr	d0, [r7]
 800bf6e:	4610      	mov	r0, r2
 800bf70:	4798      	blx	r3
}
 800bf72:	bf00      	nop
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b082      	sub	sp, #8
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
 800bf82:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	691b      	ldr	r3, [r3, #16]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d009      	beq.n	800bfa0 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	691a      	ldr	r2, [r3, #16]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	691b      	ldr	r3, [r3, #16]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	333c      	adds	r3, #60	; 0x3c
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	6839      	ldr	r1, [r7, #0]
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	695b      	ldr	r3, [r3, #20]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d009      	beq.n	800bfbc <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	695a      	ldr	r2, [r3, #20]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	695b      	ldr	r3, [r3, #20]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	333c      	adds	r3, #60	; 0x3c
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	4610      	mov	r0, r2
 800bfba:	4798      	blx	r3
}
 800bfbc:	bf00      	nop
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d009      	beq.n	800bfea <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	691a      	ldr	r2, [r3, #16]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	3344      	adds	r3, #68	; 0x44
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	6839      	ldr	r1, [r7, #0]
 800bfe6:	4610      	mov	r0, r2
 800bfe8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	695b      	ldr	r3, [r3, #20]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d009      	beq.n	800c006 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	695a      	ldr	r2, [r3, #20]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	695b      	ldr	r3, [r3, #20]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	3344      	adds	r3, #68	; 0x44
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	6839      	ldr	r1, [r7, #0]
 800c002:	4610      	mov	r0, r2
 800c004:	4798      	blx	r3
}
 800c006:	bf00      	nop
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b082      	sub	sp, #8
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d008      	beq.n	800c030 <_ZN19CompositeTestOutput5flushEv+0x22>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	691a      	ldr	r2, [r3, #16]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	691b      	ldr	r3, [r3, #16]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	334c      	adds	r3, #76	; 0x4c
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4610      	mov	r0, r2
 800c02e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	695b      	ldr	r3, [r3, #20]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d008      	beq.n	800c04a <_ZN19CompositeTestOutput5flushEv+0x3c>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	695a      	ldr	r2, [r3, #20]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	695b      	ldr	r3, [r3, #20]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	334c      	adds	r3, #76	; 0x4c
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4610      	mov	r0, r2
 800c048:	4798      	blx	r3
}
 800c04a:	bf00      	nop
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800c052:	b480      	push	{r7}
 800c054:	b085      	sub	sp, #20
 800c056:	af00      	add	r7, sp, #0
 800c058:	60f8      	str	r0, [r7, #12]
 800c05a:	60b9      	str	r1, [r7, #8]
 800c05c:	607a      	str	r2, [r7, #4]
    }
 800c05e:	bf00      	nop
 800c060:	3714      	adds	r7, #20
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800c06a:	b480      	push	{r7}
 800c06c:	b085      	sub	sp, #20
 800c06e:	af00      	add	r7, sp, #0
 800c070:	60f8      	str	r0, [r7, #12]
 800c072:	60b9      	str	r1, [r7, #8]
 800c074:	607a      	str	r2, [r7, #4]
    }
 800c076:	bf00      	nop
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
	...

0800c084 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800c08e:	4a0b      	ldr	r2, [pc, #44]	; (800c0bc <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	f000 f9ce 	bl	800c434 <_ZN14NullTestPlugin8instanceEv>
 800c098:	4602      	mov	r2, r0
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	605a      	str	r2, [r3, #4]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	3308      	adds	r3, #8
 800c0a2:	6839      	ldr	r1, [r7, #0]
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fb fc54 	bl	8007952 <_ZN12SimpleStringC1ERKS_>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	741a      	strb	r2, [r3, #16]
{
}
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	08018d2c 	.word	0x08018d2c

0800c0c0 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800c0ca:	4a0a      	ldr	r2, [pc, #40]	; (800c0f4 <_ZN10TestPluginC1EPS_+0x34>)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	683a      	ldr	r2, [r7, #0]
 800c0d4:	605a      	str	r2, [r3, #4]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	3308      	adds	r3, #8
 800c0da:	4907      	ldr	r1, [pc, #28]	; (800c0f8 <_ZN10TestPluginC1EPS_+0x38>)
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fb fbe4 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	741a      	strb	r2, [r3, #16]
{
}
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3708      	adds	r7, #8
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	08018d2c 	.word	0x08018d2c
 800c0f8:	08016e44 	.word	0x08016e44

0800c0fc <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	4a06      	ldr	r2, [pc, #24]	; (800c120 <_ZN10TestPluginD1Ev+0x24>)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	601a      	str	r2, [r3, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	3308      	adds	r3, #8
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fb ff83 	bl	800801a <_ZN12SimpleStringD1Ev>
{
}
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	4618      	mov	r0, r3
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	08018d2c 	.word	0x08018d2c

0800c124 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
}
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f7ff ffe5 	bl	800c0fc <_ZN10TestPluginD1Ev>
 800c132:	2114      	movs	r1, #20
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f7fa fce3 	bl	8006b00 <_ZdlPvj>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4618      	mov	r0, r3
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	683a      	ldr	r2, [r7, #0]
 800c152:	605a      	str	r2, [r3, #4]
    return this;
 800c154:	687b      	ldr	r3, [r7, #4]
}
 800c156:	4618      	mov	r0, r3
 800c158:	370c      	adds	r7, #12
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr

0800c162 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b084      	sub	sp, #16
 800c166:	af00      	add	r7, sp, #0
 800c168:	60f8      	str	r0, [r7, #12]
 800c16a:	60b9      	str	r1, [r7, #8]
 800c16c:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	7c1b      	ldrb	r3, [r3, #16]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d007      	beq.n	800c186 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	3308      	adds	r3, #8
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	68b9      	ldr	r1, [r7, #8]
 800c182:	68f8      	ldr	r0, [r7, #12]
 800c184:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6858      	ldr	r0, [r3, #4]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3314      	adds	r3, #20
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	68b9      	ldr	r1, [r7, #8]
 800c198:	4798      	blx	r3
}
 800c19a:	bf00      	nop
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}

0800c1a2 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b084      	sub	sp, #16
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	60f8      	str	r0, [r7, #12]
 800c1aa:	60b9      	str	r1, [r7, #8]
 800c1ac:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	6858      	ldr	r0, [r3, #4]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	3318      	adds	r3, #24
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	7c1b      	ldrb	r3, [r3, #16]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d007      	beq.n	800c1da <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	330c      	adds	r3, #12
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	68b9      	ldr	r1, [r7, #8]
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	4798      	blx	r3
}
 800c1da:	bf00      	nop
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 800c1e2:	b590      	push	{r4, r7, lr}
 800c1e4:	b085      	sub	sp, #20
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	60f8      	str	r0, [r7, #12]
 800c1ea:	60b9      	str	r1, [r7, #8]
 800c1ec:	607a      	str	r2, [r7, #4]
 800c1ee:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	331c      	adds	r3, #28
 800c1f6:	681c      	ldr	r4, [r3, #0]
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	68b9      	ldr	r1, [r7, #8]
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	47a0      	blx	r4
 800c202:	4603      	mov	r3, r0
}
 800c204:	4618      	mov	r0, r3
 800c206:	3714      	adds	r7, #20
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd90      	pop	{r4, r7, pc}

0800c20c <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 800c20c:	b590      	push	{r4, r7, lr}
 800c20e:	b085      	sub	sp, #20
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
 800c218:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	3310      	adds	r3, #16
 800c220:	681c      	ldr	r4, [r3, #0]
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	68b9      	ldr	r1, [r7, #8]
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	47a0      	blx	r4
 800c22c:	4603      	mov	r3, r0
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d001      	beq.n	800c236 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 800c232:	2301      	movs	r3, #1
 800c234:	e011      	b.n	800c25a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00c      	beq.n	800c258 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6858      	ldr	r0, [r3, #4]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	331c      	adds	r3, #28
 800c24a:	681c      	ldr	r4, [r3, #0]
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	68b9      	ldr	r1, [r7, #8]
 800c252:	47a0      	blx	r4
 800c254:	4603      	mov	r3, r0
 800c256:	e000      	b.n	800c25a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 800c258:	2300      	movs	r3, #0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3714      	adds	r7, #20
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd90      	pop	{r4, r7, pc}

0800c262 <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 800c262:	b480      	push	{r7}
 800c264:	b083      	sub	sp, #12
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
    return name_;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	3308      	adds	r3, #8
}
 800c26e:	4618      	mov	r0, r3
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b082      	sub	sp, #8
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	3308      	adds	r3, #8
 800c288:	4619      	mov	r1, r3
 800c28a:	6838      	ldr	r0, [r7, #0]
 800c28c:	f7fb fed1 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800c290:	4603      	mov	r3, r0
 800c292:	2b00      	cmp	r3, #0
 800c294:	d001      	beq.n	800c29a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	e00d      	b.n	800c2b6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d007      	beq.n	800c2b2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7ff ffe6 	bl	800c27a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	e001      	b.n	800c2b6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	685b      	ldr	r3, [r3, #4]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3708      	adds	r7, #8
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 800c2be:	b480      	push	{r7}
 800c2c0:	b083      	sub	sp, #12
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
    return next_;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	685b      	ldr	r3, [r3, #4]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	370c      	adds	r7, #12
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr

0800c2d6 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b084      	sub	sp, #16
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
 800c2de:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00e      	beq.n	800c30a <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7ff ffb6 	bl	800c262 <_ZN10TestPlugin7getNameEv>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fb fe99 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800c300:	4603      	mov	r3, r0
 800c302:	2b00      	cmp	r3, #0
 800c304:	d001      	beq.n	800c30a <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800c306:	2301      	movs	r3, #1
 800c308:	e000      	b.n	800c30c <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 800c30a:	2300      	movs	r3, #0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d007      	beq.n	800c320 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	685a      	ldr	r2, [r3, #4]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	605a      	str	r2, [r3, #4]
    }
    return removed;
 800c320:	68fb      	ldr	r3, [r7, #12]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 800c32a:	b480      	push	{r7}
 800c32c:	b083      	sub	sp, #12
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	741a      	strb	r2, [r3, #16]
}
 800c338:	bf00      	nop
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2201      	movs	r2, #1
 800c350:	741a      	strb	r2, [r3, #16]
}
 800c352:	bf00      	nop
 800c354:	370c      	adds	r7, #12
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 800c35e:	b480      	push	{r7}
 800c360:	b083      	sub	sp, #12
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
    return enabled_;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	7c1b      	ldrb	r3, [r3, #16]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	370c      	adds	r7, #12
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
	...

0800c378 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6839      	ldr	r1, [r7, #0]
 800c386:	4618      	mov	r0, r3
 800c388:	f7ff fe7c 	bl	800c084 <_ZN10TestPluginC1ERK12SimpleString>
 800c38c:	4a05      	ldr	r2, [pc, #20]	; (800c3a4 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 800c392:	4b05      	ldr	r3, [pc, #20]	; (800c3a8 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 800c394:	2200      	movs	r2, #0
 800c396:	601a      	str	r2, [r3, #0]
}
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4618      	mov	r0, r3
 800c39c:	3708      	adds	r7, #8
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	08018ce8 	.word	0x08018ce8
 800c3a8:	20000618 	.word	0x20000618

0800c3ac <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b087      	sub	sp, #28
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800c3b8:	4b0e      	ldr	r3, [pc, #56]	; (800c3f4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	617b      	str	r3, [r7, #20]
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	db0d      	blt.n	800c3e2 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 800c3c6:	4a0c      	ldr	r2, [pc, #48]	; (800c3f8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c3ce:	490a      	ldr	r1, [pc, #40]	; (800c3f8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	00db      	lsls	r3, r3, #3
 800c3d4:	440b      	add	r3, r1
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	3b01      	subs	r3, #1
 800c3de:	617b      	str	r3, [r7, #20]
 800c3e0:	e7ee      	b.n	800c3c0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 800c3e2:	4b04      	ldr	r3, [pc, #16]	; (800c3f4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	601a      	str	r2, [r3, #0]
}
 800c3e8:	bf00      	nop
 800c3ea:	371c      	adds	r7, #28
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr
 800c3f4:	20000618 	.word	0x20000618
 800c3f8:	2000061c 	.word	0x2000061c

0800c3fc <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2100      	movs	r1, #0
 800c408:	4618      	mov	r0, r3
 800c40a:	f7ff fe59 	bl	800c0c0 <_ZN10TestPluginC1EPS_>
 800c40e:	4a04      	ldr	r2, [pc, #16]	; (800c420 <_ZN14NullTestPluginC1Ev+0x24>)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	601a      	str	r2, [r3, #0]
{
}
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4618      	mov	r0, r3
 800c418:	3708      	adds	r7, #8
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	08018ca4 	.word	0x08018ca4

0800c424 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 800c424:	b580      	push	{r7, lr}
 800c426:	af00      	add	r7, sp, #0
 800c428:	4801      	ldr	r0, [pc, #4]	; (800c430 <__tcf_0+0xc>)
 800c42a:	f000 f849 	bl	800c4c0 <_ZN14NullTestPluginD1Ev>
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	2000071c 	.word	0x2000071c

0800c434 <_ZN14NullTestPlugin8instanceEv>:
{
 800c434:	b580      	push	{r7, lr}
 800c436:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 800c438:	4b12      	ldr	r3, [pc, #72]	; (800c484 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	f3bf 8f5b 	dmb	ish
 800c440:	b2db      	uxtb	r3, r3
 800c442:	f003 0301 	and.w	r3, r3, #1
 800c446:	2b00      	cmp	r3, #0
 800c448:	bf0c      	ite	eq
 800c44a:	2301      	moveq	r3, #1
 800c44c:	2300      	movne	r3, #0
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	2b00      	cmp	r3, #0
 800c452:	d013      	beq.n	800c47c <_ZN14NullTestPlugin8instanceEv+0x48>
 800c454:	480b      	ldr	r0, [pc, #44]	; (800c484 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800c456:	f005 febf 	bl	80121d8 <__cxa_guard_acquire>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	bf14      	ite	ne
 800c460:	2301      	movne	r3, #1
 800c462:	2300      	moveq	r3, #0
 800c464:	b2db      	uxtb	r3, r3
 800c466:	2b00      	cmp	r3, #0
 800c468:	d008      	beq.n	800c47c <_ZN14NullTestPlugin8instanceEv+0x48>
 800c46a:	4807      	ldr	r0, [pc, #28]	; (800c488 <_ZN14NullTestPlugin8instanceEv+0x54>)
 800c46c:	f7ff ffc6 	bl	800c3fc <_ZN14NullTestPluginC1Ev>
 800c470:	4804      	ldr	r0, [pc, #16]	; (800c484 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800c472:	f005 febd 	bl	80121f0 <__cxa_guard_release>
 800c476:	4805      	ldr	r0, [pc, #20]	; (800c48c <_ZN14NullTestPlugin8instanceEv+0x58>)
 800c478:	f005 fee1 	bl	801223e <atexit>
    return &_instance;
 800c47c:	4b02      	ldr	r3, [pc, #8]	; (800c488 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 800c47e:	4618      	mov	r0, r3
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	20000730 	.word	0x20000730
 800c488:	2000071c 	.word	0x2000071c
 800c48c:	0800c425 	.word	0x0800c425

0800c490 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 800c490:	b480      	push	{r7}
 800c492:	b085      	sub	sp, #20
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]
}
 800c49c:	bf00      	nop
 800c49e:	3714      	adds	r7, #20
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
}
 800c4b4:	bf00      	nop
 800c4b6:	3714      	adds	r7, #20
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	4a05      	ldr	r2, [pc, #20]	; (800c4e0 <_ZN14NullTestPluginD1Ev+0x20>)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	601a      	str	r2, [r3, #0]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7ff fe13 	bl	800c0fc <_ZN10TestPluginD1Ev>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3708      	adds	r7, #8
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	08018ca4 	.word	0x08018ca4

0800c4e4 <_ZN14NullTestPluginD0Ev>:
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f7ff ffe7 	bl	800c4c0 <_ZN14NullTestPluginD1Ev>
 800c4f2:	2114      	movs	r1, #20
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f7fa fb03 	bl	8006b00 <_ZdlPvj>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 800c50c:	4a0f      	ldr	r2, [pc, #60]	; (800c54c <_ZN12TestRegistryC1Ev+0x48>)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	601a      	str	r2, [r3, #0]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	605a      	str	r2, [r3, #4]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	609a      	str	r2, [r3, #8]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	60da      	str	r2, [r3, #12]
 800c524:	f7ff ff86 	bl	800c434 <_ZN14NullTestPlugin8instanceEv>
 800c528:	4602      	mov	r2, r0
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	611a      	str	r2, [r3, #16]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	751a      	strb	r2, [r3, #20]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2200      	movs	r2, #0
 800c538:	619a      	str	r2, [r3, #24]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2200      	movs	r2, #0
 800c53e:	771a      	strb	r2, [r3, #28]
{
}
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4618      	mov	r0, r3
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	08018d70 	.word	0x08018d70

0800c550 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 800c550:	b480      	push	{r7}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	4a04      	ldr	r2, [pc, #16]	; (800c56c <_ZN12TestRegistryD1Ev+0x1c>)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	601a      	str	r2, [r3, #0]
{
}
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4618      	mov	r0, r3
 800c562:	370c      	adds	r7, #12
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr
 800c56c:	08018d70 	.word	0x08018d70

0800c570 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
}
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7ff ffe9 	bl	800c550 <_ZN12TestRegistryD1Ev>
 800c57e:	2120      	movs	r1, #32
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f7fa fabd 	bl	8006b00 <_ZdlPvj>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4618      	mov	r0, r3
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	3308      	adds	r3, #8
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	6852      	ldr	r2, [r2, #4]
 800c5a6:	4611      	mov	r1, r2
 800c5a8:	6838      	ldr	r0, [r7, #0]
 800c5aa:	4798      	blx	r3
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	605a      	str	r2, [r3, #4]
}
 800c5b2:	bf00      	nop
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b084      	sub	sp, #16
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	3308      	adds	r3, #8
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	6838      	ldr	r0, [r7, #0]
 800c5d2:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	60bb      	str	r3, [r7, #8]
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d05c      	beq.n	800c69a <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	7d1b      	ldrb	r3, [r3, #20]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d005      	beq.n	800c5f4 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3380      	adds	r3, #128	; 0x80
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	68b8      	ldr	r0, [r7, #8]
 800c5f2:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	7f1b      	ldrb	r3, [r3, #28]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d005      	beq.n	800c608 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	3384      	adds	r3, #132	; 0x84
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	68b8      	ldr	r0, [r7, #8]
 800c606:	4798      	blx	r3

        if (groupStart) {
 800c608:	7bfb      	ldrb	r3, [r7, #15]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d008      	beq.n	800c620 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	3310      	adds	r3, #16
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68b9      	ldr	r1, [r7, #8]
 800c618:	6838      	ldr	r0, [r7, #0]
 800c61a:	4798      	blx	r3
            groupStart = false;
 800c61c:	2300      	movs	r3, #0
 800c61e:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	3320      	adds	r3, #32
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	6838      	ldr	r0, [r7, #0]
 800c62a:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 800c62c:	683a      	ldr	r2, [r7, #0]
 800c62e:	68b9      	ldr	r1, [r7, #8]
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 fb79 	bl	800cd28 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d016      	beq.n	800c66a <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	3318      	adds	r3, #24
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	68b9      	ldr	r1, [r7, #8]
 800c646:	6838      	ldr	r0, [r7, #0]
 800c648:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	3390      	adds	r3, #144	; 0x90
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	6911      	ldr	r1, [r2, #16]
 800c656:	683a      	ldr	r2, [r7, #0]
 800c658:	68b8      	ldr	r0, [r7, #8]
 800c65a:	4798      	blx	r3
            result.currentTestEnded(test);
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	331c      	adds	r3, #28
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	68b9      	ldr	r1, [r7, #8]
 800c666:	6838      	ldr	r0, [r7, #0]
 800c668:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 800c66a:	68b9      	ldr	r1, [r7, #8]
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 fa5b 	bl	800cb28 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d008      	beq.n	800c68a <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 800c678:	2301      	movs	r3, #1
 800c67a:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	3314      	adds	r3, #20
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	68b9      	ldr	r1, [r7, #8]
 800c686:	6838      	ldr	r0, [r7, #0]
 800c688:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	330c      	adds	r3, #12
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	68b8      	ldr	r0, [r7, #8]
 800c694:	4798      	blx	r3
 800c696:	60b8      	str	r0, [r7, #8]
 800c698:	e79f      	b.n	800c5da <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	330c      	adds	r3, #12
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	6838      	ldr	r0, [r7, #0]
 800c6a4:	4798      	blx	r3
    currentRepetition_++;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	699b      	ldr	r3, [r3, #24]
 800c6aa:	1c5a      	adds	r2, r3, #1
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	619a      	str	r2, [r3, #24]
}
 800c6b0:	bf00      	nop
 800c6b2:	3710      	adds	r7, #16
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 800c6b8:	b590      	push	{r4, r7, lr}
 800c6ba:	b08f      	sub	sp, #60	; 0x3c
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 800c6c2:	f107 0314 	add.w	r3, r7, #20
 800c6c6:	4953      	ldr	r1, [pc, #332]	; (800c814 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7fb f8ee 	bl	80078aa <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	637b      	str	r3, [r7, #52]	; 0x34
 800c6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d04d      	beq.n	800c776 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 800c6da:	f107 030c 	add.w	r3, r7, #12
 800c6de:	494d      	ldr	r1, [pc, #308]	; (800c814 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7fb f8e2 	bl	80078aa <_ZN12SimpleStringC1EPKc>
        gname += "#";
 800c6e6:	f107 030c 	add.w	r3, r7, #12
 800c6ea:	494b      	ldr	r1, [pc, #300]	; (800c818 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7fb fd23 	bl	8008138 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 800c6f2:	f107 031c 	add.w	r3, r7, #28
 800c6f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f001 f9d2 	bl	800daa2 <_ZNK10UtestShell8getGroupEv>
 800c6fe:	f107 021c 	add.w	r2, r7, #28
 800c702:	f107 030c 	add.w	r3, r7, #12
 800c706:	4611      	mov	r1, r2
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fb fd03 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800c70e:	f107 031c 	add.w	r3, r7, #28
 800c712:	4618      	mov	r0, r3
 800c714:	f7fb fc81 	bl	800801a <_ZN12SimpleStringD1Ev>
        gname += "#";
 800c718:	f107 030c 	add.w	r3, r7, #12
 800c71c:	493e      	ldr	r1, [pc, #248]	; (800c818 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fb fd0a 	bl	8008138 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 800c724:	f107 020c 	add.w	r2, r7, #12
 800c728:	f107 0314 	add.w	r3, r7, #20
 800c72c:	4611      	mov	r1, r2
 800c72e:	4618      	mov	r0, r3
 800c730:	f7fb f939 	bl	80079a6 <_ZNK12SimpleString8containsERKS_>
 800c734:	4603      	mov	r3, r0
 800c736:	f083 0301 	eor.w	r3, r3, #1
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00d      	beq.n	800c75c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 800c740:	f107 020c 	add.w	r2, r7, #12
 800c744:	f107 0314 	add.w	r3, r7, #20
 800c748:	4611      	mov	r1, r2
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fb fce2 	bl	8008114 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 800c750:	f107 0314 	add.w	r3, r7, #20
 800c754:	4931      	ldr	r1, [pc, #196]	; (800c81c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800c756:	4618      	mov	r0, r3
 800c758:	f7fb fcee 	bl	8008138 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 800c75c:	f107 030c 	add.w	r3, r7, #12
 800c760:	4618      	mov	r0, r3
 800c762:	f7fb fc5a 	bl	800801a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	330c      	adds	r3, #12
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c770:	4798      	blx	r3
 800c772:	6378      	str	r0, [r7, #52]	; 0x34
 800c774:	e7ae      	b.n	800c6d4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 800c776:	f107 0314 	add.w	r3, r7, #20
 800c77a:	4a26      	ldr	r2, [pc, #152]	; (800c814 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800c77c:	4926      	ldr	r1, [pc, #152]	; (800c818 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800c77e:	4618      	mov	r0, r3
 800c780:	f7fb faa8 	bl	8007cd4 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 800c784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c788:	4924      	ldr	r1, [pc, #144]	; (800c81c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7fb f88d 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800c790:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c794:	f107 0314 	add.w	r3, r7, #20
 800c798:	4611      	mov	r1, r2
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7fb f982 	bl	8007aa4 <_ZNK12SimpleString8endsWithERKS_>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	461c      	mov	r4, r3
 800c7a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7fb fc36 	bl	800801a <_ZN12SimpleStringD1Ev>
 800c7ae:	2c00      	cmp	r4, #0
 800c7b0:	d01a      	beq.n	800c7e8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 800c7b2:	f107 0314 	add.w	r3, r7, #20
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7fb fc0e 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800c7c4:	f107 0114 	add.w	r1, r7, #20
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f7fb fd2f 	bl	800822c <_ZNK12SimpleString9subStringEjj>
 800c7ce:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c7d2:	f107 0314 	add.w	r3, r7, #20
 800c7d6:	4611      	mov	r1, r2
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7fb f8d2 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 800c7de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fb fc19 	bl	800801a <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	3338      	adds	r3, #56	; 0x38
 800c7ee:	681c      	ldr	r4, [r3, #0]
 800c7f0:	f107 0314 	add.w	r3, r7, #20
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7fb fbe3 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	6838      	ldr	r0, [r7, #0]
 800c800:	47a0      	blx	r4
    SimpleString groupList;
 800c802:	f107 0314 	add.w	r3, r7, #20
 800c806:	4618      	mov	r0, r3
 800c808:	f7fb fc07 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800c80c:	bf00      	nop
 800c80e:	373c      	adds	r7, #60	; 0x3c
 800c810:	46bd      	mov	sp, r7
 800c812:	bd90      	pop	{r4, r7, pc}
 800c814:	08016e94 	.word	0x08016e94
 800c818:	08016e98 	.word	0x08016e98
 800c81c:	08016e9c 	.word	0x08016e9c

0800c820 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 800c820:	b590      	push	{r4, r7, lr}
 800c822:	b091      	sub	sp, #68	; 0x44
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 800c82a:	f107 0314 	add.w	r3, r7, #20
 800c82e:	4964      	ldr	r1, [pc, #400]	; (800c9c0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800c830:	4618      	mov	r0, r3
 800c832:	f7fb f83a 	bl	80078aa <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d06e      	beq.n	800c920 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 800c842:	683a      	ldr	r2, [r7, #0]
 800c844:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 fa6e 	bl	800cd28 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d05e      	beq.n	800c910 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 800c852:	f107 030c 	add.w	r3, r7, #12
 800c856:	495a      	ldr	r1, [pc, #360]	; (800c9c0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fb f826 	bl	80078aa <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 800c85e:	f107 030c 	add.w	r3, r7, #12
 800c862:	4958      	ldr	r1, [pc, #352]	; (800c9c4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800c864:	4618      	mov	r0, r3
 800c866:	f7fb fc67 	bl	8008138 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 800c86a:	f107 031c 	add.w	r3, r7, #28
 800c86e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c870:	4618      	mov	r0, r3
 800c872:	f001 f916 	bl	800daa2 <_ZNK10UtestShell8getGroupEv>
 800c876:	f107 021c 	add.w	r2, r7, #28
 800c87a:	f107 030c 	add.w	r3, r7, #12
 800c87e:	4611      	mov	r1, r2
 800c880:	4618      	mov	r0, r3
 800c882:	f7fb fc47 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800c886:	f107 031c 	add.w	r3, r7, #28
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fb fbc5 	bl	800801a <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 800c890:	f107 030c 	add.w	r3, r7, #12
 800c894:	494c      	ldr	r1, [pc, #304]	; (800c9c8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 800c896:	4618      	mov	r0, r3
 800c898:	f7fb fc4e 	bl	8008138 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 800c89c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f001 f8ee 	bl	800da84 <_ZNK10UtestShell7getNameEv>
 800c8a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c8ac:	f107 030c 	add.w	r3, r7, #12
 800c8b0:	4611      	mov	r1, r2
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7fb fc2e 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800c8b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7fb fbac 	bl	800801a <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 800c8c2:	f107 030c 	add.w	r3, r7, #12
 800c8c6:	493f      	ldr	r1, [pc, #252]	; (800c9c4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fb fc35 	bl	8008138 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 800c8ce:	f107 020c 	add.w	r2, r7, #12
 800c8d2:	f107 0314 	add.w	r3, r7, #20
 800c8d6:	4611      	mov	r1, r2
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7fb f864 	bl	80079a6 <_ZNK12SimpleString8containsERKS_>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	f083 0301 	eor.w	r3, r3, #1
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d00d      	beq.n	800c906 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 800c8ea:	f107 020c 	add.w	r2, r7, #12
 800c8ee:	f107 0314 	add.w	r3, r7, #20
 800c8f2:	4611      	mov	r1, r2
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fb fc0d 	bl	8008114 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 800c8fa:	f107 0314 	add.w	r3, r7, #20
 800c8fe:	4933      	ldr	r1, [pc, #204]	; (800c9cc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800c900:	4618      	mov	r0, r3
 800c902:	f7fb fc19 	bl	8008138 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 800c906:	f107 030c 	add.w	r3, r7, #12
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fb fb85 	bl	800801a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	330c      	adds	r3, #12
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c91a:	4798      	blx	r3
 800c91c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c91e:	e78d      	b.n	800c83c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 800c920:	f107 0314 	add.w	r3, r7, #20
 800c924:	4a26      	ldr	r2, [pc, #152]	; (800c9c0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800c926:	4927      	ldr	r1, [pc, #156]	; (800c9c4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800c928:	4618      	mov	r0, r3
 800c92a:	f7fb f9d3 	bl	8007cd4 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 800c92e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c932:	4926      	ldr	r1, [pc, #152]	; (800c9cc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800c934:	4618      	mov	r0, r3
 800c936:	f7fa ffb8 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800c93a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c93e:	f107 0314 	add.w	r3, r7, #20
 800c942:	4611      	mov	r1, r2
 800c944:	4618      	mov	r0, r3
 800c946:	f7fb f8ad 	bl	8007aa4 <_ZNK12SimpleString8endsWithERKS_>
 800c94a:	4603      	mov	r3, r0
 800c94c:	461c      	mov	r4, r3
 800c94e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c952:	4618      	mov	r0, r3
 800c954:	f7fb fb61 	bl	800801a <_ZN12SimpleStringD1Ev>
 800c958:	2c00      	cmp	r4, #0
 800c95a:	d01a      	beq.n	800c992 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 800c95c:	f107 0314 	add.w	r3, r7, #20
 800c960:	4618      	mov	r0, r3
 800c962:	f7fb fb39 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 800c966:	4603      	mov	r3, r0
 800c968:	3b01      	subs	r3, #1
 800c96a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c96e:	f107 0114 	add.w	r1, r7, #20
 800c972:	2200      	movs	r2, #0
 800c974:	f7fb fc5a 	bl	800822c <_ZNK12SimpleString9subStringEjj>
 800c978:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c97c:	f107 0314 	add.w	r3, r7, #20
 800c980:	4611      	mov	r1, r2
 800c982:	4618      	mov	r0, r3
 800c984:	f7fa fffd 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 800c988:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7fb fb44 	bl	800801a <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	3338      	adds	r3, #56	; 0x38
 800c998:	681c      	ldr	r4, [r3, #0]
 800c99a:	f107 0314 	add.w	r3, r7, #20
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7fb fb0e 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	6838      	ldr	r0, [r7, #0]
 800c9aa:	47a0      	blx	r4
    SimpleString groupAndNameList;
 800c9ac:	f107 0314 	add.w	r3, r7, #20
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fb fb32 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800c9b6:	bf00      	nop
 800c9b8:	3744      	adds	r7, #68	; 0x44
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd90      	pop	{r4, r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	08016e94 	.word	0x08016e94
 800c9c4:	08016e98 	.word	0x08016e98
 800c9c8:	08016ea0 	.word	0x08016ea0
 800c9cc:	08016e9c 	.word	0x08016e9c

0800c9d0 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 800c9d0:	b590      	push	{r4, r7, lr}
 800c9d2:	b091      	sub	sp, #68	; 0x44
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 800c9da:	f107 0314 	add.w	r3, r7, #20
 800c9de:	494f      	ldr	r1, [pc, #316]	; (800cb1c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7fa ff62 	bl	80078aa <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d07d      	beq.n	800caee <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 800c9f2:	f107 030c 	add.w	r3, r7, #12
 800c9f6:	4949      	ldr	r1, [pc, #292]	; (800cb1c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fa ff56 	bl	80078aa <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 800c9fe:	f107 031c 	add.w	r3, r7, #28
 800ca02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ca04:	4618      	mov	r0, r3
 800ca06:	f001 f84c 	bl	800daa2 <_ZNK10UtestShell8getGroupEv>
 800ca0a:	f107 021c 	add.w	r2, r7, #28
 800ca0e:	f107 030c 	add.w	r3, r7, #12
 800ca12:	4611      	mov	r1, r2
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7fb fb7d 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800ca1a:	f107 031c 	add.w	r3, r7, #28
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fb fafb 	bl	800801a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800ca24:	f107 030c 	add.w	r3, r7, #12
 800ca28:	493d      	ldr	r1, [pc, #244]	; (800cb20 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fb fb84 	bl	8008138 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 800ca30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ca36:	4618      	mov	r0, r3
 800ca38:	f001 f824 	bl	800da84 <_ZNK10UtestShell7getNameEv>
 800ca3c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ca40:	f107 030c 	add.w	r3, r7, #12
 800ca44:	4611      	mov	r1, r2
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fb fb64 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800ca4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7fb fae2 	bl	800801a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800ca56:	f107 030c 	add.w	r3, r7, #12
 800ca5a:	4931      	ldr	r1, [pc, #196]	; (800cb20 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7fb fb6b 	bl	8008138 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 800ca62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ca66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f001 f8cb 	bl	800dc04 <_ZNK10UtestShell7getFileEv>
 800ca6e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ca72:	f107 030c 	add.w	r3, r7, #12
 800ca76:	4611      	mov	r1, r2
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f7fb fb4b 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800ca7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fb fac9 	bl	800801a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800ca88:	f107 030c 	add.w	r3, r7, #12
 800ca8c:	4924      	ldr	r1, [pc, #144]	; (800cb20 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fb fb52 	bl	8008138 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 800ca94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ca96:	f001 f8c4 	bl	800dc22 <_ZNK10UtestShell13getLineNumberEv>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800caa2:	4920      	ldr	r1, [pc, #128]	; (800cb24 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7fb ff45 	bl	8008934 <_Z16StringFromFormatPKcz>
 800caaa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800caae:	f107 030c 	add.w	r3, r7, #12
 800cab2:	4611      	mov	r1, r2
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7fb fb2d 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800caba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fb faab 	bl	800801a <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 800cac4:	f107 020c 	add.w	r2, r7, #12
 800cac8:	f107 0314 	add.w	r3, r7, #20
 800cacc:	4611      	mov	r1, r2
 800cace:	4618      	mov	r0, r3
 800cad0:	f7fb fb20 	bl	8008114 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 800cad4:	f107 030c 	add.w	r3, r7, #12
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fb fa9e 	bl	800801a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800cade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	330c      	adds	r3, #12
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cae8:	4798      	blx	r3
 800caea:	63f8      	str	r0, [r7, #60]	; 0x3c
 800caec:	e77e      	b.n	800c9ec <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3338      	adds	r3, #56	; 0x38
 800caf4:	681c      	ldr	r4, [r3, #0]
 800caf6:	f107 0314 	add.w	r3, r7, #20
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fb fa60 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800cb00:	4603      	mov	r3, r0
 800cb02:	4619      	mov	r1, r3
 800cb04:	6838      	ldr	r0, [r7, #0]
 800cb06:	47a0      	blx	r4
    SimpleString testLocations;
 800cb08:	f107 0314 	add.w	r3, r7, #20
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7fb fa84 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800cb12:	bf00      	nop
 800cb14:	3744      	adds	r7, #68	; 0x44
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd90      	pop	{r4, r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	08016e94 	.word	0x08016e94
 800cb20:	08016ea0 	.word	0x08016ea0
 800cb24:	08016ea4 	.word	0x08016ea4

0800cb28 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 800cb28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb2a:	b087      	sub	sp, #28
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 800cb32:	2400      	movs	r4, #0
 800cb34:	2500      	movs	r5, #0
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d028      	beq.n	800cb8e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	330c      	adds	r3, #12
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	6838      	ldr	r0, [r7, #0]
 800cb46:	4798      	blx	r3
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d01f      	beq.n	800cb8e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800cb4e:	f107 0308 	add.w	r3, r7, #8
 800cb52:	6839      	ldr	r1, [r7, #0]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f000 ffa4 	bl	800daa2 <_ZNK10UtestShell8getGroupEv>
 800cb5a:	2401      	movs	r4, #1
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	330c      	adds	r3, #12
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	6838      	ldr	r0, [r7, #0]
 800cb66:	4798      	blx	r3
 800cb68:	4602      	mov	r2, r0
 800cb6a:	f107 0310 	add.w	r3, r7, #16
 800cb6e:	4611      	mov	r1, r2
 800cb70:	4618      	mov	r0, r3
 800cb72:	f000 ff96 	bl	800daa2 <_ZNK10UtestShell8getGroupEv>
 800cb76:	2501      	movs	r5, #1
 800cb78:	f107 0210 	add.w	r2, r7, #16
 800cb7c:	f107 0308 	add.w	r3, r7, #8
 800cb80:	4611      	mov	r1, r2
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fb fa9a 	bl	80080bc <_ZneRK12SimpleStringS1_>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d001      	beq.n	800cb92 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 800cb8e:	2601      	movs	r6, #1
 800cb90:	e000      	b.n	800cb94 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 800cb92:	2600      	movs	r6, #0
 800cb94:	2d00      	cmp	r5, #0
 800cb96:	d004      	beq.n	800cba2 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 800cb98:	f107 0310 	add.w	r3, r7, #16
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7fb fa3c 	bl	800801a <_ZN12SimpleStringD1Ev>
 800cba2:	2c00      	cmp	r4, #0
 800cba4:	d004      	beq.n	800cbb0 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 800cba6:	f107 0308 	add.w	r3, r7, #8
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7fb fa35 	bl	800801a <_ZN12SimpleStringD1Ev>
 800cbb0:	4633      	mov	r3, r6
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	371c      	adds	r7, #28
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cbba <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b082      	sub	sp, #8
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d00a      	beq.n	800cbe0 <_ZN12TestRegistry10countTestsEv+0x26>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	685a      	ldr	r2, [r3, #4]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	3310      	adds	r3, #16
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4610      	mov	r0, r2
 800cbda:	4798      	blx	r3
 800cbdc:	4603      	mov	r3, r0
 800cbde:	e000      	b.n	800cbe2 <_ZN12TestRegistry10countTestsEv+0x28>
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3708      	adds	r7, #8
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
	...

0800cbec <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 800cbec:	b580      	push	{r7, lr}
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	4801      	ldr	r0, [pc, #4]	; (800cbf8 <__tcf_0+0xc>)
 800cbf2:	f7ff fcad 	bl	800c550 <_ZN12TestRegistryD1Ev>
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	20000738 	.word	0x20000738

0800cbfc <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 800cc00:	4b15      	ldr	r3, [pc, #84]	; (800cc58 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	f3bf 8f5b 	dmb	ish
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	f003 0301 	and.w	r3, r3, #1
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	bf0c      	ite	eq
 800cc12:	2301      	moveq	r3, #1
 800cc14:	2300      	movne	r3, #0
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d013      	beq.n	800cc44 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800cc1c:	480e      	ldr	r0, [pc, #56]	; (800cc58 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800cc1e:	f005 fadb 	bl	80121d8 <__cxa_guard_acquire>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	bf14      	ite	ne
 800cc28:	2301      	movne	r3, #1
 800cc2a:	2300      	moveq	r3, #0
 800cc2c:	b2db      	uxtb	r3, r3
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d008      	beq.n	800cc44 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800cc32:	480a      	ldr	r0, [pc, #40]	; (800cc5c <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 800cc34:	f7ff fc66 	bl	800c504 <_ZN12TestRegistryC1Ev>
 800cc38:	4807      	ldr	r0, [pc, #28]	; (800cc58 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800cc3a:	f005 fad9 	bl	80121f0 <__cxa_guard_release>
 800cc3e:	4808      	ldr	r0, [pc, #32]	; (800cc60 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 800cc40:	f005 fafd 	bl	801223e <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 800cc44:	4b07      	ldr	r3, [pc, #28]	; (800cc64 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d002      	beq.n	800cc52 <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 800cc4c:	4b05      	ldr	r3, [pc, #20]	; (800cc64 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	e000      	b.n	800cc54 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 800cc52:	4b02      	ldr	r3, [pc, #8]	; (800cc5c <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	20000758 	.word	0x20000758
 800cc5c:	20000738 	.word	0x20000738
 800cc60:	0800cbed 	.word	0x0800cbed
 800cc64:	20000734 	.word	0x20000734

0800cc68 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 800cc72:	4a04      	ldr	r2, [pc, #16]	; (800cc84 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	6013      	str	r3, [r2, #0]
}
 800cc78:	bf00      	nop
 800cc7a:	370c      	adds	r7, #12
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr
 800cc84:	20000734 	.word	0x20000734

0800cc88 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d00a      	beq.n	800ccae <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	685a      	ldr	r2, [r3, #4]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	330c      	adds	r3, #12
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4610      	mov	r0, r2
 800cca8:	4798      	blx	r3
 800ccaa:	4603      	mov	r3, r0
 800ccac:	e000      	b.n	800ccb0 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	6053      	str	r3, [r2, #4]

}
 800ccb4:	bf00      	nop
 800ccb6:	3708      	adds	r7, #8
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	683a      	ldr	r2, [r7, #0]
 800ccca:	609a      	str	r2, [r3, #8]
}
 800cccc:	bf00      	nop
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b083      	sub	sp, #12
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	683a      	ldr	r2, [r7, #0]
 800cce6:	60da      	str	r2, [r3, #12]
}
 800cce8:	bf00      	nop
 800ccea:	370c      	adds	r7, #12
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	771a      	strb	r2, [r3, #28]
}
 800cd02:	bf00      	nop
 800cd04:	370c      	adds	r7, #12
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr

0800cd0e <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 800cd0e:	b480      	push	{r7}
 800cd10:	b083      	sub	sp, #12
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	751a      	strb	r2, [r3, #20]
}
 800cd1c:	bf00      	nop
 800cd1e:	370c      	adds	r7, #12
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	68d9      	ldr	r1, [r3, #12]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	68b8      	ldr	r0, [r7, #8]
 800cd40:	f000 ffaa 	bl	800dc98 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d001      	beq.n	800cd4e <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e006      	b.n	800cd5c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	332c      	adds	r3, #44	; 0x2c
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	4798      	blx	r3
        return false;
 800cd5a:	2300      	movs	r3, #0
    }
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3710      	adds	r7, #16
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 800cd6c:	f7ff fb62 	bl	800c434 <_ZN14NullTestPlugin8instanceEv>
 800cd70:	4602      	mov	r2, r0
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	611a      	str	r2, [r3, #16]
}
 800cd76:	bf00      	nop
 800cd78:	3708      	adds	r7, #8
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b082      	sub	sp, #8
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3324      	adds	r3, #36	; 0x24
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	6912      	ldr	r2, [r2, #16]
 800cd94:	4611      	mov	r1, r2
 800cd96:	6838      	ldr	r0, [r7, #0]
 800cd98:	4798      	blx	r3
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	611a      	str	r2, [r3, #16]
}
 800cda0:	bf00      	nop
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	691b      	ldr	r3, [r3, #16]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	6839      	ldr	r1, [r7, #0]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7ff fa52 	bl	800c27a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800cdd6:	4603      	mov	r3, r0
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	691a      	ldr	r2, [r3, #16]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	691b      	ldr	r3, [r3, #16]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	3328      	adds	r3, #40	; 0x28
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	6839      	ldr	r1, [r7, #0]
 800cdfa:	4610      	mov	r0, r2
 800cdfc:	4798      	blx	r3
 800cdfe:	4602      	mov	r2, r0
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	691b      	ldr	r3, [r3, #16]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	bf0c      	ite	eq
 800ce08:	2301      	moveq	r3, #1
 800ce0a:	2300      	movne	r3, #0
 800ce0c:	b2db      	uxtb	r3, r3
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00b      	beq.n	800ce2a <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	691a      	ldr	r2, [r3, #16]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	691b      	ldr	r3, [r3, #16]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	332c      	adds	r3, #44	; 0x2c
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4610      	mov	r0, r2
 800ce22:	4798      	blx	r3
 800ce24:	4602      	mov	r2, r0
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	691b      	ldr	r3, [r3, #16]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7ff fa17 	bl	800c262 <_ZN10TestPlugin7getNameEv>
 800ce34:	4603      	mov	r3, r0
 800ce36:	6839      	ldr	r1, [r7, #0]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7fb f8fa 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d00b      	beq.n	800ce5c <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	691a      	ldr	r2, [r3, #16]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	691b      	ldr	r3, [r3, #16]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	332c      	adds	r3, #44	; 0x2c
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4610      	mov	r0, r2
 800ce54:	4798      	blx	r3
 800ce56:	4602      	mov	r2, r0
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	691a      	ldr	r2, [r3, #16]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	691b      	ldr	r3, [r3, #16]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	3328      	adds	r3, #40	; 0x28
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	6839      	ldr	r1, [r7, #0]
 800ce6c:	4610      	mov	r0, r2
 800ce6e:	4798      	blx	r3
}
 800ce70:	bf00      	nop
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
    int count = 0;
 800ce80:	2300      	movs	r3, #0
 800ce82:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	691b      	ldr	r3, [r3, #16]
 800ce88:	60bb      	str	r3, [r7, #8]
 800ce8a:	f7ff fad3 	bl	800c434 <_ZN14NullTestPlugin8instanceEv>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	4293      	cmp	r3, r2
 800ce94:	bf14      	ite	ne
 800ce96:	2301      	movne	r3, #1
 800ce98:	2300      	moveq	r3, #0
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00a      	beq.n	800ceb6 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	3301      	adds	r3, #1
 800cea4:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	332c      	adds	r3, #44	; 0x2c
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	68b8      	ldr	r0, [r7, #8]
 800ceb0:	4798      	blx	r3
 800ceb2:	60b8      	str	r0, [r7, #8]
 800ceb4:	e7e9      	b.n	800ce8a <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3710      	adds	r7, #16
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
    return tests_;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	685b      	ldr	r3, [r3, #4]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	370c      	adds	r7, #12
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	334c      	adds	r3, #76	; 0x4c
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	4798      	blx	r3
 800ceee:	4602      	mov	r2, r0
 800cef0:	f107 0308 	add.w	r3, r7, #8
 800cef4:	4611      	mov	r1, r2
 800cef6:	4618      	mov	r0, r3
 800cef8:	f002 f8e6 	bl	800f0c8 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 800cefc:	f107 0308 	add.w	r3, r7, #8
 800cf00:	6839      	ldr	r1, [r7, #0]
 800cf02:	4618      	mov	r0, r3
 800cf04:	f002 f96e 	bl	800f1e4 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 800cf08:	f107 0308 	add.w	r3, r7, #8
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f002 fa01 	bl	800f314 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800cf12:	4602      	mov	r2, r0
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800cf18:	f107 0308 	add.w	r3, r7, #8
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f002 f927 	bl	800f170 <_ZN22UtestShellPointerArrayD1Ev>
}
 800cf22:	bf00      	nop
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b084      	sub	sp, #16
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	334c      	adds	r3, #76	; 0x4c
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	4798      	blx	r3
 800cf3e:	4602      	mov	r2, r0
 800cf40:	f107 0308 	add.w	r3, r7, #8
 800cf44:	4611      	mov	r1, r2
 800cf46:	4618      	mov	r0, r3
 800cf48:	f002 f8be 	bl	800f0c8 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 800cf4c:	f107 0308 	add.w	r3, r7, #8
 800cf50:	4618      	mov	r0, r3
 800cf52:	f002 f983 	bl	800f25c <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 800cf56:	f107 0308 	add.w	r3, r7, #8
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f002 f9da 	bl	800f314 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800cf60:	4602      	mov	r2, r0
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800cf66:	f107 0308 	add.w	r3, r7, #8
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f002 f900 	bl	800f170 <_ZN22UtestShellPointerArrayD1Ev>
}
 800cf70:	bf00      	nop
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d00b      	beq.n	800cfa6 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	330c      	adds	r3, #12
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	68f8      	ldr	r0, [r7, #12]
 800cf98:	4798      	blx	r3
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d001      	beq.n	800cfa6 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e000      	b.n	800cfa8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d007      	beq.n	800cfbc <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	330c      	adds	r3, #12
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	68f8      	ldr	r0, [r7, #12]
 800cfb6:	4798      	blx	r3
 800cfb8:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 800cfba:	e7e5      	b.n	800cf88 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 800cfc6:	b590      	push	{r4, r7, lr}
 800cfc8:	b087      	sub	sp, #28
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
 800cfce:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	617b      	str	r3, [r7, #20]
    while (current) {
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d01e      	beq.n	800d01a <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 800cfdc:	f107 030c 	add.w	r3, r7, #12
 800cfe0:	6979      	ldr	r1, [r7, #20]
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f000 fd4e 	bl	800da84 <_ZNK10UtestShell7getNameEv>
 800cfe8:	f107 030c 	add.w	r3, r7, #12
 800cfec:	6839      	ldr	r1, [r7, #0]
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fb f81f 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800cff4:	4603      	mov	r3, r0
 800cff6:	461c      	mov	r4, r3
 800cff8:	f107 030c 	add.w	r3, r7, #12
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7fb f80c 	bl	800801a <_ZN12SimpleStringD1Ev>
 800d002:	2c00      	cmp	r4, #0
 800d004:	d001      	beq.n	800d00a <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	e008      	b.n	800d01c <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	330c      	adds	r3, #12
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	6978      	ldr	r0, [r7, #20]
 800d014:	4798      	blx	r3
 800d016:	6178      	str	r0, [r7, #20]
    while (current) {
 800d018:	e7dd      	b.n	800cfd6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 800d01a:	2300      	movs	r3, #0
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	371c      	adds	r7, #28
 800d020:	46bd      	mov	sp, r7
 800d022:	bd90      	pop	{r4, r7, pc}

0800d024 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 800d024:	b590      	push	{r4, r7, lr}
 800d026:	b087      	sub	sp, #28
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	617b      	str	r3, [r7, #20]
    while (current) {
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d01e      	beq.n	800d078 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 800d03a:	f107 030c 	add.w	r3, r7, #12
 800d03e:	6979      	ldr	r1, [r7, #20]
 800d040:	4618      	mov	r0, r3
 800d042:	f000 fd2e 	bl	800daa2 <_ZNK10UtestShell8getGroupEv>
 800d046:	f107 030c 	add.w	r3, r7, #12
 800d04a:	6839      	ldr	r1, [r7, #0]
 800d04c:	4618      	mov	r0, r3
 800d04e:	f7fa fff0 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800d052:	4603      	mov	r3, r0
 800d054:	461c      	mov	r4, r3
 800d056:	f107 030c 	add.w	r3, r7, #12
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7fa ffdd 	bl	800801a <_ZN12SimpleStringD1Ev>
 800d060:	2c00      	cmp	r4, #0
 800d062:	d001      	beq.n	800d068 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	e008      	b.n	800d07a <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	330c      	adds	r3, #12
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	6978      	ldr	r0, [r7, #20]
 800d072:	4798      	blx	r3
 800d074:	6178      	str	r0, [r7, #20]
    while (current) {
 800d076:	e7dd      	b.n	800d034 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	371c      	adds	r7, #28
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd90      	pop	{r4, r7, pc}
	...

0800d084 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 800d08e:	4a18      	ldr	r2, [pc, #96]	; (800d0f0 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	683a      	ldr	r2, [r7, #0]
 800d098:	605a      	str	r2, [r3, #4]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2200      	movs	r2, #0
 800d09e:	609a      	str	r2, [r3, #8]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	60da      	str	r2, [r3, #12]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	611a      	str	r2, [r3, #16]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	615a      	str	r2, [r3, #20]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	619a      	str	r2, [r3, #24]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	61da      	str	r2, [r3, #28]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	621a      	str	r2, [r3, #32]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	625a      	str	r2, [r3, #36]	; 0x24
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	629a      	str	r2, [r3, #40]	; 0x28
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	62da      	str	r2, [r3, #44]	; 0x2c
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	631a      	str	r2, [r3, #48]	; 0x30
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	370c      	adds	r7, #12
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr
 800d0f0:	08018ddc 	.word	0x08018ddc

0800d0f4 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	4a04      	ldr	r2, [pc, #16]	; (800d110 <_ZN10TestResultD1Ev+0x1c>)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	601a      	str	r2, [r3, #0]
{
}
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4618      	mov	r0, r3
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr
 800d110:	08018ddc 	.word	0x08018ddc

0800d114 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
}
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f7ff ffe9 	bl	800d0f4 <_ZN10TestResultD1Ev>
 800d122:	2138      	movs	r1, #56	; 0x38
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7f9 fceb 	bl	8006b00 <_ZdlPvj>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4618      	mov	r0, r3
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	685a      	ldr	r2, [r3, #4]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	3318      	adds	r3, #24
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	6839      	ldr	r1, [r7, #0]
 800d14e:	4610      	mov	r0, r2
 800d150:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800d152:	4b05      	ldr	r3, [pc, #20]	; (800d168 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4798      	blx	r3
 800d158:	4603      	mov	r3, r0
 800d15a:	461a      	mov	r2, r3
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d160:	bf00      	nop
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	200000a4 	.word	0x200000a4

0800d16c <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 800d176:	4b0c      	ldr	r3, [pc, #48]	; (800d1a8 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4798      	blx	r3
 800d17c:	4603      	mov	r3, r0
 800d17e:	461a      	mov	r2, r3
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d184:	1ad2      	subs	r2, r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	685a      	ldr	r2, [r3, #4]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	331c      	adds	r3, #28
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	6879      	ldr	r1, [r7, #4]
 800d19a:	4610      	mov	r0, r2
 800d19c:	4798      	blx	r3
}
 800d19e:	bf00      	nop
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	200000a4 	.word	0x200000a4

0800d1ac <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	685a      	ldr	r2, [r3, #4]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	3310      	adds	r3, #16
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	6839      	ldr	r1, [r7, #0]
 800d1c6:	4610      	mov	r0, r2
 800d1c8:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800d1ca:	4b05      	ldr	r3, [pc, #20]	; (800d1e0 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4798      	blx	r3
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d1d8:	bf00      	nop
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	200000a4 	.word	0x200000a4

0800d1e4 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
    output_.print(text);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	685a      	ldr	r2, [r3, #4]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	332c      	adds	r3, #44	; 0x2c
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	6839      	ldr	r1, [r7, #0]
 800d1fe:	4610      	mov	r0, r2
 800d200:	4798      	blx	r3
}
 800d202:	bf00      	nop
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b082      	sub	sp, #8
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
 800d212:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	685a      	ldr	r2, [r3, #4]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	3348      	adds	r3, #72	; 0x48
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	6839      	ldr	r1, [r7, #0]
 800d224:	4610      	mov	r0, r2
 800d226:	4798      	blx	r3
}
 800d228:	bf00      	nop
 800d22a:	3708      	adds	r7, #8
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 800d23a:	4b0c      	ldr	r3, [pc, #48]	; (800d26c <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	4798      	blx	r3
 800d240:	4603      	mov	r3, r0
 800d242:	461a      	mov	r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d248:	1ad2      	subs	r2, r2, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	685a      	ldr	r2, [r3, #4]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	3314      	adds	r3, #20
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	6879      	ldr	r1, [r7, #4]
 800d25e:	4610      	mov	r0, r2
 800d260:	4798      	blx	r3

}
 800d262:	bf00      	nop
 800d264:	3708      	adds	r7, #8
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	200000a4 	.word	0x200000a4

0800d270 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	685a      	ldr	r2, [r3, #4]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	333c      	adds	r3, #60	; 0x3c
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	6839      	ldr	r1, [r7, #0]
 800d28a:	4610      	mov	r0, r2
 800d28c:	4798      	blx	r3
    failureCount_++;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	695b      	ldr	r3, [r3, #20]
 800d292:	1c5a      	adds	r2, r3, #1
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	615a      	str	r2, [r3, #20]
}
 800d298:	bf00      	nop
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
    testCount_++;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	1c5a      	adds	r2, r3, #1
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	609a      	str	r2, [r3, #8]
}
 800d2b2:	bf00      	nop
 800d2b4:	370c      	adds	r7, #12
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr

0800d2be <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 800d2be:	b480      	push	{r7}
 800d2c0:	b083      	sub	sp, #12
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
    runCount_++;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	1c5a      	adds	r2, r3, #1
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	60da      	str	r2, [r3, #12]
}
 800d2d0:	bf00      	nop
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr

0800d2dc <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
    checkCount_++;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	691b      	ldr	r3, [r3, #16]
 800d2e8:	1c5a      	adds	r2, r3, #1
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	611a      	str	r2, [r3, #16]
}
 800d2ee:	bf00      	nop
 800d2f0:	370c      	adds	r7, #12
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr

0800d2fa <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 800d2fa:	b480      	push	{r7}
 800d2fc:	b083      	sub	sp, #12
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	699b      	ldr	r3, [r3, #24]
 800d306:	1c5a      	adds	r2, r3, #1
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	619a      	str	r2, [r3, #24]
}
 800d30c:	bf00      	nop
 800d30e:	370c      	adds	r7, #12
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr

0800d318 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	69db      	ldr	r3, [r3, #28]
 800d324:	1c5a      	adds	r2, r3, #1
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	61da      	str	r2, [r3, #28]
}
 800d32a:	bf00      	nop
 800d32c:	370c      	adds	r7, #12
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr
	...

0800d338 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800d340:	4b09      	ldr	r3, [pc, #36]	; (800d368 <_ZN10TestResult12testsStartedEv+0x30>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4798      	blx	r3
 800d346:	4603      	mov	r3, r0
 800d348:	461a      	mov	r2, r3
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	685a      	ldr	r2, [r3, #4]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	3308      	adds	r3, #8
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4610      	mov	r0, r2
 800d35e:	4798      	blx	r3
}
 800d360:	bf00      	nop
 800d362:	3708      	adds	r7, #8
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	200000a4 	.word	0x200000a4

0800d36c <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 800d374:	4b0c      	ldr	r3, [pc, #48]	; (800d3a8 <_ZN10TestResult10testsEndedEv+0x3c>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4798      	blx	r3
 800d37a:	4603      	mov	r3, r0
 800d37c:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d382:	68fa      	ldr	r2, [r7, #12]
 800d384:	1ad2      	subs	r2, r2, r3
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	685a      	ldr	r2, [r3, #4]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	330c      	adds	r3, #12
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	6879      	ldr	r1, [r7, #4]
 800d39a:	4610      	mov	r0, r2
 800d39c:	4798      	blx	r3
}
 800d39e:	bf00      	nop
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	200000a4 	.word	0x200000a4

0800d3ac <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6a1b      	ldr	r3, [r3, #32]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	370c      	adds	r7, #12
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr

0800d3f4 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 800d3f4:	b590      	push	{r4, r7, lr}
 800d3f6:	b087      	sub	sp, #28
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	ed87 0b04 	vstr	d0, [r7, #16]
 800d3fe:	ed87 1b02 	vstr	d1, [r7, #8]
 800d402:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 800d406:	4b2c      	ldr	r3, [pc, #176]	; (800d4b8 <_Z13doubles_equalddd+0xc4>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	ed97 0b04 	vldr	d0, [r7, #16]
 800d40e:	4798      	blx	r3
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	d10f      	bne.n	800d436 <_Z13doubles_equalddd+0x42>
 800d416:	4b28      	ldr	r3, [pc, #160]	; (800d4b8 <_Z13doubles_equalddd+0xc4>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	ed97 0b02 	vldr	d0, [r7, #8]
 800d41e:	4798      	blx	r3
 800d420:	4603      	mov	r3, r0
 800d422:	2b00      	cmp	r3, #0
 800d424:	d107      	bne.n	800d436 <_Z13doubles_equalddd+0x42>
 800d426:	4b24      	ldr	r3, [pc, #144]	; (800d4b8 <_Z13doubles_equalddd+0xc4>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	ed97 0b00 	vldr	d0, [r7]
 800d42e:	4798      	blx	r3
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d001      	beq.n	800d43a <_Z13doubles_equalddd+0x46>
 800d436:	2301      	movs	r3, #1
 800d438:	e000      	b.n	800d43c <_Z13doubles_equalddd+0x48>
 800d43a:	2300      	movs	r3, #0
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d001      	beq.n	800d444 <_Z13doubles_equalddd+0x50>
        return false;
 800d440:	2300      	movs	r3, #0
 800d442:	e035      	b.n	800d4b0 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 800d444:	4b1d      	ldr	r3, [pc, #116]	; (800d4bc <_Z13doubles_equalddd+0xc8>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	ed97 0b04 	vldr	d0, [r7, #16]
 800d44c:	4798      	blx	r3
 800d44e:	4603      	mov	r3, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	d009      	beq.n	800d468 <_Z13doubles_equalddd+0x74>
 800d454:	4b19      	ldr	r3, [pc, #100]	; (800d4bc <_Z13doubles_equalddd+0xc8>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	ed97 0b02 	vldr	d0, [r7, #8]
 800d45c:	4798      	blx	r3
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d001      	beq.n	800d468 <_Z13doubles_equalddd+0x74>
 800d464:	2301      	movs	r3, #1
 800d466:	e000      	b.n	800d46a <_Z13doubles_equalddd+0x76>
 800d468:	2300      	movs	r3, #0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <_Z13doubles_equalddd+0x7e>
    {
        return true;
 800d46e:	2301      	movs	r3, #1
 800d470:	e01e      	b.n	800d4b0 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 800d472:	4b13      	ldr	r3, [pc, #76]	; (800d4c0 <_Z13doubles_equalddd+0xcc>)
 800d474:	681c      	ldr	r4, [r3, #0]
 800d476:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d47a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d47e:	f7f2 ff43 	bl	8000308 <__aeabi_dsub>
 800d482:	4602      	mov	r2, r0
 800d484:	460b      	mov	r3, r1
 800d486:	ec43 2b17 	vmov	d7, r2, r3
 800d48a:	eeb0 0a47 	vmov.f32	s0, s14
 800d48e:	eef0 0a67 	vmov.f32	s1, s15
 800d492:	47a0      	blx	r4
 800d494:	ec53 2b10 	vmov	r2, r3, d0
 800d498:	2101      	movs	r1, #1
 800d49a:	460c      	mov	r4, r1
 800d49c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d4a0:	f7f3 f95e 	bl	8000760 <__aeabi_dcmpge>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d101      	bne.n	800d4ae <_Z13doubles_equalddd+0xba>
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	461c      	mov	r4, r3
 800d4ae:	b2e3      	uxtb	r3, r4
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	371c      	adds	r7, #28
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd90      	pop	{r4, r7, pc}
 800d4b8:	200000e0 	.word	0x200000e0
 800d4bc:	200000e4 	.word	0x200000e4
 800d4c0:	200000d4 	.word	0x200000d4

0800d4c4 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	332c      	adds	r3, #44	; 0x2c
    }
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
    {
 800d4e4:	4a0a      	ldr	r2, [pc, #40]	; (800d510 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	601a      	str	r2, [r3, #0]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	332c      	adds	r3, #44	; 0x2c
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7ff fe00 	bl	800d0f4 <_ZN10TestResultD1Ev>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	331c      	adds	r3, #28
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7f7 fdfd 	bl	80050f8 <_ZN17ConsoleTestOutputD1Ev>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	4618      	mov	r0, r3
 800d502:	f000 f943 	bl	800d78c <_ZN10UtestShellD1Ev>
    }
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4618      	mov	r0, r3
 800d50a:	3708      	adds	r7, #8
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	08018e24 	.word	0x08018e24

0800d514 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
    }
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f7ff ffdd 	bl	800d4dc <_ZN22OutsideTestRunnerUTestD1Ev>
 800d522:	2164      	movs	r1, #100	; 0x64
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f7f9 faeb 	bl	8006b00 <_ZdlPvj>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4618      	mov	r0, r3
 800d52e:	3708      	adds	r7, #8
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af02      	add	r7, sp, #8
 800d53a:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	2300      	movs	r3, #0
 800d540:	9300      	str	r3, [sp, #0]
 800d542:	4b0d      	ldr	r3, [pc, #52]	; (800d578 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 800d544:	4a0d      	ldr	r2, [pc, #52]	; (800d57c <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 800d546:	490e      	ldr	r1, [pc, #56]	; (800d580 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 800d548:	f000 f8f8 	bl	800d73c <_ZN10UtestShellC1EPKcS1_S1_j>
 800d54c:	4a0d      	ldr	r2, [pc, #52]	; (800d584 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	601a      	str	r2, [r3, #0]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	331c      	adds	r3, #28
 800d556:	4618      	mov	r0, r3
 800d558:	f7f7 fdbc 	bl	80050d4 <_ZN17ConsoleTestOutputC1Ev>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	331c      	adds	r3, #28
 800d566:	4619      	mov	r1, r3
 800d568:	4610      	mov	r0, r2
 800d56a:	f7ff fd8b 	bl	800d084 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	4618      	mov	r0, r3
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}
 800d578:	08016ea8 	.word	0x08016ea8
 800d57c:	08016eb8 	.word	0x08016eb8
 800d580:	08016ef8 	.word	0x08016ef8
 800d584:	08018e24 	.word	0x08018e24

0800d588 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 800d588:	b580      	push	{r7, lr}
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	4801      	ldr	r0, [pc, #4]	; (800d594 <__tcf_0+0xc>)
 800d58e:	f7ff ffa5 	bl	800d4dc <_ZN22OutsideTestRunnerUTestD1Ev>
 800d592:	bd80      	pop	{r7, pc}
 800d594:	2000075c 	.word	0x2000075c

0800d598 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 800d59c:	4b12      	ldr	r3, [pc, #72]	; (800d5e8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	f3bf 8f5b 	dmb	ish
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	f003 0301 	and.w	r3, r3, #1
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bf0c      	ite	eq
 800d5ae:	2301      	moveq	r3, #1
 800d5b0:	2300      	movne	r3, #0
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d013      	beq.n	800d5e0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800d5b8:	480b      	ldr	r0, [pc, #44]	; (800d5e8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800d5ba:	f004 fe0d 	bl	80121d8 <__cxa_guard_acquire>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	bf14      	ite	ne
 800d5c4:	2301      	movne	r3, #1
 800d5c6:	2300      	moveq	r3, #0
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d008      	beq.n	800d5e0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800d5ce:	4807      	ldr	r0, [pc, #28]	; (800d5ec <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 800d5d0:	f7ff ffb0 	bl	800d534 <_ZN22OutsideTestRunnerUTestC1Ev>
 800d5d4:	4804      	ldr	r0, [pc, #16]	; (800d5e8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800d5d6:	f004 fe0b 	bl	80121f0 <__cxa_guard_release>
 800d5da:	4805      	ldr	r0, [pc, #20]	; (800d5f0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 800d5dc:	f004 fe2f 	bl	801223e <atexit>
    return instance_;
 800d5e0:	4b02      	ldr	r3, [pc, #8]	; (800d5ec <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	200007c0 	.word	0x200007c0
 800d5ec:	2000075c 	.word	0x2000075c
 800d5f0:	0800d589 	.word	0x0800d589

0800d5f4 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	330c      	adds	r3, #12
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	4798      	blx	r3
    }
 800d608:	bf00      	nop
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	3314      	adds	r3, #20
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	4798      	blx	r3
    }
 800d624:	bf00      	nop
 800d626:	3708      	adds	r7, #8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	3310      	adds	r3, #16
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	4798      	blx	r3
    }
 800d640:	bf00      	nop
 800d642:	3708      	adds	r7, #8
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 800d648:	b480      	push	{r7}
 800d64a:	b085      	sub	sp, #20
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
 800d654:	603b      	str	r3, [r7, #0]
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	68ba      	ldr	r2, [r7, #8]
 800d65a:	601a      	str	r2, [r3, #0]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	605a      	str	r2, [r3, #4]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	683a      	ldr	r2, [r7, #0]
 800d666:	609a      	str	r2, [r3, #8]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	4618      	mov	r0, r3
 800d66c:	3714      	adds	r7, #20
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr

0800d676 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 800d676:	b580      	push	{r7, lr}
 800d678:	b086      	sub	sp, #24
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	689b      	ldr	r3, [r3, #8]
 800d692:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	3394      	adds	r3, #148	; 0x94
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	68ba      	ldr	r2, [r7, #8]
 800d69e:	68f9      	ldr	r1, [r7, #12]
 800d6a0:	6938      	ldr	r0, [r7, #16]
 800d6a2:	4798      	blx	r3
    }
 800d6a4:	bf00      	nop
 800d6a6:	3718      	adds	r7, #24
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b086      	sub	sp, #24
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 800d6ca:	4b05      	ldr	r3, [pc, #20]	; (800d6e0 <helperDoRunOneTestSeperateProcess+0x34>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	68ba      	ldr	r2, [r7, #8]
 800d6d0:	68f9      	ldr	r1, [r7, #12]
 800d6d2:	6938      	ldr	r0, [r7, #16]
 800d6d4:	4798      	blx	r3
    }
 800d6d6:	bf00      	nop
 800d6d8:	3718      	adds	r7, #24
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	20000098 	.word	0x20000098

0800d6e4 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800d6ec:	4a0f      	ldr	r2, [pc, #60]	; (800d72c <_ZN10UtestShellC1Ev+0x48>)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	601a      	str	r2, [r3, #0]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	4a0e      	ldr	r2, [pc, #56]	; (800d730 <_ZN10UtestShellC1Ev+0x4c>)
 800d6f6:	605a      	str	r2, [r3, #4]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4a0e      	ldr	r2, [pc, #56]	; (800d734 <_ZN10UtestShellC1Ev+0x50>)
 800d6fc:	609a      	str	r2, [r3, #8]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	4a0d      	ldr	r2, [pc, #52]	; (800d738 <_ZN10UtestShellC1Ev+0x54>)
 800d702:	60da      	str	r2, [r3, #12]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2200      	movs	r2, #0
 800d708:	611a      	str	r2, [r3, #16]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	615a      	str	r2, [r3, #20]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2200      	movs	r2, #0
 800d714:	761a      	strb	r2, [r3, #24]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2200      	movs	r2, #0
 800d71a:	765a      	strb	r2, [r3, #25]
{
}
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4618      	mov	r0, r3
 800d720:	370c      	adds	r7, #12
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop
 800d72c:	08018ee4 	.word	0x08018ee4
 800d730:	08016f44 	.word	0x08016f44
 800d734:	08016f58 	.word	0x08016f58
 800d738:	08016f68 	.word	0x08016f68

0800d73c <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 800d73c:	b480      	push	{r7}
 800d73e:	b085      	sub	sp, #20
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	607a      	str	r2, [r7, #4]
 800d748:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800d74a:	4a0f      	ldr	r2, [pc, #60]	; (800d788 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	601a      	str	r2, [r3, #0]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	68ba      	ldr	r2, [r7, #8]
 800d754:	605a      	str	r2, [r3, #4]
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	609a      	str	r2, [r3, #8]
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	683a      	ldr	r2, [r7, #0]
 800d760:	60da      	str	r2, [r3, #12]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	69ba      	ldr	r2, [r7, #24]
 800d766:	611a      	str	r2, [r3, #16]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2200      	movs	r2, #0
 800d76c:	615a      	str	r2, [r3, #20]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2200      	movs	r2, #0
 800d772:	761a      	strb	r2, [r3, #24]
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2200      	movs	r2, #0
 800d778:	765a      	strb	r2, [r3, #25]
{
}
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	4618      	mov	r0, r3
 800d77e:	3714      	adds	r7, #20
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr
 800d788:	08018ee4 	.word	0x08018ee4

0800d78c <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	4a04      	ldr	r2, [pc, #16]	; (800d7a8 <_ZN10UtestShellD1Ev+0x1c>)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	601a      	str	r2, [r3, #0]
{
}
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4618      	mov	r0, r3
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr
 800d7a8:	08018ee4 	.word	0x08018ee4

0800d7ac <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
}
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7ff ffe9 	bl	800d78c <_ZN10UtestShellD1Ev>
 800d7ba:	211c      	movs	r1, #28
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f7f9 f99f 	bl	8006b00 <_ZdlPvj>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	3310      	adds	r3, #16
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	4798      	blx	r3
}
 800d7e2:	bf00      	nop
 800d7e4:	3708      	adds	r7, #8
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
	...

0800d7ec <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 800d7f0:	4b02      	ldr	r3, [pc, #8]	; (800d7fc <_ZN10UtestShell5crashEv+0x10>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	4798      	blx	r3
}
 800d7f6:	bf00      	nop
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	20000094 	.word	0x20000094

0800d800 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b088      	sub	sp, #32
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2200      	movs	r2, #0
 800d810:	765a      	strb	r2, [r3, #25]
    result.countRun();
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	3324      	adds	r3, #36	; 0x24
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 800d81e:	f107 0014 	add.w	r0, r7, #20
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	68ba      	ldr	r2, [r7, #8]
 800d826:	68f9      	ldr	r1, [r7, #12]
 800d828:	f7ff ff0e 	bl	800d648 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	337c      	adds	r3, #124	; 0x7c
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	68f8      	ldr	r0, [r7, #12]
 800d836:	4798      	blx	r3
 800d838:	4603      	mov	r3, r0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d007      	beq.n	800d84e <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 800d83e:	4b09      	ldr	r3, [pc, #36]	; (800d864 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f107 0214 	add.w	r2, r7, #20
 800d846:	4611      	mov	r1, r2
 800d848:	4807      	ldr	r0, [pc, #28]	; (800d868 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 800d84a:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 800d84c:	e006      	b.n	800d85c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 800d84e:	4b05      	ldr	r3, [pc, #20]	; (800d864 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f107 0214 	add.w	r2, r7, #20
 800d856:	4611      	mov	r1, r2
 800d858:	4804      	ldr	r0, [pc, #16]	; (800d86c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 800d85a:	4798      	blx	r3
}
 800d85c:	bf00      	nop
 800d85e:	3720      	adds	r7, #32
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	200000a0 	.word	0x200000a0
 800d868:	0800d6ad 	.word	0x0800d6ad
 800d86c:	0800d677 	.word	0x0800d677

0800d870 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 800d870:	b590      	push	{r4, r7, lr}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
    return new Utest();
 800d878:	22d3      	movs	r2, #211	; 0xd3
 800d87a:	4906      	ldr	r1, [pc, #24]	; (800d894 <_ZN10UtestShell10createTestEv+0x24>)
 800d87c:	2004      	movs	r0, #4
 800d87e:	f7f9 f92b 	bl	8006ad8 <_ZnwjPKci>
 800d882:	4604      	mov	r4, r0
 800d884:	4620      	mov	r0, r4
 800d886:	f001 fafd 	bl	800ee84 <_ZN5UtestC1Ev>
 800d88a:	4623      	mov	r3, r4
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	bd90      	pop	{r4, r7, pc}
 800d894:	08016f78 	.word	0x08016f78

0800d898 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
    delete test;
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d004      	beq.n	800d8b2 <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	3204      	adds	r2, #4
 800d8ac:	6812      	ldr	r2, [r2, #0]
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	4790      	blx	r2
}
 800d8b2:	bf00      	nop
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
	...

0800d8bc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b088      	sub	sp, #32
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	333c      	adds	r3, #60	; 0x3c
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4940      	ldr	r1, [pc, #256]	; (800d9d4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	3314      	adds	r3, #20
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	68f9      	ldr	r1, [r7, #12]
 800d8e2:	68b8      	ldr	r0, [r7, #8]
 800d8e4:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	333c      	adds	r3, #60	; 0x3c
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	493a      	ldr	r1, [pc, #232]	; (800d9d8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 800d8f4:	f001 fa9c 	bl	800ee30 <_ZN10UtestShell10getCurrentEv>
 800d8f8:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f001 fa7e 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800d900:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 800d902:	6879      	ldr	r1, [r7, #4]
 800d904:	68f8      	ldr	r0, [r7, #12]
 800d906:	f001 fa59 	bl	800edbc <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 800d90a:	68f9      	ldr	r1, [r7, #12]
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f001 fa65 	bl	800eddc <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	333c      	adds	r3, #60	; 0x3c
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4930      	ldr	r1, [pc, #192]	; (800d9dc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	4798      	blx	r3
    Utest* testToRun = createTest();
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	3388      	adds	r3, #136	; 0x88
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68f8      	ldr	r0, [r7, #12]
 800d92a:	4798      	blx	r3
 800d92c:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	333c      	adds	r3, #60	; 0x3c
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	492a      	ldr	r1, [pc, #168]	; (800d9e0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	333c      	adds	r3, #60	; 0x3c
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4927      	ldr	r1, [pc, #156]	; (800d9e4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	4798      	blx	r3
    testToRun->run();
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	3308      	adds	r3, #8
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	6978      	ldr	r0, [r7, #20]
 800d954:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	333c      	adds	r3, #60	; 0x3c
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4922      	ldr	r1, [pc, #136]	; (800d9e8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 800d964:	69f9      	ldr	r1, [r7, #28]
 800d966:	68f8      	ldr	r0, [r7, #12]
 800d968:	f001 fa38 	bl	800eddc <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 800d96c:	69b9      	ldr	r1, [r7, #24]
 800d96e:	68f8      	ldr	r0, [r7, #12]
 800d970:	f001 fa24 	bl	800edbc <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	333c      	adds	r3, #60	; 0x3c
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	491b      	ldr	r1, [pc, #108]	; (800d9ec <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	4798      	blx	r3
    destroyTest(testToRun);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	338c      	adds	r3, #140	; 0x8c
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	6979      	ldr	r1, [r7, #20]
 800d98c:	68f8      	ldr	r0, [r7, #12]
 800d98e:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	333c      	adds	r3, #60	; 0x3c
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4915      	ldr	r1, [pc, #84]	; (800d9f0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	333c      	adds	r3, #60	; 0x3c
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	4913      	ldr	r1, [pc, #76]	; (800d9f4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	3318      	adds	r3, #24
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	68f9      	ldr	r1, [r7, #12]
 800d9b8:	68b8      	ldr	r0, [r7, #8]
 800d9ba:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	333c      	adds	r3, #60	; 0x3c
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	490c      	ldr	r1, [pc, #48]	; (800d9f8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	4798      	blx	r3
}
 800d9ca:	bf00      	nop
 800d9cc:	3720      	adds	r7, #32
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	08016f8c 	.word	0x08016f8c
 800d9d8:	08016fb0 	.word	0x08016fb0
 800d9dc:	08016fd0 	.word	0x08016fd0
 800d9e0:	08016fec 	.word	0x08016fec
 800d9e4:	08017008 	.word	0x08017008
 800d9e8:	08017024 	.word	0x08017024
 800d9ec:	0801703c 	.word	0x0801703c
 800d9f0:	08017058 	.word	0x08017058
 800d9f4:	08017074 	.word	0x08017074
 800d9f8:	08017098 	.word	0x08017098

0800d9fc <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
    return next_;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	695b      	ldr	r3, [r3, #20]
}
 800da08:	4618      	mov	r0, r3
 800da0a:	370c      	adds	r7, #12
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
    next_ = test;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	683a      	ldr	r2, [r7, #0]
 800da22:	615a      	str	r2, [r3, #20]
    return this;
 800da24:	687b      	ldr	r3, [r7, #4]
}
 800da26:	4618      	mov	r0, r3
 800da28:	370c      	adds	r7, #12
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr

0800da32 <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 800da32:	b580      	push	{r7, lr}
 800da34:	b082      	sub	sp, #8
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	695b      	ldr	r3, [r3, #20]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00b      	beq.n	800da5a <_ZN10UtestShell10countTestsEv+0x28>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	695a      	ldr	r2, [r3, #20]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	695b      	ldr	r3, [r3, #20]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	3310      	adds	r3, #16
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4610      	mov	r0, r2
 800da52:	4798      	blx	r3
 800da54:	4603      	mov	r3, r0
 800da56:	3301      	adds	r3, #1
 800da58:	e000      	b.n	800da5c <_ZN10UtestShell10countTestsEv+0x2a>
 800da5a:	2301      	movs	r3, #1
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3708      	adds	r7, #8
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
    return "TEST";
 800da6e:	4904      	ldr	r1, [pc, #16]	; (800da80 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f7f9 ff1a 	bl	80078aa <_ZN12SimpleStringC1EPKc>
}
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	3708      	adds	r7, #8
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	bf00      	nop
 800da80:	080170bc 	.word	0x080170bc

0800da84 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	4619      	mov	r1, r3
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f7f9 ff08 	bl	80078aa <_ZN12SimpleStringC1EPKc>
}
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	3708      	adds	r7, #8
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b082      	sub	sp, #8
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	4619      	mov	r1, r3
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f7f9 fef9 	bl	80078aa <_ZN12SimpleStringC1EPKc>
}
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	3708      	adds	r7, #8
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	33a0      	adds	r3, #160	; 0xa0
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	6839      	ldr	r1, [r7, #0]
 800dad6:	4610      	mov	r0, r2
 800dad8:	4798      	blx	r3
    formattedName += "(";
 800dada:	490e      	ldr	r1, [pc, #56]	; (800db14 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f7fa fb2b 	bl	8008138 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	4619      	mov	r1, r3
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f7fa fb25 	bl	8008138 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 800daee:	490a      	ldr	r1, [pc, #40]	; (800db18 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f7fa fb21 	bl	8008138 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	689b      	ldr	r3, [r3, #8]
 800dafa:	4619      	mov	r1, r3
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f7fa fb1b 	bl	8008138 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 800db02:	4906      	ldr	r1, [pc, #24]	; (800db1c <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f7fa fb17 	bl	8008138 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 800db0a:	bf00      	nop
}
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	3708      	adds	r7, #8
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	080170c4 	.word	0x080170c4
 800db18:	080170c8 	.word	0x080170c8
 800db1c:	080170cc 	.word	0x080170cc

0800db20 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	7e5b      	ldrb	r3, [r3, #25]
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <_ZNK10UtestShell7willRunEv>:
{
    getTestResult()->countCheck();
}

bool UtestShell::willRun() const
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
    return true;
 800db40:	2301      	movs	r3, #1
}
 800db42:	4618      	mov	r0, r3
 800db44:	370c      	adds	r7, #12
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr

0800db4e <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 800db4e:	b480      	push	{r7}
 800db50:	b083      	sub	sp, #12
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	7e1b      	ldrb	r3, [r3, #24]
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	370c      	adds	r7, #12
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr

0800db66 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 800db66:	b480      	push	{r7}
 800db68:	b083      	sub	sp, #12
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2201      	movs	r2, #1
 800db72:	761a      	strb	r2, [r3, #24]
}
 800db74:	bf00      	nop
 800db76:	370c      	adds	r7, #12
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr

0800db80 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]

}
 800db88:	bf00      	nop
 800db8a:	370c      	adds	r7, #12
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	683a      	ldr	r2, [r7, #0]
 800dba2:	60da      	str	r2, [r3, #12]
}
 800dba4:	bf00      	nop
 800dba6:	370c      	adds	r7, #12
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	683a      	ldr	r2, [r7, #0]
 800dbbe:	611a      	str	r2, [r3, #16]
}
 800dbc0:	bf00      	nop
 800dbc2:	370c      	adds	r7, #12
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b083      	sub	sp, #12
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	683a      	ldr	r2, [r7, #0]
 800dbda:	605a      	str	r2, [r3, #4]
}
 800dbdc:	bf00      	nop
 800dbde:	370c      	adds	r7, #12
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
    name_ = testName;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	683a      	ldr	r2, [r7, #0]
 800dbf6:	609a      	str	r2, [r3, #8]
}
 800dbf8:	bf00      	nop
 800dbfa:	370c      	adds	r7, #12
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	4619      	mov	r1, r3
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f7f9 fe48 	bl	80078aa <_ZN12SimpleStringC1EPKc>
}
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	3708      	adds	r7, #8
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}

0800dc22 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 800dc22:	b480      	push	{r7}
 800dc24:	b083      	sub	sp, #12
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	691b      	ldr	r3, [r3, #16]
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	370c      	adds	r7, #12
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr

0800dc3a <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 800dc3a:	b590      	push	{r4, r7, lr}
 800dc3c:	b087      	sub	sp, #28
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	60f8      	str	r0, [r7, #12]
 800dc42:	60b9      	str	r1, [r7, #8]
 800dc44:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d101      	bne.n	800dc50 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	e01f      	b.n	800dc90 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d01b      	beq.n	800dc8e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 800dc56:	f107 0310 	add.w	r3, r7, #16
 800dc5a:	68b9      	ldr	r1, [r7, #8]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7f9 fe24 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800dc62:	f107 0310 	add.w	r3, r7, #16
 800dc66:	4619      	mov	r1, r3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f004 fa88 	bl	801217e <_ZNK10TestFilter5matchERK12SimpleString>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	461c      	mov	r4, r3
 800dc72:	f107 0310 	add.w	r3, r7, #16
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7fa f9cf 	bl	800801a <_ZN12SimpleStringD1Ev>
 800dc7c:	2c00      	cmp	r4, #0
 800dc7e:	d001      	beq.n	800dc84 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 800dc80:	2301      	movs	r3, #1
 800dc82:	e005      	b.n	800dc90 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f004 fa54 	bl	8012132 <_ZNK10TestFilter7getNextEv>
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	e7e0      	b.n	800dc50 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 800dc8e:	2300      	movs	r3, #0
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	371c      	adds	r7, #28
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd90      	pop	{r4, r7, pc}

0800dc98 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	68ba      	ldr	r2, [r7, #8]
 800dcaa:	4619      	mov	r1, r3
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f7ff ffc4 	bl	800dc3a <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d00b      	beq.n	800dcd0 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	687a      	ldr	r2, [r7, #4]
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f7ff ffba 	bl	800dc3a <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d001      	beq.n	800dcd0 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 800dccc:	2301      	movs	r3, #1
 800dcce:	e000      	b.n	800dcd2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 800dcda:	b590      	push	{r4, r7, lr}
 800dcdc:	b083      	sub	sp, #12
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
 800dce2:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	339c      	adds	r3, #156	; 0x9c
 800dcea:	681c      	ldr	r4, [r3, #0]
 800dcec:	f001 f8b0 	bl	800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	6839      	ldr	r1, [r7, #0]
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 800dcfa:	bf00      	nop
 800dcfc:	370c      	adds	r7, #12
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd90      	pop	{r4, r7, pc}

0800dd02 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b084      	sub	sp, #16
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	60f8      	str	r0, [r7, #12]
 800dd0a:	60b9      	str	r1, [r7, #8]
 800dd0c:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2201      	movs	r2, #1
 800dd12:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f001 f871 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	3234      	adds	r2, #52	; 0x34
 800dd20:	6812      	ldr	r2, [r2, #0]
 800dd22:	68b9      	ldr	r1, [r7, #8]
 800dd24:	4618      	mov	r0, r3
 800dd26:	4790      	blx	r2
    terminator.exitCurrentTest();
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800dd32:	bf00      	nop
 800dd34:	3710      	adds	r7, #16
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}

0800dd3a <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 800dd3a:	b580      	push	{r7, lr}
 800dd3c:	b082      	sub	sp, #8
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
 800dd42:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	6838      	ldr	r0, [r7, #0]
 800dd4c:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800dd4e:	bf00      	nop
 800dd50:	3708      	adds	r7, #8
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800dd56:	b590      	push	{r4, r7, lr}
 800dd58:	b09d      	sub	sp, #116	; 0x74
 800dd5a:	af04      	add	r7, sp, #16
 800dd5c:	60f8      	str	r0, [r7, #12]
 800dd5e:	607a      	str	r2, [r7, #4]
 800dd60:	603b      	str	r3, [r7, #0]
 800dd62:	460b      	mov	r3, r1
 800dd64:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	f001 f848 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	3228      	adds	r2, #40	; 0x28
 800dd72:	6812      	ldr	r2, [r2, #0]
 800dd74:	4618      	mov	r0, r3
 800dd76:	4790      	blx	r2
    if (!condition)
 800dd78:	7afb      	ldrb	r3, [r7, #11]
 800dd7a:	f083 0301 	eor.w	r3, r3, #1
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d03f      	beq.n	800de04 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	339c      	adds	r3, #156	; 0x9c
 800dd8a:	681c      	ldr	r4, [r3, #0]
 800dd8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dd90:	6879      	ldr	r1, [r7, #4]
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7f9 fd89 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800dd98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dd9c:	6839      	ldr	r1, [r7, #0]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7f9 fd83 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800dda4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dda8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7f9 fd7d 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800ddb0:	f107 0014 	add.w	r0, r7, #20
 800ddb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ddb8:	9302      	str	r3, [sp, #8]
 800ddba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ddbe:	9301      	str	r3, [sp, #4]
 800ddc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ddc4:	9300      	str	r3, [sp, #0]
 800ddc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddc8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ddca:	68f9      	ldr	r1, [r7, #12]
 800ddcc:	f7fb ff7c 	bl	8009cc8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800ddd0:	f107 0314 	add.w	r3, r7, #20
 800ddd4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	47a0      	blx	r4
 800dddc:	f107 0314 	add.w	r3, r7, #20
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7fc fddf 	bl	800a9a4 <_ZN12CheckFailureD1Ev>
 800dde6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fa f915 	bl	800801a <_ZN12SimpleStringD1Ev>
 800ddf0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fa f910 	bl	800801a <_ZN12SimpleStringD1Ev>
 800ddfa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fa f90b 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800de04:	bf00      	nop
 800de06:	3764      	adds	r7, #100	; 0x64
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd90      	pop	{r4, r7, pc}

0800de0c <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800de0c:	b590      	push	{r4, r7, lr}
 800de0e:	b097      	sub	sp, #92	; 0x5c
 800de10:	af02      	add	r7, sp, #8
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	60b9      	str	r1, [r7, #8]
 800de16:	607a      	str	r2, [r7, #4]
 800de18:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f000 ffee 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800de20:	4603      	mov	r3, r0
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	3228      	adds	r2, #40	; 0x28
 800de26:	6812      	ldr	r2, [r2, #0]
 800de28:	4618      	mov	r0, r3
 800de2a:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	339c      	adds	r3, #156	; 0x9c
 800de32:	681c      	ldr	r4, [r3, #0]
 800de34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de38:	68b9      	ldr	r1, [r7, #8]
 800de3a:	4618      	mov	r0, r3
 800de3c:	f7f9 fd35 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800de40:	f107 0014 	add.w	r0, r7, #20
 800de44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	687a      	ldr	r2, [r7, #4]
 800de4e:	68f9      	ldr	r1, [r7, #12]
 800de50:	f7fb ff82 	bl	8009d58 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800de54:	f107 0314 	add.w	r3, r7, #20
 800de58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de5a:	4619      	mov	r1, r3
 800de5c:	68f8      	ldr	r0, [r7, #12]
 800de5e:	47a0      	blx	r4
 800de60:	f107 0314 	add.w	r3, r7, #20
 800de64:	4618      	mov	r0, r3
 800de66:	f7f9 fa0f 	bl	8007288 <_ZN11FailFailureD1Ev>
 800de6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de6e:	4618      	mov	r0, r3
 800de70:	f7fa f8d3 	bl	800801a <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 800de74:	bf00      	nop
 800de76:	3754      	adds	r7, #84	; 0x54
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd90      	pop	{r4, r7, pc}

0800de7c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800de7c:	b590      	push	{r4, r7, lr}
 800de7e:	b0a7      	sub	sp, #156	; 0x9c
 800de80:	af04      	add	r7, sp, #16
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
 800de88:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800de8a:	68f8      	ldr	r0, [r7, #12]
 800de8c:	f000 ffb6 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800de90:	4603      	mov	r3, r0
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	3228      	adds	r2, #40	; 0x28
 800de96:	6812      	ldr	r2, [r2, #0]
 800de98:	4618      	mov	r0, r3
 800de9a:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d102      	bne.n	800dea8 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d068      	beq.n	800df7a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d002      	beq.n	800deb4 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d12a      	bne.n	800df0a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	339c      	adds	r3, #156	; 0x9c
 800deba:	681c      	ldr	r4, [r3, #0]
 800debc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dec0:	6839      	ldr	r1, [r7, #0]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7f9 fcf1 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800dec8:	f107 0010 	add.w	r0, r7, #16
 800decc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ded0:	9302      	str	r3, [sp, #8]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	9301      	str	r3, [sp, #4]
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	9300      	str	r3, [sp, #0]
 800deda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dede:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800dee2:	68f9      	ldr	r1, [r7, #12]
 800dee4:	f7fc f9be 	bl	800a264 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800dee8:	f107 0310 	add.w	r3, r7, #16
 800deec:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800def0:	4619      	mov	r1, r3
 800def2:	68f8      	ldr	r0, [r7, #12]
 800def4:	47a0      	blx	r4
 800def6:	f107 0310 	add.w	r3, r7, #16
 800defa:	4618      	mov	r0, r3
 800defc:	f7fc fcca 	bl	800a894 <_ZN18StringEqualFailureD1Ev>
 800df00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800df04:	4618      	mov	r0, r3
 800df06:	f7fa f888 	bl	800801a <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 800df0a:	6879      	ldr	r1, [r7, #4]
 800df0c:	68b8      	ldr	r0, [r7, #8]
 800df0e:	f7f9 fb09 	bl	8007524 <_ZN12SimpleString6StrCmpEPKcS1_>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	bf14      	ite	ne
 800df18:	2301      	movne	r3, #1
 800df1a:	2300      	moveq	r3, #0
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d02c      	beq.n	800df7c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	339c      	adds	r3, #156	; 0x9c
 800df28:	681c      	ldr	r4, [r3, #0]
 800df2a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800df2e:	6839      	ldr	r1, [r7, #0]
 800df30:	4618      	mov	r0, r3
 800df32:	f7f9 fcba 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800df36:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800df3a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800df3e:	9302      	str	r3, [sp, #8]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	9301      	str	r3, [sp, #4]
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800df4c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800df50:	68f9      	ldr	r1, [r7, #12]
 800df52:	f7fc f987 	bl	800a264 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800df56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df5a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800df5e:	4619      	mov	r1, r3
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	47a0      	blx	r4
 800df64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df68:	4618      	mov	r0, r3
 800df6a:	f7fc fc93 	bl	800a894 <_ZN18StringEqualFailureD1Ev>
 800df6e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800df72:	4618      	mov	r0, r3
 800df74:	f7fa f851 	bl	800801a <_ZN12SimpleStringD1Ev>
 800df78:	e000      	b.n	800df7c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800df7a:	bf00      	nop
}
 800df7c:	378c      	adds	r7, #140	; 0x8c
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd90      	pop	{r4, r7, pc}

0800df82 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800df82:	b590      	push	{r4, r7, lr}
 800df84:	b0a7      	sub	sp, #156	; 0x9c
 800df86:	af04      	add	r7, sp, #16
 800df88:	60f8      	str	r0, [r7, #12]
 800df8a:	60b9      	str	r1, [r7, #8]
 800df8c:	607a      	str	r2, [r7, #4]
 800df8e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800df90:	68f8      	ldr	r0, [r7, #12]
 800df92:	f000 ff33 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800df96:	4603      	mov	r3, r0
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	3228      	adds	r2, #40	; 0x28
 800df9c:	6812      	ldr	r2, [r2, #0]
 800df9e:	4618      	mov	r0, r3
 800dfa0:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d102      	bne.n	800dfae <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d06b      	beq.n	800e086 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d002      	beq.n	800dfba <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d12b      	bne.n	800e012 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	339c      	adds	r3, #156	; 0x9c
 800dfc0:	681c      	ldr	r4, [r3, #0]
 800dfc2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dfc6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7f9 fc6d 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800dfd0:	f107 0010 	add.w	r0, r7, #16
 800dfd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dfd8:	9302      	str	r3, [sp, #8]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	9301      	str	r3, [sp, #4]
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	9300      	str	r3, [sp, #0]
 800dfe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dfe6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800dfea:	68f9      	ldr	r1, [r7, #12]
 800dfec:	f7fc f93a 	bl	800a264 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800dff0:	f107 0310 	add.w	r3, r7, #16
 800dff4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800dff8:	4619      	mov	r1, r3
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	47a0      	blx	r4
 800dffe:	f107 0310 	add.w	r3, r7, #16
 800e002:	4618      	mov	r0, r3
 800e004:	f7fc fc46 	bl	800a894 <_ZN18StringEqualFailureD1Ev>
 800e008:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fa f804 	bl	800801a <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 800e012:	683a      	ldr	r2, [r7, #0]
 800e014:	6879      	ldr	r1, [r7, #4]
 800e016:	68b8      	ldr	r0, [r7, #8]
 800e018:	f7f9 fac3 	bl	80075a2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800e01c:	4603      	mov	r3, r0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	bf14      	ite	ne
 800e022:	2301      	movne	r3, #1
 800e024:	2300      	moveq	r3, #0
 800e026:	b2db      	uxtb	r3, r3
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d02d      	beq.n	800e088 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	339c      	adds	r3, #156	; 0x9c
 800e032:	681c      	ldr	r4, [r3, #0]
 800e034:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e038:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7f9 fc34 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e042:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800e046:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e04a:	9302      	str	r3, [sp, #8]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	9301      	str	r3, [sp, #4]
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	9300      	str	r3, [sp, #0]
 800e054:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e058:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e05c:	68f9      	ldr	r1, [r7, #12]
 800e05e:	f7fc f901 	bl	800a264 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800e062:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e066:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e06a:	4619      	mov	r1, r3
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	47a0      	blx	r4
 800e070:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e074:	4618      	mov	r0, r3
 800e076:	f7fc fc0d 	bl	800a894 <_ZN18StringEqualFailureD1Ev>
 800e07a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e07e:	4618      	mov	r0, r3
 800e080:	f7f9 ffcb 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e084:	e000      	b.n	800e088 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e086:	bf00      	nop
}
 800e088:	378c      	adds	r7, #140	; 0x8c
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd90      	pop	{r4, r7, pc}

0800e08e <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800e08e:	b590      	push	{r4, r7, lr}
 800e090:	b0ab      	sub	sp, #172	; 0xac
 800e092:	af04      	add	r7, sp, #16
 800e094:	60f8      	str	r0, [r7, #12]
 800e096:	60b9      	str	r1, [r7, #8]
 800e098:	607a      	str	r2, [r7, #4]
 800e09a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f000 fead 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	681a      	ldr	r2, [r3, #0]
 800e0a6:	3228      	adds	r2, #40	; 0x28
 800e0a8:	6812      	ldr	r2, [r2, #0]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d102      	bne.n	800e0ba <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d07c      	beq.n	800e1b4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d002      	beq.n	800e0c6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d128      	bne.n	800e118 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	3398      	adds	r3, #152	; 0x98
 800e0cc:	681c      	ldr	r4, [r3, #0]
 800e0ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e0d2:	6839      	ldr	r1, [r7, #0]
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7f9 fbe8 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e0da:	f107 0010 	add.w	r0, r7, #16
 800e0de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e0e2:	9302      	str	r3, [sp, #8]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	9301      	str	r3, [sp, #4]
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	9300      	str	r3, [sp, #0]
 800e0ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e0f0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e0f4:	68f9      	ldr	r1, [r7, #12]
 800e0f6:	f7fc f959 	bl	800a3ac <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800e0fa:	f107 0310 	add.w	r3, r7, #16
 800e0fe:	4619      	mov	r1, r3
 800e100:	68f8      	ldr	r0, [r7, #12]
 800e102:	47a0      	blx	r4
 800e104:	f107 0310 	add.w	r3, r7, #16
 800e108:	4618      	mov	r0, r3
 800e10a:	f7fc fba1 	bl	800a850 <_ZN24StringEqualNoCaseFailureD1Ev>
 800e10e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e112:	4618      	mov	r0, r3
 800e114:	f7f9 ff81 	bl	800801a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 800e118:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e11c:	68b9      	ldr	r1, [r7, #8]
 800e11e:	4618      	mov	r0, r3
 800e120:	f7f9 fbc3 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e124:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e128:	6879      	ldr	r1, [r7, #4]
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7f9 fbbd 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e130:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800e134:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e138:	4611      	mov	r1, r2
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7f9 ff94 	bl	8008068 <_ZNK12SimpleString12equalsNoCaseERKS_>
 800e140:	4603      	mov	r3, r0
 800e142:	f083 0301 	eor.w	r3, r3, #1
 800e146:	b2dc      	uxtb	r4, r3
 800e148:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7f9 ff64 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e152:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e156:	4618      	mov	r0, r3
 800e158:	f7f9 ff5f 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e15c:	2c00      	cmp	r4, #0
 800e15e:	d02a      	beq.n	800e1b6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	3398      	adds	r3, #152	; 0x98
 800e166:	681c      	ldr	r4, [r3, #0]
 800e168:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e16c:	6839      	ldr	r1, [r7, #0]
 800e16e:	4618      	mov	r0, r3
 800e170:	f7f9 fb9b 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e174:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800e178:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e17c:	9302      	str	r3, [sp, #8]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	9301      	str	r3, [sp, #4]
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	9300      	str	r3, [sp, #0]
 800e186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e18a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e18e:	68f9      	ldr	r1, [r7, #12]
 800e190:	f7fc f90c 	bl	800a3ac <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800e194:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e198:	4619      	mov	r1, r3
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	47a0      	blx	r4
 800e19e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fc fb54 	bl	800a850 <_ZN24StringEqualNoCaseFailureD1Ev>
 800e1a8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7f9 ff34 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e1b2:	e000      	b.n	800e1b6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e1b4:	bf00      	nop
}
 800e1b6:	379c      	adds	r7, #156	; 0x9c
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd90      	pop	{r4, r7, pc}

0800e1bc <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800e1bc:	b590      	push	{r4, r7, lr}
 800e1be:	b0b3      	sub	sp, #204	; 0xcc
 800e1c0:	af04      	add	r7, sp, #16
 800e1c2:	60f8      	str	r0, [r7, #12]
 800e1c4:	60b9      	str	r1, [r7, #8]
 800e1c6:	607a      	str	r2, [r7, #4]
 800e1c8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f000 fe16 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	3228      	adds	r2, #40	; 0x28
 800e1d6:	6812      	ldr	r2, [r2, #0]
 800e1d8:	4618      	mov	r0, r3
 800e1da:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d103      	bne.n	800e1ea <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f000 80ad 	beq.w	800e344 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d002      	beq.n	800e1f6 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d140      	bne.n	800e278 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	3398      	adds	r3, #152	; 0x98
 800e1fc:	681c      	ldr	r4, [r3, #0]
 800e1fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e202:	68b9      	ldr	r1, [r7, #8]
 800e204:	4618      	mov	r0, r3
 800e206:	f7f9 fb50 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e20a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e20e:	6879      	ldr	r1, [r7, #4]
 800e210:	4618      	mov	r0, r3
 800e212:	f7f9 fb4a 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e216:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e21a:	6839      	ldr	r1, [r7, #0]
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7f9 fb44 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e222:	f107 0010 	add.w	r0, r7, #16
 800e226:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e22a:	9302      	str	r3, [sp, #8]
 800e22c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e230:	9301      	str	r3, [sp, #4]
 800e232:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e236:	9300      	str	r3, [sp, #0]
 800e238:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e23c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e240:	68f9      	ldr	r1, [r7, #12]
 800e242:	f7fb fcf7 	bl	8009c34 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e246:	f107 0310 	add.w	r3, r7, #16
 800e24a:	4619      	mov	r1, r3
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	47a0      	blx	r4
 800e250:	f107 0310 	add.w	r3, r7, #16
 800e254:	4618      	mov	r0, r3
 800e256:	f7fc fbc7 	bl	800a9e8 <_ZN15ContainsFailureD1Ev>
 800e25a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e25e:	4618      	mov	r0, r3
 800e260:	f7f9 fedb 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e264:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e268:	4618      	mov	r0, r3
 800e26a:	f7f9 fed6 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e26e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e272:	4618      	mov	r0, r3
 800e274:	f7f9 fed1 	bl	800801a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 800e278:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e27c:	6879      	ldr	r1, [r7, #4]
 800e27e:	4618      	mov	r0, r3
 800e280:	f7f9 fb13 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e284:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e288:	68b9      	ldr	r1, [r7, #8]
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7f9 fb0d 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e290:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800e294:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e298:	4611      	mov	r1, r2
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7f9 fb83 	bl	80079a6 <_ZNK12SimpleString8containsERKS_>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	f083 0301 	eor.w	r3, r3, #1
 800e2a6:	b2dc      	uxtb	r4, r3
 800e2a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7f9 feb4 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e2b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f7f9 feaf 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e2bc:	2c00      	cmp	r4, #0
 800e2be:	d042      	beq.n	800e346 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	3398      	adds	r3, #152	; 0x98
 800e2c6:	681c      	ldr	r4, [r3, #0]
 800e2c8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e2cc:	68b9      	ldr	r1, [r7, #8]
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7f9 faeb 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e2d4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e2d8:	6879      	ldr	r1, [r7, #4]
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7f9 fae5 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e2e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e2e4:	6839      	ldr	r1, [r7, #0]
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7f9 fadf 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e2ec:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800e2f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e2f4:	9302      	str	r3, [sp, #8]
 800e2f6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e2fa:	9301      	str	r3, [sp, #4]
 800e2fc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e300:	9300      	str	r3, [sp, #0]
 800e302:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e306:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e30a:	68f9      	ldr	r1, [r7, #12]
 800e30c:	f7fb fc92 	bl	8009c34 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e310:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e314:	4619      	mov	r1, r3
 800e316:	68f8      	ldr	r0, [r7, #12]
 800e318:	47a0      	blx	r4
 800e31a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e31e:	4618      	mov	r0, r3
 800e320:	f7fc fb62 	bl	800a9e8 <_ZN15ContainsFailureD1Ev>
 800e324:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e328:	4618      	mov	r0, r3
 800e32a:	f7f9 fe76 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e32e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e332:	4618      	mov	r0, r3
 800e334:	f7f9 fe71 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e338:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7f9 fe6c 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e342:	e000      	b.n	800e346 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e344:	bf00      	nop
}
 800e346:	37bc      	adds	r7, #188	; 0xbc
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd90      	pop	{r4, r7, pc}

0800e34c <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800e34c:	b590      	push	{r4, r7, lr}
 800e34e:	b0b3      	sub	sp, #204	; 0xcc
 800e350:	af04      	add	r7, sp, #16
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	607a      	str	r2, [r7, #4]
 800e358:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e35a:	68f8      	ldr	r0, [r7, #12]
 800e35c:	f000 fd4e 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800e360:	4603      	mov	r3, r0
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	3228      	adds	r2, #40	; 0x28
 800e366:	6812      	ldr	r2, [r2, #0]
 800e368:	4618      	mov	r0, r3
 800e36a:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d103      	bne.n	800e37a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	2b00      	cmp	r3, #0
 800e376:	f000 80ad 	beq.w	800e4d4 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d002      	beq.n	800e386 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d140      	bne.n	800e408 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	3398      	adds	r3, #152	; 0x98
 800e38c:	681c      	ldr	r4, [r3, #0]
 800e38e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e392:	68b9      	ldr	r1, [r7, #8]
 800e394:	4618      	mov	r0, r3
 800e396:	f7f9 fa88 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e39a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e39e:	6879      	ldr	r1, [r7, #4]
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7f9 fa82 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e3a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e3aa:	6839      	ldr	r1, [r7, #0]
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7f9 fa7c 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e3b2:	f107 0010 	add.w	r0, r7, #16
 800e3b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e3ba:	9302      	str	r3, [sp, #8]
 800e3bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e3c0:	9301      	str	r3, [sp, #4]
 800e3c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e3c6:	9300      	str	r3, [sp, #0]
 800e3c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e3cc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e3d0:	68f9      	ldr	r1, [r7, #12]
 800e3d2:	f7fb fc2f 	bl	8009c34 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e3d6:	f107 0310 	add.w	r3, r7, #16
 800e3da:	4619      	mov	r1, r3
 800e3dc:	68f8      	ldr	r0, [r7, #12]
 800e3de:	47a0      	blx	r4
 800e3e0:	f107 0310 	add.w	r3, r7, #16
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fc faff 	bl	800a9e8 <_ZN15ContainsFailureD1Ev>
 800e3ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7f9 fe13 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e3f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7f9 fe0e 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e3fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e402:	4618      	mov	r0, r3
 800e404:	f7f9 fe09 	bl	800801a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 800e408:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e40c:	6879      	ldr	r1, [r7, #4]
 800e40e:	4618      	mov	r0, r3
 800e410:	f7f9 fa4b 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e414:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e418:	68b9      	ldr	r1, [r7, #8]
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7f9 fa45 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e420:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800e424:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e428:	4611      	mov	r1, r2
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7f9 fad6 	bl	80079dc <_ZNK12SimpleString14containsNoCaseERKS_>
 800e430:	4603      	mov	r3, r0
 800e432:	f083 0301 	eor.w	r3, r3, #1
 800e436:	b2dc      	uxtb	r4, r3
 800e438:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7f9 fdec 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e442:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e446:	4618      	mov	r0, r3
 800e448:	f7f9 fde7 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e44c:	2c00      	cmp	r4, #0
 800e44e:	d042      	beq.n	800e4d6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	3398      	adds	r3, #152	; 0x98
 800e456:	681c      	ldr	r4, [r3, #0]
 800e458:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e45c:	68b9      	ldr	r1, [r7, #8]
 800e45e:	4618      	mov	r0, r3
 800e460:	f7f9 fa23 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e464:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e468:	6879      	ldr	r1, [r7, #4]
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7f9 fa1d 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e470:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e474:	6839      	ldr	r1, [r7, #0]
 800e476:	4618      	mov	r0, r3
 800e478:	f7f9 fa17 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e47c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800e480:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e484:	9302      	str	r3, [sp, #8]
 800e486:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e48a:	9301      	str	r3, [sp, #4]
 800e48c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e490:	9300      	str	r3, [sp, #0]
 800e492:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e496:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e49a:	68f9      	ldr	r1, [r7, #12]
 800e49c:	f7fb fbca 	bl	8009c34 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e4a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	47a0      	blx	r4
 800e4aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fc fa9a 	bl	800a9e8 <_ZN15ContainsFailureD1Ev>
 800e4b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7f9 fdae 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e4be:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7f9 fda9 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e4c8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7f9 fda4 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e4d2:	e000      	b.n	800e4d6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e4d4:	bf00      	nop
}
 800e4d6:	37bc      	adds	r7, #188	; 0xbc
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd90      	pop	{r4, r7, pc}

0800e4dc <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e4dc:	b590      	push	{r4, r7, lr}
 800e4de:	b099      	sub	sp, #100	; 0x64
 800e4e0:	af04      	add	r7, sp, #16
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	60b9      	str	r1, [r7, #8]
 800e4e6:	607a      	str	r2, [r7, #4]
 800e4e8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f000 fc86 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	3228      	adds	r2, #40	; 0x28
 800e4f6:	6812      	ldr	r2, [r2, #0]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	4790      	blx	r2
    if (expected != actual)
 800e4fc:	68ba      	ldr	r2, [r7, #8]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	429a      	cmp	r2, r3
 800e502:	d027      	beq.n	800e554 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	339c      	adds	r3, #156	; 0x9c
 800e50a:	681c      	ldr	r4, [r3, #0]
 800e50c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e510:	6839      	ldr	r1, [r7, #0]
 800e512:	4618      	mov	r0, r3
 800e514:	f7f9 f9c9 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e518:	f107 0014 	add.w	r0, r7, #20
 800e51c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e520:	9302      	str	r3, [sp, #8]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	9301      	str	r3, [sp, #4]
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	9300      	str	r3, [sp, #0]
 800e52a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e52c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e52e:	68f9      	ldr	r1, [r7, #12]
 800e530:	f7fb fc30 	bl	8009d94 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 800e534:	f107 0314 	add.w	r3, r7, #20
 800e538:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e53a:	4619      	mov	r1, r3
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	47a0      	blx	r4
 800e540:	f107 0314 	add.w	r3, r7, #20
 800e544:	4618      	mov	r0, r3
 800e546:	f7fc fa0b 	bl	800a960 <_ZN17LongsEqualFailureD1Ev>
 800e54a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e54e:	4618      	mov	r0, r3
 800e550:	f7f9 fd63 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800e554:	bf00      	nop
 800e556:	3754      	adds	r7, #84	; 0x54
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd90      	pop	{r4, r7, pc}

0800e55c <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e55c:	b590      	push	{r4, r7, lr}
 800e55e:	b099      	sub	sp, #100	; 0x64
 800e560:	af04      	add	r7, sp, #16
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	607a      	str	r2, [r7, #4]
 800e568:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e56a:	68f8      	ldr	r0, [r7, #12]
 800e56c:	f000 fc46 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800e570:	4603      	mov	r3, r0
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	3228      	adds	r2, #40	; 0x28
 800e576:	6812      	ldr	r2, [r2, #0]
 800e578:	4618      	mov	r0, r3
 800e57a:	4790      	blx	r2
    if (expected != actual)
 800e57c:	68ba      	ldr	r2, [r7, #8]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	429a      	cmp	r2, r3
 800e582:	d027      	beq.n	800e5d4 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	339c      	adds	r3, #156	; 0x9c
 800e58a:	681c      	ldr	r4, [r3, #0]
 800e58c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e590:	6839      	ldr	r1, [r7, #0]
 800e592:	4618      	mov	r0, r3
 800e594:	f7f9 f989 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e598:	f107 0014 	add.w	r0, r7, #20
 800e59c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e5a0:	9302      	str	r3, [sp, #8]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	9301      	str	r3, [sp, #4]
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	9300      	str	r3, [sp, #0]
 800e5aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e5ae:	68f9      	ldr	r1, [r7, #12]
 800e5b0:	f7fb fcbc 	bl	8009f2c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 800e5b4:	f107 0314 	add.w	r3, r7, #20
 800e5b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	47a0      	blx	r4
 800e5c0:	f107 0314 	add.w	r3, r7, #20
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7fc f9a9 	bl	800a91c <_ZN25UnsignedLongsEqualFailureD1Ev>
 800e5ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7f9 fd23 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800e5d4:	bf00      	nop
 800e5d6:	3754      	adds	r7, #84	; 0x54
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd90      	pop	{r4, r7, pc}

0800e5dc <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e5dc:	b082      	sub	sp, #8
 800e5de:	b590      	push	{r4, r7, lr}
 800e5e0:	b099      	sub	sp, #100	; 0x64
 800e5e2:	af02      	add	r7, sp, #8
 800e5e4:	60f8      	str	r0, [r7, #12]
 800e5e6:	1d38      	adds	r0, r7, #4
 800e5e8:	e880 0006 	stmia.w	r0, {r1, r2}
 800e5ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 800e5ee:	68f8      	ldr	r0, [r7, #12]
 800e5f0:	f000 fc04 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	3228      	adds	r2, #40	; 0x28
 800e5fa:	6812      	ldr	r2, [r2, #0]
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	339c      	adds	r3, #156	; 0x9c
 800e606:	681c      	ldr	r4, [r3, #0]
 800e608:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e60c:	4919      	ldr	r1, [pc, #100]	; (800e674 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 800e60e:	4618      	mov	r0, r3
 800e610:	f7f9 f94b 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e614:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e618:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7f9 f945 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e620:	f107 0014 	add.w	r0, r7, #20
 800e624:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e628:	9301      	str	r3, [sp, #4]
 800e62a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e62e:	9300      	str	r3, [sp, #0]
 800e630:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e632:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e634:	68f9      	ldr	r1, [r7, #12]
 800e636:	f7fc f85f 	bl	800a6f8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 800e63a:	f107 0314 	add.w	r3, r7, #20
 800e63e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e642:	4619      	mov	r1, r3
 800e644:	68f8      	ldr	r0, [r7, #12]
 800e646:	47a0      	blx	r4
 800e648:	f107 0314 	add.w	r3, r7, #20
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7fc f899 	bl	800a784 <_ZN25FeatureUnsupportedFailureD1Ev>
 800e652:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e656:	4618      	mov	r0, r3
 800e658:	f7f9 fcdf 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e65c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e660:	4618      	mov	r0, r3
 800e662:	f7f9 fcda 	bl	800801a <_ZN12SimpleStringD1Ev>
#endif
}
 800e666:	bf00      	nop
 800e668:	375c      	adds	r7, #92	; 0x5c
 800e66a:	46bd      	mov	sp, r7
 800e66c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800e670:	b002      	add	sp, #8
 800e672:	4770      	bx	lr
 800e674:	080170d0 	.word	0x080170d0

0800e678 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e678:	b082      	sub	sp, #8
 800e67a:	b590      	push	{r4, r7, lr}
 800e67c:	b099      	sub	sp, #100	; 0x64
 800e67e:	af02      	add	r7, sp, #8
 800e680:	60f8      	str	r0, [r7, #12]
 800e682:	1d38      	adds	r0, r7, #4
 800e684:	e880 0006 	stmia.w	r0, {r1, r2}
 800e688:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 800e68a:	68f8      	ldr	r0, [r7, #12]
 800e68c:	f000 fbb6 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800e690:	4603      	mov	r3, r0
 800e692:	681a      	ldr	r2, [r3, #0]
 800e694:	3228      	adds	r2, #40	; 0x28
 800e696:	6812      	ldr	r2, [r2, #0]
 800e698:	4618      	mov	r0, r3
 800e69a:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	339c      	adds	r3, #156	; 0x9c
 800e6a2:	681c      	ldr	r4, [r3, #0]
 800e6a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e6a8:	4919      	ldr	r1, [pc, #100]	; (800e710 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7f9 f8fd 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e6b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e6b4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7f9 f8f7 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e6bc:	f107 0014 	add.w	r0, r7, #20
 800e6c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e6c4:	9301      	str	r3, [sp, #4]
 800e6c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e6ca:	9300      	str	r3, [sp, #0]
 800e6cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e6ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e6d0:	68f9      	ldr	r1, [r7, #12]
 800e6d2:	f7fc f811 	bl	800a6f8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 800e6d6:	f107 0314 	add.w	r3, r7, #20
 800e6da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e6de:	4619      	mov	r1, r3
 800e6e0:	68f8      	ldr	r0, [r7, #12]
 800e6e2:	47a0      	blx	r4
 800e6e4:	f107 0314 	add.w	r3, r7, #20
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7fc f84b 	bl	800a784 <_ZN25FeatureUnsupportedFailureD1Ev>
 800e6ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7f9 fc91 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e6f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7f9 fc8c 	bl	800801a <_ZN12SimpleStringD1Ev>
#endif
}
 800e702:	bf00      	nop
 800e704:	375c      	adds	r7, #92	; 0x5c
 800e706:	46bd      	mov	sp, r7
 800e708:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800e70c:	b002      	add	sp, #8
 800e70e:	4770      	bx	lr
 800e710:	080170d0 	.word	0x080170d0

0800e714 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e714:	b590      	push	{r4, r7, lr}
 800e716:	b099      	sub	sp, #100	; 0x64
 800e718:	af04      	add	r7, sp, #16
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	607b      	str	r3, [r7, #4]
 800e71e:	460b      	mov	r3, r1
 800e720:	72fb      	strb	r3, [r7, #11]
 800e722:	4613      	mov	r3, r2
 800e724:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 800e726:	68f8      	ldr	r0, [r7, #12]
 800e728:	f000 fb68 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800e72c:	4603      	mov	r3, r0
 800e72e:	681a      	ldr	r2, [r3, #0]
 800e730:	3228      	adds	r2, #40	; 0x28
 800e732:	6812      	ldr	r2, [r2, #0]
 800e734:	4618      	mov	r0, r3
 800e736:	4790      	blx	r2
    if (expected != actual)
 800e738:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800e73c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800e740:	429a      	cmp	r2, r3
 800e742:	d029      	beq.n	800e798 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	339c      	adds	r3, #156	; 0x9c
 800e74a:	681c      	ldr	r4, [r3, #0]
 800e74c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e750:	6879      	ldr	r1, [r7, #4]
 800e752:	4618      	mov	r0, r3
 800e754:	f7f9 f8a9 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e758:	f107 0014 	add.w	r0, r7, #20
 800e75c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e760:	9302      	str	r3, [sp, #8]
 800e762:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800e766:	9301      	str	r3, [sp, #4]
 800e768:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e76c:	9300      	str	r3, [sp, #0]
 800e76e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e770:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e772:	68f9      	ldr	r1, [r7, #12]
 800e774:	f7fb fca6 	bl	800a0c4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 800e778:	f107 0314 	add.w	r3, r7, #20
 800e77c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e77e:	4619      	mov	r1, r3
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	47a0      	blx	r4
 800e784:	f107 0314 	add.w	r3, r7, #20
 800e788:	4618      	mov	r0, r3
 800e78a:	f7fc f8a5 	bl	800a8d8 <_ZN23SignedBytesEqualFailureD1Ev>
 800e78e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e792:	4618      	mov	r0, r3
 800e794:	f7f9 fc41 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800e798:	bf00      	nop
 800e79a:	3754      	adds	r7, #84	; 0x54
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd90      	pop	{r4, r7, pc}

0800e7a0 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e7a0:	b590      	push	{r4, r7, lr}
 800e7a2:	b09d      	sub	sp, #116	; 0x74
 800e7a4:	af04      	add	r7, sp, #16
 800e7a6:	60f8      	str	r0, [r7, #12]
 800e7a8:	60b9      	str	r1, [r7, #8]
 800e7aa:	607a      	str	r2, [r7, #4]
 800e7ac:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f000 fb24 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	681a      	ldr	r2, [r3, #0]
 800e7b8:	3228      	adds	r2, #40	; 0x28
 800e7ba:	6812      	ldr	r2, [r2, #0]
 800e7bc:	4618      	mov	r0, r3
 800e7be:	4790      	blx	r2
    if (expected != actual)
 800e7c0:	68ba      	ldr	r2, [r7, #8]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d03f      	beq.n	800e848 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	339c      	adds	r3, #156	; 0x9c
 800e7ce:	681c      	ldr	r4, [r3, #0]
 800e7d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e7d4:	68b9      	ldr	r1, [r7, #8]
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7f9 feec 	bl	80085b4 <_Z10StringFromPKv>
 800e7dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e7e0:	6879      	ldr	r1, [r7, #4]
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7f9 fee6 	bl	80085b4 <_Z10StringFromPKv>
 800e7e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e7ec:	6839      	ldr	r1, [r7, #0]
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7f9 f85b 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e7f4:	f107 0014 	add.w	r0, r7, #20
 800e7f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e7fc:	9302      	str	r3, [sp, #8]
 800e7fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e802:	9301      	str	r3, [sp, #4]
 800e804:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e80c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e80e:	68f9      	ldr	r1, [r7, #12]
 800e810:	f7fb f826 	bl	8009860 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e814:	f107 0314 	add.w	r3, r7, #20
 800e818:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e81a:	4619      	mov	r1, r3
 800e81c:	68f8      	ldr	r0, [r7, #12]
 800e81e:	47a0      	blx	r4
 800e820:	f107 0314 	add.w	r3, r7, #20
 800e824:	4618      	mov	r0, r3
 800e826:	f7fc f967 	bl	800aaf8 <_ZN13EqualsFailureD1Ev>
 800e82a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e82e:	4618      	mov	r0, r3
 800e830:	f7f9 fbf3 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e834:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e838:	4618      	mov	r0, r3
 800e83a:	f7f9 fbee 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e83e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e842:	4618      	mov	r0, r3
 800e844:	f7f9 fbe9 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800e848:	bf00      	nop
 800e84a:	3764      	adds	r7, #100	; 0x64
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd90      	pop	{r4, r7, pc}

0800e850 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e850:	b590      	push	{r4, r7, lr}
 800e852:	b09d      	sub	sp, #116	; 0x74
 800e854:	af04      	add	r7, sp, #16
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	607a      	str	r2, [r7, #4]
 800e85c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e85e:	68f8      	ldr	r0, [r7, #12]
 800e860:	f000 facc 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800e864:	4603      	mov	r3, r0
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	3228      	adds	r2, #40	; 0x28
 800e86a:	6812      	ldr	r2, [r2, #0]
 800e86c:	4618      	mov	r0, r3
 800e86e:	4790      	blx	r2
    if (expected != actual)
 800e870:	68ba      	ldr	r2, [r7, #8]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	429a      	cmp	r2, r3
 800e876:	d03f      	beq.n	800e8f8 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	339c      	adds	r3, #156	; 0x9c
 800e87e:	681c      	ldr	r4, [r3, #0]
 800e880:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e884:	68b9      	ldr	r1, [r7, #8]
 800e886:	4618      	mov	r0, r3
 800e888:	f7f9 febe 	bl	8008608 <_Z10StringFromPFvvE>
 800e88c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e890:	6879      	ldr	r1, [r7, #4]
 800e892:	4618      	mov	r0, r3
 800e894:	f7f9 feb8 	bl	8008608 <_Z10StringFromPFvvE>
 800e898:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e89c:	6839      	ldr	r1, [r7, #0]
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7f9 f803 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e8a4:	f107 0014 	add.w	r0, r7, #20
 800e8a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e8ac:	9302      	str	r3, [sp, #8]
 800e8ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e8b2:	9301      	str	r3, [sp, #4]
 800e8b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e8b8:	9300      	str	r3, [sp, #0]
 800e8ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e8be:	68f9      	ldr	r1, [r7, #12]
 800e8c0:	f7fa ffce 	bl	8009860 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e8c4:	f107 0314 	add.w	r3, r7, #20
 800e8c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	47a0      	blx	r4
 800e8d0:	f107 0314 	add.w	r3, r7, #20
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7fc f90f 	bl	800aaf8 <_ZN13EqualsFailureD1Ev>
 800e8da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7f9 fb9b 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e8e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7f9 fb96 	bl	800801a <_ZN12SimpleStringD1Ev>
 800e8ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7f9 fb91 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800e8f8:	bf00      	nop
 800e8fa:	3764      	adds	r7, #100	; 0x64
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd90      	pop	{r4, r7, pc}

0800e900 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e900:	b590      	push	{r4, r7, lr}
 800e902:	b09d      	sub	sp, #116	; 0x74
 800e904:	af02      	add	r7, sp, #8
 800e906:	6278      	str	r0, [r7, #36]	; 0x24
 800e908:	ed87 0b06 	vstr	d0, [r7, #24]
 800e90c:	ed87 1b04 	vstr	d1, [r7, #16]
 800e910:	ed87 2b02 	vstr	d2, [r7, #8]
 800e914:	6239      	str	r1, [r7, #32]
 800e916:	607a      	str	r2, [r7, #4]
 800e918:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e91a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e91c:	f000 fa6e 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800e920:	4603      	mov	r3, r0
 800e922:	681a      	ldr	r2, [r3, #0]
 800e924:	3228      	adds	r2, #40	; 0x28
 800e926:	6812      	ldr	r2, [r2, #0]
 800e928:	4618      	mov	r0, r3
 800e92a:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 800e92c:	ed97 2b02 	vldr	d2, [r7, #8]
 800e930:	ed97 1b04 	vldr	d1, [r7, #16]
 800e934:	ed97 0b06 	vldr	d0, [r7, #24]
 800e938:	f7fe fd5c 	bl	800d3f4 <_Z13doubles_equalddd>
 800e93c:	4603      	mov	r3, r0
 800e93e:	f083 0301 	eor.w	r3, r3, #1
 800e942:	b2db      	uxtb	r3, r3
 800e944:	2b00      	cmp	r3, #0
 800e946:	d029      	beq.n	800e99c <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 800e948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	339c      	adds	r3, #156	; 0x9c
 800e94e:	681c      	ldr	r4, [r3, #0]
 800e950:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e954:	6a39      	ldr	r1, [r7, #32]
 800e956:	4618      	mov	r0, r3
 800e958:	f7f8 ffa7 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e95c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800e960:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e964:	9300      	str	r3, [sp, #0]
 800e966:	ed97 2b02 	vldr	d2, [r7, #8]
 800e96a:	ed97 1b04 	vldr	d1, [r7, #16]
 800e96e:	ed97 0b06 	vldr	d0, [r7, #24]
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	687a      	ldr	r2, [r7, #4]
 800e976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e978:	f7fa ffb4 	bl	80098e4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 800e97c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e980:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e982:	4619      	mov	r1, r3
 800e984:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e986:	47a0      	blx	r4
 800e988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7fc f891 	bl	800aab4 <_ZN19DoublesEqualFailureD1Ev>
 800e992:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e996:	4618      	mov	r0, r3
 800e998:	f7f9 fb3f 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800e99c:	bf00      	nop
 800e99e:	376c      	adds	r7, #108	; 0x6c
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd90      	pop	{r4, r7, pc}

0800e9a4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e9a4:	b590      	push	{r4, r7, lr}
 800e9a6:	b0a7      	sub	sp, #156	; 0x9c
 800e9a8:	af04      	add	r7, sp, #16
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	607a      	str	r2, [r7, #4]
 800e9b0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e9b2:	68f8      	ldr	r0, [r7, #12]
 800e9b4:	f000 fa22 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	681a      	ldr	r2, [r3, #0]
 800e9bc:	3228      	adds	r2, #40	; 0x28
 800e9be:	6812      	ldr	r2, [r2, #0]
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	4790      	blx	r2
	if (length == 0) return;
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d075      	beq.n	800eab6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d102      	bne.n	800e9d6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d071      	beq.n	800eaba <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d002      	beq.n	800e9e2 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d12d      	bne.n	800ea3e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	339c      	adds	r3, #156	; 0x9c
 800e9e8:	681c      	ldr	r4, [r3, #0]
 800e9ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e9ee:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7f8 ff59 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800e9f8:	f107 0010 	add.w	r0, r7, #16
 800e9fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ea00:	9303      	str	r3, [sp, #12]
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	9302      	str	r3, [sp, #8]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	9301      	str	r3, [sp, #4]
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	9300      	str	r3, [sp, #0]
 800ea0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ea12:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ea16:	68f9      	ldr	r1, [r7, #12]
 800ea18:	f7fb fd82 	bl	800a520 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 800ea1c:	f107 0310 	add.w	r3, r7, #16
 800ea20:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ea24:	4619      	mov	r1, r3
 800ea26:	68f8      	ldr	r0, [r7, #12]
 800ea28:	47a0      	blx	r4
 800ea2a:	f107 0310 	add.w	r3, r7, #16
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fb feec 	bl	800a80c <_ZN18BinaryEqualFailureD1Ev>
 800ea34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7f9 faee 	bl	800801a <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 800ea3e:	683a      	ldr	r2, [r7, #0]
 800ea40:	6879      	ldr	r1, [r7, #4]
 800ea42:	68b8      	ldr	r0, [r7, #8]
 800ea44:	f7f8 fe50 	bl	80076e8 <_ZN12SimpleString6MemCmpEPKvS1_j>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	bf14      	ite	ne
 800ea4e:	2301      	movne	r3, #1
 800ea50:	2300      	moveq	r3, #0
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d031      	beq.n	800eabc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	339c      	adds	r3, #156	; 0x9c
 800ea5e:	681c      	ldr	r4, [r3, #0]
 800ea60:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ea64:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7f8 ff1e 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800ea6e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800ea72:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ea76:	9303      	str	r3, [sp, #12]
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	9302      	str	r3, [sp, #8]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	9301      	str	r3, [sp, #4]
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	9300      	str	r3, [sp, #0]
 800ea84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ea88:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ea8c:	68f9      	ldr	r1, [r7, #12]
 800ea8e:	f7fb fd47 	bl	800a520 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 800ea92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ea96:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	68f8      	ldr	r0, [r7, #12]
 800ea9e:	47a0      	blx	r4
 800eaa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7fb feb1 	bl	800a80c <_ZN18BinaryEqualFailureD1Ev>
 800eaaa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7f9 fab3 	bl	800801a <_ZN12SimpleStringD1Ev>
 800eab4:	e002      	b.n	800eabc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 800eab6:	bf00      	nop
 800eab8:	e000      	b.n	800eabc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800eaba:	bf00      	nop
}
 800eabc:	378c      	adds	r7, #140	; 0x8c
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd90      	pop	{r4, r7, pc}

0800eac2 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800eac2:	b590      	push	{r4, r7, lr}
 800eac4:	b09b      	sub	sp, #108	; 0x6c
 800eac6:	af06      	add	r7, sp, #24
 800eac8:	60f8      	str	r0, [r7, #12]
 800eaca:	60b9      	str	r1, [r7, #8]
 800eacc:	607a      	str	r2, [r7, #4]
 800eace:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800ead0:	68f8      	ldr	r0, [r7, #12]
 800ead2:	f000 f993 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800ead6:	4603      	mov	r3, r0
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	3228      	adds	r2, #40	; 0x28
 800eadc:	6812      	ldr	r2, [r2, #0]
 800eade:	4618      	mov	r0, r3
 800eae0:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 800eae2:	68ba      	ldr	r2, [r7, #8]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	405a      	eors	r2, r3
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	4013      	ands	r3, r2
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d02b      	beq.n	800eb48 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	339c      	adds	r3, #156	; 0x9c
 800eaf6:	681c      	ldr	r4, [r3, #0]
 800eaf8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eafc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7f8 fed3 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800eb04:	f107 0014 	add.w	r0, r7, #20
 800eb08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eb0c:	9304      	str	r3, [sp, #16]
 800eb0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb10:	9303      	str	r3, [sp, #12]
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	9302      	str	r3, [sp, #8]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	9301      	str	r3, [sp, #4]
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	9300      	str	r3, [sp, #0]
 800eb1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eb22:	68f9      	ldr	r1, [r7, #12]
 800eb24:	f7fb fd8c 	bl	800a640 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 800eb28:	f107 0314 	add.w	r3, r7, #20
 800eb2c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800eb2e:	4619      	mov	r1, r3
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	47a0      	blx	r4
 800eb34:	f107 0314 	add.w	r3, r7, #20
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7fb fe45 	bl	800a7c8 <_ZN16BitsEqualFailureD1Ev>
 800eb3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7f9 fa69 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800eb48:	bf00      	nop
 800eb4a:	3754      	adds	r7, #84	; 0x54
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd90      	pop	{r4, r7, pc}

0800eb50 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 800eb50:	b590      	push	{r4, r7, lr}
 800eb52:	b09d      	sub	sp, #116	; 0x74
 800eb54:	af04      	add	r7, sp, #16
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	607a      	str	r2, [r7, #4]
 800eb5a:	603b      	str	r3, [r7, #0]
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800eb60:	68f8      	ldr	r0, [r7, #12]
 800eb62:	f000 f94b 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800eb66:	4603      	mov	r3, r0
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	3228      	adds	r2, #40	; 0x28
 800eb6c:	6812      	ldr	r2, [r2, #0]
 800eb6e:	4618      	mov	r0, r3
 800eb70:	4790      	blx	r2
    if (failed)
 800eb72:	7afb      	ldrb	r3, [r7, #11]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d03f      	beq.n	800ebf8 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	339c      	adds	r3, #156	; 0x9c
 800eb7e:	681c      	ldr	r4, [r3, #0]
 800eb80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eb84:	6879      	ldr	r1, [r7, #4]
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7f8 fe8f 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800eb8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800eb90:	6839      	ldr	r1, [r7, #0]
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7f8 fe89 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800eb98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eb9c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7f8 fe83 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800eba4:	f107 0014 	add.w	r0, r7, #20
 800eba8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ebac:	9302      	str	r3, [sp, #8]
 800ebae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ebb2:	9301      	str	r3, [sp, #4]
 800ebb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ebb8:	9300      	str	r3, [sp, #0]
 800ebba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ebbc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ebbe:	68f9      	ldr	r1, [r7, #12]
 800ebc0:	f7fa ff42 	bl	8009a48 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800ebc4:	f107 0314 	add.w	r3, r7, #20
 800ebc8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ebca:	4619      	mov	r1, r3
 800ebcc:	68f8      	ldr	r0, [r7, #12]
 800ebce:	47a0      	blx	r4
 800ebd0:	f107 0314 	add.w	r3, r7, #20
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7fb ff4b 	bl	800aa70 <_ZN17CheckEqualFailureD1Ev>
 800ebda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7f9 fa1b 	bl	800801a <_ZN12SimpleStringD1Ev>
 800ebe4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7f9 fa16 	bl	800801a <_ZN12SimpleStringD1Ev>
 800ebee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7f9 fa11 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800ebf8:	bf00      	nop
 800ebfa:	3764      	adds	r7, #100	; 0x64
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd90      	pop	{r4, r7, pc}

0800ec00 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 800ec00:	b590      	push	{r4, r7, lr}
 800ec02:	b09d      	sub	sp, #116	; 0x74
 800ec04:	af04      	add	r7, sp, #16
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	607a      	str	r2, [r7, #4]
 800ec0a:	603b      	str	r3, [r7, #0]
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800ec10:	68f8      	ldr	r0, [r7, #12]
 800ec12:	f000 f8f3 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800ec16:	4603      	mov	r3, r0
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	3228      	adds	r2, #40	; 0x28
 800ec1c:	6812      	ldr	r2, [r2, #0]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	4790      	blx	r2
    if (!comparison)
 800ec22:	7afb      	ldrb	r3, [r7, #11]
 800ec24:	f083 0301 	eor.w	r3, r3, #1
 800ec28:	b2db      	uxtb	r3, r3
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d03f      	beq.n	800ecae <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	339c      	adds	r3, #156	; 0x9c
 800ec34:	681c      	ldr	r4, [r3, #0]
 800ec36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ec3a:	6879      	ldr	r1, [r7, #4]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7f8 fe34 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800ec42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ec46:	6839      	ldr	r1, [r7, #0]
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7f8 fe2e 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800ec4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ec52:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7f8 fe28 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800ec5a:	f107 0014 	add.w	r0, r7, #20
 800ec5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ec62:	9302      	str	r3, [sp, #8]
 800ec64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ec68:	9301      	str	r3, [sp, #4]
 800ec6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ec6e:	9300      	str	r3, [sp, #0]
 800ec70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ec74:	68f9      	ldr	r1, [r7, #12]
 800ec76:	f7fa ff95 	bl	8009ba4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800ec7a:	f107 0314 	add.w	r3, r7, #20
 800ec7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ec80:	4619      	mov	r1, r3
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	47a0      	blx	r4
 800ec86:	f107 0314 	add.w	r3, r7, #20
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7fb fece 	bl	800aa2c <_ZN17ComparisonFailureD1Ev>
 800ec90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7f9 f9c0 	bl	800801a <_ZN12SimpleStringD1Ev>
 800ec9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7f9 f9bb 	bl	800801a <_ZN12SimpleStringD1Ev>
 800eca4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7f9 f9b6 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800ecae:	bf00      	nop
 800ecb0:	3764      	adds	r7, #100	; 0x64
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd90      	pop	{r4, r7, pc}
	...

0800ecb8 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 800ecb8:	b5b0      	push	{r4, r5, r7, lr}
 800ecba:	b088      	sub	sp, #32
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	60b9      	str	r1, [r7, #8]
 800ecc2:	607a      	str	r2, [r7, #4]
 800ecc4:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 800ecc6:	f107 0310 	add.w	r3, r7, #16
 800ecca:	4924      	ldr	r1, [pc, #144]	; (800ed5c <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7f8 fdec 	bl	80078aa <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 800ecd2:	f107 0310 	add.w	r3, r7, #16
 800ecd6:	6879      	ldr	r1, [r7, #4]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7f9 fa2d 	bl	8008138 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 800ecde:	f107 0310 	add.w	r3, r7, #16
 800ece2:	491f      	ldr	r1, [pc, #124]	; (800ed60 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7f9 fa27 	bl	8008138 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 800ecea:	f107 0318 	add.w	r3, r7, #24
 800ecee:	6839      	ldr	r1, [r7, #0]
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7f9 fe47 	bl	8008984 <_Z10StringFromj>
 800ecf6:	f107 0218 	add.w	r2, r7, #24
 800ecfa:	f107 0310 	add.w	r3, r7, #16
 800ecfe:	4611      	mov	r1, r2
 800ed00:	4618      	mov	r0, r3
 800ed02:	f7f9 fa07 	bl	8008114 <_ZN12SimpleStringpLERKS_>
 800ed06:	f107 0318 	add.w	r3, r7, #24
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7f9 f985 	bl	800801a <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 800ed10:	f107 0310 	add.w	r3, r7, #16
 800ed14:	4913      	ldr	r1, [pc, #76]	; (800ed64 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7f9 fa0e 	bl	8008138 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 800ed1c:	f107 0310 	add.w	r3, r7, #16
 800ed20:	68b9      	ldr	r1, [r7, #8]
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7f9 fa08 	bl	8008138 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 800ed28:	68f8      	ldr	r0, [r7, #12]
 800ed2a:	f000 f867 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800ed2e:	4604      	mov	r4, r0
 800ed30:	6823      	ldr	r3, [r4, #0]
 800ed32:	3338      	adds	r3, #56	; 0x38
 800ed34:	681d      	ldr	r5, [r3, #0]
 800ed36:	f107 0310 	add.w	r3, r7, #16
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7f9 f940 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800ed40:	4603      	mov	r3, r0
 800ed42:	4619      	mov	r1, r3
 800ed44:	4620      	mov	r0, r4
 800ed46:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 800ed48:	f107 0310 	add.w	r3, r7, #16
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f7f9 f964 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800ed52:	bf00      	nop
 800ed54:	3720      	adds	r7, #32
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bdb0      	pop	{r4, r5, r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	080170e8 	.word	0x080170e8
 800ed60:	080170ec 	.word	0x080170ec
 800ed64:	080170f0 	.word	0x080170f0

0800ed68 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 800ed68:	b590      	push	{r4, r7, lr}
 800ed6a:	b085      	sub	sp, #20
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	60b9      	str	r1, [r7, #8]
 800ed72:	607a      	str	r2, [r7, #4]
 800ed74:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	3370      	adds	r3, #112	; 0x70
 800ed7c:	681c      	ldr	r4, [r3, #0]
 800ed7e:	68b8      	ldr	r0, [r7, #8]
 800ed80:	f7f9 f91e 	bl	8007fc0 <_ZNK12SimpleString12asCharStringEv>
 800ed84:	4601      	mov	r1, r0
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	68f8      	ldr	r0, [r7, #12]
 800ed8c:	47a0      	blx	r4
}
 800ed8e:	bf00      	nop
 800ed90:	3714      	adds	r7, #20
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd90      	pop	{r4, r7, pc}

0800ed96 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b082      	sub	sp, #8
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
 800ed9e:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f000 f82b 	bl	800edfc <_ZN10UtestShell13getTestResultEv>
 800eda6:	4603      	mov	r3, r0
 800eda8:	681a      	ldr	r2, [r3, #0]
 800edaa:	323c      	adds	r2, #60	; 0x3c
 800edac:	6812      	ldr	r2, [r2, #0]
 800edae:	6839      	ldr	r1, [r7, #0]
 800edb0:	4618      	mov	r0, r3
 800edb2:	4790      	blx	r2
}
 800edb4:	bf00      	nop
 800edb6:	3708      	adds	r7, #8
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 800edc6:	4a04      	ldr	r2, [pc, #16]	; (800edd8 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	6013      	str	r3, [r2, #0]
}
 800edcc:	bf00      	nop
 800edce:	370c      	adds	r7, #12
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr
 800edd8:	200007c4 	.word	0x200007c4

0800eddc <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 800ede6:	4a04      	ldr	r2, [pc, #16]	; (800edf8 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	6013      	str	r3, [r2, #0]
}
 800edec:	bf00      	nop
 800edee:	370c      	adds	r7, #12
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr
 800edf8:	200007c8 	.word	0x200007c8

0800edfc <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 800ee04:	4b09      	ldr	r3, [pc, #36]	; (800ee2c <_ZN10UtestShell13getTestResultEv+0x30>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d109      	bne.n	800ee20 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 800ee0c:	f7fe fbc4 	bl	800d598 <_ZN22OutsideTestRunnerUTest8instanceEv>
 800ee10:	4603      	mov	r3, r0
 800ee12:	681a      	ldr	r2, [r3, #0]
 800ee14:	32a4      	adds	r2, #164	; 0xa4
 800ee16:	6812      	ldr	r2, [r2, #0]
 800ee18:	4618      	mov	r0, r3
 800ee1a:	4790      	blx	r2
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	e001      	b.n	800ee24 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 800ee20:	4b02      	ldr	r3, [pc, #8]	; (800ee2c <_ZN10UtestShell13getTestResultEv+0x30>)
 800ee22:	681b      	ldr	r3, [r3, #0]
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3708      	adds	r7, #8
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	200007c4 	.word	0x200007c4

0800ee30 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 800ee34:	4b05      	ldr	r3, [pc, #20]	; (800ee4c <_ZN10UtestShell10getCurrentEv+0x1c>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d103      	bne.n	800ee44 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 800ee3c:	f7fe fbac 	bl	800d598 <_ZN22OutsideTestRunnerUTest8instanceEv>
 800ee40:	4603      	mov	r3, r0
 800ee42:	e001      	b.n	800ee48 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 800ee44:	4b01      	ldr	r3, [pc, #4]	; (800ee4c <_ZN10UtestShell10getCurrentEv+0x1c>)
 800ee46:	681b      	ldr	r3, [r3, #0]
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	200007c8 	.word	0x200007c8

0800ee50 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 800ee50:	b480      	push	{r7}
 800ee52:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 800ee54:	4b03      	ldr	r3, [pc, #12]	; (800ee64 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 800ee56:	681b      	ldr	r3, [r3, #0]
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop
 800ee64:	20000090 	.word	0x20000090

0800ee68 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 800ee68:	b480      	push	{r7}
 800ee6a:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 800ee6c:	4b03      	ldr	r3, [pc, #12]	; (800ee7c <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 800ee6e:	4a04      	ldr	r2, [pc, #16]	; (800ee80 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 800ee70:	601a      	str	r2, [r3, #0]
}
 800ee72:	bf00      	nop
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr
 800ee7c:	20000090 	.word	0x20000090
 800ee80:	2000008c 	.word	0x2000008c

0800ee84 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	4a04      	ldr	r2, [pc, #16]	; (800eea0 <_ZN5UtestC1Ev+0x1c>)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	601a      	str	r2, [r3, #0]
{
}
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	4618      	mov	r0, r3
 800ee96:	370c      	adds	r7, #12
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr
 800eea0:	08018fe0 	.word	0x08018fe0

0800eea4 <_ZN5UtestD1Ev>:

Utest::~Utest()
 800eea4:	b480      	push	{r7}
 800eea6:	b083      	sub	sp, #12
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	4a04      	ldr	r2, [pc, #16]	; (800eec0 <_ZN5UtestD1Ev+0x1c>)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	601a      	str	r2, [r3, #0]
{
}
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	370c      	adds	r7, #12
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr
 800eec0:	08018fe0 	.word	0x08018fe0

0800eec4 <_ZN5UtestD0Ev>:
Utest::~Utest()
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
}
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f7ff ffe9 	bl	800eea4 <_ZN5UtestD1Ev>
 800eed2:	2104      	movs	r1, #4
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f7f7 fe13 	bl	8006b00 <_ZdlPvj>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	4618      	mov	r0, r3
 800eede:	3708      	adds	r7, #8
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}

0800eee4 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 800eeec:	4b0d      	ldr	r3, [pc, #52]	; (800ef24 <_ZN5Utest3runEv+0x40>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	6879      	ldr	r1, [r7, #4]
 800eef2:	480d      	ldr	r0, [pc, #52]	; (800ef28 <_ZN5Utest3runEv+0x44>)
 800eef4:	4798      	blx	r3
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	bf14      	ite	ne
 800eefc:	2301      	movne	r3, #1
 800eefe:	2300      	moveq	r3, #0
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d004      	beq.n	800ef10 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 800ef06:	4b07      	ldr	r3, [pc, #28]	; (800ef24 <_ZN5Utest3runEv+0x40>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	6879      	ldr	r1, [r7, #4]
 800ef0c:	4807      	ldr	r0, [pc, #28]	; (800ef2c <_ZN5Utest3runEv+0x48>)
 800ef0e:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 800ef10:	4b04      	ldr	r3, [pc, #16]	; (800ef24 <_ZN5Utest3runEv+0x40>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	6879      	ldr	r1, [r7, #4]
 800ef16:	4806      	ldr	r0, [pc, #24]	; (800ef30 <_ZN5Utest3runEv+0x4c>)
 800ef18:	4798      	blx	r3
}
 800ef1a:	bf00      	nop
 800ef1c:	3708      	adds	r7, #8
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop
 800ef24:	200000a0 	.word	0x200000a0
 800ef28:	0800d5f5 	.word	0x0800d5f5
 800ef2c:	0800d611 	.word	0x0800d611
 800ef30:	0800d62d 	.word	0x0800d62d

0800ef34 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
}
 800ef3c:	bf00      	nop
 800ef3e:	370c      	adds	r7, #12
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr

0800ef48 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
}
 800ef50:	bf00      	nop
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
}
 800ef64:	bf00      	nop
 800ef66:	370c      	adds	r7, #12
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr

0800ef70 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	4a04      	ldr	r2, [pc, #16]	; (800ef8c <_ZN14TestTerminatorD1Ev+0x1c>)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	601a      	str	r2, [r3, #0]
{
}
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	4618      	mov	r0, r3
 800ef82:	370c      	adds	r7, #12
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr
 800ef8c:	08018fcc 	.word	0x08018fcc

0800ef90 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b084      	sub	sp, #16
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 800ef98:	2300      	movs	r3, #0
 800ef9a:	60fb      	str	r3, [r7, #12]
 800ef9c:	f107 030c 	add.w	r3, r7, #12
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7f7 ff6f 	bl	8006e84 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800efa6:	f107 030c 	add.w	r3, r7, #12
 800efaa:	4618      	mov	r0, r3
 800efac:	f000 f82c 	bl	800f008 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 800efb0:	f107 030c 	add.w	r3, r7, #12
 800efb4:	4618      	mov	r0, r3
 800efb6:	f000 f835 	bl	800f024 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 800efba:	bf00      	nop
 800efbc:	3710      	adds	r7, #16
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}
	...

0800efc4 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	4a05      	ldr	r2, [pc, #20]	; (800efe4 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	601a      	str	r2, [r3, #0]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7ff ffcb 	bl	800ef70 <_ZN14TestTerminatorD1Ev>
{
}
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	4618      	mov	r0, r3
 800efde:	3708      	adds	r7, #8
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	08018fb8 	.word	0x08018fb8

0800efe8 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
}
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f7ff ffe7 	bl	800efc4 <_ZN20NormalTestTerminatorD1Ev>
 800eff6:	2104      	movs	r1, #4
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f7f7 fd81 	bl	8006b00 <_ZdlPvj>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	4618      	mov	r0, r3
 800f002:	3708      	adds	r7, #8
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 800f010:	4b03      	ldr	r3, [pc, #12]	; (800f020 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800f016:	bf00      	nop
 800f018:	3708      	adds	r7, #8
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop
 800f020:	2000009c 	.word	0x2000009c

0800f024 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 800f024:	b580      	push	{r7, lr}
 800f026:	b082      	sub	sp, #8
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	4a05      	ldr	r2, [pc, #20]	; (800f044 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	601a      	str	r2, [r3, #0]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	4618      	mov	r0, r3
 800f036:	f7ff ff9b 	bl	800ef70 <_ZN14TestTerminatorD1Ev>
{
}
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	4618      	mov	r0, r3
 800f03e:	3708      	adds	r7, #8
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	08018fa4 	.word	0x08018fa4

0800f048 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 800f048:	b580      	push	{r7, lr}
 800f04a:	b082      	sub	sp, #8
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
}
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f7ff ffe7 	bl	800f024 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800f056:	2104      	movs	r1, #4
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f7f7 fd51 	bl	8006b00 <_ZdlPvj>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	4618      	mov	r0, r3
 800f062:	3708      	adds	r7, #8
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 800f070:	f7fe fbbc 	bl	800d7ec <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4618      	mov	r0, r3
 800f078:	f7ff ff8a 	bl	800ef90 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 800f07c:	bf00      	nop
 800f07e:	3708      	adds	r7, #8
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}

0800f084 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	4a05      	ldr	r2, [pc, #20]	; (800f0a4 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	601a      	str	r2, [r3, #0]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	4618      	mov	r0, r3
 800f096:	f7ff ff95 	bl	800efc4 <_ZN20NormalTestTerminatorD1Ev>
{
}
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	4618      	mov	r0, r3
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	08018f90 	.word	0x08018f90

0800f0a8 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
}
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f7ff ffe7 	bl	800f084 <_ZN22CrashingTestTerminatorD1Ev>
 800f0b6:	2104      	movs	r1, #4
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f7f7 fd21 	bl	8006b00 <_ZdlPvj>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	601a      	str	r2, [r3, #0]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d007      	beq.n	800f0f4 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	3310      	adds	r3, #16
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	6838      	ldr	r0, [r7, #0]
 800f0ee:	4798      	blx	r3
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	e000      	b.n	800f0f6 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	687a      	ldr	r2, [r7, #4]
 800f0f8:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d02d      	beq.n	800f15e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d201      	bcs.n	800f112 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 800f10e:	009b      	lsls	r3, r3, #2
 800f110:	e001      	b.n	800f116 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 800f112:	f04f 33ff 	mov.w	r3, #4294967295
 800f116:	f240 3237 	movw	r2, #823	; 0x337
 800f11a:	4914      	ldr	r1, [pc, #80]	; (800f16c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7f7 fcff 	bl	8006b20 <_ZnajPKci>
 800f122:	4602      	mov	r2, r0
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800f12c:	2300      	movs	r3, #0
 800f12e:	60bb      	str	r3, [r7, #8]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	68ba      	ldr	r2, [r7, #8]
 800f136:	429a      	cmp	r2, r3
 800f138:	d212      	bcs.n	800f160 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	009b      	lsls	r3, r3, #2
 800f142:	4413      	add	r3, r2
 800f144:	68fa      	ldr	r2, [r7, #12]
 800f146:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	330c      	adds	r3, #12
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	68f8      	ldr	r0, [r7, #12]
 800f152:	4798      	blx	r3
 800f154:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	3301      	adds	r3, #1
 800f15a:	60bb      	str	r3, [r7, #8]
 800f15c:	e7e8      	b.n	800f130 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 800f15e:	bf00      	nop
    }
}
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4618      	mov	r0, r3
 800f164:	3710      	adds	r7, #16
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	08016f78 	.word	0x08016f78

0800f170 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d004      	beq.n	800f18a <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	4618      	mov	r0, r3
 800f186:	f7f7 fcdf 	bl	8006b48 <_ZdaPv>
}
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	4618      	mov	r0, r3
 800f18e:	3708      	adds	r7, #8
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 800f194:	b480      	push	{r7}
 800f196:	b087      	sub	sp, #28
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	60b9      	str	r1, [r7, #8]
 800f19e:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	009b      	lsls	r3, r3, #2
 800f1a8:	4413      	add	r3, r2
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	009b      	lsls	r3, r3, #2
 800f1b6:	4413      	add	r3, r2
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	009b      	lsls	r3, r3, #2
 800f1c4:	4413      	add	r3, r2
 800f1c6:	697a      	ldr	r2, [r7, #20]
 800f1c8:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	009b      	lsls	r3, r3, #2
 800f1d2:	4413      	add	r3, r2
 800f1d4:	693a      	ldr	r2, [r7, #16]
 800f1d6:	601a      	str	r2, [r3, #0]
}
 800f1d8:	bf00      	nop
 800f1da:	371c      	adds	r7, #28
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr

0800f1e4 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b084      	sub	sp, #16
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	685b      	ldr	r3, [r3, #4]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d028      	beq.n	800f248 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 800f1f6:	4b17      	ldr	r3, [pc, #92]	; (800f254 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	6838      	ldr	r0, [r7, #0]
 800f1fc:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	3b01      	subs	r3, #1
 800f204:	60fb      	str	r3, [r7, #12]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d019      	beq.n	800f240 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d01b      	beq.n	800f24c <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 800f214:	4b10      	ldr	r3, [pc, #64]	; (800f258 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	4798      	blx	r3
 800f21a:	4603      	mov	r3, r0
 800f21c:	461a      	mov	r2, r3
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	3301      	adds	r3, #1
 800f222:	fbb2 f1f3 	udiv	r1, r2, r3
 800f226:	fb03 f301 	mul.w	r3, r3, r1
 800f22a:	1ad3      	subs	r3, r2, r3
 800f22c:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 800f22e:	68ba      	ldr	r2, [r7, #8]
 800f230:	68f9      	ldr	r1, [r7, #12]
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f7ff ffae 	bl	800f194 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	3b01      	subs	r3, #1
 800f23c:	60fb      	str	r3, [r7, #12]
 800f23e:	e7e2      	b.n	800f206 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 f834 	bl	800f2ae <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 800f246:	e002      	b.n	800f24e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 800f248:	bf00      	nop
 800f24a:	e000      	b.n	800f24e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 800f24c:	bf00      	nop
}
 800f24e:	3710      	adds	r7, #16
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	200000d8 	.word	0x200000d8
 800f258:	200000dc 	.word	0x200000dc

0800f25c <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b086      	sub	sp, #24
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d01c      	beq.n	800f2a6 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	085b      	lsrs	r3, r3, #1
 800f272:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 800f274:	2300      	movs	r3, #0
 800f276:	617b      	str	r3, [r7, #20]
 800f278:	697a      	ldr	r2, [r7, #20]
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d20e      	bcs.n	800f29e <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	685a      	ldr	r2, [r3, #4]
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	1ad3      	subs	r3, r2, r3
 800f288:	3b01      	subs	r3, #1
 800f28a:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 800f28c:	68fa      	ldr	r2, [r7, #12]
 800f28e:	6979      	ldr	r1, [r7, #20]
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f7ff ff7f 	bl	800f194 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	3301      	adds	r3, #1
 800f29a:	617b      	str	r3, [r7, #20]
 800f29c:	e7ec      	b.n	800f278 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f000 f805 	bl	800f2ae <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 800f2a4:	e000      	b.n	800f2a8 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 800f2a6:	bf00      	nop
}
 800f2a8:	3718      	adds	r7, #24
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}

0800f2ae <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b084      	sub	sp, #16
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	60bb      	str	r3, [r7, #8]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	68ba      	ldr	r2, [r7, #8]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d221      	bcs.n	800f30c <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6859      	ldr	r1, [r3, #4]
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	1acb      	subs	r3, r1, r3
 800f2d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f2d8:	3b01      	subs	r3, #1
 800f2da:	009b      	lsls	r3, r3, #2
 800f2dc:	4413      	add	r3, r2
 800f2de:	6818      	ldr	r0, [r3, #0]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681a      	ldr	r2, [r3, #0]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6859      	ldr	r1, [r3, #4]
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	1acb      	subs	r3, r1, r3
 800f2ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f2f0:	3b01      	subs	r3, #1
 800f2f2:	009b      	lsls	r3, r3, #2
 800f2f4:	4413      	add	r3, r2
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	3308      	adds	r3, #8
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	68f9      	ldr	r1, [r7, #12]
 800f300:	4798      	blx	r3
 800f302:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	3301      	adds	r3, #1
 800f308:	60bb      	str	r3, [r7, #8]
 800f30a:	e7d8      	b.n	800f2be <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 800f30c:	bf00      	nop
 800f30e:	3710      	adds	r7, #16
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
    return get(0);
 800f31c:	2100      	movs	r1, #0
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f000 f805 	bl	800f32e <_ZNK22UtestShellPointerArray3getEj>
 800f324:	4603      	mov	r3, r0
}
 800f326:	4618      	mov	r0, r3
 800f328:	3708      	adds	r7, #8
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}

0800f32e <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 800f32e:	b480      	push	{r7}
 800f330:	b083      	sub	sp, #12
 800f332:	af00      	add	r7, sp, #0
 800f334:	6078      	str	r0, [r7, #4]
 800f336:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	683a      	ldr	r2, [r7, #0]
 800f33e:	429a      	cmp	r2, r3
 800f340:	d301      	bcc.n	800f346 <_ZNK22UtestShellPointerArray3getEj+0x18>
 800f342:	2300      	movs	r3, #0
 800f344:	e005      	b.n	800f352 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	4413      	add	r3, r2
 800f350:	681b      	ldr	r3, [r3, #0]
}
 800f352:	4618      	mov	r0, r3
 800f354:	370c      	adds	r7, #12
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr
	...

0800f360 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 800f360:	b580      	push	{r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	60f8      	str	r0, [r7, #12]
 800f368:	60b9      	str	r1, [r7, #8]
 800f36a:	607a      	str	r2, [r7, #4]
 800f36c:	603b      	str	r3, [r7, #0]
 800f36e:	4a10      	ldr	r2, [pc, #64]	; (800f3b0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 800f374:	6879      	ldr	r1, [r7, #4]
 800f376:	68b8      	ldr	r0, [r7, #8]
 800f378:	f7fe fc28 	bl	800dbcc <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 800f37c:	6839      	ldr	r1, [r7, #0]
 800f37e:	68b8      	ldr	r0, [r7, #8]
 800f380:	f7fe fc32 	bl	800dbe8 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 800f384:	69b9      	ldr	r1, [r7, #24]
 800f386:	68b8      	ldr	r0, [r7, #8]
 800f388:	f7fe fc04 	bl	800db94 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 800f38c:	69f9      	ldr	r1, [r7, #28]
 800f38e:	68b8      	ldr	r0, [r7, #8]
 800f390:	f7fe fc0e 	bl	800dbb0 <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 800f394:	f7fd fc32 	bl	800cbfc <_ZN12TestRegistry18getCurrentRegistryEv>
 800f398:	4603      	mov	r3, r0
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	3208      	adds	r2, #8
 800f39e:	6812      	ldr	r2, [r2, #0]
 800f3a0:	68b9      	ldr	r1, [r7, #8]
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	4790      	blx	r2
}
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3710      	adds	r7, #16
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	08018ed4 	.word	0x08018ed4

0800f3b4 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 800f3b4:	b480      	push	{r7}
 800f3b6:	b083      	sub	sp, #12
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
 800f3bc:	4a04      	ldr	r2, [pc, #16]	; (800f3d0 <_ZN13TestInstallerD1Ev+0x1c>)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	601a      	str	r2, [r3, #0]
{
}
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	370c      	adds	r7, #12
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr
 800f3d0:	08018ed4 	.word	0x08018ed4

0800f3d4 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
}
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f7ff ffe9 	bl	800f3b4 <_ZN13TestInstallerD1Ev>
 800f3e2:	2104      	movs	r1, #4
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f7f7 fb8b 	bl	8006b00 <_ZdlPvj>
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3708      	adds	r7, #8
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d10a      	bne.n	800f41a <_Z41__static_initialization_and_destruction_0ii+0x26>
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d105      	bne.n	800f41a <_Z41__static_initialization_and_destruction_0ii+0x26>
 800f40e:	4805      	ldr	r0, [pc, #20]	; (800f424 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800f410:	f7ff fe38 	bl	800f084 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 800f414:	4804      	ldr	r0, [pc, #16]	; (800f428 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800f416:	f7ff fdd5 	bl	800efc4 <_ZN20NormalTestTerminatorD1Ev>
}
 800f41a:	bf00      	nop
 800f41c:	3708      	adds	r7, #8
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	2000008c 	.word	0x2000008c
 800f428:	20000088 	.word	0x20000088

0800f42c <_GLOBAL__sub_I__Z13doubles_equalddd>:
 800f42c:	b580      	push	{r7, lr}
 800f42e:	af00      	add	r7, sp, #0
 800f430:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f434:	2001      	movs	r0, #1
 800f436:	f7ff ffdd 	bl	800f3f4 <_Z41__static_initialization_and_destruction_0ii>
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <_GLOBAL__sub_D__Z13doubles_equalddd>:
 800f43c:	b580      	push	{r7, lr}
 800f43e:	af00      	add	r7, sp, #0
 800f440:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f444:	2000      	movs	r0, #0
 800f446:	f7ff ffd5 	bl	800f3f4 <_Z41__static_initialization_and_destruction_0ii>
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 800f44c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f44e:	b083      	sub	sp, #12
 800f450:	af00      	add	r7, sp, #0
 800f452:	ed87 0b00 	vstr	d0, [r7]
 800f456:	683c      	ldr	r4, [r7, #0]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800f45e:	2301      	movs	r3, #1
 800f460:	461e      	mov	r6, r3
 800f462:	f04f 32ff 	mov.w	r2, #4294967295
 800f466:	4b10      	ldr	r3, [pc, #64]	; (800f4a8 <_ZSt5isinfd+0x5c>)
 800f468:	4620      	mov	r0, r4
 800f46a:	4629      	mov	r1, r5
 800f46c:	f7f1 f98c 	bl	8000788 <__aeabi_dcmpun>
 800f470:	4603      	mov	r3, r0
 800f472:	2b00      	cmp	r3, #0
 800f474:	d10b      	bne.n	800f48e <_ZSt5isinfd+0x42>
 800f476:	f04f 32ff 	mov.w	r2, #4294967295
 800f47a:	4b0b      	ldr	r3, [pc, #44]	; (800f4a8 <_ZSt5isinfd+0x5c>)
 800f47c:	4620      	mov	r0, r4
 800f47e:	4629      	mov	r1, r5
 800f480:	f7f1 f964 	bl	800074c <__aeabi_dcmple>
 800f484:	4603      	mov	r3, r0
 800f486:	2b00      	cmp	r3, #0
 800f488:	d101      	bne.n	800f48e <_ZSt5isinfd+0x42>
 800f48a:	2300      	movs	r3, #0
 800f48c:	461e      	mov	r6, r3
 800f48e:	b2f3      	uxtb	r3, r6
 800f490:	f083 0301 	eor.w	r3, r3, #1
 800f494:	b2db      	uxtb	r3, r3
 800f496:	2b00      	cmp	r3, #0
 800f498:	bf14      	ite	ne
 800f49a:	2301      	movne	r3, #1
 800f49c:	2300      	moveq	r3, #0
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	370c      	adds	r7, #12
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4a8:	7fefffff 	.word	0x7fefffff

0800f4ac <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 800f4ac:	b590      	push	{r4, r7, lr}
 800f4ae:	b083      	sub	sp, #12
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	ed87 0b00 	vstr	d0, [r7]
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	461c      	mov	r4, r3
 800f4ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4be:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4c2:	f7f1 f961 	bl	8000788 <__aeabi_dcmpun>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d101      	bne.n	800f4d0 <_ZSt5isnand+0x24>
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	461c      	mov	r4, r3
 800f4d0:	b2e3      	uxtb	r3, r4
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	bf14      	ite	ne
 800f4d6:	2301      	movne	r3, #1
 800f4d8:	2300      	moveq	r3, #0
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	4618      	mov	r0, r3
 800f4de:	370c      	adds	r7, #12
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd90      	pop	{r4, r7, pc}

0800f4e4 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 800f4e4:	b590      	push	{r4, r7, lr}
 800f4e6:	b095      	sub	sp, #84	; 0x54
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	3334      	adds	r3, #52	; 0x34
 800f4f6:	681c      	ldr	r4, [r3, #0]
 800f4f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f4fc:	490f      	ldr	r1, [pc, #60]	; (800f53c <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7f8 f9d3 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800f504:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f508:	f107 0314 	add.w	r3, r7, #20
 800f50c:	68f9      	ldr	r1, [r7, #12]
 800f50e:	4618      	mov	r0, r3
 800f510:	f7f9 ff1c 	bl	800934c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800f514:	f107 0314 	add.w	r3, r7, #20
 800f518:	4619      	mov	r1, r3
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	47a0      	blx	r4
 800f51e:	f107 0314 	add.w	r3, r7, #20
 800f522:	4618      	mov	r0, r3
 800f524:	f7f9 ffd2 	bl	80094cc <_ZN11TestFailureD1Ev>
 800f528:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7f8 fd74 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 800f532:	bf00      	nop
 800f534:	3754      	adds	r7, #84	; 0x54
 800f536:	46bd      	mov	sp, r7
 800f538:	bd90      	pop	{r4, r7, pc}
 800f53a:	bf00      	nop
 800f53c:	08017100 	.word	0x08017100

0800f540 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 800f540:	b480      	push	{r7}
 800f542:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 800f544:	2301      	movs	r3, #1
}
 800f546:	4618      	mov	r0, r3
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr

0800f550 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 800f55a:	4b13      	ldr	r3, [pc, #76]	; (800f5a8 <PlatformSpecificSetJmpImplementation+0x58>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	225c      	movs	r2, #92	; 0x5c
 800f560:	fb02 f303 	mul.w	r3, r2, r3
 800f564:	4a11      	ldr	r2, [pc, #68]	; (800f5ac <PlatformSpecificSetJmpImplementation+0x5c>)
 800f566:	4413      	add	r3, r2
 800f568:	4618      	mov	r0, r3
 800f56a:	f7f0 fe59 	bl	8000220 <setjmp>
 800f56e:	4603      	mov	r3, r0
 800f570:	2b00      	cmp	r3, #0
 800f572:	bf0c      	ite	eq
 800f574:	2301      	moveq	r3, #1
 800f576:	2300      	movne	r3, #0
 800f578:	b2db      	uxtb	r3, r3
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00e      	beq.n	800f59c <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 800f57e:	4b0a      	ldr	r3, [pc, #40]	; (800f5a8 <PlatformSpecificSetJmpImplementation+0x58>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	3301      	adds	r3, #1
 800f584:	4a08      	ldr	r2, [pc, #32]	; (800f5a8 <PlatformSpecificSetJmpImplementation+0x58>)
 800f586:	6013      	str	r3, [r2, #0]
        function(data);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6838      	ldr	r0, [r7, #0]
 800f58c:	4798      	blx	r3
        jmp_buf_index--;
 800f58e:	4b06      	ldr	r3, [pc, #24]	; (800f5a8 <PlatformSpecificSetJmpImplementation+0x58>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	3b01      	subs	r3, #1
 800f594:	4a04      	ldr	r2, [pc, #16]	; (800f5a8 <PlatformSpecificSetJmpImplementation+0x58>)
 800f596:	6013      	str	r3, [r2, #0]
        return 1;
 800f598:	2301      	movs	r3, #1
 800f59a:	e000      	b.n	800f59e <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 800f59c:	2300      	movs	r3, #0
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3708      	adds	r7, #8
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	20000b64 	.word	0x20000b64
 800f5ac:	200007cc 	.word	0x200007cc

0800f5b0 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 800f5b4:	4b07      	ldr	r3, [pc, #28]	; (800f5d4 <PlatformSpecificLongJmpImplementation+0x24>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	3b01      	subs	r3, #1
 800f5ba:	4a06      	ldr	r2, [pc, #24]	; (800f5d4 <PlatformSpecificLongJmpImplementation+0x24>)
 800f5bc:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 800f5be:	4b05      	ldr	r3, [pc, #20]	; (800f5d4 <PlatformSpecificLongJmpImplementation+0x24>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	225c      	movs	r2, #92	; 0x5c
 800f5c4:	fb02 f303 	mul.w	r3, r2, r3
 800f5c8:	4a03      	ldr	r2, [pc, #12]	; (800f5d8 <PlatformSpecificLongJmpImplementation+0x28>)
 800f5ca:	4413      	add	r3, r2
 800f5cc:	2101      	movs	r1, #1
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7f0 fe2c 	bl	800022c <longjmp>
 800f5d4:	20000b64 	.word	0x20000b64
 800f5d8:	200007cc 	.word	0x200007cc

0800f5dc <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 800f5dc:	b480      	push	{r7}
 800f5de:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 800f5e0:	2300      	movs	r3, #0
#endif
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 800f5f2:	2000      	movs	r0, #0
 800f5f4:	f004 fc06 	bl	8013e04 <time>
 800f5f8:	4602      	mov	r2, r0
 800f5fa:	460b      	mov	r3, r1
 800f5fc:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 800f600:	463b      	mov	r3, r7
 800f602:	4618      	mov	r0, r3
 800f604:	f003 fa6c 	bl	8012ae0 <localtime>
 800f608:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	4a04      	ldr	r2, [pc, #16]	; (800f620 <TimeStringImplementation+0x34>)
 800f60e:	2150      	movs	r1, #80	; 0x50
 800f610:	4804      	ldr	r0, [pc, #16]	; (800f624 <TimeStringImplementation+0x38>)
 800f612:	f004 fb4d 	bl	8013cb0 <strftime>
    return dateTime;
 800f616:	4b03      	ldr	r3, [pc, #12]	; (800f624 <TimeStringImplementation+0x38>)
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3710      	adds	r7, #16
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}
 800f620:	0801713c 	.word	0x0801713c
 800f624:	20000b68 	.word	0x20000b68

0800f628 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 800f632:	6839      	ldr	r1, [r7, #0]
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f003 f889 	bl	801274c <fopen>
 800f63a:	4603      	mov	r3, r0
#endif
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3708      	adds	r7, #8
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 800f64e:	6839      	ldr	r1, [r7, #0]
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f003 f8e9 	bl	8012828 <fputs>
}
 800f656:	bf00      	nop
 800f658:	3708      	adds	r7, #8
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}

0800f65e <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 800f65e:	b580      	push	{r7, lr}
 800f660:	b082      	sub	sp, #8
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f002 fe6a 	bl	8012340 <fclose>
}
 800f66c:	bf00      	nop
 800f66e:	3708      	adds	r7, #8
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 800f674:	b580      	push	{r7, lr}
 800f676:	af00      	add	r7, sp, #0
  fflush(stdout);
 800f678:	4b03      	ldr	r3, [pc, #12]	; (800f688 <PlatformSpecificFlushImplementation+0x14>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	4618      	mov	r0, r3
 800f680:	f002 ff28 	bl	80124d4 <fflush>
}
 800f684:	bf00      	nop
 800f686:	bd80      	pop	{r7, pc}
 800f688:	20000100 	.word	0x20000100

0800f68c <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
 800f692:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 800f696:	ed97 0b00 	vldr	d0, [r7]
 800f69a:	f7ff ff07 	bl	800f4ac <_ZSt5isnand>
 800f69e:	4603      	mov	r3, r0
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3708      	adds	r7, #8
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}

0800f6a8 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b082      	sub	sp, #8
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 800f6b2:	ed97 0b00 	vldr	d0, [r7]
 800f6b6:	f7ff fec9 	bl	800f44c <_ZSt5isinfd>
 800f6ba:	4603      	mov	r3, r0
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3708      	adds	r7, #8
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 800f6c8:	2300      	movs	r3, #0
#endif

}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
}
 800f6dc:	bf00      	nop
 800f6de:	370c      	adds	r7, #12
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr

0800f6e8 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b083      	sub	sp, #12
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
}
 800f6f0:	bf00      	nop
 800f6f2:	370c      	adds	r7, #12
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr

0800f6fc <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b083      	sub	sp, #12
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
}
 800f704:	bf00      	nop
 800f706:	370c      	adds	r7, #12
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr

0800f710 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 800f710:	b580      	push	{r7, lr}
 800f712:	b084      	sub	sp, #16
 800f714:	af00      	add	r7, sp, #0
 800f716:	60f8      	str	r0, [r7, #12]
 800f718:	60b9      	str	r1, [r7, #8]
 800f71a:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 800f71c:	4a25      	ldr	r2, [pc, #148]	; (800f7b4 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	601a      	str	r2, [r3, #0]
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	68ba      	ldr	r2, [r7, #8]
 800f726:	605a      	str	r2, [r3, #4]
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	687a      	ldr	r2, [r7, #4]
 800f72c:	609a      	str	r2, [r3, #8]
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2200      	movs	r2, #0
 800f732:	731a      	strb	r2, [r3, #12]
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	2200      	movs	r2, #0
 800f738:	735a      	strb	r2, [r3, #13]
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2200      	movs	r2, #0
 800f73e:	739a      	strb	r2, [r3, #14]
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2200      	movs	r2, #0
 800f744:	73da      	strb	r2, [r3, #15]
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	2200      	movs	r2, #0
 800f74a:	741a      	strb	r2, [r3, #16]
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	2200      	movs	r2, #0
 800f750:	745a      	strb	r2, [r3, #17]
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	2200      	movs	r2, #0
 800f756:	749a      	strb	r2, [r3, #18]
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	2200      	movs	r2, #0
 800f75c:	74da      	strb	r2, [r3, #19]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	2200      	movs	r2, #0
 800f762:	751a      	strb	r2, [r3, #20]
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	2200      	movs	r2, #0
 800f768:	755a      	strb	r2, [r3, #21]
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2200      	movs	r2, #0
 800f76e:	759a      	strb	r2, [r3, #22]
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	2200      	movs	r2, #0
 800f774:	75da      	strb	r2, [r3, #23]
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	2200      	movs	r2, #0
 800f77a:	761a      	strb	r2, [r3, #24]
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2201      	movs	r2, #1
 800f780:	61da      	str	r2, [r3, #28]
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	2200      	movs	r2, #0
 800f786:	621a      	str	r2, [r3, #32]
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2200      	movs	r2, #0
 800f78c:	625a      	str	r2, [r3, #36]	; 0x24
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2200      	movs	r2, #0
 800f792:	629a      	str	r2, [r3, #40]	; 0x28
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2200      	movs	r2, #0
 800f798:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	3330      	adds	r3, #48	; 0x30
 800f7a0:	4905      	ldr	r1, [pc, #20]	; (800f7b8 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7f8 f881 	bl	80078aa <_ZN12SimpleStringC1EPKc>
{
}
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3710      	adds	r7, #16
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	08019000 	.word	0x08019000
 800f7b8:	08017150 	.word	0x08017150

0800f7bc <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7f8 fc27 	bl	800801a <_ZN12SimpleStringD1Ev>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3708      	adds	r7, #8
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
	...

0800f7d8 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 800f7d8:	b590      	push	{r4, r7, lr}
 800f7da:	b085      	sub	sp, #20
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	4a20      	ldr	r2, [pc, #128]	; (800f864 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d015      	beq.n	800f81a <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f2:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f002 fc9a 	bl	8012132 <_ZNK10TestFilter7getNextEv>
 800f7fe:	4602      	mov	r2, r0
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 800f804:	68fc      	ldr	r4, [r7, #12]
 800f806:	2c00      	cmp	r4, #0
 800f808:	d0ed      	beq.n	800f7e6 <_ZN20CommandLineArgumentsD1Ev+0xe>
 800f80a:	4620      	mov	r0, r4
 800f80c:	f7ff ffd6 	bl	800f7bc <_ZN10TestFilterD1Ev>
 800f810:	2110      	movs	r1, #16
 800f812:	4620      	mov	r0, r4
 800f814:	f7f7 f974 	bl	8006b00 <_ZdlPvj>
    while(groupFilters_) {
 800f818:	e7e5      	b.n	800f7e6 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d015      	beq.n	800f84e <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f826:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f82c:	4618      	mov	r0, r3
 800f82e:	f002 fc80 	bl	8012132 <_ZNK10TestFilter7getNextEv>
 800f832:	4602      	mov	r2, r0
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 800f838:	68bc      	ldr	r4, [r7, #8]
 800f83a:	2c00      	cmp	r4, #0
 800f83c:	d0ed      	beq.n	800f81a <_ZN20CommandLineArgumentsD1Ev+0x42>
 800f83e:	4620      	mov	r0, r4
 800f840:	f7ff ffbc 	bl	800f7bc <_ZN10TestFilterD1Ev>
 800f844:	2110      	movs	r1, #16
 800f846:	4620      	mov	r0, r4
 800f848:	f7f7 f95a 	bl	8006b00 <_ZdlPvj>
    while(nameFilters_) {
 800f84c:	e7e5      	b.n	800f81a <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	3330      	adds	r3, #48	; 0x30
 800f852:	4618      	mov	r0, r3
 800f854:	f7f8 fbe1 	bl	800801a <_ZN12SimpleStringD1Ev>
    }
}
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	4618      	mov	r0, r3
 800f85c:	3714      	adds	r7, #20
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd90      	pop	{r4, r7, pc}
 800f862:	bf00      	nop
 800f864:	08019000 	.word	0x08019000

0800f868 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
}
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f7ff ffb1 	bl	800f7d8 <_ZN20CommandLineArgumentsD1Ev>
 800f876:	2138      	movs	r1, #56	; 0x38
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f7f7 f941 	bl	8006b00 <_ZdlPvj>
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	4618      	mov	r0, r3
 800f882:	3708      	adds	r7, #8
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}

0800f888 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 800f888:	b5b0      	push	{r4, r5, r7, lr}
 800f88a:	b0be      	sub	sp, #248	; 0xf8
 800f88c:	af02      	add	r7, sp, #8
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	6039      	str	r1, [r7, #0]
 800f892:	2400      	movs	r4, #0
    bool correctParameters = true;
 800f894:	2301      	movs	r3, #1
 800f896:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 800f89a:	2301      	movs	r3, #1
 800f89c:	613b      	str	r3, [r7, #16]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	685a      	ldr	r2, [r3, #4]
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	f340 83a4 	ble.w	800fff2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	689a      	ldr	r2, [r3, #8]
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	009b      	lsls	r3, r3, #2
 800f8b2:	4413      	add	r3, r2
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	f107 0308 	add.w	r3, r7, #8
 800f8ba:	4611      	mov	r1, r2
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7f7 fff4 	bl	80078aa <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 800f8c2:	f107 0314 	add.w	r3, r7, #20
 800f8c6:	49c8      	ldr	r1, [pc, #800]	; (800fbe8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7f7 ffee 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800f8ce:	f107 0214 	add.w	r2, r7, #20
 800f8d2:	f107 0308 	add.w	r3, r7, #8
 800f8d6:	4611      	mov	r1, r2
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7f8 fbaa 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	461d      	mov	r5, r3
 800f8e2:	f107 0314 	add.w	r3, r7, #20
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7f8 fb97 	bl	800801a <_ZN12SimpleStringD1Ev>
 800f8ec:	2d00      	cmp	r5, #0
 800f8ee:	d006      	beq.n	800f8fe <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800f8fc:	e366      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 800f8fe:	f107 031c 	add.w	r3, r7, #28
 800f902:	49ba      	ldr	r1, [pc, #744]	; (800fbec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 800f904:	4618      	mov	r0, r3
 800f906:	f7f7 ffd0 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800f90a:	f107 021c 	add.w	r2, r7, #28
 800f90e:	f107 0308 	add.w	r3, r7, #8
 800f912:	4611      	mov	r1, r2
 800f914:	4618      	mov	r0, r3
 800f916:	f7f8 fb8c 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800f91a:	4603      	mov	r3, r0
 800f91c:	461d      	mov	r5, r3
 800f91e:	f107 031c 	add.w	r3, r7, #28
 800f922:	4618      	mov	r0, r3
 800f924:	f7f8 fb79 	bl	800801a <_ZN12SimpleStringD1Ev>
 800f928:	2d00      	cmp	r5, #0
 800f92a:	d003      	beq.n	800f934 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2201      	movs	r2, #1
 800f930:	735a      	strb	r2, [r3, #13]
 800f932:	e34b      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 800f934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f938:	49ad      	ldr	r1, [pc, #692]	; (800fbf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7f7 ffb5 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800f940:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f944:	f107 0308 	add.w	r3, r7, #8
 800f948:	4611      	mov	r1, r2
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7f8 fb71 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800f950:	4603      	mov	r3, r0
 800f952:	461d      	mov	r5, r3
 800f954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f958:	4618      	mov	r0, r3
 800f95a:	f7f8 fb5e 	bl	800801a <_ZN12SimpleStringD1Ev>
 800f95e:	2d00      	cmp	r5, #0
 800f960:	d003      	beq.n	800f96a <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2201      	movs	r2, #1
 800f966:	739a      	strb	r2, [r3, #14]
 800f968:	e330      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 800f96a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f96e:	49a1      	ldr	r1, [pc, #644]	; (800fbf4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 800f970:	4618      	mov	r0, r3
 800f972:	f7f7 ff9a 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800f976:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f97a:	f107 0308 	add.w	r3, r7, #8
 800f97e:	4611      	mov	r1, r2
 800f980:	4618      	mov	r0, r3
 800f982:	f7f8 fb56 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800f986:	4603      	mov	r3, r0
 800f988:	461d      	mov	r5, r3
 800f98a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f98e:	4618      	mov	r0, r3
 800f990:	f7f8 fb43 	bl	800801a <_ZN12SimpleStringD1Ev>
 800f994:	2d00      	cmp	r5, #0
 800f996:	d003      	beq.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2201      	movs	r2, #1
 800f99c:	73da      	strb	r2, [r3, #15]
 800f99e:	e315      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 800f9a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f9a4:	4994      	ldr	r1, [pc, #592]	; (800fbf8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7f7 ff7f 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800f9ac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f9b0:	f107 0308 	add.w	r3, r7, #8
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7f8 fb3b 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	461d      	mov	r5, r3
 800f9c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7f8 fb28 	bl	800801a <_ZN12SimpleStringD1Ev>
 800f9ca:	2d00      	cmp	r5, #0
 800f9cc:	d003      	beq.n	800f9d6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	741a      	strb	r2, [r3, #16]
 800f9d4:	e2fa      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 800f9d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f9da:	4988      	ldr	r1, [pc, #544]	; (800fbfc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7f7 ff64 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800f9e2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800f9e6:	f107 0308 	add.w	r3, r7, #8
 800f9ea:	4611      	mov	r1, r2
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7f8 fb20 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	461d      	mov	r5, r3
 800f9f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7f8 fb0d 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fa00:	2d00      	cmp	r5, #0
 800fa02:	d003      	beq.n	800fa0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2201      	movs	r2, #1
 800fa08:	755a      	strb	r2, [r3, #21]
 800fa0a:	e2df      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 800fa0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fa10:	497b      	ldr	r1, [pc, #492]	; (800fc00 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7f7 ff49 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fa18:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800fa1c:	f107 0308 	add.w	r3, r7, #8
 800fa20:	4611      	mov	r1, r2
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7f8 fb05 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	461d      	mov	r5, r3
 800fa2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fa30:	4618      	mov	r0, r3
 800fa32:	f7f8 faf2 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fa36:	2d00      	cmp	r5, #0
 800fa38:	d003      	beq.n	800fa42 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	745a      	strb	r2, [r3, #17]
 800fa40:	e2c4      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 800fa42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800fa46:	496f      	ldr	r1, [pc, #444]	; (800fc04 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7f7 ff2e 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fa4e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800fa52:	f107 0308 	add.w	r3, r7, #8
 800fa56:	4611      	mov	r1, r2
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7f8 faea 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	461d      	mov	r5, r3
 800fa62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7f8 fad7 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fa6c:	2d00      	cmp	r5, #0
 800fa6e:	d003      	beq.n	800fa78 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2201      	movs	r2, #1
 800fa74:	749a      	strb	r2, [r3, #18]
 800fa76:	e2a9      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 800fa78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fa7c:	4962      	ldr	r1, [pc, #392]	; (800fc08 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7f7 ff13 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fa84:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800fa88:	f107 0308 	add.w	r3, r7, #8
 800fa8c:	4611      	mov	r1, r2
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7f8 facf 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800fa94:	4603      	mov	r3, r0
 800fa96:	461d      	mov	r5, r3
 800fa98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f7f8 fabc 	bl	800801a <_ZN12SimpleStringD1Ev>
 800faa2:	2d00      	cmp	r5, #0
 800faa4:	d003      	beq.n	800faae <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2201      	movs	r2, #1
 800faaa:	74da      	strb	r2, [r3, #19]
 800faac:	e28e      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 800faae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fab2:	4956      	ldr	r1, [pc, #344]	; (800fc0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7f7 fef8 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800faba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800fabe:	f107 0308 	add.w	r3, r7, #8
 800fac2:	4611      	mov	r1, r2
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7f8 fab4 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800faca:	4603      	mov	r3, r0
 800facc:	461d      	mov	r5, r3
 800face:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7f8 faa1 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fad8:	2d00      	cmp	r5, #0
 800fada:	d003      	beq.n	800fae4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2201      	movs	r2, #1
 800fae0:	751a      	strb	r2, [r3, #20]
 800fae2:	e273      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 800fae4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800fae8:	4949      	ldr	r1, [pc, #292]	; (800fc10 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 800faea:	4618      	mov	r0, r3
 800faec:	f7f7 fedd 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800faf0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800faf4:	f107 0308 	add.w	r3, r7, #8
 800faf8:	4611      	mov	r1, r2
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7f8 fa99 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 800fb00:	4603      	mov	r3, r0
 800fb02:	461d      	mov	r5, r3
 800fb04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7f8 fa86 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fb0e:	2d00      	cmp	r5, #0
 800fb10:	d003      	beq.n	800fb1a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2201      	movs	r2, #1
 800fb16:	759a      	strb	r2, [r3, #22]
 800fb18:	e258      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 800fb1a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fb1e:	493d      	ldr	r1, [pc, #244]	; (800fc14 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7f7 fec2 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fb26:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800fb2a:	f107 0308 	add.w	r3, r7, #8
 800fb2e:	4611      	mov	r1, r2
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7f7 ff7e 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 800fb36:	4603      	mov	r3, r0
 800fb38:	461d      	mov	r5, r3
 800fb3a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7f8 fa6b 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fb44:	2d00      	cmp	r5, #0
 800fb46:	d009      	beq.n	800fb5c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6859      	ldr	r1, [r3, #4]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	689a      	ldr	r2, [r3, #8]
 800fb50:	f107 0310 	add.w	r3, r7, #16
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 fb33 	bl	80101c0 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 800fb5a:	e237      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 800fb5c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fb60:	492d      	ldr	r1, [pc, #180]	; (800fc18 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7f7 fea1 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fb68:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800fb6c:	f107 0308 	add.w	r3, r7, #8
 800fb70:	4611      	mov	r1, r2
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7f7 ff5d 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	461d      	mov	r5, r3
 800fb7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7f8 fa4a 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fb86:	2d00      	cmp	r5, #0
 800fb88:	d009      	beq.n	800fb9e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6859      	ldr	r1, [r3, #4]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	689a      	ldr	r2, [r3, #8]
 800fb92:	f107 0310 	add.w	r3, r7, #16
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f000 fc40 	bl	801041c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 800fb9c:	e216      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 800fb9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800fba2:	491e      	ldr	r1, [pc, #120]	; (800fc1c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7f7 fe80 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fbaa:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800fbae:	f107 0308 	add.w	r3, r7, #8
 800fbb2:	4611      	mov	r1, r2
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7f7 ff3c 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	461d      	mov	r5, r3
 800fbbe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7f8 fa29 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fbc8:	2d00      	cmp	r5, #0
 800fbca:	d029      	beq.n	800fc20 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6859      	ldr	r1, [r3, #4]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	689a      	ldr	r2, [r3, #8]
 800fbd4:	f107 0310 	add.w	r3, r7, #16
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f000 fc61 	bl	80104a0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800fbe4:	e1f2      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 800fbe6:	bf00      	nop
 800fbe8:	08017154 	.word	0x08017154
 800fbec:	08017158 	.word	0x08017158
 800fbf0:	0801715c 	.word	0x0801715c
 800fbf4:	08017160 	.word	0x08017160
 800fbf8:	08017164 	.word	0x08017164
 800fbfc:	08017168 	.word	0x08017168
 800fc00:	0801716c 	.word	0x0801716c
 800fc04:	08017170 	.word	0x08017170
 800fc08:	08017174 	.word	0x08017174
 800fc0c:	08017178 	.word	0x08017178
 800fc10:	0801717c 	.word	0x0801717c
 800fc14:	08017180 	.word	0x08017180
 800fc18:	08017184 	.word	0x08017184
 800fc1c:	08017188 	.word	0x08017188
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 800fc20:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800fc24:	49b9      	ldr	r1, [pc, #740]	; (800ff0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7f7 fe3f 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fc2c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800fc30:	f107 0308 	add.w	r3, r7, #8
 800fc34:	4611      	mov	r1, r2
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7f7 fefb 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	461d      	mov	r5, r3
 800fc40:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7f8 f9e8 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fc4a:	2d00      	cmp	r5, #0
 800fc4c:	d009      	beq.n	800fc62 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6859      	ldr	r1, [r3, #4]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	689a      	ldr	r2, [r3, #8]
 800fc56:	f107 0310 	add.w	r3, r7, #16
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f000 fccc 	bl	80105f8 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 800fc60:	e1b4      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 800fc62:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800fc66:	49aa      	ldr	r1, [pc, #680]	; (800ff10 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f7f7 fe1e 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fc6e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800fc72:	f107 0308 	add.w	r3, r7, #8
 800fc76:	4611      	mov	r1, r2
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7f7 feda 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	461d      	mov	r5, r3
 800fc82:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7f8 f9c7 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fc8c:	2d00      	cmp	r5, #0
 800fc8e:	d009      	beq.n	800fca4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6859      	ldr	r1, [r3, #4]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	689a      	ldr	r2, [r3, #8]
 800fc98:	f107 0310 	add.w	r3, r7, #16
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f000 fcf1 	bl	8010684 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 800fca2:	e193      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 800fca4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800fca8:	499a      	ldr	r1, [pc, #616]	; (800ff14 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7f7 fdfd 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fcb0:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800fcb4:	f107 0308 	add.w	r3, r7, #8
 800fcb8:	4611      	mov	r1, r2
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7f7 feb9 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	461d      	mov	r5, r3
 800fcc4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7f8 f9a6 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fcce:	2d00      	cmp	r5, #0
 800fcd0:	d009      	beq.n	800fce6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6859      	ldr	r1, [r3, #4]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	689a      	ldr	r2, [r3, #8]
 800fcda:	f107 0310 	add.w	r3, r7, #16
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 fd16 	bl	8010710 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 800fce4:	e172      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 800fce6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800fcea:	498b      	ldr	r1, [pc, #556]	; (800ff18 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7f7 fddc 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fcf2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800fcf6:	f107 0308 	add.w	r3, r7, #8
 800fcfa:	4611      	mov	r1, r2
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7f7 fe98 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 800fd02:	4603      	mov	r3, r0
 800fd04:	461d      	mov	r5, r3
 800fd06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7f8 f985 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fd10:	2d00      	cmp	r5, #0
 800fd12:	d009      	beq.n	800fd28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6859      	ldr	r1, [r3, #4]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	689a      	ldr	r2, [r3, #8]
 800fd1c:	f107 0310 	add.w	r3, r7, #16
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 fd3d 	bl	80107a0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 800fd26:	e151      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 800fd28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fd2c:	497b      	ldr	r1, [pc, #492]	; (800ff1c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7f7 fdbb 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fd34:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800fd38:	f107 0308 	add.w	r3, r7, #8
 800fd3c:	4611      	mov	r1, r2
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7f7 fe77 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 800fd44:	4603      	mov	r3, r0
 800fd46:	461d      	mov	r5, r3
 800fd48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7f8 f964 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fd52:	2d00      	cmp	r5, #0
 800fd54:	d009      	beq.n	800fd6a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	6859      	ldr	r1, [r3, #4]
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	689a      	ldr	r2, [r3, #8]
 800fd5e:	f107 0310 	add.w	r3, r7, #16
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f000 fd5e 	bl	8010824 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 800fd68:	e130      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 800fd6a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800fd6e:	496c      	ldr	r1, [pc, #432]	; (800ff20 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7f7 fd9a 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fd76:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800fd7a:	f107 0308 	add.w	r3, r7, #8
 800fd7e:	4611      	mov	r1, r2
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7f7 fe56 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 800fd86:	4603      	mov	r3, r0
 800fd88:	461d      	mov	r5, r3
 800fd8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7f8 f943 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fd94:	2d00      	cmp	r5, #0
 800fd96:	d009      	beq.n	800fdac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6859      	ldr	r1, [r3, #4]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	689a      	ldr	r2, [r3, #8]
 800fda0:	f107 0310 	add.w	r3, r7, #16
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f000 fd83 	bl	80108b0 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 800fdaa:	e10f      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 800fdac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800fdb0:	495c      	ldr	r1, [pc, #368]	; (800ff24 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7f7 fd79 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fdb8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800fdbc:	f107 0308 	add.w	r3, r7, #8
 800fdc0:	4611      	mov	r1, r2
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7f7 fe35 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	461d      	mov	r5, r3
 800fdcc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7f8 f922 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fdd6:	2d00      	cmp	r5, #0
 800fdd8:	d009      	beq.n	800fdee <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6859      	ldr	r1, [r3, #4]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	689a      	ldr	r2, [r3, #8]
 800fde2:	f107 0310 	add.w	r3, r7, #16
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f000 fda8 	bl	801093c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 800fdec:	e0ee      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 800fdee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800fdf2:	494d      	ldr	r1, [pc, #308]	; (800ff28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7f7 fd58 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fdfa:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800fdfe:	f107 0308 	add.w	r3, r7, #8
 800fe02:	4611      	mov	r1, r2
 800fe04:	4618      	mov	r0, r3
 800fe06:	f7f7 fe14 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	461d      	mov	r5, r3
 800fe0e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7f8 f901 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fe18:	2d00      	cmp	r5, #0
 800fe1a:	d00c      	beq.n	800fe36 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6859      	ldr	r1, [r3, #4]
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	689a      	ldr	r2, [r3, #8]
 800fe24:	f107 0310 	add.w	r3, r7, #16
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f000 fa29 	bl	8010280 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800fe34:	e0ca      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 800fe36:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800fe3a:	493c      	ldr	r1, [pc, #240]	; (800ff2c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7f7 fd34 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fe42:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800fe46:	f107 0308 	add.w	r3, r7, #8
 800fe4a:	4611      	mov	r1, r2
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7f7 fdf0 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 800fe52:	4603      	mov	r3, r0
 800fe54:	461d      	mov	r5, r3
 800fe56:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7f8 f8dd 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fe60:	2d00      	cmp	r5, #0
 800fe62:	d00b      	beq.n	800fe7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6859      	ldr	r1, [r3, #4]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	689a      	ldr	r2, [r3, #8]
 800fe6c:	f107 0310 	add.w	r3, r7, #16
 800fe70:	482e      	ldr	r0, [pc, #184]	; (800ff2c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 800fe72:	9000      	str	r0, [sp, #0]
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f000 fda9 	bl	80109cc <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 800fe7a:	e0a7      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 800fe7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800fe80:	492b      	ldr	r1, [pc, #172]	; (800ff30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7f7 fd11 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fe88:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800fe8c:	f107 0308 	add.w	r3, r7, #8
 800fe90:	4611      	mov	r1, r2
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7f7 fdcd 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	461d      	mov	r5, r3
 800fe9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7f8 f8ba 	bl	800801a <_ZN12SimpleStringD1Ev>
 800fea6:	2d00      	cmp	r5, #0
 800fea8:	d00b      	beq.n	800fec2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6859      	ldr	r1, [r3, #4]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	689a      	ldr	r2, [r3, #8]
 800feb2:	f107 0310 	add.w	r3, r7, #16
 800feb6:	481e      	ldr	r0, [pc, #120]	; (800ff30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 800feb8:	9000      	str	r0, [sp, #0]
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f000 fd86 	bl	80109cc <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 800fec0:	e084      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 800fec2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800fec6:	491b      	ldr	r1, [pc, #108]	; (800ff34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 800fec8:	4618      	mov	r0, r3
 800feca:	f7f7 fcee 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800fece:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800fed2:	f107 0308 	add.w	r3, r7, #8
 800fed6:	4611      	mov	r1, r2
 800fed8:	4618      	mov	r0, r3
 800feda:	f7f7 fdaa 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 800fede:	4603      	mov	r3, r0
 800fee0:	461d      	mov	r5, r3
 800fee2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7f8 f897 	bl	800801a <_ZN12SimpleStringD1Ev>
 800feec:	2d00      	cmp	r5, #0
 800feee:	d023      	beq.n	800ff38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6859      	ldr	r1, [r3, #4]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	689a      	ldr	r2, [r3, #8]
 800fef8:	f107 0310 	add.w	r3, r7, #16
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f000 fe3b 	bl	8010b78 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 800ff02:	4603      	mov	r3, r0
 800ff04:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800ff08:	e060      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 800ff0a:	bf00      	nop
 800ff0c:	0801718c 	.word	0x0801718c
 800ff10:	08017190 	.word	0x08017190
 800ff14:	08017194 	.word	0x08017194
 800ff18:	0801719c 	.word	0x0801719c
 800ff1c:	080171a0 	.word	0x080171a0
 800ff20:	080171a4 	.word	0x080171a4
 800ff24:	080171a8 	.word	0x080171a8
 800ff28:	080171b0 	.word	0x080171b0
 800ff2c:	080171b4 	.word	0x080171b4
 800ff30:	080171bc 	.word	0x080171bc
 800ff34:	080171cc 	.word	0x080171cc
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 800ff38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800ff3c:	4930      	ldr	r1, [pc, #192]	; (8010000 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7f7 fcb3 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800ff44:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800ff48:	f107 0308 	add.w	r3, r7, #8
 800ff4c:	4611      	mov	r1, r2
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7f7 fd6f 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 800ff54:	4603      	mov	r3, r0
 800ff56:	461d      	mov	r5, r3
 800ff58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f7f8 f85c 	bl	800801a <_ZN12SimpleStringD1Ev>
 800ff62:	2d00      	cmp	r5, #0
 800ff64:	d00e      	beq.n	800ff84 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	331c      	adds	r3, #28
 800ff6c:	681d      	ldr	r5, [r3, #0]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6859      	ldr	r1, [r3, #4]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	689a      	ldr	r2, [r3, #8]
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	6838      	ldr	r0, [r7, #0]
 800ff7a:	47a8      	blx	r5
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800ff82:	e023      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 800ff84:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800ff88:	491e      	ldr	r1, [pc, #120]	; (8010004 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7f7 fc8d 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 800ff90:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800ff94:	f107 0308 	add.w	r3, r7, #8
 800ff98:	4611      	mov	r1, r2
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7f7 fd49 	bl	8007a32 <_ZNK12SimpleString10startsWithERKS_>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	461d      	mov	r5, r3
 800ffa4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7f8 f836 	bl	800801a <_ZN12SimpleStringD1Ev>
 800ffae:	2d00      	cmp	r5, #0
 800ffb0:	d009      	beq.n	800ffc6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6859      	ldr	r1, [r3, #4]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	689a      	ldr	r2, [r3, #8]
 800ffba:	f107 0310 	add.w	r3, r7, #16
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f000 fd98 	bl	8010af4 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 800ffc4:	e002      	b.n	800ffcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 800ffcc:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d102      	bne.n	800ffda <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 800ffd4:	2400      	movs	r4, #0
 800ffd6:	2500      	movs	r5, #0
 800ffd8:	e000      	b.n	800ffdc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 800ffda:	2501      	movs	r5, #1
 800ffdc:	f107 0308 	add.w	r3, r7, #8
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7f8 f81a 	bl	800801a <_ZN12SimpleStringD1Ev>
 800ffe6:	2d01      	cmp	r5, #1
 800ffe8:	d104      	bne.n	800fff4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	3301      	adds	r3, #1
 800ffee:	613b      	str	r3, [r7, #16]
 800fff0:	e455      	b.n	800f89e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 800fff2:	2401      	movs	r4, #1
 800fff4:	4623      	mov	r3, r4
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	37f0      	adds	r7, #240	; 0xf0
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bdb0      	pop	{r4, r5, r7, pc}
 800fffe:	bf00      	nop
 8010000:	08017164 	.word	0x08017164
 8010004:	080171d0 	.word	0x080171d0

08010008 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8010010:	4b03      	ldr	r3, [pc, #12]	; (8010020 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8010012:	4618      	mov	r0, r3
 8010014:	370c      	adds	r7, #12
 8010016:	46bd      	mov	sp, r7
 8010018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001c:	4770      	bx	lr
 801001e:	bf00      	nop
 8010020:	080171d4 	.word	0x080171d4

08010024 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 801002c:	4b03      	ldr	r3, [pc, #12]	; (801003c <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 801002e:	4618      	mov	r0, r3
 8010030:	370c      	adds	r7, #12
 8010032:	46bd      	mov	sp, r7
 8010034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010038:	4770      	bx	lr
 801003a:	bf00      	nop
 801003c:	08017304 	.word	0x08017304

08010040 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8010040:	b480      	push	{r7}
 8010042:	b083      	sub	sp, #12
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	7b1b      	ldrb	r3, [r3, #12]
}
 801004c:	4618      	mov	r0, r3
 801004e:	370c      	adds	r7, #12
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr

08010058 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8010058:	b480      	push	{r7}
 801005a:	b083      	sub	sp, #12
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
    return verbose_;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	7b5b      	ldrb	r3, [r3, #13]
}
 8010064:	4618      	mov	r0, r3
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr

08010070 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	7b9b      	ldrb	r3, [r3, #14]
}
 801007c:	4618      	mov	r0, r3
 801007e:	370c      	adds	r7, #12
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr

08010088 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
    return color_;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	7bdb      	ldrb	r3, [r3, #15]
}
 8010094:	4618      	mov	r0, r3
 8010096:	370c      	adds	r7, #12
 8010098:	46bd      	mov	sp, r7
 801009a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009e:	4770      	bx	lr

080100a0 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 80100a0:	b480      	push	{r7}
 80100a2:	b083      	sub	sp, #12
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	7c5b      	ldrb	r3, [r3, #17]
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	370c      	adds	r7, #12
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr

080100b8 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	7c9b      	ldrb	r3, [r3, #18]
}
 80100c4:	4618      	mov	r0, r3
 80100c6:	370c      	adds	r7, #12
 80100c8:	46bd      	mov	sp, r7
 80100ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ce:	4770      	bx	lr

080100d0 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 80100d0:	b480      	push	{r7}
 80100d2:	b083      	sub	sp, #12
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	7cdb      	ldrb	r3, [r3, #19]
}
 80100dc:	4618      	mov	r0, r3
 80100de:	370c      	adds	r7, #12
 80100e0:	46bd      	mov	sp, r7
 80100e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e6:	4770      	bx	lr

080100e8 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 80100e8:	b480      	push	{r7}
 80100ea:	b083      	sub	sp, #12
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	7d1b      	ldrb	r3, [r3, #20]
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	370c      	adds	r7, #12
 80100f8:	46bd      	mov	sp, r7
 80100fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fe:	4770      	bx	lr

08010100 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8010100:	b480      	push	{r7}
 8010102:	b083      	sub	sp, #12
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	7c1b      	ldrb	r3, [r3, #16]
}
 801010c:	4618      	mov	r0, r3
 801010e:	370c      	adds	r7, #12
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr

08010118 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8010118:	b480      	push	{r7}
 801011a:	b083      	sub	sp, #12
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
    return repeat_;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	69db      	ldr	r3, [r3, #28]
}
 8010124:	4618      	mov	r0, r3
 8010126:	370c      	adds	r7, #12
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr

08010130 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8010130:	b480      	push	{r7}
 8010132:	b083      	sub	sp, #12
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
    return reversing_;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	7d5b      	ldrb	r3, [r3, #21]
}
 801013c:	4618      	mov	r0, r3
 801013e:	370c      	adds	r7, #12
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr

08010148 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	7d9b      	ldrb	r3, [r3, #22]
}
 8010154:	4618      	mov	r0, r3
 8010156:	370c      	adds	r7, #12
 8010158:	46bd      	mov	sp, r7
 801015a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015e:	4770      	bx	lr

08010160 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 8010160:	b480      	push	{r7}
 8010162:	b083      	sub	sp, #12
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	7ddb      	ldrb	r3, [r3, #23]
}
 801016c:	4618      	mov	r0, r3
 801016e:	370c      	adds	r7, #12
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr

08010178 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8010178:	b480      	push	{r7}
 801017a:	b083      	sub	sp, #12
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6a1b      	ldr	r3, [r3, #32]
}
 8010184:	4618      	mov	r0, r3
 8010186:	370c      	adds	r7, #12
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr

08010190 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8010190:	b480      	push	{r7}
 8010192:	b083      	sub	sp, #12
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 801019c:	4618      	mov	r0, r3
 801019e:	370c      	adds	r7, #12
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr

080101a8 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 80101a8:	b480      	push	{r7}
 80101aa:	b083      	sub	sp, #12
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	370c      	adds	r7, #12
 80101b8:	46bd      	mov	sp, r7
 80101ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101be:	4770      	bx	lr

080101c0 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b086      	sub	sp, #24
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	607a      	str	r2, [r7, #4]
 80101cc:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2200      	movs	r2, #0
 80101d2:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	009b      	lsls	r3, r3, #2
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	4413      	add	r3, r2
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	f107 0310 	add.w	r3, r7, #16
 80101e4:	4611      	mov	r1, r2
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7f7 fb5f 	bl	80078aa <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 80101ec:	f107 0310 	add.w	r3, r7, #16
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7f7 fef1 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 80101f6:	4603      	mov	r3, r0
 80101f8:	2b02      	cmp	r3, #2
 80101fa:	bf8c      	ite	hi
 80101fc:	2301      	movhi	r3, #1
 80101fe:	2300      	movls	r3, #0
 8010200:	b2db      	uxtb	r3, r3
 8010202:	2b00      	cmp	r3, #0
 8010204:	d00e      	beq.n	8010224 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	009b      	lsls	r3, r3, #2
 801020c:	687a      	ldr	r2, [r7, #4]
 801020e:	4413      	add	r3, r2
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	3302      	adds	r3, #2
 8010214:	4618      	mov	r0, r3
 8010216:	f7f7 f944 	bl	80074a2 <_ZN12SimpleString4AtoIEPKc>
 801021a:	4603      	mov	r3, r0
 801021c:	461a      	mov	r2, r3
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	61da      	str	r2, [r3, #28]
 8010222:	e01c      	b.n	801025e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	3301      	adds	r3, #1
 801022a:	68ba      	ldr	r2, [r7, #8]
 801022c:	429a      	cmp	r2, r3
 801022e:	dd16      	ble.n	801025e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	3301      	adds	r3, #1
 8010236:	009b      	lsls	r3, r3, #2
 8010238:	687a      	ldr	r2, [r7, #4]
 801023a:	4413      	add	r3, r2
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	4618      	mov	r0, r3
 8010240:	f7f7 f92f 	bl	80074a2 <_ZN12SimpleString4AtoIEPKc>
 8010244:	4603      	mov	r3, r0
 8010246:	461a      	mov	r2, r3
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	69db      	ldr	r3, [r3, #28]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d004      	beq.n	801025e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	1c5a      	adds	r2, r3, #1
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	69db      	ldr	r3, [r3, #28]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d102      	bne.n	801026c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2202      	movs	r2, #2
 801026a:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 801026c:	f107 0310 	add.w	r3, r7, #16
 8010270:	4618      	mov	r0, r3
 8010272:	f7f7 fed2 	bl	800801a <_ZN12SimpleStringD1Ev>

}
 8010276:	bf00      	nop
 8010278:	3718      	adds	r7, #24
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}
	...

08010280 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8010280:	b590      	push	{r4, r7, lr}
 8010282:	b089      	sub	sp, #36	; 0x24
 8010284:	af00      	add	r7, sp, #0
 8010286:	60f8      	str	r0, [r7, #12]
 8010288:	60b9      	str	r1, [r7, #8]
 801028a:	607a      	str	r2, [r7, #4]
 801028c:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2201      	movs	r2, #1
 8010292:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8010294:	4b34      	ldr	r3, [pc, #208]	; (8010368 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	4798      	blx	r3
 801029a:	4603      	mov	r3, r0
 801029c:	461a      	mov	r2, r3
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	6a1b      	ldr	r3, [r3, #32]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d104      	bne.n	80102b4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	6a1b      	ldr	r3, [r3, #32]
 80102ae:	1c5a      	adds	r2, r3, #1
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	009b      	lsls	r3, r3, #2
 80102ba:	687a      	ldr	r2, [r7, #4]
 80102bc:	4413      	add	r3, r2
 80102be:	681a      	ldr	r2, [r3, #0]
 80102c0:	f107 0314 	add.w	r3, r7, #20
 80102c4:	4611      	mov	r1, r2
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7f7 faef 	bl	80078aa <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 80102cc:	f107 0314 	add.w	r3, r7, #20
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7f7 fe81 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 80102d6:	4603      	mov	r3, r0
 80102d8:	2b02      	cmp	r3, #2
 80102da:	bf8c      	ite	hi
 80102dc:	2301      	movhi	r3, #1
 80102de:	2300      	movls	r3, #0
 80102e0:	b2db      	uxtb	r3, r3
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d010      	beq.n	8010308 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	2201      	movs	r2, #1
 80102ea:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	687a      	ldr	r2, [r7, #4]
 80102f4:	4413      	add	r3, r2
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	3302      	adds	r3, #2
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7f7 f898 	bl	8007430 <_ZN12SimpleString4AtoUEPKc>
 8010300:	4602      	mov	r2, r0
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	621a      	str	r2, [r3, #32]
 8010306:	e01e      	b.n	8010346 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	3301      	adds	r3, #1
 801030e:	68ba      	ldr	r2, [r7, #8]
 8010310:	429a      	cmp	r2, r3
 8010312:	dd18      	ble.n	8010346 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	3301      	adds	r3, #1
 801031a:	009b      	lsls	r3, r3, #2
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	4413      	add	r3, r2
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	4618      	mov	r0, r3
 8010324:	f7f7 f884 	bl	8007430 <_ZN12SimpleString4AtoUEPKc>
 8010328:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d00a      	beq.n	8010346 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2201      	movs	r2, #1
 8010334:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	69fa      	ldr	r2, [r7, #28]
 801033a:	621a      	str	r2, [r3, #32]
            i++;
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	1c5a      	adds	r2, r3, #1
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	6a1b      	ldr	r3, [r3, #32]
 801034a:	2b00      	cmp	r3, #0
 801034c:	bf14      	ite	ne
 801034e:	2301      	movne	r3, #1
 8010350:	2300      	moveq	r3, #0
 8010352:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8010354:	f107 0314 	add.w	r3, r7, #20
 8010358:	4618      	mov	r0, r3
 801035a:	f7f7 fe5e 	bl	800801a <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 801035e:	4623      	mov	r3, r4
}
 8010360:	4618      	mov	r0, r3
 8010362:	3724      	adds	r7, #36	; 0x24
 8010364:	46bd      	mov	sp, r7
 8010366:	bd90      	pop	{r4, r7, pc}
 8010368:	200000a4 	.word	0x200000a4

0801036c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b088      	sub	sp, #32
 8010370:	af00      	add	r7, sp, #0
 8010372:	60f8      	str	r0, [r7, #12]
 8010374:	60b9      	str	r1, [r7, #8]
 8010376:	607a      	str	r2, [r7, #4]
 8010378:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 801037a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801037c:	f7f7 fe2c 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8010380:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 8010382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	009b      	lsls	r3, r3, #2
 8010388:	683a      	ldr	r2, [r7, #0]
 801038a:	4413      	add	r3, r2
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	f107 0314 	add.w	r3, r7, #20
 8010392:	4611      	mov	r1, r2
 8010394:	4618      	mov	r0, r3
 8010396:	f7f7 fa88 	bl	80078aa <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 801039a:	f107 0314 	add.w	r3, r7, #20
 801039e:	4618      	mov	r0, r3
 80103a0:	f7f7 fe1a 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 80103a4:	4602      	mov	r2, r0
 80103a6:	69fb      	ldr	r3, [r7, #28]
 80103a8:	4293      	cmp	r3, r2
 80103aa:	bf34      	ite	cc
 80103ac:	2301      	movcc	r3, #1
 80103ae:	2300      	movcs	r3, #0
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d00c      	beq.n	80103d0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 80103b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	009b      	lsls	r3, r3, #2
 80103bc:	683a      	ldr	r2, [r7, #0]
 80103be:	4413      	add	r3, r2
 80103c0:	681a      	ldr	r2, [r3, #0]
 80103c2:	69fb      	ldr	r3, [r7, #28]
 80103c4:	4413      	add	r3, r2
 80103c6:	4619      	mov	r1, r3
 80103c8:	68f8      	ldr	r0, [r7, #12]
 80103ca:	f7f7 fa6e 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80103ce:	e019      	b.n	8010404 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 80103d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	3301      	adds	r3, #1
 80103d6:	687a      	ldr	r2, [r7, #4]
 80103d8:	429a      	cmp	r2, r3
 80103da:	dd0f      	ble.n	80103fc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 80103dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	1c5a      	adds	r2, r3, #1
 80103e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e4:	601a      	str	r2, [r3, #0]
 80103e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	009b      	lsls	r3, r3, #2
 80103ec:	683a      	ldr	r2, [r7, #0]
 80103ee:	4413      	add	r3, r2
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	4619      	mov	r1, r3
 80103f4:	68f8      	ldr	r0, [r7, #12]
 80103f6:	f7f7 fa58 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80103fa:	e003      	b.n	8010404 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 80103fc:	4906      	ldr	r1, [pc, #24]	; (8010418 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 80103fe:	68f8      	ldr	r0, [r7, #12]
 8010400:	f7f7 fa53 	bl	80078aa <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8010404:	f107 0314 	add.w	r3, r7, #20
 8010408:	4618      	mov	r0, r3
 801040a:	f7f7 fe06 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	3720      	adds	r7, #32
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	08017150 	.word	0x08017150

0801041c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 801041c:	b5b0      	push	{r4, r5, r7, lr}
 801041e:	b08c      	sub	sp, #48	; 0x30
 8010420:	af02      	add	r7, sp, #8
 8010422:	60f8      	str	r0, [r7, #12]
 8010424:	60b9      	str	r1, [r7, #8]
 8010426:	607a      	str	r2, [r7, #4]
 8010428:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 801042a:	f107 031c 	add.w	r3, r7, #28
 801042e:	491a      	ldr	r1, [pc, #104]	; (8010498 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8010430:	4618      	mov	r0, r3
 8010432:	f7f7 fa3a 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8010436:	f107 0014 	add.w	r0, r7, #20
 801043a:	f107 031c 	add.w	r3, r7, #28
 801043e:	9301      	str	r3, [sp, #4]
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	9300      	str	r3, [sp, #0]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	68ba      	ldr	r2, [r7, #8]
 8010448:	68f9      	ldr	r1, [r7, #12]
 801044a:	f7ff ff8f 	bl	801036c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801044e:	f107 0514 	add.w	r5, r7, #20
 8010452:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010456:	4911      	ldr	r1, [pc, #68]	; (801049c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8010458:	2010      	movs	r0, #16
 801045a:	f7f6 fb3d 	bl	8006ad8 <_ZnwjPKci>
 801045e:	4604      	mov	r4, r0
 8010460:	4629      	mov	r1, r5
 8010462:	4620      	mov	r0, r4
 8010464:	f001 fe36 	bl	80120d4 <_ZN10TestFilterC1ERK12SimpleString>
 8010468:	627c      	str	r4, [r7, #36]	; 0x24
 801046a:	f107 0314 	add.w	r3, r7, #20
 801046e:	4618      	mov	r0, r3
 8010470:	f7f7 fdd3 	bl	800801a <_ZN12SimpleStringD1Ev>
 8010474:	f107 031c 	add.w	r3, r7, #28
 8010478:	4618      	mov	r0, r3
 801047a:	f7f7 fdce 	bl	800801a <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010482:	4619      	mov	r1, r3
 8010484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010486:	f001 fe45 	bl	8012114 <_ZN10TestFilter3addEPS_>
 801048a:	4602      	mov	r2, r0
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010490:	bf00      	nop
 8010492:	3728      	adds	r7, #40	; 0x28
 8010494:	46bd      	mov	sp, r7
 8010496:	bdb0      	pop	{r4, r5, r7, pc}
 8010498:	08017184 	.word	0x08017184
 801049c:	08017b18 	.word	0x08017b18

080104a0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 80104a0:	b5b0      	push	{r4, r5, r7, lr}
 80104a2:	b092      	sub	sp, #72	; 0x48
 80104a4:	af02      	add	r7, sp, #8
 80104a6:	60f8      	str	r0, [r7, #12]
 80104a8:	60b9      	str	r1, [r7, #8]
 80104aa:	607a      	str	r2, [r7, #4]
 80104ac:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80104ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80104b2:	494e      	ldr	r1, [pc, #312]	; (80105ec <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 80104b4:	4618      	mov	r0, r3
 80104b6:	f7f7 f9f8 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80104ba:	f107 0020 	add.w	r0, r7, #32
 80104be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80104c2:	9301      	str	r3, [sp, #4]
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	9300      	str	r3, [sp, #0]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	68ba      	ldr	r2, [r7, #8]
 80104cc:	68f9      	ldr	r1, [r7, #12]
 80104ce:	f7ff ff4d 	bl	801036c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80104d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7f7 fd9f 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 80104dc:	f107 0310 	add.w	r3, r7, #16
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7f8 fba1 	bl	8008c28 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 80104e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80104ea:	4941      	ldr	r1, [pc, #260]	; (80105f0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7f7 f9dc 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80104f2:	f107 0210 	add.w	r2, r7, #16
 80104f6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80104fa:	f107 0320 	add.w	r3, r7, #32
 80104fe:	4618      	mov	r0, r3
 8010500:	f7f7 fb3f 	bl	8007b82 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8010504:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010508:	4618      	mov	r0, r3
 801050a:	f7f7 fd86 	bl	800801a <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 801050e:	f107 0310 	add.w	r3, r7, #16
 8010512:	4618      	mov	r0, r3
 8010514:	f7f8 fc2d 	bl	8008d72 <_ZNK22SimpleStringCollection4sizeEv>
 8010518:	4603      	mov	r3, r0
 801051a:	2b02      	cmp	r3, #2
 801051c:	bf14      	ite	ne
 801051e:	2301      	movne	r3, #1
 8010520:	2300      	moveq	r3, #0
 8010522:	b2db      	uxtb	r3, r3
 8010524:	2b00      	cmp	r3, #0
 8010526:	d001      	beq.n	801052c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8010528:	2400      	movs	r4, #0
 801052a:	e04f      	b.n	80105cc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 801052c:	f107 0310 	add.w	r3, r7, #16
 8010530:	2100      	movs	r1, #0
 8010532:	4618      	mov	r0, r3
 8010534:	f7f8 fc2a 	bl	8008d8c <_ZN22SimpleStringCollectionixEj>
 8010538:	4604      	mov	r4, r0
 801053a:	f107 0310 	add.w	r3, r7, #16
 801053e:	2100      	movs	r1, #0
 8010540:	4618      	mov	r0, r3
 8010542:	f7f8 fc23 	bl	8008d8c <_ZN22SimpleStringCollectionixEj>
 8010546:	4603      	mov	r3, r0
 8010548:	4618      	mov	r0, r3
 801054a:	f7f7 fd45 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 801054e:	4603      	mov	r3, r0
 8010550:	3b01      	subs	r3, #1
 8010552:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8010556:	2200      	movs	r2, #0
 8010558:	4621      	mov	r1, r4
 801055a:	f7f7 fe67 	bl	800822c <_ZNK12SimpleString9subStringEjj>
 801055e:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8010562:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8010566:	4923      	ldr	r1, [pc, #140]	; (80105f4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8010568:	2010      	movs	r0, #16
 801056a:	f7f6 fab5 	bl	8006ad8 <_ZnwjPKci>
 801056e:	4604      	mov	r4, r0
 8010570:	4629      	mov	r1, r5
 8010572:	4620      	mov	r0, r4
 8010574:	f001 fdae 	bl	80120d4 <_ZN10TestFilterC1ERK12SimpleString>
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801057c:	4619      	mov	r1, r3
 801057e:	4620      	mov	r0, r4
 8010580:	f001 fdc8 	bl	8012114 <_ZN10TestFilter3addEPS_>
 8010584:	4602      	mov	r2, r0
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	625a      	str	r2, [r3, #36]	; 0x24
 801058a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801058e:	4618      	mov	r0, r3
 8010590:	f7f7 fd43 	bl	800801a <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 8010594:	f107 0310 	add.w	r3, r7, #16
 8010598:	2101      	movs	r1, #1
 801059a:	4618      	mov	r0, r3
 801059c:	f7f8 fbf6 	bl	8008d8c <_ZN22SimpleStringCollectionixEj>
 80105a0:	4605      	mov	r5, r0
 80105a2:	f240 121f 	movw	r2, #287	; 0x11f
 80105a6:	4913      	ldr	r1, [pc, #76]	; (80105f4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80105a8:	2010      	movs	r0, #16
 80105aa:	f7f6 fa95 	bl	8006ad8 <_ZnwjPKci>
 80105ae:	4604      	mov	r4, r0
 80105b0:	4629      	mov	r1, r5
 80105b2:	4620      	mov	r0, r4
 80105b4:	f001 fd8e 	bl	80120d4 <_ZN10TestFilterC1ERK12SimpleString>
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105bc:	4619      	mov	r1, r3
 80105be:	4620      	mov	r0, r4
 80105c0:	f001 fda8 	bl	8012114 <_ZN10TestFilter3addEPS_>
 80105c4:	4602      	mov	r2, r0
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 80105ca:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 80105cc:	f107 0310 	add.w	r3, r7, #16
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7f8 fb9d 	bl	8008d10 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80105d6:	f107 0320 	add.w	r3, r7, #32
 80105da:	4618      	mov	r0, r3
 80105dc:	f7f7 fd1d 	bl	800801a <_ZN12SimpleStringD1Ev>
 80105e0:	4623      	mov	r3, r4
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3740      	adds	r7, #64	; 0x40
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bdb0      	pop	{r4, r5, r7, pc}
 80105ea:	bf00      	nop
 80105ec:	08017188 	.word	0x08017188
 80105f0:	08017b38 	.word	0x08017b38
 80105f4:	08017b18 	.word	0x08017b18

080105f8 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 80105f8:	b5b0      	push	{r4, r5, r7, lr}
 80105fa:	b08c      	sub	sp, #48	; 0x30
 80105fc:	af02      	add	r7, sp, #8
 80105fe:	60f8      	str	r0, [r7, #12]
 8010600:	60b9      	str	r1, [r7, #8]
 8010602:	607a      	str	r2, [r7, #4]
 8010604:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8010606:	f107 031c 	add.w	r3, r7, #28
 801060a:	491c      	ldr	r1, [pc, #112]	; (801067c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 801060c:	4618      	mov	r0, r3
 801060e:	f7f7 f94c 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8010612:	f107 0014 	add.w	r0, r7, #20
 8010616:	f107 031c 	add.w	r3, r7, #28
 801061a:	9301      	str	r3, [sp, #4]
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	9300      	str	r3, [sp, #0]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	68ba      	ldr	r2, [r7, #8]
 8010624:	68f9      	ldr	r1, [r7, #12]
 8010626:	f7ff fea1 	bl	801036c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801062a:	f107 0514 	add.w	r5, r7, #20
 801062e:	f240 1225 	movw	r2, #293	; 0x125
 8010632:	4913      	ldr	r1, [pc, #76]	; (8010680 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8010634:	2010      	movs	r0, #16
 8010636:	f7f6 fa4f 	bl	8006ad8 <_ZnwjPKci>
 801063a:	4604      	mov	r4, r0
 801063c:	4629      	mov	r1, r5
 801063e:	4620      	mov	r0, r4
 8010640:	f001 fd48 	bl	80120d4 <_ZN10TestFilterC1ERK12SimpleString>
 8010644:	627c      	str	r4, [r7, #36]	; 0x24
 8010646:	f107 0314 	add.w	r3, r7, #20
 801064a:	4618      	mov	r0, r3
 801064c:	f7f7 fce5 	bl	800801a <_ZN12SimpleStringD1Ev>
 8010650:	f107 031c 	add.w	r3, r7, #28
 8010654:	4618      	mov	r0, r3
 8010656:	f7f7 fce0 	bl	800801a <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 801065a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801065c:	f001 fd75 	bl	801214a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010664:	4619      	mov	r1, r3
 8010666:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010668:	f001 fd54 	bl	8012114 <_ZN10TestFilter3addEPS_>
 801066c:	4602      	mov	r2, r0
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010672:	bf00      	nop
 8010674:	3728      	adds	r7, #40	; 0x28
 8010676:	46bd      	mov	sp, r7
 8010678:	bdb0      	pop	{r4, r5, r7, pc}
 801067a:	bf00      	nop
 801067c:	0801718c 	.word	0x0801718c
 8010680:	08017b18 	.word	0x08017b18

08010684 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8010684:	b5b0      	push	{r4, r5, r7, lr}
 8010686:	b08c      	sub	sp, #48	; 0x30
 8010688:	af02      	add	r7, sp, #8
 801068a:	60f8      	str	r0, [r7, #12]
 801068c:	60b9      	str	r1, [r7, #8]
 801068e:	607a      	str	r2, [r7, #4]
 8010690:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 8010692:	f107 031c 	add.w	r3, r7, #28
 8010696:	491c      	ldr	r1, [pc, #112]	; (8010708 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8010698:	4618      	mov	r0, r3
 801069a:	f7f7 f906 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 801069e:	f107 0014 	add.w	r0, r7, #20
 80106a2:	f107 031c 	add.w	r3, r7, #28
 80106a6:	9301      	str	r3, [sp, #4]
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	9300      	str	r3, [sp, #0]
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	68ba      	ldr	r2, [r7, #8]
 80106b0:	68f9      	ldr	r1, [r7, #12]
 80106b2:	f7ff fe5b 	bl	801036c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80106b6:	f107 0514 	add.w	r5, r7, #20
 80106ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80106be:	4913      	ldr	r1, [pc, #76]	; (801070c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 80106c0:	2010      	movs	r0, #16
 80106c2:	f7f6 fa09 	bl	8006ad8 <_ZnwjPKci>
 80106c6:	4604      	mov	r4, r0
 80106c8:	4629      	mov	r1, r5
 80106ca:	4620      	mov	r0, r4
 80106cc:	f001 fd02 	bl	80120d4 <_ZN10TestFilterC1ERK12SimpleString>
 80106d0:	627c      	str	r4, [r7, #36]	; 0x24
 80106d2:	f107 0314 	add.w	r3, r7, #20
 80106d6:	4618      	mov	r0, r3
 80106d8:	f7f7 fc9f 	bl	800801a <_ZN12SimpleStringD1Ev>
 80106dc:	f107 031c 	add.w	r3, r7, #28
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7f7 fc9a 	bl	800801a <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 80106e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106e8:	f001 fd3c 	bl	8012164 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f0:	4619      	mov	r1, r3
 80106f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106f4:	f001 fd0e 	bl	8012114 <_ZN10TestFilter3addEPS_>
 80106f8:	4602      	mov	r2, r0
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80106fe:	bf00      	nop
 8010700:	3728      	adds	r7, #40	; 0x28
 8010702:	46bd      	mov	sp, r7
 8010704:	bdb0      	pop	{r4, r5, r7, pc}
 8010706:	bf00      	nop
 8010708:	08017190 	.word	0x08017190
 801070c:	08017b18 	.word	0x08017b18

08010710 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8010710:	b5b0      	push	{r4, r5, r7, lr}
 8010712:	b08c      	sub	sp, #48	; 0x30
 8010714:	af02      	add	r7, sp, #8
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	607a      	str	r2, [r7, #4]
 801071c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 801071e:	f107 031c 	add.w	r3, r7, #28
 8010722:	491d      	ldr	r1, [pc, #116]	; (8010798 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8010724:	4618      	mov	r0, r3
 8010726:	f7f7 f8c0 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 801072a:	f107 0014 	add.w	r0, r7, #20
 801072e:	f107 031c 	add.w	r3, r7, #28
 8010732:	9301      	str	r3, [sp, #4]
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	9300      	str	r3, [sp, #0]
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	68ba      	ldr	r2, [r7, #8]
 801073c:	68f9      	ldr	r1, [r7, #12]
 801073e:	f7ff fe15 	bl	801036c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010742:	f107 0514 	add.w	r5, r7, #20
 8010746:	f240 1233 	movw	r2, #307	; 0x133
 801074a:	4914      	ldr	r1, [pc, #80]	; (801079c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 801074c:	2010      	movs	r0, #16
 801074e:	f7f6 f9c3 	bl	8006ad8 <_ZnwjPKci>
 8010752:	4604      	mov	r4, r0
 8010754:	4629      	mov	r1, r5
 8010756:	4620      	mov	r0, r4
 8010758:	f001 fcbc 	bl	80120d4 <_ZN10TestFilterC1ERK12SimpleString>
 801075c:	627c      	str	r4, [r7, #36]	; 0x24
 801075e:	f107 0314 	add.w	r3, r7, #20
 8010762:	4618      	mov	r0, r3
 8010764:	f7f7 fc59 	bl	800801a <_ZN12SimpleStringD1Ev>
 8010768:	f107 031c 	add.w	r3, r7, #28
 801076c:	4618      	mov	r0, r3
 801076e:	f7f7 fc54 	bl	800801a <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8010772:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010774:	f001 fce9 	bl	801214a <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8010778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801077a:	f001 fcf3 	bl	8012164 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010782:	4619      	mov	r1, r3
 8010784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010786:	f001 fcc5 	bl	8012114 <_ZN10TestFilter3addEPS_>
 801078a:	4602      	mov	r2, r0
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010790:	bf00      	nop
 8010792:	3728      	adds	r7, #40	; 0x28
 8010794:	46bd      	mov	sp, r7
 8010796:	bdb0      	pop	{r4, r5, r7, pc}
 8010798:	08017194 	.word	0x08017194
 801079c:	08017b18 	.word	0x08017b18

080107a0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 80107a0:	b5b0      	push	{r4, r5, r7, lr}
 80107a2:	b08c      	sub	sp, #48	; 0x30
 80107a4:	af02      	add	r7, sp, #8
 80107a6:	60f8      	str	r0, [r7, #12]
 80107a8:	60b9      	str	r1, [r7, #8]
 80107aa:	607a      	str	r2, [r7, #4]
 80107ac:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 80107ae:	f107 031c 	add.w	r3, r7, #28
 80107b2:	491a      	ldr	r1, [pc, #104]	; (801081c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7f7 f878 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80107ba:	f107 0014 	add.w	r0, r7, #20
 80107be:	f107 031c 	add.w	r3, r7, #28
 80107c2:	9301      	str	r3, [sp, #4]
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	9300      	str	r3, [sp, #0]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	68ba      	ldr	r2, [r7, #8]
 80107cc:	68f9      	ldr	r1, [r7, #12]
 80107ce:	f7ff fdcd 	bl	801036c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80107d2:	f107 0514 	add.w	r5, r7, #20
 80107d6:	f240 123b 	movw	r2, #315	; 0x13b
 80107da:	4911      	ldr	r1, [pc, #68]	; (8010820 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 80107dc:	2010      	movs	r0, #16
 80107de:	f7f6 f97b 	bl	8006ad8 <_ZnwjPKci>
 80107e2:	4604      	mov	r4, r0
 80107e4:	4629      	mov	r1, r5
 80107e6:	4620      	mov	r0, r4
 80107e8:	f001 fc74 	bl	80120d4 <_ZN10TestFilterC1ERK12SimpleString>
 80107ec:	627c      	str	r4, [r7, #36]	; 0x24
 80107ee:	f107 0314 	add.w	r3, r7, #20
 80107f2:	4618      	mov	r0, r3
 80107f4:	f7f7 fc11 	bl	800801a <_ZN12SimpleStringD1Ev>
 80107f8:	f107 031c 	add.w	r3, r7, #28
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7f7 fc0c 	bl	800801a <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010806:	4619      	mov	r1, r3
 8010808:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801080a:	f001 fc83 	bl	8012114 <_ZN10TestFilter3addEPS_>
 801080e:	4602      	mov	r2, r0
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010814:	bf00      	nop
 8010816:	3728      	adds	r7, #40	; 0x28
 8010818:	46bd      	mov	sp, r7
 801081a:	bdb0      	pop	{r4, r5, r7, pc}
 801081c:	0801719c 	.word	0x0801719c
 8010820:	08017b18 	.word	0x08017b18

08010824 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8010824:	b5b0      	push	{r4, r5, r7, lr}
 8010826:	b08c      	sub	sp, #48	; 0x30
 8010828:	af02      	add	r7, sp, #8
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	60b9      	str	r1, [r7, #8]
 801082e:	607a      	str	r2, [r7, #4]
 8010830:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8010832:	f107 031c 	add.w	r3, r7, #28
 8010836:	491c      	ldr	r1, [pc, #112]	; (80108a8 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8010838:	4618      	mov	r0, r3
 801083a:	f7f7 f836 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 801083e:	f107 0014 	add.w	r0, r7, #20
 8010842:	f107 031c 	add.w	r3, r7, #28
 8010846:	9301      	str	r3, [sp, #4]
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	9300      	str	r3, [sp, #0]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	68ba      	ldr	r2, [r7, #8]
 8010850:	68f9      	ldr	r1, [r7, #12]
 8010852:	f7ff fd8b 	bl	801036c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010856:	f107 0514 	add.w	r5, r7, #20
 801085a:	f240 1241 	movw	r2, #321	; 0x141
 801085e:	4913      	ldr	r1, [pc, #76]	; (80108ac <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8010860:	2010      	movs	r0, #16
 8010862:	f7f6 f939 	bl	8006ad8 <_ZnwjPKci>
 8010866:	4604      	mov	r4, r0
 8010868:	4629      	mov	r1, r5
 801086a:	4620      	mov	r0, r4
 801086c:	f001 fc32 	bl	80120d4 <_ZN10TestFilterC1ERK12SimpleString>
 8010870:	627c      	str	r4, [r7, #36]	; 0x24
 8010872:	f107 0314 	add.w	r3, r7, #20
 8010876:	4618      	mov	r0, r3
 8010878:	f7f7 fbcf 	bl	800801a <_ZN12SimpleStringD1Ev>
 801087c:	f107 031c 	add.w	r3, r7, #28
 8010880:	4618      	mov	r0, r3
 8010882:	f7f7 fbca 	bl	800801a <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 8010886:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010888:	f001 fc5f 	bl	801214a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010890:	4619      	mov	r1, r3
 8010892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010894:	f001 fc3e 	bl	8012114 <_ZN10TestFilter3addEPS_>
 8010898:	4602      	mov	r2, r0
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	629a      	str	r2, [r3, #40]	; 0x28
}
 801089e:	bf00      	nop
 80108a0:	3728      	adds	r7, #40	; 0x28
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bdb0      	pop	{r4, r5, r7, pc}
 80108a6:	bf00      	nop
 80108a8:	080171a0 	.word	0x080171a0
 80108ac:	08017b18 	.word	0x08017b18

080108b0 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 80108b0:	b5b0      	push	{r4, r5, r7, lr}
 80108b2:	b08c      	sub	sp, #48	; 0x30
 80108b4:	af02      	add	r7, sp, #8
 80108b6:	60f8      	str	r0, [r7, #12]
 80108b8:	60b9      	str	r1, [r7, #8]
 80108ba:	607a      	str	r2, [r7, #4]
 80108bc:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 80108be:	f107 031c 	add.w	r3, r7, #28
 80108c2:	491c      	ldr	r1, [pc, #112]	; (8010934 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7f6 fff0 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80108ca:	f107 0014 	add.w	r0, r7, #20
 80108ce:	f107 031c 	add.w	r3, r7, #28
 80108d2:	9301      	str	r3, [sp, #4]
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	9300      	str	r3, [sp, #0]
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	68ba      	ldr	r2, [r7, #8]
 80108dc:	68f9      	ldr	r1, [r7, #12]
 80108de:	f7ff fd45 	bl	801036c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80108e2:	f107 0514 	add.w	r5, r7, #20
 80108e6:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80108ea:	4913      	ldr	r1, [pc, #76]	; (8010938 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 80108ec:	2010      	movs	r0, #16
 80108ee:	f7f6 f8f3 	bl	8006ad8 <_ZnwjPKci>
 80108f2:	4604      	mov	r4, r0
 80108f4:	4629      	mov	r1, r5
 80108f6:	4620      	mov	r0, r4
 80108f8:	f001 fbec 	bl	80120d4 <_ZN10TestFilterC1ERK12SimpleString>
 80108fc:	627c      	str	r4, [r7, #36]	; 0x24
 80108fe:	f107 0314 	add.w	r3, r7, #20
 8010902:	4618      	mov	r0, r3
 8010904:	f7f7 fb89 	bl	800801a <_ZN12SimpleStringD1Ev>
 8010908:	f107 031c 	add.w	r3, r7, #28
 801090c:	4618      	mov	r0, r3
 801090e:	f7f7 fb84 	bl	800801a <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8010912:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010914:	f001 fc26 	bl	8012164 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801091c:	4619      	mov	r1, r3
 801091e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010920:	f001 fbf8 	bl	8012114 <_ZN10TestFilter3addEPS_>
 8010924:	4602      	mov	r2, r0
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	629a      	str	r2, [r3, #40]	; 0x28
}
 801092a:	bf00      	nop
 801092c:	3728      	adds	r7, #40	; 0x28
 801092e:	46bd      	mov	sp, r7
 8010930:	bdb0      	pop	{r4, r5, r7, pc}
 8010932:	bf00      	nop
 8010934:	080171a4 	.word	0x080171a4
 8010938:	08017b18 	.word	0x08017b18

0801093c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 801093c:	b5b0      	push	{r4, r5, r7, lr}
 801093e:	b08c      	sub	sp, #48	; 0x30
 8010940:	af02      	add	r7, sp, #8
 8010942:	60f8      	str	r0, [r7, #12]
 8010944:	60b9      	str	r1, [r7, #8]
 8010946:	607a      	str	r2, [r7, #4]
 8010948:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 801094a:	f107 031c 	add.w	r3, r7, #28
 801094e:	491d      	ldr	r1, [pc, #116]	; (80109c4 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8010950:	4618      	mov	r0, r3
 8010952:	f7f6 ffaa 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8010956:	f107 0014 	add.w	r0, r7, #20
 801095a:	f107 031c 	add.w	r3, r7, #28
 801095e:	9301      	str	r3, [sp, #4]
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	9300      	str	r3, [sp, #0]
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	68ba      	ldr	r2, [r7, #8]
 8010968:	68f9      	ldr	r1, [r7, #12]
 801096a:	f7ff fcff 	bl	801036c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801096e:	f107 0514 	add.w	r5, r7, #20
 8010972:	f240 124f 	movw	r2, #335	; 0x14f
 8010976:	4914      	ldr	r1, [pc, #80]	; (80109c8 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8010978:	2010      	movs	r0, #16
 801097a:	f7f6 f8ad 	bl	8006ad8 <_ZnwjPKci>
 801097e:	4604      	mov	r4, r0
 8010980:	4629      	mov	r1, r5
 8010982:	4620      	mov	r0, r4
 8010984:	f001 fba6 	bl	80120d4 <_ZN10TestFilterC1ERK12SimpleString>
 8010988:	627c      	str	r4, [r7, #36]	; 0x24
 801098a:	f107 0314 	add.w	r3, r7, #20
 801098e:	4618      	mov	r0, r3
 8010990:	f7f7 fb43 	bl	800801a <_ZN12SimpleStringD1Ev>
 8010994:	f107 031c 	add.w	r3, r7, #28
 8010998:	4618      	mov	r0, r3
 801099a:	f7f7 fb3e 	bl	800801a <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 801099e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109a0:	f001 fbe0 	bl	8012164 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 80109a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109a6:	f001 fbd0 	bl	801214a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109ae:	4619      	mov	r1, r3
 80109b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109b2:	f001 fbaf 	bl	8012114 <_ZN10TestFilter3addEPS_>
 80109b6:	4602      	mov	r2, r0
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80109bc:	bf00      	nop
 80109be:	3728      	adds	r7, #40	; 0x28
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bdb0      	pop	{r4, r5, r7, pc}
 80109c4:	080171a8 	.word	0x080171a8
 80109c8:	08017b18 	.word	0x08017b18

080109cc <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 80109cc:	b5b0      	push	{r4, r5, r7, lr}
 80109ce:	b092      	sub	sp, #72	; 0x48
 80109d0:	af02      	add	r7, sp, #8
 80109d2:	60f8      	str	r0, [r7, #12]
 80109d4:	60b9      	str	r1, [r7, #8]
 80109d6:	607a      	str	r2, [r7, #4]
 80109d8:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80109da:	f107 0320 	add.w	r3, r7, #32
 80109de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7f6 ff62 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80109e6:	f107 0018 	add.w	r0, r7, #24
 80109ea:	f107 0320 	add.w	r3, r7, #32
 80109ee:	9301      	str	r3, [sp, #4]
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	9300      	str	r3, [sp, #0]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	68ba      	ldr	r2, [r7, #8]
 80109f8:	68f9      	ldr	r1, [r7, #12]
 80109fa:	f7ff fcb7 	bl	801036c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80109fe:	f107 0320 	add.w	r3, r7, #32
 8010a02:	4618      	mov	r0, r3
 8010a04:	f7f7 fb09 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8010a08:	f107 0010 	add.w	r0, r7, #16
 8010a0c:	f107 0118 	add.w	r1, r7, #24
 8010a10:	2329      	movs	r3, #41	; 0x29
 8010a12:	222c      	movs	r2, #44	; 0x2c
 8010a14:	f7f7 fcb2 	bl	800837c <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8010a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a1c:	f107 0110 	add.w	r1, r7, #16
 8010a20:	2202      	movs	r2, #2
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7f7 fc4c 	bl	80082c0 <_ZNK12SimpleString9subStringEj>
 8010a28:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a2c:	f107 0310 	add.w	r3, r7, #16
 8010a30:	4611      	mov	r1, r2
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7f6 ffa5 	bl	8007982 <_ZN12SimpleStringaSERKS_>
 8010a38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7f7 faec 	bl	800801a <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8010a42:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8010a46:	492a      	ldr	r1, [pc, #168]	; (8010af0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8010a48:	2010      	movs	r0, #16
 8010a4a:	f7f6 f845 	bl	8006ad8 <_ZnwjPKci>
 8010a4e:	4604      	mov	r4, r0
 8010a50:	f107 0310 	add.w	r3, r7, #16
 8010a54:	4619      	mov	r1, r3
 8010a56:	4620      	mov	r0, r4
 8010a58:	f001 fb3c 	bl	80120d4 <_ZN10TestFilterC1ERK12SimpleString>
 8010a5c:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 8010a5e:	f107 0318 	add.w	r3, r7, #24
 8010a62:	2100      	movs	r1, #0
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7f7 fc3c 	bl	80082e2 <_ZNK12SimpleString2atEj>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	461a      	mov	r2, r3
 8010a6e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010a72:	f107 0118 	add.w	r1, r7, #24
 8010a76:	232c      	movs	r3, #44	; 0x2c
 8010a78:	f7f7 fc80 	bl	800837c <_ZNK12SimpleString17subStringFromTillEcc>
 8010a7c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8010a80:	f240 125b 	movw	r2, #347	; 0x15b
 8010a84:	491a      	ldr	r1, [pc, #104]	; (8010af0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8010a86:	2010      	movs	r0, #16
 8010a88:	f7f6 f826 	bl	8006ad8 <_ZnwjPKci>
 8010a8c:	4604      	mov	r4, r0
 8010a8e:	4629      	mov	r1, r5
 8010a90:	4620      	mov	r0, r4
 8010a92:	f001 fb1f 	bl	80120d4 <_ZN10TestFilterC1ERK12SimpleString>
 8010a96:	63bc      	str	r4, [r7, #56]	; 0x38
 8010a98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7f7 fabc 	bl	800801a <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 8010aa2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010aa4:	f001 fb51 	bl	801214a <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 8010aa8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010aaa:	f001 fb4e 	bl	801214a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ab2:	4619      	mov	r1, r3
 8010ab4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ab6:	f001 fb2d 	bl	8012114 <_ZN10TestFilter3addEPS_>
 8010aba:	4602      	mov	r2, r0
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ac4:	4619      	mov	r1, r3
 8010ac6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ac8:	f001 fb24 	bl	8012114 <_ZN10TestFilter3addEPS_>
 8010acc:	4602      	mov	r2, r0
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8010ad2:	f107 0310 	add.w	r3, r7, #16
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7f7 fa9f 	bl	800801a <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8010adc:	f107 0318 	add.w	r3, r7, #24
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f7f7 fa9a 	bl	800801a <_ZN12SimpleStringD1Ev>
}
 8010ae6:	bf00      	nop
 8010ae8:	3740      	adds	r7, #64	; 0x40
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bdb0      	pop	{r4, r5, r7, pc}
 8010aee:	bf00      	nop
 8010af0:	08017b18 	.word	0x08017b18

08010af4 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8010af4:	b590      	push	{r4, r7, lr}
 8010af6:	b08b      	sub	sp, #44	; 0x2c
 8010af8:	af02      	add	r7, sp, #8
 8010afa:	60f8      	str	r0, [r7, #12]
 8010afc:	60b9      	str	r1, [r7, #8]
 8010afe:	607a      	str	r2, [r7, #4]
 8010b00:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8010b02:	f107 0318 	add.w	r3, r7, #24
 8010b06:	491b      	ldr	r1, [pc, #108]	; (8010b74 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7f6 fece 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8010b0e:	f107 0010 	add.w	r0, r7, #16
 8010b12:	f107 0318 	add.w	r3, r7, #24
 8010b16:	9301      	str	r3, [sp, #4]
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	9300      	str	r3, [sp, #0]
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	68ba      	ldr	r2, [r7, #8]
 8010b20:	68f9      	ldr	r1, [r7, #12]
 8010b22:	f7ff fc23 	bl	801036c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010b26:	f107 0318 	add.w	r3, r7, #24
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f7f7 fa75 	bl	800801a <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8010b30:	f107 0310 	add.w	r3, r7, #16
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7f7 fa4f 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	bf0c      	ite	eq
 8010b40:	2301      	moveq	r3, #1
 8010b42:	2300      	movne	r3, #0
 8010b44:	b2db      	uxtb	r3, r3
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d001      	beq.n	8010b4e <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 8010b4a:	2400      	movs	r4, #0
 8010b4c:	e008      	b.n	8010b60 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	3330      	adds	r3, #48	; 0x30
 8010b52:	f107 0210 	add.w	r2, r7, #16
 8010b56:	4611      	mov	r1, r2
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7f6 ff12 	bl	8007982 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8010b5e:	2401      	movs	r4, #1
 8010b60:	f107 0310 	add.w	r3, r7, #16
 8010b64:	4618      	mov	r0, r3
 8010b66:	f7f7 fa58 	bl	800801a <_ZN12SimpleStringD1Ev>
 8010b6a:	2c01      	cmp	r4, #1
}
 8010b6c:	3724      	adds	r7, #36	; 0x24
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd90      	pop	{r4, r7, pc}
 8010b72:	bf00      	nop
 8010b74:	080171d0 	.word	0x080171d0

08010b78 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8010b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b7a:	b093      	sub	sp, #76	; 0x4c
 8010b7c:	af02      	add	r7, sp, #8
 8010b7e:	60f8      	str	r0, [r7, #12]
 8010b80:	60b9      	str	r1, [r7, #8]
 8010b82:	607a      	str	r2, [r7, #4]
 8010b84:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8010b86:	f107 0318 	add.w	r3, r7, #24
 8010b8a:	4953      	ldr	r1, [pc, #332]	; (8010cd8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f7f6 fe8c 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8010b92:	f107 0010 	add.w	r0, r7, #16
 8010b96:	f107 0318 	add.w	r3, r7, #24
 8010b9a:	9301      	str	r3, [sp, #4]
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	9300      	str	r3, [sp, #0]
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	68ba      	ldr	r2, [r7, #8]
 8010ba4:	68f9      	ldr	r1, [r7, #12]
 8010ba6:	f7ff fbe1 	bl	801036c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010baa:	f107 0318 	add.w	r3, r7, #24
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7f7 fa33 	bl	800801a <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8010bb4:	f107 0310 	add.w	r3, r7, #16
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7f7 fa0d 	bl	8007fd8 <_ZNK12SimpleString4sizeEv>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	bf0c      	ite	eq
 8010bc4:	2301      	moveq	r3, #1
 8010bc6:	2300      	movne	r3, #0
 8010bc8:	b2db      	uxtb	r3, r3
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d001      	beq.n	8010bd2 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 8010bce:	2400      	movs	r4, #0
 8010bd0:	e078      	b.n	8010cc4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8010bd2:	2500      	movs	r5, #0
 8010bd4:	f107 0320 	add.w	r3, r7, #32
 8010bd8:	4940      	ldr	r1, [pc, #256]	; (8010cdc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7f6 fe65 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8010be0:	2601      	movs	r6, #1
 8010be2:	f107 0220 	add.w	r2, r7, #32
 8010be6:	f107 0310 	add.w	r3, r7, #16
 8010bea:	4611      	mov	r1, r2
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7f7 fa20 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d111      	bne.n	8010c1c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8010bf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010bfc:	4938      	ldr	r1, [pc, #224]	; (8010ce0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7f6 fe53 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8010c04:	2501      	movs	r5, #1
 8010c06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c0a:	f107 0310 	add.w	r3, r7, #16
 8010c0e:	4611      	mov	r1, r2
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7f7 fa0e 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d001      	beq.n	8010c20 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8010c1c:	2401      	movs	r4, #1
 8010c1e:	e000      	b.n	8010c22 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8010c20:	2400      	movs	r4, #0
 8010c22:	2d00      	cmp	r5, #0
 8010c24:	d004      	beq.n	8010c30 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8010c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7f7 f9f5 	bl	800801a <_ZN12SimpleStringD1Ev>
 8010c30:	2e00      	cmp	r6, #0
 8010c32:	d004      	beq.n	8010c3e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8010c34:	f107 0320 	add.w	r3, r7, #32
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7f7 f9ee 	bl	800801a <_ZN12SimpleStringD1Ev>
 8010c3e:	2c00      	cmp	r4, #0
 8010c40:	d005      	beq.n	8010c4e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	2200      	movs	r2, #0
 8010c46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8010c4a:	2401      	movs	r4, #1
 8010c4c:	e03a      	b.n	8010cc4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8010c4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010c52:	4924      	ldr	r1, [pc, #144]	; (8010ce4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8010c54:	4618      	mov	r0, r3
 8010c56:	f7f6 fe28 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8010c5a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010c5e:	f107 0310 	add.w	r3, r7, #16
 8010c62:	4611      	mov	r1, r2
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7f7 f9e4 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	461c      	mov	r4, r3
 8010c6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7f7 f9d1 	bl	800801a <_ZN12SimpleStringD1Ev>
 8010c78:	2c00      	cmp	r4, #0
 8010c7a:	d005      	beq.n	8010c88 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	2201      	movs	r2, #1
 8010c80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8010c84:	2401      	movs	r4, #1
 8010c86:	e01d      	b.n	8010cc4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8010c88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010c8c:	4916      	ldr	r1, [pc, #88]	; (8010ce8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7f6 fe0b 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 8010c94:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010c98:	f107 0310 	add.w	r3, r7, #16
 8010c9c:	4611      	mov	r1, r2
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7f7 f9c7 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	461c      	mov	r4, r3
 8010ca8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7f7 f9b4 	bl	800801a <_ZN12SimpleStringD1Ev>
 8010cb2:	2c00      	cmp	r4, #0
 8010cb4:	d005      	beq.n	8010cc2 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2202      	movs	r2, #2
 8010cba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8010cbe:	2401      	movs	r4, #1
 8010cc0:	e000      	b.n	8010cc4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8010cc2:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8010cc4:	f107 0310 	add.w	r3, r7, #16
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7f7 f9a6 	bl	800801a <_ZN12SimpleStringD1Ev>
 8010cce:	4623      	mov	r3, r4
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3744      	adds	r7, #68	; 0x44
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cd8:	080171cc 	.word	0x080171cc
 8010cdc:	08017b3c 	.word	0x08017b3c
 8010ce0:	08017b44 	.word	0x08017b44
 8010ce4:	08017b4c 	.word	0x08017b4c
 8010ce8:	08017b54 	.word	0x08017b54

08010cec <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8010cec:	b480      	push	{r7}
 8010cee:	b083      	sub	sp, #12
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010cfa:	2b01      	cmp	r3, #1
 8010cfc:	bf0c      	ite	eq
 8010cfe:	2301      	moveq	r3, #1
 8010d00:	2300      	movne	r3, #0
 8010d02:	b2db      	uxtb	r3, r3
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	370c      	adds	r7, #12
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0e:	4770      	bx	lr

08010d10 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8010d10:	b480      	push	{r7}
 8010d12:	b083      	sub	sp, #12
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010d1e:	2b02      	cmp	r3, #2
 8010d20:	bf0c      	ite	eq
 8010d22:	2301      	moveq	r3, #1
 8010d24:	2300      	movne	r3, #0
 8010d26:	b2db      	uxtb	r3, r3
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	370c      	adds	r7, #12
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d32:	4770      	bx	lr

08010d34 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8010d34:	b480      	push	{r7}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
    return packageName_;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	3330      	adds	r3, #48	; 0x30
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	370c      	adds	r7, #12
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr

08010d4c <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8010d4c:	b480      	push	{r7}
 8010d4e:	b083      	sub	sp, #12
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2200      	movs	r2, #0
 8010d58:	601a      	str	r2, [r3, #0]
    {}
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	370c      	adds	r7, #12
 8010d60:	46bd      	mov	sp, r7
 8010d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d66:	4770      	bx	lr

08010d68 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8010d68:	b480      	push	{r7}
 8010d6a:	b083      	sub	sp, #12
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d76:	2200      	movs	r2, #0
 8010d78:	601a      	str	r2, [r3, #0]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d80:	3304      	adds	r3, #4
 8010d82:	f640 72ff 	movw	r2, #4095	; 0xfff
 8010d86:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	701a      	strb	r2, [r3, #0]
}
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	4618      	mov	r0, r3
 8010d92:	370c      	adds	r7, #12
 8010d94:	46bd      	mov	sp, r7
 8010d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9a:	4770      	bx	lr

08010d9c <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b083      	sub	sp, #12
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010daa:	2200      	movs	r2, #0
 8010dac:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2200      	movs	r2, #0
 8010db2:	701a      	strb	r2, [r3, #0]
}
 8010db4:	bf00      	nop
 8010db6:	370c      	adds	r7, #12
 8010db8:	46bd      	mov	sp, r7
 8010dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbe:	4770      	bx	lr

08010dc0 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8010dc0:	b40e      	push	{r1, r2, r3}
 8010dc2:	b590      	push	{r4, r7, lr}
 8010dc4:	b086      	sub	sp, #24
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010dd0:	3304      	adds	r3, #4
 8010dd2:	681a      	ldr	r2, [r3, #0]
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	1ad3      	subs	r3, r2, r3
 8010dde:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8010de0:	697b      	ldr	r3, [r7, #20]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d032      	beq.n	8010e4c <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8010de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010dea:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8010dec:	4b1b      	ldr	r3, [pc, #108]	; (8010e5c <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8010dee:	681c      	ldr	r4, [r3, #0]
 8010df0:	687a      	ldr	r2, [r7, #4]
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	18d0      	adds	r0, r2, r3
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	1c59      	adds	r1, r3, #1
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e04:	47a0      	blx	r4
 8010e06:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	dd09      	ble.n	8010e22 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e14:	681a      	ldr	r2, [r3, #0]
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	441a      	add	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e20:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e28:	681a      	ldr	r2, [r3, #0]
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e30:	3304      	adds	r3, #4
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d90a      	bls.n	8010e4e <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e3e:	3304      	adds	r3, #4
 8010e40:	681a      	ldr	r2, [r3, #0]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e48:	601a      	str	r2, [r3, #0]
 8010e4a:	e000      	b.n	8010e4e <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8010e4c:	bf00      	nop
    va_end(arguments);
}
 8010e4e:	3718      	adds	r7, #24
 8010e50:	46bd      	mov	sp, r7
 8010e52:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8010e56:	b003      	add	sp, #12
 8010e58:	4770      	bx	lr
 8010e5a:	bf00      	nop
 8010e5c:	200000ac 	.word	0x200000ac

08010e60 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b08c      	sub	sp, #48	; 0x30
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	60f8      	str	r0, [r7, #12]
 8010e68:	60b9      	str	r1, [r7, #8]
 8010e6a:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8010e70:	2310      	movs	r3, #16
 8010e72:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8010e74:	2300      	movs	r3, #0
 8010e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8010e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d273      	bcs.n	8010f68 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8010e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e82:	493b      	ldr	r1, [pc, #236]	; (8010f70 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8010e84:	68f8      	ldr	r0, [r7, #12]
 8010e86:	f7ff ff9b 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8010e8a:	687a      	ldr	r2, [r7, #4]
 8010e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e8e:	1ad3      	subs	r3, r2, r3
 8010e90:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8010e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e94:	2b10      	cmp	r3, #16
 8010e96:	d901      	bls.n	8010e9c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8010e98:	2310      	movs	r3, #16
 8010e9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8010e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9e:	f1c3 0310 	rsb	r3, r3, #16
 8010ea2:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d215      	bcs.n	8010edc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8010eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb4:	4413      	add	r3, r2
 8010eb6:	69fa      	ldr	r2, [r7, #28]
 8010eb8:	4413      	add	r3, r2
 8010eba:	781b      	ldrb	r3, [r3, #0]
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	492d      	ldr	r1, [pc, #180]	; (8010f74 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8010ec0:	68f8      	ldr	r0, [r7, #12]
 8010ec2:	f7ff ff7d 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8010ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec8:	2b07      	cmp	r3, #7
 8010eca:	d103      	bne.n	8010ed4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8010ecc:	492a      	ldr	r1, [pc, #168]	; (8010f78 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8010ece:	68f8      	ldr	r0, [r7, #12]
 8010ed0:	f7ff ff76 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8010ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ed6:	3301      	adds	r3, #1
 8010ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8010eda:	e7e5      	b.n	8010ea8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8010edc:	2300      	movs	r3, #0
 8010ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	d207      	bcs.n	8010ef8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8010ee8:	4924      	ldr	r1, [pc, #144]	; (8010f7c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8010eea:	68f8      	ldr	r0, [r7, #12]
 8010eec:	f7ff ff68 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8010ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ef6:	e7f3      	b.n	8010ee0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	2b08      	cmp	r3, #8
 8010efc:	d903      	bls.n	8010f06 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8010efe:	491e      	ldr	r1, [pc, #120]	; (8010f78 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8010f00:	68f8      	ldr	r0, [r7, #12]
 8010f02:	f7ff ff5d 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8010f06:	491e      	ldr	r1, [pc, #120]	; (8010f80 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8010f08:	68f8      	ldr	r0, [r7, #12]
 8010f0a:	f7ff ff59 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8010f0e:	2300      	movs	r3, #0
 8010f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d21d      	bcs.n	8010f56 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8010f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f1e:	4413      	add	r3, r2
 8010f20:	69fa      	ldr	r2, [r7, #28]
 8010f22:	4413      	add	r3, r2
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8010f2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010f2e:	2b1f      	cmp	r3, #31
 8010f30:	d903      	bls.n	8010f3a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8010f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010f36:	2b7e      	cmp	r3, #126	; 0x7e
 8010f38:	d902      	bls.n	8010f40 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8010f3a:	232e      	movs	r3, #46	; 0x2e
 8010f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8010f40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010f44:	461a      	mov	r2, r3
 8010f46:	490f      	ldr	r1, [pc, #60]	; (8010f84 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8010f48:	68f8      	ldr	r0, [r7, #12]
 8010f4a:	f7ff ff39 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8010f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f50:	3301      	adds	r3, #1
 8010f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f54:	e7dd      	b.n	8010f12 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8010f56:	490c      	ldr	r1, [pc, #48]	; (8010f88 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8010f58:	68f8      	ldr	r0, [r7, #12]
 8010f5a:	f7ff ff31 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8010f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f62:	4413      	add	r3, r2
 8010f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 8010f66:	e787      	b.n	8010e78 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8010f68:	bf00      	nop
 8010f6a:	3730      	adds	r7, #48	; 0x30
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}
 8010f70:	08017b6c 	.word	0x08017b6c
 8010f74:	08017b78 	.word	0x08017b78
 8010f78:	08017b80 	.word	0x08017b80
 8010f7c:	08017b84 	.word	0x08017b84
 8010f80:	08017b88 	.word	0x08017b88
 8010f84:	08017b8c 	.word	0x08017b8c
 8010f88:	08017b90 	.word	0x08017b90

08010f8c <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b083      	sub	sp, #12
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
    return buffer_;
 8010f94:	687b      	ldr	r3, [r7, #4]
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	370c      	adds	r7, #12
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa0:	4770      	bx	lr

08010fa2 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 8010fa2:	b480      	push	{r7}
 8010fa4:	b083      	sub	sp, #12
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
 8010faa:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010fb2:	3304      	adds	r3, #4
 8010fb4:	683a      	ldr	r2, [r7, #0]
 8010fb6:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010fbe:	3304      	adds	r3, #4
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010fc6:	d306      	bcc.n	8010fd6 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010fce:	3304      	adds	r3, #4
 8010fd0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8010fd4:	601a      	str	r2, [r3, #0]
}
 8010fd6:	bf00      	nop
 8010fd8:	370c      	adds	r7, #12
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe0:	4770      	bx	lr

08010fe2 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8010fe2:	b480      	push	{r7}
 8010fe4:	b083      	sub	sp, #12
 8010fe6:	af00      	add	r7, sp, #0
 8010fe8:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ff0:	3304      	adds	r3, #4
 8010ff2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8010ff6:	601a      	str	r2, [r3, #0]
}
 8010ff8:	bf00      	nop
 8010ffa:	370c      	adds	r7, #12
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011002:	4770      	bx	lr

08011004 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8011004:	b480      	push	{r7}
 8011006:	b083      	sub	sp, #12
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011012:	681a      	ldr	r2, [r3, #0]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801101a:	3304      	adds	r3, #4
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	429a      	cmp	r2, r3
 8011020:	bf2c      	ite	cs
 8011022:	2301      	movcs	r3, #1
 8011024:	2300      	movcc	r3, #0
 8011026:	b2db      	uxtb	r3, r3
}
 8011028:	4618      	mov	r0, r3
 801102a:	370c      	adds	r7, #12
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr

08011034 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8011034:	b580      	push	{r7, lr}
 8011036:	b082      	sub	sp, #8
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2200      	movs	r2, #0
 8011040:	601a      	str	r2, [r3, #0]
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2200      	movs	r2, #0
 8011046:	711a      	strb	r2, [r3, #4]
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	3308      	adds	r3, #8
 801104c:	4618      	mov	r0, r3
 801104e:	f7ff fe8b 	bl	8010d68 <_ZN18SimpleStringBufferC1Ev>
{
}
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	4618      	mov	r0, r3
 8011056:	3708      	adds	r7, #8
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}

0801105c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 801105c:	b5b0      	push	{r4, r5, r7, lr}
 801105e:	b086      	sub	sp, #24
 8011060:	af02      	add	r7, sp, #8
 8011062:	60f8      	str	r0, [r7, #12]
 8011064:	60b9      	str	r1, [r7, #8]
 8011066:	607a      	str	r2, [r7, #4]
 8011068:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	f103 0408 	add.w	r4, r3, #8
 8011070:	687d      	ldr	r5, [r7, #4]
 8011072:	6a3b      	ldr	r3, [r7, #32]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	3314      	adds	r3, #20
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	6a38      	ldr	r0, [r7, #32]
 801107c:	4798      	blx	r3
 801107e:	4603      	mov	r3, r0
 8011080:	9301      	str	r3, [sp, #4]
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	9300      	str	r3, [sp, #0]
 8011086:	462b      	mov	r3, r5
 8011088:	68ba      	ldr	r2, [r7, #8]
 801108a:	4904      	ldr	r1, [pc, #16]	; (801109c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 801108c:	4620      	mov	r0, r4
 801108e:	f7ff fe97 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8011092:	bf00      	nop
 8011094:	3710      	adds	r7, #16
 8011096:	46bd      	mov	sp, r7
 8011098:	bdb0      	pop	{r4, r5, r7, pc}
 801109a:	bf00      	nop
 801109c:	08017b94 	.word	0x08017b94

080110a0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 80110a0:	b5b0      	push	{r4, r5, r7, lr}
 80110a2:	b086      	sub	sp, #24
 80110a4:	af02      	add	r7, sp, #8
 80110a6:	60f8      	str	r0, [r7, #12]
 80110a8:	60b9      	str	r1, [r7, #8]
 80110aa:	607a      	str	r2, [r7, #4]
 80110ac:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	f103 0408 	add.w	r4, r3, #8
 80110b4:	687d      	ldr	r5, [r7, #4]
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	3318      	adds	r3, #24
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	6838      	ldr	r0, [r7, #0]
 80110c0:	4798      	blx	r3
 80110c2:	4603      	mov	r3, r0
 80110c4:	9300      	str	r3, [sp, #0]
 80110c6:	462b      	mov	r3, r5
 80110c8:	68ba      	ldr	r2, [r7, #8]
 80110ca:	4904      	ldr	r1, [pc, #16]	; (80110dc <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 80110cc:	4620      	mov	r0, r4
 80110ce:	f7ff fe77 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80110d2:	bf00      	nop
 80110d4:	3710      	adds	r7, #16
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bdb0      	pop	{r4, r5, r7, pc}
 80110da:	bf00      	nop
 80110dc:	08017bcc 	.word	0x08017bcc

080110e0 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b082      	sub	sp, #8
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	3308      	adds	r3, #8
 80110ec:	4903      	ldr	r1, [pc, #12]	; (80110fc <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7ff fe66 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80110f4:	bf00      	nop
 80110f6:	3708      	adds	r7, #8
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	08017bfc 	.word	0x08017bfc

08011100 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b084      	sub	sp, #16
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2200      	movs	r2, #0
 801110c:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2200      	movs	r2, #0
 8011112:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8011114:	2367      	movs	r3, #103	; 0x67
 8011116:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	f203 1311 	addw	r3, r3, #273	; 0x111
 801111e:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f103 0208 	add.w	r2, r3, #8
 8011126:	68bb      	ldr	r3, [r7, #8]
 8011128:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801112c:	4619      	mov	r1, r3
 801112e:	4610      	mov	r0, r2
 8011130:	f7ff ff37 	bl	8010fa2 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8011134:	bf00      	nop
 8011136:	3710      	adds	r7, #16
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 801113c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801113e:	b089      	sub	sp, #36	; 0x24
 8011140:	af04      	add	r7, sp, #16
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d102      	bne.n	8011154 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 801114e:	68f8      	ldr	r0, [r7, #12]
 8011150:	f000 f882 	bl	8011258 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	1c5a      	adds	r2, r3, #1
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	f103 0508 	add.w	r5, r3, #8
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8011176:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	695a      	ldr	r2, [r3, #20]
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	695b      	ldr	r3, [r3, #20]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	3314      	adds	r3, #20
 8011184:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8011186:	4610      	mov	r0, r2
 8011188:	4798      	blx	r3
 801118a:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8011190:	9303      	str	r3, [sp, #12]
 8011192:	9202      	str	r2, [sp, #8]
 8011194:	683a      	ldr	r2, [r7, #0]
 8011196:	9201      	str	r2, [sp, #4]
 8011198:	9400      	str	r4, [sp, #0]
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	4632      	mov	r2, r6
 801119e:	4915      	ldr	r1, [pc, #84]	; (80111f4 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 80111a0:	4628      	mov	r0, r5
 80111a2:	f7ff fe0d 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	f103 0008 	add.w	r0, r3, #8
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	6899      	ldr	r1, [r3, #8]
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	461a      	mov	r2, r3
 80111b6:	f7ff fe53 	bl	8010e60 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	695a      	ldr	r2, [r3, #20]
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	695b      	ldr	r3, [r3, #20]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	3314      	adds	r3, #20
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	4610      	mov	r0, r2
 80111ca:	4798      	blx	r3
 80111cc:	4603      	mov	r3, r0
 80111ce:	490a      	ldr	r1, [pc, #40]	; (80111f8 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 80111d0:	4618      	mov	r0, r3
 80111d2:	f7f6 f9a7 	bl	8007524 <_ZN12SimpleString6StrCmpEPKcS1_>
 80111d6:	4603      	mov	r3, r0
 80111d8:	2b00      	cmp	r3, #0
 80111da:	bf0c      	ite	eq
 80111dc:	2301      	moveq	r3, #1
 80111de:	2300      	movne	r3, #0
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d002      	beq.n	80111ec <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2201      	movs	r2, #1
 80111ea:	711a      	strb	r2, [r3, #4]
}
 80111ec:	bf00      	nop
 80111ee:	3714      	adds	r7, #20
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111f4:	08017c1c 	.word	0x08017c1c
 80111f8:	08017c7c 	.word	0x08017c7c

080111fc <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d103      	bne.n	8011214 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f7ff ff67 	bl	80110e0 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 8011212:	e01e      	b.n	8011252 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	3308      	adds	r3, #8
 8011218:	4618      	mov	r0, r3
 801121a:	f7ff fef3 	bl	8011004 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 801121e:	4603      	mov	r3, r0
 8011220:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	3308      	adds	r3, #8
 8011226:	4618      	mov	r0, r3
 8011228:	f7ff fedb 	bl	8010fe2 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 801122c:	7bfb      	ldrb	r3, [r7, #15]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d002      	beq.n	8011238 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f000 f820 	bl	8011278 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	4619      	mov	r1, r3
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 f82a 	bl	8011298 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	791b      	ldrb	r3, [r3, #4]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d002      	beq.n	8011252 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f000 f839 	bl	80112c4 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 8011252:	3710      	adds	r7, #16
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	3308      	adds	r3, #8
 8011264:	4903      	ldr	r1, [pc, #12]	; (8011274 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8011266:	4618      	mov	r0, r3
 8011268:	f7ff fdaa 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801126c:	bf00      	nop
 801126e:	3708      	adds	r7, #8
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}
 8011274:	08017c84 	.word	0x08017c84

08011278 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b082      	sub	sp, #8
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	3308      	adds	r3, #8
 8011284:	4903      	ldr	r1, [pc, #12]	; (8011294 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8011286:	4618      	mov	r0, r3
 8011288:	f7ff fd9a 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801128c:	bf00      	nop
 801128e:	3708      	adds	r7, #8
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}
 8011294:	08017c9c 	.word	0x08017c9c

08011298 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
 80112a0:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f103 0008 	add.w	r0, r3, #8
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	4a04      	ldr	r2, [pc, #16]	; (80112bc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 80112ac:	4904      	ldr	r1, [pc, #16]	; (80112c0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 80112ae:	f7ff fd87 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80112b2:	bf00      	nop
 80112b4:	3708      	adds	r7, #8
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}
 80112ba:	bf00      	nop
 80112bc:	08017ce4 	.word	0x08017ce4
 80112c0:	08017cfc 	.word	0x08017cfc

080112c4 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b082      	sub	sp, #8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	3308      	adds	r3, #8
 80112d0:	4903      	ldr	r1, [pc, #12]	; (80112e0 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7ff fd74 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80112d8:	bf00      	nop
 80112da:	3708      	adds	r7, #8
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}
 80112e0:	08017d04 	.word	0x08017d04

080112e4 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b08a      	sub	sp, #40	; 0x28
 80112e8:	af06      	add	r7, sp, #24
 80112ea:	60f8      	str	r0, [r7, #12]
 80112ec:	60b9      	str	r1, [r7, #8]
 80112ee:	607a      	str	r2, [r7, #4]
 80112f0:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 80112f2:	f7f9 fe9f 	bl	800b034 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 80112f6:	4602      	mov	r2, r0
 80112f8:	69bb      	ldr	r3, [r7, #24]
 80112fa:	9305      	str	r3, [sp, #20]
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	9304      	str	r3, [sp, #16]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	9303      	str	r3, [sp, #12]
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	9302      	str	r3, [sp, #8]
 8011308:	9201      	str	r2, [sp, #4]
 801130a:	2300      	movs	r3, #0
 801130c:	9300      	str	r3, [sp, #0]
 801130e:	2300      	movs	r3, #0
 8011310:	4a04      	ldr	r2, [pc, #16]	; (8011324 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8011312:	4905      	ldr	r1, [pc, #20]	; (8011328 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8011314:	68f8      	ldr	r0, [r7, #12]
 8011316:	f000 f855 	bl	80113c4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801131a:	bf00      	nop
 801131c:	3710      	adds	r7, #16
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
 8011322:	bf00      	nop
 8011324:	08017b60 	.word	0x08017b60
 8011328:	08017e18 	.word	0x08017e18

0801132c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 801132c:	b590      	push	{r4, r7, lr}
 801132e:	b08b      	sub	sp, #44	; 0x2c
 8011330:	af06      	add	r7, sp, #24
 8011332:	60f8      	str	r0, [r7, #12]
 8011334:	60b9      	str	r1, [r7, #8]
 8011336:	607a      	str	r2, [r7, #4]
 8011338:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	68d8      	ldr	r0, [r3, #12]
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	691c      	ldr	r4, [r3, #16]
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	68ba      	ldr	r2, [r7, #8]
 8011348:	6952      	ldr	r2, [r2, #20]
 801134a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801134c:	9105      	str	r1, [sp, #20]
 801134e:	6a39      	ldr	r1, [r7, #32]
 8011350:	9104      	str	r1, [sp, #16]
 8011352:	6839      	ldr	r1, [r7, #0]
 8011354:	9103      	str	r1, [sp, #12]
 8011356:	6879      	ldr	r1, [r7, #4]
 8011358:	9102      	str	r1, [sp, #8]
 801135a:	9201      	str	r2, [sp, #4]
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	4623      	mov	r3, r4
 8011360:	4602      	mov	r2, r0
 8011362:	4904      	ldr	r1, [pc, #16]	; (8011374 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8011364:	68f8      	ldr	r0, [r7, #12]
 8011366:	f000 f82d 	bl	80113c4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801136a:	bf00      	nop
 801136c:	3714      	adds	r7, #20
 801136e:	46bd      	mov	sp, r7
 8011370:	bd90      	pop	{r4, r7, pc}
 8011372:	bf00      	nop
 8011374:	08017e3c 	.word	0x08017e3c

08011378 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8011378:	b590      	push	{r4, r7, lr}
 801137a:	b08b      	sub	sp, #44	; 0x2c
 801137c:	af06      	add	r7, sp, #24
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	607a      	str	r2, [r7, #4]
 8011384:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8011386:	68bb      	ldr	r3, [r7, #8]
 8011388:	68d8      	ldr	r0, [r3, #12]
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	691c      	ldr	r4, [r3, #16]
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	68ba      	ldr	r2, [r7, #8]
 8011394:	6952      	ldr	r2, [r2, #20]
 8011396:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011398:	9105      	str	r1, [sp, #20]
 801139a:	6a39      	ldr	r1, [r7, #32]
 801139c:	9104      	str	r1, [sp, #16]
 801139e:	6839      	ldr	r1, [r7, #0]
 80113a0:	9103      	str	r1, [sp, #12]
 80113a2:	6879      	ldr	r1, [r7, #4]
 80113a4:	9102      	str	r1, [sp, #8]
 80113a6:	9201      	str	r2, [sp, #4]
 80113a8:	9300      	str	r3, [sp, #0]
 80113aa:	4623      	mov	r3, r4
 80113ac:	4602      	mov	r2, r0
 80113ae:	4904      	ldr	r1, [pc, #16]	; (80113c0 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80113b0:	68f8      	ldr	r0, [r7, #12]
 80113b2:	f000 f807 	bl	80113c4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80113b6:	bf00      	nop
 80113b8:	3714      	adds	r7, #20
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd90      	pop	{r4, r7, pc}
 80113be:	bf00      	nop
 80113c0:	08017e64 	.word	0x08017e64

080113c4 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80113c4:	b590      	push	{r4, r7, lr}
 80113c6:	b087      	sub	sp, #28
 80113c8:	af02      	add	r7, sp, #8
 80113ca:	60f8      	str	r0, [r7, #12]
 80113cc:	60b9      	str	r1, [r7, #8]
 80113ce:	607a      	str	r2, [r7, #4]
 80113d0:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	3308      	adds	r3, #8
 80113d6:	68ba      	ldr	r2, [r7, #8]
 80113d8:	4910      	ldr	r1, [pc, #64]	; (801141c <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 80113da:	4618      	mov	r0, r3
 80113dc:	f7ff fcf0 	bl	8010dc0 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 80113e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e2:	9300      	str	r3, [sp, #0]
 80113e4:	6a3b      	ldr	r3, [r7, #32]
 80113e6:	683a      	ldr	r2, [r7, #0]
 80113e8:	6879      	ldr	r1, [r7, #4]
 80113ea:	68f8      	ldr	r0, [r7, #12]
 80113ec:	f7ff fe36 	bl	801105c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 80113f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80113f6:	68f8      	ldr	r0, [r7, #12]
 80113f8:	f7ff fe52 	bl	80110a0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 80113fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	3308      	adds	r3, #8
 8011402:	681c      	ldr	r4, [r3, #0]
 8011404:	68f8      	ldr	r0, [r7, #12]
 8011406:	f000 f80b 	bl	8011420 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 801140a:	4603      	mov	r3, r0
 801140c:	4619      	mov	r1, r3
 801140e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011410:	47a0      	blx	r4
}
 8011412:	bf00      	nop
 8011414:	3714      	adds	r7, #20
 8011416:	46bd      	mov	sp, r7
 8011418:	bd90      	pop	{r4, r7, pc}
 801141a:	bf00      	nop
 801141c:	08017e90 	.word	0x08017e90

08011420 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b082      	sub	sp, #8
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	3308      	adds	r3, #8
 801142c:	4618      	mov	r0, r3
 801142e:	f7ff fdad 	bl	8010f8c <_ZN18SimpleStringBuffer8toStringEv>
 8011432:	4603      	mov	r3, r0
}
 8011434:	4618      	mov	r0, r3
 8011436:	3708      	adds	r7, #8
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}

0801143c <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	3308      	adds	r3, #8
 8011448:	4618      	mov	r0, r3
 801144a:	f7ff fca7 	bl	8010d9c <_ZN18SimpleStringBuffer5clearEv>
}
 801144e:	bf00      	nop
 8011450:	3708      	adds	r7, #8
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}

08011456 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8011456:	b480      	push	{r7}
 8011458:	b085      	sub	sp, #20
 801145a:	af00      	add	r7, sp, #0
 801145c:	60f8      	str	r0, [r7, #12]
 801145e:	60b9      	str	r1, [r7, #8]
 8011460:	607a      	str	r2, [r7, #4]
 8011462:	603b      	str	r3, [r7, #0]
    number_ = number;
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	68ba      	ldr	r2, [r7, #8]
 801146e:	609a      	str	r2, [r3, #8]
    size_ = size;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	683a      	ldr	r2, [r7, #0]
 8011474:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	69ba      	ldr	r2, [r7, #24]
 801147a:	615a      	str	r2, [r3, #20]
    period_ = period;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	7f3a      	ldrb	r2, [r7, #28]
 8011480:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	f897 2020 	ldrb.w	r2, [r7, #32]
 8011488:	765a      	strb	r2, [r3, #25]
    file_ = file;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801148e:	60da      	str	r2, [r3, #12]
    line_ = line;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011494:	611a      	str	r2, [r3, #16]
}
 8011496:	bf00      	nop
 8011498:	3714      	adds	r7, #20
 801149a:	46bd      	mov	sp, r7
 801149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a0:	4770      	bx	lr

080114a2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80114a2:	b480      	push	{r7}
 80114a4:	b085      	sub	sp, #20
 80114a6:	af00      	add	r7, sp, #0
 80114a8:	60f8      	str	r0, [r7, #12]
 80114aa:	60b9      	str	r1, [r7, #8]
 80114ac:	4613      	mov	r3, r2
 80114ae:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 80114b0:	79fb      	ldrb	r3, [r7, #7]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d00b      	beq.n	80114ce <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	7e1b      	ldrb	r3, [r3, #24]
 80114ba:	79fa      	ldrb	r2, [r7, #7]
 80114bc:	429a      	cmp	r2, r3
 80114be:	d006      	beq.n	80114ce <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	7e1b      	ldrb	r3, [r3, #24]
 80114c4:	2b01      	cmp	r3, #1
 80114c6:	d004      	beq.n	80114d2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80114c8:	79fb      	ldrb	r3, [r7, #7]
 80114ca:	2b02      	cmp	r3, #2
 80114cc:	d101      	bne.n	80114d2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80114ce:	2301      	movs	r3, #1
 80114d0:	e000      	b.n	80114d4 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 80114d2:	2300      	movs	r3, #0
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3714      	adds	r7, #20
 80114d8:	46bd      	mov	sp, r7
 80114da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114de:	4770      	bx	lr

080114e0 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 80114e0:	b480      	push	{r7}
 80114e2:	b083      	sub	sp, #12
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681a      	ldr	r2, [r3, #0]
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	61da      	str	r2, [r3, #28]
    head_ = node;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	683a      	ldr	r2, [r7, #0]
 80114f6:	601a      	str	r2, [r3, #0]
}
 80114f8:	bf00      	nop
 80114fa:	370c      	adds	r7, #12
 80114fc:	46bd      	mov	sp, r7
 80114fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011502:	4770      	bx	lr

08011504 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8011504:	b480      	push	{r7}
 8011506:	b085      	sub	sp, #20
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
 801150c:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8011514:	2300      	movs	r3, #0
 8011516:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d019      	beq.n	8011552 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	689b      	ldr	r3, [r3, #8]
 8011522:	683a      	ldr	r2, [r7, #0]
 8011524:	429a      	cmp	r2, r3
 8011526:	d10e      	bne.n	8011546 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d005      	beq.n	801153a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	69da      	ldr	r2, [r3, #28]
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	61da      	str	r2, [r3, #28]
                return cur;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	e00c      	b.n	8011554 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	69da      	ldr	r2, [r3, #28]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	601a      	str	r2, [r3, #0]
                return cur;
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	e006      	b.n	8011554 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	69db      	ldr	r3, [r3, #28]
 801154e:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8011550:	e7e2      	b.n	8011518 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8011552:	2300      	movs	r3, #0
}
 8011554:	4618      	mov	r0, r3
 8011556:	3714      	adds	r7, #20
 8011558:	46bd      	mov	sp, r7
 801155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155e:	4770      	bx	lr

08011560 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8011560:	b480      	push	{r7}
 8011562:	b085      	sub	sp, #20
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d00a      	beq.n	801158c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	689b      	ldr	r3, [r3, #8]
 801157a:	683a      	ldr	r2, [r7, #0]
 801157c:	429a      	cmp	r2, r3
 801157e:	d101      	bne.n	8011584 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	e004      	b.n	801158e <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	69db      	ldr	r3, [r3, #28]
 8011588:	60fb      	str	r3, [r7, #12]
  while (cur) {
 801158a:	e7f1      	b.n	8011570 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 801158c:	2300      	movs	r3, #0
}
 801158e:	4618      	mov	r0, r3
 8011590:	3714      	adds	r7, #20
 8011592:	46bd      	mov	sp, r7
 8011594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011598:	4770      	bx	lr

0801159a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 801159a:	b580      	push	{r7, lr}
 801159c:	b086      	sub	sp, #24
 801159e:	af00      	add	r7, sp, #0
 80115a0:	60f8      	str	r0, [r7, #12]
 80115a2:	60b9      	str	r1, [r7, #8]
 80115a4:	4613      	mov	r3, r2
 80115a6:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80115a8:	68bb      	ldr	r3, [r7, #8]
 80115aa:	617b      	str	r3, [r7, #20]
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d00e      	beq.n	80115d0 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 80115b2:	79fb      	ldrb	r3, [r7, #7]
 80115b4:	461a      	mov	r2, r3
 80115b6:	6979      	ldr	r1, [r7, #20]
 80115b8:	68f8      	ldr	r0, [r7, #12]
 80115ba:	f7ff ff72 	bl	80114a2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80115be:	4603      	mov	r3, r0
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d001      	beq.n	80115c8 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	e004      	b.n	80115d2 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	69db      	ldr	r3, [r3, #28]
 80115cc:	617b      	str	r3, [r7, #20]
 80115ce:	e7ed      	b.n	80115ac <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 80115d0:	2300      	movs	r3, #0
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	3718      	adds	r7, #24
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}

080115da <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 80115da:	b580      	push	{r7, lr}
 80115dc:	b082      	sub	sp, #8
 80115de:	af00      	add	r7, sp, #0
 80115e0:	6078      	str	r0, [r7, #4]
 80115e2:	460b      	mov	r3, r1
 80115e4:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	78fa      	ldrb	r2, [r7, #3]
 80115ec:	4619      	mov	r1, r3
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f7ff ffd3 	bl	801159a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80115f4:	4603      	mov	r3, r0
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3708      	adds	r7, #8
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}

080115fe <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80115fe:	b580      	push	{r7, lr}
 8011600:	b084      	sub	sp, #16
 8011602:	af00      	add	r7, sp, #0
 8011604:	60f8      	str	r0, [r7, #12]
 8011606:	60b9      	str	r1, [r7, #8]
 8011608:	4613      	mov	r3, r2
 801160a:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	69db      	ldr	r3, [r3, #28]
 8011610:	79fa      	ldrb	r2, [r7, #7]
 8011612:	4619      	mov	r1, r3
 8011614:	68f8      	ldr	r0, [r7, #12]
 8011616:	f7ff ffc0 	bl	801159a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801161a:	4603      	mov	r3, r0
}
 801161c:	4618      	mov	r0, r3
 801161e:	3710      	adds	r7, #16
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}

08011624 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	460b      	mov	r3, r1
 801162e:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8011630:	2300      	movs	r3, #0
 8011632:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	60bb      	str	r3, [r7, #8]
 801163a:	68bb      	ldr	r3, [r7, #8]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d00f      	beq.n	8011660 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8011640:	78fb      	ldrb	r3, [r7, #3]
 8011642:	461a      	mov	r2, r3
 8011644:	68b9      	ldr	r1, [r7, #8]
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	f7ff ff2b 	bl	80114a2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801164c:	4603      	mov	r3, r0
 801164e:	2b00      	cmp	r3, #0
 8011650:	d002      	beq.n	8011658 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	3301      	adds	r3, #1
 8011656:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	69db      	ldr	r3, [r3, #28]
 801165c:	60bb      	str	r3, [r7, #8]
 801165e:	e7ec      	b.n	801163a <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8011660:	68fb      	ldr	r3, [r7, #12]
}
 8011662:	4618      	mov	r0, r3
 8011664:	3710      	adds	r7, #16
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}
	...

0801166c <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 801166c:	b480      	push	{r7}
 801166e:	b083      	sub	sp, #12
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 8011676:	6839      	ldr	r1, [r7, #0]
 8011678:	4b09      	ldr	r3, [pc, #36]	; (80116a0 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 801167a:	fba3 2301 	umull	r2, r3, r3, r1
 801167e:	1aca      	subs	r2, r1, r3
 8011680:	0852      	lsrs	r2, r2, #1
 8011682:	4413      	add	r3, r2
 8011684:	099a      	lsrs	r2, r3, #6
 8011686:	4613      	mov	r3, r2
 8011688:	00db      	lsls	r3, r3, #3
 801168a:	4413      	add	r3, r2
 801168c:	00db      	lsls	r3, r3, #3
 801168e:	4413      	add	r3, r2
 8011690:	1aca      	subs	r2, r1, r3
 8011692:	4613      	mov	r3, r2
}
 8011694:	4618      	mov	r0, r3
 8011696:	370c      	adds	r7, #12
 8011698:	46bd      	mov	sp, r7
 801169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169e:	4770      	bx	lr
 80116a0:	c0e07039 	.word	0xc0e07039

080116a4 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b082      	sub	sp, #8
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
 80116ac:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	689b      	ldr	r3, [r3, #8]
 80116b2:	4619      	mov	r1, r3
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f7ff ffd9 	bl	801166c <_ZN23MemoryLeakDetectorTable4hashEPc>
 80116ba:	4603      	mov	r3, r0
 80116bc:	009b      	lsls	r3, r3, #2
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	4413      	add	r3, r2
 80116c2:	6839      	ldr	r1, [r7, #0]
 80116c4:	4618      	mov	r0, r3
 80116c6:	f7ff ff0b 	bl	80114e0 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 80116ca:	bf00      	nop
 80116cc:	3708      	adds	r7, #8
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}

080116d2 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 80116d2:	b580      	push	{r7, lr}
 80116d4:	b082      	sub	sp, #8
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	6078      	str	r0, [r7, #4]
 80116da:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 80116dc:	6839      	ldr	r1, [r7, #0]
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f7ff ffc4 	bl	801166c <_ZN23MemoryLeakDetectorTable4hashEPc>
 80116e4:	4603      	mov	r3, r0
 80116e6:	009b      	lsls	r3, r3, #2
 80116e8:	687a      	ldr	r2, [r7, #4]
 80116ea:	4413      	add	r3, r2
 80116ec:	6839      	ldr	r1, [r7, #0]
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7ff ff08 	bl	8011504 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 80116f4:	4603      	mov	r3, r0
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3708      	adds	r7, #8
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 80116fe:	b580      	push	{r7, lr}
 8011700:	b082      	sub	sp, #8
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
 8011706:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8011708:	6839      	ldr	r1, [r7, #0]
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f7ff ffae 	bl	801166c <_ZN23MemoryLeakDetectorTable4hashEPc>
 8011710:	4603      	mov	r3, r0
 8011712:	009b      	lsls	r3, r3, #2
 8011714:	687a      	ldr	r2, [r7, #4]
 8011716:	4413      	add	r3, r2
 8011718:	6839      	ldr	r1, [r7, #0]
 801171a:	4618      	mov	r0, r3
 801171c:	f7ff ff20 	bl	8011560 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8011720:	4603      	mov	r3, r0
}
 8011722:	4618      	mov	r0, r3
 8011724:	3708      	adds	r7, #8
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}

0801172a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 801172a:	b580      	push	{r7, lr}
 801172c:	b084      	sub	sp, #16
 801172e:	af00      	add	r7, sp, #0
 8011730:	6078      	str	r0, [r7, #4]
 8011732:	460b      	mov	r3, r1
 8011734:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8011736:	2300      	movs	r3, #0
 8011738:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801173a:	2300      	movs	r3, #0
 801173c:	60bb      	str	r3, [r7, #8]
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	2b48      	cmp	r3, #72	; 0x48
 8011742:	dc10      	bgt.n	8011766 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	009b      	lsls	r3, r3, #2
 8011748:	687a      	ldr	r2, [r7, #4]
 801174a:	4413      	add	r3, r2
 801174c:	78fa      	ldrb	r2, [r7, #3]
 801174e:	4611      	mov	r1, r2
 8011750:	4618      	mov	r0, r3
 8011752:	f7ff ff67 	bl	8011624 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8011756:	4602      	mov	r2, r0
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	4413      	add	r3, r2
 801175c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	3301      	adds	r3, #1
 8011762:	60bb      	str	r3, [r7, #8]
 8011764:	e7eb      	b.n	801173e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8011766:	68fb      	ldr	r3, [r7, #12]
}
 8011768:	4618      	mov	r0, r3
 801176a:	3710      	adds	r7, #16
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}

08011770 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b084      	sub	sp, #16
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	460b      	mov	r3, r1
 801177a:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 801177c:	2300      	movs	r3, #0
 801177e:	60fb      	str	r3, [r7, #12]
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	2b48      	cmp	r3, #72	; 0x48
 8011784:	dc12      	bgt.n	80117ac <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	009b      	lsls	r3, r3, #2
 801178a:	687a      	ldr	r2, [r7, #4]
 801178c:	4413      	add	r3, r2
 801178e:	78fa      	ldrb	r2, [r7, #3]
 8011790:	4611      	mov	r1, r2
 8011792:	4618      	mov	r0, r3
 8011794:	f7ff ff21 	bl	80115da <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8011798:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d001      	beq.n	80117a4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	e004      	b.n	80117ae <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	3301      	adds	r3, #1
 80117a8:	60fb      	str	r3, [r7, #12]
 80117aa:	e7e9      	b.n	8011780 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 80117ac:	2300      	movs	r3, #0
}
 80117ae:	4618      	mov	r0, r3
 80117b0:	3710      	adds	r7, #16
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}

080117b6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 80117b6:	b580      	push	{r7, lr}
 80117b8:	b086      	sub	sp, #24
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	60f8      	str	r0, [r7, #12]
 80117be:	60b9      	str	r1, [r7, #8]
 80117c0:	4613      	mov	r3, r2
 80117c2:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	689b      	ldr	r3, [r3, #8]
 80117c8:	4619      	mov	r1, r3
 80117ca:	68f8      	ldr	r0, [r7, #12]
 80117cc:	f7ff ff4e 	bl	801166c <_ZN23MemoryLeakDetectorTable4hashEPc>
 80117d0:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	009b      	lsls	r3, r3, #2
 80117d6:	68fa      	ldr	r2, [r7, #12]
 80117d8:	4413      	add	r3, r2
 80117da:	79fa      	ldrb	r2, [r7, #7]
 80117dc:	68b9      	ldr	r1, [r7, #8]
 80117de:	4618      	mov	r0, r3
 80117e0:	f7ff ff0d 	bl	80115fe <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80117e4:	6138      	str	r0, [r7, #16]
    if (node) return node;
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d001      	beq.n	80117f0 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 80117ec:	693b      	ldr	r3, [r7, #16]
 80117ee:	e019      	b.n	8011824 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	3301      	adds	r3, #1
 80117f4:	617b      	str	r3, [r7, #20]
 80117f6:	697b      	ldr	r3, [r7, #20]
 80117f8:	2b48      	cmp	r3, #72	; 0x48
 80117fa:	d812      	bhi.n	8011822 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	009b      	lsls	r3, r3, #2
 8011800:	68fa      	ldr	r2, [r7, #12]
 8011802:	4413      	add	r3, r2
 8011804:	79fa      	ldrb	r2, [r7, #7]
 8011806:	4611      	mov	r1, r2
 8011808:	4618      	mov	r0, r3
 801180a:	f7ff fee6 	bl	80115da <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 801180e:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8011810:	693b      	ldr	r3, [r7, #16]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d001      	beq.n	801181a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	e004      	b.n	8011824 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	3301      	adds	r3, #1
 801181e:	617b      	str	r3, [r7, #20]
 8011820:	e7e9      	b.n	80117f6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8011822:	2300      	movs	r3, #0
}
 8011824:	4618      	mov	r0, r3
 8011826:	3718      	adds	r7, #24
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}

0801182c <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 801182c:	b5b0      	push	{r4, r5, r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2448      	movs	r4, #72	; 0x48
 8011838:	461d      	mov	r5, r3
 801183a:	2c00      	cmp	r4, #0
 801183c:	db05      	blt.n	801184a <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 801183e:	4628      	mov	r0, r5
 8011840:	f7ff fa84 	bl	8010d4c <_ZN22MemoryLeakDetectorListC1Ev>
 8011844:	3504      	adds	r5, #4
 8011846:	3c01      	subs	r4, #1
 8011848:	e7f7      	b.n	801183a <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	4618      	mov	r0, r3
 801184e:	3708      	adds	r7, #8
 8011850:	46bd      	mov	sp, r7
 8011852:	bdb0      	pop	{r4, r5, r7, pc}

08011854 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8011854:	b590      	push	{r4, r7, lr}
 8011856:	b083      	sub	sp, #12
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
 801185e:	4a1d      	ldr	r2, [pc, #116]	; (80118d4 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	601a      	str	r2, [r3, #0]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	330c      	adds	r3, #12
 8011868:	4618      	mov	r0, r3
 801186a:	f7ff fbe3 	bl	8011034 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011874:	331c      	adds	r3, #28
 8011876:	4618      	mov	r0, r3
 8011878:	f7ff ffd8 	bl	801182c <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011882:	2201      	movs	r2, #1
 8011884:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801188c:	3304      	adds	r3, #4
 801188e:	2201      	movs	r2, #1
 8011890:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	2201      	movs	r2, #1
 8011896:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801189e:	3308      	adds	r3, #8
 80118a0:	2200      	movs	r2, #0
 80118a2:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	683a      	ldr	r2, [r7, #0]
 80118a8:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 80118aa:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 80118ae:	490a      	ldr	r1, [pc, #40]	; (80118d8 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 80118b0:	2004      	movs	r0, #4
 80118b2:	f7f5 f911 	bl	8006ad8 <_ZnwjPKci>
 80118b6:	4604      	mov	r4, r0
 80118b8:	4620      	mov	r0, r4
 80118ba:	f7f5 fd07 	bl	80072cc <_ZN11SimpleMutexC1Ev>
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80118c4:	330c      	adds	r3, #12
 80118c6:	601c      	str	r4, [r3, #0]
}
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	4618      	mov	r0, r3
 80118cc:	370c      	adds	r7, #12
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd90      	pop	{r4, r7, pc}
 80118d2:	bf00      	nop
 80118d4:	08019014 	.word	0x08019014
 80118d8:	08017e94 	.word	0x08017e94

080118dc <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 80118dc:	b590      	push	{r4, r7, lr}
 80118de:	b083      	sub	sp, #12
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	4a0e      	ldr	r2, [pc, #56]	; (8011920 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80118f0:	330c      	adds	r3, #12
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d00d      	beq.n	8011914 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80118fe:	330c      	adds	r3, #12
 8011900:	681c      	ldr	r4, [r3, #0]
 8011902:	2c00      	cmp	r4, #0
 8011904:	d006      	beq.n	8011914 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8011906:	4620      	mov	r0, r4
 8011908:	f7f5 fcf2 	bl	80072f0 <_ZN11SimpleMutexD1Ev>
 801190c:	2104      	movs	r1, #4
 801190e:	4620      	mov	r0, r4
 8011910:	f7f5 f8f6 	bl	8006b00 <_ZdlPvj>
    }
}
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	4618      	mov	r0, r3
 8011918:	370c      	adds	r7, #12
 801191a:	46bd      	mov	sp, r7
 801191c:	bd90      	pop	{r4, r7, pc}
 801191e:	bf00      	nop
 8011920:	08019014 	.word	0x08019014

08011924 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8011924:	b580      	push	{r7, lr}
 8011926:	b082      	sub	sp, #8
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
}
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f7ff ffd5 	bl	80118dc <_ZN18MemoryLeakDetectorD1Ev>
 8011932:	f241 1150 	movw	r1, #4432	; 0x1150
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f7f5 f8e2 	bl	8006b00 <_ZdlPvj>
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	4618      	mov	r0, r3
 8011940:	3708      	adds	r7, #8
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}

08011946 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8011946:	b580      	push	{r7, lr}
 8011948:	b082      	sub	sp, #8
 801194a:	af00      	add	r7, sp, #0
 801194c:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	330c      	adds	r3, #12
 8011952:	4618      	mov	r0, r3
 8011954:	f7ff fd72 	bl	801143c <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2203      	movs	r2, #3
 801195c:	721a      	strb	r2, [r3, #8]
}
 801195e:	bf00      	nop
 8011960:	3708      	adds	r7, #8
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}

08011966 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8011966:	b480      	push	{r7}
 8011968:	b083      	sub	sp, #12
 801196a:	af00      	add	r7, sp, #0
 801196c:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2202      	movs	r2, #2
 8011972:	721a      	strb	r2, [r3, #8]
}
 8011974:	bf00      	nop
 8011976:	370c      	adds	r7, #12
 8011978:	46bd      	mov	sp, r7
 801197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197e:	4770      	bx	lr

08011980 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8011980:	b480      	push	{r7}
 8011982:	b083      	sub	sp, #12
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2202      	movs	r2, #2
 801198c:	721a      	strb	r2, [r3, #8]
}
 801198e:	bf00      	nop
 8011990:	370c      	adds	r7, #12
 8011992:	46bd      	mov	sp, r7
 8011994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011998:	4770      	bx	lr

0801199a <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 801199a:	b480      	push	{r7}
 801199c:	b083      	sub	sp, #12
 801199e:	af00      	add	r7, sp, #0
 80119a0:	6078      	str	r0, [r7, #4]
    return mutex_;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80119a8:	330c      	adds	r3, #12
 80119aa:	681b      	ldr	r3, [r3, #0]
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	370c      	adds	r7, #12
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr

080119b8 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 80119b8:	b480      	push	{r7}
 80119ba:	b083      	sub	sp, #12
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f023 0303 	bic.w	r3, r3, #3
 80119c6:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	370c      	adds	r7, #12
 80119cc:	46bd      	mov	sp, r7
 80119ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d2:	4770      	bx	lr

080119d4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	3303      	adds	r3, #3
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7ff ffe8 	bl	80119b8 <_ZL31calculateVoidPointerAlignedSizej>
 80119e8:	4603      	mov	r3, r0
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3708      	adds	r7, #8
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}

080119f2 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 80119f2:	b580      	push	{r7, lr}
 80119f4:	b084      	sub	sp, #16
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	60f8      	str	r0, [r7, #12]
 80119fa:	60b9      	str	r1, [r7, #8]
 80119fc:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 80119fe:	6879      	ldr	r1, [r7, #4]
 8011a00:	68f8      	ldr	r0, [r7, #12]
 8011a02:	f7ff ffe7 	bl	80119d4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8011a06:	4602      	mov	r2, r0
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	4413      	add	r3, r2
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3710      	adds	r7, #16
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}

08011a14 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b08a      	sub	sp, #40	; 0x28
 8011a18:	af06      	add	r7, sp, #24
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	60b9      	str	r1, [r7, #8]
 8011a1e:	607a      	str	r2, [r7, #4]
 8011a20:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011a28:	3304      	adds	r3, #4
 8011a2a:	681a      	ldr	r2, [r3, #0]
 8011a2c:	1c51      	adds	r1, r2, #1
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011a34:	3304      	adds	r3, #4
 8011a36:	6019      	str	r1, [r3, #0]
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	7a19      	ldrb	r1, [r3, #8]
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011a42:	3308      	adds	r3, #8
 8011a44:	781b      	ldrb	r3, [r3, #0]
 8011a46:	6a38      	ldr	r0, [r7, #32]
 8011a48:	9004      	str	r0, [sp, #16]
 8011a4a:	69f8      	ldr	r0, [r7, #28]
 8011a4c:	9003      	str	r0, [sp, #12]
 8011a4e:	9302      	str	r3, [sp, #8]
 8011a50:	9101      	str	r1, [sp, #4]
 8011a52:	69bb      	ldr	r3, [r7, #24]
 8011a54:	9300      	str	r3, [sp, #0]
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	6879      	ldr	r1, [r7, #4]
 8011a5a:	68b8      	ldr	r0, [r7, #8]
 8011a5c:	f7ff fcfb 	bl	8011456 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	689a      	ldr	r2, [r3, #8]
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	4413      	add	r3, r2
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	68f8      	ldr	r0, [r7, #12]
 8011a6e:	f000 f861 	bl	8011b34 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a78:	331c      	adds	r3, #28
 8011a7a:	68b9      	ldr	r1, [r7, #8]
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7ff fe11 	bl	80116a4 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8011a82:	bf00      	nop
 8011a84:	3710      	adds	r7, #16
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}

08011a8a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8011a8a:	b580      	push	{r7, lr}
 8011a8c:	b08a      	sub	sp, #40	; 0x28
 8011a8e:	af04      	add	r7, sp, #16
 8011a90:	60f8      	str	r0, [r7, #12]
 8011a92:	60b9      	str	r1, [r7, #8]
 8011a94:	607a      	str	r2, [r7, #4]
 8011a96:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8011a98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011a9c:	9302      	str	r3, [sp, #8]
 8011a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa0:	9301      	str	r3, [sp, #4]
 8011aa2:	6a3b      	ldr	r3, [r7, #32]
 8011aa4:	9300      	str	r3, [sp, #0]
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	687a      	ldr	r2, [r7, #4]
 8011aaa:	68b9      	ldr	r1, [r7, #8]
 8011aac:	68f8      	ldr	r0, [r7, #12]
 8011aae:	f000 f96f 	bl	8011d90 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8011ab2:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d101      	bne.n	8011abe <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 8011aba:	2300      	movs	r3, #0
 8011abc:	e017      	b.n	8011aee <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 8011abe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011ac2:	9300      	str	r3, [sp, #0]
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	683a      	ldr	r2, [r7, #0]
 8011ac8:	68b9      	ldr	r1, [r7, #8]
 8011aca:	68f8      	ldr	r0, [r7, #12]
 8011acc:	f000 f98a 	bl	8011de4 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8011ad0:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8011ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad4:	9302      	str	r3, [sp, #8]
 8011ad6:	6a3b      	ldr	r3, [r7, #32]
 8011ad8:	9301      	str	r3, [sp, #4]
 8011ada:	68bb      	ldr	r3, [r7, #8]
 8011adc:	9300      	str	r3, [sp, #0]
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	697a      	ldr	r2, [r7, #20]
 8011ae2:	6939      	ldr	r1, [r7, #16]
 8011ae4:	68f8      	ldr	r0, [r7, #12]
 8011ae6:	f7ff ff95 	bl	8011a14 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	689b      	ldr	r3, [r3, #8]
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3718      	adds	r7, #24
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}
	...

08011af8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b084      	sub	sp, #16
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b08:	331c      	adds	r3, #28
 8011b0a:	6839      	ldr	r1, [r7, #0]
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7ff fdf6 	bl	80116fe <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8011b12:	60f8      	str	r0, [r7, #12]
  if (node)
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d006      	beq.n	8011b28 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 8011b1a:	4b05      	ldr	r3, [pc, #20]	; (8011b30 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	68fa      	ldr	r2, [r7, #12]
 8011b20:	6812      	ldr	r2, [r2, #0]
 8011b22:	21cd      	movs	r1, #205	; 0xcd
 8011b24:	6838      	ldr	r0, [r7, #0]
 8011b26:	4798      	blx	r3
#endif
}
 8011b28:	bf00      	nop
 8011b2a:	3710      	adds	r7, #16
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}
 8011b30:	200000d0 	.word	0x200000d0

08011b34 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8011b34:	b480      	push	{r7}
 8011b36:	b085      	sub	sp, #20
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8011b3e:	2300      	movs	r3, #0
 8011b40:	60fb      	str	r3, [r7, #12]
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	2b02      	cmp	r3, #2
 8011b46:	d812      	bhi.n	8011b6e <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8011b48:	68f9      	ldr	r1, [r7, #12]
 8011b4a:	4b0c      	ldr	r3, [pc, #48]	; (8011b7c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8011b4c:	fba3 2301 	umull	r2, r3, r3, r1
 8011b50:	085a      	lsrs	r2, r3, #1
 8011b52:	4613      	mov	r3, r2
 8011b54:	005b      	lsls	r3, r3, #1
 8011b56:	4413      	add	r3, r2
 8011b58:	1aca      	subs	r2, r1, r3
 8011b5a:	6839      	ldr	r1, [r7, #0]
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	440b      	add	r3, r1
 8011b60:	4907      	ldr	r1, [pc, #28]	; (8011b80 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8011b62:	5c8a      	ldrb	r2, [r1, r2]
 8011b64:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	3301      	adds	r3, #1
 8011b6a:	60fb      	str	r3, [r7, #12]
 8011b6c:	e7e9      	b.n	8011b42 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8011b6e:	bf00      	nop
 8011b70:	3714      	adds	r7, #20
 8011b72:	46bd      	mov	sp, r7
 8011b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b78:	4770      	bx	lr
 8011b7a:	bf00      	nop
 8011b7c:	aaaaaaab 	.word	0xaaaaaaab
 8011b80:	08019008 	.word	0x08019008

08011b84 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8011b84:	b480      	push	{r7}
 8011b86:	b085      	sub	sp, #20
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
 8011b8c:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8011b8e:	2300      	movs	r3, #0
 8011b90:	60fb      	str	r3, [r7, #12]
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	2b02      	cmp	r3, #2
 8011b96:	d816      	bhi.n	8011bc6 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8011b98:	683a      	ldr	r2, [r7, #0]
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	4413      	add	r3, r2
 8011b9e:	7818      	ldrb	r0, [r3, #0]
 8011ba0:	68f9      	ldr	r1, [r7, #12]
 8011ba2:	4b0c      	ldr	r3, [pc, #48]	; (8011bd4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8011ba4:	fba3 2301 	umull	r2, r3, r3, r1
 8011ba8:	085a      	lsrs	r2, r3, #1
 8011baa:	4613      	mov	r3, r2
 8011bac:	005b      	lsls	r3, r3, #1
 8011bae:	4413      	add	r3, r2
 8011bb0:	1aca      	subs	r2, r1, r3
 8011bb2:	4b09      	ldr	r3, [pc, #36]	; (8011bd8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8011bb4:	5c9b      	ldrb	r3, [r3, r2]
 8011bb6:	4298      	cmp	r0, r3
 8011bb8:	d001      	beq.n	8011bbe <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	e004      	b.n	8011bc8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	3301      	adds	r3, #1
 8011bc2:	60fb      	str	r3, [r7, #12]
 8011bc4:	e7e5      	b.n	8011b92 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8011bc6:	2301      	movs	r3, #1
}
 8011bc8:	4618      	mov	r0, r3
 8011bca:	3714      	adds	r7, #20
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr
 8011bd4:	aaaaaaab 	.word	0xaaaaaaab
 8011bd8:	08019008 	.word	0x08019008

08011bdc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b084      	sub	sp, #16
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8011be8:	68ba      	ldr	r2, [r7, #8]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d101      	bne.n	8011bf4 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	e013      	b.n	8011c1c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	f083 0301 	eor.w	r3, r3, #1
 8011c00:	b2db      	uxtb	r3, r3
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d001      	beq.n	8011c0a <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8011c06:	2301      	movs	r3, #1
 8011c08:	e008      	b.n	8011c1c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	331c      	adds	r3, #28
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	68b9      	ldr	r1, [r7, #8]
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	4798      	blx	r3
 8011c18:	4603      	mov	r3, r0
 8011c1a:	bf00      	nop
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3710      	adds	r7, #16
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8011c24:	b590      	push	{r4, r7, lr}
 8011c26:	b087      	sub	sp, #28
 8011c28:	af02      	add	r7, sp, #8
 8011c2a:	60f8      	str	r0, [r7, #12]
 8011c2c:	60b9      	str	r1, [r7, #8]
 8011c2e:	607a      	str	r2, [r7, #4]
 8011c30:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	695a      	ldr	r2, [r3, #20]
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	695b      	ldr	r3, [r3, #20]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	3328      	adds	r3, #40	; 0x28
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	4610      	mov	r0, r2
 8011c42:	4798      	blx	r3
 8011c44:	4604      	mov	r4, r0
 8011c46:	6a3b      	ldr	r3, [r7, #32]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	3328      	adds	r3, #40	; 0x28
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	6a38      	ldr	r0, [r7, #32]
 8011c50:	4798      	blx	r3
 8011c52:	4603      	mov	r3, r0
 8011c54:	461a      	mov	r2, r3
 8011c56:	4621      	mov	r1, r4
 8011c58:	68f8      	ldr	r0, [r7, #12]
 8011c5a:	f7ff ffbf 	bl	8011bdc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	f083 0301 	eor.w	r3, r3, #1
 8011c64:	b2db      	uxtb	r3, r3
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d014      	beq.n	8011c94 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	f103 040c 	add.w	r4, r3, #12
 8011c70:	6a3b      	ldr	r3, [r7, #32]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	3328      	adds	r3, #40	; 0x28
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	6a38      	ldr	r0, [r7, #32]
 8011c7a:	4798      	blx	r3
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	685b      	ldr	r3, [r3, #4]
 8011c82:	9301      	str	r3, [sp, #4]
 8011c84:	9200      	str	r2, [sp, #0]
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	687a      	ldr	r2, [r7, #4]
 8011c8a:	68b9      	ldr	r1, [r7, #8]
 8011c8c:	4620      	mov	r0, r4
 8011c8e:	f7ff fb4d 	bl	801132c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8011c92:	e02e      	b.n	8011cf2 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8011c94:	68bb      	ldr	r3, [r7, #8]
 8011c96:	689a      	ldr	r2, [r3, #8]
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	4413      	add	r3, r2
 8011c9e:	4619      	mov	r1, r3
 8011ca0:	68f8      	ldr	r0, [r7, #12]
 8011ca2:	f7ff ff6f 	bl	8011b84 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	f083 0301 	eor.w	r3, r3, #1
 8011cac:	b2db      	uxtb	r3, r3
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d014      	beq.n	8011cdc <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	f103 040c 	add.w	r4, r3, #12
 8011cb8:	6a3b      	ldr	r3, [r7, #32]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	3328      	adds	r3, #40	; 0x28
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	6a38      	ldr	r0, [r7, #32]
 8011cc2:	4798      	blx	r3
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	9301      	str	r3, [sp, #4]
 8011ccc:	9200      	str	r2, [sp, #0]
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	687a      	ldr	r2, [r7, #4]
 8011cd2:	68b9      	ldr	r1, [r7, #8]
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	f7ff fb4f 	bl	8011378 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8011cda:	e00a      	b.n	8011cf2 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8011cdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d006      	beq.n	8011cf2 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8011ce4:	6a3b      	ldr	r3, [r7, #32]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	3324      	adds	r3, #36	; 0x24
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	68b9      	ldr	r1, [r7, #8]
 8011cee:	6a38      	ldr	r0, [r7, #32]
 8011cf0:	4798      	blx	r3
}
 8011cf2:	bf00      	nop
 8011cf4:	3714      	adds	r7, #20
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd90      	pop	{r4, r7, pc}
	...

08011cfc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b086      	sub	sp, #24
 8011d00:	af02      	add	r7, sp, #8
 8011d02:	60f8      	str	r0, [r7, #12]
 8011d04:	60b9      	str	r1, [r7, #8]
 8011d06:	607a      	str	r2, [r7, #4]
 8011d08:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8011d0a:	4b08      	ldr	r3, [pc, #32]	; (8011d2c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8011d0c:	681a      	ldr	r2, [r3, #0]
 8011d0e:	78fb      	ldrb	r3, [r7, #3]
 8011d10:	9301      	str	r3, [sp, #4]
 8011d12:	2300      	movs	r3, #0
 8011d14:	9300      	str	r3, [sp, #0]
 8011d16:	4613      	mov	r3, r2
 8011d18:	687a      	ldr	r2, [r7, #4]
 8011d1a:	68b9      	ldr	r1, [r7, #8]
 8011d1c:	68f8      	ldr	r0, [r7, #12]
 8011d1e:	f000 f87f 	bl	8011e20 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8011d22:	4603      	mov	r3, r0
}
 8011d24:	4618      	mov	r0, r3
 8011d26:	3710      	adds	r7, #16
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	200000f8 	.word	0x200000f8

08011d30 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8011d30:	b590      	push	{r4, r7, lr}
 8011d32:	b085      	sub	sp, #20
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	60f8      	str	r0, [r7, #12]
 8011d38:	60b9      	str	r1, [r7, #8]
 8011d3a:	607a      	str	r2, [r7, #4]
 8011d3c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8011d3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d00e      	beq.n	8011d64 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	3308      	adds	r3, #8
 8011d4c:	681c      	ldr	r4, [r3, #0]
 8011d4e:	6879      	ldr	r1, [r7, #4]
 8011d50:	68f8      	ldr	r0, [r7, #12]
 8011d52:	f7ff fe3f 	bl	80119d4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8011d56:	4601      	mov	r1, r0
 8011d58:	6a3b      	ldr	r3, [r7, #32]
 8011d5a:	683a      	ldr	r2, [r7, #0]
 8011d5c:	68b8      	ldr	r0, [r7, #8]
 8011d5e:	47a0      	blx	r4
 8011d60:	4603      	mov	r3, r0
 8011d62:	e010      	b.n	8011d86 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	3308      	adds	r3, #8
 8011d6a:	681c      	ldr	r4, [r3, #0]
 8011d6c:	6879      	ldr	r1, [r7, #4]
 8011d6e:	68f8      	ldr	r0, [r7, #12]
 8011d70:	f7ff fe30 	bl	80119d4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8011d74:	4603      	mov	r3, r0
 8011d76:	f103 0120 	add.w	r1, r3, #32
 8011d7a:	6a3b      	ldr	r3, [r7, #32]
 8011d7c:	683a      	ldr	r2, [r7, #0]
 8011d7e:	68b8      	ldr	r0, [r7, #8]
 8011d80:	47a0      	blx	r4
 8011d82:	4603      	mov	r3, r0
 8011d84:	bf00      	nop
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3714      	adds	r7, #20
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd90      	pop	{r4, r7, pc}
	...

08011d90 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8011d90:	b590      	push	{r4, r7, lr}
 8011d92:	b085      	sub	sp, #20
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	607a      	str	r2, [r7, #4]
 8011d9c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8011d9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d00b      	beq.n	8011dbe <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8011da6:	4b0e      	ldr	r3, [pc, #56]	; (8011de0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8011da8:	681c      	ldr	r4, [r3, #0]
 8011daa:	6839      	ldr	r1, [r7, #0]
 8011dac:	68f8      	ldr	r0, [r7, #12]
 8011dae:	f7ff fe11 	bl	80119d4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8011db2:	4603      	mov	r3, r0
 8011db4:	4619      	mov	r1, r3
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	47a0      	blx	r4
 8011dba:	4603      	mov	r3, r0
 8011dbc:	e00c      	b.n	8011dd8 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8011dbe:	4b08      	ldr	r3, [pc, #32]	; (8011de0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8011dc0:	681c      	ldr	r4, [r3, #0]
 8011dc2:	6839      	ldr	r1, [r7, #0]
 8011dc4:	68f8      	ldr	r0, [r7, #12]
 8011dc6:	f7ff fe05 	bl	80119d4 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	3320      	adds	r3, #32
 8011dce:	4619      	mov	r1, r3
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	47a0      	blx	r4
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	bf00      	nop
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3714      	adds	r7, #20
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd90      	pop	{r4, r7, pc}
 8011de0:	200000c8 	.word	0x200000c8

08011de4 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b084      	sub	sp, #16
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	60f8      	str	r0, [r7, #12]
 8011dec:	60b9      	str	r1, [r7, #8]
 8011dee:	607a      	str	r2, [r7, #4]
 8011df0:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8011df2:	7e3b      	ldrb	r3, [r7, #24]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d008      	beq.n	8011e0a <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8011df8:	68bb      	ldr	r3, [r7, #8]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	3320      	adds	r3, #32
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	2120      	movs	r1, #32
 8011e02:	68b8      	ldr	r0, [r7, #8]
 8011e04:	4798      	blx	r3
 8011e06:	4603      	mov	r3, r0
 8011e08:	e006      	b.n	8011e18 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8011e0a:	687a      	ldr	r2, [r7, #4]
 8011e0c:	6839      	ldr	r1, [r7, #0]
 8011e0e:	68f8      	ldr	r0, [r7, #12]
 8011e10:	f7ff fdef 	bl	80119f2 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8011e14:	4603      	mov	r3, r0
 8011e16:	bf00      	nop
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	3710      	adds	r7, #16
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}

08011e20 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b08a      	sub	sp, #40	; 0x28
 8011e24:	af04      	add	r7, sp, #16
 8011e26:	60f8      	str	r0, [r7, #12]
 8011e28:	60b9      	str	r1, [r7, #8]
 8011e2a:	607a      	str	r2, [r7, #4]
 8011e2c:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8011e2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011e32:	9301      	str	r3, [sp, #4]
 8011e34:	6a3b      	ldr	r3, [r7, #32]
 8011e36:	9300      	str	r3, [sp, #0]
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	687a      	ldr	r2, [r7, #4]
 8011e3c:	68b9      	ldr	r1, [r7, #8]
 8011e3e:	68f8      	ldr	r0, [r7, #12]
 8011e40:	f7ff ff76 	bl	8011d30 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8011e44:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d101      	bne.n	8011e50 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	e017      	b.n	8011e80 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8011e50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011e54:	9300      	str	r3, [sp, #0]
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	687a      	ldr	r2, [r7, #4]
 8011e5a:	68b9      	ldr	r1, [r7, #8]
 8011e5c:	68f8      	ldr	r0, [r7, #12]
 8011e5e:	f7ff ffc1 	bl	8011de4 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8011e62:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8011e64:	6a3b      	ldr	r3, [r7, #32]
 8011e66:	9302      	str	r3, [sp, #8]
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	9301      	str	r3, [sp, #4]
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	9300      	str	r3, [sp, #0]
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	697a      	ldr	r2, [r7, #20]
 8011e74:	6939      	ldr	r1, [r7, #16]
 8011e76:	68f8      	ldr	r0, [r7, #12]
 8011e78:	f7ff fdcc 	bl	8011a14 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	689b      	ldr	r3, [r3, #8]
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3718      	adds	r7, #24
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}

08011e88 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8011e88:	b590      	push	{r4, r7, lr}
 8011e8a:	b089      	sub	sp, #36	; 0x24
 8011e8c:	af02      	add	r7, sp, #8
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	60b9      	str	r1, [r7, #8]
 8011e92:	607a      	str	r2, [r7, #4]
 8011e94:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d03a      	beq.n	8011f12 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ea2:	331c      	adds	r3, #28
 8011ea4:	6879      	ldr	r1, [r7, #4]
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f7ff fc13 	bl	80116d2 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8011eac:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8011eae:	697b      	ldr	r3, [r7, #20]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d10b      	bne.n	8011ecc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f103 000c 	add.w	r0, r3, #12
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	685b      	ldr	r3, [r3, #4]
 8011ebe:	9300      	str	r3, [sp, #0]
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ec4:	6839      	ldr	r1, [r7, #0]
 8011ec6:	f7ff fa0d 	bl	80112e4 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8011eca:	e023      	b.n	8011f14 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8011ecc:	68b8      	ldr	r0, [r7, #8]
 8011ece:	f7f8 ffa7 	bl	800ae20 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	f083 0301 	eor.w	r3, r3, #1
 8011ed8:	b2db      	uxtb	r3, r3
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d01a      	beq.n	8011f14 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8011ede:	697b      	ldr	r3, [r7, #20]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8011ee4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011ee8:	9301      	str	r3, [sp, #4]
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	9300      	str	r3, [sp, #0]
 8011eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef0:	683a      	ldr	r2, [r7, #0]
 8011ef2:	6979      	ldr	r1, [r7, #20]
 8011ef4:	68f8      	ldr	r0, [r7, #12]
 8011ef6:	f7ff fe95 	bl	8011c24 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8011efa:	68bb      	ldr	r3, [r7, #8]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	330c      	adds	r3, #12
 8011f00:	681c      	ldr	r4, [r3, #0]
 8011f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f04:	9300      	str	r3, [sp, #0]
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	693a      	ldr	r2, [r7, #16]
 8011f0a:	6879      	ldr	r1, [r7, #4]
 8011f0c:	68b8      	ldr	r0, [r7, #8]
 8011f0e:	47a0      	blx	r4
 8011f10:	e000      	b.n	8011f14 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8011f12:	bf00      	nop
    }
}
 8011f14:	371c      	adds	r7, #28
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd90      	pop	{r4, r7, pc}
	...

08011f1c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b086      	sub	sp, #24
 8011f20:	af02      	add	r7, sp, #8
 8011f22:	60f8      	str	r0, [r7, #12]
 8011f24:	60b9      	str	r1, [r7, #8]
 8011f26:	607a      	str	r2, [r7, #4]
 8011f28:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8011f2a:	4b08      	ldr	r3, [pc, #32]	; (8011f4c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8011f2c:	681a      	ldr	r2, [r3, #0]
 8011f2e:	78fb      	ldrb	r3, [r7, #3]
 8011f30:	9301      	str	r3, [sp, #4]
 8011f32:	2300      	movs	r3, #0
 8011f34:	9300      	str	r3, [sp, #0]
 8011f36:	4613      	mov	r3, r2
 8011f38:	687a      	ldr	r2, [r7, #4]
 8011f3a:	68b9      	ldr	r1, [r7, #8]
 8011f3c:	68f8      	ldr	r0, [r7, #12]
 8011f3e:	f7ff ffa3 	bl	8011e88 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8011f42:	bf00      	nop
 8011f44:	3710      	adds	r7, #16
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}
 8011f4a:	bf00      	nop
 8011f4c:	200000f8 	.word	0x200000f8

08011f50 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b08a      	sub	sp, #40	; 0x28
 8011f54:	af04      	add	r7, sp, #16
 8011f56:	60f8      	str	r0, [r7, #12]
 8011f58:	60b9      	str	r1, [r7, #8]
 8011f5a:	607a      	str	r2, [r7, #4]
 8011f5c:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d023      	beq.n	8011fac <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f6a:	331c      	adds	r3, #28
 8011f6c:	6879      	ldr	r1, [r7, #4]
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7ff fbaf 	bl	80116d2 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8011f74:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d10c      	bne.n	8011f96 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	f103 000c 	add.w	r0, r3, #12
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	9300      	str	r3, [sp, #0]
 8011f88:	68bb      	ldr	r3, [r7, #8]
 8011f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f8c:	6a39      	ldr	r1, [r7, #32]
 8011f8e:	f7ff f9a9 	bl	80112e4 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8011f92:	2300      	movs	r3, #0
 8011f94:	e019      	b.n	8011fca <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8011f96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011f9a:	9301      	str	r3, [sp, #4]
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	9300      	str	r3, [sp, #0]
 8011fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa2:	6a3a      	ldr	r2, [r7, #32]
 8011fa4:	6979      	ldr	r1, [r7, #20]
 8011fa6:	68f8      	ldr	r0, [r7, #12]
 8011fa8:	f7ff fe3c 	bl	8011c24 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8011fac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011fb0:	9302      	str	r3, [sp, #8]
 8011fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb4:	9301      	str	r3, [sp, #4]
 8011fb6:	6a3b      	ldr	r3, [r7, #32]
 8011fb8:	9300      	str	r3, [sp, #0]
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	687a      	ldr	r2, [r7, #4]
 8011fbe:	68b9      	ldr	r1, [r7, #8]
 8011fc0:	68f8      	ldr	r0, [r7, #12]
 8011fc2:	f7ff fd62 	bl	8011a8a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	bf00      	nop
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	3718      	adds	r7, #24
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}

08011fd2 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8011fd2:	b580      	push	{r7, lr}
 8011fd4:	b084      	sub	sp, #16
 8011fd6:	af00      	add	r7, sp, #0
 8011fd8:	6078      	str	r0, [r7, #4]
 8011fda:	460b      	mov	r3, r1
 8011fdc:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011fe4:	331c      	adds	r3, #28
 8011fe6:	78fa      	ldrb	r2, [r7, #3]
 8011fe8:	4611      	mov	r1, r2
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7ff fbc0 	bl	8011770 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8011ff0:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	330c      	adds	r3, #12
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f7ff f882 	bl	8011100 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d010      	beq.n	8012024 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	330c      	adds	r3, #12
 8012006:	68f9      	ldr	r1, [r7, #12]
 8012008:	4618      	mov	r0, r3
 801200a:	f7ff f897 	bl	801113c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012014:	331c      	adds	r3, #28
 8012016:	78fa      	ldrb	r2, [r7, #3]
 8012018:	68f9      	ldr	r1, [r7, #12]
 801201a:	4618      	mov	r0, r3
 801201c:	f7ff fbcb 	bl	80117b6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8012020:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8012022:	e7eb      	b.n	8011ffc <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	330c      	adds	r3, #12
 8012028:	4618      	mov	r0, r3
 801202a:	f7ff f8e7 	bl	80111fc <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 801202e:	bf00      	nop
 8012030:	3710      	adds	r7, #16
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}

08012036 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8012036:	b580      	push	{r7, lr}
 8012038:	b082      	sub	sp, #8
 801203a:	af00      	add	r7, sp, #0
 801203c:	6078      	str	r0, [r7, #4]
 801203e:	460b      	mov	r3, r1
 8012040:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8012042:	78fb      	ldrb	r3, [r7, #3]
 8012044:	4619      	mov	r1, r3
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f7ff ffc3 	bl	8011fd2 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	330c      	adds	r3, #12
 8012050:	4618      	mov	r0, r3
 8012052:	f7ff f9e5 	bl	8011420 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8012056:	4603      	mov	r3, r0
}
 8012058:	4618      	mov	r0, r3
 801205a:	3708      	adds	r7, #8
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}

08012060 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b084      	sub	sp, #16
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801206e:	331c      	adds	r3, #28
 8012070:	2103      	movs	r1, #3
 8012072:	4618      	mov	r0, r3
 8012074:	f7ff fb7c 	bl	8011770 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8012078:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d011      	beq.n	80120a4 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	7e1b      	ldrb	r3, [r3, #24]
 8012084:	2b03      	cmp	r3, #3
 8012086:	d102      	bne.n	801208e <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	2202      	movs	r2, #2
 801208c:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012094:	331c      	adds	r3, #28
 8012096:	2203      	movs	r2, #3
 8012098:	68f9      	ldr	r1, [r7, #12]
 801209a:	4618      	mov	r0, r3
 801209c:	f7ff fb8b 	bl	80117b6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80120a0:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80120a2:	e7ea      	b.n	801207a <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 80120a4:	bf00      	nop
 80120a6:	3710      	adds	r7, #16
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}

080120ac <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b082      	sub	sp, #8
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
 80120b4:	460b      	mov	r3, r1
 80120b6:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80120be:	331c      	adds	r3, #28
 80120c0:	78fa      	ldrb	r2, [r7, #3]
 80120c2:	4611      	mov	r1, r2
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7ff fb30 	bl	801172a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 80120ca:	4603      	mov	r3, r0
}
 80120cc:	4618      	mov	r0, r3
 80120ce:	3708      	adds	r7, #8
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}

080120d4 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b082      	sub	sp, #8
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	6039      	str	r1, [r7, #0]
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	490b      	ldr	r1, [pc, #44]	; (8012110 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 80120e2:	4618      	mov	r0, r3
 80120e4:	f7f5 fbe1 	bl	80078aa <_ZN12SimpleStringC1EPKc>
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2200      	movs	r2, #0
 80120ec:	721a      	strb	r2, [r3, #8]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2200      	movs	r2, #0
 80120f2:	725a      	strb	r2, [r3, #9]
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2200      	movs	r2, #0
 80120f8:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6839      	ldr	r1, [r7, #0]
 80120fe:	4618      	mov	r0, r3
 8012100:	f7f5 fc3f 	bl	8007982 <_ZN12SimpleStringaSERKS_>
}
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	4618      	mov	r0, r3
 8012108:	3708      	adds	r7, #8
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
 801210e:	bf00      	nop
 8012110:	08017eb4 	.word	0x08017eb4

08012114 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 8012114:	b480      	push	{r7}
 8012116:	b083      	sub	sp, #12
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	683a      	ldr	r2, [r7, #0]
 8012122:	60da      	str	r2, [r3, #12]
    return this;
 8012124:	687b      	ldr	r3, [r7, #4]
}
 8012126:	4618      	mov	r0, r3
 8012128:	370c      	adds	r7, #12
 801212a:	46bd      	mov	sp, r7
 801212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012130:	4770      	bx	lr

08012132 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 8012132:	b480      	push	{r7}
 8012134:	b083      	sub	sp, #12
 8012136:	af00      	add	r7, sp, #0
 8012138:	6078      	str	r0, [r7, #4]
    return next_;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	68db      	ldr	r3, [r3, #12]
}
 801213e:	4618      	mov	r0, r3
 8012140:	370c      	adds	r7, #12
 8012142:	46bd      	mov	sp, r7
 8012144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012148:	4770      	bx	lr

0801214a <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801214a:	b480      	push	{r7}
 801214c:	b083      	sub	sp, #12
 801214e:	af00      	add	r7, sp, #0
 8012150:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2201      	movs	r2, #1
 8012156:	721a      	strb	r2, [r3, #8]
}
 8012158:	bf00      	nop
 801215a:	370c      	adds	r7, #12
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr

08012164 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 8012164:	b480      	push	{r7}
 8012166:	b083      	sub	sp, #12
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2201      	movs	r2, #1
 8012170:	725a      	strb	r2, [r3, #9]
}
 8012172:	bf00      	nop
 8012174:	370c      	adds	r7, #12
 8012176:	46bd      	mov	sp, r7
 8012178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217c:	4770      	bx	lr

0801217e <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801217e:	b580      	push	{r7, lr}
 8012180:	b084      	sub	sp, #16
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
 8012186:	6039      	str	r1, [r7, #0]
    bool matches = false;
 8012188:	2300      	movs	r3, #0
 801218a:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	7a1b      	ldrb	r3, [r3, #8]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d007      	beq.n	80121a4 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	4619      	mov	r1, r3
 8012198:	6838      	ldr	r0, [r7, #0]
 801219a:	f7f5 ff4a 	bl	8008032 <_ZeqRK12SimpleStringS1_>
 801219e:	4603      	mov	r3, r0
 80121a0:	73fb      	strb	r3, [r7, #15]
 80121a2:	e006      	b.n	80121b2 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	4619      	mov	r1, r3
 80121a8:	6838      	ldr	r0, [r7, #0]
 80121aa:	f7f5 fbfc 	bl	80079a6 <_ZNK12SimpleString8containsERKS_>
 80121ae:	4603      	mov	r3, r0
 80121b0:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	7a5b      	ldrb	r3, [r3, #9]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d004      	beq.n	80121c4 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 80121ba:	7bfb      	ldrb	r3, [r7, #15]
 80121bc:	f083 0301 	eor.w	r3, r3, #1
 80121c0:	b2db      	uxtb	r3, r3
 80121c2:	e005      	b.n	80121d0 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 80121c4:	7bfb      	ldrb	r3, [r7, #15]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	bf14      	ite	ne
 80121ca:	2301      	movne	r3, #1
 80121cc:	2300      	moveq	r3, #0
 80121ce:	b2db      	uxtb	r3, r3
}
 80121d0:	4618      	mov	r0, r3
 80121d2:	3710      	adds	r7, #16
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <__cxa_guard_acquire>:
 80121d8:	6803      	ldr	r3, [r0, #0]
 80121da:	07db      	lsls	r3, r3, #31
 80121dc:	d406      	bmi.n	80121ec <__cxa_guard_acquire+0x14>
 80121de:	7843      	ldrb	r3, [r0, #1]
 80121e0:	b103      	cbz	r3, 80121e4 <__cxa_guard_acquire+0xc>
 80121e2:	deff      	udf	#255	; 0xff
 80121e4:	2301      	movs	r3, #1
 80121e6:	7043      	strb	r3, [r0, #1]
 80121e8:	4618      	mov	r0, r3
 80121ea:	4770      	bx	lr
 80121ec:	2000      	movs	r0, #0
 80121ee:	4770      	bx	lr

080121f0 <__cxa_guard_release>:
 80121f0:	2301      	movs	r3, #1
 80121f2:	6003      	str	r3, [r0, #0]
 80121f4:	4770      	bx	lr

080121f6 <__cxa_pure_virtual>:
 80121f6:	b508      	push	{r3, lr}
 80121f8:	f000 f80c 	bl	8012214 <_ZSt9terminatev>

080121fc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80121fc:	b508      	push	{r3, lr}
 80121fe:	4780      	blx	r0
 8012200:	f000 f816 	bl	8012230 <abort>

08012204 <_ZSt13get_terminatev>:
 8012204:	4b02      	ldr	r3, [pc, #8]	; (8012210 <_ZSt13get_terminatev+0xc>)
 8012206:	6818      	ldr	r0, [r3, #0]
 8012208:	f3bf 8f5b 	dmb	ish
 801220c:	4770      	bx	lr
 801220e:	bf00      	nop
 8012210:	200000fc 	.word	0x200000fc

08012214 <_ZSt9terminatev>:
 8012214:	b508      	push	{r3, lr}
 8012216:	f7ff fff5 	bl	8012204 <_ZSt13get_terminatev>
 801221a:	f7ff ffef 	bl	80121fc <_ZN10__cxxabiv111__terminateEPFvvE>

0801221e <fabs>:
 801221e:	ec51 0b10 	vmov	r0, r1, d0
 8012222:	ee10 2a10 	vmov	r2, s0
 8012226:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801222a:	ec43 2b10 	vmov	d0, r2, r3
 801222e:	4770      	bx	lr

08012230 <abort>:
 8012230:	b508      	push	{r3, lr}
 8012232:	2006      	movs	r0, #6
 8012234:	f000 ff88 	bl	8013148 <raise>
 8012238:	2001      	movs	r0, #1
 801223a:	f7ee fda2 	bl	8000d82 <_exit>

0801223e <atexit>:
 801223e:	2300      	movs	r3, #0
 8012240:	4601      	mov	r1, r0
 8012242:	461a      	mov	r2, r3
 8012244:	4618      	mov	r0, r3
 8012246:	f002 b939 	b.w	80144bc <__register_exitproc>
	...

0801224c <calloc>:
 801224c:	4b02      	ldr	r3, [pc, #8]	; (8012258 <calloc+0xc>)
 801224e:	460a      	mov	r2, r1
 8012250:	4601      	mov	r1, r0
 8012252:	6818      	ldr	r0, [r3, #0]
 8012254:	f000 bde8 	b.w	8012e28 <_calloc_r>
 8012258:	20000100 	.word	0x20000100

0801225c <__errno>:
 801225c:	4b01      	ldr	r3, [pc, #4]	; (8012264 <__errno+0x8>)
 801225e:	6818      	ldr	r0, [r3, #0]
 8012260:	4770      	bx	lr
 8012262:	bf00      	nop
 8012264:	20000100 	.word	0x20000100

08012268 <_fclose_r>:
 8012268:	b570      	push	{r4, r5, r6, lr}
 801226a:	4605      	mov	r5, r0
 801226c:	460c      	mov	r4, r1
 801226e:	b911      	cbnz	r1, 8012276 <_fclose_r+0xe>
 8012270:	2600      	movs	r6, #0
 8012272:	4630      	mov	r0, r6
 8012274:	bd70      	pop	{r4, r5, r6, pc}
 8012276:	b118      	cbz	r0, 8012280 <_fclose_r+0x18>
 8012278:	6983      	ldr	r3, [r0, #24]
 801227a:	b90b      	cbnz	r3, 8012280 <_fclose_r+0x18>
 801227c:	f000 f994 	bl	80125a8 <__sinit>
 8012280:	4b2c      	ldr	r3, [pc, #176]	; (8012334 <_fclose_r+0xcc>)
 8012282:	429c      	cmp	r4, r3
 8012284:	d114      	bne.n	80122b0 <_fclose_r+0x48>
 8012286:	686c      	ldr	r4, [r5, #4]
 8012288:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801228a:	07d8      	lsls	r0, r3, #31
 801228c:	d405      	bmi.n	801229a <_fclose_r+0x32>
 801228e:	89a3      	ldrh	r3, [r4, #12]
 8012290:	0599      	lsls	r1, r3, #22
 8012292:	d402      	bmi.n	801229a <_fclose_r+0x32>
 8012294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012296:	f000 fd3a 	bl	8012d0e <__retarget_lock_acquire_recursive>
 801229a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801229e:	b98b      	cbnz	r3, 80122c4 <_fclose_r+0x5c>
 80122a0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80122a2:	f016 0601 	ands.w	r6, r6, #1
 80122a6:	d1e3      	bne.n	8012270 <_fclose_r+0x8>
 80122a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122aa:	f000 fd32 	bl	8012d12 <__retarget_lock_release_recursive>
 80122ae:	e7e0      	b.n	8012272 <_fclose_r+0xa>
 80122b0:	4b21      	ldr	r3, [pc, #132]	; (8012338 <_fclose_r+0xd0>)
 80122b2:	429c      	cmp	r4, r3
 80122b4:	d101      	bne.n	80122ba <_fclose_r+0x52>
 80122b6:	68ac      	ldr	r4, [r5, #8]
 80122b8:	e7e6      	b.n	8012288 <_fclose_r+0x20>
 80122ba:	4b20      	ldr	r3, [pc, #128]	; (801233c <_fclose_r+0xd4>)
 80122bc:	429c      	cmp	r4, r3
 80122be:	bf08      	it	eq
 80122c0:	68ec      	ldreq	r4, [r5, #12]
 80122c2:	e7e1      	b.n	8012288 <_fclose_r+0x20>
 80122c4:	4621      	mov	r1, r4
 80122c6:	4628      	mov	r0, r5
 80122c8:	f000 f842 	bl	8012350 <__sflush_r>
 80122cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80122ce:	4606      	mov	r6, r0
 80122d0:	b133      	cbz	r3, 80122e0 <_fclose_r+0x78>
 80122d2:	6a21      	ldr	r1, [r4, #32]
 80122d4:	4628      	mov	r0, r5
 80122d6:	4798      	blx	r3
 80122d8:	2800      	cmp	r0, #0
 80122da:	bfb8      	it	lt
 80122dc:	f04f 36ff 	movlt.w	r6, #4294967295
 80122e0:	89a3      	ldrh	r3, [r4, #12]
 80122e2:	061a      	lsls	r2, r3, #24
 80122e4:	d503      	bpl.n	80122ee <_fclose_r+0x86>
 80122e6:	6921      	ldr	r1, [r4, #16]
 80122e8:	4628      	mov	r0, r5
 80122ea:	f000 fdad 	bl	8012e48 <_free_r>
 80122ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122f0:	b141      	cbz	r1, 8012304 <_fclose_r+0x9c>
 80122f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122f6:	4299      	cmp	r1, r3
 80122f8:	d002      	beq.n	8012300 <_fclose_r+0x98>
 80122fa:	4628      	mov	r0, r5
 80122fc:	f000 fda4 	bl	8012e48 <_free_r>
 8012300:	2300      	movs	r3, #0
 8012302:	6363      	str	r3, [r4, #52]	; 0x34
 8012304:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012306:	b121      	cbz	r1, 8012312 <_fclose_r+0xaa>
 8012308:	4628      	mov	r0, r5
 801230a:	f000 fd9d 	bl	8012e48 <_free_r>
 801230e:	2300      	movs	r3, #0
 8012310:	64a3      	str	r3, [r4, #72]	; 0x48
 8012312:	f000 f931 	bl	8012578 <__sfp_lock_acquire>
 8012316:	2300      	movs	r3, #0
 8012318:	81a3      	strh	r3, [r4, #12]
 801231a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801231c:	07db      	lsls	r3, r3, #31
 801231e:	d402      	bmi.n	8012326 <_fclose_r+0xbe>
 8012320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012322:	f000 fcf6 	bl	8012d12 <__retarget_lock_release_recursive>
 8012326:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012328:	f000 fcef 	bl	8012d0a <__retarget_lock_close_recursive>
 801232c:	f000 f92a 	bl	8012584 <__sfp_lock_release>
 8012330:	e79f      	b.n	8012272 <_fclose_r+0xa>
 8012332:	bf00      	nop
 8012334:	0801903c 	.word	0x0801903c
 8012338:	0801905c 	.word	0x0801905c
 801233c:	0801901c 	.word	0x0801901c

08012340 <fclose>:
 8012340:	4b02      	ldr	r3, [pc, #8]	; (801234c <fclose+0xc>)
 8012342:	4601      	mov	r1, r0
 8012344:	6818      	ldr	r0, [r3, #0]
 8012346:	f7ff bf8f 	b.w	8012268 <_fclose_r>
 801234a:	bf00      	nop
 801234c:	20000100 	.word	0x20000100

08012350 <__sflush_r>:
 8012350:	898a      	ldrh	r2, [r1, #12]
 8012352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012356:	4605      	mov	r5, r0
 8012358:	0710      	lsls	r0, r2, #28
 801235a:	460c      	mov	r4, r1
 801235c:	d458      	bmi.n	8012410 <__sflush_r+0xc0>
 801235e:	684b      	ldr	r3, [r1, #4]
 8012360:	2b00      	cmp	r3, #0
 8012362:	dc05      	bgt.n	8012370 <__sflush_r+0x20>
 8012364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012366:	2b00      	cmp	r3, #0
 8012368:	dc02      	bgt.n	8012370 <__sflush_r+0x20>
 801236a:	2000      	movs	r0, #0
 801236c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012372:	2e00      	cmp	r6, #0
 8012374:	d0f9      	beq.n	801236a <__sflush_r+0x1a>
 8012376:	2300      	movs	r3, #0
 8012378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801237c:	682f      	ldr	r7, [r5, #0]
 801237e:	602b      	str	r3, [r5, #0]
 8012380:	d032      	beq.n	80123e8 <__sflush_r+0x98>
 8012382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012384:	89a3      	ldrh	r3, [r4, #12]
 8012386:	075a      	lsls	r2, r3, #29
 8012388:	d505      	bpl.n	8012396 <__sflush_r+0x46>
 801238a:	6863      	ldr	r3, [r4, #4]
 801238c:	1ac0      	subs	r0, r0, r3
 801238e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012390:	b10b      	cbz	r3, 8012396 <__sflush_r+0x46>
 8012392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012394:	1ac0      	subs	r0, r0, r3
 8012396:	2300      	movs	r3, #0
 8012398:	4602      	mov	r2, r0
 801239a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801239c:	6a21      	ldr	r1, [r4, #32]
 801239e:	4628      	mov	r0, r5
 80123a0:	47b0      	blx	r6
 80123a2:	1c43      	adds	r3, r0, #1
 80123a4:	89a3      	ldrh	r3, [r4, #12]
 80123a6:	d106      	bne.n	80123b6 <__sflush_r+0x66>
 80123a8:	6829      	ldr	r1, [r5, #0]
 80123aa:	291d      	cmp	r1, #29
 80123ac:	d82c      	bhi.n	8012408 <__sflush_r+0xb8>
 80123ae:	4a2a      	ldr	r2, [pc, #168]	; (8012458 <__sflush_r+0x108>)
 80123b0:	40ca      	lsrs	r2, r1
 80123b2:	07d6      	lsls	r6, r2, #31
 80123b4:	d528      	bpl.n	8012408 <__sflush_r+0xb8>
 80123b6:	2200      	movs	r2, #0
 80123b8:	6062      	str	r2, [r4, #4]
 80123ba:	04d9      	lsls	r1, r3, #19
 80123bc:	6922      	ldr	r2, [r4, #16]
 80123be:	6022      	str	r2, [r4, #0]
 80123c0:	d504      	bpl.n	80123cc <__sflush_r+0x7c>
 80123c2:	1c42      	adds	r2, r0, #1
 80123c4:	d101      	bne.n	80123ca <__sflush_r+0x7a>
 80123c6:	682b      	ldr	r3, [r5, #0]
 80123c8:	b903      	cbnz	r3, 80123cc <__sflush_r+0x7c>
 80123ca:	6560      	str	r0, [r4, #84]	; 0x54
 80123cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123ce:	602f      	str	r7, [r5, #0]
 80123d0:	2900      	cmp	r1, #0
 80123d2:	d0ca      	beq.n	801236a <__sflush_r+0x1a>
 80123d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123d8:	4299      	cmp	r1, r3
 80123da:	d002      	beq.n	80123e2 <__sflush_r+0x92>
 80123dc:	4628      	mov	r0, r5
 80123de:	f000 fd33 	bl	8012e48 <_free_r>
 80123e2:	2000      	movs	r0, #0
 80123e4:	6360      	str	r0, [r4, #52]	; 0x34
 80123e6:	e7c1      	b.n	801236c <__sflush_r+0x1c>
 80123e8:	6a21      	ldr	r1, [r4, #32]
 80123ea:	2301      	movs	r3, #1
 80123ec:	4628      	mov	r0, r5
 80123ee:	47b0      	blx	r6
 80123f0:	1c41      	adds	r1, r0, #1
 80123f2:	d1c7      	bne.n	8012384 <__sflush_r+0x34>
 80123f4:	682b      	ldr	r3, [r5, #0]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d0c4      	beq.n	8012384 <__sflush_r+0x34>
 80123fa:	2b1d      	cmp	r3, #29
 80123fc:	d001      	beq.n	8012402 <__sflush_r+0xb2>
 80123fe:	2b16      	cmp	r3, #22
 8012400:	d101      	bne.n	8012406 <__sflush_r+0xb6>
 8012402:	602f      	str	r7, [r5, #0]
 8012404:	e7b1      	b.n	801236a <__sflush_r+0x1a>
 8012406:	89a3      	ldrh	r3, [r4, #12]
 8012408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801240c:	81a3      	strh	r3, [r4, #12]
 801240e:	e7ad      	b.n	801236c <__sflush_r+0x1c>
 8012410:	690f      	ldr	r7, [r1, #16]
 8012412:	2f00      	cmp	r7, #0
 8012414:	d0a9      	beq.n	801236a <__sflush_r+0x1a>
 8012416:	0793      	lsls	r3, r2, #30
 8012418:	680e      	ldr	r6, [r1, #0]
 801241a:	bf08      	it	eq
 801241c:	694b      	ldreq	r3, [r1, #20]
 801241e:	600f      	str	r7, [r1, #0]
 8012420:	bf18      	it	ne
 8012422:	2300      	movne	r3, #0
 8012424:	eba6 0807 	sub.w	r8, r6, r7
 8012428:	608b      	str	r3, [r1, #8]
 801242a:	f1b8 0f00 	cmp.w	r8, #0
 801242e:	dd9c      	ble.n	801236a <__sflush_r+0x1a>
 8012430:	6a21      	ldr	r1, [r4, #32]
 8012432:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012434:	4643      	mov	r3, r8
 8012436:	463a      	mov	r2, r7
 8012438:	4628      	mov	r0, r5
 801243a:	47b0      	blx	r6
 801243c:	2800      	cmp	r0, #0
 801243e:	dc06      	bgt.n	801244e <__sflush_r+0xfe>
 8012440:	89a3      	ldrh	r3, [r4, #12]
 8012442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012446:	81a3      	strh	r3, [r4, #12]
 8012448:	f04f 30ff 	mov.w	r0, #4294967295
 801244c:	e78e      	b.n	801236c <__sflush_r+0x1c>
 801244e:	4407      	add	r7, r0
 8012450:	eba8 0800 	sub.w	r8, r8, r0
 8012454:	e7e9      	b.n	801242a <__sflush_r+0xda>
 8012456:	bf00      	nop
 8012458:	20400001 	.word	0x20400001

0801245c <_fflush_r>:
 801245c:	b538      	push	{r3, r4, r5, lr}
 801245e:	690b      	ldr	r3, [r1, #16]
 8012460:	4605      	mov	r5, r0
 8012462:	460c      	mov	r4, r1
 8012464:	b913      	cbnz	r3, 801246c <_fflush_r+0x10>
 8012466:	2500      	movs	r5, #0
 8012468:	4628      	mov	r0, r5
 801246a:	bd38      	pop	{r3, r4, r5, pc}
 801246c:	b118      	cbz	r0, 8012476 <_fflush_r+0x1a>
 801246e:	6983      	ldr	r3, [r0, #24]
 8012470:	b90b      	cbnz	r3, 8012476 <_fflush_r+0x1a>
 8012472:	f000 f899 	bl	80125a8 <__sinit>
 8012476:	4b14      	ldr	r3, [pc, #80]	; (80124c8 <_fflush_r+0x6c>)
 8012478:	429c      	cmp	r4, r3
 801247a:	d11b      	bne.n	80124b4 <_fflush_r+0x58>
 801247c:	686c      	ldr	r4, [r5, #4]
 801247e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d0ef      	beq.n	8012466 <_fflush_r+0xa>
 8012486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012488:	07d0      	lsls	r0, r2, #31
 801248a:	d404      	bmi.n	8012496 <_fflush_r+0x3a>
 801248c:	0599      	lsls	r1, r3, #22
 801248e:	d402      	bmi.n	8012496 <_fflush_r+0x3a>
 8012490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012492:	f000 fc3c 	bl	8012d0e <__retarget_lock_acquire_recursive>
 8012496:	4628      	mov	r0, r5
 8012498:	4621      	mov	r1, r4
 801249a:	f7ff ff59 	bl	8012350 <__sflush_r>
 801249e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124a0:	07da      	lsls	r2, r3, #31
 80124a2:	4605      	mov	r5, r0
 80124a4:	d4e0      	bmi.n	8012468 <_fflush_r+0xc>
 80124a6:	89a3      	ldrh	r3, [r4, #12]
 80124a8:	059b      	lsls	r3, r3, #22
 80124aa:	d4dd      	bmi.n	8012468 <_fflush_r+0xc>
 80124ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124ae:	f000 fc30 	bl	8012d12 <__retarget_lock_release_recursive>
 80124b2:	e7d9      	b.n	8012468 <_fflush_r+0xc>
 80124b4:	4b05      	ldr	r3, [pc, #20]	; (80124cc <_fflush_r+0x70>)
 80124b6:	429c      	cmp	r4, r3
 80124b8:	d101      	bne.n	80124be <_fflush_r+0x62>
 80124ba:	68ac      	ldr	r4, [r5, #8]
 80124bc:	e7df      	b.n	801247e <_fflush_r+0x22>
 80124be:	4b04      	ldr	r3, [pc, #16]	; (80124d0 <_fflush_r+0x74>)
 80124c0:	429c      	cmp	r4, r3
 80124c2:	bf08      	it	eq
 80124c4:	68ec      	ldreq	r4, [r5, #12]
 80124c6:	e7da      	b.n	801247e <_fflush_r+0x22>
 80124c8:	0801903c 	.word	0x0801903c
 80124cc:	0801905c 	.word	0x0801905c
 80124d0:	0801901c 	.word	0x0801901c

080124d4 <fflush>:
 80124d4:	4601      	mov	r1, r0
 80124d6:	b920      	cbnz	r0, 80124e2 <fflush+0xe>
 80124d8:	4b04      	ldr	r3, [pc, #16]	; (80124ec <fflush+0x18>)
 80124da:	4905      	ldr	r1, [pc, #20]	; (80124f0 <fflush+0x1c>)
 80124dc:	6818      	ldr	r0, [r3, #0]
 80124de:	f000 babb 	b.w	8012a58 <_fwalk_reent>
 80124e2:	4b04      	ldr	r3, [pc, #16]	; (80124f4 <fflush+0x20>)
 80124e4:	6818      	ldr	r0, [r3, #0]
 80124e6:	f7ff bfb9 	b.w	801245c <_fflush_r>
 80124ea:	bf00      	nop
 80124ec:	0801907c 	.word	0x0801907c
 80124f0:	0801245d 	.word	0x0801245d
 80124f4:	20000100 	.word	0x20000100

080124f8 <std>:
 80124f8:	2300      	movs	r3, #0
 80124fa:	b510      	push	{r4, lr}
 80124fc:	4604      	mov	r4, r0
 80124fe:	e9c0 3300 	strd	r3, r3, [r0]
 8012502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012506:	6083      	str	r3, [r0, #8]
 8012508:	8181      	strh	r1, [r0, #12]
 801250a:	6643      	str	r3, [r0, #100]	; 0x64
 801250c:	81c2      	strh	r2, [r0, #14]
 801250e:	6183      	str	r3, [r0, #24]
 8012510:	4619      	mov	r1, r3
 8012512:	2208      	movs	r2, #8
 8012514:	305c      	adds	r0, #92	; 0x5c
 8012516:	f000 fc7f 	bl	8012e18 <memset>
 801251a:	4b05      	ldr	r3, [pc, #20]	; (8012530 <std+0x38>)
 801251c:	6263      	str	r3, [r4, #36]	; 0x24
 801251e:	4b05      	ldr	r3, [pc, #20]	; (8012534 <std+0x3c>)
 8012520:	62a3      	str	r3, [r4, #40]	; 0x28
 8012522:	4b05      	ldr	r3, [pc, #20]	; (8012538 <std+0x40>)
 8012524:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012526:	4b05      	ldr	r3, [pc, #20]	; (801253c <std+0x44>)
 8012528:	6224      	str	r4, [r4, #32]
 801252a:	6323      	str	r3, [r4, #48]	; 0x30
 801252c:	bd10      	pop	{r4, pc}
 801252e:	bf00      	nop
 8012530:	08013181 	.word	0x08013181
 8012534:	080131a7 	.word	0x080131a7
 8012538:	080131df 	.word	0x080131df
 801253c:	08013203 	.word	0x08013203

08012540 <_cleanup_r>:
 8012540:	4901      	ldr	r1, [pc, #4]	; (8012548 <_cleanup_r+0x8>)
 8012542:	f000 ba89 	b.w	8012a58 <_fwalk_reent>
 8012546:	bf00      	nop
 8012548:	0801245d 	.word	0x0801245d

0801254c <__sfmoreglue>:
 801254c:	b570      	push	{r4, r5, r6, lr}
 801254e:	1e4a      	subs	r2, r1, #1
 8012550:	2568      	movs	r5, #104	; 0x68
 8012552:	4355      	muls	r5, r2
 8012554:	460e      	mov	r6, r1
 8012556:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801255a:	f000 fcc5 	bl	8012ee8 <_malloc_r>
 801255e:	4604      	mov	r4, r0
 8012560:	b140      	cbz	r0, 8012574 <__sfmoreglue+0x28>
 8012562:	2100      	movs	r1, #0
 8012564:	e9c0 1600 	strd	r1, r6, [r0]
 8012568:	300c      	adds	r0, #12
 801256a:	60a0      	str	r0, [r4, #8]
 801256c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012570:	f000 fc52 	bl	8012e18 <memset>
 8012574:	4620      	mov	r0, r4
 8012576:	bd70      	pop	{r4, r5, r6, pc}

08012578 <__sfp_lock_acquire>:
 8012578:	4801      	ldr	r0, [pc, #4]	; (8012580 <__sfp_lock_acquire+0x8>)
 801257a:	f000 bbc8 	b.w	8012d0e <__retarget_lock_acquire_recursive>
 801257e:	bf00      	nop
 8012580:	20000c80 	.word	0x20000c80

08012584 <__sfp_lock_release>:
 8012584:	4801      	ldr	r0, [pc, #4]	; (801258c <__sfp_lock_release+0x8>)
 8012586:	f000 bbc4 	b.w	8012d12 <__retarget_lock_release_recursive>
 801258a:	bf00      	nop
 801258c:	20000c80 	.word	0x20000c80

08012590 <__sinit_lock_acquire>:
 8012590:	4801      	ldr	r0, [pc, #4]	; (8012598 <__sinit_lock_acquire+0x8>)
 8012592:	f000 bbbc 	b.w	8012d0e <__retarget_lock_acquire_recursive>
 8012596:	bf00      	nop
 8012598:	20000c7b 	.word	0x20000c7b

0801259c <__sinit_lock_release>:
 801259c:	4801      	ldr	r0, [pc, #4]	; (80125a4 <__sinit_lock_release+0x8>)
 801259e:	f000 bbb8 	b.w	8012d12 <__retarget_lock_release_recursive>
 80125a2:	bf00      	nop
 80125a4:	20000c7b 	.word	0x20000c7b

080125a8 <__sinit>:
 80125a8:	b510      	push	{r4, lr}
 80125aa:	4604      	mov	r4, r0
 80125ac:	f7ff fff0 	bl	8012590 <__sinit_lock_acquire>
 80125b0:	69a3      	ldr	r3, [r4, #24]
 80125b2:	b11b      	cbz	r3, 80125bc <__sinit+0x14>
 80125b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125b8:	f7ff bff0 	b.w	801259c <__sinit_lock_release>
 80125bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80125c0:	6523      	str	r3, [r4, #80]	; 0x50
 80125c2:	4b13      	ldr	r3, [pc, #76]	; (8012610 <__sinit+0x68>)
 80125c4:	4a13      	ldr	r2, [pc, #76]	; (8012614 <__sinit+0x6c>)
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80125ca:	42a3      	cmp	r3, r4
 80125cc:	bf04      	itt	eq
 80125ce:	2301      	moveq	r3, #1
 80125d0:	61a3      	streq	r3, [r4, #24]
 80125d2:	4620      	mov	r0, r4
 80125d4:	f000 f820 	bl	8012618 <__sfp>
 80125d8:	6060      	str	r0, [r4, #4]
 80125da:	4620      	mov	r0, r4
 80125dc:	f000 f81c 	bl	8012618 <__sfp>
 80125e0:	60a0      	str	r0, [r4, #8]
 80125e2:	4620      	mov	r0, r4
 80125e4:	f000 f818 	bl	8012618 <__sfp>
 80125e8:	2200      	movs	r2, #0
 80125ea:	60e0      	str	r0, [r4, #12]
 80125ec:	2104      	movs	r1, #4
 80125ee:	6860      	ldr	r0, [r4, #4]
 80125f0:	f7ff ff82 	bl	80124f8 <std>
 80125f4:	68a0      	ldr	r0, [r4, #8]
 80125f6:	2201      	movs	r2, #1
 80125f8:	2109      	movs	r1, #9
 80125fa:	f7ff ff7d 	bl	80124f8 <std>
 80125fe:	68e0      	ldr	r0, [r4, #12]
 8012600:	2202      	movs	r2, #2
 8012602:	2112      	movs	r1, #18
 8012604:	f7ff ff78 	bl	80124f8 <std>
 8012608:	2301      	movs	r3, #1
 801260a:	61a3      	str	r3, [r4, #24]
 801260c:	e7d2      	b.n	80125b4 <__sinit+0xc>
 801260e:	bf00      	nop
 8012610:	0801907c 	.word	0x0801907c
 8012614:	08012541 	.word	0x08012541

08012618 <__sfp>:
 8012618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801261a:	4607      	mov	r7, r0
 801261c:	f7ff ffac 	bl	8012578 <__sfp_lock_acquire>
 8012620:	4b1e      	ldr	r3, [pc, #120]	; (801269c <__sfp+0x84>)
 8012622:	681e      	ldr	r6, [r3, #0]
 8012624:	69b3      	ldr	r3, [r6, #24]
 8012626:	b913      	cbnz	r3, 801262e <__sfp+0x16>
 8012628:	4630      	mov	r0, r6
 801262a:	f7ff ffbd 	bl	80125a8 <__sinit>
 801262e:	3648      	adds	r6, #72	; 0x48
 8012630:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012634:	3b01      	subs	r3, #1
 8012636:	d503      	bpl.n	8012640 <__sfp+0x28>
 8012638:	6833      	ldr	r3, [r6, #0]
 801263a:	b30b      	cbz	r3, 8012680 <__sfp+0x68>
 801263c:	6836      	ldr	r6, [r6, #0]
 801263e:	e7f7      	b.n	8012630 <__sfp+0x18>
 8012640:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012644:	b9d5      	cbnz	r5, 801267c <__sfp+0x64>
 8012646:	4b16      	ldr	r3, [pc, #88]	; (80126a0 <__sfp+0x88>)
 8012648:	60e3      	str	r3, [r4, #12]
 801264a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801264e:	6665      	str	r5, [r4, #100]	; 0x64
 8012650:	f000 fb5a 	bl	8012d08 <__retarget_lock_init_recursive>
 8012654:	f7ff ff96 	bl	8012584 <__sfp_lock_release>
 8012658:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801265c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012660:	6025      	str	r5, [r4, #0]
 8012662:	61a5      	str	r5, [r4, #24]
 8012664:	2208      	movs	r2, #8
 8012666:	4629      	mov	r1, r5
 8012668:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801266c:	f000 fbd4 	bl	8012e18 <memset>
 8012670:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012674:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012678:	4620      	mov	r0, r4
 801267a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801267c:	3468      	adds	r4, #104	; 0x68
 801267e:	e7d9      	b.n	8012634 <__sfp+0x1c>
 8012680:	2104      	movs	r1, #4
 8012682:	4638      	mov	r0, r7
 8012684:	f7ff ff62 	bl	801254c <__sfmoreglue>
 8012688:	4604      	mov	r4, r0
 801268a:	6030      	str	r0, [r6, #0]
 801268c:	2800      	cmp	r0, #0
 801268e:	d1d5      	bne.n	801263c <__sfp+0x24>
 8012690:	f7ff ff78 	bl	8012584 <__sfp_lock_release>
 8012694:	230c      	movs	r3, #12
 8012696:	603b      	str	r3, [r7, #0]
 8012698:	e7ee      	b.n	8012678 <__sfp+0x60>
 801269a:	bf00      	nop
 801269c:	0801907c 	.word	0x0801907c
 80126a0:	ffff0001 	.word	0xffff0001

080126a4 <_fopen_r>:
 80126a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126a6:	460f      	mov	r7, r1
 80126a8:	4611      	mov	r1, r2
 80126aa:	aa01      	add	r2, sp, #4
 80126ac:	4605      	mov	r5, r0
 80126ae:	f001 ff99 	bl	80145e4 <__sflags>
 80126b2:	4606      	mov	r6, r0
 80126b4:	b918      	cbnz	r0, 80126be <_fopen_r+0x1a>
 80126b6:	2400      	movs	r4, #0
 80126b8:	4620      	mov	r0, r4
 80126ba:	b003      	add	sp, #12
 80126bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126be:	4628      	mov	r0, r5
 80126c0:	f7ff ffaa 	bl	8012618 <__sfp>
 80126c4:	4604      	mov	r4, r0
 80126c6:	2800      	cmp	r0, #0
 80126c8:	d0f5      	beq.n	80126b6 <_fopen_r+0x12>
 80126ca:	4639      	mov	r1, r7
 80126cc:	9a01      	ldr	r2, [sp, #4]
 80126ce:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 80126d2:	4628      	mov	r0, r5
 80126d4:	f000 fc62 	bl	8012f9c <_open_r>
 80126d8:	1e07      	subs	r7, r0, #0
 80126da:	da09      	bge.n	80126f0 <_fopen_r+0x4c>
 80126dc:	2500      	movs	r5, #0
 80126de:	f7ff ff4b 	bl	8012578 <__sfp_lock_acquire>
 80126e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126e4:	81a5      	strh	r5, [r4, #12]
 80126e6:	f000 fb10 	bl	8012d0a <__retarget_lock_close_recursive>
 80126ea:	f7ff ff4b 	bl	8012584 <__sfp_lock_release>
 80126ee:	e7e2      	b.n	80126b6 <_fopen_r+0x12>
 80126f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126f2:	07db      	lsls	r3, r3, #31
 80126f4:	d405      	bmi.n	8012702 <_fopen_r+0x5e>
 80126f6:	89a3      	ldrh	r3, [r4, #12]
 80126f8:	0598      	lsls	r0, r3, #22
 80126fa:	d402      	bmi.n	8012702 <_fopen_r+0x5e>
 80126fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126fe:	f000 fb06 	bl	8012d0e <__retarget_lock_acquire_recursive>
 8012702:	4b0e      	ldr	r3, [pc, #56]	; (801273c <_fopen_r+0x98>)
 8012704:	6263      	str	r3, [r4, #36]	; 0x24
 8012706:	4b0e      	ldr	r3, [pc, #56]	; (8012740 <_fopen_r+0x9c>)
 8012708:	62a3      	str	r3, [r4, #40]	; 0x28
 801270a:	4b0e      	ldr	r3, [pc, #56]	; (8012744 <_fopen_r+0xa0>)
 801270c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801270e:	05f1      	lsls	r1, r6, #23
 8012710:	4b0d      	ldr	r3, [pc, #52]	; (8012748 <_fopen_r+0xa4>)
 8012712:	81e7      	strh	r7, [r4, #14]
 8012714:	81a6      	strh	r6, [r4, #12]
 8012716:	6224      	str	r4, [r4, #32]
 8012718:	6323      	str	r3, [r4, #48]	; 0x30
 801271a:	d505      	bpl.n	8012728 <_fopen_r+0x84>
 801271c:	2302      	movs	r3, #2
 801271e:	2200      	movs	r2, #0
 8012720:	4621      	mov	r1, r4
 8012722:	4628      	mov	r0, r5
 8012724:	f000 f888 	bl	8012838 <_fseek_r>
 8012728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801272a:	07da      	lsls	r2, r3, #31
 801272c:	d4c4      	bmi.n	80126b8 <_fopen_r+0x14>
 801272e:	89a3      	ldrh	r3, [r4, #12]
 8012730:	059b      	lsls	r3, r3, #22
 8012732:	d4c1      	bmi.n	80126b8 <_fopen_r+0x14>
 8012734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012736:	f000 faec 	bl	8012d12 <__retarget_lock_release_recursive>
 801273a:	e7bd      	b.n	80126b8 <_fopen_r+0x14>
 801273c:	08013181 	.word	0x08013181
 8012740:	080131a7 	.word	0x080131a7
 8012744:	080131df 	.word	0x080131df
 8012748:	08013203 	.word	0x08013203

0801274c <fopen>:
 801274c:	4b02      	ldr	r3, [pc, #8]	; (8012758 <fopen+0xc>)
 801274e:	460a      	mov	r2, r1
 8012750:	4601      	mov	r1, r0
 8012752:	6818      	ldr	r0, [r3, #0]
 8012754:	f7ff bfa6 	b.w	80126a4 <_fopen_r>
 8012758:	20000100 	.word	0x20000100

0801275c <_fputs_r>:
 801275c:	b570      	push	{r4, r5, r6, lr}
 801275e:	460e      	mov	r6, r1
 8012760:	4614      	mov	r4, r2
 8012762:	4605      	mov	r5, r0
 8012764:	b118      	cbz	r0, 801276e <_fputs_r+0x12>
 8012766:	6983      	ldr	r3, [r0, #24]
 8012768:	b90b      	cbnz	r3, 801276e <_fputs_r+0x12>
 801276a:	f7ff ff1d 	bl	80125a8 <__sinit>
 801276e:	4b2b      	ldr	r3, [pc, #172]	; (801281c <_fputs_r+0xc0>)
 8012770:	429c      	cmp	r4, r3
 8012772:	d11e      	bne.n	80127b2 <_fputs_r+0x56>
 8012774:	686c      	ldr	r4, [r5, #4]
 8012776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012778:	07da      	lsls	r2, r3, #31
 801277a:	d405      	bmi.n	8012788 <_fputs_r+0x2c>
 801277c:	89a3      	ldrh	r3, [r4, #12]
 801277e:	059b      	lsls	r3, r3, #22
 8012780:	d402      	bmi.n	8012788 <_fputs_r+0x2c>
 8012782:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012784:	f000 fac3 	bl	8012d0e <__retarget_lock_acquire_recursive>
 8012788:	89a3      	ldrh	r3, [r4, #12]
 801278a:	0718      	lsls	r0, r3, #28
 801278c:	d51b      	bpl.n	80127c6 <_fputs_r+0x6a>
 801278e:	6923      	ldr	r3, [r4, #16]
 8012790:	b1cb      	cbz	r3, 80127c6 <_fputs_r+0x6a>
 8012792:	3e01      	subs	r6, #1
 8012794:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012798:	bb39      	cbnz	r1, 80127ea <_fputs_r+0x8e>
 801279a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801279c:	f015 0501 	ands.w	r5, r5, #1
 80127a0:	d139      	bne.n	8012816 <_fputs_r+0xba>
 80127a2:	89a3      	ldrh	r3, [r4, #12]
 80127a4:	0599      	lsls	r1, r3, #22
 80127a6:	d402      	bmi.n	80127ae <_fputs_r+0x52>
 80127a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127aa:	f000 fab2 	bl	8012d12 <__retarget_lock_release_recursive>
 80127ae:	4628      	mov	r0, r5
 80127b0:	bd70      	pop	{r4, r5, r6, pc}
 80127b2:	4b1b      	ldr	r3, [pc, #108]	; (8012820 <_fputs_r+0xc4>)
 80127b4:	429c      	cmp	r4, r3
 80127b6:	d101      	bne.n	80127bc <_fputs_r+0x60>
 80127b8:	68ac      	ldr	r4, [r5, #8]
 80127ba:	e7dc      	b.n	8012776 <_fputs_r+0x1a>
 80127bc:	4b19      	ldr	r3, [pc, #100]	; (8012824 <_fputs_r+0xc8>)
 80127be:	429c      	cmp	r4, r3
 80127c0:	bf08      	it	eq
 80127c2:	68ec      	ldreq	r4, [r5, #12]
 80127c4:	e7d7      	b.n	8012776 <_fputs_r+0x1a>
 80127c6:	4621      	mov	r1, r4
 80127c8:	4628      	mov	r0, r5
 80127ca:	f001 fe09 	bl	80143e0 <__swsetup_r>
 80127ce:	2800      	cmp	r0, #0
 80127d0:	d0df      	beq.n	8012792 <_fputs_r+0x36>
 80127d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127d4:	07da      	lsls	r2, r3, #31
 80127d6:	d405      	bmi.n	80127e4 <_fputs_r+0x88>
 80127d8:	89a3      	ldrh	r3, [r4, #12]
 80127da:	059b      	lsls	r3, r3, #22
 80127dc:	d402      	bmi.n	80127e4 <_fputs_r+0x88>
 80127de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127e0:	f000 fa97 	bl	8012d12 <__retarget_lock_release_recursive>
 80127e4:	f04f 35ff 	mov.w	r5, #4294967295
 80127e8:	e7e1      	b.n	80127ae <_fputs_r+0x52>
 80127ea:	68a3      	ldr	r3, [r4, #8]
 80127ec:	3b01      	subs	r3, #1
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	60a3      	str	r3, [r4, #8]
 80127f2:	da04      	bge.n	80127fe <_fputs_r+0xa2>
 80127f4:	69a2      	ldr	r2, [r4, #24]
 80127f6:	4293      	cmp	r3, r2
 80127f8:	db06      	blt.n	8012808 <_fputs_r+0xac>
 80127fa:	290a      	cmp	r1, #10
 80127fc:	d004      	beq.n	8012808 <_fputs_r+0xac>
 80127fe:	6823      	ldr	r3, [r4, #0]
 8012800:	1c5a      	adds	r2, r3, #1
 8012802:	6022      	str	r2, [r4, #0]
 8012804:	7019      	strb	r1, [r3, #0]
 8012806:	e7c5      	b.n	8012794 <_fputs_r+0x38>
 8012808:	4622      	mov	r2, r4
 801280a:	4628      	mov	r0, r5
 801280c:	f001 fd84 	bl	8014318 <__swbuf_r>
 8012810:	3001      	adds	r0, #1
 8012812:	d1bf      	bne.n	8012794 <_fputs_r+0x38>
 8012814:	e7dd      	b.n	80127d2 <_fputs_r+0x76>
 8012816:	460d      	mov	r5, r1
 8012818:	e7c9      	b.n	80127ae <_fputs_r+0x52>
 801281a:	bf00      	nop
 801281c:	0801903c 	.word	0x0801903c
 8012820:	0801905c 	.word	0x0801905c
 8012824:	0801901c 	.word	0x0801901c

08012828 <fputs>:
 8012828:	4b02      	ldr	r3, [pc, #8]	; (8012834 <fputs+0xc>)
 801282a:	460a      	mov	r2, r1
 801282c:	4601      	mov	r1, r0
 801282e:	6818      	ldr	r0, [r3, #0]
 8012830:	f7ff bf94 	b.w	801275c <_fputs_r>
 8012834:	20000100 	.word	0x20000100

08012838 <_fseek_r>:
 8012838:	f000 b800 	b.w	801283c <_fseeko_r>

0801283c <_fseeko_r>:
 801283c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012840:	460c      	mov	r4, r1
 8012842:	4617      	mov	r7, r2
 8012844:	461e      	mov	r6, r3
 8012846:	4605      	mov	r5, r0
 8012848:	b118      	cbz	r0, 8012852 <_fseeko_r+0x16>
 801284a:	6983      	ldr	r3, [r0, #24]
 801284c:	b90b      	cbnz	r3, 8012852 <_fseeko_r+0x16>
 801284e:	f7ff feab 	bl	80125a8 <__sinit>
 8012852:	4b44      	ldr	r3, [pc, #272]	; (8012964 <_fseeko_r+0x128>)
 8012854:	429c      	cmp	r4, r3
 8012856:	d122      	bne.n	801289e <_fseeko_r+0x62>
 8012858:	686c      	ldr	r4, [r5, #4]
 801285a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801285c:	07d9      	lsls	r1, r3, #31
 801285e:	d405      	bmi.n	801286c <_fseeko_r+0x30>
 8012860:	89a3      	ldrh	r3, [r4, #12]
 8012862:	059a      	lsls	r2, r3, #22
 8012864:	d402      	bmi.n	801286c <_fseeko_r+0x30>
 8012866:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012868:	f000 fa51 	bl	8012d0e <__retarget_lock_acquire_recursive>
 801286c:	89a3      	ldrh	r3, [r4, #12]
 801286e:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8012872:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8012876:	d103      	bne.n	8012880 <_fseeko_r+0x44>
 8012878:	4621      	mov	r1, r4
 801287a:	4628      	mov	r0, r5
 801287c:	f7ff fdee 	bl	801245c <_fflush_r>
 8012880:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8012884:	f1b8 0f00 	cmp.w	r8, #0
 8012888:	d113      	bne.n	80128b2 <_fseeko_r+0x76>
 801288a:	231d      	movs	r3, #29
 801288c:	602b      	str	r3, [r5, #0]
 801288e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012890:	07d9      	lsls	r1, r3, #31
 8012892:	d55d      	bpl.n	8012950 <_fseeko_r+0x114>
 8012894:	f04f 36ff 	mov.w	r6, #4294967295
 8012898:	4630      	mov	r0, r6
 801289a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801289e:	4b32      	ldr	r3, [pc, #200]	; (8012968 <_fseeko_r+0x12c>)
 80128a0:	429c      	cmp	r4, r3
 80128a2:	d101      	bne.n	80128a8 <_fseeko_r+0x6c>
 80128a4:	68ac      	ldr	r4, [r5, #8]
 80128a6:	e7d8      	b.n	801285a <_fseeko_r+0x1e>
 80128a8:	4b30      	ldr	r3, [pc, #192]	; (801296c <_fseeko_r+0x130>)
 80128aa:	429c      	cmp	r4, r3
 80128ac:	bf08      	it	eq
 80128ae:	68ec      	ldreq	r4, [r5, #12]
 80128b0:	e7d3      	b.n	801285a <_fseeko_r+0x1e>
 80128b2:	2e01      	cmp	r6, #1
 80128b4:	d036      	beq.n	8012924 <_fseeko_r+0xe8>
 80128b6:	f036 0302 	bics.w	r3, r6, #2
 80128ba:	d147      	bne.n	801294c <_fseeko_r+0x110>
 80128bc:	6923      	ldr	r3, [r4, #16]
 80128be:	b91b      	cbnz	r3, 80128c8 <_fseeko_r+0x8c>
 80128c0:	4621      	mov	r1, r4
 80128c2:	4628      	mov	r0, r5
 80128c4:	f000 fa4a 	bl	8012d5c <__smakebuf_r>
 80128c8:	4621      	mov	r1, r4
 80128ca:	4628      	mov	r0, r5
 80128cc:	f7ff fdc6 	bl	801245c <_fflush_r>
 80128d0:	2800      	cmp	r0, #0
 80128d2:	d1dc      	bne.n	801288e <_fseeko_r+0x52>
 80128d4:	6a21      	ldr	r1, [r4, #32]
 80128d6:	4633      	mov	r3, r6
 80128d8:	463a      	mov	r2, r7
 80128da:	4628      	mov	r0, r5
 80128dc:	47c0      	blx	r8
 80128de:	3001      	adds	r0, #1
 80128e0:	d0d5      	beq.n	801288e <_fseeko_r+0x52>
 80128e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80128e4:	b141      	cbz	r1, 80128f8 <_fseeko_r+0xbc>
 80128e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80128ea:	4299      	cmp	r1, r3
 80128ec:	d002      	beq.n	80128f4 <_fseeko_r+0xb8>
 80128ee:	4628      	mov	r0, r5
 80128f0:	f000 faaa 	bl	8012e48 <_free_r>
 80128f4:	2300      	movs	r3, #0
 80128f6:	6363      	str	r3, [r4, #52]	; 0x34
 80128f8:	6923      	ldr	r3, [r4, #16]
 80128fa:	6023      	str	r3, [r4, #0]
 80128fc:	89a3      	ldrh	r3, [r4, #12]
 80128fe:	2500      	movs	r5, #0
 8012900:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8012904:	6065      	str	r5, [r4, #4]
 8012906:	81a3      	strh	r3, [r4, #12]
 8012908:	2208      	movs	r2, #8
 801290a:	4629      	mov	r1, r5
 801290c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012910:	f000 fa82 	bl	8012e18 <memset>
 8012914:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8012916:	f016 0601 	ands.w	r6, r6, #1
 801291a:	d120      	bne.n	801295e <_fseeko_r+0x122>
 801291c:	89a3      	ldrh	r3, [r4, #12]
 801291e:	059b      	lsls	r3, r3, #22
 8012920:	d4ba      	bmi.n	8012898 <_fseeko_r+0x5c>
 8012922:	e00c      	b.n	801293e <_fseeko_r+0x102>
 8012924:	4621      	mov	r1, r4
 8012926:	4628      	mov	r0, r5
 8012928:	f000 f822 	bl	8012970 <_ftello_r>
 801292c:	1c43      	adds	r3, r0, #1
 801292e:	4606      	mov	r6, r0
 8012930:	d109      	bne.n	8012946 <_fseeko_r+0x10a>
 8012932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012934:	07dd      	lsls	r5, r3, #31
 8012936:	d4ad      	bmi.n	8012894 <_fseeko_r+0x58>
 8012938:	89a3      	ldrh	r3, [r4, #12]
 801293a:	0598      	lsls	r0, r3, #22
 801293c:	d4aa      	bmi.n	8012894 <_fseeko_r+0x58>
 801293e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012940:	f000 f9e7 	bl	8012d12 <__retarget_lock_release_recursive>
 8012944:	e7a8      	b.n	8012898 <_fseeko_r+0x5c>
 8012946:	4407      	add	r7, r0
 8012948:	2600      	movs	r6, #0
 801294a:	e7b7      	b.n	80128bc <_fseeko_r+0x80>
 801294c:	2316      	movs	r3, #22
 801294e:	e79d      	b.n	801288c <_fseeko_r+0x50>
 8012950:	89a3      	ldrh	r3, [r4, #12]
 8012952:	059a      	lsls	r2, r3, #22
 8012954:	d49e      	bmi.n	8012894 <_fseeko_r+0x58>
 8012956:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012958:	f000 f9db 	bl	8012d12 <__retarget_lock_release_recursive>
 801295c:	e79a      	b.n	8012894 <_fseeko_r+0x58>
 801295e:	462e      	mov	r6, r5
 8012960:	e79a      	b.n	8012898 <_fseeko_r+0x5c>
 8012962:	bf00      	nop
 8012964:	0801903c 	.word	0x0801903c
 8012968:	0801905c 	.word	0x0801905c
 801296c:	0801901c 	.word	0x0801901c

08012970 <_ftello_r>:
 8012970:	b570      	push	{r4, r5, r6, lr}
 8012972:	460c      	mov	r4, r1
 8012974:	4605      	mov	r5, r0
 8012976:	b118      	cbz	r0, 8012980 <_ftello_r+0x10>
 8012978:	6983      	ldr	r3, [r0, #24]
 801297a:	b90b      	cbnz	r3, 8012980 <_ftello_r+0x10>
 801297c:	f7ff fe14 	bl	80125a8 <__sinit>
 8012980:	4b32      	ldr	r3, [pc, #200]	; (8012a4c <_ftello_r+0xdc>)
 8012982:	429c      	cmp	r4, r3
 8012984:	d114      	bne.n	80129b0 <_ftello_r+0x40>
 8012986:	686c      	ldr	r4, [r5, #4]
 8012988:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801298a:	07da      	lsls	r2, r3, #31
 801298c:	d405      	bmi.n	801299a <_ftello_r+0x2a>
 801298e:	89a3      	ldrh	r3, [r4, #12]
 8012990:	059b      	lsls	r3, r3, #22
 8012992:	d402      	bmi.n	801299a <_ftello_r+0x2a>
 8012994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012996:	f000 f9ba 	bl	8012d0e <__retarget_lock_acquire_recursive>
 801299a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801299c:	b9ce      	cbnz	r6, 80129d2 <_ftello_r+0x62>
 801299e:	231d      	movs	r3, #29
 80129a0:	602b      	str	r3, [r5, #0]
 80129a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129a4:	07de      	lsls	r6, r3, #31
 80129a6:	d50d      	bpl.n	80129c4 <_ftello_r+0x54>
 80129a8:	f04f 35ff 	mov.w	r5, #4294967295
 80129ac:	4628      	mov	r0, r5
 80129ae:	bd70      	pop	{r4, r5, r6, pc}
 80129b0:	4b27      	ldr	r3, [pc, #156]	; (8012a50 <_ftello_r+0xe0>)
 80129b2:	429c      	cmp	r4, r3
 80129b4:	d101      	bne.n	80129ba <_ftello_r+0x4a>
 80129b6:	68ac      	ldr	r4, [r5, #8]
 80129b8:	e7e6      	b.n	8012988 <_ftello_r+0x18>
 80129ba:	4b26      	ldr	r3, [pc, #152]	; (8012a54 <_ftello_r+0xe4>)
 80129bc:	429c      	cmp	r4, r3
 80129be:	bf08      	it	eq
 80129c0:	68ec      	ldreq	r4, [r5, #12]
 80129c2:	e7e1      	b.n	8012988 <_ftello_r+0x18>
 80129c4:	89a3      	ldrh	r3, [r4, #12]
 80129c6:	059d      	lsls	r5, r3, #22
 80129c8:	d4ee      	bmi.n	80129a8 <_ftello_r+0x38>
 80129ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129cc:	f000 f9a1 	bl	8012d12 <__retarget_lock_release_recursive>
 80129d0:	e7ea      	b.n	80129a8 <_ftello_r+0x38>
 80129d2:	89a2      	ldrh	r2, [r4, #12]
 80129d4:	f002 030c 	and.w	r3, r2, #12
 80129d8:	2b08      	cmp	r3, #8
 80129da:	d119      	bne.n	8012a10 <_ftello_r+0xa0>
 80129dc:	6823      	ldr	r3, [r4, #0]
 80129de:	b1bb      	cbz	r3, 8012a10 <_ftello_r+0xa0>
 80129e0:	6921      	ldr	r1, [r4, #16]
 80129e2:	1a5b      	subs	r3, r3, r1
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	dd13      	ble.n	8012a10 <_ftello_r+0xa0>
 80129e8:	05d0      	lsls	r0, r2, #23
 80129ea:	d511      	bpl.n	8012a10 <_ftello_r+0xa0>
 80129ec:	2302      	movs	r3, #2
 80129ee:	2200      	movs	r2, #0
 80129f0:	6a21      	ldr	r1, [r4, #32]
 80129f2:	4628      	mov	r0, r5
 80129f4:	47b0      	blx	r6
 80129f6:	1c41      	adds	r1, r0, #1
 80129f8:	4605      	mov	r5, r0
 80129fa:	d10d      	bne.n	8012a18 <_ftello_r+0xa8>
 80129fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129fe:	07da      	lsls	r2, r3, #31
 8012a00:	d4d2      	bmi.n	80129a8 <_ftello_r+0x38>
 8012a02:	89a3      	ldrh	r3, [r4, #12]
 8012a04:	059b      	lsls	r3, r3, #22
 8012a06:	d4cf      	bmi.n	80129a8 <_ftello_r+0x38>
 8012a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a0a:	f000 f982 	bl	8012d12 <__retarget_lock_release_recursive>
 8012a0e:	e7cd      	b.n	80129ac <_ftello_r+0x3c>
 8012a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012a14:	d00f      	beq.n	8012a36 <_ftello_r+0xc6>
 8012a16:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8012a18:	89a2      	ldrh	r2, [r4, #12]
 8012a1a:	0756      	lsls	r6, r2, #29
 8012a1c:	d50d      	bpl.n	8012a3a <_ftello_r+0xca>
 8012a1e:	6863      	ldr	r3, [r4, #4]
 8012a20:	1aed      	subs	r5, r5, r3
 8012a22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a24:	b10b      	cbz	r3, 8012a2a <_ftello_r+0xba>
 8012a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012a28:	1aed      	subs	r5, r5, r3
 8012a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a2c:	07d9      	lsls	r1, r3, #31
 8012a2e:	d4bd      	bmi.n	80129ac <_ftello_r+0x3c>
 8012a30:	0593      	lsls	r3, r2, #22
 8012a32:	d4bb      	bmi.n	80129ac <_ftello_r+0x3c>
 8012a34:	e7e8      	b.n	8012a08 <_ftello_r+0x98>
 8012a36:	2301      	movs	r3, #1
 8012a38:	e7da      	b.n	80129f0 <_ftello_r+0x80>
 8012a3a:	0710      	lsls	r0, r2, #28
 8012a3c:	d5f5      	bpl.n	8012a2a <_ftello_r+0xba>
 8012a3e:	6823      	ldr	r3, [r4, #0]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d0f2      	beq.n	8012a2a <_ftello_r+0xba>
 8012a44:	6921      	ldr	r1, [r4, #16]
 8012a46:	1a5b      	subs	r3, r3, r1
 8012a48:	441d      	add	r5, r3
 8012a4a:	e7ee      	b.n	8012a2a <_ftello_r+0xba>
 8012a4c:	0801903c 	.word	0x0801903c
 8012a50:	0801905c 	.word	0x0801905c
 8012a54:	0801901c 	.word	0x0801901c

08012a58 <_fwalk_reent>:
 8012a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a5c:	4606      	mov	r6, r0
 8012a5e:	4688      	mov	r8, r1
 8012a60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012a64:	2700      	movs	r7, #0
 8012a66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012a6a:	f1b9 0901 	subs.w	r9, r9, #1
 8012a6e:	d505      	bpl.n	8012a7c <_fwalk_reent+0x24>
 8012a70:	6824      	ldr	r4, [r4, #0]
 8012a72:	2c00      	cmp	r4, #0
 8012a74:	d1f7      	bne.n	8012a66 <_fwalk_reent+0xe>
 8012a76:	4638      	mov	r0, r7
 8012a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a7c:	89ab      	ldrh	r3, [r5, #12]
 8012a7e:	2b01      	cmp	r3, #1
 8012a80:	d907      	bls.n	8012a92 <_fwalk_reent+0x3a>
 8012a82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a86:	3301      	adds	r3, #1
 8012a88:	d003      	beq.n	8012a92 <_fwalk_reent+0x3a>
 8012a8a:	4629      	mov	r1, r5
 8012a8c:	4630      	mov	r0, r6
 8012a8e:	47c0      	blx	r8
 8012a90:	4307      	orrs	r7, r0
 8012a92:	3568      	adds	r5, #104	; 0x68
 8012a94:	e7e9      	b.n	8012a6a <_fwalk_reent+0x12>
	...

08012a98 <__libc_init_array>:
 8012a98:	b570      	push	{r4, r5, r6, lr}
 8012a9a:	4d0d      	ldr	r5, [pc, #52]	; (8012ad0 <__libc_init_array+0x38>)
 8012a9c:	4c0d      	ldr	r4, [pc, #52]	; (8012ad4 <__libc_init_array+0x3c>)
 8012a9e:	1b64      	subs	r4, r4, r5
 8012aa0:	10a4      	asrs	r4, r4, #2
 8012aa2:	2600      	movs	r6, #0
 8012aa4:	42a6      	cmp	r6, r4
 8012aa6:	d109      	bne.n	8012abc <__libc_init_array+0x24>
 8012aa8:	4d0b      	ldr	r5, [pc, #44]	; (8012ad8 <__libc_init_array+0x40>)
 8012aaa:	4c0c      	ldr	r4, [pc, #48]	; (8012adc <__libc_init_array+0x44>)
 8012aac:	f003 f8e0 	bl	8015c70 <_init>
 8012ab0:	1b64      	subs	r4, r4, r5
 8012ab2:	10a4      	asrs	r4, r4, #2
 8012ab4:	2600      	movs	r6, #0
 8012ab6:	42a6      	cmp	r6, r4
 8012ab8:	d105      	bne.n	8012ac6 <__libc_init_array+0x2e>
 8012aba:	bd70      	pop	{r4, r5, r6, pc}
 8012abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ac0:	4798      	blx	r3
 8012ac2:	3601      	adds	r6, #1
 8012ac4:	e7ee      	b.n	8012aa4 <__libc_init_array+0xc>
 8012ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8012aca:	4798      	blx	r3
 8012acc:	3601      	adds	r6, #1
 8012ace:	e7f2      	b.n	8012ab6 <__libc_init_array+0x1e>
 8012ad0:	08019614 	.word	0x08019614
 8012ad4:	08019614 	.word	0x08019614
 8012ad8:	08019614 	.word	0x08019614
 8012adc:	08019620 	.word	0x08019620

08012ae0 <localtime>:
 8012ae0:	b538      	push	{r3, r4, r5, lr}
 8012ae2:	4b0b      	ldr	r3, [pc, #44]	; (8012b10 <localtime+0x30>)
 8012ae4:	681d      	ldr	r5, [r3, #0]
 8012ae6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8012ae8:	4604      	mov	r4, r0
 8012aea:	b953      	cbnz	r3, 8012b02 <localtime+0x22>
 8012aec:	2024      	movs	r0, #36	; 0x24
 8012aee:	f000 f975 	bl	8012ddc <malloc>
 8012af2:	4602      	mov	r2, r0
 8012af4:	63e8      	str	r0, [r5, #60]	; 0x3c
 8012af6:	b920      	cbnz	r0, 8012b02 <localtime+0x22>
 8012af8:	4b06      	ldr	r3, [pc, #24]	; (8012b14 <localtime+0x34>)
 8012afa:	4807      	ldr	r0, [pc, #28]	; (8012b18 <localtime+0x38>)
 8012afc:	2132      	movs	r1, #50	; 0x32
 8012afe:	f001 fd43 	bl	8014588 <__assert_func>
 8012b02:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8012b04:	4620      	mov	r0, r4
 8012b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b0a:	f000 b807 	b.w	8012b1c <localtime_r>
 8012b0e:	bf00      	nop
 8012b10:	20000100 	.word	0x20000100
 8012b14:	08019080 	.word	0x08019080
 8012b18:	08019097 	.word	0x08019097

08012b1c <localtime_r>:
 8012b1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012b20:	4607      	mov	r7, r0
 8012b22:	9101      	str	r1, [sp, #4]
 8012b24:	f001 fe0c 	bl	8014740 <__gettzinfo>
 8012b28:	9901      	ldr	r1, [sp, #4]
 8012b2a:	4680      	mov	r8, r0
 8012b2c:	4638      	mov	r0, r7
 8012b2e:	f001 fe0b 	bl	8014748 <gmtime_r>
 8012b32:	6943      	ldr	r3, [r0, #20]
 8012b34:	079a      	lsls	r2, r3, #30
 8012b36:	4604      	mov	r4, r0
 8012b38:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8012b3c:	d105      	bne.n	8012b4a <localtime_r+0x2e>
 8012b3e:	2264      	movs	r2, #100	; 0x64
 8012b40:	fb96 f3f2 	sdiv	r3, r6, r2
 8012b44:	fb02 6313 	mls	r3, r2, r3, r6
 8012b48:	bb7b      	cbnz	r3, 8012baa <localtime_r+0x8e>
 8012b4a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012b4e:	fb96 f5f3 	sdiv	r5, r6, r3
 8012b52:	fb03 6515 	mls	r5, r3, r5, r6
 8012b56:	fab5 f585 	clz	r5, r5
 8012b5a:	096d      	lsrs	r5, r5, #5
 8012b5c:	4b68      	ldr	r3, [pc, #416]	; (8012d00 <localtime_r+0x1e4>)
 8012b5e:	2230      	movs	r2, #48	; 0x30
 8012b60:	fb02 3505 	mla	r5, r2, r5, r3
 8012b64:	f001 fa10 	bl	8013f88 <__tz_lock>
 8012b68:	f001 fa1a 	bl	8013fa0 <_tzset_unlocked>
 8012b6c:	4b65      	ldr	r3, [pc, #404]	; (8012d04 <localtime_r+0x1e8>)
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	b353      	cbz	r3, 8012bc8 <localtime_r+0xac>
 8012b72:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012b76:	42b3      	cmp	r3, r6
 8012b78:	d119      	bne.n	8012bae <localtime_r+0x92>
 8012b7a:	f8d8 1000 	ldr.w	r1, [r8]
 8012b7e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8012b82:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8012b86:	b9d1      	cbnz	r1, 8012bbe <localtime_r+0xa2>
 8012b88:	4296      	cmp	r6, r2
 8012b8a:	eb77 0303 	sbcs.w	r3, r7, r3
 8012b8e:	da23      	bge.n	8012bd8 <localtime_r+0xbc>
 8012b90:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8012b94:	4296      	cmp	r6, r2
 8012b96:	eb77 0303 	sbcs.w	r3, r7, r3
 8012b9a:	bfb4      	ite	lt
 8012b9c:	2301      	movlt	r3, #1
 8012b9e:	2300      	movge	r3, #0
 8012ba0:	6223      	str	r3, [r4, #32]
 8012ba2:	db1b      	blt.n	8012bdc <localtime_r+0xc0>
 8012ba4:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8012ba8:	e01a      	b.n	8012be0 <localtime_r+0xc4>
 8012baa:	2501      	movs	r5, #1
 8012bac:	e7d6      	b.n	8012b5c <localtime_r+0x40>
 8012bae:	4630      	mov	r0, r6
 8012bb0:	f001 f942 	bl	8013e38 <__tzcalc_limits>
 8012bb4:	2800      	cmp	r0, #0
 8012bb6:	d1e0      	bne.n	8012b7a <localtime_r+0x5e>
 8012bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8012bbc:	e004      	b.n	8012bc8 <localtime_r+0xac>
 8012bbe:	4296      	cmp	r6, r2
 8012bc0:	eb77 0303 	sbcs.w	r3, r7, r3
 8012bc4:	da02      	bge.n	8012bcc <localtime_r+0xb0>
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	6223      	str	r3, [r4, #32]
 8012bca:	e7eb      	b.n	8012ba4 <localtime_r+0x88>
 8012bcc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8012bd0:	4296      	cmp	r6, r2
 8012bd2:	eb77 0303 	sbcs.w	r3, r7, r3
 8012bd6:	daf6      	bge.n	8012bc6 <localtime_r+0xaa>
 8012bd8:	2301      	movs	r3, #1
 8012bda:	6223      	str	r3, [r4, #32]
 8012bdc:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8012be0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8012be4:	203c      	movs	r0, #60	; 0x3c
 8012be6:	fb91 f6f3 	sdiv	r6, r1, r3
 8012bea:	fb03 1316 	mls	r3, r3, r6, r1
 8012bee:	6861      	ldr	r1, [r4, #4]
 8012bf0:	fb93 f2f0 	sdiv	r2, r3, r0
 8012bf4:	fb00 3012 	mls	r0, r0, r2, r3
 8012bf8:	6823      	ldr	r3, [r4, #0]
 8012bfa:	1a89      	subs	r1, r1, r2
 8012bfc:	68a2      	ldr	r2, [r4, #8]
 8012bfe:	6061      	str	r1, [r4, #4]
 8012c00:	1a1b      	subs	r3, r3, r0
 8012c02:	1b92      	subs	r2, r2, r6
 8012c04:	2b3b      	cmp	r3, #59	; 0x3b
 8012c06:	6023      	str	r3, [r4, #0]
 8012c08:	60a2      	str	r2, [r4, #8]
 8012c0a:	dd35      	ble.n	8012c78 <localtime_r+0x15c>
 8012c0c:	3101      	adds	r1, #1
 8012c0e:	6061      	str	r1, [r4, #4]
 8012c10:	3b3c      	subs	r3, #60	; 0x3c
 8012c12:	6023      	str	r3, [r4, #0]
 8012c14:	6863      	ldr	r3, [r4, #4]
 8012c16:	2b3b      	cmp	r3, #59	; 0x3b
 8012c18:	dd34      	ble.n	8012c84 <localtime_r+0x168>
 8012c1a:	3201      	adds	r2, #1
 8012c1c:	60a2      	str	r2, [r4, #8]
 8012c1e:	3b3c      	subs	r3, #60	; 0x3c
 8012c20:	6063      	str	r3, [r4, #4]
 8012c22:	68a3      	ldr	r3, [r4, #8]
 8012c24:	2b17      	cmp	r3, #23
 8012c26:	dd33      	ble.n	8012c90 <localtime_r+0x174>
 8012c28:	69e2      	ldr	r2, [r4, #28]
 8012c2a:	3201      	adds	r2, #1
 8012c2c:	61e2      	str	r2, [r4, #28]
 8012c2e:	69a2      	ldr	r2, [r4, #24]
 8012c30:	3201      	adds	r2, #1
 8012c32:	2a06      	cmp	r2, #6
 8012c34:	bfc8      	it	gt
 8012c36:	2200      	movgt	r2, #0
 8012c38:	61a2      	str	r2, [r4, #24]
 8012c3a:	68e2      	ldr	r2, [r4, #12]
 8012c3c:	3b18      	subs	r3, #24
 8012c3e:	3201      	adds	r2, #1
 8012c40:	60a3      	str	r3, [r4, #8]
 8012c42:	6923      	ldr	r3, [r4, #16]
 8012c44:	60e2      	str	r2, [r4, #12]
 8012c46:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8012c4a:	428a      	cmp	r2, r1
 8012c4c:	dd0e      	ble.n	8012c6c <localtime_r+0x150>
 8012c4e:	2b0b      	cmp	r3, #11
 8012c50:	eba2 0201 	sub.w	r2, r2, r1
 8012c54:	60e2      	str	r2, [r4, #12]
 8012c56:	f103 0201 	add.w	r2, r3, #1
 8012c5a:	bf09      	itett	eq
 8012c5c:	6963      	ldreq	r3, [r4, #20]
 8012c5e:	6122      	strne	r2, [r4, #16]
 8012c60:	2200      	moveq	r2, #0
 8012c62:	3301      	addeq	r3, #1
 8012c64:	bf02      	ittt	eq
 8012c66:	6122      	streq	r2, [r4, #16]
 8012c68:	6163      	streq	r3, [r4, #20]
 8012c6a:	61e2      	streq	r2, [r4, #28]
 8012c6c:	f001 f992 	bl	8013f94 <__tz_unlock>
 8012c70:	4620      	mov	r0, r4
 8012c72:	b002      	add	sp, #8
 8012c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	dacb      	bge.n	8012c14 <localtime_r+0xf8>
 8012c7c:	3901      	subs	r1, #1
 8012c7e:	6061      	str	r1, [r4, #4]
 8012c80:	333c      	adds	r3, #60	; 0x3c
 8012c82:	e7c6      	b.n	8012c12 <localtime_r+0xf6>
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	dacc      	bge.n	8012c22 <localtime_r+0x106>
 8012c88:	3a01      	subs	r2, #1
 8012c8a:	60a2      	str	r2, [r4, #8]
 8012c8c:	333c      	adds	r3, #60	; 0x3c
 8012c8e:	e7c7      	b.n	8012c20 <localtime_r+0x104>
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	daeb      	bge.n	8012c6c <localtime_r+0x150>
 8012c94:	69e2      	ldr	r2, [r4, #28]
 8012c96:	3a01      	subs	r2, #1
 8012c98:	61e2      	str	r2, [r4, #28]
 8012c9a:	69a2      	ldr	r2, [r4, #24]
 8012c9c:	3a01      	subs	r2, #1
 8012c9e:	bf48      	it	mi
 8012ca0:	2206      	movmi	r2, #6
 8012ca2:	61a2      	str	r2, [r4, #24]
 8012ca4:	68e2      	ldr	r2, [r4, #12]
 8012ca6:	3318      	adds	r3, #24
 8012ca8:	3a01      	subs	r2, #1
 8012caa:	60e2      	str	r2, [r4, #12]
 8012cac:	60a3      	str	r3, [r4, #8]
 8012cae:	2a00      	cmp	r2, #0
 8012cb0:	d1dc      	bne.n	8012c6c <localtime_r+0x150>
 8012cb2:	6923      	ldr	r3, [r4, #16]
 8012cb4:	3b01      	subs	r3, #1
 8012cb6:	d405      	bmi.n	8012cc4 <localtime_r+0x1a8>
 8012cb8:	6123      	str	r3, [r4, #16]
 8012cba:	6923      	ldr	r3, [r4, #16]
 8012cbc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8012cc0:	60e3      	str	r3, [r4, #12]
 8012cc2:	e7d3      	b.n	8012c6c <localtime_r+0x150>
 8012cc4:	230b      	movs	r3, #11
 8012cc6:	6123      	str	r3, [r4, #16]
 8012cc8:	6963      	ldr	r3, [r4, #20]
 8012cca:	1e5a      	subs	r2, r3, #1
 8012ccc:	6162      	str	r2, [r4, #20]
 8012cce:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8012cd2:	0793      	lsls	r3, r2, #30
 8012cd4:	d105      	bne.n	8012ce2 <localtime_r+0x1c6>
 8012cd6:	2164      	movs	r1, #100	; 0x64
 8012cd8:	fb92 f3f1 	sdiv	r3, r2, r1
 8012cdc:	fb01 2313 	mls	r3, r1, r3, r2
 8012ce0:	b963      	cbnz	r3, 8012cfc <localtime_r+0x1e0>
 8012ce2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012ce6:	fb92 f3f1 	sdiv	r3, r2, r1
 8012cea:	fb01 2313 	mls	r3, r1, r3, r2
 8012cee:	fab3 f383 	clz	r3, r3
 8012cf2:	095b      	lsrs	r3, r3, #5
 8012cf4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8012cf8:	61e3      	str	r3, [r4, #28]
 8012cfa:	e7de      	b.n	8012cba <localtime_r+0x19e>
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	e7f9      	b.n	8012cf4 <localtime_r+0x1d8>
 8012d00:	080190f8 	.word	0x080190f8
 8012d04:	20000bdc 	.word	0x20000bdc

08012d08 <__retarget_lock_init_recursive>:
 8012d08:	4770      	bx	lr

08012d0a <__retarget_lock_close_recursive>:
 8012d0a:	4770      	bx	lr

08012d0c <__retarget_lock_acquire>:
 8012d0c:	4770      	bx	lr

08012d0e <__retarget_lock_acquire_recursive>:
 8012d0e:	4770      	bx	lr

08012d10 <__retarget_lock_release>:
 8012d10:	4770      	bx	lr

08012d12 <__retarget_lock_release_recursive>:
 8012d12:	4770      	bx	lr

08012d14 <__swhatbuf_r>:
 8012d14:	b570      	push	{r4, r5, r6, lr}
 8012d16:	460e      	mov	r6, r1
 8012d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d1c:	2900      	cmp	r1, #0
 8012d1e:	b096      	sub	sp, #88	; 0x58
 8012d20:	4614      	mov	r4, r2
 8012d22:	461d      	mov	r5, r3
 8012d24:	da07      	bge.n	8012d36 <__swhatbuf_r+0x22>
 8012d26:	2300      	movs	r3, #0
 8012d28:	602b      	str	r3, [r5, #0]
 8012d2a:	89b3      	ldrh	r3, [r6, #12]
 8012d2c:	061a      	lsls	r2, r3, #24
 8012d2e:	d410      	bmi.n	8012d52 <__swhatbuf_r+0x3e>
 8012d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d34:	e00e      	b.n	8012d54 <__swhatbuf_r+0x40>
 8012d36:	466a      	mov	r2, sp
 8012d38:	f001 fc9c 	bl	8014674 <_fstat_r>
 8012d3c:	2800      	cmp	r0, #0
 8012d3e:	dbf2      	blt.n	8012d26 <__swhatbuf_r+0x12>
 8012d40:	9a01      	ldr	r2, [sp, #4]
 8012d42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012d46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012d4a:	425a      	negs	r2, r3
 8012d4c:	415a      	adcs	r2, r3
 8012d4e:	602a      	str	r2, [r5, #0]
 8012d50:	e7ee      	b.n	8012d30 <__swhatbuf_r+0x1c>
 8012d52:	2340      	movs	r3, #64	; 0x40
 8012d54:	2000      	movs	r0, #0
 8012d56:	6023      	str	r3, [r4, #0]
 8012d58:	b016      	add	sp, #88	; 0x58
 8012d5a:	bd70      	pop	{r4, r5, r6, pc}

08012d5c <__smakebuf_r>:
 8012d5c:	898b      	ldrh	r3, [r1, #12]
 8012d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d60:	079d      	lsls	r5, r3, #30
 8012d62:	4606      	mov	r6, r0
 8012d64:	460c      	mov	r4, r1
 8012d66:	d507      	bpl.n	8012d78 <__smakebuf_r+0x1c>
 8012d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012d6c:	6023      	str	r3, [r4, #0]
 8012d6e:	6123      	str	r3, [r4, #16]
 8012d70:	2301      	movs	r3, #1
 8012d72:	6163      	str	r3, [r4, #20]
 8012d74:	b002      	add	sp, #8
 8012d76:	bd70      	pop	{r4, r5, r6, pc}
 8012d78:	ab01      	add	r3, sp, #4
 8012d7a:	466a      	mov	r2, sp
 8012d7c:	f7ff ffca 	bl	8012d14 <__swhatbuf_r>
 8012d80:	9900      	ldr	r1, [sp, #0]
 8012d82:	4605      	mov	r5, r0
 8012d84:	4630      	mov	r0, r6
 8012d86:	f000 f8af 	bl	8012ee8 <_malloc_r>
 8012d8a:	b948      	cbnz	r0, 8012da0 <__smakebuf_r+0x44>
 8012d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d90:	059a      	lsls	r2, r3, #22
 8012d92:	d4ef      	bmi.n	8012d74 <__smakebuf_r+0x18>
 8012d94:	f023 0303 	bic.w	r3, r3, #3
 8012d98:	f043 0302 	orr.w	r3, r3, #2
 8012d9c:	81a3      	strh	r3, [r4, #12]
 8012d9e:	e7e3      	b.n	8012d68 <__smakebuf_r+0xc>
 8012da0:	4b0d      	ldr	r3, [pc, #52]	; (8012dd8 <__smakebuf_r+0x7c>)
 8012da2:	62b3      	str	r3, [r6, #40]	; 0x28
 8012da4:	89a3      	ldrh	r3, [r4, #12]
 8012da6:	6020      	str	r0, [r4, #0]
 8012da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012dac:	81a3      	strh	r3, [r4, #12]
 8012dae:	9b00      	ldr	r3, [sp, #0]
 8012db0:	6163      	str	r3, [r4, #20]
 8012db2:	9b01      	ldr	r3, [sp, #4]
 8012db4:	6120      	str	r0, [r4, #16]
 8012db6:	b15b      	cbz	r3, 8012dd0 <__smakebuf_r+0x74>
 8012db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012dbc:	4630      	mov	r0, r6
 8012dbe:	f001 fd73 	bl	80148a8 <_isatty_r>
 8012dc2:	b128      	cbz	r0, 8012dd0 <__smakebuf_r+0x74>
 8012dc4:	89a3      	ldrh	r3, [r4, #12]
 8012dc6:	f023 0303 	bic.w	r3, r3, #3
 8012dca:	f043 0301 	orr.w	r3, r3, #1
 8012dce:	81a3      	strh	r3, [r4, #12]
 8012dd0:	89a0      	ldrh	r0, [r4, #12]
 8012dd2:	4305      	orrs	r5, r0
 8012dd4:	81a5      	strh	r5, [r4, #12]
 8012dd6:	e7cd      	b.n	8012d74 <__smakebuf_r+0x18>
 8012dd8:	08012541 	.word	0x08012541

08012ddc <malloc>:
 8012ddc:	4b02      	ldr	r3, [pc, #8]	; (8012de8 <malloc+0xc>)
 8012dde:	4601      	mov	r1, r0
 8012de0:	6818      	ldr	r0, [r3, #0]
 8012de2:	f000 b881 	b.w	8012ee8 <_malloc_r>
 8012de6:	bf00      	nop
 8012de8:	20000100 	.word	0x20000100

08012dec <free>:
 8012dec:	4b02      	ldr	r3, [pc, #8]	; (8012df8 <free+0xc>)
 8012dee:	4601      	mov	r1, r0
 8012df0:	6818      	ldr	r0, [r3, #0]
 8012df2:	f000 b829 	b.w	8012e48 <_free_r>
 8012df6:	bf00      	nop
 8012df8:	20000100 	.word	0x20000100

08012dfc <memcpy>:
 8012dfc:	440a      	add	r2, r1
 8012dfe:	4291      	cmp	r1, r2
 8012e00:	f100 33ff 	add.w	r3, r0, #4294967295
 8012e04:	d100      	bne.n	8012e08 <memcpy+0xc>
 8012e06:	4770      	bx	lr
 8012e08:	b510      	push	{r4, lr}
 8012e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e12:	4291      	cmp	r1, r2
 8012e14:	d1f9      	bne.n	8012e0a <memcpy+0xe>
 8012e16:	bd10      	pop	{r4, pc}

08012e18 <memset>:
 8012e18:	4402      	add	r2, r0
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	4293      	cmp	r3, r2
 8012e1e:	d100      	bne.n	8012e22 <memset+0xa>
 8012e20:	4770      	bx	lr
 8012e22:	f803 1b01 	strb.w	r1, [r3], #1
 8012e26:	e7f9      	b.n	8012e1c <memset+0x4>

08012e28 <_calloc_r>:
 8012e28:	b513      	push	{r0, r1, r4, lr}
 8012e2a:	434a      	muls	r2, r1
 8012e2c:	4611      	mov	r1, r2
 8012e2e:	9201      	str	r2, [sp, #4]
 8012e30:	f000 f85a 	bl	8012ee8 <_malloc_r>
 8012e34:	4604      	mov	r4, r0
 8012e36:	b118      	cbz	r0, 8012e40 <_calloc_r+0x18>
 8012e38:	9a01      	ldr	r2, [sp, #4]
 8012e3a:	2100      	movs	r1, #0
 8012e3c:	f7ff ffec 	bl	8012e18 <memset>
 8012e40:	4620      	mov	r0, r4
 8012e42:	b002      	add	sp, #8
 8012e44:	bd10      	pop	{r4, pc}
	...

08012e48 <_free_r>:
 8012e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012e4a:	2900      	cmp	r1, #0
 8012e4c:	d048      	beq.n	8012ee0 <_free_r+0x98>
 8012e4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e52:	9001      	str	r0, [sp, #4]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	f1a1 0404 	sub.w	r4, r1, #4
 8012e5a:	bfb8      	it	lt
 8012e5c:	18e4      	addlt	r4, r4, r3
 8012e5e:	f001 fd5b 	bl	8014918 <__malloc_lock>
 8012e62:	4a20      	ldr	r2, [pc, #128]	; (8012ee4 <_free_r+0x9c>)
 8012e64:	9801      	ldr	r0, [sp, #4]
 8012e66:	6813      	ldr	r3, [r2, #0]
 8012e68:	4615      	mov	r5, r2
 8012e6a:	b933      	cbnz	r3, 8012e7a <_free_r+0x32>
 8012e6c:	6063      	str	r3, [r4, #4]
 8012e6e:	6014      	str	r4, [r2, #0]
 8012e70:	b003      	add	sp, #12
 8012e72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e76:	f001 bd55 	b.w	8014924 <__malloc_unlock>
 8012e7a:	42a3      	cmp	r3, r4
 8012e7c:	d90b      	bls.n	8012e96 <_free_r+0x4e>
 8012e7e:	6821      	ldr	r1, [r4, #0]
 8012e80:	1862      	adds	r2, r4, r1
 8012e82:	4293      	cmp	r3, r2
 8012e84:	bf04      	itt	eq
 8012e86:	681a      	ldreq	r2, [r3, #0]
 8012e88:	685b      	ldreq	r3, [r3, #4]
 8012e8a:	6063      	str	r3, [r4, #4]
 8012e8c:	bf04      	itt	eq
 8012e8e:	1852      	addeq	r2, r2, r1
 8012e90:	6022      	streq	r2, [r4, #0]
 8012e92:	602c      	str	r4, [r5, #0]
 8012e94:	e7ec      	b.n	8012e70 <_free_r+0x28>
 8012e96:	461a      	mov	r2, r3
 8012e98:	685b      	ldr	r3, [r3, #4]
 8012e9a:	b10b      	cbz	r3, 8012ea0 <_free_r+0x58>
 8012e9c:	42a3      	cmp	r3, r4
 8012e9e:	d9fa      	bls.n	8012e96 <_free_r+0x4e>
 8012ea0:	6811      	ldr	r1, [r2, #0]
 8012ea2:	1855      	adds	r5, r2, r1
 8012ea4:	42a5      	cmp	r5, r4
 8012ea6:	d10b      	bne.n	8012ec0 <_free_r+0x78>
 8012ea8:	6824      	ldr	r4, [r4, #0]
 8012eaa:	4421      	add	r1, r4
 8012eac:	1854      	adds	r4, r2, r1
 8012eae:	42a3      	cmp	r3, r4
 8012eb0:	6011      	str	r1, [r2, #0]
 8012eb2:	d1dd      	bne.n	8012e70 <_free_r+0x28>
 8012eb4:	681c      	ldr	r4, [r3, #0]
 8012eb6:	685b      	ldr	r3, [r3, #4]
 8012eb8:	6053      	str	r3, [r2, #4]
 8012eba:	4421      	add	r1, r4
 8012ebc:	6011      	str	r1, [r2, #0]
 8012ebe:	e7d7      	b.n	8012e70 <_free_r+0x28>
 8012ec0:	d902      	bls.n	8012ec8 <_free_r+0x80>
 8012ec2:	230c      	movs	r3, #12
 8012ec4:	6003      	str	r3, [r0, #0]
 8012ec6:	e7d3      	b.n	8012e70 <_free_r+0x28>
 8012ec8:	6825      	ldr	r5, [r4, #0]
 8012eca:	1961      	adds	r1, r4, r5
 8012ecc:	428b      	cmp	r3, r1
 8012ece:	bf04      	itt	eq
 8012ed0:	6819      	ldreq	r1, [r3, #0]
 8012ed2:	685b      	ldreq	r3, [r3, #4]
 8012ed4:	6063      	str	r3, [r4, #4]
 8012ed6:	bf04      	itt	eq
 8012ed8:	1949      	addeq	r1, r1, r5
 8012eda:	6021      	streq	r1, [r4, #0]
 8012edc:	6054      	str	r4, [r2, #4]
 8012ede:	e7c7      	b.n	8012e70 <_free_r+0x28>
 8012ee0:	b003      	add	sp, #12
 8012ee2:	bd30      	pop	{r4, r5, pc}
 8012ee4:	20000bb8 	.word	0x20000bb8

08012ee8 <_malloc_r>:
 8012ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eea:	1ccd      	adds	r5, r1, #3
 8012eec:	f025 0503 	bic.w	r5, r5, #3
 8012ef0:	3508      	adds	r5, #8
 8012ef2:	2d0c      	cmp	r5, #12
 8012ef4:	bf38      	it	cc
 8012ef6:	250c      	movcc	r5, #12
 8012ef8:	2d00      	cmp	r5, #0
 8012efa:	4606      	mov	r6, r0
 8012efc:	db01      	blt.n	8012f02 <_malloc_r+0x1a>
 8012efe:	42a9      	cmp	r1, r5
 8012f00:	d903      	bls.n	8012f0a <_malloc_r+0x22>
 8012f02:	230c      	movs	r3, #12
 8012f04:	6033      	str	r3, [r6, #0]
 8012f06:	2000      	movs	r0, #0
 8012f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f0a:	f001 fd05 	bl	8014918 <__malloc_lock>
 8012f0e:	4921      	ldr	r1, [pc, #132]	; (8012f94 <_malloc_r+0xac>)
 8012f10:	680a      	ldr	r2, [r1, #0]
 8012f12:	4614      	mov	r4, r2
 8012f14:	b99c      	cbnz	r4, 8012f3e <_malloc_r+0x56>
 8012f16:	4f20      	ldr	r7, [pc, #128]	; (8012f98 <_malloc_r+0xb0>)
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	b923      	cbnz	r3, 8012f26 <_malloc_r+0x3e>
 8012f1c:	4621      	mov	r1, r4
 8012f1e:	4630      	mov	r0, r6
 8012f20:	f000 f8da 	bl	80130d8 <_sbrk_r>
 8012f24:	6038      	str	r0, [r7, #0]
 8012f26:	4629      	mov	r1, r5
 8012f28:	4630      	mov	r0, r6
 8012f2a:	f000 f8d5 	bl	80130d8 <_sbrk_r>
 8012f2e:	1c43      	adds	r3, r0, #1
 8012f30:	d123      	bne.n	8012f7a <_malloc_r+0x92>
 8012f32:	230c      	movs	r3, #12
 8012f34:	6033      	str	r3, [r6, #0]
 8012f36:	4630      	mov	r0, r6
 8012f38:	f001 fcf4 	bl	8014924 <__malloc_unlock>
 8012f3c:	e7e3      	b.n	8012f06 <_malloc_r+0x1e>
 8012f3e:	6823      	ldr	r3, [r4, #0]
 8012f40:	1b5b      	subs	r3, r3, r5
 8012f42:	d417      	bmi.n	8012f74 <_malloc_r+0x8c>
 8012f44:	2b0b      	cmp	r3, #11
 8012f46:	d903      	bls.n	8012f50 <_malloc_r+0x68>
 8012f48:	6023      	str	r3, [r4, #0]
 8012f4a:	441c      	add	r4, r3
 8012f4c:	6025      	str	r5, [r4, #0]
 8012f4e:	e004      	b.n	8012f5a <_malloc_r+0x72>
 8012f50:	6863      	ldr	r3, [r4, #4]
 8012f52:	42a2      	cmp	r2, r4
 8012f54:	bf0c      	ite	eq
 8012f56:	600b      	streq	r3, [r1, #0]
 8012f58:	6053      	strne	r3, [r2, #4]
 8012f5a:	4630      	mov	r0, r6
 8012f5c:	f001 fce2 	bl	8014924 <__malloc_unlock>
 8012f60:	f104 000b 	add.w	r0, r4, #11
 8012f64:	1d23      	adds	r3, r4, #4
 8012f66:	f020 0007 	bic.w	r0, r0, #7
 8012f6a:	1ac2      	subs	r2, r0, r3
 8012f6c:	d0cc      	beq.n	8012f08 <_malloc_r+0x20>
 8012f6e:	1a1b      	subs	r3, r3, r0
 8012f70:	50a3      	str	r3, [r4, r2]
 8012f72:	e7c9      	b.n	8012f08 <_malloc_r+0x20>
 8012f74:	4622      	mov	r2, r4
 8012f76:	6864      	ldr	r4, [r4, #4]
 8012f78:	e7cc      	b.n	8012f14 <_malloc_r+0x2c>
 8012f7a:	1cc4      	adds	r4, r0, #3
 8012f7c:	f024 0403 	bic.w	r4, r4, #3
 8012f80:	42a0      	cmp	r0, r4
 8012f82:	d0e3      	beq.n	8012f4c <_malloc_r+0x64>
 8012f84:	1a21      	subs	r1, r4, r0
 8012f86:	4630      	mov	r0, r6
 8012f88:	f000 f8a6 	bl	80130d8 <_sbrk_r>
 8012f8c:	3001      	adds	r0, #1
 8012f8e:	d1dd      	bne.n	8012f4c <_malloc_r+0x64>
 8012f90:	e7cf      	b.n	8012f32 <_malloc_r+0x4a>
 8012f92:	bf00      	nop
 8012f94:	20000bb8 	.word	0x20000bb8
 8012f98:	20000bbc 	.word	0x20000bbc

08012f9c <_open_r>:
 8012f9c:	b538      	push	{r3, r4, r5, lr}
 8012f9e:	4d07      	ldr	r5, [pc, #28]	; (8012fbc <_open_r+0x20>)
 8012fa0:	4604      	mov	r4, r0
 8012fa2:	4608      	mov	r0, r1
 8012fa4:	4611      	mov	r1, r2
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	602a      	str	r2, [r5, #0]
 8012faa:	461a      	mov	r2, r3
 8012fac:	f7ed ff60 	bl	8000e70 <_open>
 8012fb0:	1c43      	adds	r3, r0, #1
 8012fb2:	d102      	bne.n	8012fba <_open_r+0x1e>
 8012fb4:	682b      	ldr	r3, [r5, #0]
 8012fb6:	b103      	cbz	r3, 8012fba <_open_r+0x1e>
 8012fb8:	6023      	str	r3, [r4, #0]
 8012fba:	bd38      	pop	{r3, r4, r5, pc}
 8012fbc:	20000c84 	.word	0x20000c84

08012fc0 <putchar>:
 8012fc0:	4b09      	ldr	r3, [pc, #36]	; (8012fe8 <putchar+0x28>)
 8012fc2:	b513      	push	{r0, r1, r4, lr}
 8012fc4:	681c      	ldr	r4, [r3, #0]
 8012fc6:	4601      	mov	r1, r0
 8012fc8:	b134      	cbz	r4, 8012fd8 <putchar+0x18>
 8012fca:	69a3      	ldr	r3, [r4, #24]
 8012fcc:	b923      	cbnz	r3, 8012fd8 <putchar+0x18>
 8012fce:	9001      	str	r0, [sp, #4]
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	f7ff fae9 	bl	80125a8 <__sinit>
 8012fd6:	9901      	ldr	r1, [sp, #4]
 8012fd8:	68a2      	ldr	r2, [r4, #8]
 8012fda:	4620      	mov	r0, r4
 8012fdc:	b002      	add	sp, #8
 8012fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fe2:	f002 b915 	b.w	8015210 <_putc_r>
 8012fe6:	bf00      	nop
 8012fe8:	20000100 	.word	0x20000100

08012fec <srand>:
 8012fec:	b538      	push	{r3, r4, r5, lr}
 8012fee:	4b10      	ldr	r3, [pc, #64]	; (8013030 <srand+0x44>)
 8012ff0:	681d      	ldr	r5, [r3, #0]
 8012ff2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012ff4:	4604      	mov	r4, r0
 8012ff6:	b9b3      	cbnz	r3, 8013026 <srand+0x3a>
 8012ff8:	2018      	movs	r0, #24
 8012ffa:	f7ff feef 	bl	8012ddc <malloc>
 8012ffe:	4602      	mov	r2, r0
 8013000:	63a8      	str	r0, [r5, #56]	; 0x38
 8013002:	b920      	cbnz	r0, 801300e <srand+0x22>
 8013004:	4b0b      	ldr	r3, [pc, #44]	; (8013034 <srand+0x48>)
 8013006:	480c      	ldr	r0, [pc, #48]	; (8013038 <srand+0x4c>)
 8013008:	2142      	movs	r1, #66	; 0x42
 801300a:	f001 fabd 	bl	8014588 <__assert_func>
 801300e:	490b      	ldr	r1, [pc, #44]	; (801303c <srand+0x50>)
 8013010:	4b0b      	ldr	r3, [pc, #44]	; (8013040 <srand+0x54>)
 8013012:	e9c0 1300 	strd	r1, r3, [r0]
 8013016:	4b0b      	ldr	r3, [pc, #44]	; (8013044 <srand+0x58>)
 8013018:	6083      	str	r3, [r0, #8]
 801301a:	230b      	movs	r3, #11
 801301c:	8183      	strh	r3, [r0, #12]
 801301e:	2100      	movs	r1, #0
 8013020:	2001      	movs	r0, #1
 8013022:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013026:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8013028:	2200      	movs	r2, #0
 801302a:	611c      	str	r4, [r3, #16]
 801302c:	615a      	str	r2, [r3, #20]
 801302e:	bd38      	pop	{r3, r4, r5, pc}
 8013030:	20000100 	.word	0x20000100
 8013034:	08019080 	.word	0x08019080
 8013038:	08019158 	.word	0x08019158
 801303c:	abcd330e 	.word	0xabcd330e
 8013040:	e66d1234 	.word	0xe66d1234
 8013044:	0005deec 	.word	0x0005deec

08013048 <rand>:
 8013048:	4b17      	ldr	r3, [pc, #92]	; (80130a8 <rand+0x60>)
 801304a:	b510      	push	{r4, lr}
 801304c:	681c      	ldr	r4, [r3, #0]
 801304e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013050:	b9b3      	cbnz	r3, 8013080 <rand+0x38>
 8013052:	2018      	movs	r0, #24
 8013054:	f7ff fec2 	bl	8012ddc <malloc>
 8013058:	63a0      	str	r0, [r4, #56]	; 0x38
 801305a:	b928      	cbnz	r0, 8013068 <rand+0x20>
 801305c:	4602      	mov	r2, r0
 801305e:	4b13      	ldr	r3, [pc, #76]	; (80130ac <rand+0x64>)
 8013060:	4813      	ldr	r0, [pc, #76]	; (80130b0 <rand+0x68>)
 8013062:	214e      	movs	r1, #78	; 0x4e
 8013064:	f001 fa90 	bl	8014588 <__assert_func>
 8013068:	4a12      	ldr	r2, [pc, #72]	; (80130b4 <rand+0x6c>)
 801306a:	4b13      	ldr	r3, [pc, #76]	; (80130b8 <rand+0x70>)
 801306c:	e9c0 2300 	strd	r2, r3, [r0]
 8013070:	4b12      	ldr	r3, [pc, #72]	; (80130bc <rand+0x74>)
 8013072:	6083      	str	r3, [r0, #8]
 8013074:	230b      	movs	r3, #11
 8013076:	8183      	strh	r3, [r0, #12]
 8013078:	2201      	movs	r2, #1
 801307a:	2300      	movs	r3, #0
 801307c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013080:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013082:	480f      	ldr	r0, [pc, #60]	; (80130c0 <rand+0x78>)
 8013084:	690a      	ldr	r2, [r1, #16]
 8013086:	694b      	ldr	r3, [r1, #20]
 8013088:	4c0e      	ldr	r4, [pc, #56]	; (80130c4 <rand+0x7c>)
 801308a:	4350      	muls	r0, r2
 801308c:	fb04 0003 	mla	r0, r4, r3, r0
 8013090:	fba2 3404 	umull	r3, r4, r2, r4
 8013094:	1c5a      	adds	r2, r3, #1
 8013096:	4404      	add	r4, r0
 8013098:	f144 0000 	adc.w	r0, r4, #0
 801309c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80130a0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80130a4:	bd10      	pop	{r4, pc}
 80130a6:	bf00      	nop
 80130a8:	20000100 	.word	0x20000100
 80130ac:	08019080 	.word	0x08019080
 80130b0:	08019158 	.word	0x08019158
 80130b4:	abcd330e 	.word	0xabcd330e
 80130b8:	e66d1234 	.word	0xe66d1234
 80130bc:	0005deec 	.word	0x0005deec
 80130c0:	5851f42d 	.word	0x5851f42d
 80130c4:	4c957f2d 	.word	0x4c957f2d

080130c8 <realloc>:
 80130c8:	4b02      	ldr	r3, [pc, #8]	; (80130d4 <realloc+0xc>)
 80130ca:	460a      	mov	r2, r1
 80130cc:	4601      	mov	r1, r0
 80130ce:	6818      	ldr	r0, [r3, #0]
 80130d0:	f001 bc2e 	b.w	8014930 <_realloc_r>
 80130d4:	20000100 	.word	0x20000100

080130d8 <_sbrk_r>:
 80130d8:	b538      	push	{r3, r4, r5, lr}
 80130da:	4d06      	ldr	r5, [pc, #24]	; (80130f4 <_sbrk_r+0x1c>)
 80130dc:	2300      	movs	r3, #0
 80130de:	4604      	mov	r4, r0
 80130e0:	4608      	mov	r0, r1
 80130e2:	602b      	str	r3, [r5, #0]
 80130e4:	f7ed fed2 	bl	8000e8c <_sbrk>
 80130e8:	1c43      	adds	r3, r0, #1
 80130ea:	d102      	bne.n	80130f2 <_sbrk_r+0x1a>
 80130ec:	682b      	ldr	r3, [r5, #0]
 80130ee:	b103      	cbz	r3, 80130f2 <_sbrk_r+0x1a>
 80130f0:	6023      	str	r3, [r4, #0]
 80130f2:	bd38      	pop	{r3, r4, r5, pc}
 80130f4:	20000c84 	.word	0x20000c84

080130f8 <_raise_r>:
 80130f8:	291f      	cmp	r1, #31
 80130fa:	b538      	push	{r3, r4, r5, lr}
 80130fc:	4604      	mov	r4, r0
 80130fe:	460d      	mov	r5, r1
 8013100:	d904      	bls.n	801310c <_raise_r+0x14>
 8013102:	2316      	movs	r3, #22
 8013104:	6003      	str	r3, [r0, #0]
 8013106:	f04f 30ff 	mov.w	r0, #4294967295
 801310a:	bd38      	pop	{r3, r4, r5, pc}
 801310c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801310e:	b112      	cbz	r2, 8013116 <_raise_r+0x1e>
 8013110:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013114:	b94b      	cbnz	r3, 801312a <_raise_r+0x32>
 8013116:	4620      	mov	r0, r4
 8013118:	f000 f830 	bl	801317c <_getpid_r>
 801311c:	462a      	mov	r2, r5
 801311e:	4601      	mov	r1, r0
 8013120:	4620      	mov	r0, r4
 8013122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013126:	f000 b817 	b.w	8013158 <_kill_r>
 801312a:	2b01      	cmp	r3, #1
 801312c:	d00a      	beq.n	8013144 <_raise_r+0x4c>
 801312e:	1c59      	adds	r1, r3, #1
 8013130:	d103      	bne.n	801313a <_raise_r+0x42>
 8013132:	2316      	movs	r3, #22
 8013134:	6003      	str	r3, [r0, #0]
 8013136:	2001      	movs	r0, #1
 8013138:	e7e7      	b.n	801310a <_raise_r+0x12>
 801313a:	2400      	movs	r4, #0
 801313c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013140:	4628      	mov	r0, r5
 8013142:	4798      	blx	r3
 8013144:	2000      	movs	r0, #0
 8013146:	e7e0      	b.n	801310a <_raise_r+0x12>

08013148 <raise>:
 8013148:	4b02      	ldr	r3, [pc, #8]	; (8013154 <raise+0xc>)
 801314a:	4601      	mov	r1, r0
 801314c:	6818      	ldr	r0, [r3, #0]
 801314e:	f7ff bfd3 	b.w	80130f8 <_raise_r>
 8013152:	bf00      	nop
 8013154:	20000100 	.word	0x20000100

08013158 <_kill_r>:
 8013158:	b538      	push	{r3, r4, r5, lr}
 801315a:	4d07      	ldr	r5, [pc, #28]	; (8013178 <_kill_r+0x20>)
 801315c:	2300      	movs	r3, #0
 801315e:	4604      	mov	r4, r0
 8013160:	4608      	mov	r0, r1
 8013162:	4611      	mov	r1, r2
 8013164:	602b      	str	r3, [r5, #0]
 8013166:	f7ed fdfc 	bl	8000d62 <_kill>
 801316a:	1c43      	adds	r3, r0, #1
 801316c:	d102      	bne.n	8013174 <_kill_r+0x1c>
 801316e:	682b      	ldr	r3, [r5, #0]
 8013170:	b103      	cbz	r3, 8013174 <_kill_r+0x1c>
 8013172:	6023      	str	r3, [r4, #0]
 8013174:	bd38      	pop	{r3, r4, r5, pc}
 8013176:	bf00      	nop
 8013178:	20000c84 	.word	0x20000c84

0801317c <_getpid_r>:
 801317c:	f7ed bde9 	b.w	8000d52 <_getpid>

08013180 <__sread>:
 8013180:	b510      	push	{r4, lr}
 8013182:	460c      	mov	r4, r1
 8013184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013188:	f002 f88a 	bl	80152a0 <_read_r>
 801318c:	2800      	cmp	r0, #0
 801318e:	bfab      	itete	ge
 8013190:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013192:	89a3      	ldrhlt	r3, [r4, #12]
 8013194:	181b      	addge	r3, r3, r0
 8013196:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801319a:	bfac      	ite	ge
 801319c:	6563      	strge	r3, [r4, #84]	; 0x54
 801319e:	81a3      	strhlt	r3, [r4, #12]
 80131a0:	bd10      	pop	{r4, pc}

080131a2 <__seofread>:
 80131a2:	2000      	movs	r0, #0
 80131a4:	4770      	bx	lr

080131a6 <__swrite>:
 80131a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131aa:	461f      	mov	r7, r3
 80131ac:	898b      	ldrh	r3, [r1, #12]
 80131ae:	05db      	lsls	r3, r3, #23
 80131b0:	4605      	mov	r5, r0
 80131b2:	460c      	mov	r4, r1
 80131b4:	4616      	mov	r6, r2
 80131b6:	d505      	bpl.n	80131c4 <__swrite+0x1e>
 80131b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131bc:	2302      	movs	r3, #2
 80131be:	2200      	movs	r2, #0
 80131c0:	f001 fb86 	bl	80148d0 <_lseek_r>
 80131c4:	89a3      	ldrh	r3, [r4, #12]
 80131c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80131ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80131ce:	81a3      	strh	r3, [r4, #12]
 80131d0:	4632      	mov	r2, r6
 80131d2:	463b      	mov	r3, r7
 80131d4:	4628      	mov	r0, r5
 80131d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131da:	f001 b8ef 	b.w	80143bc <_write_r>

080131de <__sseek>:
 80131de:	b510      	push	{r4, lr}
 80131e0:	460c      	mov	r4, r1
 80131e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131e6:	f001 fb73 	bl	80148d0 <_lseek_r>
 80131ea:	1c43      	adds	r3, r0, #1
 80131ec:	89a3      	ldrh	r3, [r4, #12]
 80131ee:	bf15      	itete	ne
 80131f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80131f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80131f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80131fa:	81a3      	strheq	r3, [r4, #12]
 80131fc:	bf18      	it	ne
 80131fe:	81a3      	strhne	r3, [r4, #12]
 8013200:	bd10      	pop	{r4, pc}

08013202 <__sclose>:
 8013202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013206:	f001 b9dd 	b.w	80145c4 <_close_r>
	...

0801320c <iso_year_adjust>:
 801320c:	6941      	ldr	r1, [r0, #20]
 801320e:	2900      	cmp	r1, #0
 8013210:	f240 736c 	movw	r3, #1900	; 0x76c
 8013214:	bfa8      	it	ge
 8013216:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 801321a:	18ca      	adds	r2, r1, r3
 801321c:	078b      	lsls	r3, r1, #30
 801321e:	d105      	bne.n	801322c <iso_year_adjust+0x20>
 8013220:	2164      	movs	r1, #100	; 0x64
 8013222:	fb92 f3f1 	sdiv	r3, r2, r1
 8013226:	fb01 2313 	mls	r3, r1, r3, r2
 801322a:	b9db      	cbnz	r3, 8013264 <iso_year_adjust+0x58>
 801322c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8013230:	fb92 f3f1 	sdiv	r3, r2, r1
 8013234:	fb01 2313 	mls	r3, r1, r3, r2
 8013238:	fab3 f383 	clz	r3, r3
 801323c:	095b      	lsrs	r3, r3, #5
 801323e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8013242:	0040      	lsls	r0, r0, #1
 8013244:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8013248:	4418      	add	r0, r3
 801324a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801324e:	4298      	cmp	r0, r3
 8013250:	d03a      	beq.n	80132c8 <iso_year_adjust+0xbc>
 8013252:	dc21      	bgt.n	8013298 <iso_year_adjust+0x8c>
 8013254:	2801      	cmp	r0, #1
 8013256:	dc1a      	bgt.n	801328e <iso_year_adjust+0x82>
 8013258:	2800      	cmp	r0, #0
 801325a:	bfb4      	ite	lt
 801325c:	2000      	movlt	r0, #0
 801325e:	f04f 30ff 	movge.w	r0, #4294967295
 8013262:	4770      	bx	lr
 8013264:	2301      	movs	r3, #1
 8013266:	e7ea      	b.n	801323e <iso_year_adjust+0x32>
 8013268:	2817      	cmp	r0, #23
 801326a:	d813      	bhi.n	8013294 <iso_year_adjust+0x88>
 801326c:	e8df f000 	tbb	[pc, r0]
 8013270:	0c0c0c0c 	.word	0x0c0c0c0c
 8013274:	0c0c1212 	.word	0x0c0c1212
 8013278:	12121212 	.word	0x12121212
 801327c:	12121212 	.word	0x12121212
 8013280:	0c0c1212 	.word	0x0c0c1212
 8013284:	0c0c1212 	.word	0x0c0c1212
 8013288:	f04f 30ff 	mov.w	r0, #4294967295
 801328c:	4770      	bx	lr
 801328e:	380a      	subs	r0, #10
 8013290:	2817      	cmp	r0, #23
 8013292:	d9e9      	bls.n	8013268 <iso_year_adjust+0x5c>
 8013294:	2000      	movs	r0, #0
 8013296:	4770      	bx	lr
 8013298:	f241 63b4 	movw	r3, #5812	; 0x16b4
 801329c:	4298      	cmp	r0, r3
 801329e:	dc06      	bgt.n	80132ae <iso_year_adjust+0xa2>
 80132a0:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80132a4:	4298      	cmp	r0, r3
 80132a6:	bfd4      	ite	le
 80132a8:	2000      	movle	r0, #0
 80132aa:	2001      	movgt	r0, #1
 80132ac:	4770      	bx	lr
 80132ae:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80132b2:	3802      	subs	r0, #2
 80132b4:	2815      	cmp	r0, #21
 80132b6:	d8ed      	bhi.n	8013294 <iso_year_adjust+0x88>
 80132b8:	2301      	movs	r3, #1
 80132ba:	4083      	lsls	r3, r0
 80132bc:	4803      	ldr	r0, [pc, #12]	; (80132cc <iso_year_adjust+0xc0>)
 80132be:	4018      	ands	r0, r3
 80132c0:	3800      	subs	r0, #0
 80132c2:	bf18      	it	ne
 80132c4:	2001      	movne	r0, #1
 80132c6:	4770      	bx	lr
 80132c8:	2001      	movs	r0, #1
 80132ca:	4770      	bx	lr
 80132cc:	002a001f 	.word	0x002a001f

080132d0 <__strftime>:
 80132d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d4:	b091      	sub	sp, #68	; 0x44
 80132d6:	461d      	mov	r5, r3
 80132d8:	2300      	movs	r3, #0
 80132da:	4681      	mov	r9, r0
 80132dc:	4688      	mov	r8, r1
 80132de:	9304      	str	r3, [sp, #16]
 80132e0:	461c      	mov	r4, r3
 80132e2:	7813      	ldrb	r3, [r2, #0]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	f000 84d1 	beq.w	8013c8c <__strftime+0x9bc>
 80132ea:	2b25      	cmp	r3, #37	; 0x25
 80132ec:	d11b      	bne.n	8013326 <__strftime+0x56>
 80132ee:	7857      	ldrb	r7, [r2, #1]
 80132f0:	2f30      	cmp	r7, #48	; 0x30
 80132f2:	d024      	beq.n	801333e <__strftime+0x6e>
 80132f4:	2f2b      	cmp	r7, #43	; 0x2b
 80132f6:	d022      	beq.n	801333e <__strftime+0x6e>
 80132f8:	f102 0b01 	add.w	fp, r2, #1
 80132fc:	2700      	movs	r7, #0
 80132fe:	f89b 3000 	ldrb.w	r3, [fp]
 8013302:	3b31      	subs	r3, #49	; 0x31
 8013304:	2b08      	cmp	r3, #8
 8013306:	d81d      	bhi.n	8013344 <__strftime+0x74>
 8013308:	4658      	mov	r0, fp
 801330a:	220a      	movs	r2, #10
 801330c:	a908      	add	r1, sp, #32
 801330e:	f000 fd6f 	bl	8013df0 <strtoul>
 8013312:	f8dd b020 	ldr.w	fp, [sp, #32]
 8013316:	4606      	mov	r6, r0
 8013318:	f89b 3000 	ldrb.w	r3, [fp]
 801331c:	2b45      	cmp	r3, #69	; 0x45
 801331e:	d113      	bne.n	8013348 <__strftime+0x78>
 8013320:	f10b 0b01 	add.w	fp, fp, #1
 8013324:	e012      	b.n	801334c <__strftime+0x7c>
 8013326:	f108 31ff 	add.w	r1, r8, #4294967295
 801332a:	42a1      	cmp	r1, r4
 801332c:	d802      	bhi.n	8013334 <__strftime+0x64>
 801332e:	2400      	movs	r4, #0
 8013330:	f000 bcb2 	b.w	8013c98 <__strftime+0x9c8>
 8013334:	f809 3004 	strb.w	r3, [r9, r4]
 8013338:	3201      	adds	r2, #1
 801333a:	3401      	adds	r4, #1
 801333c:	e7d1      	b.n	80132e2 <__strftime+0x12>
 801333e:	f102 0b02 	add.w	fp, r2, #2
 8013342:	e7dc      	b.n	80132fe <__strftime+0x2e>
 8013344:	2600      	movs	r6, #0
 8013346:	e7e7      	b.n	8013318 <__strftime+0x48>
 8013348:	2b4f      	cmp	r3, #79	; 0x4f
 801334a:	d0e9      	beq.n	8013320 <__strftime+0x50>
 801334c:	f89b 0000 	ldrb.w	r0, [fp]
 8013350:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8013354:	2b55      	cmp	r3, #85	; 0x55
 8013356:	d8ea      	bhi.n	801332e <__strftime+0x5e>
 8013358:	a201      	add	r2, pc, #4	; (adr r2, 8013360 <__strftime+0x90>)
 801335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801335e:	bf00      	nop
 8013360:	08013c7f 	.word	0x08013c7f
 8013364:	0801332f 	.word	0x0801332f
 8013368:	0801332f 	.word	0x0801332f
 801336c:	0801332f 	.word	0x0801332f
 8013370:	0801332f 	.word	0x0801332f
 8013374:	0801332f 	.word	0x0801332f
 8013378:	0801332f 	.word	0x0801332f
 801337c:	0801332f 	.word	0x0801332f
 8013380:	0801332f 	.word	0x0801332f
 8013384:	0801332f 	.word	0x0801332f
 8013388:	0801332f 	.word	0x0801332f
 801338c:	0801332f 	.word	0x0801332f
 8013390:	0801332f 	.word	0x0801332f
 8013394:	0801332f 	.word	0x0801332f
 8013398:	0801332f 	.word	0x0801332f
 801339c:	0801332f 	.word	0x0801332f
 80133a0:	0801332f 	.word	0x0801332f
 80133a4:	0801332f 	.word	0x0801332f
 80133a8:	0801332f 	.word	0x0801332f
 80133ac:	0801332f 	.word	0x0801332f
 80133b0:	0801332f 	.word	0x0801332f
 80133b4:	0801332f 	.word	0x0801332f
 80133b8:	0801332f 	.word	0x0801332f
 80133bc:	0801332f 	.word	0x0801332f
 80133c0:	0801332f 	.word	0x0801332f
 80133c4:	0801332f 	.word	0x0801332f
 80133c8:	0801332f 	.word	0x0801332f
 80133cc:	0801332f 	.word	0x0801332f
 80133d0:	080134f7 	.word	0x080134f7
 80133d4:	08013551 	.word	0x08013551
 80133d8:	080135c7 	.word	0x080135c7
 80133dc:	08013661 	.word	0x08013661
 80133e0:	0801332f 	.word	0x0801332f
 80133e4:	080136ad 	.word	0x080136ad
 80133e8:	0801378d 	.word	0x0801378d
 80133ec:	0801388f 	.word	0x0801388f
 80133f0:	0801389d 	.word	0x0801389d
 80133f4:	0801332f 	.word	0x0801332f
 80133f8:	0801332f 	.word	0x0801332f
 80133fc:	0801332f 	.word	0x0801332f
 8013400:	080138cd 	.word	0x080138cd
 8013404:	0801332f 	.word	0x0801332f
 8013408:	0801332f 	.word	0x0801332f
 801340c:	080138e5 	.word	0x080138e5
 8013410:	0801332f 	.word	0x0801332f
 8013414:	08013933 	.word	0x08013933
 8013418:	08013a49 	.word	0x08013a49
 801341c:	08013a5b 	.word	0x08013a5b
 8013420:	08013ab3 	.word	0x08013ab3
 8013424:	08013ac3 	.word	0x08013ac3
 8013428:	08013b39 	.word	0x08013b39
 801342c:	080135bf 	.word	0x080135bf
 8013430:	08013b6d 	.word	0x08013b6d
 8013434:	08013c2b 	.word	0x08013c2b
 8013438:	0801332f 	.word	0x0801332f
 801343c:	0801332f 	.word	0x0801332f
 8013440:	0801332f 	.word	0x0801332f
 8013444:	0801332f 	.word	0x0801332f
 8013448:	0801332f 	.word	0x0801332f
 801344c:	0801332f 	.word	0x0801332f
 8013450:	080134b9 	.word	0x080134b9
 8013454:	08013525 	.word	0x08013525
 8013458:	0801357f 	.word	0x0801357f
 801345c:	08013639 	.word	0x08013639
 8013460:	08013639 	.word	0x08013639
 8013464:	0801332f 	.word	0x0801332f
 8013468:	080136f5 	.word	0x080136f5
 801346c:	08013525 	.word	0x08013525
 8013470:	0801332f 	.word	0x0801332f
 8013474:	080138bf 	.word	0x080138bf
 8013478:	0801388f 	.word	0x0801388f
 801347c:	0801389d 	.word	0x0801389d
 8013480:	080138c7 	.word	0x080138c7
 8013484:	080138d1 	.word	0x080138d1
 8013488:	0801332f 	.word	0x0801332f
 801348c:	080138e5 	.word	0x080138e5
 8013490:	0801332f 	.word	0x0801332f
 8013494:	080135af 	.word	0x080135af
 8013498:	08013949 	.word	0x08013949
 801349c:	08013a4d 	.word	0x08013a4d
 80134a0:	08013a95 	.word	0x08013a95
 80134a4:	0801332f 	.word	0x0801332f
 80134a8:	08013b29 	.word	0x08013b29
 80134ac:	080135b7 	.word	0x080135b7
 80134b0:	08013b51 	.word	0x08013b51
 80134b4:	08013bbd 	.word	0x08013bbd
 80134b8:	69ab      	ldr	r3, [r5, #24]
 80134ba:	4aa7      	ldr	r2, [pc, #668]	; (8013758 <__strftime+0x488>)
 80134bc:	3318      	adds	r3, #24
 80134be:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80134c2:	4630      	mov	r0, r6
 80134c4:	f7ec feba 	bl	800023c <strlen>
 80134c8:	3e01      	subs	r6, #1
 80134ca:	4420      	add	r0, r4
 80134cc:	f108 33ff 	add.w	r3, r8, #4294967295
 80134d0:	42a0      	cmp	r0, r4
 80134d2:	d107      	bne.n	80134e4 <__strftime+0x214>
 80134d4:	f89b 3000 	ldrb.w	r3, [fp]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	f000 83d7 	beq.w	8013c8c <__strftime+0x9bc>
 80134de:	f10b 0201 	add.w	r2, fp, #1
 80134e2:	e6fe      	b.n	80132e2 <__strftime+0x12>
 80134e4:	42a3      	cmp	r3, r4
 80134e6:	f67f af22 	bls.w	801332e <__strftime+0x5e>
 80134ea:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80134ee:	f809 2004 	strb.w	r2, [r9, r4]
 80134f2:	3401      	adds	r4, #1
 80134f4:	e7ec      	b.n	80134d0 <__strftime+0x200>
 80134f6:	69aa      	ldr	r2, [r5, #24]
 80134f8:	4b97      	ldr	r3, [pc, #604]	; (8013758 <__strftime+0x488>)
 80134fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80134fe:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8013500:	4630      	mov	r0, r6
 8013502:	f7ec fe9b 	bl	800023c <strlen>
 8013506:	3e01      	subs	r6, #1
 8013508:	4420      	add	r0, r4
 801350a:	f108 33ff 	add.w	r3, r8, #4294967295
 801350e:	42a0      	cmp	r0, r4
 8013510:	d0e0      	beq.n	80134d4 <__strftime+0x204>
 8013512:	42a3      	cmp	r3, r4
 8013514:	f67f af0b 	bls.w	801332e <__strftime+0x5e>
 8013518:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801351c:	f809 2004 	strb.w	r2, [r9, r4]
 8013520:	3401      	adds	r4, #1
 8013522:	e7f4      	b.n	801350e <__strftime+0x23e>
 8013524:	4b8c      	ldr	r3, [pc, #560]	; (8013758 <__strftime+0x488>)
 8013526:	692a      	ldr	r2, [r5, #16]
 8013528:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801352c:	4630      	mov	r0, r6
 801352e:	f7ec fe85 	bl	800023c <strlen>
 8013532:	3e01      	subs	r6, #1
 8013534:	4420      	add	r0, r4
 8013536:	f108 33ff 	add.w	r3, r8, #4294967295
 801353a:	42a0      	cmp	r0, r4
 801353c:	d0ca      	beq.n	80134d4 <__strftime+0x204>
 801353e:	42a3      	cmp	r3, r4
 8013540:	f67f aef5 	bls.w	801332e <__strftime+0x5e>
 8013544:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8013548:	f809 2004 	strb.w	r2, [r9, r4]
 801354c:	3401      	adds	r4, #1
 801354e:	e7f4      	b.n	801353a <__strftime+0x26a>
 8013550:	692b      	ldr	r3, [r5, #16]
 8013552:	4a81      	ldr	r2, [pc, #516]	; (8013758 <__strftime+0x488>)
 8013554:	330c      	adds	r3, #12
 8013556:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801355a:	4630      	mov	r0, r6
 801355c:	f7ec fe6e 	bl	800023c <strlen>
 8013560:	3e01      	subs	r6, #1
 8013562:	4420      	add	r0, r4
 8013564:	f108 33ff 	add.w	r3, r8, #4294967295
 8013568:	42a0      	cmp	r0, r4
 801356a:	d0b3      	beq.n	80134d4 <__strftime+0x204>
 801356c:	42a3      	cmp	r3, r4
 801356e:	f67f aede 	bls.w	801332e <__strftime+0x5e>
 8013572:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8013576:	f809 2004 	strb.w	r2, [r9, r4]
 801357a:	3401      	adds	r4, #1
 801357c:	e7f4      	b.n	8013568 <__strftime+0x298>
 801357e:	4b76      	ldr	r3, [pc, #472]	; (8013758 <__strftime+0x488>)
 8013580:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8013584:	4630      	mov	r0, r6
 8013586:	f7ec fe59 	bl	800023c <strlen>
 801358a:	7833      	ldrb	r3, [r6, #0]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d0a1      	beq.n	80134d4 <__strftime+0x204>
 8013590:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013592:	9300      	str	r3, [sp, #0]
 8013594:	4632      	mov	r2, r6
 8013596:	462b      	mov	r3, r5
 8013598:	eba8 0104 	sub.w	r1, r8, r4
 801359c:	eb09 0004 	add.w	r0, r9, r4
 80135a0:	f7ff fe96 	bl	80132d0 <__strftime>
 80135a4:	2800      	cmp	r0, #0
 80135a6:	f77f aec2 	ble.w	801332e <__strftime+0x5e>
 80135aa:	4404      	add	r4, r0
 80135ac:	e792      	b.n	80134d4 <__strftime+0x204>
 80135ae:	4b6a      	ldr	r3, [pc, #424]	; (8013758 <__strftime+0x488>)
 80135b0:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 80135b4:	e7e6      	b.n	8013584 <__strftime+0x2b4>
 80135b6:	4b68      	ldr	r3, [pc, #416]	; (8013758 <__strftime+0x488>)
 80135b8:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 80135bc:	e7e2      	b.n	8013584 <__strftime+0x2b4>
 80135be:	4b66      	ldr	r3, [pc, #408]	; (8013758 <__strftime+0x488>)
 80135c0:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 80135c4:	e7de      	b.n	8013584 <__strftime+0x2b4>
 80135c6:	4965      	ldr	r1, [pc, #404]	; (801375c <__strftime+0x48c>)
 80135c8:	f8d5 a014 	ldr.w	sl, [r5, #20]
 80135cc:	458a      	cmp	sl, r1
 80135ce:	bfac      	ite	ge
 80135d0:	2100      	movge	r1, #0
 80135d2:	2101      	movlt	r1, #1
 80135d4:	f1ba 0f00 	cmp.w	sl, #0
 80135d8:	db0e      	blt.n	80135f8 <__strftime+0x328>
 80135da:	2064      	movs	r0, #100	; 0x64
 80135dc:	fb9a f0f0 	sdiv	r0, sl, r0
 80135e0:	3013      	adds	r0, #19
 80135e2:	b19f      	cbz	r7, 801360c <__strftime+0x33c>
 80135e4:	2863      	cmp	r0, #99	; 0x63
 80135e6:	dd25      	ble.n	8013634 <__strftime+0x364>
 80135e8:	4a5d      	ldr	r2, [pc, #372]	; (8013760 <__strftime+0x490>)
 80135ea:	4b5e      	ldr	r3, [pc, #376]	; (8013764 <__strftime+0x494>)
 80135ec:	2f2b      	cmp	r7, #43	; 0x2b
 80135ee:	bf14      	ite	ne
 80135f0:	4617      	movne	r7, r2
 80135f2:	461f      	moveq	r7, r3
 80135f4:	4a5c      	ldr	r2, [pc, #368]	; (8013768 <__strftime+0x498>)
 80135f6:	e00b      	b.n	8013610 <__strftime+0x340>
 80135f8:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 80135fc:	9105      	str	r1, [sp, #20]
 80135fe:	f000 ffbf 	bl	8014580 <abs>
 8013602:	2364      	movs	r3, #100	; 0x64
 8013604:	9905      	ldr	r1, [sp, #20]
 8013606:	fb90 f0f3 	sdiv	r0, r0, r3
 801360a:	e7ea      	b.n	80135e2 <__strftime+0x312>
 801360c:	4f54      	ldr	r7, [pc, #336]	; (8013760 <__strftime+0x490>)
 801360e:	4a57      	ldr	r2, [pc, #348]	; (801376c <__strftime+0x49c>)
 8013610:	4b57      	ldr	r3, [pc, #348]	; (8013770 <__strftime+0x4a0>)
 8013612:	9001      	str	r0, [sp, #4]
 8013614:	2e02      	cmp	r6, #2
 8013616:	bf2c      	ite	cs
 8013618:	ebc1 0606 	rsbcs	r6, r1, r6
 801361c:	f1c1 0602 	rsbcc	r6, r1, #2
 8013620:	494e      	ldr	r1, [pc, #312]	; (801375c <__strftime+0x48c>)
 8013622:	9600      	str	r6, [sp, #0]
 8013624:	458a      	cmp	sl, r1
 8013626:	bfa8      	it	ge
 8013628:	463b      	movge	r3, r7
 801362a:	eba8 0104 	sub.w	r1, r8, r4
 801362e:	eb09 0004 	add.w	r0, r9, r4
 8013632:	e02a      	b.n	801368a <__strftime+0x3ba>
 8013634:	4f4a      	ldr	r7, [pc, #296]	; (8013760 <__strftime+0x490>)
 8013636:	e7dd      	b.n	80135f4 <__strftime+0x324>
 8013638:	494e      	ldr	r1, [pc, #312]	; (8013774 <__strftime+0x4a4>)
 801363a:	4a4f      	ldr	r2, [pc, #316]	; (8013778 <__strftime+0x4a8>)
 801363c:	68eb      	ldr	r3, [r5, #12]
 801363e:	2864      	cmp	r0, #100	; 0x64
 8013640:	bf08      	it	eq
 8013642:	460a      	moveq	r2, r1
 8013644:	eba8 0104 	sub.w	r1, r8, r4
 8013648:	eb09 0004 	add.w	r0, r9, r4
 801364c:	f001 fe3a 	bl	80152c4 <sniprintf>
 8013650:	2800      	cmp	r0, #0
 8013652:	f6ff ae6c 	blt.w	801332e <__strftime+0x5e>
 8013656:	4404      	add	r4, r0
 8013658:	45a0      	cmp	r8, r4
 801365a:	f63f af3b 	bhi.w	80134d4 <__strftime+0x204>
 801365e:	e666      	b.n	801332e <__strftime+0x5e>
 8013660:	6968      	ldr	r0, [r5, #20]
 8013662:	692b      	ldr	r3, [r5, #16]
 8013664:	68ef      	ldr	r7, [r5, #12]
 8013666:	2800      	cmp	r0, #0
 8013668:	eb09 0604 	add.w	r6, r9, r4
 801366c:	eba8 0104 	sub.w	r1, r8, r4
 8013670:	f103 0301 	add.w	r3, r3, #1
 8013674:	db0c      	blt.n	8013690 <__strftime+0x3c0>
 8013676:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801367a:	fb90 f2fc 	sdiv	r2, r0, ip
 801367e:	fb0c 0212 	mls	r2, ip, r2, r0
 8013682:	e9cd 7200 	strd	r7, r2, [sp]
 8013686:	4a3d      	ldr	r2, [pc, #244]	; (801377c <__strftime+0x4ac>)
 8013688:	4630      	mov	r0, r6
 801368a:	f001 fe1b 	bl	80152c4 <sniprintf>
 801368e:	e7df      	b.n	8013650 <__strftime+0x380>
 8013690:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8013694:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8013698:	f000 ff72 	bl	8014580 <abs>
 801369c:	2264      	movs	r2, #100	; 0x64
 801369e:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 80136a2:	fb90 fcf2 	sdiv	ip, r0, r2
 80136a6:	fb0c 0212 	mls	r2, ip, r2, r0
 80136aa:	e7ea      	b.n	8013682 <__strftime+0x3b2>
 80136ac:	2325      	movs	r3, #37	; 0x25
 80136ae:	f88d 3020 	strb.w	r3, [sp, #32]
 80136b2:	b187      	cbz	r7, 80136d6 <__strftime+0x406>
 80136b4:	2e06      	cmp	r6, #6
 80136b6:	bf38      	it	cc
 80136b8:	2606      	movcc	r6, #6
 80136ba:	1fb3      	subs	r3, r6, #6
 80136bc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80136c0:	d10c      	bne.n	80136dc <__strftime+0x40c>
 80136c2:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80136c6:	492e      	ldr	r1, [pc, #184]	; (8013780 <__strftime+0x4b0>)
 80136c8:	f001 fe5c 	bl	8015384 <strcpy>
 80136cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80136ce:	9300      	str	r3, [sp, #0]
 80136d0:	aa08      	add	r2, sp, #32
 80136d2:	462b      	mov	r3, r5
 80136d4:	e760      	b.n	8013598 <__strftime+0x2c8>
 80136d6:	272b      	movs	r7, #43	; 0x2b
 80136d8:	260a      	movs	r6, #10
 80136da:	e7ee      	b.n	80136ba <__strftime+0x3ea>
 80136dc:	4a29      	ldr	r2, [pc, #164]	; (8013784 <__strftime+0x4b4>)
 80136de:	211e      	movs	r1, #30
 80136e0:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80136e4:	f001 fdee 	bl	80152c4 <sniprintf>
 80136e8:	2800      	cmp	r0, #0
 80136ea:	ddea      	ble.n	80136c2 <__strftime+0x3f2>
 80136ec:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80136f0:	4418      	add	r0, r3
 80136f2:	e7e8      	b.n	80136c6 <__strftime+0x3f6>
 80136f4:	4628      	mov	r0, r5
 80136f6:	f7ff fd89 	bl	801320c <iso_year_adjust>
 80136fa:	4606      	mov	r6, r0
 80136fc:	6968      	ldr	r0, [r5, #20]
 80136fe:	2800      	cmp	r0, #0
 8013700:	db11      	blt.n	8013726 <__strftime+0x456>
 8013702:	2264      	movs	r2, #100	; 0x64
 8013704:	fb90 f3f2 	sdiv	r3, r0, r2
 8013708:	fb02 0313 	mls	r3, r2, r3, r0
 801370c:	441e      	add	r6, r3
 801370e:	2364      	movs	r3, #100	; 0x64
 8013710:	fb96 f0f3 	sdiv	r0, r6, r3
 8013714:	fb03 6610 	mls	r6, r3, r0, r6
 8013718:	441e      	add	r6, r3
 801371a:	fbb6 f2f3 	udiv	r2, r6, r3
 801371e:	fb03 6312 	mls	r3, r3, r2, r6
 8013722:	4a14      	ldr	r2, [pc, #80]	; (8013774 <__strftime+0x4a4>)
 8013724:	e78e      	b.n	8013644 <__strftime+0x374>
 8013726:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801372a:	f000 ff29 	bl	8014580 <abs>
 801372e:	2364      	movs	r3, #100	; 0x64
 8013730:	2e00      	cmp	r6, #0
 8013732:	fb90 f2f3 	sdiv	r2, r0, r3
 8013736:	fb02 0313 	mls	r3, r2, r3, r0
 801373a:	da05      	bge.n	8013748 <__strftime+0x478>
 801373c:	6969      	ldr	r1, [r5, #20]
 801373e:	4a12      	ldr	r2, [pc, #72]	; (8013788 <__strftime+0x4b8>)
 8013740:	4291      	cmp	r1, r2
 8013742:	bfb8      	it	lt
 8013744:	2601      	movlt	r6, #1
 8013746:	e7e1      	b.n	801370c <__strftime+0x43c>
 8013748:	d0e0      	beq.n	801370c <__strftime+0x43c>
 801374a:	6969      	ldr	r1, [r5, #20]
 801374c:	4a03      	ldr	r2, [pc, #12]	; (801375c <__strftime+0x48c>)
 801374e:	4291      	cmp	r1, r2
 8013750:	bfb8      	it	lt
 8013752:	f04f 36ff 	movlt.w	r6, #4294967295
 8013756:	e7d9      	b.n	801370c <__strftime+0x43c>
 8013758:	0801933c 	.word	0x0801933c
 801375c:	fffff894 	.word	0xfffff894
 8013760:	080194af 	.word	0x080194af
 8013764:	080191c6 	.word	0x080191c6
 8013768:	080191be 	.word	0x080191be
 801376c:	080191b7 	.word	0x080191b7
 8013770:	080195ef 	.word	0x080195ef
 8013774:	080191d6 	.word	0x080191d6
 8013778:	080191c8 	.word	0x080191c8
 801377c:	080191cc 	.word	0x080191cc
 8013780:	080191df 	.word	0x080191df
 8013784:	080191db 	.word	0x080191db
 8013788:	fffff895 	.word	0xfffff895
 801378c:	4bb6      	ldr	r3, [pc, #728]	; (8013a68 <__strftime+0x798>)
 801378e:	6969      	ldr	r1, [r5, #20]
 8013790:	4299      	cmp	r1, r3
 8013792:	bfac      	ite	ge
 8013794:	2300      	movge	r3, #0
 8013796:	2301      	movlt	r3, #1
 8013798:	4628      	mov	r0, r5
 801379a:	e9cd 3105 	strd	r3, r1, [sp, #20]
 801379e:	f7ff fd35 	bl	801320c <iso_year_adjust>
 80137a2:	9906      	ldr	r1, [sp, #24]
 80137a4:	2900      	cmp	r1, #0
 80137a6:	4682      	mov	sl, r0
 80137a8:	db27      	blt.n	80137fa <__strftime+0x52a>
 80137aa:	2264      	movs	r2, #100	; 0x64
 80137ac:	fb91 f2f2 	sdiv	r2, r1, r2
 80137b0:	3213      	adds	r2, #19
 80137b2:	6968      	ldr	r0, [r5, #20]
 80137b4:	2800      	cmp	r0, #0
 80137b6:	db2b      	blt.n	8013810 <__strftime+0x540>
 80137b8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80137bc:	fb90 fefc 	sdiv	lr, r0, ip
 80137c0:	fb0c 001e 	mls	r0, ip, lr, r0
 80137c4:	f1ba 0f00 	cmp.w	sl, #0
 80137c8:	da31      	bge.n	801382e <__strftime+0x55e>
 80137ca:	6969      	ldr	r1, [r5, #20]
 80137cc:	4ba7      	ldr	r3, [pc, #668]	; (8013a6c <__strftime+0x79c>)
 80137ce:	4299      	cmp	r1, r3
 80137d0:	db38      	blt.n	8013844 <__strftime+0x574>
 80137d2:	eb0a 0300 	add.w	r3, sl, r0
 80137d6:	1c59      	adds	r1, r3, #1
 80137d8:	d139      	bne.n	801384e <__strftime+0x57e>
 80137da:	3a01      	subs	r2, #1
 80137dc:	2363      	movs	r3, #99	; 0x63
 80137de:	2064      	movs	r0, #100	; 0x64
 80137e0:	fb00 3202 	mla	r2, r0, r2, r3
 80137e4:	9b05      	ldr	r3, [sp, #20]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d036      	beq.n	8013858 <__strftime+0x588>
 80137ea:	232d      	movs	r3, #45	; 0x2d
 80137ec:	f88d 3020 	strb.w	r3, [sp, #32]
 80137f0:	b106      	cbz	r6, 80137f4 <__strftime+0x524>
 80137f2:	3e01      	subs	r6, #1
 80137f4:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80137f8:	e038      	b.n	801386c <__strftime+0x59c>
 80137fa:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80137fe:	9106      	str	r1, [sp, #24]
 8013800:	f000 febe 	bl	8014580 <abs>
 8013804:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8013808:	9906      	ldr	r1, [sp, #24]
 801380a:	fb90 f2fc 	sdiv	r2, r0, ip
 801380e:	e7d0      	b.n	80137b2 <__strftime+0x4e2>
 8013810:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8013814:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8013818:	f000 feb2 	bl	8014580 <abs>
 801381c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8013820:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013824:	fb90 fefc 	sdiv	lr, r0, ip
 8013828:	fb0e 001c 	mls	r0, lr, ip, r0
 801382c:	e7ca      	b.n	80137c4 <__strftime+0x4f4>
 801382e:	d0d0      	beq.n	80137d2 <__strftime+0x502>
 8013830:	4b8d      	ldr	r3, [pc, #564]	; (8013a68 <__strftime+0x798>)
 8013832:	4299      	cmp	r1, r3
 8013834:	bfb4      	ite	lt
 8013836:	2301      	movlt	r3, #1
 8013838:	2300      	movge	r3, #0
 801383a:	9305      	str	r3, [sp, #20]
 801383c:	bfb8      	it	lt
 801383e:	f04f 3aff 	movlt.w	sl, #4294967295
 8013842:	e7c6      	b.n	80137d2 <__strftime+0x502>
 8013844:	f04f 0a01 	mov.w	sl, #1
 8013848:	f8cd a014 	str.w	sl, [sp, #20]
 801384c:	e7c1      	b.n	80137d2 <__strftime+0x502>
 801384e:	2b64      	cmp	r3, #100	; 0x64
 8013850:	bf04      	itt	eq
 8013852:	3201      	addeq	r2, #1
 8013854:	2300      	moveq	r3, #0
 8013856:	e7c2      	b.n	80137de <__strftime+0x50e>
 8013858:	2f2b      	cmp	r7, #43	; 0x2b
 801385a:	d106      	bne.n	801386a <__strftime+0x59a>
 801385c:	f242 730f 	movw	r3, #9999	; 0x270f
 8013860:	429a      	cmp	r2, r3
 8013862:	d902      	bls.n	801386a <__strftime+0x59a>
 8013864:	f88d 7020 	strb.w	r7, [sp, #32]
 8013868:	e7c2      	b.n	80137f0 <__strftime+0x520>
 801386a:	ab08      	add	r3, sp, #32
 801386c:	2125      	movs	r1, #37	; 0x25
 801386e:	7019      	strb	r1, [r3, #0]
 8013870:	b94f      	cbnz	r7, 8013886 <__strftime+0x5b6>
 8013872:	1c58      	adds	r0, r3, #1
 8013874:	497e      	ldr	r1, [pc, #504]	; (8013a70 <__strftime+0x7a0>)
 8013876:	9205      	str	r2, [sp, #20]
 8013878:	f001 fd84 	bl	8015384 <strcpy>
 801387c:	9a05      	ldr	r2, [sp, #20]
 801387e:	9200      	str	r2, [sp, #0]
 8013880:	4633      	mov	r3, r6
 8013882:	aa08      	add	r2, sp, #32
 8013884:	e059      	b.n	801393a <__strftime+0x66a>
 8013886:	2130      	movs	r1, #48	; 0x30
 8013888:	1c98      	adds	r0, r3, #2
 801388a:	7059      	strb	r1, [r3, #1]
 801388c:	e7f2      	b.n	8013874 <__strftime+0x5a4>
 801388e:	4979      	ldr	r1, [pc, #484]	; (8013a74 <__strftime+0x7a4>)
 8013890:	4a79      	ldr	r2, [pc, #484]	; (8013a78 <__strftime+0x7a8>)
 8013892:	68ab      	ldr	r3, [r5, #8]
 8013894:	286b      	cmp	r0, #107	; 0x6b
 8013896:	bf08      	it	eq
 8013898:	460a      	moveq	r2, r1
 801389a:	e6d3      	b.n	8013644 <__strftime+0x374>
 801389c:	68ab      	ldr	r3, [r5, #8]
 801389e:	b163      	cbz	r3, 80138ba <__strftime+0x5ea>
 80138a0:	2b0c      	cmp	r3, #12
 80138a2:	d004      	beq.n	80138ae <__strftime+0x5de>
 80138a4:	210c      	movs	r1, #12
 80138a6:	fb93 f2f1 	sdiv	r2, r3, r1
 80138aa:	fb01 3312 	mls	r3, r1, r2, r3
 80138ae:	4972      	ldr	r1, [pc, #456]	; (8013a78 <__strftime+0x7a8>)
 80138b0:	4a70      	ldr	r2, [pc, #448]	; (8013a74 <__strftime+0x7a4>)
 80138b2:	2849      	cmp	r0, #73	; 0x49
 80138b4:	bf08      	it	eq
 80138b6:	460a      	moveq	r2, r1
 80138b8:	e6c4      	b.n	8013644 <__strftime+0x374>
 80138ba:	230c      	movs	r3, #12
 80138bc:	e7f7      	b.n	80138ae <__strftime+0x5de>
 80138be:	69eb      	ldr	r3, [r5, #28]
 80138c0:	4a6e      	ldr	r2, [pc, #440]	; (8013a7c <__strftime+0x7ac>)
 80138c2:	3301      	adds	r3, #1
 80138c4:	e6be      	b.n	8013644 <__strftime+0x374>
 80138c6:	692b      	ldr	r3, [r5, #16]
 80138c8:	3301      	adds	r3, #1
 80138ca:	e72a      	b.n	8013722 <__strftime+0x452>
 80138cc:	686b      	ldr	r3, [r5, #4]
 80138ce:	e728      	b.n	8013722 <__strftime+0x452>
 80138d0:	f108 33ff 	add.w	r3, r8, #4294967295
 80138d4:	42a3      	cmp	r3, r4
 80138d6:	f67f ad2a 	bls.w	801332e <__strftime+0x5e>
 80138da:	230a      	movs	r3, #10
 80138dc:	f809 3004 	strb.w	r3, [r9, r4]
 80138e0:	3401      	adds	r4, #1
 80138e2:	e5f7      	b.n	80134d4 <__strftime+0x204>
 80138e4:	68ab      	ldr	r3, [r5, #8]
 80138e6:	2b0b      	cmp	r3, #11
 80138e8:	bfcc      	ite	gt
 80138ea:	22a4      	movgt	r2, #164	; 0xa4
 80138ec:	22a0      	movle	r2, #160	; 0xa0
 80138ee:	4b64      	ldr	r3, [pc, #400]	; (8013a80 <__strftime+0x7b0>)
 80138f0:	4413      	add	r3, r2
 80138f2:	685e      	ldr	r6, [r3, #4]
 80138f4:	4630      	mov	r0, r6
 80138f6:	f7ec fca1 	bl	800023c <strlen>
 80138fa:	1e72      	subs	r2, r6, #1
 80138fc:	4420      	add	r0, r4
 80138fe:	f108 36ff 	add.w	r6, r8, #4294967295
 8013902:	42a0      	cmp	r0, r4
 8013904:	f43f ade6 	beq.w	80134d4 <__strftime+0x204>
 8013908:	42a6      	cmp	r6, r4
 801390a:	f67f ad10 	bls.w	801332e <__strftime+0x5e>
 801390e:	f89b 1000 	ldrb.w	r1, [fp]
 8013912:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013916:	2950      	cmp	r1, #80	; 0x50
 8013918:	d107      	bne.n	801392a <__strftime+0x65a>
 801391a:	495a      	ldr	r1, [pc, #360]	; (8013a84 <__strftime+0x7b4>)
 801391c:	5cc9      	ldrb	r1, [r1, r3]
 801391e:	f001 0103 	and.w	r1, r1, #3
 8013922:	2901      	cmp	r1, #1
 8013924:	bf08      	it	eq
 8013926:	3320      	addeq	r3, #32
 8013928:	b2db      	uxtb	r3, r3
 801392a:	f809 3004 	strb.w	r3, [r9, r4]
 801392e:	3401      	adds	r4, #1
 8013930:	e7e7      	b.n	8013902 <__strftime+0x632>
 8013932:	686b      	ldr	r3, [r5, #4]
 8013934:	9300      	str	r3, [sp, #0]
 8013936:	4a54      	ldr	r2, [pc, #336]	; (8013a88 <__strftime+0x7b8>)
 8013938:	68ab      	ldr	r3, [r5, #8]
 801393a:	eba8 0104 	sub.w	r1, r8, r4
 801393e:	eb09 0004 	add.w	r0, r9, r4
 8013942:	f001 fcbf 	bl	80152c4 <sniprintf>
 8013946:	e683      	b.n	8013650 <__strftime+0x380>
 8013948:	6a2b      	ldr	r3, [r5, #32]
 801394a:	2b00      	cmp	r3, #0
 801394c:	db79      	blt.n	8013a42 <__strftime+0x772>
 801394e:	f000 fb1b 	bl	8013f88 <__tz_lock>
 8013952:	9b04      	ldr	r3, [sp, #16]
 8013954:	b90b      	cbnz	r3, 801395a <__strftime+0x68a>
 8013956:	f000 fb23 	bl	8013fa0 <_tzset_unlocked>
 801395a:	f000 fef1 	bl	8014740 <__gettzinfo>
 801395e:	6a2b      	ldr	r3, [r5, #32]
 8013960:	2b00      	cmp	r3, #0
 8013962:	bfcc      	ite	gt
 8013964:	2350      	movgt	r3, #80	; 0x50
 8013966:	2328      	movle	r3, #40	; 0x28
 8013968:	58c3      	ldr	r3, [r0, r3]
 801396a:	f1c3 0a00 	rsb	sl, r3, #0
 801396e:	f000 fb11 	bl	8013f94 <__tz_unlock>
 8013972:	2301      	movs	r3, #1
 8013974:	9304      	str	r3, [sp, #16]
 8013976:	f8d5 c014 	ldr.w	ip, [r5, #20]
 801397a:	4662      	mov	r2, ip
 801397c:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8013980:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8013984:	9602      	str	r6, [sp, #8]
 8013986:	f143 36ff 	adc.w	r6, r3, #4294967295
 801398a:	9603      	str	r6, [sp, #12]
 801398c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013990:	2e00      	cmp	r6, #0
 8013992:	f177 0600 	sbcs.w	r6, r7, #0
 8013996:	eba8 0104 	sub.w	r1, r8, r4
 801399a:	eb09 0004 	add.w	r0, r9, r4
 801399e:	da05      	bge.n	80139ac <__strftime+0x6dc>
 80139a0:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 80139a4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80139a8:	9602      	str	r6, [sp, #8]
 80139aa:	9303      	str	r3, [sp, #12]
 80139ac:	9b02      	ldr	r3, [sp, #8]
 80139ae:	089e      	lsrs	r6, r3, #2
 80139b0:	9b03      	ldr	r3, [sp, #12]
 80139b2:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 80139b6:	f10c 32ff 	add.w	r2, ip, #4294967295
 80139ba:	109f      	asrs	r7, r3, #2
 80139bc:	2364      	movs	r3, #100	; 0x64
 80139be:	fb92 f3f3 	sdiv	r3, r2, r3
 80139c2:	1af6      	subs	r6, r6, r3
 80139c4:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 80139c8:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80139cc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80139d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80139d4:	18f6      	adds	r6, r6, r3
 80139d6:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80139da:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80139de:	f240 136d 	movw	r3, #365	; 0x16d
 80139e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80139e6:	69eb      	ldr	r3, [r5, #28]
 80139e8:	eb16 060c 	adds.w	r6, r6, ip
 80139ec:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 80139f0:	18f6      	adds	r6, r6, r3
 80139f2:	f04f 0c18 	mov.w	ip, #24
 80139f6:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80139fa:	fba6 230c 	umull	r2, r3, r6, ip
 80139fe:	68ae      	ldr	r6, [r5, #8]
 8013a00:	fb0c 3307 	mla	r3, ip, r7, r3
 8013a04:	1992      	adds	r2, r2, r6
 8013a06:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8013a0a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8013a0e:	fba2 670c 	umull	r6, r7, r2, ip
 8013a12:	fb0c 7703 	mla	r7, ip, r3, r7
 8013a16:	686b      	ldr	r3, [r5, #4]
 8013a18:	18f6      	adds	r6, r6, r3
 8013a1a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8013a1e:	fba6 230c 	umull	r2, r3, r6, ip
 8013a22:	682e      	ldr	r6, [r5, #0]
 8013a24:	fb0c 3307 	mla	r3, ip, r7, r3
 8013a28:	1992      	adds	r2, r2, r6
 8013a2a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8013a2e:	ebb2 020a 	subs.w	r2, r2, sl
 8013a32:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8013a36:	e9cd 2300 	strd	r2, r3, [sp]
 8013a3a:	4a14      	ldr	r2, [pc, #80]	; (8013a8c <__strftime+0x7bc>)
 8013a3c:	f001 fc42 	bl	80152c4 <sniprintf>
 8013a40:	e606      	b.n	8013650 <__strftime+0x380>
 8013a42:	f04f 0a00 	mov.w	sl, #0
 8013a46:	e796      	b.n	8013976 <__strftime+0x6a6>
 8013a48:	682b      	ldr	r3, [r5, #0]
 8013a4a:	e66a      	b.n	8013722 <__strftime+0x452>
 8013a4c:	f108 33ff 	add.w	r3, r8, #4294967295
 8013a50:	42a3      	cmp	r3, r4
 8013a52:	f67f ac6c 	bls.w	801332e <__strftime+0x5e>
 8013a56:	2309      	movs	r3, #9
 8013a58:	e740      	b.n	80138dc <__strftime+0x60c>
 8013a5a:	682b      	ldr	r3, [r5, #0]
 8013a5c:	9301      	str	r3, [sp, #4]
 8013a5e:	686b      	ldr	r3, [r5, #4]
 8013a60:	9300      	str	r3, [sp, #0]
 8013a62:	4a0b      	ldr	r2, [pc, #44]	; (8013a90 <__strftime+0x7c0>)
 8013a64:	68ab      	ldr	r3, [r5, #8]
 8013a66:	e5e0      	b.n	801362a <__strftime+0x35a>
 8013a68:	fffff894 	.word	0xfffff894
 8013a6c:	fffff895 	.word	0xfffff895
 8013a70:	080191e7 	.word	0x080191e7
 8013a74:	080191c8 	.word	0x080191c8
 8013a78:	080191d6 	.word	0x080191d6
 8013a7c:	080191eb 	.word	0x080191eb
 8013a80:	0801933c 	.word	0x0801933c
 8013a84:	080194b1 	.word	0x080194b1
 8013a88:	080191fa 	.word	0x080191fa
 8013a8c:	080191f0 	.word	0x080191f0
 8013a90:	080191f5 	.word	0x080191f5
 8013a94:	f108 33ff 	add.w	r3, r8, #4294967295
 8013a98:	42a3      	cmp	r3, r4
 8013a9a:	f67f ac48 	bls.w	801332e <__strftime+0x5e>
 8013a9e:	69ab      	ldr	r3, [r5, #24]
 8013aa0:	eb09 0204 	add.w	r2, r9, r4
 8013aa4:	3401      	adds	r4, #1
 8013aa6:	b913      	cbnz	r3, 8013aae <__strftime+0x7de>
 8013aa8:	2337      	movs	r3, #55	; 0x37
 8013aaa:	7013      	strb	r3, [r2, #0]
 8013aac:	e512      	b.n	80134d4 <__strftime+0x204>
 8013aae:	3330      	adds	r3, #48	; 0x30
 8013ab0:	e7fb      	b.n	8013aaa <__strftime+0x7da>
 8013ab2:	69eb      	ldr	r3, [r5, #28]
 8013ab4:	69aa      	ldr	r2, [r5, #24]
 8013ab6:	3307      	adds	r3, #7
 8013ab8:	1a9b      	subs	r3, r3, r2
 8013aba:	2207      	movs	r2, #7
 8013abc:	fb93 f3f2 	sdiv	r3, r3, r2
 8013ac0:	e62f      	b.n	8013722 <__strftime+0x452>
 8013ac2:	4628      	mov	r0, r5
 8013ac4:	f7ff fba2 	bl	801320c <iso_year_adjust>
 8013ac8:	69aa      	ldr	r2, [r5, #24]
 8013aca:	b132      	cbz	r2, 8013ada <__strftime+0x80a>
 8013acc:	3a01      	subs	r2, #1
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	dc28      	bgt.n	8013b24 <__strftime+0x854>
 8013ad2:	69eb      	ldr	r3, [r5, #28]
 8013ad4:	d103      	bne.n	8013ade <__strftime+0x80e>
 8013ad6:	330a      	adds	r3, #10
 8013ad8:	e7ee      	b.n	8013ab8 <__strftime+0x7e8>
 8013ada:	2206      	movs	r2, #6
 8013adc:	e7f7      	b.n	8013ace <__strftime+0x7fe>
 8013ade:	6968      	ldr	r0, [r5, #20]
 8013ae0:	2800      	cmp	r0, #0
 8013ae2:	eba2 0303 	sub.w	r3, r2, r3
 8013ae6:	f240 726b 	movw	r2, #1899	; 0x76b
 8013aea:	bfa8      	it	ge
 8013aec:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8013af0:	4410      	add	r0, r2
 8013af2:	0782      	lsls	r2, r0, #30
 8013af4:	d105      	bne.n	8013b02 <__strftime+0x832>
 8013af6:	2264      	movs	r2, #100	; 0x64
 8013af8:	fb90 f1f2 	sdiv	r1, r0, r2
 8013afc:	fb02 0111 	mls	r1, r2, r1, r0
 8013b00:	b971      	cbnz	r1, 8013b20 <__strftime+0x850>
 8013b02:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8013b06:	fb90 f2f1 	sdiv	r2, r0, r1
 8013b0a:	fb01 0212 	mls	r2, r1, r2, r0
 8013b0e:	fab2 f282 	clz	r2, r2
 8013b12:	0952      	lsrs	r2, r2, #5
 8013b14:	1a9a      	subs	r2, r3, r2
 8013b16:	2a05      	cmp	r2, #5
 8013b18:	bfb4      	ite	lt
 8013b1a:	2335      	movlt	r3, #53	; 0x35
 8013b1c:	2334      	movge	r3, #52	; 0x34
 8013b1e:	e600      	b.n	8013722 <__strftime+0x452>
 8013b20:	2201      	movs	r2, #1
 8013b22:	e7f7      	b.n	8013b14 <__strftime+0x844>
 8013b24:	2301      	movs	r3, #1
 8013b26:	e5fc      	b.n	8013722 <__strftime+0x452>
 8013b28:	f108 33ff 	add.w	r3, r8, #4294967295
 8013b2c:	42a3      	cmp	r3, r4
 8013b2e:	f67f abfe 	bls.w	801332e <__strftime+0x5e>
 8013b32:	69ab      	ldr	r3, [r5, #24]
 8013b34:	3330      	adds	r3, #48	; 0x30
 8013b36:	e6d1      	b.n	80138dc <__strftime+0x60c>
 8013b38:	69ab      	ldr	r3, [r5, #24]
 8013b3a:	b13b      	cbz	r3, 8013b4c <__strftime+0x87c>
 8013b3c:	3b01      	subs	r3, #1
 8013b3e:	69ea      	ldr	r2, [r5, #28]
 8013b40:	3207      	adds	r2, #7
 8013b42:	1ad2      	subs	r2, r2, r3
 8013b44:	2307      	movs	r3, #7
 8013b46:	fb92 f3f3 	sdiv	r3, r2, r3
 8013b4a:	e5ea      	b.n	8013722 <__strftime+0x452>
 8013b4c:	2306      	movs	r3, #6
 8013b4e:	e7f6      	b.n	8013b3e <__strftime+0x86e>
 8013b50:	6968      	ldr	r0, [r5, #20]
 8013b52:	2800      	cmp	r0, #0
 8013b54:	db05      	blt.n	8013b62 <__strftime+0x892>
 8013b56:	2264      	movs	r2, #100	; 0x64
 8013b58:	fb90 f3f2 	sdiv	r3, r0, r2
 8013b5c:	fb03 0312 	mls	r3, r3, r2, r0
 8013b60:	e5df      	b.n	8013722 <__strftime+0x452>
 8013b62:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8013b66:	f000 fd0b 	bl	8014580 <abs>
 8013b6a:	e7f4      	b.n	8013b56 <__strftime+0x886>
 8013b6c:	696b      	ldr	r3, [r5, #20]
 8013b6e:	4a4c      	ldr	r2, [pc, #304]	; (8013ca0 <__strftime+0x9d0>)
 8013b70:	4293      	cmp	r3, r2
 8013b72:	da09      	bge.n	8013b88 <__strftime+0x8b8>
 8013b74:	212d      	movs	r1, #45	; 0x2d
 8013b76:	f88d 1020 	strb.w	r1, [sp, #32]
 8013b7a:	eba2 0a03 	sub.w	sl, r2, r3
 8013b7e:	b106      	cbz	r6, 8013b82 <__strftime+0x8b2>
 8013b80:	3e01      	subs	r6, #1
 8013b82:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8013b86:	e00b      	b.n	8013ba0 <__strftime+0x8d0>
 8013b88:	2f2b      	cmp	r7, #43	; 0x2b
 8013b8a:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8013b8e:	d106      	bne.n	8013b9e <__strftime+0x8ce>
 8013b90:	f242 730f 	movw	r3, #9999	; 0x270f
 8013b94:	459a      	cmp	sl, r3
 8013b96:	d902      	bls.n	8013b9e <__strftime+0x8ce>
 8013b98:	f88d 7020 	strb.w	r7, [sp, #32]
 8013b9c:	e7ef      	b.n	8013b7e <__strftime+0x8ae>
 8013b9e:	ab08      	add	r3, sp, #32
 8013ba0:	2225      	movs	r2, #37	; 0x25
 8013ba2:	701a      	strb	r2, [r3, #0]
 8013ba4:	b937      	cbnz	r7, 8013bb4 <__strftime+0x8e4>
 8013ba6:	1c58      	adds	r0, r3, #1
 8013ba8:	493e      	ldr	r1, [pc, #248]	; (8013ca4 <__strftime+0x9d4>)
 8013baa:	f001 fbeb 	bl	8015384 <strcpy>
 8013bae:	f8cd a000 	str.w	sl, [sp]
 8013bb2:	e665      	b.n	8013880 <__strftime+0x5b0>
 8013bb4:	2230      	movs	r2, #48	; 0x30
 8013bb6:	1c98      	adds	r0, r3, #2
 8013bb8:	705a      	strb	r2, [r3, #1]
 8013bba:	e7f5      	b.n	8013ba8 <__strftime+0x8d8>
 8013bbc:	6a2b      	ldr	r3, [r5, #32]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	f6ff ac88 	blt.w	80134d4 <__strftime+0x204>
 8013bc4:	f000 f9e0 	bl	8013f88 <__tz_lock>
 8013bc8:	9b04      	ldr	r3, [sp, #16]
 8013bca:	b90b      	cbnz	r3, 8013bd0 <__strftime+0x900>
 8013bcc:	f000 f9e8 	bl	8013fa0 <_tzset_unlocked>
 8013bd0:	f000 fdb6 	bl	8014740 <__gettzinfo>
 8013bd4:	6a2b      	ldr	r3, [r5, #32]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	bfcc      	ite	gt
 8013bda:	2350      	movgt	r3, #80	; 0x50
 8013bdc:	2328      	movle	r3, #40	; 0x28
 8013bde:	eb09 0704 	add.w	r7, r9, r4
 8013be2:	58c6      	ldr	r6, [r0, r3]
 8013be4:	f000 f9d6 	bl	8013f94 <__tz_unlock>
 8013be8:	4276      	negs	r6, r6
 8013bea:	233c      	movs	r3, #60	; 0x3c
 8013bec:	fb96 f0f3 	sdiv	r0, r6, r3
 8013bf0:	f000 fe6a 	bl	80148c8 <labs>
 8013bf4:	233c      	movs	r3, #60	; 0x3c
 8013bf6:	eba8 0a04 	sub.w	sl, r8, r4
 8013bfa:	fb90 f2f3 	sdiv	r2, r0, r3
 8013bfe:	fb02 0013 	mls	r0, r2, r3, r0
 8013c02:	9000      	str	r0, [sp, #0]
 8013c04:	4a28      	ldr	r2, [pc, #160]	; (8013ca8 <__strftime+0x9d8>)
 8013c06:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8013c0a:	4651      	mov	r1, sl
 8013c0c:	4638      	mov	r0, r7
 8013c0e:	fb96 f3f3 	sdiv	r3, r6, r3
 8013c12:	f001 fb57 	bl	80152c4 <sniprintf>
 8013c16:	2800      	cmp	r0, #0
 8013c18:	f6ff ab89 	blt.w	801332e <__strftime+0x5e>
 8013c1c:	4404      	add	r4, r0
 8013c1e:	45a0      	cmp	r8, r4
 8013c20:	f67f ab85 	bls.w	801332e <__strftime+0x5e>
 8013c24:	2301      	movs	r3, #1
 8013c26:	9304      	str	r3, [sp, #16]
 8013c28:	e454      	b.n	80134d4 <__strftime+0x204>
 8013c2a:	6a2b      	ldr	r3, [r5, #32]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	f6ff ac51 	blt.w	80134d4 <__strftime+0x204>
 8013c32:	f000 f9a9 	bl	8013f88 <__tz_lock>
 8013c36:	9b04      	ldr	r3, [sp, #16]
 8013c38:	b90b      	cbnz	r3, 8013c3e <__strftime+0x96e>
 8013c3a:	f000 f9b1 	bl	8013fa0 <_tzset_unlocked>
 8013c3e:	6a2b      	ldr	r3, [r5, #32]
 8013c40:	4a1a      	ldr	r2, [pc, #104]	; (8013cac <__strftime+0x9dc>)
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	bfd4      	ite	le
 8013c46:	2300      	movle	r3, #0
 8013c48:	2301      	movgt	r3, #1
 8013c4a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8013c4e:	4630      	mov	r0, r6
 8013c50:	f7ec faf4 	bl	800023c <strlen>
 8013c54:	3e01      	subs	r6, #1
 8013c56:	4420      	add	r0, r4
 8013c58:	f108 33ff 	add.w	r3, r8, #4294967295
 8013c5c:	42a0      	cmp	r0, r4
 8013c5e:	d102      	bne.n	8013c66 <__strftime+0x996>
 8013c60:	f000 f998 	bl	8013f94 <__tz_unlock>
 8013c64:	e7de      	b.n	8013c24 <__strftime+0x954>
 8013c66:	42a3      	cmp	r3, r4
 8013c68:	d905      	bls.n	8013c76 <__strftime+0x9a6>
 8013c6a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8013c6e:	f809 2004 	strb.w	r2, [r9, r4]
 8013c72:	3401      	adds	r4, #1
 8013c74:	e7f2      	b.n	8013c5c <__strftime+0x98c>
 8013c76:	f000 f98d 	bl	8013f94 <__tz_unlock>
 8013c7a:	f7ff bb58 	b.w	801332e <__strftime+0x5e>
 8013c7e:	f108 33ff 	add.w	r3, r8, #4294967295
 8013c82:	42a3      	cmp	r3, r4
 8013c84:	f67f ab53 	bls.w	801332e <__strftime+0x5e>
 8013c88:	2325      	movs	r3, #37	; 0x25
 8013c8a:	e627      	b.n	80138dc <__strftime+0x60c>
 8013c8c:	f1b8 0f00 	cmp.w	r8, #0
 8013c90:	d002      	beq.n	8013c98 <__strftime+0x9c8>
 8013c92:	2300      	movs	r3, #0
 8013c94:	f809 3004 	strb.w	r3, [r9, r4]
 8013c98:	4620      	mov	r0, r4
 8013c9a:	b011      	add	sp, #68	; 0x44
 8013c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ca0:	fffff894 	.word	0xfffff894
 8013ca4:	080191e7 	.word	0x080191e7
 8013ca8:	08019204 	.word	0x08019204
 8013cac:	20000164 	.word	0x20000164

08013cb0 <strftime>:
 8013cb0:	b513      	push	{r0, r1, r4, lr}
 8013cb2:	4c03      	ldr	r4, [pc, #12]	; (8013cc0 <strftime+0x10>)
 8013cb4:	9400      	str	r4, [sp, #0]
 8013cb6:	f7ff fb0b 	bl	80132d0 <__strftime>
 8013cba:	b002      	add	sp, #8
 8013cbc:	bd10      	pop	{r4, pc}
 8013cbe:	bf00      	nop
 8013cc0:	200001c8 	.word	0x200001c8

08013cc4 <strstr>:
 8013cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cc6:	780c      	ldrb	r4, [r1, #0]
 8013cc8:	b164      	cbz	r4, 8013ce4 <strstr+0x20>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	781a      	ldrb	r2, [r3, #0]
 8013cce:	4618      	mov	r0, r3
 8013cd0:	1c5e      	adds	r6, r3, #1
 8013cd2:	b90a      	cbnz	r2, 8013cd8 <strstr+0x14>
 8013cd4:	4610      	mov	r0, r2
 8013cd6:	e005      	b.n	8013ce4 <strstr+0x20>
 8013cd8:	4294      	cmp	r4, r2
 8013cda:	d108      	bne.n	8013cee <strstr+0x2a>
 8013cdc:	460d      	mov	r5, r1
 8013cde:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8013ce2:	b902      	cbnz	r2, 8013ce6 <strstr+0x22>
 8013ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ce6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8013cea:	4297      	cmp	r7, r2
 8013cec:	d0f7      	beq.n	8013cde <strstr+0x1a>
 8013cee:	4633      	mov	r3, r6
 8013cf0:	e7ec      	b.n	8013ccc <strstr+0x8>
	...

08013cf4 <_strtoul_l.isra.0>:
 8013cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013cf8:	4e3b      	ldr	r6, [pc, #236]	; (8013de8 <_strtoul_l.isra.0+0xf4>)
 8013cfa:	4686      	mov	lr, r0
 8013cfc:	468c      	mov	ip, r1
 8013cfe:	4660      	mov	r0, ip
 8013d00:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013d04:	5da5      	ldrb	r5, [r4, r6]
 8013d06:	f015 0508 	ands.w	r5, r5, #8
 8013d0a:	d1f8      	bne.n	8013cfe <_strtoul_l.isra.0+0xa>
 8013d0c:	2c2d      	cmp	r4, #45	; 0x2d
 8013d0e:	d134      	bne.n	8013d7a <_strtoul_l.isra.0+0x86>
 8013d10:	f89c 4000 	ldrb.w	r4, [ip]
 8013d14:	f04f 0801 	mov.w	r8, #1
 8013d18:	f100 0c02 	add.w	ip, r0, #2
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d05e      	beq.n	8013dde <_strtoul_l.isra.0+0xea>
 8013d20:	2b10      	cmp	r3, #16
 8013d22:	d10c      	bne.n	8013d3e <_strtoul_l.isra.0+0x4a>
 8013d24:	2c30      	cmp	r4, #48	; 0x30
 8013d26:	d10a      	bne.n	8013d3e <_strtoul_l.isra.0+0x4a>
 8013d28:	f89c 0000 	ldrb.w	r0, [ip]
 8013d2c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013d30:	2858      	cmp	r0, #88	; 0x58
 8013d32:	d14f      	bne.n	8013dd4 <_strtoul_l.isra.0+0xe0>
 8013d34:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8013d38:	2310      	movs	r3, #16
 8013d3a:	f10c 0c02 	add.w	ip, ip, #2
 8013d3e:	f04f 37ff 	mov.w	r7, #4294967295
 8013d42:	2500      	movs	r5, #0
 8013d44:	fbb7 f7f3 	udiv	r7, r7, r3
 8013d48:	fb03 f907 	mul.w	r9, r3, r7
 8013d4c:	ea6f 0909 	mvn.w	r9, r9
 8013d50:	4628      	mov	r0, r5
 8013d52:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8013d56:	2e09      	cmp	r6, #9
 8013d58:	d818      	bhi.n	8013d8c <_strtoul_l.isra.0+0x98>
 8013d5a:	4634      	mov	r4, r6
 8013d5c:	42a3      	cmp	r3, r4
 8013d5e:	dd24      	ble.n	8013daa <_strtoul_l.isra.0+0xb6>
 8013d60:	2d00      	cmp	r5, #0
 8013d62:	db1f      	blt.n	8013da4 <_strtoul_l.isra.0+0xb0>
 8013d64:	4287      	cmp	r7, r0
 8013d66:	d31d      	bcc.n	8013da4 <_strtoul_l.isra.0+0xb0>
 8013d68:	d101      	bne.n	8013d6e <_strtoul_l.isra.0+0x7a>
 8013d6a:	45a1      	cmp	r9, r4
 8013d6c:	db1a      	blt.n	8013da4 <_strtoul_l.isra.0+0xb0>
 8013d6e:	fb00 4003 	mla	r0, r0, r3, r4
 8013d72:	2501      	movs	r5, #1
 8013d74:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013d78:	e7eb      	b.n	8013d52 <_strtoul_l.isra.0+0x5e>
 8013d7a:	2c2b      	cmp	r4, #43	; 0x2b
 8013d7c:	bf08      	it	eq
 8013d7e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8013d82:	46a8      	mov	r8, r5
 8013d84:	bf08      	it	eq
 8013d86:	f100 0c02 	addeq.w	ip, r0, #2
 8013d8a:	e7c7      	b.n	8013d1c <_strtoul_l.isra.0+0x28>
 8013d8c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8013d90:	2e19      	cmp	r6, #25
 8013d92:	d801      	bhi.n	8013d98 <_strtoul_l.isra.0+0xa4>
 8013d94:	3c37      	subs	r4, #55	; 0x37
 8013d96:	e7e1      	b.n	8013d5c <_strtoul_l.isra.0+0x68>
 8013d98:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8013d9c:	2e19      	cmp	r6, #25
 8013d9e:	d804      	bhi.n	8013daa <_strtoul_l.isra.0+0xb6>
 8013da0:	3c57      	subs	r4, #87	; 0x57
 8013da2:	e7db      	b.n	8013d5c <_strtoul_l.isra.0+0x68>
 8013da4:	f04f 35ff 	mov.w	r5, #4294967295
 8013da8:	e7e4      	b.n	8013d74 <_strtoul_l.isra.0+0x80>
 8013daa:	2d00      	cmp	r5, #0
 8013dac:	da07      	bge.n	8013dbe <_strtoul_l.isra.0+0xca>
 8013dae:	2322      	movs	r3, #34	; 0x22
 8013db0:	f8ce 3000 	str.w	r3, [lr]
 8013db4:	f04f 30ff 	mov.w	r0, #4294967295
 8013db8:	b942      	cbnz	r2, 8013dcc <_strtoul_l.isra.0+0xd8>
 8013dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013dbe:	f1b8 0f00 	cmp.w	r8, #0
 8013dc2:	d000      	beq.n	8013dc6 <_strtoul_l.isra.0+0xd2>
 8013dc4:	4240      	negs	r0, r0
 8013dc6:	2a00      	cmp	r2, #0
 8013dc8:	d0f7      	beq.n	8013dba <_strtoul_l.isra.0+0xc6>
 8013dca:	b10d      	cbz	r5, 8013dd0 <_strtoul_l.isra.0+0xdc>
 8013dcc:	f10c 31ff 	add.w	r1, ip, #4294967295
 8013dd0:	6011      	str	r1, [r2, #0]
 8013dd2:	e7f2      	b.n	8013dba <_strtoul_l.isra.0+0xc6>
 8013dd4:	2430      	movs	r4, #48	; 0x30
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d1b1      	bne.n	8013d3e <_strtoul_l.isra.0+0x4a>
 8013dda:	2308      	movs	r3, #8
 8013ddc:	e7af      	b.n	8013d3e <_strtoul_l.isra.0+0x4a>
 8013dde:	2c30      	cmp	r4, #48	; 0x30
 8013de0:	d0a2      	beq.n	8013d28 <_strtoul_l.isra.0+0x34>
 8013de2:	230a      	movs	r3, #10
 8013de4:	e7ab      	b.n	8013d3e <_strtoul_l.isra.0+0x4a>
 8013de6:	bf00      	nop
 8013de8:	080194b1 	.word	0x080194b1

08013dec <_strtoul_r>:
 8013dec:	f7ff bf82 	b.w	8013cf4 <_strtoul_l.isra.0>

08013df0 <strtoul>:
 8013df0:	4613      	mov	r3, r2
 8013df2:	460a      	mov	r2, r1
 8013df4:	4601      	mov	r1, r0
 8013df6:	4802      	ldr	r0, [pc, #8]	; (8013e00 <strtoul+0x10>)
 8013df8:	6800      	ldr	r0, [r0, #0]
 8013dfa:	f7ff bf7b 	b.w	8013cf4 <_strtoul_l.isra.0>
 8013dfe:	bf00      	nop
 8013e00:	20000100 	.word	0x20000100

08013e04 <time>:
 8013e04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013e06:	4b0b      	ldr	r3, [pc, #44]	; (8013e34 <time+0x30>)
 8013e08:	2200      	movs	r2, #0
 8013e0a:	4669      	mov	r1, sp
 8013e0c:	4604      	mov	r4, r0
 8013e0e:	6818      	ldr	r0, [r3, #0]
 8013e10:	f000 fc84 	bl	801471c <_gettimeofday_r>
 8013e14:	2800      	cmp	r0, #0
 8013e16:	bfbe      	ittt	lt
 8013e18:	f04f 32ff 	movlt.w	r2, #4294967295
 8013e1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013e20:	e9cd 2300 	strdlt	r2, r3, [sp]
 8013e24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e28:	b10c      	cbz	r4, 8013e2e <time+0x2a>
 8013e2a:	e9c4 0100 	strd	r0, r1, [r4]
 8013e2e:	b004      	add	sp, #16
 8013e30:	bd10      	pop	{r4, pc}
 8013e32:	bf00      	nop
 8013e34:	20000100 	.word	0x20000100

08013e38 <__tzcalc_limits>:
 8013e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e3c:	4680      	mov	r8, r0
 8013e3e:	f000 fc7f 	bl	8014740 <__gettzinfo>
 8013e42:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8013e46:	4598      	cmp	r8, r3
 8013e48:	f340 8098 	ble.w	8013f7c <__tzcalc_limits+0x144>
 8013e4c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8013e50:	4443      	add	r3, r8
 8013e52:	109b      	asrs	r3, r3, #2
 8013e54:	f240 126d 	movw	r2, #365	; 0x16d
 8013e58:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8013e5c:	fb02 3505 	mla	r5, r2, r5, r3
 8013e60:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8013e64:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8013e68:	fb93 f3f2 	sdiv	r3, r3, r2
 8013e6c:	441d      	add	r5, r3
 8013e6e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013e72:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8013e76:	fb98 f7f3 	sdiv	r7, r8, r3
 8013e7a:	fb03 8717 	mls	r7, r3, r7, r8
 8013e7e:	4442      	add	r2, r8
 8013e80:	fab7 fc87 	clz	ip, r7
 8013e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8013e88:	f008 0303 	and.w	r3, r8, #3
 8013e8c:	4415      	add	r5, r2
 8013e8e:	2264      	movs	r2, #100	; 0x64
 8013e90:	f8c0 8004 	str.w	r8, [r0, #4]
 8013e94:	fb98 f6f2 	sdiv	r6, r8, r2
 8013e98:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8013e9c:	fb02 8616 	mls	r6, r2, r6, r8
 8013ea0:	4604      	mov	r4, r0
 8013ea2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8013ea6:	9300      	str	r3, [sp, #0]
 8013ea8:	f04f 0e07 	mov.w	lr, #7
 8013eac:	7a22      	ldrb	r2, [r4, #8]
 8013eae:	6963      	ldr	r3, [r4, #20]
 8013eb0:	2a4a      	cmp	r2, #74	; 0x4a
 8013eb2:	d128      	bne.n	8013f06 <__tzcalc_limits+0xce>
 8013eb4:	9900      	ldr	r1, [sp, #0]
 8013eb6:	18ea      	adds	r2, r5, r3
 8013eb8:	b901      	cbnz	r1, 8013ebc <__tzcalc_limits+0x84>
 8013eba:	b906      	cbnz	r6, 8013ebe <__tzcalc_limits+0x86>
 8013ebc:	bb0f      	cbnz	r7, 8013f02 <__tzcalc_limits+0xca>
 8013ebe:	2b3b      	cmp	r3, #59	; 0x3b
 8013ec0:	bfd4      	ite	le
 8013ec2:	2300      	movle	r3, #0
 8013ec4:	2301      	movgt	r3, #1
 8013ec6:	4413      	add	r3, r2
 8013ec8:	1e5a      	subs	r2, r3, #1
 8013eca:	69a3      	ldr	r3, [r4, #24]
 8013ecc:	492c      	ldr	r1, [pc, #176]	; (8013f80 <__tzcalc_limits+0x148>)
 8013ece:	fb01 3202 	mla	r2, r1, r2, r3
 8013ed2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013ed4:	4413      	add	r3, r2
 8013ed6:	461a      	mov	r2, r3
 8013ed8:	17db      	asrs	r3, r3, #31
 8013eda:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013ede:	3428      	adds	r4, #40	; 0x28
 8013ee0:	45a3      	cmp	fp, r4
 8013ee2:	d1e3      	bne.n	8013eac <__tzcalc_limits+0x74>
 8013ee4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8013ee8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8013eec:	4294      	cmp	r4, r2
 8013eee:	eb75 0303 	sbcs.w	r3, r5, r3
 8013ef2:	bfb4      	ite	lt
 8013ef4:	2301      	movlt	r3, #1
 8013ef6:	2300      	movge	r3, #0
 8013ef8:	6003      	str	r3, [r0, #0]
 8013efa:	2001      	movs	r0, #1
 8013efc:	b003      	add	sp, #12
 8013efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f02:	2300      	movs	r3, #0
 8013f04:	e7df      	b.n	8013ec6 <__tzcalc_limits+0x8e>
 8013f06:	2a44      	cmp	r2, #68	; 0x44
 8013f08:	d101      	bne.n	8013f0e <__tzcalc_limits+0xd6>
 8013f0a:	18ea      	adds	r2, r5, r3
 8013f0c:	e7dd      	b.n	8013eca <__tzcalc_limits+0x92>
 8013f0e:	9a00      	ldr	r2, [sp, #0]
 8013f10:	bb72      	cbnz	r2, 8013f70 <__tzcalc_limits+0x138>
 8013f12:	2e00      	cmp	r6, #0
 8013f14:	bf0c      	ite	eq
 8013f16:	46e0      	moveq	r8, ip
 8013f18:	f04f 0801 	movne.w	r8, #1
 8013f1c:	4919      	ldr	r1, [pc, #100]	; (8013f84 <__tzcalc_limits+0x14c>)
 8013f1e:	68e2      	ldr	r2, [r4, #12]
 8013f20:	9201      	str	r2, [sp, #4]
 8013f22:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8013f26:	fb0a 1808 	mla	r8, sl, r8, r1
 8013f2a:	462a      	mov	r2, r5
 8013f2c:	f04f 0900 	mov.w	r9, #0
 8013f30:	f1a8 0804 	sub.w	r8, r8, #4
 8013f34:	9901      	ldr	r1, [sp, #4]
 8013f36:	f109 0901 	add.w	r9, r9, #1
 8013f3a:	4549      	cmp	r1, r9
 8013f3c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8013f40:	dc18      	bgt.n	8013f74 <__tzcalc_limits+0x13c>
 8013f42:	f102 0804 	add.w	r8, r2, #4
 8013f46:	fb98 f9fe 	sdiv	r9, r8, lr
 8013f4a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8013f4e:	eba8 0909 	sub.w	r9, r8, r9
 8013f52:	ebb3 0909 	subs.w	r9, r3, r9
 8013f56:	6923      	ldr	r3, [r4, #16]
 8013f58:	f103 33ff 	add.w	r3, r3, #4294967295
 8013f5c:	bf48      	it	mi
 8013f5e:	f109 0907 	addmi.w	r9, r9, #7
 8013f62:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8013f66:	444b      	add	r3, r9
 8013f68:	4553      	cmp	r3, sl
 8013f6a:	da05      	bge.n	8013f78 <__tzcalc_limits+0x140>
 8013f6c:	441a      	add	r2, r3
 8013f6e:	e7ac      	b.n	8013eca <__tzcalc_limits+0x92>
 8013f70:	46e0      	mov	r8, ip
 8013f72:	e7d3      	b.n	8013f1c <__tzcalc_limits+0xe4>
 8013f74:	4452      	add	r2, sl
 8013f76:	e7dd      	b.n	8013f34 <__tzcalc_limits+0xfc>
 8013f78:	3b07      	subs	r3, #7
 8013f7a:	e7f5      	b.n	8013f68 <__tzcalc_limits+0x130>
 8013f7c:	2000      	movs	r0, #0
 8013f7e:	e7bd      	b.n	8013efc <__tzcalc_limits+0xc4>
 8013f80:	00015180 	.word	0x00015180
 8013f84:	080190f8 	.word	0x080190f8

08013f88 <__tz_lock>:
 8013f88:	4801      	ldr	r0, [pc, #4]	; (8013f90 <__tz_lock+0x8>)
 8013f8a:	f7fe bebf 	b.w	8012d0c <__retarget_lock_acquire>
 8013f8e:	bf00      	nop
 8013f90:	20000c7f 	.word	0x20000c7f

08013f94 <__tz_unlock>:
 8013f94:	4801      	ldr	r0, [pc, #4]	; (8013f9c <__tz_unlock+0x8>)
 8013f96:	f7fe bebb 	b.w	8012d10 <__retarget_lock_release>
 8013f9a:	bf00      	nop
 8013f9c:	20000c7f 	.word	0x20000c7f

08013fa0 <_tzset_unlocked>:
 8013fa0:	4b01      	ldr	r3, [pc, #4]	; (8013fa8 <_tzset_unlocked+0x8>)
 8013fa2:	6818      	ldr	r0, [r3, #0]
 8013fa4:	f000 b802 	b.w	8013fac <_tzset_unlocked_r>
 8013fa8:	20000100 	.word	0x20000100

08013fac <_tzset_unlocked_r>:
 8013fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fb0:	b08d      	sub	sp, #52	; 0x34
 8013fb2:	4607      	mov	r7, r0
 8013fb4:	f000 fbc4 	bl	8014740 <__gettzinfo>
 8013fb8:	49ae      	ldr	r1, [pc, #696]	; (8014274 <_tzset_unlocked_r+0x2c8>)
 8013fba:	4eaf      	ldr	r6, [pc, #700]	; (8014278 <_tzset_unlocked_r+0x2cc>)
 8013fbc:	4605      	mov	r5, r0
 8013fbe:	4638      	mov	r0, r7
 8013fc0:	f000 fba4 	bl	801470c <_getenv_r>
 8013fc4:	4604      	mov	r4, r0
 8013fc6:	b970      	cbnz	r0, 8013fe6 <_tzset_unlocked_r+0x3a>
 8013fc8:	4bac      	ldr	r3, [pc, #688]	; (801427c <_tzset_unlocked_r+0x2d0>)
 8013fca:	4aad      	ldr	r2, [pc, #692]	; (8014280 <_tzset_unlocked_r+0x2d4>)
 8013fcc:	6018      	str	r0, [r3, #0]
 8013fce:	4bad      	ldr	r3, [pc, #692]	; (8014284 <_tzset_unlocked_r+0x2d8>)
 8013fd0:	6018      	str	r0, [r3, #0]
 8013fd2:	4bad      	ldr	r3, [pc, #692]	; (8014288 <_tzset_unlocked_r+0x2dc>)
 8013fd4:	6830      	ldr	r0, [r6, #0]
 8013fd6:	e9c3 2200 	strd	r2, r2, [r3]
 8013fda:	f7fe ff07 	bl	8012dec <free>
 8013fde:	6034      	str	r4, [r6, #0]
 8013fe0:	b00d      	add	sp, #52	; 0x34
 8013fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fe6:	6831      	ldr	r1, [r6, #0]
 8013fe8:	2900      	cmp	r1, #0
 8013fea:	d15f      	bne.n	80140ac <_tzset_unlocked_r+0x100>
 8013fec:	6830      	ldr	r0, [r6, #0]
 8013fee:	f7fe fefd 	bl	8012dec <free>
 8013ff2:	4620      	mov	r0, r4
 8013ff4:	f7ec f922 	bl	800023c <strlen>
 8013ff8:	1c41      	adds	r1, r0, #1
 8013ffa:	4638      	mov	r0, r7
 8013ffc:	f7fe ff74 	bl	8012ee8 <_malloc_r>
 8014000:	6030      	str	r0, [r6, #0]
 8014002:	2800      	cmp	r0, #0
 8014004:	d157      	bne.n	80140b6 <_tzset_unlocked_r+0x10a>
 8014006:	7823      	ldrb	r3, [r4, #0]
 8014008:	4aa0      	ldr	r2, [pc, #640]	; (801428c <_tzset_unlocked_r+0x2e0>)
 801400a:	49a1      	ldr	r1, [pc, #644]	; (8014290 <_tzset_unlocked_r+0x2e4>)
 801400c:	2b3a      	cmp	r3, #58	; 0x3a
 801400e:	bf08      	it	eq
 8014010:	3401      	addeq	r4, #1
 8014012:	ae0a      	add	r6, sp, #40	; 0x28
 8014014:	4633      	mov	r3, r6
 8014016:	4620      	mov	r0, r4
 8014018:	f001 f988 	bl	801532c <siscanf>
 801401c:	2800      	cmp	r0, #0
 801401e:	dddf      	ble.n	8013fe0 <_tzset_unlocked_r+0x34>
 8014020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014022:	18e7      	adds	r7, r4, r3
 8014024:	5ce3      	ldrb	r3, [r4, r3]
 8014026:	2b2d      	cmp	r3, #45	; 0x2d
 8014028:	d149      	bne.n	80140be <_tzset_unlocked_r+0x112>
 801402a:	3701      	adds	r7, #1
 801402c:	f04f 34ff 	mov.w	r4, #4294967295
 8014030:	f10d 0a20 	add.w	sl, sp, #32
 8014034:	f10d 0b1e 	add.w	fp, sp, #30
 8014038:	f04f 0800 	mov.w	r8, #0
 801403c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8014040:	4994      	ldr	r1, [pc, #592]	; (8014294 <_tzset_unlocked_r+0x2e8>)
 8014042:	9603      	str	r6, [sp, #12]
 8014044:	f8cd b000 	str.w	fp, [sp]
 8014048:	4633      	mov	r3, r6
 801404a:	aa07      	add	r2, sp, #28
 801404c:	4638      	mov	r0, r7
 801404e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8014052:	f8ad 8020 	strh.w	r8, [sp, #32]
 8014056:	f001 f969 	bl	801532c <siscanf>
 801405a:	4540      	cmp	r0, r8
 801405c:	ddc0      	ble.n	8013fe0 <_tzset_unlocked_r+0x34>
 801405e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8014062:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8014066:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80142a0 <_tzset_unlocked_r+0x2f4>
 801406a:	213c      	movs	r1, #60	; 0x3c
 801406c:	fb01 2203 	mla	r2, r1, r3, r2
 8014070:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8014074:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014078:	fb01 2303 	mla	r3, r1, r3, r2
 801407c:	435c      	muls	r4, r3
 801407e:	62ac      	str	r4, [r5, #40]	; 0x28
 8014080:	4c81      	ldr	r4, [pc, #516]	; (8014288 <_tzset_unlocked_r+0x2dc>)
 8014082:	4b82      	ldr	r3, [pc, #520]	; (801428c <_tzset_unlocked_r+0x2e0>)
 8014084:	6023      	str	r3, [r4, #0]
 8014086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014088:	4981      	ldr	r1, [pc, #516]	; (8014290 <_tzset_unlocked_r+0x2e4>)
 801408a:	441f      	add	r7, r3
 801408c:	464a      	mov	r2, r9
 801408e:	4633      	mov	r3, r6
 8014090:	4638      	mov	r0, r7
 8014092:	f001 f94b 	bl	801532c <siscanf>
 8014096:	4540      	cmp	r0, r8
 8014098:	dc16      	bgt.n	80140c8 <_tzset_unlocked_r+0x11c>
 801409a:	6823      	ldr	r3, [r4, #0]
 801409c:	6063      	str	r3, [r4, #4]
 801409e:	4b77      	ldr	r3, [pc, #476]	; (801427c <_tzset_unlocked_r+0x2d0>)
 80140a0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80140a2:	601a      	str	r2, [r3, #0]
 80140a4:	4b77      	ldr	r3, [pc, #476]	; (8014284 <_tzset_unlocked_r+0x2d8>)
 80140a6:	f8c3 8000 	str.w	r8, [r3]
 80140aa:	e799      	b.n	8013fe0 <_tzset_unlocked_r+0x34>
 80140ac:	f7ec f8ce 	bl	800024c <strcmp>
 80140b0:	2800      	cmp	r0, #0
 80140b2:	d19b      	bne.n	8013fec <_tzset_unlocked_r+0x40>
 80140b4:	e794      	b.n	8013fe0 <_tzset_unlocked_r+0x34>
 80140b6:	4621      	mov	r1, r4
 80140b8:	f001 f964 	bl	8015384 <strcpy>
 80140bc:	e7a3      	b.n	8014006 <_tzset_unlocked_r+0x5a>
 80140be:	2b2b      	cmp	r3, #43	; 0x2b
 80140c0:	bf08      	it	eq
 80140c2:	3701      	addeq	r7, #1
 80140c4:	2401      	movs	r4, #1
 80140c6:	e7b3      	b.n	8014030 <_tzset_unlocked_r+0x84>
 80140c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140ca:	f8c4 9004 	str.w	r9, [r4, #4]
 80140ce:	18fc      	adds	r4, r7, r3
 80140d0:	5cfb      	ldrb	r3, [r7, r3]
 80140d2:	2b2d      	cmp	r3, #45	; 0x2d
 80140d4:	f040 808b 	bne.w	80141ee <_tzset_unlocked_r+0x242>
 80140d8:	3401      	adds	r4, #1
 80140da:	f04f 37ff 	mov.w	r7, #4294967295
 80140de:	2300      	movs	r3, #0
 80140e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80140e4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80140e8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80140ec:	930a      	str	r3, [sp, #40]	; 0x28
 80140ee:	e9cd a602 	strd	sl, r6, [sp, #8]
 80140f2:	e9cd b600 	strd	fp, r6, [sp]
 80140f6:	4967      	ldr	r1, [pc, #412]	; (8014294 <_tzset_unlocked_r+0x2e8>)
 80140f8:	4633      	mov	r3, r6
 80140fa:	aa07      	add	r2, sp, #28
 80140fc:	4620      	mov	r0, r4
 80140fe:	f001 f915 	bl	801532c <siscanf>
 8014102:	2800      	cmp	r0, #0
 8014104:	dc78      	bgt.n	80141f8 <_tzset_unlocked_r+0x24c>
 8014106:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8014108:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801410c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801410e:	652f      	str	r7, [r5, #80]	; 0x50
 8014110:	441c      	add	r4, r3
 8014112:	462f      	mov	r7, r5
 8014114:	f04f 0900 	mov.w	r9, #0
 8014118:	7823      	ldrb	r3, [r4, #0]
 801411a:	2b2c      	cmp	r3, #44	; 0x2c
 801411c:	bf08      	it	eq
 801411e:	3401      	addeq	r4, #1
 8014120:	f894 8000 	ldrb.w	r8, [r4]
 8014124:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8014128:	d178      	bne.n	801421c <_tzset_unlocked_r+0x270>
 801412a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801412e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8014132:	ab09      	add	r3, sp, #36	; 0x24
 8014134:	9300      	str	r3, [sp, #0]
 8014136:	4958      	ldr	r1, [pc, #352]	; (8014298 <_tzset_unlocked_r+0x2ec>)
 8014138:	9603      	str	r6, [sp, #12]
 801413a:	4633      	mov	r3, r6
 801413c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8014140:	4620      	mov	r0, r4
 8014142:	f001 f8f3 	bl	801532c <siscanf>
 8014146:	2803      	cmp	r0, #3
 8014148:	f47f af4a 	bne.w	8013fe0 <_tzset_unlocked_r+0x34>
 801414c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8014150:	1e4b      	subs	r3, r1, #1
 8014152:	2b0b      	cmp	r3, #11
 8014154:	f63f af44 	bhi.w	8013fe0 <_tzset_unlocked_r+0x34>
 8014158:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801415c:	1e53      	subs	r3, r2, #1
 801415e:	2b04      	cmp	r3, #4
 8014160:	f63f af3e 	bhi.w	8013fe0 <_tzset_unlocked_r+0x34>
 8014164:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8014168:	2b06      	cmp	r3, #6
 801416a:	f63f af39 	bhi.w	8013fe0 <_tzset_unlocked_r+0x34>
 801416e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8014172:	f887 8008 	strb.w	r8, [r7, #8]
 8014176:	617b      	str	r3, [r7, #20]
 8014178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801417a:	eb04 0803 	add.w	r8, r4, r3
 801417e:	2302      	movs	r3, #2
 8014180:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014184:	2300      	movs	r3, #0
 8014186:	f8ad 301e 	strh.w	r3, [sp, #30]
 801418a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801418e:	930a      	str	r3, [sp, #40]	; 0x28
 8014190:	f898 3000 	ldrb.w	r3, [r8]
 8014194:	2b2f      	cmp	r3, #47	; 0x2f
 8014196:	d109      	bne.n	80141ac <_tzset_unlocked_r+0x200>
 8014198:	e9cd a602 	strd	sl, r6, [sp, #8]
 801419c:	e9cd b600 	strd	fp, r6, [sp]
 80141a0:	493e      	ldr	r1, [pc, #248]	; (801429c <_tzset_unlocked_r+0x2f0>)
 80141a2:	4633      	mov	r3, r6
 80141a4:	aa07      	add	r2, sp, #28
 80141a6:	4640      	mov	r0, r8
 80141a8:	f001 f8c0 	bl	801532c <siscanf>
 80141ac:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80141b0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80141b4:	213c      	movs	r1, #60	; 0x3c
 80141b6:	fb01 2203 	mla	r2, r1, r3, r2
 80141ba:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80141be:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80141c2:	fb01 2303 	mla	r3, r1, r3, r2
 80141c6:	61bb      	str	r3, [r7, #24]
 80141c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80141ca:	3728      	adds	r7, #40	; 0x28
 80141cc:	4444      	add	r4, r8
 80141ce:	f1b9 0f00 	cmp.w	r9, #0
 80141d2:	d020      	beq.n	8014216 <_tzset_unlocked_r+0x26a>
 80141d4:	6868      	ldr	r0, [r5, #4]
 80141d6:	f7ff fe2f 	bl	8013e38 <__tzcalc_limits>
 80141da:	4b28      	ldr	r3, [pc, #160]	; (801427c <_tzset_unlocked_r+0x2d0>)
 80141dc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80141de:	601a      	str	r2, [r3, #0]
 80141e0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80141e2:	1a9b      	subs	r3, r3, r2
 80141e4:	4a27      	ldr	r2, [pc, #156]	; (8014284 <_tzset_unlocked_r+0x2d8>)
 80141e6:	bf18      	it	ne
 80141e8:	2301      	movne	r3, #1
 80141ea:	6013      	str	r3, [r2, #0]
 80141ec:	e6f8      	b.n	8013fe0 <_tzset_unlocked_r+0x34>
 80141ee:	2b2b      	cmp	r3, #43	; 0x2b
 80141f0:	bf08      	it	eq
 80141f2:	3401      	addeq	r4, #1
 80141f4:	2701      	movs	r7, #1
 80141f6:	e772      	b.n	80140de <_tzset_unlocked_r+0x132>
 80141f8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80141fc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8014200:	213c      	movs	r1, #60	; 0x3c
 8014202:	fb01 2203 	mla	r2, r1, r3, r2
 8014206:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801420a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801420e:	fb01 2303 	mla	r3, r1, r3, r2
 8014212:	435f      	muls	r7, r3
 8014214:	e77a      	b.n	801410c <_tzset_unlocked_r+0x160>
 8014216:	f04f 0901 	mov.w	r9, #1
 801421a:	e77d      	b.n	8014118 <_tzset_unlocked_r+0x16c>
 801421c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8014220:	bf06      	itte	eq
 8014222:	3401      	addeq	r4, #1
 8014224:	4643      	moveq	r3, r8
 8014226:	2344      	movne	r3, #68	; 0x44
 8014228:	220a      	movs	r2, #10
 801422a:	a90b      	add	r1, sp, #44	; 0x2c
 801422c:	4620      	mov	r0, r4
 801422e:	9305      	str	r3, [sp, #20]
 8014230:	f7ff fdde 	bl	8013df0 <strtoul>
 8014234:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8014238:	9b05      	ldr	r3, [sp, #20]
 801423a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801423e:	45a0      	cmp	r8, r4
 8014240:	d114      	bne.n	801426c <_tzset_unlocked_r+0x2c0>
 8014242:	234d      	movs	r3, #77	; 0x4d
 8014244:	f1b9 0f00 	cmp.w	r9, #0
 8014248:	d107      	bne.n	801425a <_tzset_unlocked_r+0x2ae>
 801424a:	722b      	strb	r3, [r5, #8]
 801424c:	2103      	movs	r1, #3
 801424e:	2302      	movs	r3, #2
 8014250:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8014254:	f8c5 9014 	str.w	r9, [r5, #20]
 8014258:	e791      	b.n	801417e <_tzset_unlocked_r+0x1d2>
 801425a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801425e:	220b      	movs	r2, #11
 8014260:	2301      	movs	r3, #1
 8014262:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8014266:	2300      	movs	r3, #0
 8014268:	63eb      	str	r3, [r5, #60]	; 0x3c
 801426a:	e788      	b.n	801417e <_tzset_unlocked_r+0x1d2>
 801426c:	b280      	uxth	r0, r0
 801426e:	723b      	strb	r3, [r7, #8]
 8014270:	6178      	str	r0, [r7, #20]
 8014272:	e784      	b.n	801417e <_tzset_unlocked_r+0x1d2>
 8014274:	08019438 	.word	0x08019438
 8014278:	20000bd8 	.word	0x20000bd8
 801427c:	20000be0 	.word	0x20000be0
 8014280:	0801943b 	.word	0x0801943b
 8014284:	20000bdc 	.word	0x20000bdc
 8014288:	20000164 	.word	0x20000164
 801428c:	20000bcb 	.word	0x20000bcb
 8014290:	0801943f 	.word	0x0801943f
 8014294:	08019462 	.word	0x08019462
 8014298:	0801944e 	.word	0x0801944e
 801429c:	08019461 	.word	0x08019461
 80142a0:	20000bc0 	.word	0x20000bc0

080142a4 <_vsniprintf_r>:
 80142a4:	b530      	push	{r4, r5, lr}
 80142a6:	1e14      	subs	r4, r2, #0
 80142a8:	4605      	mov	r5, r0
 80142aa:	b09b      	sub	sp, #108	; 0x6c
 80142ac:	4618      	mov	r0, r3
 80142ae:	da05      	bge.n	80142bc <_vsniprintf_r+0x18>
 80142b0:	238b      	movs	r3, #139	; 0x8b
 80142b2:	602b      	str	r3, [r5, #0]
 80142b4:	f04f 30ff 	mov.w	r0, #4294967295
 80142b8:	b01b      	add	sp, #108	; 0x6c
 80142ba:	bd30      	pop	{r4, r5, pc}
 80142bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80142c0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80142c4:	bf14      	ite	ne
 80142c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80142ca:	4623      	moveq	r3, r4
 80142cc:	9302      	str	r3, [sp, #8]
 80142ce:	9305      	str	r3, [sp, #20]
 80142d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80142d4:	9100      	str	r1, [sp, #0]
 80142d6:	9104      	str	r1, [sp, #16]
 80142d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80142dc:	4602      	mov	r2, r0
 80142de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80142e0:	4669      	mov	r1, sp
 80142e2:	4628      	mov	r0, r5
 80142e4:	f000 fba6 	bl	8014a34 <_svfiprintf_r>
 80142e8:	1c43      	adds	r3, r0, #1
 80142ea:	bfbc      	itt	lt
 80142ec:	238b      	movlt	r3, #139	; 0x8b
 80142ee:	602b      	strlt	r3, [r5, #0]
 80142f0:	2c00      	cmp	r4, #0
 80142f2:	d0e1      	beq.n	80142b8 <_vsniprintf_r+0x14>
 80142f4:	9b00      	ldr	r3, [sp, #0]
 80142f6:	2200      	movs	r2, #0
 80142f8:	701a      	strb	r2, [r3, #0]
 80142fa:	e7dd      	b.n	80142b8 <_vsniprintf_r+0x14>

080142fc <vsniprintf>:
 80142fc:	b507      	push	{r0, r1, r2, lr}
 80142fe:	9300      	str	r3, [sp, #0]
 8014300:	4613      	mov	r3, r2
 8014302:	460a      	mov	r2, r1
 8014304:	4601      	mov	r1, r0
 8014306:	4803      	ldr	r0, [pc, #12]	; (8014314 <vsniprintf+0x18>)
 8014308:	6800      	ldr	r0, [r0, #0]
 801430a:	f7ff ffcb 	bl	80142a4 <_vsniprintf_r>
 801430e:	b003      	add	sp, #12
 8014310:	f85d fb04 	ldr.w	pc, [sp], #4
 8014314:	20000100 	.word	0x20000100

08014318 <__swbuf_r>:
 8014318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801431a:	460e      	mov	r6, r1
 801431c:	4614      	mov	r4, r2
 801431e:	4605      	mov	r5, r0
 8014320:	b118      	cbz	r0, 801432a <__swbuf_r+0x12>
 8014322:	6983      	ldr	r3, [r0, #24]
 8014324:	b90b      	cbnz	r3, 801432a <__swbuf_r+0x12>
 8014326:	f7fe f93f 	bl	80125a8 <__sinit>
 801432a:	4b21      	ldr	r3, [pc, #132]	; (80143b0 <__swbuf_r+0x98>)
 801432c:	429c      	cmp	r4, r3
 801432e:	d12b      	bne.n	8014388 <__swbuf_r+0x70>
 8014330:	686c      	ldr	r4, [r5, #4]
 8014332:	69a3      	ldr	r3, [r4, #24]
 8014334:	60a3      	str	r3, [r4, #8]
 8014336:	89a3      	ldrh	r3, [r4, #12]
 8014338:	071a      	lsls	r2, r3, #28
 801433a:	d52f      	bpl.n	801439c <__swbuf_r+0x84>
 801433c:	6923      	ldr	r3, [r4, #16]
 801433e:	b36b      	cbz	r3, 801439c <__swbuf_r+0x84>
 8014340:	6923      	ldr	r3, [r4, #16]
 8014342:	6820      	ldr	r0, [r4, #0]
 8014344:	1ac0      	subs	r0, r0, r3
 8014346:	6963      	ldr	r3, [r4, #20]
 8014348:	b2f6      	uxtb	r6, r6
 801434a:	4283      	cmp	r3, r0
 801434c:	4637      	mov	r7, r6
 801434e:	dc04      	bgt.n	801435a <__swbuf_r+0x42>
 8014350:	4621      	mov	r1, r4
 8014352:	4628      	mov	r0, r5
 8014354:	f7fe f882 	bl	801245c <_fflush_r>
 8014358:	bb30      	cbnz	r0, 80143a8 <__swbuf_r+0x90>
 801435a:	68a3      	ldr	r3, [r4, #8]
 801435c:	3b01      	subs	r3, #1
 801435e:	60a3      	str	r3, [r4, #8]
 8014360:	6823      	ldr	r3, [r4, #0]
 8014362:	1c5a      	adds	r2, r3, #1
 8014364:	6022      	str	r2, [r4, #0]
 8014366:	701e      	strb	r6, [r3, #0]
 8014368:	6963      	ldr	r3, [r4, #20]
 801436a:	3001      	adds	r0, #1
 801436c:	4283      	cmp	r3, r0
 801436e:	d004      	beq.n	801437a <__swbuf_r+0x62>
 8014370:	89a3      	ldrh	r3, [r4, #12]
 8014372:	07db      	lsls	r3, r3, #31
 8014374:	d506      	bpl.n	8014384 <__swbuf_r+0x6c>
 8014376:	2e0a      	cmp	r6, #10
 8014378:	d104      	bne.n	8014384 <__swbuf_r+0x6c>
 801437a:	4621      	mov	r1, r4
 801437c:	4628      	mov	r0, r5
 801437e:	f7fe f86d 	bl	801245c <_fflush_r>
 8014382:	b988      	cbnz	r0, 80143a8 <__swbuf_r+0x90>
 8014384:	4638      	mov	r0, r7
 8014386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014388:	4b0a      	ldr	r3, [pc, #40]	; (80143b4 <__swbuf_r+0x9c>)
 801438a:	429c      	cmp	r4, r3
 801438c:	d101      	bne.n	8014392 <__swbuf_r+0x7a>
 801438e:	68ac      	ldr	r4, [r5, #8]
 8014390:	e7cf      	b.n	8014332 <__swbuf_r+0x1a>
 8014392:	4b09      	ldr	r3, [pc, #36]	; (80143b8 <__swbuf_r+0xa0>)
 8014394:	429c      	cmp	r4, r3
 8014396:	bf08      	it	eq
 8014398:	68ec      	ldreq	r4, [r5, #12]
 801439a:	e7ca      	b.n	8014332 <__swbuf_r+0x1a>
 801439c:	4621      	mov	r1, r4
 801439e:	4628      	mov	r0, r5
 80143a0:	f000 f81e 	bl	80143e0 <__swsetup_r>
 80143a4:	2800      	cmp	r0, #0
 80143a6:	d0cb      	beq.n	8014340 <__swbuf_r+0x28>
 80143a8:	f04f 37ff 	mov.w	r7, #4294967295
 80143ac:	e7ea      	b.n	8014384 <__swbuf_r+0x6c>
 80143ae:	bf00      	nop
 80143b0:	0801903c 	.word	0x0801903c
 80143b4:	0801905c 	.word	0x0801905c
 80143b8:	0801901c 	.word	0x0801901c

080143bc <_write_r>:
 80143bc:	b538      	push	{r3, r4, r5, lr}
 80143be:	4d07      	ldr	r5, [pc, #28]	; (80143dc <_write_r+0x20>)
 80143c0:	4604      	mov	r4, r0
 80143c2:	4608      	mov	r0, r1
 80143c4:	4611      	mov	r1, r2
 80143c6:	2200      	movs	r2, #0
 80143c8:	602a      	str	r2, [r5, #0]
 80143ca:	461a      	mov	r2, r3
 80143cc:	f7ec fd00 	bl	8000dd0 <_write>
 80143d0:	1c43      	adds	r3, r0, #1
 80143d2:	d102      	bne.n	80143da <_write_r+0x1e>
 80143d4:	682b      	ldr	r3, [r5, #0]
 80143d6:	b103      	cbz	r3, 80143da <_write_r+0x1e>
 80143d8:	6023      	str	r3, [r4, #0]
 80143da:	bd38      	pop	{r3, r4, r5, pc}
 80143dc:	20000c84 	.word	0x20000c84

080143e0 <__swsetup_r>:
 80143e0:	4b32      	ldr	r3, [pc, #200]	; (80144ac <__swsetup_r+0xcc>)
 80143e2:	b570      	push	{r4, r5, r6, lr}
 80143e4:	681d      	ldr	r5, [r3, #0]
 80143e6:	4606      	mov	r6, r0
 80143e8:	460c      	mov	r4, r1
 80143ea:	b125      	cbz	r5, 80143f6 <__swsetup_r+0x16>
 80143ec:	69ab      	ldr	r3, [r5, #24]
 80143ee:	b913      	cbnz	r3, 80143f6 <__swsetup_r+0x16>
 80143f0:	4628      	mov	r0, r5
 80143f2:	f7fe f8d9 	bl	80125a8 <__sinit>
 80143f6:	4b2e      	ldr	r3, [pc, #184]	; (80144b0 <__swsetup_r+0xd0>)
 80143f8:	429c      	cmp	r4, r3
 80143fa:	d10f      	bne.n	801441c <__swsetup_r+0x3c>
 80143fc:	686c      	ldr	r4, [r5, #4]
 80143fe:	89a3      	ldrh	r3, [r4, #12]
 8014400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014404:	0719      	lsls	r1, r3, #28
 8014406:	d42c      	bmi.n	8014462 <__swsetup_r+0x82>
 8014408:	06dd      	lsls	r5, r3, #27
 801440a:	d411      	bmi.n	8014430 <__swsetup_r+0x50>
 801440c:	2309      	movs	r3, #9
 801440e:	6033      	str	r3, [r6, #0]
 8014410:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014414:	81a3      	strh	r3, [r4, #12]
 8014416:	f04f 30ff 	mov.w	r0, #4294967295
 801441a:	e03e      	b.n	801449a <__swsetup_r+0xba>
 801441c:	4b25      	ldr	r3, [pc, #148]	; (80144b4 <__swsetup_r+0xd4>)
 801441e:	429c      	cmp	r4, r3
 8014420:	d101      	bne.n	8014426 <__swsetup_r+0x46>
 8014422:	68ac      	ldr	r4, [r5, #8]
 8014424:	e7eb      	b.n	80143fe <__swsetup_r+0x1e>
 8014426:	4b24      	ldr	r3, [pc, #144]	; (80144b8 <__swsetup_r+0xd8>)
 8014428:	429c      	cmp	r4, r3
 801442a:	bf08      	it	eq
 801442c:	68ec      	ldreq	r4, [r5, #12]
 801442e:	e7e6      	b.n	80143fe <__swsetup_r+0x1e>
 8014430:	0758      	lsls	r0, r3, #29
 8014432:	d512      	bpl.n	801445a <__swsetup_r+0x7a>
 8014434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014436:	b141      	cbz	r1, 801444a <__swsetup_r+0x6a>
 8014438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801443c:	4299      	cmp	r1, r3
 801443e:	d002      	beq.n	8014446 <__swsetup_r+0x66>
 8014440:	4630      	mov	r0, r6
 8014442:	f7fe fd01 	bl	8012e48 <_free_r>
 8014446:	2300      	movs	r3, #0
 8014448:	6363      	str	r3, [r4, #52]	; 0x34
 801444a:	89a3      	ldrh	r3, [r4, #12]
 801444c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014450:	81a3      	strh	r3, [r4, #12]
 8014452:	2300      	movs	r3, #0
 8014454:	6063      	str	r3, [r4, #4]
 8014456:	6923      	ldr	r3, [r4, #16]
 8014458:	6023      	str	r3, [r4, #0]
 801445a:	89a3      	ldrh	r3, [r4, #12]
 801445c:	f043 0308 	orr.w	r3, r3, #8
 8014460:	81a3      	strh	r3, [r4, #12]
 8014462:	6923      	ldr	r3, [r4, #16]
 8014464:	b94b      	cbnz	r3, 801447a <__swsetup_r+0x9a>
 8014466:	89a3      	ldrh	r3, [r4, #12]
 8014468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801446c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014470:	d003      	beq.n	801447a <__swsetup_r+0x9a>
 8014472:	4621      	mov	r1, r4
 8014474:	4630      	mov	r0, r6
 8014476:	f7fe fc71 	bl	8012d5c <__smakebuf_r>
 801447a:	89a0      	ldrh	r0, [r4, #12]
 801447c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014480:	f010 0301 	ands.w	r3, r0, #1
 8014484:	d00a      	beq.n	801449c <__swsetup_r+0xbc>
 8014486:	2300      	movs	r3, #0
 8014488:	60a3      	str	r3, [r4, #8]
 801448a:	6963      	ldr	r3, [r4, #20]
 801448c:	425b      	negs	r3, r3
 801448e:	61a3      	str	r3, [r4, #24]
 8014490:	6923      	ldr	r3, [r4, #16]
 8014492:	b943      	cbnz	r3, 80144a6 <__swsetup_r+0xc6>
 8014494:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014498:	d1ba      	bne.n	8014410 <__swsetup_r+0x30>
 801449a:	bd70      	pop	{r4, r5, r6, pc}
 801449c:	0781      	lsls	r1, r0, #30
 801449e:	bf58      	it	pl
 80144a0:	6963      	ldrpl	r3, [r4, #20]
 80144a2:	60a3      	str	r3, [r4, #8]
 80144a4:	e7f4      	b.n	8014490 <__swsetup_r+0xb0>
 80144a6:	2000      	movs	r0, #0
 80144a8:	e7f7      	b.n	801449a <__swsetup_r+0xba>
 80144aa:	bf00      	nop
 80144ac:	20000100 	.word	0x20000100
 80144b0:	0801903c 	.word	0x0801903c
 80144b4:	0801905c 	.word	0x0801905c
 80144b8:	0801901c 	.word	0x0801901c

080144bc <__register_exitproc>:
 80144bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144c0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801457c <__register_exitproc+0xc0>
 80144c4:	4606      	mov	r6, r0
 80144c6:	f8d8 0000 	ldr.w	r0, [r8]
 80144ca:	461f      	mov	r7, r3
 80144cc:	460d      	mov	r5, r1
 80144ce:	4691      	mov	r9, r2
 80144d0:	f7fe fc1d 	bl	8012d0e <__retarget_lock_acquire_recursive>
 80144d4:	4b25      	ldr	r3, [pc, #148]	; (801456c <__register_exitproc+0xb0>)
 80144d6:	681c      	ldr	r4, [r3, #0]
 80144d8:	b934      	cbnz	r4, 80144e8 <__register_exitproc+0x2c>
 80144da:	4c25      	ldr	r4, [pc, #148]	; (8014570 <__register_exitproc+0xb4>)
 80144dc:	601c      	str	r4, [r3, #0]
 80144de:	4b25      	ldr	r3, [pc, #148]	; (8014574 <__register_exitproc+0xb8>)
 80144e0:	b113      	cbz	r3, 80144e8 <__register_exitproc+0x2c>
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80144e8:	6863      	ldr	r3, [r4, #4]
 80144ea:	2b1f      	cmp	r3, #31
 80144ec:	dd07      	ble.n	80144fe <__register_exitproc+0x42>
 80144ee:	f8d8 0000 	ldr.w	r0, [r8]
 80144f2:	f7fe fc0e 	bl	8012d12 <__retarget_lock_release_recursive>
 80144f6:	f04f 30ff 	mov.w	r0, #4294967295
 80144fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144fe:	b34e      	cbz	r6, 8014554 <__register_exitproc+0x98>
 8014500:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8014504:	b988      	cbnz	r0, 801452a <__register_exitproc+0x6e>
 8014506:	4b1c      	ldr	r3, [pc, #112]	; (8014578 <__register_exitproc+0xbc>)
 8014508:	b923      	cbnz	r3, 8014514 <__register_exitproc+0x58>
 801450a:	f8d8 0000 	ldr.w	r0, [r8]
 801450e:	f7fe fbff 	bl	8012d10 <__retarget_lock_release>
 8014512:	e7f0      	b.n	80144f6 <__register_exitproc+0x3a>
 8014514:	f44f 7084 	mov.w	r0, #264	; 0x108
 8014518:	f7fe fc60 	bl	8012ddc <malloc>
 801451c:	2800      	cmp	r0, #0
 801451e:	d0f4      	beq.n	801450a <__register_exitproc+0x4e>
 8014520:	2300      	movs	r3, #0
 8014522:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8014526:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801452a:	6863      	ldr	r3, [r4, #4]
 801452c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8014530:	2201      	movs	r2, #1
 8014532:	409a      	lsls	r2, r3
 8014534:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8014538:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801453c:	4313      	orrs	r3, r2
 801453e:	2e02      	cmp	r6, #2
 8014540:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8014544:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8014548:	bf02      	ittt	eq
 801454a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801454e:	431a      	orreq	r2, r3
 8014550:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8014554:	6863      	ldr	r3, [r4, #4]
 8014556:	f8d8 0000 	ldr.w	r0, [r8]
 801455a:	1c5a      	adds	r2, r3, #1
 801455c:	3302      	adds	r3, #2
 801455e:	6062      	str	r2, [r4, #4]
 8014560:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8014564:	f7fe fbd5 	bl	8012d12 <__retarget_lock_release_recursive>
 8014568:	2000      	movs	r0, #0
 801456a:	e7c6      	b.n	80144fa <__register_exitproc+0x3e>
 801456c:	20000c70 	.word	0x20000c70
 8014570:	20000be4 	.word	0x20000be4
 8014574:	00000000 	.word	0x00000000
 8014578:	08012ddd 	.word	0x08012ddd
 801457c:	2000016c 	.word	0x2000016c

08014580 <abs>:
 8014580:	2800      	cmp	r0, #0
 8014582:	bfb8      	it	lt
 8014584:	4240      	neglt	r0, r0
 8014586:	4770      	bx	lr

08014588 <__assert_func>:
 8014588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801458a:	4614      	mov	r4, r2
 801458c:	461a      	mov	r2, r3
 801458e:	4b09      	ldr	r3, [pc, #36]	; (80145b4 <__assert_func+0x2c>)
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	4605      	mov	r5, r0
 8014594:	68d8      	ldr	r0, [r3, #12]
 8014596:	b14c      	cbz	r4, 80145ac <__assert_func+0x24>
 8014598:	4b07      	ldr	r3, [pc, #28]	; (80145b8 <__assert_func+0x30>)
 801459a:	9100      	str	r1, [sp, #0]
 801459c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80145a0:	4906      	ldr	r1, [pc, #24]	; (80145bc <__assert_func+0x34>)
 80145a2:	462b      	mov	r3, r5
 80145a4:	f000 f854 	bl	8014650 <fiprintf>
 80145a8:	f7fd fe42 	bl	8012230 <abort>
 80145ac:	4b04      	ldr	r3, [pc, #16]	; (80145c0 <__assert_func+0x38>)
 80145ae:	461c      	mov	r4, r3
 80145b0:	e7f3      	b.n	801459a <__assert_func+0x12>
 80145b2:	bf00      	nop
 80145b4:	20000100 	.word	0x20000100
 80145b8:	08019474 	.word	0x08019474
 80145bc:	08019481 	.word	0x08019481
 80145c0:	080194af 	.word	0x080194af

080145c4 <_close_r>:
 80145c4:	b538      	push	{r3, r4, r5, lr}
 80145c6:	4d06      	ldr	r5, [pc, #24]	; (80145e0 <_close_r+0x1c>)
 80145c8:	2300      	movs	r3, #0
 80145ca:	4604      	mov	r4, r0
 80145cc:	4608      	mov	r0, r1
 80145ce:	602b      	str	r3, [r5, #0]
 80145d0:	f7ec fc1a 	bl	8000e08 <_close>
 80145d4:	1c43      	adds	r3, r0, #1
 80145d6:	d102      	bne.n	80145de <_close_r+0x1a>
 80145d8:	682b      	ldr	r3, [r5, #0]
 80145da:	b103      	cbz	r3, 80145de <_close_r+0x1a>
 80145dc:	6023      	str	r3, [r4, #0]
 80145de:	bd38      	pop	{r3, r4, r5, pc}
 80145e0:	20000c84 	.word	0x20000c84

080145e4 <__sflags>:
 80145e4:	780b      	ldrb	r3, [r1, #0]
 80145e6:	2b72      	cmp	r3, #114	; 0x72
 80145e8:	b530      	push	{r4, r5, lr}
 80145ea:	d022      	beq.n	8014632 <__sflags+0x4e>
 80145ec:	2b77      	cmp	r3, #119	; 0x77
 80145ee:	d024      	beq.n	801463a <__sflags+0x56>
 80145f0:	2b61      	cmp	r3, #97	; 0x61
 80145f2:	d027      	beq.n	8014644 <__sflags+0x60>
 80145f4:	2316      	movs	r3, #22
 80145f6:	6003      	str	r3, [r0, #0]
 80145f8:	2000      	movs	r0, #0
 80145fa:	bd30      	pop	{r4, r5, pc}
 80145fc:	2d62      	cmp	r5, #98	; 0x62
 80145fe:	d012      	beq.n	8014626 <__sflags+0x42>
 8014600:	2d78      	cmp	r5, #120	; 0x78
 8014602:	d013      	beq.n	801462c <__sflags+0x48>
 8014604:	2d2b      	cmp	r5, #43	; 0x2b
 8014606:	d107      	bne.n	8014618 <__sflags+0x34>
 8014608:	f020 001c 	bic.w	r0, r0, #28
 801460c:	f023 0303 	bic.w	r3, r3, #3
 8014610:	f040 0010 	orr.w	r0, r0, #16
 8014614:	f043 0302 	orr.w	r3, r3, #2
 8014618:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801461c:	2d00      	cmp	r5, #0
 801461e:	d1ed      	bne.n	80145fc <__sflags+0x18>
 8014620:	4323      	orrs	r3, r4
 8014622:	6013      	str	r3, [r2, #0]
 8014624:	e7e9      	b.n	80145fa <__sflags+0x16>
 8014626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801462a:	e7f5      	b.n	8014618 <__sflags+0x34>
 801462c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014630:	e7f2      	b.n	8014618 <__sflags+0x34>
 8014632:	2400      	movs	r4, #0
 8014634:	4623      	mov	r3, r4
 8014636:	2004      	movs	r0, #4
 8014638:	e7ee      	b.n	8014618 <__sflags+0x34>
 801463a:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801463e:	2301      	movs	r3, #1
 8014640:	2008      	movs	r0, #8
 8014642:	e7e9      	b.n	8014618 <__sflags+0x34>
 8014644:	f44f 7402 	mov.w	r4, #520	; 0x208
 8014648:	2301      	movs	r3, #1
 801464a:	f44f 7084 	mov.w	r0, #264	; 0x108
 801464e:	e7e3      	b.n	8014618 <__sflags+0x34>

08014650 <fiprintf>:
 8014650:	b40e      	push	{r1, r2, r3}
 8014652:	b503      	push	{r0, r1, lr}
 8014654:	4601      	mov	r1, r0
 8014656:	ab03      	add	r3, sp, #12
 8014658:	4805      	ldr	r0, [pc, #20]	; (8014670 <fiprintf+0x20>)
 801465a:	f853 2b04 	ldr.w	r2, [r3], #4
 801465e:	6800      	ldr	r0, [r0, #0]
 8014660:	9301      	str	r3, [sp, #4]
 8014662:	f000 fb11 	bl	8014c88 <_vfiprintf_r>
 8014666:	b002      	add	sp, #8
 8014668:	f85d eb04 	ldr.w	lr, [sp], #4
 801466c:	b003      	add	sp, #12
 801466e:	4770      	bx	lr
 8014670:	20000100 	.word	0x20000100

08014674 <_fstat_r>:
 8014674:	b538      	push	{r3, r4, r5, lr}
 8014676:	4d07      	ldr	r5, [pc, #28]	; (8014694 <_fstat_r+0x20>)
 8014678:	2300      	movs	r3, #0
 801467a:	4604      	mov	r4, r0
 801467c:	4608      	mov	r0, r1
 801467e:	4611      	mov	r1, r2
 8014680:	602b      	str	r3, [r5, #0]
 8014682:	f7ec fbcd 	bl	8000e20 <_fstat>
 8014686:	1c43      	adds	r3, r0, #1
 8014688:	d102      	bne.n	8014690 <_fstat_r+0x1c>
 801468a:	682b      	ldr	r3, [r5, #0]
 801468c:	b103      	cbz	r3, 8014690 <_fstat_r+0x1c>
 801468e:	6023      	str	r3, [r4, #0]
 8014690:	bd38      	pop	{r3, r4, r5, pc}
 8014692:	bf00      	nop
 8014694:	20000c84 	.word	0x20000c84

08014698 <_findenv_r>:
 8014698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801469c:	4607      	mov	r7, r0
 801469e:	4689      	mov	r9, r1
 80146a0:	4616      	mov	r6, r2
 80146a2:	f000 fe97 	bl	80153d4 <__env_lock>
 80146a6:	4b18      	ldr	r3, [pc, #96]	; (8014708 <_findenv_r+0x70>)
 80146a8:	681c      	ldr	r4, [r3, #0]
 80146aa:	469a      	mov	sl, r3
 80146ac:	b134      	cbz	r4, 80146bc <_findenv_r+0x24>
 80146ae:	464b      	mov	r3, r9
 80146b0:	4698      	mov	r8, r3
 80146b2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80146b6:	b139      	cbz	r1, 80146c8 <_findenv_r+0x30>
 80146b8:	293d      	cmp	r1, #61	; 0x3d
 80146ba:	d1f9      	bne.n	80146b0 <_findenv_r+0x18>
 80146bc:	4638      	mov	r0, r7
 80146be:	f000 fe8f 	bl	80153e0 <__env_unlock>
 80146c2:	2000      	movs	r0, #0
 80146c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146c8:	eba8 0809 	sub.w	r8, r8, r9
 80146cc:	46a3      	mov	fp, r4
 80146ce:	f854 0b04 	ldr.w	r0, [r4], #4
 80146d2:	2800      	cmp	r0, #0
 80146d4:	d0f2      	beq.n	80146bc <_findenv_r+0x24>
 80146d6:	4642      	mov	r2, r8
 80146d8:	4649      	mov	r1, r9
 80146da:	f000 fe5b 	bl	8015394 <strncmp>
 80146de:	2800      	cmp	r0, #0
 80146e0:	d1f4      	bne.n	80146cc <_findenv_r+0x34>
 80146e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80146e6:	eb03 0508 	add.w	r5, r3, r8
 80146ea:	f813 3008 	ldrb.w	r3, [r3, r8]
 80146ee:	2b3d      	cmp	r3, #61	; 0x3d
 80146f0:	d1ec      	bne.n	80146cc <_findenv_r+0x34>
 80146f2:	f8da 3000 	ldr.w	r3, [sl]
 80146f6:	ebab 0303 	sub.w	r3, fp, r3
 80146fa:	109b      	asrs	r3, r3, #2
 80146fc:	4638      	mov	r0, r7
 80146fe:	6033      	str	r3, [r6, #0]
 8014700:	f000 fe6e 	bl	80153e0 <__env_unlock>
 8014704:	1c68      	adds	r0, r5, #1
 8014706:	e7dd      	b.n	80146c4 <_findenv_r+0x2c>
 8014708:	20000000 	.word	0x20000000

0801470c <_getenv_r>:
 801470c:	b507      	push	{r0, r1, r2, lr}
 801470e:	aa01      	add	r2, sp, #4
 8014710:	f7ff ffc2 	bl	8014698 <_findenv_r>
 8014714:	b003      	add	sp, #12
 8014716:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801471c <_gettimeofday_r>:
 801471c:	b538      	push	{r3, r4, r5, lr}
 801471e:	4d07      	ldr	r5, [pc, #28]	; (801473c <_gettimeofday_r+0x20>)
 8014720:	2300      	movs	r3, #0
 8014722:	4604      	mov	r4, r0
 8014724:	4608      	mov	r0, r1
 8014726:	4611      	mov	r1, r2
 8014728:	602b      	str	r3, [r5, #0]
 801472a:	f001 fa99 	bl	8015c60 <_gettimeofday>
 801472e:	1c43      	adds	r3, r0, #1
 8014730:	d102      	bne.n	8014738 <_gettimeofday_r+0x1c>
 8014732:	682b      	ldr	r3, [r5, #0]
 8014734:	b103      	cbz	r3, 8014738 <_gettimeofday_r+0x1c>
 8014736:	6023      	str	r3, [r4, #0]
 8014738:	bd38      	pop	{r3, r4, r5, pc}
 801473a:	bf00      	nop
 801473c:	20000c84 	.word	0x20000c84

08014740 <__gettzinfo>:
 8014740:	4800      	ldr	r0, [pc, #0]	; (8014744 <__gettzinfo+0x4>)
 8014742:	4770      	bx	lr
 8014744:	20000170 	.word	0x20000170

08014748 <gmtime_r>:
 8014748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801474c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014750:	460c      	mov	r4, r1
 8014752:	4a51      	ldr	r2, [pc, #324]	; (8014898 <gmtime_r+0x150>)
 8014754:	2300      	movs	r3, #0
 8014756:	4630      	mov	r0, r6
 8014758:	4639      	mov	r1, r7
 801475a:	f7ec f82b 	bl	80007b4 <__aeabi_ldivmod>
 801475e:	4639      	mov	r1, r7
 8014760:	4605      	mov	r5, r0
 8014762:	4a4d      	ldr	r2, [pc, #308]	; (8014898 <gmtime_r+0x150>)
 8014764:	4630      	mov	r0, r6
 8014766:	2300      	movs	r3, #0
 8014768:	f7ec f824 	bl	80007b4 <__aeabi_ldivmod>
 801476c:	2a00      	cmp	r2, #0
 801476e:	bfbc      	itt	lt
 8014770:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8014774:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8014778:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801477c:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8014780:	fbb2 f3f1 	udiv	r3, r2, r1
 8014784:	fb01 2213 	mls	r2, r1, r3, r2
 8014788:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801478c:	bfac      	ite	ge
 801478e:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8014792:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8014796:	60a3      	str	r3, [r4, #8]
 8014798:	fbb2 f3f1 	udiv	r3, r2, r1
 801479c:	fb01 2213 	mls	r2, r1, r3, r2
 80147a0:	6063      	str	r3, [r4, #4]
 80147a2:	6022      	str	r2, [r4, #0]
 80147a4:	1cc3      	adds	r3, r0, #3
 80147a6:	2207      	movs	r2, #7
 80147a8:	fb93 f2f2 	sdiv	r2, r3, r2
 80147ac:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80147b0:	1a9b      	subs	r3, r3, r2
 80147b2:	bf48      	it	mi
 80147b4:	3307      	addmi	r3, #7
 80147b6:	2800      	cmp	r0, #0
 80147b8:	61a3      	str	r3, [r4, #24]
 80147ba:	bfb8      	it	lt
 80147bc:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80147c0:	4936      	ldr	r1, [pc, #216]	; (801489c <gmtime_r+0x154>)
 80147c2:	bfae      	itee	ge
 80147c4:	fb90 f1f1 	sdivge	r1, r0, r1
 80147c8:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80147cc:	fb93 f1f1 	sdivlt	r1, r3, r1
 80147d0:	4b33      	ldr	r3, [pc, #204]	; (80148a0 <gmtime_r+0x158>)
 80147d2:	fb03 0001 	mla	r0, r3, r1, r0
 80147d6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80147da:	fbb0 f2f2 	udiv	r2, r0, r2
 80147de:	4402      	add	r2, r0
 80147e0:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80147e4:	fbb0 f3fc 	udiv	r3, r0, ip
 80147e8:	1ad2      	subs	r2, r2, r3
 80147ea:	f240 176d 	movw	r7, #365	; 0x16d
 80147ee:	4b2d      	ldr	r3, [pc, #180]	; (80148a4 <gmtime_r+0x15c>)
 80147f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80147f4:	2664      	movs	r6, #100	; 0x64
 80147f6:	1ad3      	subs	r3, r2, r3
 80147f8:	fbb3 f5f7 	udiv	r5, r3, r7
 80147fc:	fbb3 f3fc 	udiv	r3, r3, ip
 8014800:	fbb5 f2f6 	udiv	r2, r5, r6
 8014804:	1ad3      	subs	r3, r2, r3
 8014806:	4403      	add	r3, r0
 8014808:	fb07 3315 	mls	r3, r7, r5, r3
 801480c:	2099      	movs	r0, #153	; 0x99
 801480e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8014812:	f10c 0c02 	add.w	ip, ip, #2
 8014816:	f103 0e01 	add.w	lr, r3, #1
 801481a:	fbbc f7f0 	udiv	r7, ip, r0
 801481e:	4378      	muls	r0, r7
 8014820:	3002      	adds	r0, #2
 8014822:	f04f 0805 	mov.w	r8, #5
 8014826:	fbb0 f0f8 	udiv	r0, r0, r8
 801482a:	ebae 0000 	sub.w	r0, lr, r0
 801482e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8014832:	45f4      	cmp	ip, lr
 8014834:	bf94      	ite	ls
 8014836:	f04f 0c02 	movls.w	ip, #2
 801483a:	f06f 0c09 	mvnhi.w	ip, #9
 801483e:	4467      	add	r7, ip
 8014840:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8014844:	fb0c 5101 	mla	r1, ip, r1, r5
 8014848:	2f01      	cmp	r7, #1
 801484a:	bf98      	it	ls
 801484c:	3101      	addls	r1, #1
 801484e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8014852:	d30c      	bcc.n	801486e <gmtime_r+0x126>
 8014854:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8014858:	61e3      	str	r3, [r4, #28]
 801485a:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801485e:	2300      	movs	r3, #0
 8014860:	60e0      	str	r0, [r4, #12]
 8014862:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8014866:	6223      	str	r3, [r4, #32]
 8014868:	4620      	mov	r0, r4
 801486a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801486e:	f015 0f03 	tst.w	r5, #3
 8014872:	d102      	bne.n	801487a <gmtime_r+0x132>
 8014874:	fb06 5212 	mls	r2, r6, r2, r5
 8014878:	b95a      	cbnz	r2, 8014892 <gmtime_r+0x14a>
 801487a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801487e:	fbb5 f2f6 	udiv	r2, r5, r6
 8014882:	fb06 5212 	mls	r2, r6, r2, r5
 8014886:	fab2 f282 	clz	r2, r2
 801488a:	0952      	lsrs	r2, r2, #5
 801488c:	333b      	adds	r3, #59	; 0x3b
 801488e:	4413      	add	r3, r2
 8014890:	e7e2      	b.n	8014858 <gmtime_r+0x110>
 8014892:	2201      	movs	r2, #1
 8014894:	e7fa      	b.n	801488c <gmtime_r+0x144>
 8014896:	bf00      	nop
 8014898:	00015180 	.word	0x00015180
 801489c:	00023ab1 	.word	0x00023ab1
 80148a0:	fffdc54f 	.word	0xfffdc54f
 80148a4:	00023ab0 	.word	0x00023ab0

080148a8 <_isatty_r>:
 80148a8:	b538      	push	{r3, r4, r5, lr}
 80148aa:	4d06      	ldr	r5, [pc, #24]	; (80148c4 <_isatty_r+0x1c>)
 80148ac:	2300      	movs	r3, #0
 80148ae:	4604      	mov	r4, r0
 80148b0:	4608      	mov	r0, r1
 80148b2:	602b      	str	r3, [r5, #0]
 80148b4:	f7ec fac4 	bl	8000e40 <_isatty>
 80148b8:	1c43      	adds	r3, r0, #1
 80148ba:	d102      	bne.n	80148c2 <_isatty_r+0x1a>
 80148bc:	682b      	ldr	r3, [r5, #0]
 80148be:	b103      	cbz	r3, 80148c2 <_isatty_r+0x1a>
 80148c0:	6023      	str	r3, [r4, #0]
 80148c2:	bd38      	pop	{r3, r4, r5, pc}
 80148c4:	20000c84 	.word	0x20000c84

080148c8 <labs>:
 80148c8:	2800      	cmp	r0, #0
 80148ca:	bfb8      	it	lt
 80148cc:	4240      	neglt	r0, r0
 80148ce:	4770      	bx	lr

080148d0 <_lseek_r>:
 80148d0:	b538      	push	{r3, r4, r5, lr}
 80148d2:	4d07      	ldr	r5, [pc, #28]	; (80148f0 <_lseek_r+0x20>)
 80148d4:	4604      	mov	r4, r0
 80148d6:	4608      	mov	r0, r1
 80148d8:	4611      	mov	r1, r2
 80148da:	2200      	movs	r2, #0
 80148dc:	602a      	str	r2, [r5, #0]
 80148de:	461a      	mov	r2, r3
 80148e0:	f7ec fab9 	bl	8000e56 <_lseek>
 80148e4:	1c43      	adds	r3, r0, #1
 80148e6:	d102      	bne.n	80148ee <_lseek_r+0x1e>
 80148e8:	682b      	ldr	r3, [r5, #0]
 80148ea:	b103      	cbz	r3, 80148ee <_lseek_r+0x1e>
 80148ec:	6023      	str	r3, [r4, #0]
 80148ee:	bd38      	pop	{r3, r4, r5, pc}
 80148f0:	20000c84 	.word	0x20000c84

080148f4 <__ascii_mbtowc>:
 80148f4:	b082      	sub	sp, #8
 80148f6:	b901      	cbnz	r1, 80148fa <__ascii_mbtowc+0x6>
 80148f8:	a901      	add	r1, sp, #4
 80148fa:	b142      	cbz	r2, 801490e <__ascii_mbtowc+0x1a>
 80148fc:	b14b      	cbz	r3, 8014912 <__ascii_mbtowc+0x1e>
 80148fe:	7813      	ldrb	r3, [r2, #0]
 8014900:	600b      	str	r3, [r1, #0]
 8014902:	7812      	ldrb	r2, [r2, #0]
 8014904:	1e10      	subs	r0, r2, #0
 8014906:	bf18      	it	ne
 8014908:	2001      	movne	r0, #1
 801490a:	b002      	add	sp, #8
 801490c:	4770      	bx	lr
 801490e:	4610      	mov	r0, r2
 8014910:	e7fb      	b.n	801490a <__ascii_mbtowc+0x16>
 8014912:	f06f 0001 	mvn.w	r0, #1
 8014916:	e7f8      	b.n	801490a <__ascii_mbtowc+0x16>

08014918 <__malloc_lock>:
 8014918:	4801      	ldr	r0, [pc, #4]	; (8014920 <__malloc_lock+0x8>)
 801491a:	f7fe b9f8 	b.w	8012d0e <__retarget_lock_acquire_recursive>
 801491e:	bf00      	nop
 8014920:	20000c7c 	.word	0x20000c7c

08014924 <__malloc_unlock>:
 8014924:	4801      	ldr	r0, [pc, #4]	; (801492c <__malloc_unlock+0x8>)
 8014926:	f7fe b9f4 	b.w	8012d12 <__retarget_lock_release_recursive>
 801492a:	bf00      	nop
 801492c:	20000c7c 	.word	0x20000c7c

08014930 <_realloc_r>:
 8014930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014932:	4607      	mov	r7, r0
 8014934:	4614      	mov	r4, r2
 8014936:	460e      	mov	r6, r1
 8014938:	b921      	cbnz	r1, 8014944 <_realloc_r+0x14>
 801493a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801493e:	4611      	mov	r1, r2
 8014940:	f7fe bad2 	b.w	8012ee8 <_malloc_r>
 8014944:	b922      	cbnz	r2, 8014950 <_realloc_r+0x20>
 8014946:	f7fe fa7f 	bl	8012e48 <_free_r>
 801494a:	4625      	mov	r5, r4
 801494c:	4628      	mov	r0, r5
 801494e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014950:	f000 fd66 	bl	8015420 <_malloc_usable_size_r>
 8014954:	42a0      	cmp	r0, r4
 8014956:	d20f      	bcs.n	8014978 <_realloc_r+0x48>
 8014958:	4621      	mov	r1, r4
 801495a:	4638      	mov	r0, r7
 801495c:	f7fe fac4 	bl	8012ee8 <_malloc_r>
 8014960:	4605      	mov	r5, r0
 8014962:	2800      	cmp	r0, #0
 8014964:	d0f2      	beq.n	801494c <_realloc_r+0x1c>
 8014966:	4631      	mov	r1, r6
 8014968:	4622      	mov	r2, r4
 801496a:	f7fe fa47 	bl	8012dfc <memcpy>
 801496e:	4631      	mov	r1, r6
 8014970:	4638      	mov	r0, r7
 8014972:	f7fe fa69 	bl	8012e48 <_free_r>
 8014976:	e7e9      	b.n	801494c <_realloc_r+0x1c>
 8014978:	4635      	mov	r5, r6
 801497a:	e7e7      	b.n	801494c <_realloc_r+0x1c>

0801497c <__ssputs_r>:
 801497c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014980:	688e      	ldr	r6, [r1, #8]
 8014982:	429e      	cmp	r6, r3
 8014984:	4682      	mov	sl, r0
 8014986:	460c      	mov	r4, r1
 8014988:	4690      	mov	r8, r2
 801498a:	461f      	mov	r7, r3
 801498c:	d838      	bhi.n	8014a00 <__ssputs_r+0x84>
 801498e:	898a      	ldrh	r2, [r1, #12]
 8014990:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014994:	d032      	beq.n	80149fc <__ssputs_r+0x80>
 8014996:	6825      	ldr	r5, [r4, #0]
 8014998:	6909      	ldr	r1, [r1, #16]
 801499a:	eba5 0901 	sub.w	r9, r5, r1
 801499e:	6965      	ldr	r5, [r4, #20]
 80149a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80149a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80149a8:	3301      	adds	r3, #1
 80149aa:	444b      	add	r3, r9
 80149ac:	106d      	asrs	r5, r5, #1
 80149ae:	429d      	cmp	r5, r3
 80149b0:	bf38      	it	cc
 80149b2:	461d      	movcc	r5, r3
 80149b4:	0553      	lsls	r3, r2, #21
 80149b6:	d531      	bpl.n	8014a1c <__ssputs_r+0xa0>
 80149b8:	4629      	mov	r1, r5
 80149ba:	f7fe fa95 	bl	8012ee8 <_malloc_r>
 80149be:	4606      	mov	r6, r0
 80149c0:	b950      	cbnz	r0, 80149d8 <__ssputs_r+0x5c>
 80149c2:	230c      	movs	r3, #12
 80149c4:	f8ca 3000 	str.w	r3, [sl]
 80149c8:	89a3      	ldrh	r3, [r4, #12]
 80149ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149ce:	81a3      	strh	r3, [r4, #12]
 80149d0:	f04f 30ff 	mov.w	r0, #4294967295
 80149d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149d8:	6921      	ldr	r1, [r4, #16]
 80149da:	464a      	mov	r2, r9
 80149dc:	f7fe fa0e 	bl	8012dfc <memcpy>
 80149e0:	89a3      	ldrh	r3, [r4, #12]
 80149e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80149e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80149ea:	81a3      	strh	r3, [r4, #12]
 80149ec:	6126      	str	r6, [r4, #16]
 80149ee:	6165      	str	r5, [r4, #20]
 80149f0:	444e      	add	r6, r9
 80149f2:	eba5 0509 	sub.w	r5, r5, r9
 80149f6:	6026      	str	r6, [r4, #0]
 80149f8:	60a5      	str	r5, [r4, #8]
 80149fa:	463e      	mov	r6, r7
 80149fc:	42be      	cmp	r6, r7
 80149fe:	d900      	bls.n	8014a02 <__ssputs_r+0x86>
 8014a00:	463e      	mov	r6, r7
 8014a02:	4632      	mov	r2, r6
 8014a04:	6820      	ldr	r0, [r4, #0]
 8014a06:	4641      	mov	r1, r8
 8014a08:	f000 fcf0 	bl	80153ec <memmove>
 8014a0c:	68a3      	ldr	r3, [r4, #8]
 8014a0e:	6822      	ldr	r2, [r4, #0]
 8014a10:	1b9b      	subs	r3, r3, r6
 8014a12:	4432      	add	r2, r6
 8014a14:	60a3      	str	r3, [r4, #8]
 8014a16:	6022      	str	r2, [r4, #0]
 8014a18:	2000      	movs	r0, #0
 8014a1a:	e7db      	b.n	80149d4 <__ssputs_r+0x58>
 8014a1c:	462a      	mov	r2, r5
 8014a1e:	f7ff ff87 	bl	8014930 <_realloc_r>
 8014a22:	4606      	mov	r6, r0
 8014a24:	2800      	cmp	r0, #0
 8014a26:	d1e1      	bne.n	80149ec <__ssputs_r+0x70>
 8014a28:	6921      	ldr	r1, [r4, #16]
 8014a2a:	4650      	mov	r0, sl
 8014a2c:	f7fe fa0c 	bl	8012e48 <_free_r>
 8014a30:	e7c7      	b.n	80149c2 <__ssputs_r+0x46>
	...

08014a34 <_svfiprintf_r>:
 8014a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a38:	4698      	mov	r8, r3
 8014a3a:	898b      	ldrh	r3, [r1, #12]
 8014a3c:	061b      	lsls	r3, r3, #24
 8014a3e:	b09d      	sub	sp, #116	; 0x74
 8014a40:	4607      	mov	r7, r0
 8014a42:	460d      	mov	r5, r1
 8014a44:	4614      	mov	r4, r2
 8014a46:	d50e      	bpl.n	8014a66 <_svfiprintf_r+0x32>
 8014a48:	690b      	ldr	r3, [r1, #16]
 8014a4a:	b963      	cbnz	r3, 8014a66 <_svfiprintf_r+0x32>
 8014a4c:	2140      	movs	r1, #64	; 0x40
 8014a4e:	f7fe fa4b 	bl	8012ee8 <_malloc_r>
 8014a52:	6028      	str	r0, [r5, #0]
 8014a54:	6128      	str	r0, [r5, #16]
 8014a56:	b920      	cbnz	r0, 8014a62 <_svfiprintf_r+0x2e>
 8014a58:	230c      	movs	r3, #12
 8014a5a:	603b      	str	r3, [r7, #0]
 8014a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a60:	e0d1      	b.n	8014c06 <_svfiprintf_r+0x1d2>
 8014a62:	2340      	movs	r3, #64	; 0x40
 8014a64:	616b      	str	r3, [r5, #20]
 8014a66:	2300      	movs	r3, #0
 8014a68:	9309      	str	r3, [sp, #36]	; 0x24
 8014a6a:	2320      	movs	r3, #32
 8014a6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014a70:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a74:	2330      	movs	r3, #48	; 0x30
 8014a76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014c20 <_svfiprintf_r+0x1ec>
 8014a7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014a7e:	f04f 0901 	mov.w	r9, #1
 8014a82:	4623      	mov	r3, r4
 8014a84:	469a      	mov	sl, r3
 8014a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a8a:	b10a      	cbz	r2, 8014a90 <_svfiprintf_r+0x5c>
 8014a8c:	2a25      	cmp	r2, #37	; 0x25
 8014a8e:	d1f9      	bne.n	8014a84 <_svfiprintf_r+0x50>
 8014a90:	ebba 0b04 	subs.w	fp, sl, r4
 8014a94:	d00b      	beq.n	8014aae <_svfiprintf_r+0x7a>
 8014a96:	465b      	mov	r3, fp
 8014a98:	4622      	mov	r2, r4
 8014a9a:	4629      	mov	r1, r5
 8014a9c:	4638      	mov	r0, r7
 8014a9e:	f7ff ff6d 	bl	801497c <__ssputs_r>
 8014aa2:	3001      	adds	r0, #1
 8014aa4:	f000 80aa 	beq.w	8014bfc <_svfiprintf_r+0x1c8>
 8014aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014aaa:	445a      	add	r2, fp
 8014aac:	9209      	str	r2, [sp, #36]	; 0x24
 8014aae:	f89a 3000 	ldrb.w	r3, [sl]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	f000 80a2 	beq.w	8014bfc <_svfiprintf_r+0x1c8>
 8014ab8:	2300      	movs	r3, #0
 8014aba:	f04f 32ff 	mov.w	r2, #4294967295
 8014abe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ac2:	f10a 0a01 	add.w	sl, sl, #1
 8014ac6:	9304      	str	r3, [sp, #16]
 8014ac8:	9307      	str	r3, [sp, #28]
 8014aca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ace:	931a      	str	r3, [sp, #104]	; 0x68
 8014ad0:	4654      	mov	r4, sl
 8014ad2:	2205      	movs	r2, #5
 8014ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ad8:	4851      	ldr	r0, [pc, #324]	; (8014c20 <_svfiprintf_r+0x1ec>)
 8014ada:	f7eb fbc1 	bl	8000260 <memchr>
 8014ade:	9a04      	ldr	r2, [sp, #16]
 8014ae0:	b9d8      	cbnz	r0, 8014b1a <_svfiprintf_r+0xe6>
 8014ae2:	06d0      	lsls	r0, r2, #27
 8014ae4:	bf44      	itt	mi
 8014ae6:	2320      	movmi	r3, #32
 8014ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014aec:	0711      	lsls	r1, r2, #28
 8014aee:	bf44      	itt	mi
 8014af0:	232b      	movmi	r3, #43	; 0x2b
 8014af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014af6:	f89a 3000 	ldrb.w	r3, [sl]
 8014afa:	2b2a      	cmp	r3, #42	; 0x2a
 8014afc:	d015      	beq.n	8014b2a <_svfiprintf_r+0xf6>
 8014afe:	9a07      	ldr	r2, [sp, #28]
 8014b00:	4654      	mov	r4, sl
 8014b02:	2000      	movs	r0, #0
 8014b04:	f04f 0c0a 	mov.w	ip, #10
 8014b08:	4621      	mov	r1, r4
 8014b0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b0e:	3b30      	subs	r3, #48	; 0x30
 8014b10:	2b09      	cmp	r3, #9
 8014b12:	d94e      	bls.n	8014bb2 <_svfiprintf_r+0x17e>
 8014b14:	b1b0      	cbz	r0, 8014b44 <_svfiprintf_r+0x110>
 8014b16:	9207      	str	r2, [sp, #28]
 8014b18:	e014      	b.n	8014b44 <_svfiprintf_r+0x110>
 8014b1a:	eba0 0308 	sub.w	r3, r0, r8
 8014b1e:	fa09 f303 	lsl.w	r3, r9, r3
 8014b22:	4313      	orrs	r3, r2
 8014b24:	9304      	str	r3, [sp, #16]
 8014b26:	46a2      	mov	sl, r4
 8014b28:	e7d2      	b.n	8014ad0 <_svfiprintf_r+0x9c>
 8014b2a:	9b03      	ldr	r3, [sp, #12]
 8014b2c:	1d19      	adds	r1, r3, #4
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	9103      	str	r1, [sp, #12]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	bfbb      	ittet	lt
 8014b36:	425b      	neglt	r3, r3
 8014b38:	f042 0202 	orrlt.w	r2, r2, #2
 8014b3c:	9307      	strge	r3, [sp, #28]
 8014b3e:	9307      	strlt	r3, [sp, #28]
 8014b40:	bfb8      	it	lt
 8014b42:	9204      	strlt	r2, [sp, #16]
 8014b44:	7823      	ldrb	r3, [r4, #0]
 8014b46:	2b2e      	cmp	r3, #46	; 0x2e
 8014b48:	d10c      	bne.n	8014b64 <_svfiprintf_r+0x130>
 8014b4a:	7863      	ldrb	r3, [r4, #1]
 8014b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8014b4e:	d135      	bne.n	8014bbc <_svfiprintf_r+0x188>
 8014b50:	9b03      	ldr	r3, [sp, #12]
 8014b52:	1d1a      	adds	r2, r3, #4
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	9203      	str	r2, [sp, #12]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	bfb8      	it	lt
 8014b5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014b60:	3402      	adds	r4, #2
 8014b62:	9305      	str	r3, [sp, #20]
 8014b64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014c30 <_svfiprintf_r+0x1fc>
 8014b68:	7821      	ldrb	r1, [r4, #0]
 8014b6a:	2203      	movs	r2, #3
 8014b6c:	4650      	mov	r0, sl
 8014b6e:	f7eb fb77 	bl	8000260 <memchr>
 8014b72:	b140      	cbz	r0, 8014b86 <_svfiprintf_r+0x152>
 8014b74:	2340      	movs	r3, #64	; 0x40
 8014b76:	eba0 000a 	sub.w	r0, r0, sl
 8014b7a:	fa03 f000 	lsl.w	r0, r3, r0
 8014b7e:	9b04      	ldr	r3, [sp, #16]
 8014b80:	4303      	orrs	r3, r0
 8014b82:	3401      	adds	r4, #1
 8014b84:	9304      	str	r3, [sp, #16]
 8014b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b8a:	4826      	ldr	r0, [pc, #152]	; (8014c24 <_svfiprintf_r+0x1f0>)
 8014b8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014b90:	2206      	movs	r2, #6
 8014b92:	f7eb fb65 	bl	8000260 <memchr>
 8014b96:	2800      	cmp	r0, #0
 8014b98:	d038      	beq.n	8014c0c <_svfiprintf_r+0x1d8>
 8014b9a:	4b23      	ldr	r3, [pc, #140]	; (8014c28 <_svfiprintf_r+0x1f4>)
 8014b9c:	bb1b      	cbnz	r3, 8014be6 <_svfiprintf_r+0x1b2>
 8014b9e:	9b03      	ldr	r3, [sp, #12]
 8014ba0:	3307      	adds	r3, #7
 8014ba2:	f023 0307 	bic.w	r3, r3, #7
 8014ba6:	3308      	adds	r3, #8
 8014ba8:	9303      	str	r3, [sp, #12]
 8014baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bac:	4433      	add	r3, r6
 8014bae:	9309      	str	r3, [sp, #36]	; 0x24
 8014bb0:	e767      	b.n	8014a82 <_svfiprintf_r+0x4e>
 8014bb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8014bb6:	460c      	mov	r4, r1
 8014bb8:	2001      	movs	r0, #1
 8014bba:	e7a5      	b.n	8014b08 <_svfiprintf_r+0xd4>
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	3401      	adds	r4, #1
 8014bc0:	9305      	str	r3, [sp, #20]
 8014bc2:	4619      	mov	r1, r3
 8014bc4:	f04f 0c0a 	mov.w	ip, #10
 8014bc8:	4620      	mov	r0, r4
 8014bca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014bce:	3a30      	subs	r2, #48	; 0x30
 8014bd0:	2a09      	cmp	r2, #9
 8014bd2:	d903      	bls.n	8014bdc <_svfiprintf_r+0x1a8>
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d0c5      	beq.n	8014b64 <_svfiprintf_r+0x130>
 8014bd8:	9105      	str	r1, [sp, #20]
 8014bda:	e7c3      	b.n	8014b64 <_svfiprintf_r+0x130>
 8014bdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8014be0:	4604      	mov	r4, r0
 8014be2:	2301      	movs	r3, #1
 8014be4:	e7f0      	b.n	8014bc8 <_svfiprintf_r+0x194>
 8014be6:	ab03      	add	r3, sp, #12
 8014be8:	9300      	str	r3, [sp, #0]
 8014bea:	462a      	mov	r2, r5
 8014bec:	4b0f      	ldr	r3, [pc, #60]	; (8014c2c <_svfiprintf_r+0x1f8>)
 8014bee:	a904      	add	r1, sp, #16
 8014bf0:	4638      	mov	r0, r7
 8014bf2:	f3af 8000 	nop.w
 8014bf6:	1c42      	adds	r2, r0, #1
 8014bf8:	4606      	mov	r6, r0
 8014bfa:	d1d6      	bne.n	8014baa <_svfiprintf_r+0x176>
 8014bfc:	89ab      	ldrh	r3, [r5, #12]
 8014bfe:	065b      	lsls	r3, r3, #25
 8014c00:	f53f af2c 	bmi.w	8014a5c <_svfiprintf_r+0x28>
 8014c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c06:	b01d      	add	sp, #116	; 0x74
 8014c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c0c:	ab03      	add	r3, sp, #12
 8014c0e:	9300      	str	r3, [sp, #0]
 8014c10:	462a      	mov	r2, r5
 8014c12:	4b06      	ldr	r3, [pc, #24]	; (8014c2c <_svfiprintf_r+0x1f8>)
 8014c14:	a904      	add	r1, sp, #16
 8014c16:	4638      	mov	r0, r7
 8014c18:	f000 f9d4 	bl	8014fc4 <_printf_i>
 8014c1c:	e7eb      	b.n	8014bf6 <_svfiprintf_r+0x1c2>
 8014c1e:	bf00      	nop
 8014c20:	080195bb 	.word	0x080195bb
 8014c24:	080195c5 	.word	0x080195c5
 8014c28:	00000000 	.word	0x00000000
 8014c2c:	0801497d 	.word	0x0801497d
 8014c30:	080195c1 	.word	0x080195c1

08014c34 <__sfputc_r>:
 8014c34:	6893      	ldr	r3, [r2, #8]
 8014c36:	3b01      	subs	r3, #1
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	b410      	push	{r4}
 8014c3c:	6093      	str	r3, [r2, #8]
 8014c3e:	da08      	bge.n	8014c52 <__sfputc_r+0x1e>
 8014c40:	6994      	ldr	r4, [r2, #24]
 8014c42:	42a3      	cmp	r3, r4
 8014c44:	db01      	blt.n	8014c4a <__sfputc_r+0x16>
 8014c46:	290a      	cmp	r1, #10
 8014c48:	d103      	bne.n	8014c52 <__sfputc_r+0x1e>
 8014c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c4e:	f7ff bb63 	b.w	8014318 <__swbuf_r>
 8014c52:	6813      	ldr	r3, [r2, #0]
 8014c54:	1c58      	adds	r0, r3, #1
 8014c56:	6010      	str	r0, [r2, #0]
 8014c58:	7019      	strb	r1, [r3, #0]
 8014c5a:	4608      	mov	r0, r1
 8014c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c60:	4770      	bx	lr

08014c62 <__sfputs_r>:
 8014c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c64:	4606      	mov	r6, r0
 8014c66:	460f      	mov	r7, r1
 8014c68:	4614      	mov	r4, r2
 8014c6a:	18d5      	adds	r5, r2, r3
 8014c6c:	42ac      	cmp	r4, r5
 8014c6e:	d101      	bne.n	8014c74 <__sfputs_r+0x12>
 8014c70:	2000      	movs	r0, #0
 8014c72:	e007      	b.n	8014c84 <__sfputs_r+0x22>
 8014c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c78:	463a      	mov	r2, r7
 8014c7a:	4630      	mov	r0, r6
 8014c7c:	f7ff ffda 	bl	8014c34 <__sfputc_r>
 8014c80:	1c43      	adds	r3, r0, #1
 8014c82:	d1f3      	bne.n	8014c6c <__sfputs_r+0xa>
 8014c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014c88 <_vfiprintf_r>:
 8014c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c8c:	460d      	mov	r5, r1
 8014c8e:	b09d      	sub	sp, #116	; 0x74
 8014c90:	4614      	mov	r4, r2
 8014c92:	4698      	mov	r8, r3
 8014c94:	4606      	mov	r6, r0
 8014c96:	b118      	cbz	r0, 8014ca0 <_vfiprintf_r+0x18>
 8014c98:	6983      	ldr	r3, [r0, #24]
 8014c9a:	b90b      	cbnz	r3, 8014ca0 <_vfiprintf_r+0x18>
 8014c9c:	f7fd fc84 	bl	80125a8 <__sinit>
 8014ca0:	4b89      	ldr	r3, [pc, #548]	; (8014ec8 <_vfiprintf_r+0x240>)
 8014ca2:	429d      	cmp	r5, r3
 8014ca4:	d11b      	bne.n	8014cde <_vfiprintf_r+0x56>
 8014ca6:	6875      	ldr	r5, [r6, #4]
 8014ca8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014caa:	07d9      	lsls	r1, r3, #31
 8014cac:	d405      	bmi.n	8014cba <_vfiprintf_r+0x32>
 8014cae:	89ab      	ldrh	r3, [r5, #12]
 8014cb0:	059a      	lsls	r2, r3, #22
 8014cb2:	d402      	bmi.n	8014cba <_vfiprintf_r+0x32>
 8014cb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014cb6:	f7fe f82a 	bl	8012d0e <__retarget_lock_acquire_recursive>
 8014cba:	89ab      	ldrh	r3, [r5, #12]
 8014cbc:	071b      	lsls	r3, r3, #28
 8014cbe:	d501      	bpl.n	8014cc4 <_vfiprintf_r+0x3c>
 8014cc0:	692b      	ldr	r3, [r5, #16]
 8014cc2:	b9eb      	cbnz	r3, 8014d00 <_vfiprintf_r+0x78>
 8014cc4:	4629      	mov	r1, r5
 8014cc6:	4630      	mov	r0, r6
 8014cc8:	f7ff fb8a 	bl	80143e0 <__swsetup_r>
 8014ccc:	b1c0      	cbz	r0, 8014d00 <_vfiprintf_r+0x78>
 8014cce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014cd0:	07dc      	lsls	r4, r3, #31
 8014cd2:	d50e      	bpl.n	8014cf2 <_vfiprintf_r+0x6a>
 8014cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8014cd8:	b01d      	add	sp, #116	; 0x74
 8014cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cde:	4b7b      	ldr	r3, [pc, #492]	; (8014ecc <_vfiprintf_r+0x244>)
 8014ce0:	429d      	cmp	r5, r3
 8014ce2:	d101      	bne.n	8014ce8 <_vfiprintf_r+0x60>
 8014ce4:	68b5      	ldr	r5, [r6, #8]
 8014ce6:	e7df      	b.n	8014ca8 <_vfiprintf_r+0x20>
 8014ce8:	4b79      	ldr	r3, [pc, #484]	; (8014ed0 <_vfiprintf_r+0x248>)
 8014cea:	429d      	cmp	r5, r3
 8014cec:	bf08      	it	eq
 8014cee:	68f5      	ldreq	r5, [r6, #12]
 8014cf0:	e7da      	b.n	8014ca8 <_vfiprintf_r+0x20>
 8014cf2:	89ab      	ldrh	r3, [r5, #12]
 8014cf4:	0598      	lsls	r0, r3, #22
 8014cf6:	d4ed      	bmi.n	8014cd4 <_vfiprintf_r+0x4c>
 8014cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014cfa:	f7fe f80a 	bl	8012d12 <__retarget_lock_release_recursive>
 8014cfe:	e7e9      	b.n	8014cd4 <_vfiprintf_r+0x4c>
 8014d00:	2300      	movs	r3, #0
 8014d02:	9309      	str	r3, [sp, #36]	; 0x24
 8014d04:	2320      	movs	r3, #32
 8014d06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d0e:	2330      	movs	r3, #48	; 0x30
 8014d10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014ed4 <_vfiprintf_r+0x24c>
 8014d14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014d18:	f04f 0901 	mov.w	r9, #1
 8014d1c:	4623      	mov	r3, r4
 8014d1e:	469a      	mov	sl, r3
 8014d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d24:	b10a      	cbz	r2, 8014d2a <_vfiprintf_r+0xa2>
 8014d26:	2a25      	cmp	r2, #37	; 0x25
 8014d28:	d1f9      	bne.n	8014d1e <_vfiprintf_r+0x96>
 8014d2a:	ebba 0b04 	subs.w	fp, sl, r4
 8014d2e:	d00b      	beq.n	8014d48 <_vfiprintf_r+0xc0>
 8014d30:	465b      	mov	r3, fp
 8014d32:	4622      	mov	r2, r4
 8014d34:	4629      	mov	r1, r5
 8014d36:	4630      	mov	r0, r6
 8014d38:	f7ff ff93 	bl	8014c62 <__sfputs_r>
 8014d3c:	3001      	adds	r0, #1
 8014d3e:	f000 80aa 	beq.w	8014e96 <_vfiprintf_r+0x20e>
 8014d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d44:	445a      	add	r2, fp
 8014d46:	9209      	str	r2, [sp, #36]	; 0x24
 8014d48:	f89a 3000 	ldrb.w	r3, [sl]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	f000 80a2 	beq.w	8014e96 <_vfiprintf_r+0x20e>
 8014d52:	2300      	movs	r3, #0
 8014d54:	f04f 32ff 	mov.w	r2, #4294967295
 8014d58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d5c:	f10a 0a01 	add.w	sl, sl, #1
 8014d60:	9304      	str	r3, [sp, #16]
 8014d62:	9307      	str	r3, [sp, #28]
 8014d64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014d68:	931a      	str	r3, [sp, #104]	; 0x68
 8014d6a:	4654      	mov	r4, sl
 8014d6c:	2205      	movs	r2, #5
 8014d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d72:	4858      	ldr	r0, [pc, #352]	; (8014ed4 <_vfiprintf_r+0x24c>)
 8014d74:	f7eb fa74 	bl	8000260 <memchr>
 8014d78:	9a04      	ldr	r2, [sp, #16]
 8014d7a:	b9d8      	cbnz	r0, 8014db4 <_vfiprintf_r+0x12c>
 8014d7c:	06d1      	lsls	r1, r2, #27
 8014d7e:	bf44      	itt	mi
 8014d80:	2320      	movmi	r3, #32
 8014d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d86:	0713      	lsls	r3, r2, #28
 8014d88:	bf44      	itt	mi
 8014d8a:	232b      	movmi	r3, #43	; 0x2b
 8014d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d90:	f89a 3000 	ldrb.w	r3, [sl]
 8014d94:	2b2a      	cmp	r3, #42	; 0x2a
 8014d96:	d015      	beq.n	8014dc4 <_vfiprintf_r+0x13c>
 8014d98:	9a07      	ldr	r2, [sp, #28]
 8014d9a:	4654      	mov	r4, sl
 8014d9c:	2000      	movs	r0, #0
 8014d9e:	f04f 0c0a 	mov.w	ip, #10
 8014da2:	4621      	mov	r1, r4
 8014da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014da8:	3b30      	subs	r3, #48	; 0x30
 8014daa:	2b09      	cmp	r3, #9
 8014dac:	d94e      	bls.n	8014e4c <_vfiprintf_r+0x1c4>
 8014dae:	b1b0      	cbz	r0, 8014dde <_vfiprintf_r+0x156>
 8014db0:	9207      	str	r2, [sp, #28]
 8014db2:	e014      	b.n	8014dde <_vfiprintf_r+0x156>
 8014db4:	eba0 0308 	sub.w	r3, r0, r8
 8014db8:	fa09 f303 	lsl.w	r3, r9, r3
 8014dbc:	4313      	orrs	r3, r2
 8014dbe:	9304      	str	r3, [sp, #16]
 8014dc0:	46a2      	mov	sl, r4
 8014dc2:	e7d2      	b.n	8014d6a <_vfiprintf_r+0xe2>
 8014dc4:	9b03      	ldr	r3, [sp, #12]
 8014dc6:	1d19      	adds	r1, r3, #4
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	9103      	str	r1, [sp, #12]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	bfbb      	ittet	lt
 8014dd0:	425b      	neglt	r3, r3
 8014dd2:	f042 0202 	orrlt.w	r2, r2, #2
 8014dd6:	9307      	strge	r3, [sp, #28]
 8014dd8:	9307      	strlt	r3, [sp, #28]
 8014dda:	bfb8      	it	lt
 8014ddc:	9204      	strlt	r2, [sp, #16]
 8014dde:	7823      	ldrb	r3, [r4, #0]
 8014de0:	2b2e      	cmp	r3, #46	; 0x2e
 8014de2:	d10c      	bne.n	8014dfe <_vfiprintf_r+0x176>
 8014de4:	7863      	ldrb	r3, [r4, #1]
 8014de6:	2b2a      	cmp	r3, #42	; 0x2a
 8014de8:	d135      	bne.n	8014e56 <_vfiprintf_r+0x1ce>
 8014dea:	9b03      	ldr	r3, [sp, #12]
 8014dec:	1d1a      	adds	r2, r3, #4
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	9203      	str	r2, [sp, #12]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	bfb8      	it	lt
 8014df6:	f04f 33ff 	movlt.w	r3, #4294967295
 8014dfa:	3402      	adds	r4, #2
 8014dfc:	9305      	str	r3, [sp, #20]
 8014dfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014ee4 <_vfiprintf_r+0x25c>
 8014e02:	7821      	ldrb	r1, [r4, #0]
 8014e04:	2203      	movs	r2, #3
 8014e06:	4650      	mov	r0, sl
 8014e08:	f7eb fa2a 	bl	8000260 <memchr>
 8014e0c:	b140      	cbz	r0, 8014e20 <_vfiprintf_r+0x198>
 8014e0e:	2340      	movs	r3, #64	; 0x40
 8014e10:	eba0 000a 	sub.w	r0, r0, sl
 8014e14:	fa03 f000 	lsl.w	r0, r3, r0
 8014e18:	9b04      	ldr	r3, [sp, #16]
 8014e1a:	4303      	orrs	r3, r0
 8014e1c:	3401      	adds	r4, #1
 8014e1e:	9304      	str	r3, [sp, #16]
 8014e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e24:	482c      	ldr	r0, [pc, #176]	; (8014ed8 <_vfiprintf_r+0x250>)
 8014e26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014e2a:	2206      	movs	r2, #6
 8014e2c:	f7eb fa18 	bl	8000260 <memchr>
 8014e30:	2800      	cmp	r0, #0
 8014e32:	d03f      	beq.n	8014eb4 <_vfiprintf_r+0x22c>
 8014e34:	4b29      	ldr	r3, [pc, #164]	; (8014edc <_vfiprintf_r+0x254>)
 8014e36:	bb1b      	cbnz	r3, 8014e80 <_vfiprintf_r+0x1f8>
 8014e38:	9b03      	ldr	r3, [sp, #12]
 8014e3a:	3307      	adds	r3, #7
 8014e3c:	f023 0307 	bic.w	r3, r3, #7
 8014e40:	3308      	adds	r3, #8
 8014e42:	9303      	str	r3, [sp, #12]
 8014e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e46:	443b      	add	r3, r7
 8014e48:	9309      	str	r3, [sp, #36]	; 0x24
 8014e4a:	e767      	b.n	8014d1c <_vfiprintf_r+0x94>
 8014e4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e50:	460c      	mov	r4, r1
 8014e52:	2001      	movs	r0, #1
 8014e54:	e7a5      	b.n	8014da2 <_vfiprintf_r+0x11a>
 8014e56:	2300      	movs	r3, #0
 8014e58:	3401      	adds	r4, #1
 8014e5a:	9305      	str	r3, [sp, #20]
 8014e5c:	4619      	mov	r1, r3
 8014e5e:	f04f 0c0a 	mov.w	ip, #10
 8014e62:	4620      	mov	r0, r4
 8014e64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e68:	3a30      	subs	r2, #48	; 0x30
 8014e6a:	2a09      	cmp	r2, #9
 8014e6c:	d903      	bls.n	8014e76 <_vfiprintf_r+0x1ee>
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d0c5      	beq.n	8014dfe <_vfiprintf_r+0x176>
 8014e72:	9105      	str	r1, [sp, #20]
 8014e74:	e7c3      	b.n	8014dfe <_vfiprintf_r+0x176>
 8014e76:	fb0c 2101 	mla	r1, ip, r1, r2
 8014e7a:	4604      	mov	r4, r0
 8014e7c:	2301      	movs	r3, #1
 8014e7e:	e7f0      	b.n	8014e62 <_vfiprintf_r+0x1da>
 8014e80:	ab03      	add	r3, sp, #12
 8014e82:	9300      	str	r3, [sp, #0]
 8014e84:	462a      	mov	r2, r5
 8014e86:	4b16      	ldr	r3, [pc, #88]	; (8014ee0 <_vfiprintf_r+0x258>)
 8014e88:	a904      	add	r1, sp, #16
 8014e8a:	4630      	mov	r0, r6
 8014e8c:	f3af 8000 	nop.w
 8014e90:	4607      	mov	r7, r0
 8014e92:	1c78      	adds	r0, r7, #1
 8014e94:	d1d6      	bne.n	8014e44 <_vfiprintf_r+0x1bc>
 8014e96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e98:	07d9      	lsls	r1, r3, #31
 8014e9a:	d405      	bmi.n	8014ea8 <_vfiprintf_r+0x220>
 8014e9c:	89ab      	ldrh	r3, [r5, #12]
 8014e9e:	059a      	lsls	r2, r3, #22
 8014ea0:	d402      	bmi.n	8014ea8 <_vfiprintf_r+0x220>
 8014ea2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ea4:	f7fd ff35 	bl	8012d12 <__retarget_lock_release_recursive>
 8014ea8:	89ab      	ldrh	r3, [r5, #12]
 8014eaa:	065b      	lsls	r3, r3, #25
 8014eac:	f53f af12 	bmi.w	8014cd4 <_vfiprintf_r+0x4c>
 8014eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014eb2:	e711      	b.n	8014cd8 <_vfiprintf_r+0x50>
 8014eb4:	ab03      	add	r3, sp, #12
 8014eb6:	9300      	str	r3, [sp, #0]
 8014eb8:	462a      	mov	r2, r5
 8014eba:	4b09      	ldr	r3, [pc, #36]	; (8014ee0 <_vfiprintf_r+0x258>)
 8014ebc:	a904      	add	r1, sp, #16
 8014ebe:	4630      	mov	r0, r6
 8014ec0:	f000 f880 	bl	8014fc4 <_printf_i>
 8014ec4:	e7e4      	b.n	8014e90 <_vfiprintf_r+0x208>
 8014ec6:	bf00      	nop
 8014ec8:	0801903c 	.word	0x0801903c
 8014ecc:	0801905c 	.word	0x0801905c
 8014ed0:	0801901c 	.word	0x0801901c
 8014ed4:	080195bb 	.word	0x080195bb
 8014ed8:	080195c5 	.word	0x080195c5
 8014edc:	00000000 	.word	0x00000000
 8014ee0:	08014c63 	.word	0x08014c63
 8014ee4:	080195c1 	.word	0x080195c1

08014ee8 <_printf_common>:
 8014ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014eec:	4616      	mov	r6, r2
 8014eee:	4699      	mov	r9, r3
 8014ef0:	688a      	ldr	r2, [r1, #8]
 8014ef2:	690b      	ldr	r3, [r1, #16]
 8014ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014ef8:	4293      	cmp	r3, r2
 8014efa:	bfb8      	it	lt
 8014efc:	4613      	movlt	r3, r2
 8014efe:	6033      	str	r3, [r6, #0]
 8014f00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014f04:	4607      	mov	r7, r0
 8014f06:	460c      	mov	r4, r1
 8014f08:	b10a      	cbz	r2, 8014f0e <_printf_common+0x26>
 8014f0a:	3301      	adds	r3, #1
 8014f0c:	6033      	str	r3, [r6, #0]
 8014f0e:	6823      	ldr	r3, [r4, #0]
 8014f10:	0699      	lsls	r1, r3, #26
 8014f12:	bf42      	ittt	mi
 8014f14:	6833      	ldrmi	r3, [r6, #0]
 8014f16:	3302      	addmi	r3, #2
 8014f18:	6033      	strmi	r3, [r6, #0]
 8014f1a:	6825      	ldr	r5, [r4, #0]
 8014f1c:	f015 0506 	ands.w	r5, r5, #6
 8014f20:	d106      	bne.n	8014f30 <_printf_common+0x48>
 8014f22:	f104 0a19 	add.w	sl, r4, #25
 8014f26:	68e3      	ldr	r3, [r4, #12]
 8014f28:	6832      	ldr	r2, [r6, #0]
 8014f2a:	1a9b      	subs	r3, r3, r2
 8014f2c:	42ab      	cmp	r3, r5
 8014f2e:	dc26      	bgt.n	8014f7e <_printf_common+0x96>
 8014f30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014f34:	1e13      	subs	r3, r2, #0
 8014f36:	6822      	ldr	r2, [r4, #0]
 8014f38:	bf18      	it	ne
 8014f3a:	2301      	movne	r3, #1
 8014f3c:	0692      	lsls	r2, r2, #26
 8014f3e:	d42b      	bmi.n	8014f98 <_printf_common+0xb0>
 8014f40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f44:	4649      	mov	r1, r9
 8014f46:	4638      	mov	r0, r7
 8014f48:	47c0      	blx	r8
 8014f4a:	3001      	adds	r0, #1
 8014f4c:	d01e      	beq.n	8014f8c <_printf_common+0xa4>
 8014f4e:	6823      	ldr	r3, [r4, #0]
 8014f50:	68e5      	ldr	r5, [r4, #12]
 8014f52:	6832      	ldr	r2, [r6, #0]
 8014f54:	f003 0306 	and.w	r3, r3, #6
 8014f58:	2b04      	cmp	r3, #4
 8014f5a:	bf08      	it	eq
 8014f5c:	1aad      	subeq	r5, r5, r2
 8014f5e:	68a3      	ldr	r3, [r4, #8]
 8014f60:	6922      	ldr	r2, [r4, #16]
 8014f62:	bf0c      	ite	eq
 8014f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f68:	2500      	movne	r5, #0
 8014f6a:	4293      	cmp	r3, r2
 8014f6c:	bfc4      	itt	gt
 8014f6e:	1a9b      	subgt	r3, r3, r2
 8014f70:	18ed      	addgt	r5, r5, r3
 8014f72:	2600      	movs	r6, #0
 8014f74:	341a      	adds	r4, #26
 8014f76:	42b5      	cmp	r5, r6
 8014f78:	d11a      	bne.n	8014fb0 <_printf_common+0xc8>
 8014f7a:	2000      	movs	r0, #0
 8014f7c:	e008      	b.n	8014f90 <_printf_common+0xa8>
 8014f7e:	2301      	movs	r3, #1
 8014f80:	4652      	mov	r2, sl
 8014f82:	4649      	mov	r1, r9
 8014f84:	4638      	mov	r0, r7
 8014f86:	47c0      	blx	r8
 8014f88:	3001      	adds	r0, #1
 8014f8a:	d103      	bne.n	8014f94 <_printf_common+0xac>
 8014f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8014f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f94:	3501      	adds	r5, #1
 8014f96:	e7c6      	b.n	8014f26 <_printf_common+0x3e>
 8014f98:	18e1      	adds	r1, r4, r3
 8014f9a:	1c5a      	adds	r2, r3, #1
 8014f9c:	2030      	movs	r0, #48	; 0x30
 8014f9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014fa2:	4422      	add	r2, r4
 8014fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014fa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014fac:	3302      	adds	r3, #2
 8014fae:	e7c7      	b.n	8014f40 <_printf_common+0x58>
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	4622      	mov	r2, r4
 8014fb4:	4649      	mov	r1, r9
 8014fb6:	4638      	mov	r0, r7
 8014fb8:	47c0      	blx	r8
 8014fba:	3001      	adds	r0, #1
 8014fbc:	d0e6      	beq.n	8014f8c <_printf_common+0xa4>
 8014fbe:	3601      	adds	r6, #1
 8014fc0:	e7d9      	b.n	8014f76 <_printf_common+0x8e>
	...

08014fc4 <_printf_i>:
 8014fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014fc8:	460c      	mov	r4, r1
 8014fca:	4691      	mov	r9, r2
 8014fcc:	7e27      	ldrb	r7, [r4, #24]
 8014fce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014fd0:	2f78      	cmp	r7, #120	; 0x78
 8014fd2:	4680      	mov	r8, r0
 8014fd4:	469a      	mov	sl, r3
 8014fd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014fda:	d807      	bhi.n	8014fec <_printf_i+0x28>
 8014fdc:	2f62      	cmp	r7, #98	; 0x62
 8014fde:	d80a      	bhi.n	8014ff6 <_printf_i+0x32>
 8014fe0:	2f00      	cmp	r7, #0
 8014fe2:	f000 80d8 	beq.w	8015196 <_printf_i+0x1d2>
 8014fe6:	2f58      	cmp	r7, #88	; 0x58
 8014fe8:	f000 80a3 	beq.w	8015132 <_printf_i+0x16e>
 8014fec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014ff4:	e03a      	b.n	801506c <_printf_i+0xa8>
 8014ff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014ffa:	2b15      	cmp	r3, #21
 8014ffc:	d8f6      	bhi.n	8014fec <_printf_i+0x28>
 8014ffe:	a001      	add	r0, pc, #4	; (adr r0, 8015004 <_printf_i+0x40>)
 8015000:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015004:	0801505d 	.word	0x0801505d
 8015008:	08015071 	.word	0x08015071
 801500c:	08014fed 	.word	0x08014fed
 8015010:	08014fed 	.word	0x08014fed
 8015014:	08014fed 	.word	0x08014fed
 8015018:	08014fed 	.word	0x08014fed
 801501c:	08015071 	.word	0x08015071
 8015020:	08014fed 	.word	0x08014fed
 8015024:	08014fed 	.word	0x08014fed
 8015028:	08014fed 	.word	0x08014fed
 801502c:	08014fed 	.word	0x08014fed
 8015030:	0801517d 	.word	0x0801517d
 8015034:	080150a1 	.word	0x080150a1
 8015038:	0801515f 	.word	0x0801515f
 801503c:	08014fed 	.word	0x08014fed
 8015040:	08014fed 	.word	0x08014fed
 8015044:	0801519f 	.word	0x0801519f
 8015048:	08014fed 	.word	0x08014fed
 801504c:	080150a1 	.word	0x080150a1
 8015050:	08014fed 	.word	0x08014fed
 8015054:	08014fed 	.word	0x08014fed
 8015058:	08015167 	.word	0x08015167
 801505c:	680b      	ldr	r3, [r1, #0]
 801505e:	1d1a      	adds	r2, r3, #4
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	600a      	str	r2, [r1, #0]
 8015064:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801506c:	2301      	movs	r3, #1
 801506e:	e0a3      	b.n	80151b8 <_printf_i+0x1f4>
 8015070:	6825      	ldr	r5, [r4, #0]
 8015072:	6808      	ldr	r0, [r1, #0]
 8015074:	062e      	lsls	r6, r5, #24
 8015076:	f100 0304 	add.w	r3, r0, #4
 801507a:	d50a      	bpl.n	8015092 <_printf_i+0xce>
 801507c:	6805      	ldr	r5, [r0, #0]
 801507e:	600b      	str	r3, [r1, #0]
 8015080:	2d00      	cmp	r5, #0
 8015082:	da03      	bge.n	801508c <_printf_i+0xc8>
 8015084:	232d      	movs	r3, #45	; 0x2d
 8015086:	426d      	negs	r5, r5
 8015088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801508c:	485e      	ldr	r0, [pc, #376]	; (8015208 <_printf_i+0x244>)
 801508e:	230a      	movs	r3, #10
 8015090:	e019      	b.n	80150c6 <_printf_i+0x102>
 8015092:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015096:	6805      	ldr	r5, [r0, #0]
 8015098:	600b      	str	r3, [r1, #0]
 801509a:	bf18      	it	ne
 801509c:	b22d      	sxthne	r5, r5
 801509e:	e7ef      	b.n	8015080 <_printf_i+0xbc>
 80150a0:	680b      	ldr	r3, [r1, #0]
 80150a2:	6825      	ldr	r5, [r4, #0]
 80150a4:	1d18      	adds	r0, r3, #4
 80150a6:	6008      	str	r0, [r1, #0]
 80150a8:	0628      	lsls	r0, r5, #24
 80150aa:	d501      	bpl.n	80150b0 <_printf_i+0xec>
 80150ac:	681d      	ldr	r5, [r3, #0]
 80150ae:	e002      	b.n	80150b6 <_printf_i+0xf2>
 80150b0:	0669      	lsls	r1, r5, #25
 80150b2:	d5fb      	bpl.n	80150ac <_printf_i+0xe8>
 80150b4:	881d      	ldrh	r5, [r3, #0]
 80150b6:	4854      	ldr	r0, [pc, #336]	; (8015208 <_printf_i+0x244>)
 80150b8:	2f6f      	cmp	r7, #111	; 0x6f
 80150ba:	bf0c      	ite	eq
 80150bc:	2308      	moveq	r3, #8
 80150be:	230a      	movne	r3, #10
 80150c0:	2100      	movs	r1, #0
 80150c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80150c6:	6866      	ldr	r6, [r4, #4]
 80150c8:	60a6      	str	r6, [r4, #8]
 80150ca:	2e00      	cmp	r6, #0
 80150cc:	bfa2      	ittt	ge
 80150ce:	6821      	ldrge	r1, [r4, #0]
 80150d0:	f021 0104 	bicge.w	r1, r1, #4
 80150d4:	6021      	strge	r1, [r4, #0]
 80150d6:	b90d      	cbnz	r5, 80150dc <_printf_i+0x118>
 80150d8:	2e00      	cmp	r6, #0
 80150da:	d04d      	beq.n	8015178 <_printf_i+0x1b4>
 80150dc:	4616      	mov	r6, r2
 80150de:	fbb5 f1f3 	udiv	r1, r5, r3
 80150e2:	fb03 5711 	mls	r7, r3, r1, r5
 80150e6:	5dc7      	ldrb	r7, [r0, r7]
 80150e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80150ec:	462f      	mov	r7, r5
 80150ee:	42bb      	cmp	r3, r7
 80150f0:	460d      	mov	r5, r1
 80150f2:	d9f4      	bls.n	80150de <_printf_i+0x11a>
 80150f4:	2b08      	cmp	r3, #8
 80150f6:	d10b      	bne.n	8015110 <_printf_i+0x14c>
 80150f8:	6823      	ldr	r3, [r4, #0]
 80150fa:	07df      	lsls	r7, r3, #31
 80150fc:	d508      	bpl.n	8015110 <_printf_i+0x14c>
 80150fe:	6923      	ldr	r3, [r4, #16]
 8015100:	6861      	ldr	r1, [r4, #4]
 8015102:	4299      	cmp	r1, r3
 8015104:	bfde      	ittt	le
 8015106:	2330      	movle	r3, #48	; 0x30
 8015108:	f806 3c01 	strble.w	r3, [r6, #-1]
 801510c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015110:	1b92      	subs	r2, r2, r6
 8015112:	6122      	str	r2, [r4, #16]
 8015114:	f8cd a000 	str.w	sl, [sp]
 8015118:	464b      	mov	r3, r9
 801511a:	aa03      	add	r2, sp, #12
 801511c:	4621      	mov	r1, r4
 801511e:	4640      	mov	r0, r8
 8015120:	f7ff fee2 	bl	8014ee8 <_printf_common>
 8015124:	3001      	adds	r0, #1
 8015126:	d14c      	bne.n	80151c2 <_printf_i+0x1fe>
 8015128:	f04f 30ff 	mov.w	r0, #4294967295
 801512c:	b004      	add	sp, #16
 801512e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015132:	4835      	ldr	r0, [pc, #212]	; (8015208 <_printf_i+0x244>)
 8015134:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015138:	6823      	ldr	r3, [r4, #0]
 801513a:	680e      	ldr	r6, [r1, #0]
 801513c:	061f      	lsls	r7, r3, #24
 801513e:	f856 5b04 	ldr.w	r5, [r6], #4
 8015142:	600e      	str	r6, [r1, #0]
 8015144:	d514      	bpl.n	8015170 <_printf_i+0x1ac>
 8015146:	07d9      	lsls	r1, r3, #31
 8015148:	bf44      	itt	mi
 801514a:	f043 0320 	orrmi.w	r3, r3, #32
 801514e:	6023      	strmi	r3, [r4, #0]
 8015150:	b91d      	cbnz	r5, 801515a <_printf_i+0x196>
 8015152:	6823      	ldr	r3, [r4, #0]
 8015154:	f023 0320 	bic.w	r3, r3, #32
 8015158:	6023      	str	r3, [r4, #0]
 801515a:	2310      	movs	r3, #16
 801515c:	e7b0      	b.n	80150c0 <_printf_i+0xfc>
 801515e:	6823      	ldr	r3, [r4, #0]
 8015160:	f043 0320 	orr.w	r3, r3, #32
 8015164:	6023      	str	r3, [r4, #0]
 8015166:	2378      	movs	r3, #120	; 0x78
 8015168:	4828      	ldr	r0, [pc, #160]	; (801520c <_printf_i+0x248>)
 801516a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801516e:	e7e3      	b.n	8015138 <_printf_i+0x174>
 8015170:	065e      	lsls	r6, r3, #25
 8015172:	bf48      	it	mi
 8015174:	b2ad      	uxthmi	r5, r5
 8015176:	e7e6      	b.n	8015146 <_printf_i+0x182>
 8015178:	4616      	mov	r6, r2
 801517a:	e7bb      	b.n	80150f4 <_printf_i+0x130>
 801517c:	680b      	ldr	r3, [r1, #0]
 801517e:	6826      	ldr	r6, [r4, #0]
 8015180:	6960      	ldr	r0, [r4, #20]
 8015182:	1d1d      	adds	r5, r3, #4
 8015184:	600d      	str	r5, [r1, #0]
 8015186:	0635      	lsls	r5, r6, #24
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	d501      	bpl.n	8015190 <_printf_i+0x1cc>
 801518c:	6018      	str	r0, [r3, #0]
 801518e:	e002      	b.n	8015196 <_printf_i+0x1d2>
 8015190:	0671      	lsls	r1, r6, #25
 8015192:	d5fb      	bpl.n	801518c <_printf_i+0x1c8>
 8015194:	8018      	strh	r0, [r3, #0]
 8015196:	2300      	movs	r3, #0
 8015198:	6123      	str	r3, [r4, #16]
 801519a:	4616      	mov	r6, r2
 801519c:	e7ba      	b.n	8015114 <_printf_i+0x150>
 801519e:	680b      	ldr	r3, [r1, #0]
 80151a0:	1d1a      	adds	r2, r3, #4
 80151a2:	600a      	str	r2, [r1, #0]
 80151a4:	681e      	ldr	r6, [r3, #0]
 80151a6:	6862      	ldr	r2, [r4, #4]
 80151a8:	2100      	movs	r1, #0
 80151aa:	4630      	mov	r0, r6
 80151ac:	f7eb f858 	bl	8000260 <memchr>
 80151b0:	b108      	cbz	r0, 80151b6 <_printf_i+0x1f2>
 80151b2:	1b80      	subs	r0, r0, r6
 80151b4:	6060      	str	r0, [r4, #4]
 80151b6:	6863      	ldr	r3, [r4, #4]
 80151b8:	6123      	str	r3, [r4, #16]
 80151ba:	2300      	movs	r3, #0
 80151bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80151c0:	e7a8      	b.n	8015114 <_printf_i+0x150>
 80151c2:	6923      	ldr	r3, [r4, #16]
 80151c4:	4632      	mov	r2, r6
 80151c6:	4649      	mov	r1, r9
 80151c8:	4640      	mov	r0, r8
 80151ca:	47d0      	blx	sl
 80151cc:	3001      	adds	r0, #1
 80151ce:	d0ab      	beq.n	8015128 <_printf_i+0x164>
 80151d0:	6823      	ldr	r3, [r4, #0]
 80151d2:	079b      	lsls	r3, r3, #30
 80151d4:	d413      	bmi.n	80151fe <_printf_i+0x23a>
 80151d6:	68e0      	ldr	r0, [r4, #12]
 80151d8:	9b03      	ldr	r3, [sp, #12]
 80151da:	4298      	cmp	r0, r3
 80151dc:	bfb8      	it	lt
 80151de:	4618      	movlt	r0, r3
 80151e0:	e7a4      	b.n	801512c <_printf_i+0x168>
 80151e2:	2301      	movs	r3, #1
 80151e4:	4632      	mov	r2, r6
 80151e6:	4649      	mov	r1, r9
 80151e8:	4640      	mov	r0, r8
 80151ea:	47d0      	blx	sl
 80151ec:	3001      	adds	r0, #1
 80151ee:	d09b      	beq.n	8015128 <_printf_i+0x164>
 80151f0:	3501      	adds	r5, #1
 80151f2:	68e3      	ldr	r3, [r4, #12]
 80151f4:	9903      	ldr	r1, [sp, #12]
 80151f6:	1a5b      	subs	r3, r3, r1
 80151f8:	42ab      	cmp	r3, r5
 80151fa:	dcf2      	bgt.n	80151e2 <_printf_i+0x21e>
 80151fc:	e7eb      	b.n	80151d6 <_printf_i+0x212>
 80151fe:	2500      	movs	r5, #0
 8015200:	f104 0619 	add.w	r6, r4, #25
 8015204:	e7f5      	b.n	80151f2 <_printf_i+0x22e>
 8015206:	bf00      	nop
 8015208:	080195cc 	.word	0x080195cc
 801520c:	080195dd 	.word	0x080195dd

08015210 <_putc_r>:
 8015210:	b570      	push	{r4, r5, r6, lr}
 8015212:	460d      	mov	r5, r1
 8015214:	4614      	mov	r4, r2
 8015216:	4606      	mov	r6, r0
 8015218:	b118      	cbz	r0, 8015222 <_putc_r+0x12>
 801521a:	6983      	ldr	r3, [r0, #24]
 801521c:	b90b      	cbnz	r3, 8015222 <_putc_r+0x12>
 801521e:	f7fd f9c3 	bl	80125a8 <__sinit>
 8015222:	4b1c      	ldr	r3, [pc, #112]	; (8015294 <_putc_r+0x84>)
 8015224:	429c      	cmp	r4, r3
 8015226:	d124      	bne.n	8015272 <_putc_r+0x62>
 8015228:	6874      	ldr	r4, [r6, #4]
 801522a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801522c:	07d8      	lsls	r0, r3, #31
 801522e:	d405      	bmi.n	801523c <_putc_r+0x2c>
 8015230:	89a3      	ldrh	r3, [r4, #12]
 8015232:	0599      	lsls	r1, r3, #22
 8015234:	d402      	bmi.n	801523c <_putc_r+0x2c>
 8015236:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015238:	f7fd fd69 	bl	8012d0e <__retarget_lock_acquire_recursive>
 801523c:	68a3      	ldr	r3, [r4, #8]
 801523e:	3b01      	subs	r3, #1
 8015240:	2b00      	cmp	r3, #0
 8015242:	60a3      	str	r3, [r4, #8]
 8015244:	da05      	bge.n	8015252 <_putc_r+0x42>
 8015246:	69a2      	ldr	r2, [r4, #24]
 8015248:	4293      	cmp	r3, r2
 801524a:	db1c      	blt.n	8015286 <_putc_r+0x76>
 801524c:	b2eb      	uxtb	r3, r5
 801524e:	2b0a      	cmp	r3, #10
 8015250:	d019      	beq.n	8015286 <_putc_r+0x76>
 8015252:	6823      	ldr	r3, [r4, #0]
 8015254:	1c5a      	adds	r2, r3, #1
 8015256:	6022      	str	r2, [r4, #0]
 8015258:	701d      	strb	r5, [r3, #0]
 801525a:	b2ed      	uxtb	r5, r5
 801525c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801525e:	07da      	lsls	r2, r3, #31
 8015260:	d405      	bmi.n	801526e <_putc_r+0x5e>
 8015262:	89a3      	ldrh	r3, [r4, #12]
 8015264:	059b      	lsls	r3, r3, #22
 8015266:	d402      	bmi.n	801526e <_putc_r+0x5e>
 8015268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801526a:	f7fd fd52 	bl	8012d12 <__retarget_lock_release_recursive>
 801526e:	4628      	mov	r0, r5
 8015270:	bd70      	pop	{r4, r5, r6, pc}
 8015272:	4b09      	ldr	r3, [pc, #36]	; (8015298 <_putc_r+0x88>)
 8015274:	429c      	cmp	r4, r3
 8015276:	d101      	bne.n	801527c <_putc_r+0x6c>
 8015278:	68b4      	ldr	r4, [r6, #8]
 801527a:	e7d6      	b.n	801522a <_putc_r+0x1a>
 801527c:	4b07      	ldr	r3, [pc, #28]	; (801529c <_putc_r+0x8c>)
 801527e:	429c      	cmp	r4, r3
 8015280:	bf08      	it	eq
 8015282:	68f4      	ldreq	r4, [r6, #12]
 8015284:	e7d1      	b.n	801522a <_putc_r+0x1a>
 8015286:	4629      	mov	r1, r5
 8015288:	4622      	mov	r2, r4
 801528a:	4630      	mov	r0, r6
 801528c:	f7ff f844 	bl	8014318 <__swbuf_r>
 8015290:	4605      	mov	r5, r0
 8015292:	e7e3      	b.n	801525c <_putc_r+0x4c>
 8015294:	0801903c 	.word	0x0801903c
 8015298:	0801905c 	.word	0x0801905c
 801529c:	0801901c 	.word	0x0801901c

080152a0 <_read_r>:
 80152a0:	b538      	push	{r3, r4, r5, lr}
 80152a2:	4d07      	ldr	r5, [pc, #28]	; (80152c0 <_read_r+0x20>)
 80152a4:	4604      	mov	r4, r0
 80152a6:	4608      	mov	r0, r1
 80152a8:	4611      	mov	r1, r2
 80152aa:	2200      	movs	r2, #0
 80152ac:	602a      	str	r2, [r5, #0]
 80152ae:	461a      	mov	r2, r3
 80152b0:	f7eb fd71 	bl	8000d96 <_read>
 80152b4:	1c43      	adds	r3, r0, #1
 80152b6:	d102      	bne.n	80152be <_read_r+0x1e>
 80152b8:	682b      	ldr	r3, [r5, #0]
 80152ba:	b103      	cbz	r3, 80152be <_read_r+0x1e>
 80152bc:	6023      	str	r3, [r4, #0]
 80152be:	bd38      	pop	{r3, r4, r5, pc}
 80152c0:	20000c84 	.word	0x20000c84

080152c4 <sniprintf>:
 80152c4:	b40c      	push	{r2, r3}
 80152c6:	b530      	push	{r4, r5, lr}
 80152c8:	4b17      	ldr	r3, [pc, #92]	; (8015328 <sniprintf+0x64>)
 80152ca:	1e0c      	subs	r4, r1, #0
 80152cc:	681d      	ldr	r5, [r3, #0]
 80152ce:	b09d      	sub	sp, #116	; 0x74
 80152d0:	da08      	bge.n	80152e4 <sniprintf+0x20>
 80152d2:	238b      	movs	r3, #139	; 0x8b
 80152d4:	602b      	str	r3, [r5, #0]
 80152d6:	f04f 30ff 	mov.w	r0, #4294967295
 80152da:	b01d      	add	sp, #116	; 0x74
 80152dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80152e0:	b002      	add	sp, #8
 80152e2:	4770      	bx	lr
 80152e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80152e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80152ec:	bf14      	ite	ne
 80152ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80152f2:	4623      	moveq	r3, r4
 80152f4:	9304      	str	r3, [sp, #16]
 80152f6:	9307      	str	r3, [sp, #28]
 80152f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80152fc:	9002      	str	r0, [sp, #8]
 80152fe:	9006      	str	r0, [sp, #24]
 8015300:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015304:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015306:	ab21      	add	r3, sp, #132	; 0x84
 8015308:	a902      	add	r1, sp, #8
 801530a:	4628      	mov	r0, r5
 801530c:	9301      	str	r3, [sp, #4]
 801530e:	f7ff fb91 	bl	8014a34 <_svfiprintf_r>
 8015312:	1c43      	adds	r3, r0, #1
 8015314:	bfbc      	itt	lt
 8015316:	238b      	movlt	r3, #139	; 0x8b
 8015318:	602b      	strlt	r3, [r5, #0]
 801531a:	2c00      	cmp	r4, #0
 801531c:	d0dd      	beq.n	80152da <sniprintf+0x16>
 801531e:	9b02      	ldr	r3, [sp, #8]
 8015320:	2200      	movs	r2, #0
 8015322:	701a      	strb	r2, [r3, #0]
 8015324:	e7d9      	b.n	80152da <sniprintf+0x16>
 8015326:	bf00      	nop
 8015328:	20000100 	.word	0x20000100

0801532c <siscanf>:
 801532c:	b40e      	push	{r1, r2, r3}
 801532e:	b510      	push	{r4, lr}
 8015330:	b09f      	sub	sp, #124	; 0x7c
 8015332:	ac21      	add	r4, sp, #132	; 0x84
 8015334:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015338:	f854 2b04 	ldr.w	r2, [r4], #4
 801533c:	9201      	str	r2, [sp, #4]
 801533e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015342:	9004      	str	r0, [sp, #16]
 8015344:	9008      	str	r0, [sp, #32]
 8015346:	f7ea ff79 	bl	800023c <strlen>
 801534a:	4b0c      	ldr	r3, [pc, #48]	; (801537c <siscanf+0x50>)
 801534c:	9005      	str	r0, [sp, #20]
 801534e:	9009      	str	r0, [sp, #36]	; 0x24
 8015350:	930d      	str	r3, [sp, #52]	; 0x34
 8015352:	480b      	ldr	r0, [pc, #44]	; (8015380 <siscanf+0x54>)
 8015354:	9a01      	ldr	r2, [sp, #4]
 8015356:	6800      	ldr	r0, [r0, #0]
 8015358:	9403      	str	r4, [sp, #12]
 801535a:	2300      	movs	r3, #0
 801535c:	9311      	str	r3, [sp, #68]	; 0x44
 801535e:	9316      	str	r3, [sp, #88]	; 0x58
 8015360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015364:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015368:	a904      	add	r1, sp, #16
 801536a:	4623      	mov	r3, r4
 801536c:	f000 f8ba 	bl	80154e4 <__ssvfiscanf_r>
 8015370:	b01f      	add	sp, #124	; 0x7c
 8015372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015376:	b003      	add	sp, #12
 8015378:	4770      	bx	lr
 801537a:	bf00      	nop
 801537c:	080131a3 	.word	0x080131a3
 8015380:	20000100 	.word	0x20000100

08015384 <strcpy>:
 8015384:	4603      	mov	r3, r0
 8015386:	f811 2b01 	ldrb.w	r2, [r1], #1
 801538a:	f803 2b01 	strb.w	r2, [r3], #1
 801538e:	2a00      	cmp	r2, #0
 8015390:	d1f9      	bne.n	8015386 <strcpy+0x2>
 8015392:	4770      	bx	lr

08015394 <strncmp>:
 8015394:	b510      	push	{r4, lr}
 8015396:	b16a      	cbz	r2, 80153b4 <strncmp+0x20>
 8015398:	3901      	subs	r1, #1
 801539a:	1884      	adds	r4, r0, r2
 801539c:	f810 3b01 	ldrb.w	r3, [r0], #1
 80153a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80153a4:	4293      	cmp	r3, r2
 80153a6:	d103      	bne.n	80153b0 <strncmp+0x1c>
 80153a8:	42a0      	cmp	r0, r4
 80153aa:	d001      	beq.n	80153b0 <strncmp+0x1c>
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d1f5      	bne.n	801539c <strncmp+0x8>
 80153b0:	1a98      	subs	r0, r3, r2
 80153b2:	bd10      	pop	{r4, pc}
 80153b4:	4610      	mov	r0, r2
 80153b6:	e7fc      	b.n	80153b2 <strncmp+0x1e>

080153b8 <__ascii_wctomb>:
 80153b8:	b149      	cbz	r1, 80153ce <__ascii_wctomb+0x16>
 80153ba:	2aff      	cmp	r2, #255	; 0xff
 80153bc:	bf85      	ittet	hi
 80153be:	238a      	movhi	r3, #138	; 0x8a
 80153c0:	6003      	strhi	r3, [r0, #0]
 80153c2:	700a      	strbls	r2, [r1, #0]
 80153c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80153c8:	bf98      	it	ls
 80153ca:	2001      	movls	r0, #1
 80153cc:	4770      	bx	lr
 80153ce:	4608      	mov	r0, r1
 80153d0:	4770      	bx	lr
	...

080153d4 <__env_lock>:
 80153d4:	4801      	ldr	r0, [pc, #4]	; (80153dc <__env_lock+0x8>)
 80153d6:	f7fd bc9a 	b.w	8012d0e <__retarget_lock_acquire_recursive>
 80153da:	bf00      	nop
 80153dc:	20000c7a 	.word	0x20000c7a

080153e0 <__env_unlock>:
 80153e0:	4801      	ldr	r0, [pc, #4]	; (80153e8 <__env_unlock+0x8>)
 80153e2:	f7fd bc96 	b.w	8012d12 <__retarget_lock_release_recursive>
 80153e6:	bf00      	nop
 80153e8:	20000c7a 	.word	0x20000c7a

080153ec <memmove>:
 80153ec:	4288      	cmp	r0, r1
 80153ee:	b510      	push	{r4, lr}
 80153f0:	eb01 0402 	add.w	r4, r1, r2
 80153f4:	d902      	bls.n	80153fc <memmove+0x10>
 80153f6:	4284      	cmp	r4, r0
 80153f8:	4623      	mov	r3, r4
 80153fa:	d807      	bhi.n	801540c <memmove+0x20>
 80153fc:	1e43      	subs	r3, r0, #1
 80153fe:	42a1      	cmp	r1, r4
 8015400:	d008      	beq.n	8015414 <memmove+0x28>
 8015402:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015406:	f803 2f01 	strb.w	r2, [r3, #1]!
 801540a:	e7f8      	b.n	80153fe <memmove+0x12>
 801540c:	4402      	add	r2, r0
 801540e:	4601      	mov	r1, r0
 8015410:	428a      	cmp	r2, r1
 8015412:	d100      	bne.n	8015416 <memmove+0x2a>
 8015414:	bd10      	pop	{r4, pc}
 8015416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801541a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801541e:	e7f7      	b.n	8015410 <memmove+0x24>

08015420 <_malloc_usable_size_r>:
 8015420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015424:	1f18      	subs	r0, r3, #4
 8015426:	2b00      	cmp	r3, #0
 8015428:	bfbc      	itt	lt
 801542a:	580b      	ldrlt	r3, [r1, r0]
 801542c:	18c0      	addlt	r0, r0, r3
 801542e:	4770      	bx	lr

08015430 <_sungetc_r>:
 8015430:	b538      	push	{r3, r4, r5, lr}
 8015432:	1c4b      	adds	r3, r1, #1
 8015434:	4614      	mov	r4, r2
 8015436:	d103      	bne.n	8015440 <_sungetc_r+0x10>
 8015438:	f04f 35ff 	mov.w	r5, #4294967295
 801543c:	4628      	mov	r0, r5
 801543e:	bd38      	pop	{r3, r4, r5, pc}
 8015440:	8993      	ldrh	r3, [r2, #12]
 8015442:	f023 0320 	bic.w	r3, r3, #32
 8015446:	8193      	strh	r3, [r2, #12]
 8015448:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801544a:	6852      	ldr	r2, [r2, #4]
 801544c:	b2cd      	uxtb	r5, r1
 801544e:	b18b      	cbz	r3, 8015474 <_sungetc_r+0x44>
 8015450:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015452:	4293      	cmp	r3, r2
 8015454:	dd08      	ble.n	8015468 <_sungetc_r+0x38>
 8015456:	6823      	ldr	r3, [r4, #0]
 8015458:	1e5a      	subs	r2, r3, #1
 801545a:	6022      	str	r2, [r4, #0]
 801545c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015460:	6863      	ldr	r3, [r4, #4]
 8015462:	3301      	adds	r3, #1
 8015464:	6063      	str	r3, [r4, #4]
 8015466:	e7e9      	b.n	801543c <_sungetc_r+0xc>
 8015468:	4621      	mov	r1, r4
 801546a:	f000 fbbf 	bl	8015bec <__submore>
 801546e:	2800      	cmp	r0, #0
 8015470:	d0f1      	beq.n	8015456 <_sungetc_r+0x26>
 8015472:	e7e1      	b.n	8015438 <_sungetc_r+0x8>
 8015474:	6921      	ldr	r1, [r4, #16]
 8015476:	6823      	ldr	r3, [r4, #0]
 8015478:	b151      	cbz	r1, 8015490 <_sungetc_r+0x60>
 801547a:	4299      	cmp	r1, r3
 801547c:	d208      	bcs.n	8015490 <_sungetc_r+0x60>
 801547e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015482:	42a9      	cmp	r1, r5
 8015484:	d104      	bne.n	8015490 <_sungetc_r+0x60>
 8015486:	3b01      	subs	r3, #1
 8015488:	3201      	adds	r2, #1
 801548a:	6023      	str	r3, [r4, #0]
 801548c:	6062      	str	r2, [r4, #4]
 801548e:	e7d5      	b.n	801543c <_sungetc_r+0xc>
 8015490:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8015494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015498:	6363      	str	r3, [r4, #52]	; 0x34
 801549a:	2303      	movs	r3, #3
 801549c:	63a3      	str	r3, [r4, #56]	; 0x38
 801549e:	4623      	mov	r3, r4
 80154a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80154a4:	6023      	str	r3, [r4, #0]
 80154a6:	2301      	movs	r3, #1
 80154a8:	e7dc      	b.n	8015464 <_sungetc_r+0x34>

080154aa <__ssrefill_r>:
 80154aa:	b510      	push	{r4, lr}
 80154ac:	460c      	mov	r4, r1
 80154ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80154b0:	b169      	cbz	r1, 80154ce <__ssrefill_r+0x24>
 80154b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80154b6:	4299      	cmp	r1, r3
 80154b8:	d001      	beq.n	80154be <__ssrefill_r+0x14>
 80154ba:	f7fd fcc5 	bl	8012e48 <_free_r>
 80154be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80154c0:	6063      	str	r3, [r4, #4]
 80154c2:	2000      	movs	r0, #0
 80154c4:	6360      	str	r0, [r4, #52]	; 0x34
 80154c6:	b113      	cbz	r3, 80154ce <__ssrefill_r+0x24>
 80154c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80154ca:	6023      	str	r3, [r4, #0]
 80154cc:	bd10      	pop	{r4, pc}
 80154ce:	6923      	ldr	r3, [r4, #16]
 80154d0:	6023      	str	r3, [r4, #0]
 80154d2:	2300      	movs	r3, #0
 80154d4:	6063      	str	r3, [r4, #4]
 80154d6:	89a3      	ldrh	r3, [r4, #12]
 80154d8:	f043 0320 	orr.w	r3, r3, #32
 80154dc:	81a3      	strh	r3, [r4, #12]
 80154de:	f04f 30ff 	mov.w	r0, #4294967295
 80154e2:	e7f3      	b.n	80154cc <__ssrefill_r+0x22>

080154e4 <__ssvfiscanf_r>:
 80154e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e8:	460c      	mov	r4, r1
 80154ea:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80154ee:	2100      	movs	r1, #0
 80154f0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80154f4:	49b2      	ldr	r1, [pc, #712]	; (80157c0 <__ssvfiscanf_r+0x2dc>)
 80154f6:	91a0      	str	r1, [sp, #640]	; 0x280
 80154f8:	f10d 0804 	add.w	r8, sp, #4
 80154fc:	49b1      	ldr	r1, [pc, #708]	; (80157c4 <__ssvfiscanf_r+0x2e0>)
 80154fe:	4fb2      	ldr	r7, [pc, #712]	; (80157c8 <__ssvfiscanf_r+0x2e4>)
 8015500:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80157cc <__ssvfiscanf_r+0x2e8>
 8015504:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015508:	4606      	mov	r6, r0
 801550a:	91a1      	str	r1, [sp, #644]	; 0x284
 801550c:	9300      	str	r3, [sp, #0]
 801550e:	f892 a000 	ldrb.w	sl, [r2]
 8015512:	f1ba 0f00 	cmp.w	sl, #0
 8015516:	f000 8151 	beq.w	80157bc <__ssvfiscanf_r+0x2d8>
 801551a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801551e:	f013 0308 	ands.w	r3, r3, #8
 8015522:	f102 0501 	add.w	r5, r2, #1
 8015526:	d019      	beq.n	801555c <__ssvfiscanf_r+0x78>
 8015528:	6863      	ldr	r3, [r4, #4]
 801552a:	2b00      	cmp	r3, #0
 801552c:	dd0f      	ble.n	801554e <__ssvfiscanf_r+0x6a>
 801552e:	6823      	ldr	r3, [r4, #0]
 8015530:	781a      	ldrb	r2, [r3, #0]
 8015532:	5cba      	ldrb	r2, [r7, r2]
 8015534:	0712      	lsls	r2, r2, #28
 8015536:	d401      	bmi.n	801553c <__ssvfiscanf_r+0x58>
 8015538:	462a      	mov	r2, r5
 801553a:	e7e8      	b.n	801550e <__ssvfiscanf_r+0x2a>
 801553c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801553e:	3201      	adds	r2, #1
 8015540:	9245      	str	r2, [sp, #276]	; 0x114
 8015542:	6862      	ldr	r2, [r4, #4]
 8015544:	3301      	adds	r3, #1
 8015546:	3a01      	subs	r2, #1
 8015548:	6062      	str	r2, [r4, #4]
 801554a:	6023      	str	r3, [r4, #0]
 801554c:	e7ec      	b.n	8015528 <__ssvfiscanf_r+0x44>
 801554e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015550:	4621      	mov	r1, r4
 8015552:	4630      	mov	r0, r6
 8015554:	4798      	blx	r3
 8015556:	2800      	cmp	r0, #0
 8015558:	d0e9      	beq.n	801552e <__ssvfiscanf_r+0x4a>
 801555a:	e7ed      	b.n	8015538 <__ssvfiscanf_r+0x54>
 801555c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8015560:	f040 8083 	bne.w	801566a <__ssvfiscanf_r+0x186>
 8015564:	9341      	str	r3, [sp, #260]	; 0x104
 8015566:	9343      	str	r3, [sp, #268]	; 0x10c
 8015568:	7853      	ldrb	r3, [r2, #1]
 801556a:	2b2a      	cmp	r3, #42	; 0x2a
 801556c:	bf02      	ittt	eq
 801556e:	2310      	moveq	r3, #16
 8015570:	1c95      	addeq	r5, r2, #2
 8015572:	9341      	streq	r3, [sp, #260]	; 0x104
 8015574:	220a      	movs	r2, #10
 8015576:	46ab      	mov	fp, r5
 8015578:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801557c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8015580:	2b09      	cmp	r3, #9
 8015582:	d91d      	bls.n	80155c0 <__ssvfiscanf_r+0xdc>
 8015584:	4891      	ldr	r0, [pc, #580]	; (80157cc <__ssvfiscanf_r+0x2e8>)
 8015586:	2203      	movs	r2, #3
 8015588:	f7ea fe6a 	bl	8000260 <memchr>
 801558c:	b140      	cbz	r0, 80155a0 <__ssvfiscanf_r+0xbc>
 801558e:	2301      	movs	r3, #1
 8015590:	eba0 0009 	sub.w	r0, r0, r9
 8015594:	fa03 f000 	lsl.w	r0, r3, r0
 8015598:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801559a:	4318      	orrs	r0, r3
 801559c:	9041      	str	r0, [sp, #260]	; 0x104
 801559e:	465d      	mov	r5, fp
 80155a0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80155a4:	2b78      	cmp	r3, #120	; 0x78
 80155a6:	d806      	bhi.n	80155b6 <__ssvfiscanf_r+0xd2>
 80155a8:	2b57      	cmp	r3, #87	; 0x57
 80155aa:	d810      	bhi.n	80155ce <__ssvfiscanf_r+0xea>
 80155ac:	2b25      	cmp	r3, #37	; 0x25
 80155ae:	d05c      	beq.n	801566a <__ssvfiscanf_r+0x186>
 80155b0:	d856      	bhi.n	8015660 <__ssvfiscanf_r+0x17c>
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d074      	beq.n	80156a0 <__ssvfiscanf_r+0x1bc>
 80155b6:	2303      	movs	r3, #3
 80155b8:	9347      	str	r3, [sp, #284]	; 0x11c
 80155ba:	230a      	movs	r3, #10
 80155bc:	9342      	str	r3, [sp, #264]	; 0x108
 80155be:	e081      	b.n	80156c4 <__ssvfiscanf_r+0x1e0>
 80155c0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80155c2:	fb02 1303 	mla	r3, r2, r3, r1
 80155c6:	3b30      	subs	r3, #48	; 0x30
 80155c8:	9343      	str	r3, [sp, #268]	; 0x10c
 80155ca:	465d      	mov	r5, fp
 80155cc:	e7d3      	b.n	8015576 <__ssvfiscanf_r+0x92>
 80155ce:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80155d2:	2a20      	cmp	r2, #32
 80155d4:	d8ef      	bhi.n	80155b6 <__ssvfiscanf_r+0xd2>
 80155d6:	a101      	add	r1, pc, #4	; (adr r1, 80155dc <__ssvfiscanf_r+0xf8>)
 80155d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80155dc:	080156af 	.word	0x080156af
 80155e0:	080155b7 	.word	0x080155b7
 80155e4:	080155b7 	.word	0x080155b7
 80155e8:	0801570d 	.word	0x0801570d
 80155ec:	080155b7 	.word	0x080155b7
 80155f0:	080155b7 	.word	0x080155b7
 80155f4:	080155b7 	.word	0x080155b7
 80155f8:	080155b7 	.word	0x080155b7
 80155fc:	080155b7 	.word	0x080155b7
 8015600:	080155b7 	.word	0x080155b7
 8015604:	080155b7 	.word	0x080155b7
 8015608:	08015723 	.word	0x08015723
 801560c:	080156f9 	.word	0x080156f9
 8015610:	08015667 	.word	0x08015667
 8015614:	08015667 	.word	0x08015667
 8015618:	08015667 	.word	0x08015667
 801561c:	080155b7 	.word	0x080155b7
 8015620:	080156fd 	.word	0x080156fd
 8015624:	080155b7 	.word	0x080155b7
 8015628:	080155b7 	.word	0x080155b7
 801562c:	080155b7 	.word	0x080155b7
 8015630:	080155b7 	.word	0x080155b7
 8015634:	08015733 	.word	0x08015733
 8015638:	08015705 	.word	0x08015705
 801563c:	080156a7 	.word	0x080156a7
 8015640:	080155b7 	.word	0x080155b7
 8015644:	080155b7 	.word	0x080155b7
 8015648:	0801572f 	.word	0x0801572f
 801564c:	080155b7 	.word	0x080155b7
 8015650:	080156f9 	.word	0x080156f9
 8015654:	080155b7 	.word	0x080155b7
 8015658:	080155b7 	.word	0x080155b7
 801565c:	080156af 	.word	0x080156af
 8015660:	3b45      	subs	r3, #69	; 0x45
 8015662:	2b02      	cmp	r3, #2
 8015664:	d8a7      	bhi.n	80155b6 <__ssvfiscanf_r+0xd2>
 8015666:	2305      	movs	r3, #5
 8015668:	e02b      	b.n	80156c2 <__ssvfiscanf_r+0x1de>
 801566a:	6863      	ldr	r3, [r4, #4]
 801566c:	2b00      	cmp	r3, #0
 801566e:	dd0d      	ble.n	801568c <__ssvfiscanf_r+0x1a8>
 8015670:	6823      	ldr	r3, [r4, #0]
 8015672:	781a      	ldrb	r2, [r3, #0]
 8015674:	4552      	cmp	r2, sl
 8015676:	f040 80a1 	bne.w	80157bc <__ssvfiscanf_r+0x2d8>
 801567a:	3301      	adds	r3, #1
 801567c:	6862      	ldr	r2, [r4, #4]
 801567e:	6023      	str	r3, [r4, #0]
 8015680:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8015682:	3a01      	subs	r2, #1
 8015684:	3301      	adds	r3, #1
 8015686:	6062      	str	r2, [r4, #4]
 8015688:	9345      	str	r3, [sp, #276]	; 0x114
 801568a:	e755      	b.n	8015538 <__ssvfiscanf_r+0x54>
 801568c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801568e:	4621      	mov	r1, r4
 8015690:	4630      	mov	r0, r6
 8015692:	4798      	blx	r3
 8015694:	2800      	cmp	r0, #0
 8015696:	d0eb      	beq.n	8015670 <__ssvfiscanf_r+0x18c>
 8015698:	9844      	ldr	r0, [sp, #272]	; 0x110
 801569a:	2800      	cmp	r0, #0
 801569c:	f040 8084 	bne.w	80157a8 <__ssvfiscanf_r+0x2c4>
 80156a0:	f04f 30ff 	mov.w	r0, #4294967295
 80156a4:	e086      	b.n	80157b4 <__ssvfiscanf_r+0x2d0>
 80156a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80156a8:	f042 0220 	orr.w	r2, r2, #32
 80156ac:	9241      	str	r2, [sp, #260]	; 0x104
 80156ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80156b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80156b4:	9241      	str	r2, [sp, #260]	; 0x104
 80156b6:	2210      	movs	r2, #16
 80156b8:	2b6f      	cmp	r3, #111	; 0x6f
 80156ba:	9242      	str	r2, [sp, #264]	; 0x108
 80156bc:	bf34      	ite	cc
 80156be:	2303      	movcc	r3, #3
 80156c0:	2304      	movcs	r3, #4
 80156c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80156c4:	6863      	ldr	r3, [r4, #4]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	dd41      	ble.n	801574e <__ssvfiscanf_r+0x26a>
 80156ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80156cc:	0659      	lsls	r1, r3, #25
 80156ce:	d404      	bmi.n	80156da <__ssvfiscanf_r+0x1f6>
 80156d0:	6823      	ldr	r3, [r4, #0]
 80156d2:	781a      	ldrb	r2, [r3, #0]
 80156d4:	5cba      	ldrb	r2, [r7, r2]
 80156d6:	0712      	lsls	r2, r2, #28
 80156d8:	d440      	bmi.n	801575c <__ssvfiscanf_r+0x278>
 80156da:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80156dc:	2b02      	cmp	r3, #2
 80156de:	dc4f      	bgt.n	8015780 <__ssvfiscanf_r+0x29c>
 80156e0:	466b      	mov	r3, sp
 80156e2:	4622      	mov	r2, r4
 80156e4:	a941      	add	r1, sp, #260	; 0x104
 80156e6:	4630      	mov	r0, r6
 80156e8:	f000 f874 	bl	80157d4 <_scanf_chars>
 80156ec:	2801      	cmp	r0, #1
 80156ee:	d065      	beq.n	80157bc <__ssvfiscanf_r+0x2d8>
 80156f0:	2802      	cmp	r0, #2
 80156f2:	f47f af21 	bne.w	8015538 <__ssvfiscanf_r+0x54>
 80156f6:	e7cf      	b.n	8015698 <__ssvfiscanf_r+0x1b4>
 80156f8:	220a      	movs	r2, #10
 80156fa:	e7dd      	b.n	80156b8 <__ssvfiscanf_r+0x1d4>
 80156fc:	2300      	movs	r3, #0
 80156fe:	9342      	str	r3, [sp, #264]	; 0x108
 8015700:	2303      	movs	r3, #3
 8015702:	e7de      	b.n	80156c2 <__ssvfiscanf_r+0x1de>
 8015704:	2308      	movs	r3, #8
 8015706:	9342      	str	r3, [sp, #264]	; 0x108
 8015708:	2304      	movs	r3, #4
 801570a:	e7da      	b.n	80156c2 <__ssvfiscanf_r+0x1de>
 801570c:	4629      	mov	r1, r5
 801570e:	4640      	mov	r0, r8
 8015710:	f000 f9ac 	bl	8015a6c <__sccl>
 8015714:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801571a:	9341      	str	r3, [sp, #260]	; 0x104
 801571c:	4605      	mov	r5, r0
 801571e:	2301      	movs	r3, #1
 8015720:	e7cf      	b.n	80156c2 <__ssvfiscanf_r+0x1de>
 8015722:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015728:	9341      	str	r3, [sp, #260]	; 0x104
 801572a:	2300      	movs	r3, #0
 801572c:	e7c9      	b.n	80156c2 <__ssvfiscanf_r+0x1de>
 801572e:	2302      	movs	r3, #2
 8015730:	e7c7      	b.n	80156c2 <__ssvfiscanf_r+0x1de>
 8015732:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015734:	06c3      	lsls	r3, r0, #27
 8015736:	f53f aeff 	bmi.w	8015538 <__ssvfiscanf_r+0x54>
 801573a:	9b00      	ldr	r3, [sp, #0]
 801573c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801573e:	1d19      	adds	r1, r3, #4
 8015740:	9100      	str	r1, [sp, #0]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	07c0      	lsls	r0, r0, #31
 8015746:	bf4c      	ite	mi
 8015748:	801a      	strhmi	r2, [r3, #0]
 801574a:	601a      	strpl	r2, [r3, #0]
 801574c:	e6f4      	b.n	8015538 <__ssvfiscanf_r+0x54>
 801574e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015750:	4621      	mov	r1, r4
 8015752:	4630      	mov	r0, r6
 8015754:	4798      	blx	r3
 8015756:	2800      	cmp	r0, #0
 8015758:	d0b7      	beq.n	80156ca <__ssvfiscanf_r+0x1e6>
 801575a:	e79d      	b.n	8015698 <__ssvfiscanf_r+0x1b4>
 801575c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801575e:	3201      	adds	r2, #1
 8015760:	9245      	str	r2, [sp, #276]	; 0x114
 8015762:	6862      	ldr	r2, [r4, #4]
 8015764:	3a01      	subs	r2, #1
 8015766:	2a00      	cmp	r2, #0
 8015768:	6062      	str	r2, [r4, #4]
 801576a:	dd02      	ble.n	8015772 <__ssvfiscanf_r+0x28e>
 801576c:	3301      	adds	r3, #1
 801576e:	6023      	str	r3, [r4, #0]
 8015770:	e7ae      	b.n	80156d0 <__ssvfiscanf_r+0x1ec>
 8015772:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015774:	4621      	mov	r1, r4
 8015776:	4630      	mov	r0, r6
 8015778:	4798      	blx	r3
 801577a:	2800      	cmp	r0, #0
 801577c:	d0a8      	beq.n	80156d0 <__ssvfiscanf_r+0x1ec>
 801577e:	e78b      	b.n	8015698 <__ssvfiscanf_r+0x1b4>
 8015780:	2b04      	cmp	r3, #4
 8015782:	dc06      	bgt.n	8015792 <__ssvfiscanf_r+0x2ae>
 8015784:	466b      	mov	r3, sp
 8015786:	4622      	mov	r2, r4
 8015788:	a941      	add	r1, sp, #260	; 0x104
 801578a:	4630      	mov	r0, r6
 801578c:	f000 f87a 	bl	8015884 <_scanf_i>
 8015790:	e7ac      	b.n	80156ec <__ssvfiscanf_r+0x208>
 8015792:	4b0f      	ldr	r3, [pc, #60]	; (80157d0 <__ssvfiscanf_r+0x2ec>)
 8015794:	2b00      	cmp	r3, #0
 8015796:	f43f aecf 	beq.w	8015538 <__ssvfiscanf_r+0x54>
 801579a:	466b      	mov	r3, sp
 801579c:	4622      	mov	r2, r4
 801579e:	a941      	add	r1, sp, #260	; 0x104
 80157a0:	4630      	mov	r0, r6
 80157a2:	f3af 8000 	nop.w
 80157a6:	e7a1      	b.n	80156ec <__ssvfiscanf_r+0x208>
 80157a8:	89a3      	ldrh	r3, [r4, #12]
 80157aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80157ae:	bf18      	it	ne
 80157b0:	f04f 30ff 	movne.w	r0, #4294967295
 80157b4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80157b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157bc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80157be:	e7f9      	b.n	80157b4 <__ssvfiscanf_r+0x2d0>
 80157c0:	08015431 	.word	0x08015431
 80157c4:	080154ab 	.word	0x080154ab
 80157c8:	080194b1 	.word	0x080194b1
 80157cc:	080195c1 	.word	0x080195c1
 80157d0:	00000000 	.word	0x00000000

080157d4 <_scanf_chars>:
 80157d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157d8:	4615      	mov	r5, r2
 80157da:	688a      	ldr	r2, [r1, #8]
 80157dc:	4680      	mov	r8, r0
 80157de:	460c      	mov	r4, r1
 80157e0:	b932      	cbnz	r2, 80157f0 <_scanf_chars+0x1c>
 80157e2:	698a      	ldr	r2, [r1, #24]
 80157e4:	2a00      	cmp	r2, #0
 80157e6:	bf0c      	ite	eq
 80157e8:	2201      	moveq	r2, #1
 80157ea:	f04f 32ff 	movne.w	r2, #4294967295
 80157ee:	608a      	str	r2, [r1, #8]
 80157f0:	6822      	ldr	r2, [r4, #0]
 80157f2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8015880 <_scanf_chars+0xac>
 80157f6:	06d1      	lsls	r1, r2, #27
 80157f8:	bf5f      	itttt	pl
 80157fa:	681a      	ldrpl	r2, [r3, #0]
 80157fc:	1d11      	addpl	r1, r2, #4
 80157fe:	6019      	strpl	r1, [r3, #0]
 8015800:	6816      	ldrpl	r6, [r2, #0]
 8015802:	2700      	movs	r7, #0
 8015804:	69a0      	ldr	r0, [r4, #24]
 8015806:	b188      	cbz	r0, 801582c <_scanf_chars+0x58>
 8015808:	2801      	cmp	r0, #1
 801580a:	d107      	bne.n	801581c <_scanf_chars+0x48>
 801580c:	682b      	ldr	r3, [r5, #0]
 801580e:	781a      	ldrb	r2, [r3, #0]
 8015810:	6963      	ldr	r3, [r4, #20]
 8015812:	5c9b      	ldrb	r3, [r3, r2]
 8015814:	b953      	cbnz	r3, 801582c <_scanf_chars+0x58>
 8015816:	bb27      	cbnz	r7, 8015862 <_scanf_chars+0x8e>
 8015818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801581c:	2802      	cmp	r0, #2
 801581e:	d120      	bne.n	8015862 <_scanf_chars+0x8e>
 8015820:	682b      	ldr	r3, [r5, #0]
 8015822:	781b      	ldrb	r3, [r3, #0]
 8015824:	f813 3009 	ldrb.w	r3, [r3, r9]
 8015828:	071b      	lsls	r3, r3, #28
 801582a:	d41a      	bmi.n	8015862 <_scanf_chars+0x8e>
 801582c:	6823      	ldr	r3, [r4, #0]
 801582e:	06da      	lsls	r2, r3, #27
 8015830:	bf5e      	ittt	pl
 8015832:	682b      	ldrpl	r3, [r5, #0]
 8015834:	781b      	ldrbpl	r3, [r3, #0]
 8015836:	f806 3b01 	strbpl.w	r3, [r6], #1
 801583a:	682a      	ldr	r2, [r5, #0]
 801583c:	686b      	ldr	r3, [r5, #4]
 801583e:	3201      	adds	r2, #1
 8015840:	602a      	str	r2, [r5, #0]
 8015842:	68a2      	ldr	r2, [r4, #8]
 8015844:	3b01      	subs	r3, #1
 8015846:	3a01      	subs	r2, #1
 8015848:	606b      	str	r3, [r5, #4]
 801584a:	3701      	adds	r7, #1
 801584c:	60a2      	str	r2, [r4, #8]
 801584e:	b142      	cbz	r2, 8015862 <_scanf_chars+0x8e>
 8015850:	2b00      	cmp	r3, #0
 8015852:	dcd7      	bgt.n	8015804 <_scanf_chars+0x30>
 8015854:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015858:	4629      	mov	r1, r5
 801585a:	4640      	mov	r0, r8
 801585c:	4798      	blx	r3
 801585e:	2800      	cmp	r0, #0
 8015860:	d0d0      	beq.n	8015804 <_scanf_chars+0x30>
 8015862:	6823      	ldr	r3, [r4, #0]
 8015864:	f013 0310 	ands.w	r3, r3, #16
 8015868:	d105      	bne.n	8015876 <_scanf_chars+0xa2>
 801586a:	68e2      	ldr	r2, [r4, #12]
 801586c:	3201      	adds	r2, #1
 801586e:	60e2      	str	r2, [r4, #12]
 8015870:	69a2      	ldr	r2, [r4, #24]
 8015872:	b102      	cbz	r2, 8015876 <_scanf_chars+0xa2>
 8015874:	7033      	strb	r3, [r6, #0]
 8015876:	6923      	ldr	r3, [r4, #16]
 8015878:	441f      	add	r7, r3
 801587a:	6127      	str	r7, [r4, #16]
 801587c:	2000      	movs	r0, #0
 801587e:	e7cb      	b.n	8015818 <_scanf_chars+0x44>
 8015880:	080194b1 	.word	0x080194b1

08015884 <_scanf_i>:
 8015884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015888:	4698      	mov	r8, r3
 801588a:	4b74      	ldr	r3, [pc, #464]	; (8015a5c <_scanf_i+0x1d8>)
 801588c:	460c      	mov	r4, r1
 801588e:	4682      	mov	sl, r0
 8015890:	4616      	mov	r6, r2
 8015892:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015896:	b087      	sub	sp, #28
 8015898:	ab03      	add	r3, sp, #12
 801589a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801589e:	4b70      	ldr	r3, [pc, #448]	; (8015a60 <_scanf_i+0x1dc>)
 80158a0:	69a1      	ldr	r1, [r4, #24]
 80158a2:	4a70      	ldr	r2, [pc, #448]	; (8015a64 <_scanf_i+0x1e0>)
 80158a4:	2903      	cmp	r1, #3
 80158a6:	bf18      	it	ne
 80158a8:	461a      	movne	r2, r3
 80158aa:	68a3      	ldr	r3, [r4, #8]
 80158ac:	9201      	str	r2, [sp, #4]
 80158ae:	1e5a      	subs	r2, r3, #1
 80158b0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80158b4:	bf88      	it	hi
 80158b6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80158ba:	4627      	mov	r7, r4
 80158bc:	bf82      	ittt	hi
 80158be:	eb03 0905 	addhi.w	r9, r3, r5
 80158c2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80158c6:	60a3      	strhi	r3, [r4, #8]
 80158c8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80158cc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80158d0:	bf98      	it	ls
 80158d2:	f04f 0900 	movls.w	r9, #0
 80158d6:	6023      	str	r3, [r4, #0]
 80158d8:	463d      	mov	r5, r7
 80158da:	f04f 0b00 	mov.w	fp, #0
 80158de:	6831      	ldr	r1, [r6, #0]
 80158e0:	ab03      	add	r3, sp, #12
 80158e2:	7809      	ldrb	r1, [r1, #0]
 80158e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80158e8:	2202      	movs	r2, #2
 80158ea:	f7ea fcb9 	bl	8000260 <memchr>
 80158ee:	b328      	cbz	r0, 801593c <_scanf_i+0xb8>
 80158f0:	f1bb 0f01 	cmp.w	fp, #1
 80158f4:	d159      	bne.n	80159aa <_scanf_i+0x126>
 80158f6:	6862      	ldr	r2, [r4, #4]
 80158f8:	b92a      	cbnz	r2, 8015906 <_scanf_i+0x82>
 80158fa:	6822      	ldr	r2, [r4, #0]
 80158fc:	2308      	movs	r3, #8
 80158fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015902:	6063      	str	r3, [r4, #4]
 8015904:	6022      	str	r2, [r4, #0]
 8015906:	6822      	ldr	r2, [r4, #0]
 8015908:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801590c:	6022      	str	r2, [r4, #0]
 801590e:	68a2      	ldr	r2, [r4, #8]
 8015910:	1e51      	subs	r1, r2, #1
 8015912:	60a1      	str	r1, [r4, #8]
 8015914:	b192      	cbz	r2, 801593c <_scanf_i+0xb8>
 8015916:	6832      	ldr	r2, [r6, #0]
 8015918:	1c51      	adds	r1, r2, #1
 801591a:	6031      	str	r1, [r6, #0]
 801591c:	7812      	ldrb	r2, [r2, #0]
 801591e:	f805 2b01 	strb.w	r2, [r5], #1
 8015922:	6872      	ldr	r2, [r6, #4]
 8015924:	3a01      	subs	r2, #1
 8015926:	2a00      	cmp	r2, #0
 8015928:	6072      	str	r2, [r6, #4]
 801592a:	dc07      	bgt.n	801593c <_scanf_i+0xb8>
 801592c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8015930:	4631      	mov	r1, r6
 8015932:	4650      	mov	r0, sl
 8015934:	4790      	blx	r2
 8015936:	2800      	cmp	r0, #0
 8015938:	f040 8085 	bne.w	8015a46 <_scanf_i+0x1c2>
 801593c:	f10b 0b01 	add.w	fp, fp, #1
 8015940:	f1bb 0f03 	cmp.w	fp, #3
 8015944:	d1cb      	bne.n	80158de <_scanf_i+0x5a>
 8015946:	6863      	ldr	r3, [r4, #4]
 8015948:	b90b      	cbnz	r3, 801594e <_scanf_i+0xca>
 801594a:	230a      	movs	r3, #10
 801594c:	6063      	str	r3, [r4, #4]
 801594e:	6863      	ldr	r3, [r4, #4]
 8015950:	4945      	ldr	r1, [pc, #276]	; (8015a68 <_scanf_i+0x1e4>)
 8015952:	6960      	ldr	r0, [r4, #20]
 8015954:	1ac9      	subs	r1, r1, r3
 8015956:	f000 f889 	bl	8015a6c <__sccl>
 801595a:	f04f 0b00 	mov.w	fp, #0
 801595e:	68a3      	ldr	r3, [r4, #8]
 8015960:	6822      	ldr	r2, [r4, #0]
 8015962:	2b00      	cmp	r3, #0
 8015964:	d03d      	beq.n	80159e2 <_scanf_i+0x15e>
 8015966:	6831      	ldr	r1, [r6, #0]
 8015968:	6960      	ldr	r0, [r4, #20]
 801596a:	f891 c000 	ldrb.w	ip, [r1]
 801596e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8015972:	2800      	cmp	r0, #0
 8015974:	d035      	beq.n	80159e2 <_scanf_i+0x15e>
 8015976:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801597a:	d124      	bne.n	80159c6 <_scanf_i+0x142>
 801597c:	0510      	lsls	r0, r2, #20
 801597e:	d522      	bpl.n	80159c6 <_scanf_i+0x142>
 8015980:	f10b 0b01 	add.w	fp, fp, #1
 8015984:	f1b9 0f00 	cmp.w	r9, #0
 8015988:	d003      	beq.n	8015992 <_scanf_i+0x10e>
 801598a:	3301      	adds	r3, #1
 801598c:	f109 39ff 	add.w	r9, r9, #4294967295
 8015990:	60a3      	str	r3, [r4, #8]
 8015992:	6873      	ldr	r3, [r6, #4]
 8015994:	3b01      	subs	r3, #1
 8015996:	2b00      	cmp	r3, #0
 8015998:	6073      	str	r3, [r6, #4]
 801599a:	dd1b      	ble.n	80159d4 <_scanf_i+0x150>
 801599c:	6833      	ldr	r3, [r6, #0]
 801599e:	3301      	adds	r3, #1
 80159a0:	6033      	str	r3, [r6, #0]
 80159a2:	68a3      	ldr	r3, [r4, #8]
 80159a4:	3b01      	subs	r3, #1
 80159a6:	60a3      	str	r3, [r4, #8]
 80159a8:	e7d9      	b.n	801595e <_scanf_i+0xda>
 80159aa:	f1bb 0f02 	cmp.w	fp, #2
 80159ae:	d1ae      	bne.n	801590e <_scanf_i+0x8a>
 80159b0:	6822      	ldr	r2, [r4, #0]
 80159b2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80159b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80159ba:	d1bf      	bne.n	801593c <_scanf_i+0xb8>
 80159bc:	2310      	movs	r3, #16
 80159be:	6063      	str	r3, [r4, #4]
 80159c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80159c4:	e7a2      	b.n	801590c <_scanf_i+0x88>
 80159c6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80159ca:	6022      	str	r2, [r4, #0]
 80159cc:	780b      	ldrb	r3, [r1, #0]
 80159ce:	f805 3b01 	strb.w	r3, [r5], #1
 80159d2:	e7de      	b.n	8015992 <_scanf_i+0x10e>
 80159d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80159d8:	4631      	mov	r1, r6
 80159da:	4650      	mov	r0, sl
 80159dc:	4798      	blx	r3
 80159de:	2800      	cmp	r0, #0
 80159e0:	d0df      	beq.n	80159a2 <_scanf_i+0x11e>
 80159e2:	6823      	ldr	r3, [r4, #0]
 80159e4:	05d9      	lsls	r1, r3, #23
 80159e6:	d50d      	bpl.n	8015a04 <_scanf_i+0x180>
 80159e8:	42bd      	cmp	r5, r7
 80159ea:	d909      	bls.n	8015a00 <_scanf_i+0x17c>
 80159ec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80159f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80159f4:	4632      	mov	r2, r6
 80159f6:	4650      	mov	r0, sl
 80159f8:	4798      	blx	r3
 80159fa:	f105 39ff 	add.w	r9, r5, #4294967295
 80159fe:	464d      	mov	r5, r9
 8015a00:	42bd      	cmp	r5, r7
 8015a02:	d028      	beq.n	8015a56 <_scanf_i+0x1d2>
 8015a04:	6822      	ldr	r2, [r4, #0]
 8015a06:	f012 0210 	ands.w	r2, r2, #16
 8015a0a:	d113      	bne.n	8015a34 <_scanf_i+0x1b0>
 8015a0c:	702a      	strb	r2, [r5, #0]
 8015a0e:	6863      	ldr	r3, [r4, #4]
 8015a10:	9e01      	ldr	r6, [sp, #4]
 8015a12:	4639      	mov	r1, r7
 8015a14:	4650      	mov	r0, sl
 8015a16:	47b0      	blx	r6
 8015a18:	f8d8 3000 	ldr.w	r3, [r8]
 8015a1c:	6821      	ldr	r1, [r4, #0]
 8015a1e:	1d1a      	adds	r2, r3, #4
 8015a20:	f8c8 2000 	str.w	r2, [r8]
 8015a24:	f011 0f20 	tst.w	r1, #32
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	d00f      	beq.n	8015a4c <_scanf_i+0x1c8>
 8015a2c:	6018      	str	r0, [r3, #0]
 8015a2e:	68e3      	ldr	r3, [r4, #12]
 8015a30:	3301      	adds	r3, #1
 8015a32:	60e3      	str	r3, [r4, #12]
 8015a34:	1bed      	subs	r5, r5, r7
 8015a36:	44ab      	add	fp, r5
 8015a38:	6925      	ldr	r5, [r4, #16]
 8015a3a:	445d      	add	r5, fp
 8015a3c:	6125      	str	r5, [r4, #16]
 8015a3e:	2000      	movs	r0, #0
 8015a40:	b007      	add	sp, #28
 8015a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a46:	f04f 0b00 	mov.w	fp, #0
 8015a4a:	e7ca      	b.n	80159e2 <_scanf_i+0x15e>
 8015a4c:	07ca      	lsls	r2, r1, #31
 8015a4e:	bf4c      	ite	mi
 8015a50:	8018      	strhmi	r0, [r3, #0]
 8015a52:	6018      	strpl	r0, [r3, #0]
 8015a54:	e7eb      	b.n	8015a2e <_scanf_i+0x1aa>
 8015a56:	2001      	movs	r0, #1
 8015a58:	e7f2      	b.n	8015a40 <_scanf_i+0x1bc>
 8015a5a:	bf00      	nop
 8015a5c:	08017f1c 	.word	0x08017f1c
 8015a60:	08013ded 	.word	0x08013ded
 8015a64:	08015be9 	.word	0x08015be9
 8015a68:	08019607 	.word	0x08019607

08015a6c <__sccl>:
 8015a6c:	b570      	push	{r4, r5, r6, lr}
 8015a6e:	780b      	ldrb	r3, [r1, #0]
 8015a70:	4604      	mov	r4, r0
 8015a72:	2b5e      	cmp	r3, #94	; 0x5e
 8015a74:	bf0b      	itete	eq
 8015a76:	784b      	ldrbeq	r3, [r1, #1]
 8015a78:	1c48      	addne	r0, r1, #1
 8015a7a:	1c88      	addeq	r0, r1, #2
 8015a7c:	2200      	movne	r2, #0
 8015a7e:	bf08      	it	eq
 8015a80:	2201      	moveq	r2, #1
 8015a82:	1e61      	subs	r1, r4, #1
 8015a84:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8015a88:	f801 2f01 	strb.w	r2, [r1, #1]!
 8015a8c:	42a9      	cmp	r1, r5
 8015a8e:	d1fb      	bne.n	8015a88 <__sccl+0x1c>
 8015a90:	b90b      	cbnz	r3, 8015a96 <__sccl+0x2a>
 8015a92:	3801      	subs	r0, #1
 8015a94:	bd70      	pop	{r4, r5, r6, pc}
 8015a96:	f082 0101 	eor.w	r1, r2, #1
 8015a9a:	54e1      	strb	r1, [r4, r3]
 8015a9c:	1c42      	adds	r2, r0, #1
 8015a9e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8015aa2:	2d2d      	cmp	r5, #45	; 0x2d
 8015aa4:	f102 36ff 	add.w	r6, r2, #4294967295
 8015aa8:	4610      	mov	r0, r2
 8015aaa:	d006      	beq.n	8015aba <__sccl+0x4e>
 8015aac:	2d5d      	cmp	r5, #93	; 0x5d
 8015aae:	d0f1      	beq.n	8015a94 <__sccl+0x28>
 8015ab0:	b90d      	cbnz	r5, 8015ab6 <__sccl+0x4a>
 8015ab2:	4630      	mov	r0, r6
 8015ab4:	e7ee      	b.n	8015a94 <__sccl+0x28>
 8015ab6:	462b      	mov	r3, r5
 8015ab8:	e7ef      	b.n	8015a9a <__sccl+0x2e>
 8015aba:	7816      	ldrb	r6, [r2, #0]
 8015abc:	2e5d      	cmp	r6, #93	; 0x5d
 8015abe:	d0fa      	beq.n	8015ab6 <__sccl+0x4a>
 8015ac0:	42b3      	cmp	r3, r6
 8015ac2:	dcf8      	bgt.n	8015ab6 <__sccl+0x4a>
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	3001      	adds	r0, #1
 8015ac8:	4286      	cmp	r6, r0
 8015aca:	5421      	strb	r1, [r4, r0]
 8015acc:	dcfb      	bgt.n	8015ac6 <__sccl+0x5a>
 8015ace:	43d8      	mvns	r0, r3
 8015ad0:	4430      	add	r0, r6
 8015ad2:	1c5d      	adds	r5, r3, #1
 8015ad4:	42b3      	cmp	r3, r6
 8015ad6:	bfa8      	it	ge
 8015ad8:	2000      	movge	r0, #0
 8015ada:	182b      	adds	r3, r5, r0
 8015adc:	3202      	adds	r2, #2
 8015ade:	e7de      	b.n	8015a9e <__sccl+0x32>

08015ae0 <_strtol_l.isra.0>:
 8015ae0:	2b01      	cmp	r3, #1
 8015ae2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ae6:	d001      	beq.n	8015aec <_strtol_l.isra.0+0xc>
 8015ae8:	2b24      	cmp	r3, #36	; 0x24
 8015aea:	d906      	bls.n	8015afa <_strtol_l.isra.0+0x1a>
 8015aec:	f7fc fbb6 	bl	801225c <__errno>
 8015af0:	2316      	movs	r3, #22
 8015af2:	6003      	str	r3, [r0, #0]
 8015af4:	2000      	movs	r0, #0
 8015af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015afa:	4f3a      	ldr	r7, [pc, #232]	; (8015be4 <_strtol_l.isra.0+0x104>)
 8015afc:	468e      	mov	lr, r1
 8015afe:	4676      	mov	r6, lr
 8015b00:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015b04:	5de5      	ldrb	r5, [r4, r7]
 8015b06:	f015 0508 	ands.w	r5, r5, #8
 8015b0a:	d1f8      	bne.n	8015afe <_strtol_l.isra.0+0x1e>
 8015b0c:	2c2d      	cmp	r4, #45	; 0x2d
 8015b0e:	d134      	bne.n	8015b7a <_strtol_l.isra.0+0x9a>
 8015b10:	f89e 4000 	ldrb.w	r4, [lr]
 8015b14:	f04f 0801 	mov.w	r8, #1
 8015b18:	f106 0e02 	add.w	lr, r6, #2
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d05c      	beq.n	8015bda <_strtol_l.isra.0+0xfa>
 8015b20:	2b10      	cmp	r3, #16
 8015b22:	d10c      	bne.n	8015b3e <_strtol_l.isra.0+0x5e>
 8015b24:	2c30      	cmp	r4, #48	; 0x30
 8015b26:	d10a      	bne.n	8015b3e <_strtol_l.isra.0+0x5e>
 8015b28:	f89e 4000 	ldrb.w	r4, [lr]
 8015b2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015b30:	2c58      	cmp	r4, #88	; 0x58
 8015b32:	d14d      	bne.n	8015bd0 <_strtol_l.isra.0+0xf0>
 8015b34:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8015b38:	2310      	movs	r3, #16
 8015b3a:	f10e 0e02 	add.w	lr, lr, #2
 8015b3e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8015b42:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015b46:	2600      	movs	r6, #0
 8015b48:	fbbc f9f3 	udiv	r9, ip, r3
 8015b4c:	4635      	mov	r5, r6
 8015b4e:	fb03 ca19 	mls	sl, r3, r9, ip
 8015b52:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8015b56:	2f09      	cmp	r7, #9
 8015b58:	d818      	bhi.n	8015b8c <_strtol_l.isra.0+0xac>
 8015b5a:	463c      	mov	r4, r7
 8015b5c:	42a3      	cmp	r3, r4
 8015b5e:	dd24      	ble.n	8015baa <_strtol_l.isra.0+0xca>
 8015b60:	2e00      	cmp	r6, #0
 8015b62:	db1f      	blt.n	8015ba4 <_strtol_l.isra.0+0xc4>
 8015b64:	45a9      	cmp	r9, r5
 8015b66:	d31d      	bcc.n	8015ba4 <_strtol_l.isra.0+0xc4>
 8015b68:	d101      	bne.n	8015b6e <_strtol_l.isra.0+0x8e>
 8015b6a:	45a2      	cmp	sl, r4
 8015b6c:	db1a      	blt.n	8015ba4 <_strtol_l.isra.0+0xc4>
 8015b6e:	fb05 4503 	mla	r5, r5, r3, r4
 8015b72:	2601      	movs	r6, #1
 8015b74:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015b78:	e7eb      	b.n	8015b52 <_strtol_l.isra.0+0x72>
 8015b7a:	2c2b      	cmp	r4, #43	; 0x2b
 8015b7c:	bf08      	it	eq
 8015b7e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8015b82:	46a8      	mov	r8, r5
 8015b84:	bf08      	it	eq
 8015b86:	f106 0e02 	addeq.w	lr, r6, #2
 8015b8a:	e7c7      	b.n	8015b1c <_strtol_l.isra.0+0x3c>
 8015b8c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8015b90:	2f19      	cmp	r7, #25
 8015b92:	d801      	bhi.n	8015b98 <_strtol_l.isra.0+0xb8>
 8015b94:	3c37      	subs	r4, #55	; 0x37
 8015b96:	e7e1      	b.n	8015b5c <_strtol_l.isra.0+0x7c>
 8015b98:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8015b9c:	2f19      	cmp	r7, #25
 8015b9e:	d804      	bhi.n	8015baa <_strtol_l.isra.0+0xca>
 8015ba0:	3c57      	subs	r4, #87	; 0x57
 8015ba2:	e7db      	b.n	8015b5c <_strtol_l.isra.0+0x7c>
 8015ba4:	f04f 36ff 	mov.w	r6, #4294967295
 8015ba8:	e7e4      	b.n	8015b74 <_strtol_l.isra.0+0x94>
 8015baa:	2e00      	cmp	r6, #0
 8015bac:	da05      	bge.n	8015bba <_strtol_l.isra.0+0xda>
 8015bae:	2322      	movs	r3, #34	; 0x22
 8015bb0:	6003      	str	r3, [r0, #0]
 8015bb2:	4665      	mov	r5, ip
 8015bb4:	b942      	cbnz	r2, 8015bc8 <_strtol_l.isra.0+0xe8>
 8015bb6:	4628      	mov	r0, r5
 8015bb8:	e79d      	b.n	8015af6 <_strtol_l.isra.0+0x16>
 8015bba:	f1b8 0f00 	cmp.w	r8, #0
 8015bbe:	d000      	beq.n	8015bc2 <_strtol_l.isra.0+0xe2>
 8015bc0:	426d      	negs	r5, r5
 8015bc2:	2a00      	cmp	r2, #0
 8015bc4:	d0f7      	beq.n	8015bb6 <_strtol_l.isra.0+0xd6>
 8015bc6:	b10e      	cbz	r6, 8015bcc <_strtol_l.isra.0+0xec>
 8015bc8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8015bcc:	6011      	str	r1, [r2, #0]
 8015bce:	e7f2      	b.n	8015bb6 <_strtol_l.isra.0+0xd6>
 8015bd0:	2430      	movs	r4, #48	; 0x30
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d1b3      	bne.n	8015b3e <_strtol_l.isra.0+0x5e>
 8015bd6:	2308      	movs	r3, #8
 8015bd8:	e7b1      	b.n	8015b3e <_strtol_l.isra.0+0x5e>
 8015bda:	2c30      	cmp	r4, #48	; 0x30
 8015bdc:	d0a4      	beq.n	8015b28 <_strtol_l.isra.0+0x48>
 8015bde:	230a      	movs	r3, #10
 8015be0:	e7ad      	b.n	8015b3e <_strtol_l.isra.0+0x5e>
 8015be2:	bf00      	nop
 8015be4:	080194b1 	.word	0x080194b1

08015be8 <_strtol_r>:
 8015be8:	f7ff bf7a 	b.w	8015ae0 <_strtol_l.isra.0>

08015bec <__submore>:
 8015bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bf0:	460c      	mov	r4, r1
 8015bf2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015bf8:	4299      	cmp	r1, r3
 8015bfa:	d11d      	bne.n	8015c38 <__submore+0x4c>
 8015bfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015c00:	f7fd f972 	bl	8012ee8 <_malloc_r>
 8015c04:	b918      	cbnz	r0, 8015c0e <__submore+0x22>
 8015c06:	f04f 30ff 	mov.w	r0, #4294967295
 8015c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015c12:	63a3      	str	r3, [r4, #56]	; 0x38
 8015c14:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8015c18:	6360      	str	r0, [r4, #52]	; 0x34
 8015c1a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8015c1e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015c22:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8015c26:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015c2a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8015c2e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8015c32:	6020      	str	r0, [r4, #0]
 8015c34:	2000      	movs	r0, #0
 8015c36:	e7e8      	b.n	8015c0a <__submore+0x1e>
 8015c38:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8015c3a:	0077      	lsls	r7, r6, #1
 8015c3c:	463a      	mov	r2, r7
 8015c3e:	f7fe fe77 	bl	8014930 <_realloc_r>
 8015c42:	4605      	mov	r5, r0
 8015c44:	2800      	cmp	r0, #0
 8015c46:	d0de      	beq.n	8015c06 <__submore+0x1a>
 8015c48:	eb00 0806 	add.w	r8, r0, r6
 8015c4c:	4601      	mov	r1, r0
 8015c4e:	4632      	mov	r2, r6
 8015c50:	4640      	mov	r0, r8
 8015c52:	f7fd f8d3 	bl	8012dfc <memcpy>
 8015c56:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8015c5a:	f8c4 8000 	str.w	r8, [r4]
 8015c5e:	e7e9      	b.n	8015c34 <__submore+0x48>

08015c60 <_gettimeofday>:
 8015c60:	4b02      	ldr	r3, [pc, #8]	; (8015c6c <_gettimeofday+0xc>)
 8015c62:	2258      	movs	r2, #88	; 0x58
 8015c64:	601a      	str	r2, [r3, #0]
 8015c66:	f04f 30ff 	mov.w	r0, #4294967295
 8015c6a:	4770      	bx	lr
 8015c6c:	20000c84 	.word	0x20000c84

08015c70 <_init>:
 8015c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c72:	bf00      	nop
 8015c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c76:	bc08      	pop	{r3}
 8015c78:	469e      	mov	lr, r3
 8015c7a:	4770      	bx	lr

08015c7c <_fini>:
 8015c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c7e:	bf00      	nop
 8015c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c82:	bc08      	pop	{r3}
 8015c84:	469e      	mov	lr, r3
 8015c86:	4770      	bx	lr
